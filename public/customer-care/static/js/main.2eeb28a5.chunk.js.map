{"version":3,"sources":["Pages/CustomerCarePage/GlobalFunction.tsx","Pages/CustomerCarePage/Components/InputField.tsx","Pages/CustomerCarePage/API.tsx","Pages/CustomerCarePage/Components/CustomTable.tsx","Pages/CustomerCarePage/Components/IconButton.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/CheckContractSection.tsx","../@hims/core/dist/index.es.js","Pages/CustomerCarePage/Components/TextButton.tsx","Pages/CustomerCarePage/LeftPanelSection/SearchedMembersList.tsx","Pages/CustomerCarePage/Components/Loading.tsx","Pages/CustomerCarePage/Components/TypeValueField.tsx","Pages/CustomerCarePage/LeftPanelSection/MemberDataSection.tsx","Pages/CustomerCarePage/Processmaker.tsx","Pages/CustomerCarePage/LeftPanelSection/ClientDataSection.tsx","Pages/CustomerCarePage/LeftPanelSection/SearchedClientsList.tsx","Pages/CustomerCarePage/Payloads.tsx","Pages/CustomerCarePage/LeftPanelSection/LeftPanelSection.tsx","Pages/CustomerCarePage/Components/Dropdown.tsx","Pages/CustomerCarePage/Components/DetailedDropdown.tsx","Pages/CustomerCarePage/Components/DetailedNumberField.tsx","Pages/CustomerCarePage/Components/DatePicker.tsx","Pages/CustomerCarePage/CreateTicketPage/Components/ConfinementSection.tsx","Pages/CustomerCarePage/Components/NumberField.tsx","Pages/CustomerCarePage/Components/CustomCheckbox.tsx","Pages/CustomerCarePage/CreateTicketPage/Components/AvailmentSection.tsx","Pages/CustomerCarePage/Components/CustomDropzone.tsx","Pages/CustomerCarePage/Components/InputArea.tsx","Pages/CustomerCarePage/Components/CustomChip.tsx","Pages/CustomerCarePage/CreateTicketPage/Components/TicketInfoSection.tsx","Pages/CustomerCarePage/Components/InputChip.tsx","Pages/CustomerCarePage/CreateTicketPage/Components/InquirySection.tsx","Pages/CustomerCarePage/CreateTicketPage/Components/ConsultationSection.tsx","Pages/CustomerCarePage/CreateTicketPage/Components/EmergencyRoomSection.tsx","Pages/CustomerCarePage/TicketFooter.tsx","Pages/CustomerCarePage/Components/CustomTab.tsx","Pages/CustomerCarePage/CreateTicketPage/Components/ClientProfileSection/BasicInformationSection.tsx","Pages/CustomerCarePage/CreateTicketPage/Components/ClientProfileSection/ClientProfileSection.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/PartnerNetworkSection.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/CheckUtilizationSection.tsx","Pages/CustomerCarePage/CreateTicketPage/CreateTicketPage.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/SummarySection.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/CRUDTable.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/UpdateSection.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/AccommodationsSection.tsx","Pages/CustomerCarePage/Components/CustomRadio.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/DiagnosesSection.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/PhysiciansSection.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/ProceduresSection.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/OtherDetailsSection.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/DischargeDetailsSection.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/UploadedDocumentsSection.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/UpdateInquirySection.tsx","Pages/CustomerCarePage/Components/CustomModal.tsx","Pages/CustomerCarePage/UpdateTicketPage/UpdateTicketPage.tsx","Pages/Home/Loadable.tsx","Pages/CustomerCarePage/Components/ComplexTable.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/ApproveAvailmentSection.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/CheckBenefitSection.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/SummaryAvailmentSection.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/TicketInfoModal.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/ReviewTicketsSection.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/ApproveInpatientSection.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/ApproveConsultationSection.tsx","Pages/CustomerCarePage/ResolveTicketPage/ResolveTicketPage.tsx","Pages/TicketList/Loadable.tsx","Pages/CustomerCarePage/Components/DetailedInputField.tsx","Pages/CustomerCarePage/AdvanceSearch/AdvanceSearch.tsx","Containers/App/index.tsx","i18n.ts","Containers/App/constants.ts","Containers/App/reducer.ts","app.tsx","reducers.ts"],"names":["GlobalFunction","fname","mname","lname","getIntials","num","isDecimal","toFixed","toString","replace","text","initials","wordArray","split","i","length","substring","toUpperCase","paramDate","date","Date","day","getDate","monthIndex","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","seconds","getSeconds","meridian","newSec","toLocaleString","fromDate","toDate","getTime","valueList","Math","round","index","birthDate","ageInMillis","now","abs","getUTCFullYear","ticketType","specificType","appNo","tempString","InputField","props","_state","this","placeholder","value","error","dynamicStyle","borderColor","undefined","className","disabled","type","style","onChange","event","charLimit","target","textAlign","React","backendUrl","process","API","url","success","fail","fetch","method","headers","then","response","json","data","catch","body","customHeader","JSON","stringify","CustomTable","handleChangePage","_event","page","setState","handleChangeRowsPerPage","rowsPerPage","parseInt","resetPage","getSlicedData","rowsPerPageOptions","startingItem","state","rows","slice","filterData","overflow","canOverflow","stickyHeader","columns","map","column","label","renderHeader","renderRow","row","j","colSpan","noRowsMessage","paginationClass","count","labelDisplayedRows","info","onChangeInfo","from","to","labelRowsPerPage","onChangePage","onChangeRowsPerPage","IconButton","onClick","icon","size","CheckContractSection","contractUrls","contractListUpdated","get","memberId","console","log","benefit","_id","pdfUrl","execPath","viewerUrl","paddingTop","width","height","src","Object","freeze","index$1","index$2","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","service_worker","URL","href","origin","addEventListener","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","index$3","ServiceWorker","index$4","BaseTheme","createMuiTheme","palette","primary","main","contrastText","secondary","typography","fontFamily","button","fontWeight","fontSize","textTransform","overrides","MuiDialog","root","MuiDialogTitle","color","MuiDialogContentText","MuiFormControlLabel","MuiIconButton","MuiButton","containedPrimary","boxShadow","backgroundColor","containedSecondary","border","outlinedSecondary","_extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","_assign","assign","t","s","n","arguments","call","apply","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","__generator","f","y","g","_","sent","trys","ops","verb","Symbol","iterator","v","op","TypeError","pop","push","__spreadArrays","il","r","k","a","jl","borderCss","borderRadius","useStyles","makeStyles","theme","createStyles","control","borderBottomColor","input","display","select","marginTop","spacing","valueContainer","flexWrap","flex","alignItems","noOptionsMessage","padding","singleValue","position","left","bottom","paper","zIndex","right","inputComponent","_a","inputRef","getOwnPropertySymbols","propertyIsEnumerable","__rest","createElement","ref","components","Control","children","innerProps","innerRef","selectProps","classes","TextFieldProps","TextField","InputProps","inputProps","variant","fullWidth","Menu","Paper","square","Option","MenuItem","selected","isFocused","component","isSelected","NoOptionsMessage","Typography","Placeholder","SingleValue","ValueContainer","useState","single","setSingle","FormControl","NoSsr","inputId","options","suggestions","optionItem","isSearchable","isClearable","defaultProps","index$5","InputAutocomplete","borderCss$1","useStyles$1","textField","currentValue","setcurrentValue","id","defaultValue","chips","multiline","index$6","InputChipTextField","borderCss$2","borderStyles","useStyles$2","formControl","selectEmpty","marginRight","StyledOutlinedInput","withStyles","OutlinedInput","items","defVal","find","item","getDefaultValue","setCurrentValue","inputLabel","useRef","labelWidth","InputLabel","htmlFor","Select","selectedItem","name","IconComponent","selectItem","displaySelectItem","required","key","index$7","InputSelect","borderCss$3","borderStyles$1","useStyles$3","errorIcon","float","StyledOutlinedInput$1","FormHelperText","errorMessage","index$8","InputSelectSetValue","useStyles$4","borderCss$4","StyledTextField","index$9","InputTextField","useStyles$5","inputSelect","marginBottom","dialog","align","justify","dialogContent","container","paddingRight","paddingLeft","dialogTitle","dialogContentTitle","dialogContentText","formControlLabel","checkBox","dialogAction","justifyContent","resolveDialogAction","leftButton","marginLeft","rightButton","StyledCheckbox","checked","Checkbox","notes","notesError","isResolved","_b","setDisabled","handleClose","onClose","setFieldValue","fieldName","setFieldError","toLowerCase","Grid","direction","xs","DialogTitle","disableTypography","DialogContent","DialogContentText","FormControlLabel","checkedIcon","labelPlacement","DialogActions","Button","onSubmit","selectItems","Dialog","open","isModalOpen","index$a","TicketModal","styles","_super","SampleCoreComponent","render","Component","index$b","useStyles$6","appBar","breakpoints","up","menuButton","logo","badge","grow","flexGrow","AppBar","Toolbar","edge","menuOnClick","Link","logoImage","alt","userOnClick","Avatar","userImage","badgeCount","propTypes","number","useStyles$7","sideBar","listItem","flexDirection","listItemIcon","minWidth","avatar","avatarSelected","listItemText","listItemTextSelected","iconSelected","divider","ListItemLink","ListItem","isSelectedSidebar","sidebarItem","selectedSidebar","localStorage","getItem","sidebarChanged","setSidebarChanged","dashboard","members","proposals","clients","tickets","reports","templates","help","sidebarSelected","setSidebarSelected","onStorageChange","useEffect","removeEventListener","handleDashboardOnClick","attr","setItem","handleSidebarClick","List","ListItemIcon","ListItemText","Divider","useStyles$8","drawer","flexShrink","drawerPaper","content","toolbar","mixins","useStyles$9","gridContainer","breadCrumbs","headerTitle","linkPrevious","cursor","linkCurrent","index$c","Breadcrumbs","useStyles$a","nameFontSize","valueFontSize","useStyles$b","grid","string","useCirclePrimitive","circlePrimitiveStyle","top","rotate","delay","margin","opacity","animation","animationDelay","useStyles$c","useStyles$d","previous_page","textDecoration","current_page","useStyles$e","minHeight","buttonTitle","buttonSubTitle","rightButtons","leftButtons","useStyles$f","sidebar","maxWidth","contentgrid","flexBasis","index$d","LoadingIndicator","AppHeader","AppSidebar","AuthenticatedLayout","mobileOpen","setMobileOpen","handleDrawerToggle","Hidden","smUp","implementation","Drawer","xsDown","PageHeader","ClientInfoItem","GridHorizontalDivider","BreadcrumbsComponent","FloatingButtons","PageLayout","newPlacement","anchorEl","setAnchorEl","_c","setOpen","_d","placement","setPlacement","logolink","Popper","transition","TransitionProps","Fade","timeout","onLogout","currentTarget","prev","index$e","Actions","Definitions","Reducers","Services","Stores","UI","checkStore","store","shape","dispatch","subscribe","getState","replaceReducer","runSaga","injectedReducers","injectedSagas","DAEMON","ONCE_TILL_UNMOUNT","constants","RESTART_ON_REMOUNT","injectReducerFactory","createReducer","isValid","reducer","Reflect","has","getInjectors","injectReducer","allowedModes","descriptor","saga","mode","_mode","includes","injectSagaFactory","args","newDescriptor","hasSaga","task","ejectSagaFactory","cancel","getInjectors$1","injectSaga","ejectSaga","ResponseError","_this","statusText","Error","parseJSON","checkStatus","ActionTypes","index$f","configureStore","initialState","history","composeEnhancers","sagaMiddleware","middlewares","enhancers","run","hocWithReducer","WrappedComponent","ReducerInjector","context","displayName","useInjectReducer","hocWithSaga","InjectSaga","injectors","componentWillUnmount","useInjectSaga","loadable","importFunc","fallback","LazyComponent","getReducerInjectors","request","getSagaInjectors","index$g","componentProps","ThemeProvider","basename","ActionTypes$1","locale","selectLanguage","language","enTranslationMessages","formatTranslationMessages","messages","defaultFormattedMessages","keys","reduce","formattedMessages","formattedMessage","stateSelector","languageState","index$h","Provider","Children","only","appLocales","messageProviderReducer","action","CHANGE_LOCALE","payload","header","scope","defaultMessage","index$i","Document","Message","NotFoundPage","TextButton","SearchedMembersList","getExtractedMembers","filter","trim","member","searchText","renderMemberShortDetail","firstName","middleName","lastName","onSelectMember","clientName","Loading","CircularProgress","TypeValueField","classNamePrefix","choices","choice","onChangeType","onChangeValue","MemberDataSection","getBenefitsLimit","limits","benefits","forEach","targetLimitIndex","limit","limitType","recentTickets","disableRecentTickets","getRecentTicketsData","toNameFormat","client","registeredName","toShortDateString","age","getAge","contractStatus","contract","isVip","loadingBenefits","formatNumber","limitUnit","gender","civilStatus","loadingRecentTickets","renderTableHeader","rowData","renderTableRow","TableCell","recentTicket","TableRow","ticketNo","dateUpdated","Processmaker","ClientDataSection","corporateAccountNo","linkedTickets","disableLinkedTickets","getLinkedTicketsData","mainAddress","mainOfficeAddress","barangay","city","region","cardName","startDate","endDate","salesChannel","contactPersons","contactNo","renderRecentTicketHeader","renderRecentTicketRow","ticket","dateCreated","SearchedClientsList","getExtractedClients","clientId","onSelectClient","Payloads","uploadedFiles","confinement","availment","inquiries","consultation","transaction_no","transactionNo","received_via","ticketChannel","received_from","ticketSource","member_name","memberName","corporate_client","broker","brokerName","hospital_name","facility","department","caller_name","callerName","contact_no","additional_notes","additionalNotes","supporting_documents","file","path","ticket_category","ticket_type","specific_type","urgency","assign_to","agent","availment_details","provider","availments_list","diagnoses","code","icd10Code","remarks","is_primary","is_final","doctors","specialization","fee","no_of_visits","procedures","procedure","cptCode","amount","doctor","phic","isPHIC","date_added","assessment_type","assessmentType","assessment_remarks","assessmentRemarks","approved_amount","approvedAmount","confinement_details","date_admitted","dateAdmitted","confinement_kind","confinementKind","gift_given","updates","room_accommodation","room_type","roomType","no_of_days","cost","costPerDay","initialDiagnosis","params","others","coverage","final_bill","philhealth_amount","discharge_date","consultation_details","diagnosis","inquiry_details","inquiry_list","inquiry","detail","specific_detail","specificDetail","answer","related_tickets","relatedTickets","support_docs","pmaker_case_uid","date_created","date_updated","date_escalated","created_by","createdBy","tmp","user_id","module","timestamp","member_id","member_data","is_vip","last_name","middle_name","first_name","client_id","client_data","registered_name","loa","doc_name","docName","field","giftGiven","update","hospital_bill","hospitalBill","accommodations","accommodation","days","primaryDiagnosisIndex","isFinal","physicians","physician","visits","ticket_no","paid_by","paidBy","philhealthAmount","finalBill","dischargeDate","pmCaseId","approval_code","approvalCode","loas","isPrimary","noOfVisits","dateAdded","generate_approval_code","loa_no","loaNo","date_of_birth","civil_status","latest_contract","custom_metadata","coverage_start_date","coverage_end_date","getClientData","getAddress","address","floor","unit","bldgNo","bldg_no","bldgName","bldg_name","street","brgy","zipCode","zip_code","contactNos","contact_numbers","contact","no","contact_persons","email","email_address","designation","brandName","brand_name","name_on_card","corporate_account_no","tinNo","tin_no","vatType","vat_type","evatNo","evat_no","industry","ownership","years","years_of_existence","prevHMOProvider","prev_hmo_provider","prevHMOEffectivityDate","prev_hmo_effectivity_date","prevHMOExpiryDate","prev_hmo_expiry_date","secRegNo","sec_reg_no","authSignatory","authorized_signatory","authContactNo","authorized_signatory_contact_no","authEmail","authorized_signatory_email_address","authDesignation","authorized_signatory_designation","sourceOfFunds","sources_of_funds","sales_channel","agent_name","company","company_name","contactName","contact_person","main_office_address","branches","branch","ticketCategory","additionalFiles","dateEscalated","providerData","parseFloat","concat","files","LeftPanelSection","idTypes","getMemberData","onUpdateMemberStateChange","onUpdateClientStateChange","getMemberBenefit","loadingMember","combineNodes","level","category","parent_name","limit_unit","parentNodes","childNodes","parent","child","foundChild","childNode","loadingClient","targetId","processmakerParticipated","cases","matchedCase","caseItem","app_uid","generateTicketNumber","app_number","loadingLinkedTickets","onSearchChanged","trimmedValue","splitValue","searchIDType","slicedText","sliceClientID","sliceMemberID","newValue","join","searchIDValue","loadingClients","isClientsLoaded","loadingMembers","isMembersLoaded","ticketStatus","renderSearchArea","renderTopArea","promptChooseMember","renderTicketData","faSearch","toDateAndTime","Dropdown","isDisabled","onInputChange","filterOption","option","rawInput","hasNoInput","choicesAreShort","inputIsShort","isInputMatch","DetailedDropdown","DetailedNumberField","targetNewValue","charAt","isFloat","onFocus","numberValue","isNaN","newStringValue","DatePicker","utils","MomentUtils","format","minDate","ConfinementSection","confinementTypes","facilities","createTicketAttemp","refreshConfinementState","cptCodes","NumberField","disableDelimiter","CustomCheckbox","AvailmentSection","itemToEditIndex","icd10CodeToEdit","doctorToEdit","filteredICD10","icd10Codes","isSame","totalCost","diagnosisIndex","refreshAvailmentState","getFilteredICD10","faPlus","pushBlankDiagnosis","lineHeight","faCheckCircle","faTimesCircle","getProcedureCosts","faPen","faMinusCircle","splice","procedureIndex","renderProcedureDetails","stateProcedure","stateProcedures","pushBlankProcedures","CustomDropzone","multiple","onDrop","acceptedFiles","accept","getRootProps","getInputProps","faFileUpload","InputArea","defaultRows","TextareaAutosize","CustomChip","Chip","onDelete","TicketInfoSection","ticketChannels","ticketSources","ticketTypes","specificTypes","urgencies","agents","refreshTicketState","InputChip","fullWidthInput","onAdd","chip","_chip","InquirySection","supportDocs","refreshInquiryState","filteredInquiries","getFilteredInquiries","onAddInquiry","onRemoveInquiry","doc","ConsultationSection","refreshConsultationState","EmergencyRoomSection","chiefComplaint","editIcon","deleteIcon","TicketFooter","interval","setInterval","time","onSaveForNow","lastSave","getTimeDeffirence","onResolveTicket","onSubmitTicket","onAssign","disableAssign","onEscalate","disableEscalate","onUpdateTicket","onFinalAssessment","disableFinalAssessment","onSummarizeAssessment","onGenerateApprovalCode","onCloseTicket","disableCloseTicket","CustomTabs","Tabs","selectedTab","scrollButtons","indicatorColor","setSelectedTab","tabList","tab","Tab","BasicInformationSection","yearsAndCount","brokerCompany","renderItem","headerName","ClientProfileSection","informationTabs","accountTabs","activitiesTabs","renderSideBar","renderMainContent","borderRight","renderSideTabs","tabs","orientation","PartnerNetworkSection","dummyData","groupChoices","filterCode","filterName","filterLocation","groups","constructPartnerNetworkData","benefit_plan_tree","targetNodeId","node","partner_network_list","pnGroups","pnFacilities","group","pnGroup","attrName","isAsc","sort","faCheck","faTimes","getFilteredFacilitiesData","renderHeaderColumn","headerText","faSort","sortFacilities","prevState","CheckUtilizationSection","swipe","desc","sessions","dateAvailed","loaId","label1","label2","maxValue","utilization","toCommonDateString","Line","CreateTicketPage","uploadFiles","nextAction","hasFiles","FormData","append","isSaving","postFormData","uploadResponse","snackbarMessage","submitTicket","getPostTicketPayload","post","postTicketResponse","submitTicketProcessMaker","ticketId","is_availment","casesResponse","processmakerExecuteTrigger","appUID","triggerId","put","triggerResponse","processmakerVariable","variableResponse","patchCaseUID","patch","patchTicketResponse","redirectToNextPage","saveForNow","tabSelected","isIcd10CodesLoaded","loadedResources","facility_id","tempIcd10Codes","parse","full_code","abbreviated_description","tempCptCodes","debug","RESOURCES_TO_LOAD","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","message","min","SummarySection","getTotalAccommodationCost","getTotalPhysicianCost","getTotalProcedureCost","getTotalItemCost","renderSection","scroll","pageYOffset","setTabSelected","miniText","tabIndex","table","totalValue","CRUDTable","handleOnChange","rowToEdit","editField","onFormat","Table","TableHead","cols","colName","onHeaderFormat","TableBody","index1","index2","renderCell","onDeleteRow","onSaveEditRow","UpdateSection","onFormatTableHeader","colIndex","onFormatCRUDTable","refreshUpdatesState","tempData","unshift","_rowIndex","currentVal","AccommodationsSection","getTotalCost","facilitiesList","_value","refreshAccommodationsState","renderAddRoomAccommodation","renderConfinementDetails","CustomRadio","Radio","checkedCondition","DiagnosesSection","rowIndex","setPrimaryDiagnosisIndex","filteredIcd10","diagnosesList","getFilteredICD10Codes","refreshDiagnosisStateChange","PhysiciansSection","physiciansList","refreshPhysiciansStateChange","ProceduresSection","proceduresList","refreshProceduresStateChange","OtherDetailsSection","itemTypes","refreshItemsStateChange","DischargeDetailsSection","coverageList","onUpdateTicketStateChange","UploadedDocumentsSection","refreshFilesStateChange","UpdateInquirySection","CustomModal","Modal","isOpen","closeAfterTransition","in","renderContent","renderFooter","UpdateTicketPage","errors","loadTicketData","getTicketData","getConfinementData","getErrorList","errorDiagnosis","matched","targets","fileData","apiUpdateTicket","getPutTicketPayload","processmakerGetCase","caseId","processmakerRouteCase","tab_selected","update_state","updateState","accommodation_state","accommodationState","diagnosis_state","diagnosisState","physician_state","physicianState","procedure_state","procedureState","other_detail_state","otherDetailState","file_state","fileState","isAssessmentModalOpen","renderInpatientContent","renderInquiryContent","Utils","Components","HomePage","mapStateToProps","mapDispatchToProps","connect","default","ComplexTable","backColor","ApproveAvailmentSection","getProceduresCost","total","getApprovedAvailmentsCost","headerNameStyle","_index","renderProcedure","CheckBenefitSection","getFilteredBenefitsData","benefitCategory","benefitName","benefitListUpdated","loadBenefitsData","renderBenefitsList","sortBenefits","SummaryAvailmentSection","APPROVED","DISAPPROVED","PENDING","loaTypes","getApprovedAvailments","getDisapprovedAvailments","loaNumber","loaDate","renderAvailment","approvedAvailments","disapprovedAvailments","canEditLOAs","renderLOAHeader","renderLOARow","canEdit","refreshLOAStates","loaToDelete","TicketInfoModal","availmentDetails","confinementDetails","onCloseButtonClicked","renderTicketInfo","getTotalAailmentProcedureCost","ReviewTicketsSection","getFilteredTicketData","channel","source","assignee","lastUpdate","urgencyColor","selectedTicketId","ticketListUpdated","sortTickets","ApproveInpatientSection","getAttendingPhysicianCost","getAvailmentCost","getAllAvailmentsCost","getAllProceduresCount","renderTabs","renderSummarySection","renderDiagnosisSection","proceduresCount","borderBottom","renderDiagnosisInfo","procedureCost","accommodationCost","attendingPhysicianCost","renderTableSection","ApproveConsultationSection","ResolveTicketPage","onUpdateAssessment","getPutUpdateAssessmentPayload","delete","onResolve","onResolveProcessmaker","returnToTicketList","allAvailmentIsDisapproved","isSummarizing","pmId","diagnosisData","doctorData","renderOutpatientContent","renderConsultationContent","TicketListPage","DetailedInputField","AdvanceSearch","_data","createBrowserHistory","Containers","routes","exact","App","Helmet","titleTemplate","defaultTitle","renderRoutes","route","require","translationMessages","en","loading","currentUser","userData","repositories","appReducer","LOAD_REPOS","LOAD_REPOS_SUCCESS","username","repos","LOAD_REPOS_ERROR","rest","MessageProvider","openSansObserver","FontFaceObserver","combineReducers","global","globalReducer","router","connectRouter","MOUNT_NODE","document","getElementById","ReactDOM","load","classList","add","Intl","all","err"],"mappings":"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","file":"static/js/main.2eeb28a5.chunk.js","sourcesContent":["\n\n\n\nexport class GlobalFunction {\n\n    static toNameFormat(fname: string, mname: string, lname: string) {\n        return `${fname} ${GlobalFunction.getIntials(mname)} ${lname}`;\n    }\n\n    static formatNumber(num: number, isDecimal: boolean = false) {\n        let value = '';\n        if (isDecimal) {\n            value = num.toFixed(2);\n        } else {\n            value = num.toString();\n        }\n        return value.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n    }\n\n\n    static getIntials(text: string) {\n        var initials = '';\n        var wordArray = text.split(' ');\n        for (var i = 0; i < wordArray.length; i++) {\n            initials += wordArray[i].substring(0,1).toUpperCase() + '.';\n        }\n        return initials;\n    }\n\n    static toCommonDateString(paramDate: Date | string) {\n        let date = typeof paramDate === 'string' ? new Date(paramDate) : paramDate;\n        if (date) {\n            const monthNames = [\n                \"January\", \"February\", \"March\",\n                \"April\", \"May\", \"June\", \"July\",\n                \"August\", \"September\", \"October\",\n                \"November\", \"December\"\n            ];\n            const day = date.getDate();\n            const monthIndex = date.getMonth();\n            const year = date.getFullYear();\n            return (monthNames[monthIndex] + \" \" + day + \", \" + year);\n        }\n\n        return '';\n    }\n\n    static toShortDateString(paramDate: Date | string) {\n        let date = typeof paramDate === 'string' ? new Date(paramDate) : paramDate;\n        if (date) {\n            const monthNames = [\n                \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \n                \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n            ];\n            const day = date.getDate();\n            const monthIndex = date.getMonth();\n            const year = date.getFullYear();\n            return (monthNames[monthIndex] + \" \" + day + \", \" + year);\n        }\n\n        return '';\n    }\n\n    static toDateAndTime(paramDate: Date | string) {\n        let date = typeof paramDate === 'string' ? new Date(paramDate) : paramDate;\n        if (date) {\n            const monthNames = [\n                \"January\", \"February\", \"March\",\n                \"April\", \"May\", \"June\", \"July\",\n                \"August\", \"September\", \"October\",\n                \"November\", \"December\"\n            ];\n            const day = date.getDate();\n            const monthIndex = date.getMonth();\n            const year = date.getFullYear();\n            const hours = date.getHours() - (date.getHours() > 12 ? 12 : 0);\n            const minutes = date.getMinutes();\n            const seconds = date.getSeconds();\n            const meridian = (date.getHours() > 12 ? \"PM\" : \"AM\");\n            \n            var newSec = '0' + seconds;\n            if (seconds.toLocaleString().length !== 1) newSec = seconds.toLocaleString()\n\n            return (\n                monthNames[monthIndex] + \" \" + \n                day + \", \" + \n                year + \" - \" + \n                hours + \":\" + \n                minutes + \":\" + \n                newSec + \" \" + \n                meridian);\n        }\n\n        return '';\n    }\n\n    static getTimeDeffirence(fromDate: Date, toDate: Date) {\n        const seconds = (toDate.getTime() - fromDate.getTime()) / 1000;\n        const scaleList = [ \n            ['day', 'days'], \n            ['hour', 'hours'], \n            ['minute', 'minutes'], \n            ['second', 'seconds'] \n        ];\n        const valueList = [\n            Math.round(seconds / 86400),\n            Math.round(seconds / 3600) % 24,\n            Math.round(seconds / 60) % 60,\n            Math.round(seconds) % 60\n        ];\n        \n        let index = 0;\n        for (let i = 0; i < valueList.length; i++) {\n            if (valueList[i] > 0) {\n                index = i;\n                break;\n            }\n        }\n\n        if (index) {\n            return `${valueList[index]} ${scaleList[index][valueList[index] == 1 ? 0 : 1]}`\n        }\n        return '';\n    }\n\n    static getAge(birthDate: any) {\n        if (birthDate) {\n            var ageInMillis = Date.now() - birthDate;\n            return Math.abs(new Date(ageInMillis).getUTCFullYear() - 1970);\n        }\n\n        return null;\n    }\n\n    static generateTicketNumber(ticketType: string, specificType: string, appNo: string) {\n        const ticketTypes = {\n            \"Availment\": \"AVL\",\n            \"Inquiry\": \"INQ\"\n        };\n        const specificTypes = {\n            \"Inpatient\": \"INP\",\n            \"Outpatient Procedure\": \"OP\",\n            \"Emergency Room\": \"ER\",\n            \"Maternity\": \"MAT\",\n            \"Consultation\": \"CON\"\n        }\n        const tempString = (ticketType === 'Inquiry' ? '' : `${specificTypes[specificType]}-`);\n        return `${ticketTypes[ticketType]}-${tempString}${appNo}`;\n    }\n}","import * as React from 'react';\n// import { InputBase } from '@material-ui/core';\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\nimport './component-style.scss';\n\ninterface IProps {\n    value: string;\n    onChange: (value: string) => void;\n\n    placeholder?: string;\n    error?: boolean;\n    icon?: IconProp;\n    disabled?: boolean;\n    charLimit?: number;\n}\n\nexport class InputField extends React.Component<IProps> {\n\n    \n\n    shouldComponentUpdate(props: IProps, _state: any) {\n        return (\n            (this.props.placeholder !== props.placeholder) ||\n            (this.props.value !== props.value) ||\n            (this.props.error !== props.error)\n        );\n    }\n\n    render(): JSX.Element {\n        const self = this;\n        const dynamicStyle = {\n            borderColor: (self.props.error ? '#E53935' : undefined)\n        };\n\n        return (\n            <div className='input-field-container'>\n                {this.props.placeholder ? (\n                    <div className={this.props.disabled ? 'text-disabled text' : 'text'}>\n                        {this.props.placeholder}\n                    </div>\n                ) : null}\n                <input type='text' \n                    disabled={this.props.disabled}\n                    className={this.props.disabled ? 'text-field-disabled text-field' : 'text-field'}\n                    style={dynamicStyle}\n                    // fullWidth \n                    value={this.props.value}\n                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                        const condition = \n                            this.props.charLimit ? (\n                                event.target.value.length <= this.props.charLimit \n                            ) : (true) ;\n                            \n                        if (condition) {\n                            this.props.onChange(event.target.value);\n                        }\n                    }} />\n                {this.props.charLimit ? (\n                    <>\n                    <div className='text' />\n                    <div \n                        className={this.props.disabled ? 'text-disabled text' : 'text'}\n                        style={{textAlign: 'right'}}>\n                            {`${this.props.value.length}/${this.props.charLimit}`}\n                    </div>\n                    </>\n                ) : null}\n                \n            \n            </div>\n        );\n    }\n}","\nlet backendUrl = process.env.REACT_APP_BASE_URL;\n\nexport class API {\n\n    static getUrl() {\n        return process.env.REACT_APP_BASE_URL;\n    }\n\n    static async get(url: string, success: Function, fail: Function) {\n        fetch(backendUrl + url, {\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json' }\n        })\n        .then(response => response.json())\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n\n    static async post(url: string, \n                      body: any,\n                      success: Function, \n                      fail: Function,\n                      customHeader: any = { 'Content-Type': 'application/json' }) {\n        fetch(backendUrl + url, {\n            method: 'POST',\n            headers: customHeader,\n            body: body\n        })\n        .then(response => response.json())\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n\n    static async postFormData(url: string, body: any, success: Function, fail: Function) {\n        fetch(backendUrl + url, {\n            method: 'POST',\n            body: body\n        })\n        .then(response => response.json())\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n\n    static async put(url: string, body: any, success: Function, fail: Function) {\n        fetch(backendUrl + url, {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(body)\n        })\n        .then(response => response)\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n\n    static async patch(url: string, body: any, success: Function, fail: Function) {\n        fetch(backendUrl + url, {\n            method: 'PATCH',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(body)\n        })\n        .then(response => response)\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n\n    static async delete(url: string, body: any, success: Function, fail: Function) {\n        fetch(backendUrl + url, {\n            method: 'DELETE',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(body)\n        })\n        .then(response => response)\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n}","import * as React from 'react';\nimport { Table, TableBody, TableHead, TableRow, TablePagination, TableCell } from '@material-ui/core';\nimport './component-style.scss';\nimport { LabelDisplayedRowsArgs } from '@material-ui/core/TablePagination';\nimport { DropdownChoice } from '../Models';\n\ninterface IProps {\n    className?: string;\n    paginationClass?: string;\n\n    /* Normal Mode */\n    rows: any[];\n    renderHeader: () => JSX.Element;\n    renderRow: (rowData: any, index: number) => JSX.Element;\n    noRowsMessage?: string | JSX.Element;\n\n    /* Simple Mode - Automatically handles styling, so you can focus on data. */\n    columns?: DropdownChoice[]; // value: attribute, label: the title appearing on the header\n    canFilter?: boolean;\n    canSort?: boolean;\n\n    stickyHeader?: boolean;\n    canOverflow?: boolean;\n    rowsPerPageOptions?: number[];\n    labelRowsPerPage?: string;\n    onChangeInfo?: (info: LabelDisplayedRowsArgs) => string;\n}\n\ninterface IStates {\n    page: number;\n    rowsPerPage: number;\n    \n    filterData: any;\n}\n\nexport class CustomTable extends React.PureComponent<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            page: 0,\n            rowsPerPage: 0,\n\n            filterData: {}\n        }\n    }\n\n    componentDidMount() {\n        if (this.props.rowsPerPageOptions) {\n            this.setState({rowsPerPage: this.props.rowsPerPageOptions[0]});\n        }\n    }\n\n    handleChangePage = (_event: unknown, page: number) => {\n        this.setState({page: page});\n    }\n    \n    handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            rowsPerPage: parseInt(event.target.value, 10),\n            page: 0\n        });\n    }\n\n    resetPage = () => {\n        this.setState({page: 0});\n    }\n\n    getSlicedData = () => {\n        if (this.props.rowsPerPageOptions) {\n            const startingItem = this.state.page * this.state.rowsPerPage;\n            return this.props.rows.slice(startingItem, startingItem + this.state.rowsPerPage);\n        } else {\n            return this.props.rows;\n        }\n    }\n\n    render(): JSX.Element {\n        return (\n            <>\n            <div style={{overflow: this.props.canOverflow ? 'auto' : 'none'}}>\n                <Table \n                    className={`${(this.props.className ? this.props.className : '')} table`} \n                    stickyHeader={this.props.stickyHeader ? this.props.stickyHeader : false}>\n                    <TableHead>\n                        {this.props.columns ? (\n                            <TableRow>\n                                {this.props.columns.map(column => {\n                                    return <TableCell>{column.label}</TableCell>\n                                })}\n                            </TableRow>\n                        ) : this.props.renderHeader ? (\n                            <TableRow>\n                                {this.props.renderHeader()}\n                            </TableRow>\n                        ) : null}\n                    </TableHead>\n                    <TableBody>\n                        {this.props.renderRow ? (\n                            this.props.rows.length > 0 ? (\n                                this.getSlicedData().map((row, j) => {\n                                    return this.props.renderRow(row, j)\n                                })  \n                            ) : (\n                                <TableRow>\n                                    <TableCell colSpan={999} style={{textAlign: 'center'}}>\n                                        {this.props.noRowsMessage ? this.props.noRowsMessage : 'No data found'}\n                                    </TableCell>\n                                </TableRow>\n                            )\n                        ) : null}\n                    </TableBody>\n                </Table>\n            </div>\n            {this.props.rowsPerPageOptions ? (\n                <TablePagination\n                    className={`${(this.props.paginationClass ? this.props.paginationClass : '')} pagination MuiTablePagination-root`}\n                    rowsPerPageOptions={this.props.rowsPerPageOptions}\n                    count={this.props.rows.length}\n                    rowsPerPage={this.state.rowsPerPage}\n                    page={this.state.page}\n                    labelDisplayedRows={(info: LabelDisplayedRowsArgs) => {\n                        return (\n                            this.props.onChangeInfo ? (\n                                this.props.onChangeInfo(info)\n                            ) : (\n                                `${info.from}-${info.to} of ${info.count}`\n                            ));\n                    }}\n                    labelRowsPerPage={\n                        this.props.labelRowsPerPage ? (\n                            this.props.labelRowsPerPage\n                        ) : (\n                            'Rows per page:'\n                        )}\n                    onChangePage={(_event: unknown, page: number) => {\n                        this.setState({page: page});\n                    }}\n                    onChangeRowsPerPage={(event: React.ChangeEvent<HTMLInputElement>) => {\n                        this.setState({\n                            rowsPerPage: parseInt(event.target.value, 10),\n                            page: 0\n                        });\n                    }} />\n            ) : null}\n            </>\n        );\n    }\n}","\n\nimport * as React from 'react';\n// import { Link } from '@material-ui/core';\nimport './component-style.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { IconProp, SizeProp } from '@fortawesome/fontawesome-svg-core';\n\ninterface IProps {\n    icon: IconProp;\n    onClick: () => void;\n    size?: SizeProp;\n}\n\nexport class IconButton extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        return (\n            <div className='icon-button' onClick={() => this.props.onClick()}>\n                {this.props.icon ? <FontAwesomeIcon icon={this.props.icon} size={this.props.size} /> : null}\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { API } from 'Pages/CustomerCarePage/API';\n\ninterface IProps {\n    memberId: string;\n}\n\ninterface IStates {\n    contractListUpdated: boolean;\n}\n\nexport class CheckContractSection extends React.Component<IProps, IStates> {\n\n    contractUrls: string[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            contractListUpdated: false\n        }\n\n        this.contractUrls = [];\n    }\n\n    componentDidMount() {\n        API.get(`customer-care/members/${this.props.memberId}/benefits`,\n            (response) => {\n                console.log(response);\n                this.contractUrls = response.map(benefit => {\n                    return `/customer-care/benefits/io/pdf?id=${benefit._id}&type=contract`\n                });\n\n                this.setState({contractListUpdated: true});\n            },\n            (error) => {\n                console.log(error);\n            });\n    }\n    \n    render(): JSX.Element {\n        const pdfUrl = `${process.execPath}/../../../sample.pdf`;\n        // const viewerUrl = `https://mozilla.github.io/pdf.js/web/viewer.html?file=${pdfUrl}`;\n        const viewerUrl = `${process.execPath}/../pdfjs-2.2.228-dist/web/viewer.html?file=${pdfUrl}`;\n\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Check Contract</div>\n                <div className='sub-section'>\n                    {/*this.contractUrls.map((url, index) => {\n                        return (\n                            index === 0 ?\n                            <iframe \n                                style={{width: '100%', height: '1280px'}}\n                                src={API.getUrl() + url}  />\n\n                            : null\n                        );\n                    })*/}\n                            <iframe \n                                style={{width: '100%', height: '1280px'}}\n                                src={viewerUrl}  />\n                </div>\n                \n            </div>\n        );\n    }\n}","import { createMuiTheme, makeStyles, createStyles, withStyles } from '@material-ui/core/styles';\nimport React__default, { useState, createElement, useEffect, Component as Component$2, lazy, Suspense } from 'react';\nimport Select from 'react-select';\nimport Typography from '@material-ui/core/Typography';\nimport NoSsr from '@material-ui/core/NoSsr';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ChipInput from 'material-ui-chip-input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport Select$1 from '@material-ui/core/Select';\nimport ExpandMoreRounded from '@material-ui/icons/ExpandMoreRounded';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Grid from '@material-ui/core/Grid';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheckSquare, faHome, faPlusCircle, faUsers, faFileSignature, faIdCardAlt, faTasks, faTable, faFolderOpen, faUserFriends, faScrewdriver, faBookOpen } from '@fortawesome/free-solid-svg-icons';\nimport { faSquare } from '@fortawesome/free-regular-svg-icons';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Link from '@material-ui/core/Link';\nimport Avatar from '@material-ui/core/Avatar';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport Hidden from '@material-ui/core/Hidden';\nimport Drawer from '@material-ui/core/Drawer';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport Popper from '@material-ui/core/Popper';\nimport { Fade, Paper as Paper$1, List as List$1, ListItem as ListItem$1, ListItemIcon as ListItemIcon$1, ListItemText as ListItemText$1 } from '@material-ui/core';\nimport { useStore, Provider as Provider$1, useSelector } from 'react-redux';\nimport { routerMiddleware, ConnectedRouter } from 'connected-react-router';\nimport { HashRouter } from 'react-router-dom';\nimport { ThemeProvider } from '@material-ui/styles';\nimport invariant from 'invariant';\nimport conformsTo from 'lodash/conformsTo';\nimport isFunction from 'lodash/isFunction';\nimport isObject from 'lodash/isObject';\nimport { applyMiddleware, createStore, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { createBrowserHistory } from 'history';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport isEmpty from 'lodash/isEmpty';\nimport isString from 'lodash/isString';\nimport { createSelector } from 'reselect';\nimport { IntlProvider, defineMessages, FormattedMessage } from 'react-intl';\nvar index =\n/*#__PURE__*/\nObject.freeze({});\nvar index$1 =\n/*#__PURE__*/\nObject.freeze({});\nvar index$2 =\n/*#__PURE__*/\nObject.freeze({}); // This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nvar isLocalhost = Boolean(window.location.hostname === 'localhost' || // [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' || // 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\n\nfunction register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    var publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', function () {\n      var swUrl = process.env.PUBLIC_URL + \"/service-worker.js\";\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config); // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n\n        navigator.serviceWorker.ready.then(function () {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(function (registration) {\n    registration.onupdatefound = function () {\n      var installingWorker = registration.installing;\n\n      if (installingWorker == null) {\n        return;\n      }\n\n      installingWorker.onstatechange = function () {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'); // Execute callback\n\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.'); // Execute callback\n\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(function (error) {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl).then(function (response) {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    var contentType = response.headers.get('content-type');\n\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(function (registration) {\n        registration.unregister().then(function () {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(function () {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nfunction unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      registration.unregister();\n    });\n  }\n}\n\nvar service_worker =\n/*#__PURE__*/\nObject.freeze({\n  register: register,\n  unregister: unregister\n});\nvar index$3 =\n/*#__PURE__*/\nObject.freeze({\n  ServiceWorker: service_worker\n});\nvar index$4 =\n/*#__PURE__*/\nObject.freeze({});\nvar BaseTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#3ab77d',\n      contrastText: '#ffffff'\n    },\n    secondary: {\n      main: '#ffffff',\n      contrastText: '#3ab77d'\n    }\n  },\n  typography: {\n    fontFamily: 'Usual, Roboto, Helvetica, Arial, sans-serif',\n    button: {\n      fontFamily: 'Usual, Roboto, Helvetica, Arial, sans-serif',\n      fontWeight: 700,\n      fontSize: 13,\n      textTransform: 'none'\n    }\n  },\n  overrides: {\n    MuiDialog: {\n      root: {\n        width: '100%'\n      }\n    },\n    MuiDialogTitle: {\n      root: {\n        fontFamily: 'Usual, Roboto, Helvetica, Arial, sans-serif',\n        fontWeight: 550,\n        fontSize: '1em',\n        color: '#272E4C'\n      }\n    },\n    MuiDialogContentText: {\n      root: {\n        fontSize: '.8em',\n        color: '#272E4C'\n      }\n    },\n    MuiFormControlLabel: {\n      label: {\n        fontSize: '.8em',\n        color: '#272E4C'\n      }\n    },\n    MuiIconButton: {\n      root: {\n        fontSize: '.9em'\n      }\n    },\n    MuiButton: {\n      containedPrimary: {\n        boxShadow: '0px 3px 6px #1e207129',\n        '&:hover': {\n          backgroundColor: '#008650'\n        }\n      },\n      containedSecondary: {\n        border: '1px solid #0000001A',\n        boxShadow: '0px 1px 3px #00000033',\n        '&:hover': {\n          backgroundColor: '#3ab77d1a'\n        }\n      },\n      outlinedSecondary: {\n        border: '1px solid #3ab77d',\n        boxShadow: '0px 1px 3px #00000033',\n        '&:hover': {\n          backgroundColor: '#3ab77d1a'\n        }\n      }\n    }\n  }\n});\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return _extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return _assign.apply(this, arguments);\n};\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nfunction __awaiter(thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nfunction __generator(thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n}\n\nfunction __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n}\n\nvar labelColor = 'rgb(21,28,28)';\nvar grayColor = 'rgba(39,52,76,0.3)';\nvar grayColorFocused = 'rgba(39,52,76,0.5)';\nvar borderCss = {\n  borderColor: grayColor,\n  borderRadius: 5\n};\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    root: {\n      width: '100%'\n    },\n    control: {\n      '& label.Mui-focused': {\n        color: labelColor\n      },\n      '& .MuiInput-underline:after': {\n        borderBottomColor: grayColor\n      },\n      '& .MuiOutlinedInput-root': {\n        '& fieldset': borderCss,\n        '&:hover fieldset': borderCss,\n        '&.Mui-focused fieldset': _assign(_assign({}, borderCss), {\n          borderColor: grayColorFocused\n        })\n      }\n    },\n    input: {\n      display: 'flex'\n    },\n    label: {},\n    select: {\n      marginTop: theme.spacing(1),\n      backgroundColor: 'white',\n      width: '100%'\n    },\n    valueContainer: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      flex: 1,\n      alignItems: 'center',\n      overflow: 'hidden'\n    },\n    noOptionsMessage: {\n      padding: theme.spacing(1, 2)\n    },\n    singleValue: {\n      fontSize: 16\n    },\n    placeholder: {\n      position: 'absolute',\n      left: 2,\n      bottom: 6,\n      fontSize: 16\n    },\n    paper: {\n      position: 'absolute',\n      zIndex: 999,\n      left: 0,\n      right: 0\n    }\n  });\n});\n\nfunction NoOptionsMessage(props) {\n  return React__default.createElement(Typography, _assign({\n    color: \"textSecondary\",\n    className: props.selectProps.classes.noOptionsMessage\n  }, props.innerProps), props.children);\n}\n\nfunction inputComponent(_a) {\n  var inputRef = _a.inputRef,\n      props = __rest(_a, [\"inputRef\"]);\n\n  return React__default.createElement(\"div\", _assign({\n    ref: inputRef\n  }, props));\n}\n\nfunction Control(props) {\n  var children = props.children,\n      innerProps = props.innerProps,\n      innerRef = props.innerRef,\n      _a = props.selectProps,\n      classes = _a.classes,\n      TextFieldProps = _a.TextFieldProps;\n  return React__default.createElement(TextField, _assign({\n    className: classes.control,\n    InputProps: {\n      inputComponent: inputComponent,\n      inputProps: _assign({\n        className: classes.input,\n        ref: innerRef,\n        children: children\n      }, innerProps)\n    }\n  }, TextFieldProps, {\n    variant: \"outlined\",\n    fullWidth: true\n  }));\n}\n\nfunction Option(props) {\n  return React__default.createElement(MenuItem, _assign({\n    ref: props.innerRef,\n    selected: props.isFocused,\n    component: \"div\",\n    style: {\n      fontWeight: props.isSelected ? 500 : 400\n    }\n  }, props.innerProps), props.children);\n}\n\nfunction Placeholder(props) {\n  var selectProps = props.selectProps,\n      _a = props.innerProps,\n      innerProps = _a === void 0 ? {} : _a,\n      children = props.children;\n  return React__default.createElement(Typography, _assign({\n    color: \"textSecondary\",\n    className: selectProps.classes.placeholder\n  }, innerProps), children);\n}\n\nfunction SingleValue(props) {\n  return React__default.createElement(Typography, _assign({\n    className: props.selectProps.classes.singleValue\n  }, props.innerProps), props.children);\n}\n\nfunction ValueContainer(props) {\n  return React__default.createElement(\"div\", {\n    className: props.selectProps.classes.valueContainer\n  }, props.children);\n}\n\nfunction Menu(props) {\n  return React__default.createElement(Paper, _assign({\n    square: true,\n    className: props.selectProps.classes.paper\n  }, props.innerProps), props.children);\n}\n\nvar components = {\n  Control: Control,\n  Menu: Menu,\n  Option: Option,\n  NoOptionsMessage: NoOptionsMessage,\n  Placeholder: Placeholder,\n  SingleValue: SingleValue,\n  ValueContainer: ValueContainer\n};\n\nvar InputAutocomplete = function InputAutocomplete(props) {\n  var classes = useStyles();\n\n  var _a = React__default.useState(null),\n      single = _a[0],\n      setSingle = _a[1];\n\n  function handleChange(optionItem) {\n    setSingle(optionItem);\n\n    if (props.onChange) {\n      props.onChange(optionItem);\n    }\n  }\n\n  return React__default.createElement(FormControl, {\n    className: classes.root\n  }, React__default.createElement(Typography, {\n    className: classes.label,\n    color: \"textPrimary\"\n  }, props.label), React__default.createElement(NoSsr, null, React__default.createElement(Select, {\n    className: classes.select,\n    classes: classes,\n    inputId: props.inputId,\n    TextFieldProps: {\n      error: props.error\n    },\n    placeholder: \"\",\n    options: props.suggestions,\n    components: components,\n    value: single,\n    onChange: handleChange,\n    isSearchable: true,\n    isClearable: true\n  })));\n};\n\nInputAutocomplete.defaultProps = {\n  error: false\n};\nvar index$5 =\n/*#__PURE__*/\nObject.freeze({\n  InputAutocomplete: InputAutocomplete\n});\nvar labelColor$1 = 'rgb(21,28,28)';\nvar grayColor$1 = 'rgba(39,52,76,0.3)';\nvar grayColorFocused$1 = 'rgba(39,52,76,0.5)';\nvar borderCss$1 = {\n  borderColor: grayColor$1,\n  borderRadius: 5\n};\nvar useStyles$1 = makeStyles(function (theme) {\n  return {\n    root: {\n      width: '100%'\n    },\n    label: {},\n    textField: {\n      '& label.Mui-focused': {\n        color: labelColor$1\n      },\n      '& .MuiInput-underline:after': {\n        borderBottomColor: grayColor$1\n      },\n      '& .MuiOutlinedInput-root': {\n        '& fieldset': borderCss$1,\n        '&:hover fieldset': borderCss$1,\n        '&.Mui-focused fieldset': _assign(_assign({}, borderCss$1), {\n          borderColor: grayColorFocused$1\n        })\n      },\n      '&': {\n        marginTop: theme.spacing(1),\n        backgroundColor: 'white',\n        width: '100%'\n      }\n    }\n  };\n});\n\nvar InputChipTextField = function InputChipTextField(props) {\n  var classes = useStyles$1();\n\n  var _a = useState(props.value || []),\n      currentValue = _a[0],\n      setcurrentValue = _a[1];\n\n  var onChange = function onChange(chips) {\n    setcurrentValue(chips);\n\n    if (props.onChange) {\n      props.onChange(chips);\n    }\n  };\n\n  return React__default.createElement(FormControl, {\n    className: classes.root\n  }, React__default.createElement(Typography, {\n    className: classes.label,\n    color: \"textPrimary\"\n  }, props.label), React__default.createElement(ChipInput, {\n    id: props.id,\n    className: classes.textField,\n    defaultValue: currentValue,\n    onChange: onChange,\n    error: props.error,\n    variant: \"outlined\"\n  }));\n};\n\nInputChipTextField.defaultProps = {\n  label: '',\n  value: [],\n  error: false,\n  multiline: false,\n  rows: 1,\n  onChange: function onChange(chips) {\n    console.log(chips);\n  }\n};\nvar index$6 =\n/*#__PURE__*/\nObject.freeze({\n  InputChipTextField: InputChipTextField\n});\nvar labelColor$2 = 'rgb(21,28,28)';\nvar grayColor$2 = 'rgba(39,52,76,0.3)';\nvar grayColorFocused$2 = 'rgba(39,52,76,0.5)';\nvar borderCss$2 = {\n  borderColor: grayColor$2,\n  borderRadius: 5\n};\nvar borderStyles = {\n  root: {\n    '& label.Mui-focused': {\n      color: labelColor$2\n    },\n    '& .MuiInput-underline:after': {\n      borderBottomColor: grayColor$2\n    },\n    '& .MuiOutlinedInput-root': {\n      '& fieldset': borderCss$2,\n      '&:hover fieldset': borderCss$2,\n      '&.Mui-focused fieldset': _assign(_assign({}, borderCss$2), {\n        borderColor: grayColorFocused$2\n      })\n    }\n  }\n};\nvar useStyles$2 = makeStyles(function (theme) {\n  return {\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n    formControl: {\n      width: '100%'\n    },\n    label: {\n      fontSize: '.8em'\n    },\n    select: {\n      marginTop: theme.spacing(1),\n      backgroundColor: 'white'\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2)\n    },\n    icon: {\n      marginRight: theme.spacing(2.5),\n      color: grayColor$2\n    }\n  };\n}); // const StyledFormControl = withStyles(borderStyles)(FormControl);\n\nvar StyledOutlinedInput = withStyles(borderStyles)(OutlinedInput);\n\nvar InputSelect = function InputSelect(props) {\n  var defaultValue = {\n    id: -1,\n    value: '',\n    label: ''\n  };\n\n  var items = __spreadArrays([defaultValue], props.data);\n\n  var getDefaultValue = function getDefaultValue() {\n    if (props.value) {\n      var defVal = items.find(function (item) {\n        return item.value === props.value;\n      });\n\n      if (defVal) {\n        return defVal;\n      }\n    }\n\n    return defaultValue;\n  };\n\n  var classes = useStyles$2();\n\n  var _a = useState(getDefaultValue()),\n      currentValue = _a[0],\n      setCurrentValue = _a[1];\n\n  var inputLabel = React__default.useRef(null);\n  var labelWidth = React__default.useState(0)[0]; // React.useEffect(() => {\n  //   setLabelWidth(inputLabel.current!.offsetWidth);\n  // }, []);\n\n  var onChange = function onChange(e) {\n    var selectedItem = items.find(function (item) {\n      return item.value === e.target.value;\n    }) || defaultValue;\n    setCurrentValue(selectedItem);\n\n    if (props.onChange) {\n      props.onChange(selectedItem);\n    }\n  };\n\n  var displaySelectItem = function displaySelectItem(props, selectItem) {\n    if (props.displaySelectItem) {\n      return props.displaySelectItem(selectItem);\n    }\n\n    var disabled = selectItem.id === -1 && props.required;\n    return React__default.createElement(MenuItem, {\n      key: selectItem.id,\n      value: selectItem.value,\n      disabled: disabled\n    }, selectItem.label);\n  };\n\n  return React__default.createElement(\"div\", {\n    className: classes.formControl\n  }, props.label ? React__default.createElement(InputLabel, {\n    color: \"textPrimary\",\n    className: classes.label,\n    ref: inputLabel,\n    htmlFor: props.id,\n    error: props.error\n  }, props.label) : null, React__default.createElement(Select$1, {\n    className: classes.select,\n    value: currentValue.value,\n    onChange: onChange,\n    input: React__default.createElement(StyledOutlinedInput, {\n      id: props.id,\n      name: props.id,\n      error: props.error,\n      labelWidth: labelWidth,\n      fullWidth: true\n    }),\n    IconComponent: function IconComponent() {\n      return React__default.createElement(ExpandMoreRounded, {\n        className: classes.icon\n      });\n    }\n  }, items.map(function (item) {\n    return displaySelectItem(props, item);\n  })));\n};\n\nInputSelect.defaultProps = {\n  value: '',\n  error: false,\n  required: false,\n  onChange: function onChange(value) {\n    console.log(value);\n  }\n};\nvar index$7 =\n/*#__PURE__*/\nObject.freeze({\n  InputSelect: InputSelect\n});\nvar labelColor$3 = 'rgb(21,28,28)';\nvar grayColor$3 = 'rgba(39,52,76,0.3)';\nvar grayColorFocused$3 = 'rgba(39,52,76,0.5)';\nvar borderCss$3 = {\n  borderColor: grayColor$3,\n  borderRadius: 5\n};\nvar borderStyles$1 = {\n  root: {\n    '& label.Mui-focused': {\n      color: labelColor$3\n    },\n    '& .MuiInput-underline:after': {\n      borderBottomColor: grayColor$3\n    },\n    '& .MuiOutlinedInput-root': {\n      '& fieldset': borderCss$3,\n      '&:hover fieldset': borderCss$3,\n      '&.Mui-focused fieldset': _assign(_assign({}, borderCss$3), {\n        borderColor: grayColorFocused$3\n      })\n    }\n  },\n  input: {\n    fontSize: 14 // input: {\n    //   '&:focus': {\n    //     borderRadius: 4,\n    //     borderColor: '#80bdff',\n    //     boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\n    //   }\n    // }\n\n  }\n};\nvar useStyles$3 = makeStyles(function (theme) {\n  return {\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n    formControl: {\n      width: '100%'\n    },\n    label: {\n      fontSize: '.8em'\n    },\n    select: {\n      marginTop: theme.spacing(1),\n      backgroundColor: 'white'\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2)\n    },\n    icon: {\n      marginRight: theme.spacing(2.5),\n      color: grayColor$3\n    },\n    error: {\n      color: '#E53935',\n      fontSize: '12px'\n    },\n    errorIcon: {\n      color: '#E53935',\n      fontSize: 'small',\n      float: 'right'\n    }\n  };\n}); // const StyledFormControl = withStyles(borderStyles)(FormControl);\n\nvar StyledOutlinedInput$1 = withStyles(borderStyles$1)(OutlinedInput);\n\nvar InputSelectSetValue = function InputSelectSetValue(props) {\n  var items = __spreadArrays(props.data);\n\n  var classes = useStyles$3();\n  var inputLabel = React__default.useRef(null);\n  var labelWidth = React__default.useState(0)[0]; // React.useEffect(() => {\n  //   setLabelWidth(inputLabel.current!.offsetWidth);\n  // }, []);\n\n  var onChange = function onChange(e) {\n    var selectedItem = items.find(function (item) {\n      return item.value === e.target.value;\n    });\n\n    if (props.onChange) {\n      props.onChange(selectedItem);\n    }\n  };\n\n  var displaySelectItem = function displaySelectItem(props, selectItem) {\n    if (props.displaySelectItem) {\n      return props.displaySelectItem(selectItem);\n    }\n\n    var disabled = selectItem.id === -1 && props.required;\n    return React__default.createElement(MenuItem, {\n      key: selectItem.id,\n      value: selectItem.value,\n      disabled: disabled\n    }, selectItem.label);\n  };\n\n  return React__default.createElement(\"div\", {\n    className: classes.formControl\n  }, React__default.createElement(InputLabel, {\n    color: \"textPrimary\",\n    className: classes.label,\n    ref: inputLabel,\n    htmlFor: props.id\n  }, props.label), React__default.createElement(Select$1, {\n    className: classes.select,\n    value: props.value,\n    onChange: onChange,\n    disabled: props.disabled,\n    input: React__default.createElement(StyledOutlinedInput$1, {\n      id: props.id,\n      name: props.id,\n      error: props.error,\n      labelWidth: labelWidth,\n      fullWidth: true,\n      disabled: props.disabled\n    }),\n    IconComponent: function IconComponent() {\n      return React__default.createElement(ExpandMoreRounded, {\n        className: classes.icon\n      });\n    }\n  }, items.map(function (item) {\n    return displaySelectItem(props, item);\n  })), props.error && React__default.createElement(\"div\", {\n    className: classes.formControl\n  }, React__default.createElement(FormHelperText, {\n    id: \"component-error-text\",\n    className: classes.error\n  }, props.errorMessage, React__default.createElement(ErrorIcon, {\n    className: classes.errorIcon\n  }))));\n};\n\nInputSelectSetValue.defaultProps = {\n  label: '',\n  value: '',\n  error: false,\n  errorMessage: '',\n  required: false,\n  disabled: false,\n  onChange: function onChange(value) {\n    console.log(value);\n  }\n};\nvar index$8 =\n/*#__PURE__*/\nObject.freeze({\n  InputSelectSetValue: InputSelectSetValue\n});\nvar useStyles$4 = makeStyles(function (theme) {\n  return {\n    root: {\n      width: '100%'\n    },\n    label: {\n      fontSize: '.8em'\n    },\n    textField: {\n      marginTop: theme.spacing(1),\n      backgroundColor: 'white',\n      fontSize: '14px'\n    },\n    error: {\n      color: '#E53935',\n      fontSize: '12px'\n    },\n    errorIcon: {\n      color: '#E53935',\n      fontSize: 'small',\n      float: 'right'\n    }\n  };\n});\nvar labelColor$4 = 'rgb(21,28,28)';\nvar grayColor$4 = 'rgba(39,52,76,0.3)';\nvar grayColorFocused$4 = 'rgba(39,52,76,0.5)';\nvar borderCss$4 = {\n  borderColor: grayColor$4,\n  borderRadius: 5\n};\nvar StyledTextField = withStyles({\n  root: {\n    '& label.Mui-focused': {\n      color: labelColor$4\n    },\n    '& .MuiInput-underline:after': {\n      borderBottomColor: grayColor$4\n    },\n    '& .MuiOutlinedInput-root': {\n      '& fieldset': borderCss$4,\n      '&:hover fieldset': borderCss$4,\n      '&.Mui-focused fieldset': _assign(_assign({}, borderCss$4), {\n        borderColor: grayColorFocused$4\n      })\n    }\n  }\n})(TextField);\n\nvar InputTextField = function InputTextField(props) {\n  var classes = useStyles$4();\n\n  var onChange = function onChange(e) {\n    var value = e.target.value;\n\n    if (props.onChange) {\n      props.onChange(value);\n    }\n  };\n\n  return React__default.createElement(\"div\", {\n    className: classes.root\n  }, props.label ? React__default.createElement(InputLabel, {\n    htmlFor: props.id,\n    className: classes.label,\n    color: \"textPrimary\"\n  }, props.label) : null, React__default.createElement(StyledTextField, {\n    id: props.id,\n    className: classes.textField,\n    value: props.value,\n    onChange: onChange,\n    error: props.error,\n    multiline: props.multiline,\n    rows: props.rows,\n    type: props.type,\n    fullWidth: true,\n    disabled: props.disabled,\n    variant: \"outlined\"\n  }), props.error && React__default.createElement(\"div\", {\n    className: classes.root\n  }, React__default.createElement(FormHelperText, {\n    id: \"component-error-text\",\n    className: classes.error\n  }, props.errorMessage, React__default.createElement(ErrorIcon, {\n    className: classes.errorIcon\n  }))));\n};\n\nInputTextField.defaultProps = {\n  type: 'text',\n  value: '',\n  error: false,\n  errorMessage: '',\n  multiline: false,\n  disabled: false,\n  rows: 1,\n  onChange: function onChange(value) {\n    console.log(\"InputTextField.defaultProps - Value: \" + value);\n  }\n};\nvar index$9 =\n/*#__PURE__*/\nObject.freeze({\n  InputTextField: InputTextField\n}); //declare class to style components\n\nvar useStyles$5 = makeStyles(function (theme) {\n  return {\n    root: {\n      flexWrap: 'wrap'\n    },\n    inputSelect: {\n      marginBottom: theme.spacing(1)\n    },\n    dialog: {\n      align: 'center',\n      justify: 'center',\n      width: '100%'\n    },\n    dialogContent: {\n      paddingTop: '0px'\n    },\n    container: {\n      paddingRight: '15px',\n      paddingLeft: '15px'\n    },\n    dialogTitle: {\n      marginTop: theme.spacing(2)\n    },\n    dialogContentTitle: {},\n    dialogContentText: {},\n    formControlLabel: {},\n    textField: {},\n    checkBox: {\n      paddingLeft: '10px'\n    },\n    dialogAction: {\n      marginBottom: theme.spacing(2),\n      marginTop: theme.spacing(2),\n      justifyContent: 'center'\n    },\n    resolveDialogAction: {\n      marginBottom: theme.spacing(2),\n      marginTop: theme.spacing(4),\n      justifyContent: 'center'\n    },\n    leftButton: {\n      width: 115,\n      marginLeft: 15,\n      marginRight: 10\n    },\n    rightButton: {\n      width: 115,\n      marginLeft: 10,\n      marginRight: 15\n    }\n  };\n});\nvar StyledCheckbox = withStyles({\n  root: {\n    color: '#9EA3AC',\n    '&$checked': {\n      color: '#1E2071'\n    }\n  },\n  checked: {}\n})(Checkbox);\n\nvar TicketModal = function TicketModal(props) {\n  var classes = useStyles$5();\n\n  var _a = React__default.useState({\n    notes: '',\n    notesError: false,\n    isResolved: false\n  }),\n      state = _a[0],\n      setState = _a[1];\n\n  var _b = useState(true),\n      disabled = _b[0],\n      setDisabled = _b[1]; //reset values and close dialog\n\n\n  var handleClose = function handleClose() {\n    setDisabled(true);\n    setState({\n      notes: '',\n      notesError: false,\n      isResolved: false\n    });\n    props.onClose();\n  }; //changes state of the changed values\n\n\n  var setFieldValue = function setFieldValue(fieldName, value) {\n    setState(function (state) {\n      var _a;\n\n      return _assign(_assign({}, state), (_a = {}, _a[fieldName] = value, _a));\n    });\n  };\n\n  var setFieldError = function setFieldError(fieldName, error) {\n    setState(function (state) {\n      var _a;\n\n      return _assign(_assign({}, state), (_a = {}, _a[fieldName] = error, _a));\n    });\n  };\n  /* render ticket management modal in 3 different types (Resolve, Assign, Escalate)\r\n      Sample usage :\r\n      import { Components } from '@hims/core';\r\n      const Modal = Components.UI.TicketModal.TicketModal;\r\n         <Modal\r\n                    type=\"Escalate\" (Resolve/Assign/Escalate) - is not case sensitive but will render title as is\r\n                    onClose={this.onAddDataFieldModalClose}\r\n                    isModalOpen={ticketModal}\r\n                    selectItems={[{\"id\":0,\"value\":'Jae',\"label\":'Jae'},{\"id\":1,\"value\":'Lambert',\"label\":'Lambert'},{\"id\":2,\"value\":'Bau',\"label\":'Bau'}]}\r\n                    onSubmit={this.onAddDataFieldModalClose}\r\n          />\r\n  */\n\n\n  var component = React__default.createElement(\"div\", null);\n\n  switch (props.type.toLowerCase()) {\n    case 'resolve':\n      console.log('in resolve');\n      component = React__default.createElement(\"div\", null, React__default.createElement(Grid, {\n        container: true,\n        className: classes.container,\n        justify: \"flex-start\",\n        alignItems: \"flex-start\",\n        direction: \"column\"\n      }, React__default.createElement(Grid, {\n        item: true,\n        xs: true\n      }, React__default.createElement(DialogTitle, {\n        disableTypography: true,\n        id: \"dialog-title\",\n        className: classes.dialogTitle\n      }, props.type, \" Ticket\")), React__default.createElement(Grid, {\n        item: true,\n        xs: true\n      }, React__default.createElement(DialogContent, {\n        className: classes.dialogContent\n      }, React__default.createElement(DialogContentText, {\n        className: classes.dialogContentText,\n        id: \"alert-dialog-description\"\n      }, \"How was the issue resolved?\"), React__default.createElement(InputTextField, {\n        value: state.notes,\n        error: state.notesError,\n        multiline: true,\n        rows: 4,\n        onChange: function onChange(value) {\n          setFieldValue('notes', value);\n          setFieldError('notesError', value.length === 0);\n        }\n      })), React__default.createElement(Grid, {\n        item: true,\n        xs: true\n      }, React__default.createElement(DialogContent, {\n        className: classes.dialogContent\n      }, React__default.createElement(FormControlLabel, {\n        className: classes.formControlLabel,\n        control: React__default.createElement(StyledCheckbox, {\n          icon: React__default.createElement(FontAwesomeIcon, {\n            icon: faSquare\n          }),\n          checkedIcon: React__default.createElement(FontAwesomeIcon, {\n            icon: faCheckSquare\n          }),\n          color: \"primary\",\n          checked: state.isResolved,\n          onChange: function onChange(value) {\n            setFieldValue('isResolved', value.target.checked);\n            setDisabled(!value.target.checked);\n          },\n          inputProps: {\n            'aria-label': 'primary checkbox'\n          }\n        }),\n        label: \"Mark as resolved\",\n        labelPlacement: \"end\"\n      }))), React__default.createElement(DialogActions, {\n        className: classes.resolveDialogAction\n      }, React__default.createElement(Button, {\n        className: classes.leftButton,\n        variant: \"contained\",\n        onClick: handleClose,\n        color: \"secondary\"\n      }, \"Cancel\"), React__default.createElement(Button, {\n        className: classes.rightButton,\n        variant: \"contained\",\n        disabled: disabled,\n        onClick: props.onSubmit,\n        color: \"primary\"\n      }, \"Resolve\")))));\n      break;\n\n    case 'assign':\n      console.log('in assign');\n      component = React__default.createElement(\"div\", null, React__default.createElement(Grid, {\n        container: true,\n        className: classes.container,\n        justify: \"flex-start\",\n        alignItems: \"flex-start\",\n        direction: \"column\"\n      }, React__default.createElement(Grid, {\n        item: true,\n        xs: true\n      }, React__default.createElement(DialogTitle, {\n        disableTypography: true,\n        id: \"dialog-title\",\n        className: classes.dialogTitle\n      }, props.type, \" Ticket\")), React__default.createElement(Grid, {\n        item: true,\n        xs: true\n      }, React__default.createElement(DialogContent, {\n        className: classes.dialogContent\n      }, React__default.createElement(InputSelect, {\n        id: 'modal-input-select',\n        label: 'Assign To',\n        data: props.selectItems\n      }), React__default.createElement(DialogContentText, null), React__default.createElement(InputTextField, {\n        label: 'Notes',\n        value: state.notes,\n        error: state.notesError,\n        multiline: true,\n        rows: 4,\n        onChange: function onChange(value) {\n          setFieldValue('notes', value);\n          setFieldError('notesError', value.length === 0);\n        }\n      })), React__default.createElement(DialogActions, {\n        className: classes.dialogAction\n      }, React__default.createElement(Button, {\n        className: classes.leftButton,\n        variant: \"contained\",\n        onClick: handleClose,\n        color: \"secondary\"\n      }, \"Cancel\"), React__default.createElement(Button, {\n        className: classes.rightButton,\n        variant: \"contained\",\n        onClick: props.onSubmit,\n        color: \"primary\"\n      }, \"Assign\")))));\n      break;\n\n    case 'escalate':\n      console.log('in escalate');\n      component = React__default.createElement(\"div\", null, React__default.createElement(Grid, {\n        container: true,\n        className: classes.container,\n        justify: \"flex-start\",\n        alignItems: \"flex-start\",\n        direction: \"column\"\n      }, React__default.createElement(Grid, {\n        item: true,\n        xs: true\n      }, React__default.createElement(DialogTitle, {\n        disableTypography: true,\n        id: \"dialog-title\",\n        className: classes.dialogTitle\n      }, props.type, \" Ticket\")), React__default.createElement(Grid, {\n        item: true,\n        xs: true\n      }, React__default.createElement(DialogContent, {\n        className: classes.dialogContent\n      }, React__default.createElement(InputSelect, {\n        id: 'modal-input-select',\n        label: 'Escalate To',\n        data: props.selectItems\n      }), React__default.createElement(DialogContentText, null), React__default.createElement(InputTextField, {\n        label: 'Notes',\n        value: state.notes,\n        error: state.notesError,\n        multiline: true,\n        rows: 4,\n        onChange: function onChange(value) {\n          setFieldValue('notes', value);\n          setFieldError('notesError', value.length === 0);\n        }\n      })), React__default.createElement(DialogActions, {\n        className: classes.dialogAction\n      }, React__default.createElement(Button, {\n        className: classes.leftButton,\n        variant: \"contained\",\n        onClick: handleClose,\n        color: \"secondary\"\n      }, \"Cancel\"), React__default.createElement(Button, {\n        className: classes.rightButton,\n        variant: \"contained\",\n        onClick: props.onSubmit,\n        color: \"primary\"\n      }, \"Escalate\")))));\n      break;\n  }\n\n  return React__default.createElement(Dialog, {\n    className: classes.dialog,\n    open: props.isModalOpen,\n    \"aria-labelledby\": \"simple-dialog-title\"\n  }, component);\n}; //declare defaults\n\n\nTicketModal.defaultProps = {\n  isModalOpen: false,\n  type: 'Resolve',\n  selectItems: [{\n    \"id\": 0,\n    \"value\": '',\n    \"label\": ''\n  }]\n};\nvar index$a =\n/*#__PURE__*/\nObject.freeze({\n  TicketModal: TicketModal\n});\nvar styles = {\n  \"title\": \"index_title__3_oz-\",\n  \"titleBack\": \"index_titleBack__ghwZN\",\n  \"titleFront\": \"index_titleFront__23_8b\",\n  \"titleContact\": \"index_titleContact__2ETaU\",\n  \"titleRecruitmentTitle\": \"index_titleRecruitmentTitle__eDJJH\"\n}; // #endregion Interface Imports\n\nvar SampleCoreComponent =\n/** @class */\nfunction (_super) {\n  __extends(SampleCoreComponent, _super);\n\n  function SampleCoreComponent() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SampleCoreComponent.prototype.render = function () {\n    var text = this.props.text;\n    return React__default.createElement(\"div\", {\n      className: styles.title\n    }, React__default.createElement(\"span\", {\n      className: styles.titleBack\n    }, text), React__default.createElement(\"span\", {\n      className: styles.titleFront\n    }, text));\n  };\n\n  return SampleCoreComponent;\n}(React__default.Component);\n\nvar index$b =\n/*#__PURE__*/\nObject.freeze({\n  SampleCoreComponent: SampleCoreComponent\n});\nvar useStyles$6 = makeStyles(function (theme) {\n  var _a, _b;\n\n  return {\n    appBar: (_a = {\n      backgroundColor: '#ffffff',\n      color: '#808080'\n    }, _a[theme.breakpoints.up('sm')] = {\n      width: 'calc(100% - 85px)'\n    }, _a),\n    menuButton: (_b = {\n      marginRight: theme.spacing(2)\n    }, _b[theme.breakpoints.up('sm')] = {\n      display: 'none'\n    }, _b),\n    logo: {\n      height: '40px'\n    },\n    badge: {\n      backgroundColor: '#ff6969',\n      color: '#ffffff',\n      fontWeight: 700\n    },\n    grow: {\n      flexGrow: 1\n    }\n  };\n});\n\nvar AppHeader = function AppHeader(props) {\n  var classes = useStyles$6();\n\n  var handleMenuOnClick = function handleMenuOnClick() {\n    if (props.menuOnClick) {\n      props.menuOnClick();\n    }\n  }; // const handleNotificationOnClick = () => {\n  //   if (props.notificationOnClick) {\n  //     props.notificationOnClick();\n  //   }\n  // };\n\n\n  var handleUserOnClick = function handleUserOnClick() {\n    if (props.userOnClick) {\n      props.userOnClick();\n    }\n  };\n\n  return React__default.createElement(AppBar, {\n    className: classes.appBar\n  }, React__default.createElement(Toolbar, null, React__default.createElement(IconButton, {\n    edge: \"start\",\n    className: classes.menuButton,\n    onClick: handleMenuOnClick\n  }, React__default.createElement(MenuIcon, null)), React__default.createElement(Link, {\n    href: \"/\"\n  }, React__default.createElement(\"img\", {\n    src: props.logoImage,\n    className: classes.logo,\n    alt: \"logo\"\n  })), React__default.createElement(\"div\", {\n    className: classes.grow\n  }), React__default.createElement(IconButton, {\n    edge: \"end\",\n    onClick: handleUserOnClick\n  }, React__default.createElement(Avatar, {\n    src: props.userImage,\n    alt: \"avatar\"\n  }))));\n};\n\nAppHeader.defaultProps = {\n  badgeCount: 0\n};\nAppHeader.propTypes = {\n  badgeCount: PropTypes.number\n};\nvar useStyles$7 = makeStyles(function () {\n  return {\n    sideBar: {\n      width: '85px'\n    },\n    listItem: {\n      flexDirection: 'column',\n      marginBottom: '10px'\n    },\n    listItemIcon: {\n      minWidth: 0\n    },\n    avatar: {\n      backgroundColor: 'rgba(158, 164, 172, 0.18)'\n    },\n    avatarSelected: {\n      backgroundColor: 'rgba(98, 255, 183, 0.18)'\n    },\n    listItemText: {\n      fontSize: 9,\n      color: '#ffffff'\n    },\n    listItemTextSelected: {\n      fontSize: 9,\n      color: 'rgba(98, 255, 183, 1)'\n    },\n    icon: {\n      color: 'white'\n    },\n    iconSelected: {\n      color: 'rgba(98, 255, 183, 1)'\n    },\n    divider: {\n      backgroundColor: 'transparent',\n      height: '50px'\n    }\n  };\n});\n\nfunction ListItemLink(props) {\n  return React__default.createElement(ListItem, _assign({\n    button: true,\n    component: \"a\"\n  }, props));\n}\n\nvar AppSidebar = function AppSidebar(props) {\n  var classes = useStyles$7(); // const [selectedItem, setSelectedItem] = useState(\"dashboard\");\n\n  var isSelectedSidebar = function isSelectedSidebar(sidebarItem) {\n    var selectedSidebar = localStorage.getItem('sidebar');\n    var isSelected = selectedSidebar && selectedSidebar === sidebarItem || false;\n    return isSelected;\n  };\n\n  var _a = React__default.useState(true),\n      sidebarChanged = _a[0],\n      setSidebarChanged = _a[1];\n\n  var _b = React__default.useState({\n    dashboard: true,\n    members: false,\n    proposals: false,\n    clients: false,\n    tickets: false,\n    reports: false,\n    templates: false,\n    help: false\n  }),\n      sidebarSelected = _b[0],\n      setSidebarSelected = _b[1];\n\n  var getSidebarSelected = function getSidebarSelected() {\n    setSidebarSelected({\n      dashboard: isSelectedSidebar('dashboard'),\n      members: isSelectedSidebar('members'),\n      proposals: isSelectedSidebar('proposals'),\n      clients: isSelectedSidebar('clients'),\n      tickets: isSelectedSidebar('tickets'),\n      reports: isSelectedSidebar('reports'),\n      templates: isSelectedSidebar('templates'),\n      help: isSelectedSidebar('help')\n    });\n  };\n\n  var onStorageChange = function onStorageChange() {\n    setSidebarChanged(true);\n  };\n\n  React__default.useEffect(function () {\n    if (sidebarChanged) {\n      getSidebarSelected();\n      setSidebarChanged(false);\n    }\n  }, [sidebarChanged]);\n  React__default.useEffect(function () {\n    if (typeof window !== 'undefined') {\n      window.addEventListener('storage', onStorageChange);\n      return function () {\n        window.removeEventListener('storage', onStorageChange);\n      };\n    }\n\n    return undefined;\n  }, []);\n\n  var handleDashboardOnClick = function handleDashboardOnClick(event, attr) {\n    console.log('handleDashboardOnClick event', event);\n    console.log('handleDashboardOnClick attr', attr); // switch (attr) {\n    //   case 'dashboard':\n    //     if (props.page === 'membership') {\n    //       props.history.push('#/membership/', { state: 'dashboard' });\n    //       window.location.reload();\n    //     } else if (props.page === 'underwriting') {\n    //       props.history.push('#/underwriting/', { state: 'dashboard' });\n    //       window.location.reload();\n    //     } else if (props.page === 'customer care') {\n    //       props.history.push('#/customer-care', { state: 'dashboard' });\n    //       window.location.reload();\n    //     }\n    //     break;\n    //   case 'members':\n    //     if (props.page === 'membership') {\n    //       props.history.push('#/membership/members', { state: 'members' });\n    //       window.location.reload();\n    //     }\n    //     break;\n    //   case 'clients':\n    //     if (props.page === 'underwriting') {\n    //       props.history.push('#/underwriting/clients', { state: 'clients' });\n    //       window.location.reload();\n    //     }\n    //     break;\n    //   case 'proposals':\n    //     if (props.page === 'underwriting') {\n    //       props.history.push('#/underwriting/proposals', { state: 'proposals' });\n    //       window.location.reload();\n    //     }\n    //     break;\n    //   case 'create ticket':\n    //     if (props.page === 'customer care') {\n    //       props.history.push('#/customer-care/create-ticket', {\n    //         state: 'create ticket',\n    //       });\n    //       window.location.reload();\n    //     }\n    //     break;\n    // }\n\n    localStorage.setItem('sidebar', attr);\n    setSidebarChanged(true); // setSelectedItem(attr);\n  };\n\n  var handleSidebarClick = function handleSidebarClick(page) {\n    localStorage.setItem('sidebar', page);\n    setSidebarChanged(true);\n  };\n\n  return React__default.createElement(\"div\", {\n    className: classes.sideBar\n  }, React__default.createElement(List, null, props.page !== 'customer care' ? React__default.createElement(ListItemLink, {\n    className: classes.listItem,\n    href: props.page === 'membership' ? '#/membership/' : '#/underwriting/',\n    onClick: function onClick() {\n      handleSidebarClick('dashboard');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faHome,\n    className: sidebarSelected.dashboard ? classes.iconSelected : classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Dashboard\",\n    disableTypography: true,\n    className: sidebarSelected.dashboard ? classes.listItemTextSelected : classes.listItemText\n  })) : null, props.page === 'customer care' ? React__default.createElement(ListItemLink, {\n    className: classes.listItem,\n    href: '#/customer-care/',\n    onClick: function onClick() {\n      handleSidebarClick('dashboard');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faPlusCircle,\n    className: sidebarSelected.dashboard ? classes.iconSelected : classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Create New\",\n    disableTypography: true,\n    className: sidebarSelected.dashboard ? classes.listItemTextSelected : classes.listItemText\n  })) : null, props.page !== 'customer care' ? React__default.createElement(ListItemLink, {\n    className: classes.listItem,\n    href: props.page === 'underwriting' ? '#/underwriting/clients' : '',\n    onClick: function onClick() {\n      handleSidebarClick('clients');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faUsers,\n    className: sidebarSelected.clients ? classes.iconSelected : classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Clients\",\n    disableTypography: true,\n    className: sidebarSelected.clients ? classes.listItemTextSelected : classes.listItemText\n  })) : null, props.page !== 'customer care' ? React__default.createElement(ListItemLink, {\n    className: classes.listItem,\n    href: props.page === 'underwriting' ? '#/underwriting/proposals' : '',\n    onClick: function onClick() {\n      handleSidebarClick('proposals');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faFileSignature,\n    className: sidebarSelected.proposals ? classes.iconSelected : classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Proposals\",\n    disableTypography: true,\n    className: sidebarSelected.proposals ? classes.listItemTextSelected : classes.listItemText\n  })) : null, props.page === 'membership' ? React__default.createElement(ListItemLink, {\n    className: classes.listItem,\n    href: '#/membership/members',\n    onClick: function onClick() {\n      handleSidebarClick('members');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faIdCardAlt,\n    className: sidebarSelected.members ? classes.iconSelected : classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Members\",\n    disableTypography: true,\n    className: sidebarSelected.members ? classes.listItemTextSelected : classes.listItemText\n  })) : null, props.page === 'customer care' ? React__default.createElement(ListItemLink, {\n    className: classes.listItem,\n    href: '#/membership/members',\n    onClick: function onClick() {\n      handleSidebarClick('members');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faIdCardAlt,\n    className: sidebarSelected.members ? classes.iconSelected : classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Members\",\n    disableTypography: true,\n    className: sidebarSelected.members ? classes.listItemTextSelected : classes.listItemText\n  })) : null, props.page === 'customer care' ? React__default.createElement(ListItemLink, {\n    className: classes.listItem,\n    href: '#/customer-care/tickets',\n    onClick: function onClick() {\n      handleSidebarClick('tickets');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faTasks,\n    className: sidebarSelected.tickets ? classes.iconSelected : classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Tickets\",\n    disableTypography: true,\n    className: classes.listItemText\n  })) : null, props.page !== 'customer care' ? React__default.createElement(ListItem, {\n    button: true,\n    className: classes.listItem,\n    onClick: function onClick(e) {\n      return handleDashboardOnClick(e, 'tickets');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faTasks,\n    className: sidebarSelected.tickets ? classes.iconSelected : classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Tickets\",\n    disableTypography: true,\n    className: sidebarSelected.tickets ? classes.listItemTextSelected : classes.listItemText\n  })) : null, props.page !== 'customer care' ? React__default.createElement(ListItem, {\n    button: true,\n    className: classes.listItem,\n    onClick: function onClick(e) {\n      return handleDashboardOnClick(e, 'reports');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faTable,\n    className: sidebarSelected.reports ? classes.iconSelected : classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Reports\",\n    disableTypography: true,\n    className: sidebarSelected.reports ? classes.listItemTextSelected : classes.listItemText\n  })) : null, props.page === 'underwriting' ? React__default.createElement(ListItem, {\n    button: true,\n    className: classes.listItem,\n    onClick: function onClick(e) {\n      return handleDashboardOnClick(e, 'templates');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faFolderOpen,\n    className: sidebarSelected.templates ? classes.iconSelected : classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Templates\",\n    disableTypography: true,\n    className: sidebarSelected.templates ? classes.listItemTextSelected : classes.listItemText\n  })) : null, props.page === 'membership' ? React__default.createElement(ListItem, {\n    button: true,\n    className: classes.listItem,\n    onClick: function onClick(e) {\n      return handleDashboardOnClick(e, 'users');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faUserFriends,\n    className: classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Users\",\n    disableTypography: true,\n    className: classes.listItemText\n  })) : null, props.page === 'membership' ? React__default.createElement(ListItem, {\n    button: true,\n    className: classes.listItem,\n    onClick: function onClick(e) {\n      return handleDashboardOnClick(e, 'settings');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faScrewdriver,\n    className: classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"settings\",\n    disableTypography: true,\n    className: classes.listItemText\n  })) : null, React__default.createElement(Divider, {\n    className: classes.divider\n  }), React__default.createElement(ListItem, {\n    button: true,\n    className: classes.listItem,\n    onClick: function onClick(e) {\n      return handleDashboardOnClick(e, 'help');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faBookOpen,\n    className: sidebarSelected.help ? classes.iconSelected : classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Help\",\n    disableTypography: true,\n    className: sidebarSelected.help ? classes.listItemTextSelected : classes.listItemText\n  }))));\n};\n\nvar useStyles$8 = makeStyles(function (theme) {\n  var _a;\n\n  return {\n    root: {\n      display: 'flex'\n    },\n    drawer: (_a = {}, _a[theme.breakpoints.up('sm')] = {\n      width: '72px',\n      flexShrink: 0\n    }, _a),\n    drawerPaper: {\n      backgroundColor: '#1e2071'\n    },\n    content: {\n      flexGrow: 1,\n      padding: \"0 \" + theme.spacing(5) + \"px\"\n    },\n    toolbar: theme.mixins.toolbar\n  };\n});\n\nvar AuthenticatedLayout = function AuthenticatedLayout(props) {\n  var classes = useStyles$8();\n\n  var _a = useState(false),\n      mobileOpen = _a[0],\n      setMobileOpen = _a[1];\n\n  var handleDrawerToggle = function handleDrawerToggle() {\n    setMobileOpen(!mobileOpen);\n  };\n\n  return React__default.createElement(\"div\", {\n    className: classes.root\n  }, React__default.createElement(AppHeader, {\n    logoImage: \"intellicare.png\",\n    userImage: \"user.jpg\",\n    badgeCount: 8,\n    menuOnClick: handleDrawerToggle\n  }), React__default.createElement(\"nav\", {\n    className: classes.drawer\n  }, React__default.createElement(Hidden, {\n    smUp: true,\n    implementation: \"css\"\n  }, React__default.createElement(Drawer, {\n    classes: {\n      paper: classes.drawerPaper\n    },\n    variant: \"temporary\",\n    open: mobileOpen,\n    onClose: handleDrawerToggle\n  }, React__default.createElement(AppSidebar, _assign({}, props)))), React__default.createElement(Hidden, {\n    xsDown: true,\n    implementation: \"css\"\n  }, React__default.createElement(Drawer, {\n    classes: {\n      paper: classes.drawerPaper\n    },\n    variant: \"permanent\",\n    open: true\n  }, React__default.createElement(AppSidebar, _assign({}, props))))), React__default.createElement(\"main\", {\n    className: classes.content\n  }, React__default.createElement(\"div\", {\n    className: classes.toolbar\n  }), props.children));\n};\n\nvar useStyles$9 = makeStyles({\n  root: {\n    backgroundColor: '#ffffff',\n    padding: '10px'\n  },\n  gridContainer: {\n    height: '100px'\n  },\n  breadCrumbs: {\n    marginBottom: '10px'\n  },\n  headerTitle: {\n    fontSize: 25\n  },\n  linkPrevious: {\n    fontSize: 12,\n    fontWeight: 300,\n    color: 'black',\n    cursor: 'pointer'\n  },\n  linkCurrent: {\n    fontSize: 12,\n    color: 'black',\n    cursor: 'pointer'\n  }\n});\n\nvar PageHeader = function PageHeader() {\n  var classes = useStyles$9();\n  return createElement(\"div\", {\n    className: classes.root\n  }, createElement(Grid, {\n    container: true,\n    justify: \"space-between\",\n    alignItems: \"center\",\n    className: classes.gridContainer\n  }, createElement(Grid, {\n    item: true\n  }, createElement(Breadcrumbs, {\n    className: classes.breadCrumbs\n  }, createElement(Link, {\n    className: classes.linkPrevious\n  }, \"CLIENTS\"), createElement(Link, {\n    className: classes.linkCurrent\n  }, \"HAPPY INNOVATIVE TECHNOLOGIES, INC.\")), createElement(Typography, {\n    className: classes.headerTitle\n  }, \"Happy Innovative Technologies, Inc.\")), createElement(Grid, {\n    item: true\n  }, createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\"\n  }, \"Edit Client\"))));\n};\n\nvar index$c =\n/*#__PURE__*/\nObject.freeze({\n  'default': PageHeader\n});\nvar useStyles$a = makeStyles({\n  root: {\n    padding: '5px 5px'\n  },\n  name: function name(props) {\n    return {\n      fontSize: props.nameFontSize,\n      color: 'rgba(39, 46, 76, 0.6)'\n    };\n  },\n  value: function value(props) {\n    return {\n      fontSize: props.valueFontSize,\n      color: 'rgb(39, 46, 76)'\n    };\n  }\n});\n\nvar ClientInfoItem = function ClientInfoItem(props) {\n  var classes = useStyles$a(props);\n  return createElement(\"div\", {\n    className: classes.root\n  }, createElement(Typography, {\n    className: classes.name\n  }, props.name), createElement(Typography, {\n    className: classes.value\n  }, props.value));\n};\n\nClientInfoItem.defaultProps = {\n  nameFontSize: 12,\n  valueFontSize: 16\n};\nvar useStyles$b = makeStyles({\n  grid: function grid(props) {\n    return {\n      height: props.height\n    };\n  }\n});\n\nvar GridHorizontalDivider = function GridHorizontalDivider(props) {\n  var classes = useStyles$b(props);\n  return createElement(Grid, {\n    item: true,\n    xs: 12,\n    className: classes.grid\n  });\n};\n\nGridHorizontalDivider.defaultProps = {\n  height: '10px'\n};\nGridHorizontalDivider.propTypes = {\n  height: PropTypes.string\n};\nvar useCirclePrimitive = makeStyles(function (theme) {\n  var circlePrimitiveStyle = {\n    width: '100%',\n    height: '100%',\n    position: 'absolute',\n    left: '0',\n    top: '0'\n  };\n\n  if (theme.rotate) {\n    Object.assign(circlePrimitiveStyle, {\n      'transform': \"rotate(\" + theme.rotate + \"deg)\"\n    });\n  }\n\n  var circlePrimBeforeStyle = {\n    content: '',\n    display: 'block',\n    margin: '0 auto',\n    width: '15%',\n    height: '15%',\n    backgroundColor: '#999',\n    borderRadius: '100%',\n    '@keyframes circleFadeDelay': {\n      '0%,39%,100%': {\n        opacity: 0\n      },\n      '40%': {\n        opacity: 1\n      }\n    },\n    animation: \"$circleFadeDelay 1.2s infinite ease-in-out both\"\n  };\n\n  if (theme.delay) {\n    Object.assign(circlePrimBeforeStyle, {\n      animationDelay: theme.delay + \"s\"\n    });\n  } // Object.assign(circlePrimitiveStyle, {\n  //   '&:before': circlePrimBeforeStyle,\n  // });\n\n\n  return {\n    root: circlePrimitiveStyle\n  };\n});\n\nvar Circle = function Circle(props) {\n  var classes = useCirclePrimitive(props);\n  return createElement(\"div\", {\n    className: classes.root\n  });\n};\n\nvar useStyles$c = makeStyles({\n  root: {\n    margin: '2em auto',\n    width: '40px',\n    height: '40px',\n    position: 'relative'\n  }\n});\n\nvar Wrapper = function Wrapper(props) {\n  var classes = useStyles$c();\n  return React__default.createElement(\"div\", _assign({\n    className: classes.root\n  }, props));\n};\n\nvar LoadingIndicator = function LoadingIndicator() {\n  return createElement(Wrapper, null, createElement(Circle, null), createElement(Circle, {\n    rotate: 30,\n    delay: -1.1\n  }), createElement(Circle, {\n    rotate: 60,\n    delay: -1\n  }), createElement(Circle, {\n    rotate: 90,\n    delay: -0.9\n  }), createElement(Circle, {\n    rotate: 120,\n    delay: -0.8\n  }), createElement(Circle, {\n    rotate: 150,\n    delay: -0.7\n  }), createElement(Circle, {\n    rotate: 180,\n    delay: -0.6\n  }), createElement(Circle, {\n    rotate: 210,\n    delay: -0.5\n  }), createElement(Circle, {\n    rotate: 240,\n    delay: -0.4\n  }), createElement(Circle, {\n    rotate: 270,\n    delay: -0.3\n  }), createElement(Circle, {\n    rotate: 300,\n    delay: -0.2\n  }), createElement(Circle, {\n    rotate: 330,\n    delay: -0.1\n  }));\n};\n\nvar useStyles$d = makeStyles({\n  previous_page: {\n    fontWeight: 300,\n    textDecoration: 'underline'\n  },\n  current_page: {\n    fontWeight: 600\n  }\n});\n\nvar BreadcrumbsComponent = function BreadcrumbsComponent(props) {\n  var items = props.items;\n  var classes = useStyles$d();\n  return createElement(Breadcrumbs, {\n    \"aria-label\": \"breadcrumb\"\n  }, items.map(function (item, i) {\n    if (item['url'] != \"\") {\n      return createElement(Link, {\n        className: classes.previous_page,\n        key: i,\n        color: \"inherit\",\n        href: item.url\n      }, item.label);\n    } else {\n      return createElement(Typography, {\n        className: classes.current_page,\n        key: i,\n        color: \"textPrimary\"\n      }, item.label);\n    }\n  }));\n};\n\nBreadcrumbsComponent.defaultProps = {\n  items: [{\n    label: \"SAMPLE\",\n    url: \"\"\n  }]\n};\nvar useStyles$e = makeStyles(function (theme) {\n  var _a;\n\n  return {\n    appBar: (_a = {\n      top: 'auto',\n      bottom: 0,\n      border: '1px solid #707070',\n      backgroundColor: 'rgba(54, 54, 54, 0.64)'\n    }, _a[theme.breakpoints.up('sm')] = {\n      width: 'calc(100% - 72px)'\n    }, _a),\n    grow: {\n      flexGrow: 1\n    },\n    button: {\n      margin: '0 10px',\n      minHeight: '42px',\n      minWidth: '150px'\n    },\n    buttonTitle: {\n      fontWeight: 700,\n      fontSize: 13\n    },\n    buttonSubTitle: {\n      fontWeight: 400,\n      fontSize: 7\n    }\n  };\n});\n\nvar FloatingButtons = function FloatingButtons(props) {\n  // const buttonclasses = ButtonStyle();\n  var classes = useStyles$e();\n  return createElement(Grid, {\n    container: true\n  }, createElement(Grid, {\n    item: true,\n    xs: 12\n  }, createElement(AppBar, {\n    className: classes.appBar\n  }, createElement(Toolbar, null, props.rightButtons, createElement(\"div\", {\n    className: classes.grow\n  }), props.leftButtons))));\n};\n\nFloatingButtons.defaultProps = {\n  leftButtons: null,\n  rightButtons: null\n};\nvar useStyles$f = makeStyles(function (theme) {\n  var _a, _b;\n\n  return {\n    root: {\n      display: 'flex'\n    },\n    drawer: (_a = {}, _a[theme.breakpoints.up('sm')] = {\n      width: '72px',\n      flexShrink: 0\n    }, _a),\n    drawerPaper: {\n      backgroundColor: '#1e2071'\n    },\n    content: {\n      flexGrow: 1\n    },\n    toolbar: theme.mixins.toolbar,\n    menuButton: (_b = {\n      marginRight: theme.spacing(2)\n    }, _b[theme.breakpoints.up('sm')] = {\n      display: 'none'\n    }, _b),\n    logo: {\n      height: '40px'\n    },\n    badge: {\n      backgroundColor: '#ff6969',\n      color: '#ffffff',\n      fontWeight: 700\n    },\n    grow: {\n      flexGrow: 1\n    },\n    sidebar: {\n      maxWidth: '85px'\n    },\n    contentgrid: {\n      maxWidth: 'calc(100% - 85px)',\n      flexBasis: 'calc(100% - 85px)'\n    }\n  };\n});\n\nvar PageLayout = function PageLayout(props) {\n  var classes = useStyles$f();\n\n  var _a = useState(false),\n      mobileOpen = _a[0],\n      setMobileOpen = _a[1];\n\n  var _b = React__default.useState(null),\n      anchorEl = _b[0],\n      setAnchorEl = _b[1];\n\n  var _c = React__default.useState(false),\n      open = _c[0],\n      setOpen = _c[1];\n\n  var _d = React__default.useState(),\n      placement = _d[0],\n      setPlacement = _d[1];\n\n  var handleDrawerToggle = function handleDrawerToggle() {\n    setMobileOpen(!mobileOpen);\n  };\n\n  var handleClick = function handleClick(newPlacement) {\n    return function (event) {\n      setAnchorEl(event.currentTarget);\n      setOpen(function (prev) {\n        return placement !== newPlacement || !prev;\n      });\n      setPlacement(newPlacement);\n    };\n  };\n\n  var logolink = '/';\n\n  switch (props.page) {\n    case 'membership':\n      logolink = '#/membership';\n      break;\n\n    case 'underwriting':\n      logolink = '#/underwriting';\n      break;\n\n    default:\n      break;\n  }\n\n  return React__default.createElement(\"div\", {\n    className: classes.root\n  }, React__default.createElement(Popper, {\n    open: open,\n    anchorEl: anchorEl,\n    placement: placement,\n    transition: true\n  }, function (_a) {\n    var TransitionProps = _a.TransitionProps;\n    return React__default.createElement(Fade, _assign({}, TransitionProps, {\n      timeout: 350\n    }), React__default.createElement(Paper$1, null, React__default.createElement(List$1, null, React__default.createElement(ListItem$1, {\n      button: true,\n      onClick: props.onLogout\n    }, React__default.createElement(ListItemIcon$1, null, React__default.createElement(ExitToAppIcon, null)), React__default.createElement(ListItemText$1, {\n      primary: \"Logout\"\n    })))));\n  }), React__default.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"flex-start\"\n  }, React__default.createElement(Grid, {\n    item: true,\n    xs: 1,\n    className: classes.sidebar\n  }, React__default.createElement(\"nav\", {\n    className: classes.drawer\n  }, React__default.createElement(Hidden, {\n    smUp: true,\n    implementation: \"css\"\n  }, React__default.createElement(Drawer, {\n    classes: {\n      paper: classes.drawerPaper\n    },\n    variant: \"temporary\",\n    open: mobileOpen,\n    onClose: handleDrawerToggle\n  }, React__default.createElement(AppSidebar, _assign({}, props)))), React__default.createElement(Hidden, {\n    xsDown: true,\n    implementation: \"css\"\n  }, React__default.createElement(Drawer, {\n    classes: {\n      paper: classes.drawerPaper\n    },\n    variant: \"permanent\",\n    open: true\n  }, React__default.createElement(AppSidebar, _assign({}, props)))))), React__default.createElement(Grid, {\n    item: true,\n    xs: 11,\n    className: classes.contentgrid\n  }, React__default.createElement(Grid, {\n    container: true,\n    direction: \"column\"\n  }, props.page !== 'customer care' ? React__default.createElement(Grid, {\n    item: true,\n    xs: 12\n  }, React__default.createElement(Toolbar, null, React__default.createElement(IconButton, {\n    edge: \"start\",\n    className: classes.menuButton\n  }, React__default.createElement(MenuIcon, null)), React__default.createElement(Link, {\n    href: logolink\n  }, React__default.createElement(\"img\", {\n    src: 'intellicare.png',\n    className: classes.logo,\n    alt: \"logo\"\n  })), React__default.createElement(\"div\", {\n    className: classes.grow\n  }), React__default.createElement(IconButton, {\n    edge: \"end\",\n    onClick: handleClick('bottom-end')\n  }, React__default.createElement(Avatar, {\n    src: 'user.jpg',\n    alt: \"avatar\"\n  })))) : null, React__default.createElement(Grid, {\n    item: true,\n    xs: 12\n  }, React__default.createElement(\"main\", {\n    className: classes.content\n  }, props.children))))));\n};\n\nvar index$d =\n/*#__PURE__*/\nObject.freeze({\n  BaseTheme: BaseTheme,\n  SampleCoreComponent: index$b,\n  InputAutocomplete: index$5,\n  InputChipTextField: index$6,\n  InputSelect: index$7,\n  InputSelectSetValue: index$8,\n  InputTextField: index$9,\n  LoadingIndicator: LoadingIndicator,\n  AppHeader: AppHeader,\n  AppSidebar: AppSidebar,\n  AuthenticatedLayout: AuthenticatedLayout,\n  PageHeader: index$c,\n  ClientInfoItem: ClientInfoItem,\n  GridHorizontalDivider: GridHorizontalDivider,\n  TicketModal: index$a,\n  BreadcrumbsComponent: BreadcrumbsComponent,\n  FloatingButtons: FloatingButtons,\n  PageLayout: PageLayout\n});\nvar index$e =\n/*#__PURE__*/\nObject.freeze({\n  Actions: index,\n  Definitions: index$1,\n  Reducers: index$2,\n  Services: index$3,\n  Stores: index$4,\n  UI: index$d\n});\n/**\r\n * Validate the shape of redux store\r\n */\n\nfunction checkStore(store) {\n  var shape = {\n    dispatch: isFunction,\n    subscribe: isFunction,\n    getState: isFunction,\n    replaceReducer: isFunction,\n    runSaga: isFunction,\n    injectedReducers: isObject,\n    injectedSagas: isObject\n  };\n  invariant(conformsTo(store, shape), '(src/Utils...) injectors: Expected a valid redux store');\n}\n/**\r\n * Create the store with dynamic reducers\r\n */\n\n\nfunction configureStore(createReducer, initialState, history) {\n  if (initialState === void 0) {\n    initialState = {};\n  }\n\n  var composeEnhancers = compose;\n  var reduxSagaMonitorOptions = {}; // If Redux Dev Tools and Saga Dev Tools Extensions are installed, enable them\n\n  /* istanbul ignore next */\n\n  if (process.env.NODE_ENV !== 'production' && typeof window === 'object') {\n    if (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) {\n      composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({});\n    } // NOTE: Uncomment the code below to restore support for Redux Saga\n    // Dev Tools once it supports redux-saga version 1.x.x\n    // if (window.__SAGA_MONITOR_EXTENSION__)\n    //   reduxSagaMonitorOptions = {\n    //     sagaMonitor: window.__SAGA_MONITOR_EXTENSION__,\n    //   };\n\n  }\n\n  var sagaMiddleware = createSagaMiddleware(reduxSagaMonitorOptions); // Create the store with two middlewares\n  // 1. sagaMiddleware: Makes redux-sagas work\n  // 2. routerMiddleware: Syncs the location/URL path to the state\n\n  var middlewares = [sagaMiddleware, routerMiddleware(history)];\n  var enhancers = [applyMiddleware.apply(void 0, middlewares)];\n  var store = createStore(createReducer(), initialState, composeEnhancers.apply(void 0, enhancers)); // Extensions\n\n  store.runSaga = sagaMiddleware.run;\n  store.injectedReducers = {}; // Reducer registry\n\n  store.injectedSagas = {}; // Saga registry\n\n  return store;\n}\n\nvar RESTART_ON_REMOUNT = '@@saga-injector/restart-on-remount';\nvar DAEMON = '@@saga-injector/daemon';\nvar ONCE_TILL_UNMOUNT = '@@saga-injector/once-till-unmount';\nvar constants =\n/*#__PURE__*/\nObject.freeze({\n  RESTART_ON_REMOUNT: RESTART_ON_REMOUNT,\n  DAEMON: DAEMON,\n  ONCE_TILL_UNMOUNT: ONCE_TILL_UNMOUNT\n});\nvar history = createBrowserHistory();\n\nfunction injectReducerFactory(createReducer, store, isValid) {\n  if (isValid === void 0) {\n    isValid = false;\n  } // tslint:disable-next-line: only-arrow-functions\n\n\n  return function injectReducer(key, reducer) {\n    if (!isValid) {\n      checkStore(store);\n    }\n\n    invariant(isString(key) && !isEmpty(key) && isFunction(reducer), '(src/Utils...) injectReducer: Expected `reducer` to be a reducer function'); // tslint:disable-next-line:max-line-length\n    // Check `store.injectedReducers[key] === reducer` for hot reloading when a key is the same but a reducer is different\n\n    if (Reflect.has(store.injectedReducers, key) && store.injectedReducers[key] === reducer) {\n      return;\n    }\n\n    store.injectedReducers[key] = reducer;\n    store.replaceReducer(createReducer(store.injectedReducers));\n  };\n}\n\nfunction getInjectors(createReducer, store) {\n  checkStore(store);\n  return {\n    injectReducer: injectReducerFactory(createReducer, store, true)\n  };\n}\n/**\r\n * Dynamically injects a reducer\r\n *\r\n * @param {string} key A key of the reducer\r\n * @param {function} reducer A reducer that will be injected\r\n *\r\n */\n\n\nfunction hocWithReducer(createReducer, _a) {\n  var key = _a.key,\n      reducer = _a.reducer;\n\n  function wrap(WrappedComponent) {\n    // dont wanna give access to HOC. Child only\n    var ReducerInjector =\n    /** @class */\n    function (_super) {\n      __extends(ReducerInjector, _super);\n\n      function ReducerInjector(props, context) {\n        var _this = _super.call(this, props, context) || this;\n\n        getInjectors(createReducer, context.store).injectReducer(\"\" + key, reducer);\n        return _this;\n      }\n\n      ReducerInjector.prototype.render = function () {\n        return createElement(WrappedComponent, _assign({}, this.props));\n      };\n\n      ReducerInjector.WrappedComponent = WrappedComponent;\n      ReducerInjector.displayName = \"withReducer(\" + (WrappedComponent.displayName || WrappedComponent.name || 'Component') + \")\";\n      return ReducerInjector;\n    }(Component$2);\n\n    return hoistNonReactStatics(ReducerInjector, WrappedComponent);\n  }\n\n  return wrap;\n}\n\nvar useInjectReducer = function useInjectReducer(createReducer, _a) {\n  var key = _a.key,\n      reducer = _a.reducer;\n  var store = useStore();\n  useEffect(function () {\n    getInjectors(createReducer, store).injectReducer(\"\" + key, reducer);\n  }, []);\n};\n\nvar allowedModes = [RESTART_ON_REMOUNT, DAEMON, ONCE_TILL_UNMOUNT];\n\nvar checkKey = function checkKey(key) {\n  return invariant(isString(key) && !isEmpty(key), '(src/Utils...) injectSaga: Expected `key` to be a non empty string');\n};\n\nvar checkDescriptor = function checkDescriptor(descriptor) {\n  var shape = {\n    saga: isFunction,\n    mode: function mode(_mode) {\n      return isString(_mode) && allowedModes.includes(_mode || '');\n    }\n  };\n  invariant(conformsTo(descriptor, shape), '(src/Utils...) injectSaga: Expected a valid saga descriptor');\n};\n\nfunction injectSagaFactory(store, isValid) {\n  if (isValid === void 0) {\n    isValid = false;\n  } // tslint:disable-next-line: only-arrow-functions\n\n\n  return function injectSaga(key, descriptor, args) {\n    if (descriptor === void 0) {\n      descriptor = {};\n    }\n\n    if (!isValid) {\n      checkStore(store);\n    }\n\n    var newDescriptor = _assign(_assign({}, descriptor), {\n      mode: descriptor.mode || DAEMON\n    });\n\n    var saga = newDescriptor.saga,\n        mode = newDescriptor.mode;\n    checkKey(key);\n    checkDescriptor(newDescriptor);\n    var hasSaga = Reflect.has(store.injectedSagas, key);\n\n    if (process.env.NODE_ENV !== 'production') {\n      var oldDescriptor = store.injectedSagas[key]; // enable hot reloading of daemon and once-till-unmount sagas\n\n      if (hasSaga && oldDescriptor.saga !== saga) {\n        oldDescriptor.task.cancel();\n        hasSaga = false;\n      }\n    }\n\n    if (!hasSaga || hasSaga && mode !== DAEMON && mode !== ONCE_TILL_UNMOUNT) {\n      store.injectedSagas[key] = _assign(_assign({}, newDescriptor), {\n        task: store.runSaga(saga, args)\n      });\n    }\n  };\n}\n\nfunction ejectSagaFactory(store, isValid) {\n  if (isValid === void 0) {\n    isValid = false;\n  } // tslint:disable-next-line: only-arrow-functions\n\n\n  return function ejectSaga(key) {\n    if (!isValid) {\n      checkStore(store);\n    }\n\n    checkKey(key);\n\n    if (Reflect.has(store.injectedSagas, key)) {\n      var descriptor = store.injectedSagas[key];\n\n      if (descriptor.mode && descriptor.mode !== DAEMON) {\n        descriptor.task.cancel(); // Clean up in production; in development we need `descriptor.saga` for hot reloading\n\n        if (process.env.NODE_ENV === 'production') {\n          // Need some value to be able to detect `ONCE_TILL_UNMOUNT` sagas in `injectSaga`\n          store.injectedSagas[key] = 'done';\n        }\n      }\n    }\n  };\n}\n\nfunction getInjectors$1(store) {\n  checkStore(store);\n  return {\n    injectSaga: injectSagaFactory(store, true),\n    ejectSaga: ejectSagaFactory(store, true)\n  };\n}\n/**\r\n * Dynamically injects a saga, passes component's props as saga arguments\r\n *\r\n * @param {string} key A key of the saga\r\n * @param {function} saga A root saga that will be injected\r\n * @param {string} [mode] By default (constants.RESTART_ON_REMOUNT) the saga will be started on component mount and\r\n * cancelled with `task.cancel()` on component un-mount for improved performance. Another two options:\r\n *   - constants.DAEMON—starts the saga on component mount and never cancels it or starts again,\r\n *   - constants.ONCE_TILL_UNMOUNT—behaves like 'RESTART_ON_REMOUNT' but never runs it again.\r\n *\r\n */\n\n\nfunction hocWithSaga(_a) {\n  var key = _a.key,\n      saga = _a.saga,\n      mode = _a.mode;\n\n  function wrap(WrappedComponent) {\n    // dont wanna give access to HOC. Child only\n    var InjectSaga =\n    /** @class */\n    function (_super) {\n      __extends(InjectSaga, _super);\n\n      function InjectSaga(props, context) {\n        var _this = _super.call(this, props, context) || this;\n\n        _this.injectors = getInjectors$1(context.store);\n\n        _this.injectors.injectSaga(key, {\n          saga: saga,\n          mode: mode\n        }, _this.props);\n\n        return _this;\n      }\n\n      InjectSaga.prototype.componentWillUnmount = function () {\n        this.injectors.ejectSaga(key);\n      };\n\n      InjectSaga.prototype.render = function () {\n        return createElement(WrappedComponent, _assign({}, this.props));\n      };\n\n      InjectSaga.WrappedComponent = WrappedComponent;\n      InjectSaga.displayName = \"withSaga(\" + (WrappedComponent.displayName || WrappedComponent.name || 'Component') + \")\";\n      return InjectSaga;\n    }(Component$2);\n\n    return hoistNonReactStatics(InjectSaga, WrappedComponent);\n  }\n\n  return wrap;\n}\n\nvar useInjectSaga = function useInjectSaga(_a) {\n  var key = _a.key,\n      saga = _a.saga,\n      mode = _a.mode;\n  var store = useStore();\n  useEffect(function () {\n    var injectors = getInjectors$1(store);\n    injectors.injectSaga(\"\" + key, {\n      saga: saga,\n      mode: mode\n    });\n    return function () {\n      injectors.ejectSaga(\"\" + key);\n    };\n  }, []);\n};\n\nvar loadable = function loadable(importFunc, _a) {\n  var _b = (_a === void 0 ? {\n    fallback: null\n  } : _a).fallback,\n      fallback = _b === void 0 ? null : _b;\n  var LazyComponent = lazy(importFunc);\n\n  var Component = function Component(props) {\n    return React__default.createElement(Suspense, {\n      fallback: fallback\n    }, React__default.createElement(LazyComponent, _assign({}, props)));\n  };\n\n  return Component;\n};\n\nvar ResponseError =\n/** @class */\nfunction (_super) {\n  __extends(ResponseError, _super);\n\n  function ResponseError(response) {\n    var _this = _super.call(this, response.statusText) || this;\n\n    _this.response = response;\n    return _this;\n  }\n\n  return ResponseError;\n}(Error);\n/**\r\n * Parses the JSON returned by a network request\r\n *\r\n * @param  {object} response A response from a network request\r\n *\r\n * @return {object}          The parsed JSON from the request\r\n */\n\n\nfunction parseJSON(response) {\n  return __awaiter(this, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      if (response.status === 204 || response.status === 205) {\n        return [2\n        /*return*/\n        , null];\n      }\n\n      return [2\n      /*return*/\n      , response.json()];\n    });\n  });\n}\n/**\r\n * Checks if a network request came back fine, and throws an error if not\r\n *\r\n * @param  {object} response   A response from a network request\r\n *\r\n * @return {object|undefined} Returns either the response, or throws an error\r\n */\n\n\nfunction checkStatus(response) {\n  return __awaiter(this, void 0, void 0, function () {\n    var error;\n    return __generator(this, function (_a) {\n      if (response.status >= 200 && response.status < 300) {\n        return [2\n        /*return*/\n        , response];\n      }\n\n      error = new ResponseError(response);\n      error.response = response;\n      throw error;\n    });\n  });\n}\n/**\r\n * Requests a URL, returning a promise\r\n *\r\n * @param  {string} url       The URL we want to request\r\n * @param  {object} [options] The options we want to pass to \"fetch\"\r\n *\r\n * @return {object}           The response data\r\n */\n\n\nfunction request(url, options) {\n  return __awaiter(this, void 0, void 0, function () {\n    var fetchResponse, response;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , fetch(url, options)];\n\n        case 1:\n          fetchResponse = _a.sent();\n          return [4\n          /*yield*/\n          , checkStatus(fetchResponse)];\n\n        case 2:\n          response = _a.sent();\n          return [2\n          /*return*/\n          , parseJSON(response)];\n      }\n    });\n  });\n}\n\nvar index$f =\n/*#__PURE__*/\nObject.freeze({\n  checkStore: checkStore,\n  configureStore: configureStore,\n  constants: constants,\n  history: history,\n  hocWithReducer: hocWithReducer,\n  useInjectReducer: useInjectReducer,\n  hocWithSaga: hocWithSaga,\n  useInjectSaga: useInjectSaga,\n  loadable: loadable,\n  injectReducerFactory: injectReducerFactory,\n  getReducerInjectors: getInjectors,\n  request: request,\n  ResponseError: ResponseError,\n  injectSagaFactory: injectSagaFactory,\n  ejectSagaFactory: ejectSagaFactory,\n  getSagaInjectors: getInjectors$1\n});\nvar theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#3ab77d',\n      contrastText: '#ffffff'\n    },\n    secondary: {\n      main: '#ffffff',\n      contrastText: '#3ab77d'\n    }\n  },\n  typography: {\n    fontFamily: '\"Usual\", \"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n    button: {\n      fontFamily: 'Usual, Roboto, Helvetica, Arial, sans-serif',\n      fontWeight: 700,\n      fontSize: 13,\n      textTransform: 'none'\n    }\n  },\n  overrides: {\n    MuiButton: {\n      containedPrimary: {\n        boxShadow: '0px 3px 6px #1e207129',\n        '&:hover': {\n          backgroundColor: '#008650'\n        }\n      },\n      containedSecondary: {\n        border: '1px solid #0000001A',\n        boxShadow: '0px 1px 3px #00000033',\n        '&:hover': {\n          backgroundColor: '#3ab77d1a'\n        }\n      }\n    }\n  }\n});\n\nvar Component = function Component(props) {\n  var Component = props.Component,\n      store = props.store,\n      componentProps = props.componentProps;\n  return createElement(ThemeProvider, {\n    theme: theme\n  }, createElement(Provider$1, {\n    store: store\n  }, createElement(ConnectedRouter, {\n    history: history\n  }, createElement(HashRouter, {\n    basename: \"/\"\n  }, createElement(Component, _assign({}, componentProps))))));\n};\n\nvar index$g =\n/*#__PURE__*/\nObject.freeze({\n  Component: Component\n});\n/*\r\n *\r\n * MessageProvider constants\r\n *\r\n */\n\nvar ActionTypes;\n\n(function (ActionTypes) {\n  ActionTypes[\"CHANGE_LOCALE\"] = \"hims/MsgProvider/CHANGE_LOCALE\";\n})(ActionTypes || (ActionTypes = {}));\n\nvar ActionTypes$1 = ActionTypes;\nvar DEFAULT_LOCALE = 'en';\n/*\r\n *\r\n * MessageProvider reducer\r\n *\r\n */\n\nvar initialState = {\n  locale: DEFAULT_LOCALE\n};\n\nfunction messageProviderReducer(state, action) {\n  if (state === void 0) {\n    state = initialState;\n  }\n\n  switch (action.type) {\n    case ActionTypes$1.CHANGE_LOCALE:\n      return {\n        locale: action.payload\n      };\n\n    default:\n      return state;\n  }\n}\n/**\r\n * Direct selector to the languageToggle state domain\r\n */\n\n\nvar selectLanguage = function selectLanguage(state) {\n  return state.language || initialState;\n};\n/**\r\n * Select the language locale\r\n */\n\n\nvar makeSelectLocale = function makeSelectLocale() {\n  return createSelector(selectLanguage, function (languageState) {\n    return languageState.locale;\n  });\n};\n\nvar enTranslationMessages = require('Messages/en.json'); // prettier-ignore\n\n\nvar appLocales = ['en'];\n\nvar formatTranslationMessages = function formatTranslationMessages(locale, messages) {\n  var defaultFormattedMessages = locale !== DEFAULT_LOCALE ? formatTranslationMessages(DEFAULT_LOCALE, enTranslationMessages) : {};\n\n  var flattenFormattedMessages = function flattenFormattedMessages(formattedMessages, key) {\n    var _a;\n\n    var formattedMessage = !messages[key] && locale !== DEFAULT_LOCALE ? defaultFormattedMessages[key] : messages[key];\n    return _assign(_assign({}, formattedMessages), (_a = {}, _a[key] = formattedMessage, _a));\n  };\n\n  return Object.keys(messages).reduce(flattenFormattedMessages, {});\n};\n\nvar translationMessages = {\n  en: formatTranslationMessages('en', enTranslationMessages)\n};\n/*\r\n *\r\n * MessageProvider\r\n *\r\n * this component connects the redux state message locale to the\r\n * IntlProvider component and i18n messages (loaded from `src/Translations`)\r\n */\n\nvar stateSelector = createSelector(makeSelectLocale(), function (locale) {\n  return {\n    locale: locale\n  };\n});\n\nvar Provider = function Provider(props) {\n  var locale = useSelector(stateSelector).locale;\n  return React__default.createElement(IntlProvider, {\n    locale: locale,\n    key: locale,\n    messages: props.messages[locale]\n  }, React__default.Children.only(props.children));\n};\n\nvar index$h =\n/*#__PURE__*/\nObject.freeze({\n  Provider: Provider,\n  appLocales: appLocales,\n  formatTranslationMessages: formatTranslationMessages,\n  messageProviderReducer: messageProviderReducer\n});\nvar scope = 'boilerplate.containers.NotFoundPage';\nvar messages = defineMessages({\n  header: {\n    id: scope + \".header\",\n    defaultMessage: 'Page not found.'\n  }\n});\n/**\r\n * NotFoundPage\r\n *\r\n * This is the page shown when the user visits a url that doesn't have a route\r\n */\n\nvar Component$1 = function Component$1() {\n  return createElement(\"article\", null, createElement(\"h1\", null, createElement(FormattedMessage, _assign({}, messages.header))));\n};\n\nvar index$i =\n/*#__PURE__*/\nObject.freeze({\n  Document: index$g,\n  Message: index$h,\n  NotFoundPage: Component$1\n});\nvar index$j =\n/*#__PURE__*/\nObject.freeze({});\nexport { index$e as Components, index$i as Containers, index$j as Pages, index$f as Utils };","\n\nimport * as React from 'react';\nimport { Link } from '@material-ui/core';\nimport './component-style.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\n\ninterface IProps {\n    icon?: IconProp;\n    label?: string;\n    onClick: () => void;\n}\n\nexport class TextButton extends React.Component<IProps> {\n\n    shouldComponentUpdate(props: IProps, _state: any) {\n        return (\n            (this.props.icon !== props.icon) ||\n            (this.props.label !== props.label)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <Link className='text-button' onClick={() => this.props.onClick()}>\n                {this.props.icon ? <FontAwesomeIcon icon={this.props.icon} /> : null}\n                {this.props.icon ? <span style={{marginLeft: '10px'}}/> : null}\n                {this.props.label}\n            </Link>\n        );\n    }\n}","import * as React from 'react';\nimport { PartialMemberData } from 'Pages/CustomerCarePage/Models';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\n\ninterface IProps {\n    members: PartialMemberData[];\n    searchText: string;\n    onSelectMember: (memberId: string) => void;\n}\n\nexport class SearchedMembersList extends React.Component<IProps> {\n\n    getExtractedMembers = (filter: string) => {\n        return (filter.trim().length > 0 ? (\n            this.props.members\n                .filter(member => member.memberId)\n                .filter(member => member.memberId.includes(filter))\n        ) : []);\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='mini-ticket-modals'>\n                {this.getExtractedMembers(this.props.searchText).map(member => {\n                    return (\n                        <>\n                        {this.renderMemberShortDetail(member)}\n                        <div className='line-border' />\n                        </>\n                    );\n                })}\n            </div>\n        );\n    }\n\n    renderMemberShortDetail(member: PartialMemberData): JSX.Element {\n        const name = \n            member.firstName + ' ' + \n            GlobalFunction.getIntials(member.middleName) + ' ' +\n            member.lastName;\n\n        return (\n            <div \n                className='small-section mini-ticket-modal'\n                onClick={() => this.props.onSelectMember(member.memberId)}>\n                <div className='text' />\n                <div className='text'>\n                    <div className='circle' style={{backgroundColor: '#3AB77D'}} />\n                    <div style={{display: 'inline-block'}}>\n                        <div className='header-2'>{member.memberId}</div>\n                    </div>\n\n                </div>\n                \n                <div className='text'>{name}</div>\n                <div className='text'>{member.clientName}</div>\n                <div className='text'>{'---'}</div>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\nimport { CircularProgress } from \"@material-ui/core\";\n\ninterface IProps {\n    height?: string;\n    color?: string;\n    size?: number;\n}\n\nexport class Loading extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        return (\n            <div \n                style={{\n                    textAlign: 'center', \n                    paddingTop: this.props.height ? this.props.height : undefined}}>\n                <CircularProgress \n                    size={this.props.size}\n                    style={{\n                        color: this.props.color ? this.props.color : undefined}} />\n            </div>\n            \n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\nimport { DropdownChoice } from '../Models';\nimport Select from 'react-select';\n\ninterface IProps {\n    placeholder: string;\n    choices: DropdownChoice[];\n    type: DropdownChoice;\n    value: string;\n    onChangeType: (type: DropdownChoice) => void;\n    onChangeValue: (value: string) => void;\n}\n\nexport class TypeValueField extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        return (\n            <div className='detailed-input-field'>\n                <div className='text'>{this.props.placeholder}</div>\n                <div className='input-field'>\n                        <Select\n                            className='actual-dropdown'\n                            classNamePrefix='actual-dropdown'\n                            value={this.props.type}\n                            options={this.props.choices} \n                            onChange={(choice: DropdownChoice) => {\n                                this.props.onChangeType(choice);\n                            }} />\n                    <input \n                        className='text-field right' \n                        value={this.props.value}\n                        onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                            this.props.onChangeValue(event.target.value);\n                        }} />\n                </div>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Grid, TableCell, TableRow } from '@material-ui/core';\nimport { Loading } from '../Components/Loading';\nimport { GlobalFunction } from '../GlobalFunction';\nimport { CustomTable } from '../Components/CustomTable';\nimport { MemberData, SimpleTicketData, BenefitData } from '../Models';\n\ninterface IProps {\n    member: MemberData;\n    benefits: BenefitData[];\n    recentTickets?: SimpleTicketData[];\n    onUpdateMemberStateChange?: (member?: MemberData) => void;\n    getRecentTicketsData: (memberId: string) => void;\n\n    disableRecentTickets?: boolean;\n    loadingBenefits: boolean;\n    loadingRecentTickets: boolean;\n}\n\nexport class MemberDataSection extends React.Component <IProps> {\n\n    getBenefitsLimit = () => {\n        let limits: BenefitData[] = [];\n        this.props.benefits.forEach(benefit => {\n            let targetLimitIndex = -1;\n            limits.forEach((limit, index) => {\n                if (benefit.limitType && limit.limitType === benefit.limitType) {\n                    targetLimitIndex = index;\n                }\n            })\n            if (targetLimitIndex > -1) {\n                limits[targetLimitIndex].limit += benefit.limit;\n            } else {\n                limits.push({...benefit});\n            }\n        });\n        return limits.filter(benefit => benefit.limitType);\n    }\n\n    render(): JSX.Element {\n        const member = this.props.member;\n\n        if (!this.props.recentTickets && !this.props.disableRecentTickets) {\n            this.props.getRecentTicketsData(member.memberId);\n        }\n\n        const name = GlobalFunction.toNameFormat(\n            member.firstName,\n            member.middleName,\n            member.lastName\n        );\n        const clientName = member.client.registeredName;\n        const birthDate = GlobalFunction.toShortDateString(new Date(member.birthDate));\n        const age = GlobalFunction.getAge(new Date(member.birthDate));\n        const contractStatus = member.contract ? `${member.contract.status} Contract` : 'No Contract Found';\n        \n        return (\n            <div className='section'>\n                <div className={member.isVip ? 'tag' : ''}>\n                    {member.isVip ? (\n                        <div className='tag-label'>VIP</div>\n                    ) : null}\n                    <div className='circle' style={{backgroundColor: '#3AB77D'}} />\n                    <div style={{display: 'inline-block'}}>\n                        <div className='header-2'>{member.memberId}</div>\n                    </div>\n                    <div className='text'>{name}</div>\n                    <div className='text'>{clientName}</div>\n                    <div className='text'>{'---'}</div>\n                    <div className='text'>{contractStatus}</div>\n                </div>\n                <Grid container>\n                    {this.props.loadingBenefits ? (\n                        <Grid item className='sub-section' xs={12}>\n                            <Loading height='2rem' />\n                        </Grid>\n                    ) : (\n                        this.getBenefitsLimit().map(benefit => {\n                            return (\n                                <Grid item className='sub-section' xs={6}>\n                                    <div className='light-text'>{`${benefit.limitType.toUpperCase()} LIMIT`}</div>\n                                    <div className='small-text'>{`${GlobalFunction.formatNumber(benefit.limit)} ${benefit.limitUnit}`}</div>\n                                </Grid>\n                            );\n                        })\n                    )}\n                </Grid>\n                <Grid container>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>BIRTHDATE (AGE)</div>\n                        <div className='small-text'>{`${birthDate} (${age})`}</div>\n                    </Grid>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>GENDER / STATUS</div>\n                        <div className='small-text'>{`${member.gender} / ${member.civilStatus}`}</div>\n                    </Grid>\n                </Grid>\n                <div className='sub-section'>\n                    {this.props.loadingRecentTickets ? (\n                        <Loading height='2rem' />\n                    ) : (\n                        this.props.recentTickets ? (\n                            <>\n                            <div className='header-2'>OPEN/PENDING TICKETS</div>\n                            <CustomTable\n                                paginationClass='custom-pagination-small'\n                                className='custom-table-small'\n                                labelRowsPerPage='Rows:'\n                                rows={this.props.recentTickets}\n                                rowsPerPageOptions={[5, 10, 25]}\n                                renderHeader={() => this.renderTableHeader()}\n                                renderRow={(rowData: SimpleTicketData, index: number) =>\n                                    this.renderTableRow(rowData, index)} />\n                            </>\n                        ) : null\n                    )}\n                </div>\n            </div>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n        return (\n            <>\n            <TableCell style={{minWidth: '70px', fontSize: '10px'}}>Ticket ID</TableCell>\n            <TableCell style={{fontSize: '10px'}}>Type</TableCell>\n            <TableCell style={{fontSize: '10px'}}>Last Update</TableCell>\n            </>\n        );\n    }\n\n    renderTableRow(recentTicket: SimpleTicketData, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n        return (\n            <TableRow style={{backgroundColor: backgroundColor, fontSize: '10px'}}>\n                <TableCell>{recentTicket.ticketNo}</TableCell>\n                <TableCell>{recentTicket.specificType}</TableCell>\n                <TableCell>{GlobalFunction.toShortDateString(recentTicket.dateUpdated)}</TableCell>\n            </TableRow>\n        );\n    }\n}","let backendUrl = process.env.REACT_APP_PMAKER_BASE_URL;\n\nexport class Processmaker {\n\n    // //local\n    // static localUrl = 'http://18.140.39.215/api/1.0/workflow';//'localhost:32766/api/1.0/workflow';\n\n    // //stg\n    // static stgUrl = 'http://18.140.39.215/api/1.0/workflow';\n\n    static async get(url: string, success: Function, fail: Function) {\n        // const backendUrl = (process.env.NODE_ENV === 'development' ? this.localUrl : this.stgUrl);\n        fetch(backendUrl + url, {\n            method: 'GET',\n            headers: { \n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + localStorage.getItem('pm_token')\n            },\n        })\n        .then(response => response.json())\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n\n    static async post(url:string, body: any, success: Function, fail: Function) {\n        // const backendUrl = (process.env.NODE_ENV === 'development' ? this.localUrl : this.stgUrl);\n        fetch(backendUrl + url, {\n            method: 'POST',\n            headers: { \n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + localStorage.getItem('pm_token')\n            },\n            body: JSON.stringify(body)\n        })\n        .then(response => response.json())\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n\n    static async put(url: string, body: any, success: Function, fail: Function) {\n        // const backendUrl = (process.env.NODE_ENV === 'development' ? this.localUrl : this.stgUrl);\n        fetch(backendUrl + url, {\n            method: 'PUT',\n            headers: { \n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + localStorage.getItem('pm_token')\n            },\n            body: JSON.stringify(body)\n        })\n        .then(response => response)\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n}","import * as React from 'react';\nimport { ClientData, SimpleTicketData } from '../Models';\nimport { Grid, TableCell, TableRow } from '@material-ui/core';\nimport { Loading } from '../Components/Loading';\nimport { CustomTable } from '../Components/CustomTable';\nimport { GlobalFunction } from '../GlobalFunction';\n\ninterface IProps {\n    client: ClientData;\n    recentTickets?: SimpleTicketData[];\n    linkedTickets?: SimpleTicketData[];\n    getRecentTicketsData: (clientId: string) => void;\n    getLinkedTicketsData: (clientId: string) => void;\n\n    disableRecentTickets?: boolean;\n    disableLinkedTickets?: boolean;\n    loadingRecentTickets: boolean;\n    loadingLinkedTickets: boolean;\n}\n\nexport class ClientDataSection extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        const client = this.props.client;\n\n        if (!this.props.recentTickets && !this.props.disableRecentTickets) {\n            this.props.getRecentTicketsData(client.corporateAccountNo);\n        }\n\n        if (!this.props.linkedTickets && !this.props.disableLinkedTickets) {\n            this.props.getLinkedTicketsData(client.corporateAccountNo);\n        }\n\n        const mainAddress = client.mainOfficeAddress;\n        const location = mainAddress ? (\n            `${mainAddress.barangay}, ${mainAddress.city}, ${mainAddress.region}`\n        ) : '';\n        return (\n            <div className='section'>\n                <div className='circle' style={{backgroundColor: '#3AB77D'}} />\n                <div style={{display: 'inline-block'}}>\n                    <div className='header-2'>{client.corporateAccountNo}</div>\n                </div>\n                <div className='text'>{client.registeredName}</div>\n                <Grid container>\n                    <Grid item className='sub-section-2' xs={12}>\n                        <div className='light-text'>CARD NAME</div>\n                        <div className='small-text'>{client.cardName}</div>\n                    </Grid>\n                    <Grid item className='sub-section-2' xs={6}>\n                        <div className='light-text'>EFFECTIVITY DATE</div>\n                        <div className='small-text'>\n                            {client.contract ? GlobalFunction.toShortDateString(client.contract.startDate) : '---'}\n                        </div>\n                    </Grid>\n                    <Grid item className='sub-section-2' xs={6}>\n                        <div className='light-text'>RENEWAL DATE</div>\n                        <div className='small-text'>\n                            {false ? ( // Renewal Date\n                                GlobalFunction.toShortDateString('')\n                            ) : '---*'}\n                        </div>\n                    </Grid>\n                    <Grid item className='sub-section-2' xs={6}>\n                        <div className='light-text'>EXPIRY DATE</div>\n                        <div className='small-text'>\n                            {client.contract ? GlobalFunction.toShortDateString(client.contract.endDate) : '---'}\n                        </div>\n                    </Grid>\n                    <Grid item className='sub-section-2' xs={6}>\n                        <div className='light-text'>EXTENSION DATE</div>\n                        <div className='small-text'>\n                            {false ? ( // Extension Date\n                                GlobalFunction.toShortDateString('')\n                            ) : '---*'}\n                        </div>\n                    </Grid>\n                    <Grid item className='sub-section-2' xs={12}>\n                        <div className='light-text'>SALES CHANNEL</div>\n                        <div className='small-text'>\n                            {client.salesChannel ? client.salesChannel.name : '---'}\n                        </div>\n                    </Grid>\n                    <Grid item className='sub-section-2' xs={12}>\n                        <div className='light-text'>LOCATION</div>\n                        <div className='small-text'>{location}</div>\n                    </Grid>\n                    <Grid item className='sub-section-2' xs={12}>\n                        <div className='light-text'>CONTACT PERSON AND NO.</div>\n                        <div className='small-text'>\n                            {client.mainOfficeAddress && client.mainOfficeAddress.contactPersons.length > 0 ? (\n                                `${client.mainOfficeAddress.contactPersons[0].name}: ${client.mainOfficeAddress.contactPersons[0].contactNo}`\n                            ) : '---'}\n                        </div>\n                    </Grid>\n                </Grid>\n                <div className='sub-section-2'>\n                    {this.props.loadingRecentTickets ? (\n                        <Loading height='2rem' />\n                    ) : (\n                        this.props.recentTickets ? (\n                            <>\n                            <div className='header-2'>RECENT TICKETS</div>\n                            <CustomTable\n                                paginationClass='custom-pagination-smaller'\n                                className='custom-table-smaller'\n                                labelRowsPerPage='Rows:'\n                                rows={this.props.recentTickets}\n                                rowsPerPageOptions={[5, 10, 25]}\n                                renderHeader={() => this.renderRecentTicketHeader()}\n                                renderRow={(rowData: SimpleTicketData, index: number) =>\n                                    this.renderRecentTicketRow(rowData, index)} />\n                            </>\n                        ) : null\n                    )}\n                </div>\n                {/* <div className='sub-section-2'>\n                    {this.props.loadingLinkedTickets ? (\n                        <Loading height='2rem' />\n                    ) : (\n                        this.props.linkedTickets ? (\n                            <>\n                            <div className='header-2'>LINKED TICKETS</div>\n                            <CustomTable\n                                paginationClass='custom-pagination-smaller'\n                                className='custom-table-smaller'\n                                labelRowsPerPage='Rows:'\n                                rows={this.props.linkedTickets}\n                                rowsPerPageOptions={[5, 10, 25]}\n                                renderHeader={() => this.renderLinkedTicketsHeader()}\n                                renderRow={(rowData: SimpleTicketData, index: number) =>\n                                    this.renderLinkedTicketsRow(rowData, index)} />\n                            </>\n                        ) : null\n                    )}\n                </div> */}\n            </div>\n        );\n    }\n\n    renderRecentTicketHeader(): JSX.Element {\n        return (\n            <>\n            <TableCell style={{minWidth: '70px', fontSize: '10px'}}>Ticket ID</TableCell>\n            <TableCell style={{fontSize: '10px'}}>Status</TableCell>\n            <TableCell style={{fontSize: '10px'}}>Created</TableCell>\n            <TableCell style={{fontSize: '10px'}}>Updated</TableCell>\n            </>\n        );\n    }\n\n    renderRecentTicketRow(ticket: SimpleTicketData, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n        return (\n            <TableRow style={{backgroundColor: backgroundColor, fontSize: '10px'}}>\n                <TableCell>{ticket.ticketNo}</TableCell>\n                <TableCell>{ticket.status}</TableCell>\n                <TableCell>{GlobalFunction.toShortDateString(ticket.dateCreated)}</TableCell>\n                <TableCell>{GlobalFunction.toShortDateString(ticket.dateUpdated)}</TableCell>\n            </TableRow>\n        );\n    }\n\n    renderLinkedTicketsHeader(): JSX.Element {\n        return (\n            <>\n            <TableCell style={{minWidth: '70px', fontSize: '10px'}}>Ticket ID</TableCell>\n            <TableCell style={{fontSize: '10px'}}>Status</TableCell>\n            <TableCell style={{fontSize: '10px'}}>Created</TableCell>\n            <TableCell style={{fontSize: '10px'}}>Updated</TableCell>\n            </>\n        );\n    }\n\n    renderLinkedTicketsRow(ticket: SimpleTicketData, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n        return (\n            <TableRow style={{backgroundColor: backgroundColor, fontSize: '10px'}}>\n                <TableCell>{ticket.ticketNo}</TableCell>\n                <TableCell>{ticket.status}</TableCell>\n                <TableCell>{GlobalFunction.toShortDateString(ticket.dateCreated)}</TableCell>\n                <TableCell>{GlobalFunction.toShortDateString(ticket.dateUpdated)}</TableCell>\n            </TableRow>\n        );\n    }\n}","import * as React from 'react';\nimport { PartialClientData } from 'Pages/CustomerCarePage/Models';\n\ninterface IProps {\n    clients: PartialClientData[];\n    searchText: string;\n    onSelectClient: (clientMongoId: string) => void;\n}\n\nexport class SearchedClientsList extends React.Component<IProps> {\n\n    getExtractedClients = (filter: string) => {\n        return (filter.trim().length > 0 ? (\n            this.props.clients\n                .filter(client => client.clientId)\n                .filter(client => client.clientId.includes(filter))\n        ) : []);\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='mini-ticket-modals'>\n                {this.getExtractedClients(this.props.searchText).map(client => {\n                    return (\n                        <>\n                        {this.renderMemberShortDetail(client)}\n                        <div className='line-border' />\n                        </>\n                    );\n                })}\n            </div>\n        );\n    }\n\n    renderMemberShortDetail(client: PartialClientData): JSX.Element {\n\n        return (\n            <div \n                className='small-section mini-ticket-modal'\n                onClick={() => this.props.onSelectClient(client.clientId)}>\n                <div className='text' />\n                <div className='text'>\n                    <div className='circle' style={{backgroundColor: '#3AB77D'}} />\n                    <div style={{display: 'inline-block'}}>\n                        <div className='header-2'>{client.clientId}</div>\n                    </div>\n\n                </div>\n                \n                <div className='text'>{client.clientName}</div>\n            </div>\n        );\n    }\n}","import { TicketData, ConfinementDetails, InquiryData, AvailmentDetails, LOAData, ConsultationDetails, MemberData, ClientData, AddressData } from \"./Models\";\nimport { ConfinementDetails as UpdateInpatientDetails } from \"./UpdateTicketPage/UpdateTicketPage\";\nimport { ConfinementDetails as ResolveInpatientDetails } from \"./ResolveTicketPage/ResolveTicketPage\";\n\n/* \n * Ensures that all data coming from / sending to backend is in order.\n * All GET, POST, PUT, etc., long payloads must be put here to organize the code\n * Thank you.\n * \n * Note: Add long blank lines between function (pref: 10 lines).\n */\n\nexport class Payloads {\n\n    \n\n    static getPostTicketPayload(ticket: TicketData,\n                                uploadedFiles: any[],\n                                member?: MemberData,\n                                client?: ClientData,\n                                confinement?: ConfinementDetails, \n                                availment?: AvailmentDetails, \n                                inquiries?: InquiryData[],\n                                consultation?: ConsultationDetails): any  {\n        return {\n            transaction_no: ticket.transactionNo,\n            received_via: ticket.ticketChannel,\n            received_from: ticket.ticketSource,\n\n            member_name: (ticket.ticketSource === 'Member' ? ticket.memberName : undefined),\n            corporate_client: (ticket.ticketSource === 'Corporate Client' ? ticket.clientName : undefined),\n            broker: (ticket.ticketSource === 'Broker' ? ticket.brokerName : undefined),\n            hospital_name: (ticket.ticketSource === 'Clinic/Hospital' ? (ticket.facility.value + ' - ' + ticket.facility.label) : undefined),\n            department: (ticket.ticketSource === 'Clinic/Hospital' ? ticket.department : undefined),\n\n            caller_name: ticket.callerName,\n            contact_no: ticket.contactNo,\n            additional_notes: ticket.additionalNotes,\n            supporting_documents: uploadedFiles.map(file => {\n                return {\n                    name: file.name,\n                    type: file.type,\n                    url: file.url ? file.url : file.path ? file.path : '',\n                }\n            }),\n\n            ticket_category: {\n                ticket_type: ticket.ticketType,\n                specific_type: ticket.specificType,\n                urgency: ticket.urgency,\n                assign_to: `${ticket.agent.id} - ${ticket.agent.name}`,\n\n                availment_details: (\n                    availment &&\n                    ticket.ticketType === 'Availment' &&\n                    ticket.specificType === 'Outpatient Procedure' ? {\n                    provider: availment.provider.value + ' - ' + availment.provider.label,\n                    availments_list: availment.diagnoses.map(availment => {\n                        return {\n                            code: availment.icd10Code.value,\n                            name: availment.icd10Code.label,\n                            remarks: '',\n                            is_primary: false,\n                            is_final: false,\n                            \n                            doctors: [\n                                {\n                                    id: '',\n                                    name: availment.doctors[0].name,\n                                    specialization: (availment.doctors[0].specialization ? availment.doctors[0].specialization : null),\n                                    fee: 0,\n                                    no_of_visits: '',\n                                    remarks: ''\n                                }\n                            ],\n\n                            procedures: availment.procedures\n                                .filter(procedure => {\n                                    return procedure.cptCode.value;\n                                })\n                                .map(procedure => {\n                                    return {\n                                        code: procedure.cptCode.value,\n                                        name: procedure.cptCode.label,\n                                        amount: procedure.amount.toString(),\n                                        doctor: '',\n                                        phic: procedure.isPHIC,\n                                        notes: '',\n                                        date_added: new Date(),\n                                        assessment_type: procedure.assessmentType,\n                                        assessment_remarks: procedure.assessmentRemarks,\n                                        approved_amount: procedure.approvedAmount\n                                    }\n                                }),\n                            \n                                assessment_type: availment.assessmentType,\n                                assessment_remarks: availment.assessmentRemarks,\n                                approved_amount: availment.approvedAmount\n                        }\n                    })\n                } : undefined),\n\n                confinement_details: (\n                    confinement &&\n                    ticket.ticketType === 'Availment' &&\n                    ticket.specificType === 'Inpatient' ? {\n                    provider: confinement.provider.value + ' - ' + confinement.provider.label,\n                    date_admitted: confinement.dateAdmitted,\n                    confinement_kind: confinement.confinementKind,\n                    gift_given: false,\n                    updates: [],\n                    room_accommodation: [{\n                        room_type: confinement.roomType,\n                        no_of_days: '1',\n                        cost: confinement.costPerDay\n                    }],\n                    diagnoses: [\n                        {\n                            code: confinement.initialDiagnosis.value,\n                            name: confinement.initialDiagnosis.label,\n                            remarks: '',\n                            is_primary: false,\n                            is_final: false,\n                            \n                            doctors: [\n                                {\n                                    id: '',\n                                    name: confinement.doctor.label,\n                                    specialization: (confinement.doctor.params ? confinement.doctor.params[0] : null),\n                                    fee: confinement.amount,\n                                    no_of_visits: '0',\n                                    remarks: '',\n                                    type: 'Admitting'\n                                }\n                            ],\n\n                            procedures: []\n                        }\n                    ],\n                    others: [],\n                    coverage: 'Filed',\n                    final_bill: 0,\n                    philhealth_amount: 0,\n                    discharge_date: null\n                } : undefined),\n\n                consultation_details: (\n                    consultation &&\n                    ticket.specificType === 'Consultation' ? {\n                    provider: `${consultation.provider.value} - ${consultation.provider.label}`,\n                    diagnosis: `${consultation.diagnosis.value} - ${consultation.diagnosis.label}`,\n                    doctor: `${consultation.doctor.value} - ${consultation.doctor.label}`,\n                    notes: consultation.notes,\n                    assessment_type: consultation.assessmentType,\n                    assessment_remarks: consultation.assessmentRemarks,\n                    approved_amount: consultation.approvedAmount\n                } : undefined),\n\n                inquiry_details: (\n                    inquiries &&\n                    ticket.ticketType === 'Inquiry' ? {\n                    inquiry_list: inquiries.map(inquiry => {\n                        return {\n                            inquiry: inquiry.inquiry.label,\n                            value: inquiry.detail,\n                            specific_detail: inquiry.specificDetail,\n                            answer: inquiry.answer,\n                            remarks: inquiry.remarks, \n                            related_tickets: inquiry.relatedTickets, \n                            support_docs: []\n                        }\n                    })\n                } : undefined)\n            },\n            pmaker_case_uid: '',\n            status: 'Open',\n            date_created: new Date(),\n            date_updated: new Date(),\n            date_escalated: null,\n            created_by: {\n                _id: ticket.createdBy.id,\n                name: ticket.createdBy.name\n            },\n            tmp: {\n                user_id: localStorage['user_id'],\n                module: 'Customer Care',\n                process: 'Create Ticket',\n                timestamp: new Date()\n            },\n            member_id: member ? member.memberId : '',\n            member_data: member ? {\n                is_vip: member.isVip,\n                last_name: member.lastName,\n                middle_name: member.middleName,\n                first_name: member.firstName,\n                client: member.client.registeredName\n            } : undefined,\n            client_id: client ? client.corporateAccountNo : '',\n            client_data: \n                client ? {\n                    registered_name: client.registeredName\n                } : member ? {\n                    registered_name: member.client.registeredName\n                 } : undefined,\n            \n            loa: []\n        };\n    }\n\n\n\n\n\n\n\n\n\n\n    static getPutTicketPayload(ticket: TicketData, \n                               uploadedFiles: any[],\n                               member?: MemberData,\n                               client?: ClientData,\n                               confinement?: UpdateInpatientDetails,\n                               inquiries?: InquiryData[]): any {\n        return {\n            transaction_no: ticket.transactionNo,\n            received_via: ticket.ticketChannel,\n            received_from: ticket.ticketSource,\n\n            member_name: ticket.memberName,\n            corporate_client: ticket.clientName,\n            broker: ticket.brokerName,\n            hospital_name: ticket.facility.label,\n            department: ticket.department,\n\n            caller_name: ticket.callerName,\n            contact_no: ticket.contactNo,\n            additional_notes: ticket.additionalNotes,\n            supporting_documents: uploadedFiles.map(file => {\n                return {\n                    doc_name: file.docName,\n                    name: file.name,\n                    type: file.type,\n                    url: file.url ? file.url : file.path ? file.path : '',\n                    field: file.field\n                }\n            }),\n\n            ticket_category: {\n                ticket_type: ticket.ticketType,\n                specific_type: ticket.specificType,\n                urgency: ticket.urgency,\n                assign_to: `${ticket.agent.id} - ${ticket.agent.name}`,\n\n                confinement_details: (confinement ? {\n                    provider: `${confinement.provider.value} - ${confinement.provider.label}`,\n                    date_admitted: confinement.dateAdmitted,\n                    confinement_kind: confinement.confinementKind,\n                    gift_given: confinement.giftGiven,\n                    updates: confinement.updates.map(update => {\n                        return {\n                            remarks: update.remarks,\n                            date: update.date,\n                            hospital_bill: update.hospitalBill.toString()\n                        }\n                    }),\n                    room_accommodation: confinement.accommodations.map(accommodation => {\n                        return {\n                            room_type: accommodation.roomType,\n                            no_of_days: accommodation.days.toString(),\n                            cost: accommodation.costPerDay\n                        }\n                    }),\n                    diagnoses: confinement.diagnoses.map((diagnosis, index) => {\n                        return {\n                            code: diagnosis.diagnosis.value,\n                            name: diagnosis.diagnosis.label,\n                            remarks: diagnosis.remarks,\n                            is_primary: (confinement.primaryDiagnosisIndex === index),\n                            is_final: diagnosis.isFinal,\n                            doctors: confinement.physicians\n                                .filter(physician => physician.diagnosis.value === diagnosis.diagnosis.value)\n                                .map(physician => {\n                                    return {\n                                        id: '',\n                                        name: physician.physician.label,\n                                        specialization: physician.physician.params ? physician.physician.params[0] : '',\n                                        fee: physician.amount,\n                                        no_of_visits: physician.visits.toString(),\n                                        remarks: physician.remarks,\n                                        type: physician.physician.params ? physician.physician.params[1] : ''\n                                    }\n                                }),\n                            procedures: confinement.procedures\n                                .filter(procedure => procedure.diagnosis.value === diagnosis.diagnosis.value)\n                                .map(procedure => {\n                                    return {\n                                        code: procedure.procedure.value + '', // Convert to string\n                                        name: procedure.procedure.label,\n                                        amount: procedure.amount.toString(),\n                                        doctor: procedure.physician.label,\n                                        phic: false,\n                                        notes: procedure.remarks,\n                                        date_added: procedure.date,\n                                        assessment_type: 'Pending',\n                                        assessment_remarks: ''\n                                    }\n                                }),\n                            assessment_type: 'Pending',\n                            assessment_remarks: ''\n                        }\n                    }),\n                    others: confinement.items.map(item => {\n                        return {\n                            amount: item.amount,\n                            name: item.name,\n                            type: item.type.label\n                        }\n                    }),\n                    coverage: confinement.coverage.label,\n                    ticket_no: confinement.ticketNo,\n                    paid_by: confinement.paidBy,\n                    philhealth_amount: confinement.philhealthAmount,\n                    final_bill: confinement.finalBill,\n                    discharge_date: confinement.dischargeDate\n                } : undefined),\n\n                inquiry_details: (inquiries ? {\n                    inquiry_list: inquiries.map(inquiry => {\n                        return {\n                            inquiry: inquiry.inquiry.label,\n                            value: inquiry.detail,\n                            specific_detail: inquiry.specificDetail,\n                            answer: inquiry.answer,\n                            remarks: inquiry.remarks, \n                            related_tickets: inquiry.relatedTickets, \n                            support_docs: []\n                        }\n                    })\n                } : undefined)\n            },\n            pmaker_case_uid: ticket.pmCaseId,\n            status: ticket.status,\n            date_created: ticket.dateCreated,\n            date_updated: new Date(),\n            date_escalated: null,\n            created_by: {\n                _id: ticket.createdBy.id,\n                name: ticket.createdBy.name\n            },\n            tmp: {\n                user_id: localStorage['user_id'],\n                module: 'Customer Care',\n                process: 'Update Ticket',\n                timestamp: new Date()\n            },\n            member_id: member ? member.memberId : '',\n            member_data: member ? {\n                is_vip: member.isVip,\n                last_name: member.lastName,\n                middle_name: member.middleName,\n                first_name: member.firstName,\n                client: member.client.registeredName\n            } : undefined,\n            client_id: client ? client.corporateAccountNo : '',\n            client_data: \n                client ? {\n                    registered_name: client.registeredName\n                } : member ? {\n                    registered_name: member.client.registeredName\n                 } : undefined,\n\n            approval_code: ticket.approvalCode,\n            loa: []\n        };\n    }\n\n\n\n\n\n\n\n\n\n\n    static getPutUpdateAssessmentPayload(ticket: TicketData, \n                                         loas: LOAData[],\n                                         member?: MemberData,\n                                         client?: ClientData,\n                                         availment?: AvailmentDetails,\n                                         confinement?: ResolveInpatientDetails,\n                                         consultation?: ConsultationDetails): any {\n        return {\n            transaction_no: ticket.transactionNo,\n            received_via: ticket.ticketChannel,\n            received_from: ticket.ticketSource,\n\n            member_name: ticket.memberName,\n            corporate_client: ticket.clientName,\n            broker: ticket.brokerName,\n            hospital_name: ticket.facility.label,\n            department: ticket.department,\n\n            caller_name: ticket.callerName,\n            contact_no: ticket.contactNo,\n            additional_notes: ticket.additionalNotes,\n            supporting_documents: [],\n\n            ticket_category: {\n                ticket_type: ticket.ticketType,\n                specific_type: ticket.specificType,\n                urgency: ticket.urgency,\n                assign_to: `${ticket.agent.id} - ${ticket.agent.name}`,\n\n                availment_details: (availment ? {\n                    provider: availment.provider.value + ' - ' + availment.provider.label,\n                    availments_list: availment.diagnoses.map(availment => {\n                        return {\n                            code: availment.icd10Code.value,\n                            name: availment.icd10Code.label,\n                            remarks: '',\n                            is_primary: false,\n                            is_final: false,\n                            \n                            doctors: [\n                                {\n                                    id: '',\n                                    name: availment.doctors[0].name,\n                                    specialization: '',\n                                    fee: 0,\n                                    no_of_visits: '',\n                                    remarks: ''\n                                }\n                            ],\n\n                            procedures: availment.procedures\n                                .filter(procedure => {\n                                    return procedure.cptCode.value;\n                                })\n                                .map(procedure => {\n                                    return {\n                                        code: procedure.cptCode.value,\n                                        name: procedure.cptCode.label,\n                                        amount: procedure.amount.toString(),\n                                        doctor: '',\n                                        phic: procedure.isPHIC,\n                                        notes: '',\n                                        date_added: new Date(),\n                                        assessment_type: procedure.assessmentType,\n                                        assessment_remarks: procedure.assessmentRemarks,\n                                        approved_amount: procedure.approvedAmount\n                                    }\n                                })\n                        }\n                    })\n                } : undefined),\n\n                confinement_details: (confinement ? {\n                    provider: confinement.provider.value + ' - ' + confinement.provider.label,\n                    date_admitted: confinement.dateAdmitted,\n                    confinement_kind: confinement.confinementKind,\n                    gift_given: confinement.giftGiven,\n                    updates: confinement.updates,\n                    room_accommodation: confinement.accommodations.map(accommodation => {\n                        return {\n                            room_type: accommodation.roomType,\n                            no_of_days: accommodation.days.toString(),\n                            cost: accommodation.costPerDay\n                        }\n                    }),\n                    diagnoses: confinement.diagnoses.map(diagnosis => {\n                        return {\n                            code: diagnosis.icd10Code.value,\n                            name: diagnosis.icd10Code.label,\n                            remarks: diagnosis.remarks,\n                            is_primary: diagnosis.isPrimary,\n                            is_final: diagnosis.isFinal,\n                            doctors: diagnosis.doctors.map(doctor => {\n                                return {\n                                    id: doctor.id,\n                                    name: doctor.name,\n                                    specialization: doctor.specialization,\n                                    fee: doctor.fee,\n                                    no_of_visits: doctor.noOfVisits.toString(),\n                                    remarks: doctor.remarks,\n                                    type: doctor.type\n                                }\n                            }),\n                            procedures: diagnosis.procedures.map(procedure => {\n                                return {\n                                    code: procedure.cptCode.value + '', // Convert to string\n                                    name: procedure.cptCode.label,\n                                    amount: procedure.amount.toString(),\n                                    doctor: procedure.doctor,\n                                    phic: procedure.isPHIC,\n                                    notes: procedure.notes,\n                                    date_added: procedure.dateAdded,\n                                    assessment_type: procedure.assessmentType,\n                                    assessment_remarks: procedure.assessmentRemarks,\n                                    approved_amount: procedure.approvedAmount\n                                }\n                            }),\n                            assessment_type: diagnosis.assessmentType,\n                            assessment_remarks: diagnosis.assessmentRemarks,\n                            approved_amount: diagnosis.approvedAmount\n                        }\n                    }),\n                    others: confinement.others,\n                    coverage: confinement.coverage.label,\n                    philhealth_amount: confinement.philhealthAmount,\n                    final_bill: confinement.finalBill,\n                    discharge_date: confinement.dischargeDate\n                } : undefined),\n\n                consultation_details: (consultation ? {\n                    provider: `${consultation.provider.value} - ${consultation.provider.label}`,\n                    diagnosis: `${consultation.diagnosis.value} - ${consultation.diagnosis.label}`,\n                    doctor: `${consultation.doctor.value} - ${consultation.doctor.label}`,\n                    notes: consultation.notes,\n                    assessment_type: consultation.assessmentType,\n                    assessment_remarks: consultation.assessmentRemarks,\n                    approved_amount: consultation.approvedAmount\n                } : undefined)\n            },\n            pmaker_case_uid: ticket.pmCaseId,\n            status: ticket.status,\n            date_created: ticket.dateCreated,\n            date_updated: ticket.dateUpdated,\n            date_escalated: null,\n            created_by: {\n                _id: ticket.createdBy.id,\n                name: ticket.createdBy.name\n            },\n            tmp: {\n                user_id: localStorage['user_id'],\n                module: 'Customer Care',\n                process: 'Create Ticket',\n                timestamp: new Date()\n            },\n            member_id: member ? member.memberId : '',\n            member_data: member ? {\n                is_vip: member.isVip,\n                last_name: member.lastName,\n                middle_name: member.middleName,\n                first_name: member.firstName,\n                client: member.client.registeredName\n            } : undefined,\n            client_id: client ? client.corporateAccountNo : '',\n            client_data: \n                client ? {\n                    registered_name: client.registeredName\n                } : member ? {\n                    registered_name: member.client.registeredName\n                 } : undefined,\n\n            approval_code: ticket.approvalCode,\n            generate_approval_code: true,\n            loa: loas.map(loa => {\n                return {\n                    _id: loa.id,\n                    loa_no: loa.loaNo,\n                    amount: loa.amount,\n                    date: loa.date,\n                    notes: loa.notes\n                }\n            })\n        };\n    }\n\n\n\n\n\n\n\n\n\n\n    static getMemberData(response: any): MemberData {\n        return {\n            id: response._id,\n            memberId: response.member_id,\n            firstName: response.first_name,\n            middleName: response.middle_name,\n            lastName: response.last_name,\n            birthDate: new Date(response.date_of_birth),\n            gender: response.gender,\n            civilStatus: response.civil_status,\n            contract: response.latest_contract ? {\n                id: response.latest_contract._id,\n                name: response.latest_contract.name,\n                status: response.latest_contract.status,\n                startDate: new Date(response.latest_contract.custom_metadata.coverage_start_date),\n                endDate: new Date(response.latest_contract.custom_metadata.coverage_end_date)\n            } : undefined,\n            isVip: response.is_vip,\n            client: Payloads.getClientData(response.client)\n        }\n    }\n\n\n\n\n\n\n\n\n\n    \n    static getClientData(response: any): ClientData {\n\n        const getAddress = (address: any): AddressData => {\n            return {\n                floor: address.floor,\n                unit: address.unit,\n                bldgNo: address.bldg_no,\n                bldgName: address.bldg_name,\n                street: address.street,\n                barangay: address.brgy,\n                city: address.city,\n                region: address.region,\n                zipCode: address.zip_code,\n                contactNos: address.contact_numbers ? address.contact_numbers.map(contact => {\n                    return contact.no;\n                }) : [],\n                contactPersons: address.contact_persons ? address.contact_persons.map(contact => {\n                    return {\n                        name: contact.name,\n                        contactNo: contact.contact_no,\n                        email: contact.email_address,\n                        designation: contact.designation,\n                    }\n                }) : []\n            }\n        }\n\n        return {\n            id: response._id,\n            registeredName: response.registered_name,\n            brandName: response.brand_name,\n            cardName: response.name_on_card,\n            corporateAccountNo: response.corporate_account_no,\n            tinNo: response.tin_no,\n            vatType: response.vat_type,\n            evatNo: response.evat_no,\n            industry: response.industry,\n            ownership: response.ownership,\n            years: response.years_of_existence,\n            prevHMOProvider: response.prev_hmo_provider,\n            prevHMOEffectivityDate: response.prev_hmo_effectivity_date ? new Date(response.prev_hmo_effectivity_date) : undefined,\n            prevHMOExpiryDate: response.prev_hmo_effectivity_date ? new Date(response.prev_hmo_expiry_date) : undefined,\n            secRegNo: response.sec_reg_no,\n            authSignatory: response.authorized_signatory,\n            authContactNo: response.authorized_signatory_contact_no,\n            authEmail: response.authorized_signatory_email_address,\n            authDesignation: response.authorized_signatory_designation,\n            sourceOfFunds: response.sources_of_funds,\n            salesChannel: response.sales_channel ? {\n                type: response.sales_channel.type,\n                name: response.sales_channel.agent_name,\n                company: response.sales_channel.company_name,\n                contactName: response.sales_channel.contact_person,\n                position: response.sales_channel.position,\n                contactNo: response.sales_channel.contact_no,\n                email: response.sales_channel.email_address,\n            } : undefined,\n            mainOfficeAddress: response.main_office_address ? \n                getAddress(response.main_office_address) : undefined,\n            branches: response.branches ? (\n                    response.branches.map(branch => {\n                    return getAddress(branch);\n                })\n            ) : [],\n            contract: response.latest_contract ? {\n                id: response.latest_contract._id,\n                name: response.latest_contract.name,\n                status: response.latest_contract.status,\n                startDate: new Date(response.latest_contract.custom_metadata.coverage_start_date),\n                endDate: new Date(response.latest_contract.custom_metadata.coverage_end_date)\n            } : undefined\n        }\n    }\n\n\n\n\n\n\n\n\n\n\n    static getTicketData(response: any, appNo: string): TicketData {\n        const ticketCategory = response.ticket_category;\n\n        return {\n            id: response._id,\n            ticketChannel: response.received_via,\n            transactionNo: response.transaction_no,\n            ticketSource: response.received_from,\n            memberName: response.member_name,\n            clientName: response.corporate_client,\n            brokerName: response.broker,\n            facility: { value: '', label: response.hospital_name },\n            department: response.department,\n            callerName: response.caller_name,\n            contactNo: response.contact_no,\n            ticketType: ticketCategory.ticket_type,\n            specificType: ticketCategory.specific_type,\n            urgency: ticketCategory.urgency,\n            agent: { id: '', name: ticketCategory.assign_to },\n            additionalNotes: response.additional_notes,\n            additionalFiles: [],\n            ticketNo: appNo,\n            pmCaseId: response.pmaker_case_uid,\n            status: response.status,\n            createdBy: { id: response.created_by.id, name: response.created_by.name },\n            dateCreated: new Date(response.date_created),\n            dateUpdated: new Date(response.date_updated),\n            dateEscalated: new Date(response.date_escalated),\n            approvalCode: response.approval_code\n        }\n    }\n\n\n\n\n\n\n\n\n\n\n    static getConfinementData(confinement: any, response: any): UpdateInpatientDetails {\n        const providerData = confinement.provider.split(' - ');\n        return {\n            provider: { value: providerData[0], label: providerData[1] },\n            dateAdmitted: new Date(confinement.date_admitted),\n            confinementKind: confinement.confinement_kind,\n            giftGiven: confinement.gift_given,\n            coverage: { value: '', label: confinement.coverage },\n            ticketNo: confinement.ticket_no,\n            paidBy: confinement.paid_by,\n            philhealthAmount: confinement.philhealth_amount,\n            finalBill: confinement.final_bill,\n            dischargeDate: confinement.discharge_date ? new Date(confinement.discharge_date) : null,\n\n            primaryDiagnosisIndex: confinement.diagnoses\n                .map((value, index) => {\n                    if (value.is_primary) {\n                        return index;\n                    }\n                    return -1;\n                })\n                .filter(value => value != -1)[0],\n\n            updates: confinement.updates.map(value => {\n                return {\n                    remarks: value.remarks,\n                    date: new Date(value.date),\n                    hospitalBill: parseFloat(value.hospital_bill)\n                };\n            }),\n            accommodations: confinement.room_accommodation.map(value => {\n                return {\n                    roomType: value.room_type,\n                    days: value.no_of_days,\n                    costPerDay: value.cost\n                };\n            }),\n            diagnoses: confinement.diagnoses.map(value => {\n                return {\n                    diagnosis: { value: value.code, label: value.name },\n                    remarks: value.remarks,\n                    isFinal: value.is_final,\n                    isPrimary: value.is_primary\n                };\n            }),\n            physicians: [].concat(...confinement.diagnoses.map(diagnosis => {\n                return diagnosis.doctors.map(doctor => {\n                    return {\n                        physician: {\n                            value: '',\n                            label: doctor.name,\n                            params: [doctor.specialization, doctor.type]\n                        },\n                        diagnosis: { value: diagnosis.code, label: diagnosis.name },\n                        remarks: doctor.remarks,\n                        visits: doctor.no_of_visits,\n                        amount: doctor.fee\n                    };\n                });\n            })),\n            procedures: [].concat(...confinement.diagnoses.map(diagnosis => {\n                return diagnosis.procedures.map(procedure => {\n                    return {\n                        procedure: { value: procedure.code, label: procedure.name },\n                        diagnosis: { value: diagnosis.code, label: diagnosis.name },\n                        physician: { value: '', label: procedure.doctor },\n                        date: new Date(procedure.date_added),\n                        remarks: procedure.notes,\n                        amount: parseInt(procedure.amount)\n                    };\n                });\n            })),\n            items: confinement.others.map(value => {\n                return {\n                    name: value.name,\n                    type: { value: '', label: value.type },\n                    amount: value.amount\n                };\n            }),\n            files: response.supporting_documents.map(value => {\n                return {\n                    docName: value.doc_name,\n                    file: value\n                };\n            })\n        }\n    }\n}","import * as React from 'react';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport Link from '@material-ui/core/Link';\n\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\nimport { GlobalFunction } from '../GlobalFunction';\nimport { MemberData, TicketData, PartialMemberData, DropdownChoice, BenefitData, SimpleTicketData, ClientData, PartialClientData } from 'Pages/CustomerCarePage/Models';\nimport { TextButton } from '../Components/TextButton';\nimport { SearchedMembersList } from './SearchedMembersList';\nimport { API } from '../API';\nimport { Loading } from '../Components/Loading';\nimport { TypeValueField } from '../Components/TypeValueField';\nimport { MemberDataSection } from './MemberDataSection';\nimport { Processmaker } from '../Processmaker';\nimport { ClientDataSection } from './ClientDataSection';\nimport { SearchedClientsList } from './SearchedClientsList';\nimport { Payloads } from '../Payloads';\n\ninterface IProps {\n    member?: MemberData;\n    client?: ClientData;\n    ticket?: TicketData;\n    ticketStatus: 'Create' | 'Update' | 'Resolve';\n    onUpdateMemberStateChange?: (member?: MemberData) => void;\n    onUpdateClientStateChange?: (client?: ClientData) => void;\n\n    promptChooseMember?: boolean;\n    disableRecentTickets?: boolean;\n    disableLinkedTickets?: boolean;\n}\n\ninterface IStates {\n    searchIDValue: string;\n    searchIDType: DropdownChoice;\n    recentTickets?: SimpleTicketData[];\n    linkedTickets?: SimpleTicketData[];\n\n    isMembersLoaded: boolean;\n    loadingMembers: boolean;\n    loadingMember: boolean;\n    loadingBenefits: boolean;\n\n    isClientsLoaded: boolean;\n    loadingClients: boolean;\n    loadingClient: boolean;\n\n    loadingRecentTickets: boolean;\n    loadingLinkedTickets: boolean;\n}\n\nexport class LeftPanelSection extends React.Component<IProps, IStates> {\n\n    clients: PartialClientData[];\n    members: PartialMemberData[];\n    benefits: BenefitData[];\n    idTypes: DropdownChoice[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            searchIDValue: '',\n            searchIDType: { value: '', label: '' },\n            isMembersLoaded: false,\n            loadingMembers: false,\n            loadingMember: false,\n            loadingBenefits: false,\n            isClientsLoaded: false,\n            loadingClients: false,\n            loadingClient: false,\n            loadingRecentTickets: false,\n            loadingLinkedTickets: false\n        };\n\n        this.clients = [];\n        this.members = [];\n        this.benefits = [];\n\n        this.idTypes = [\n            { value: '1', label: 'Client ID' },\n            { value: '2', label: 'Member ID' }\n        ]\n    }\n\n    getMemberData = (memberId: string) => {\n        API.get(`customer-care/members/${memberId}`, \n            (response) => {\n                console.log(response);\n                if (this.props.onUpdateMemberStateChange && this.props.onUpdateClientStateChange) {\n                    this.props.onUpdateClientStateChange(undefined);\n                    this.props.onUpdateMemberStateChange(Payloads.getMemberData(response));\n                    getMemberBenefit();\n                    this.getRecentTicketsData(memberId);\n                }\n                this.setState({loadingMember: false});\n            },\n            (error) => {\n                console.log(error);\n            });\n\n        const getMemberBenefit = () => {\n            this.setState({loadingBenefits: true});\n            API.get(`customer-care/members/${memberId}/benefits`,\n                (response) => {\n                    this.benefits = \n                        combineNodes(\n                            response.filter(benefit => benefit.level == 6),\n                            response.filter(benefit => benefit.level == 7)\n                        )\n                        .map(benefit => {\n                            return {\n                                category: benefit.parent_name,\n                                name: benefit.name,\n                                ...(benefit.limits.length > 0 ? \n                                    {\n                                        limitType: benefit.limits[0].type,\n                                        limit: benefit.limits[0].limit,\n                                        limitUnit: benefit.limits[0].limit_unit\n                                    } : undefined)\n                            }\n                        });\n                    \n                    this.setState({loadingBenefits: false});\n                },\n                (error) => {\n                    console.log(error);\n                    this.setState({loadingBenefits: false});\n                });\n        }\n\n        const combineNodes = (parentNodes: any, childNodes: any) => {\n            const nodes = parentNodes.reduce ((result, parent) => {\n                parent.children.map ((child) => {\n                let foundChild = childNodes.find ((childNode) => child === childNode._id);\n            \n                if (foundChild) {\n                    let child = Object.assign({}, foundChild);\n            \n                    child['parent_name'] = parent.name;\n                    child['parent_code'] = parent.code;\n                    child['disabled'] = false;\n                    result.push(child);\n                }\n                });\n            \n                return result;\n            }, new Array());\n            \n            return nodes;\n        };\n    }\n    \n    getClientData = (clientId: string) => {\n        API.get(`customer-care/clients/${clientId}`,\n            (response) => {\n                console.log(response);\n                if (this.props.onUpdateClientStateChange && this.props.onUpdateMemberStateChange) {\n                    this.props.onUpdateMemberStateChange(undefined);\n                    this.props.onUpdateClientStateChange(Payloads.getClientData(response));\n                    this.getRecentTicketsData(clientId);\n                    this.getLinkedTicketsData(clientId);\n                }\n                this.setState({loadingClient: false});\n            },\n            (error) => {\n                console.log(error);\n            });\n    }\n\n    getRecentTicketsData = (targetId: string) => {\n        if (!this.state.loadingRecentTickets) {\n            this.setState({loadingRecentTickets: true});\n        }\n        \n        API.get('customer-care/tickets',\n            (tickets) => {\n                const recentTickets = tickets.filter(ticket => {\n                    return (\n                        ticket.member_id && ticket.member_id.length > 0 ? ticket.member_id === targetId :\n                        ticket.client_id && ticket.client_id.length > 0 ? ticket.client_id === targetId : false\n                    );\n                });\n                if (recentTickets) {\n                    recentTickets.map(ticket => {\n                        processmakerParticipated(ticket);\n                    });\n                    this.setState({loadingRecentTickets: false});\n                }\n            },\n            (error) => {\n                console.log(error);\n                this.setState({loadingRecentTickets: false});\n            }\n        );\n\n        const processmakerParticipated = (ticket: any) => {\n            Processmaker.get('cases/participated',\n                (cases) => {\n                    const matchedCase = cases.filter(caseItem => caseItem.app_uid === ticket.pmaker_case_uid)[0];\n                    if (matchedCase && this.state.recentTickets) {\n                        this.state.recentTickets.push({\n                            ticketNo: \n                                GlobalFunction.generateTicketNumber(\n                                    ticket.ticket_category.ticket_type,\n                                    ticket.ticket_category.specific_type,\n                                    matchedCase.app_number\n                                ),\n                            specificType: ticket.ticket_category.specific_type !== 'Not Applicable' ? (\n                                ticket.ticket_category.specific_type\n                            ) : (\n                                ticket.ticket_category.ticket_type\n                            ),\n                            status: ticket.status,\n                            dateCreated: new Date(ticket.date_created),\n                            dateUpdated: new Date(ticket.date_updated)\n                        });\n                        this.setState({recentTickets: this.state.recentTickets});\n                    }\n                },\n                (error) => {\n                    console.log(error);\n                    this.setState({loadingRecentTickets: false});\n                }\n            );\n        }\n    }\n\n    // @ts-ignore\n    getLinkedTicketsData = (targetId: string) => {\n        if (!this.state.loadingLinkedTickets) {\n            this.setState({loadingLinkedTickets: true});\n        }\n        \n        if (this.state.linkedTickets) {\n            this.state.linkedTickets.push({\n                ticketNo: '999-999-9999*',\n                specificType: 'None*',\n                status: 'None*',\n                dateCreated: new Date(),\n                dateUpdated: new Date()\n            });\n            this.setState({linkedTickets: this.state.linkedTickets});\n            console.log('linkedTickets', this.state.linkedTickets);\n        }\n        this.setState({loadingLinkedTickets: false});\n    }\n\n    onSearchChanged = (value: string) => {\n\n        const sliceMemberID = (text: string) => {\n            const slicedText: string[] = [];\n            slicedText.push(text.slice(0, 2));\n            slicedText.push(text.slice(2, 4));\n            slicedText.push(text.slice(4, 9));\n            slicedText.push(text.slice(9, 14));\n            slicedText.push(text.slice(14, 16));\n            return slicedText.filter(text => text !== '');\n        }\n    \n        const sliceClientID = (text: string) => {\n            const slicedText: string[] = [];\n            slicedText.push(text.slice(0, 2));\n            slicedText.push(text.slice(2, 4));\n            slicedText.push(text.slice(4, 9));\n            return slicedText.filter(text => text !== '');\n        }\n\n        const onSearchMember = () => {\n            if (trimmedValue.length >= 13) {\n                this.setState({loadingMembers: true});\n                API.get(`customer-care/members?` +\n                    `filter[where][member_id][like]=${newValue}&` +\n                    `filter[where][member_status][inq]=Active&` +\n                    `filter[where][member_status][inq]=Cancelled&` +\n                    `filter[where][member_status][inq]=Expired&` + \n                    `filter[where][member_status][inq]=Suspended&` + \n                    `filter[where][member_status][inq]=Terminated`,\n                    (response) => {\n                        console.log(response);\n                        this.members = response.map(member => {\n                            return {\n                                memberId: member.member_id,\n                                firstName: member.first_name,\n                                middleName: member.middle_name,\n                                lastName: member.last_name,\n                                clientName: member.client.registered_name,\n                                isVip: member.is_vip\n                            }\n                        });\n                        this.setState({\n                            isMembersLoaded: true,\n                            loadingMembers: false\n                        });\n                    },\n                    (error) => {\n                        console.log(error);\n                        this.setState({\n                            isMembersLoaded: true,\n                            loadingMembers: false\n                        });\n                    });\n            }\n        }\n\n        const onSearchClient = () => {\n            if (trimmedValue.length >= 8) {\n                this.setState({loadingClients: true});\n                API.get(`customer-care/client?filter[where][corporate_account_no][like]=${newValue}`,\n                    (response) => {\n                        console.log(response);\n                        this.clients = response.map(client => {\n                            return {\n                                id: client._id,\n                                clientId: client.corporate_account_no,\n                                clientName: client.registered_name\n                            }\n                        });\n                        this.setState({\n                            isClientsLoaded: true,\n                            loadingClients: false\n                        });\n                    },\n                    (error) => {\n                        console.log(error);\n                        this.setState({\n                            isClientsLoaded: true,\n                            loadingClients: false\n                        });\n                    });\n            }\n        }\n\n        const trimmedValue = value.replace(/-/g, '');\n        const splitValue = this.state.searchIDType.label === 'Client ID' ? (\n            sliceClientID(trimmedValue)\n        ) : (\n            sliceMemberID(trimmedValue)\n        );\n        const newValue = splitValue ? splitValue.join('-') : '';\n        this.setState({searchIDValue: newValue});\n\n        if (this.state.searchIDType.label === 'Client ID') {\n            onSearchClient();\n        }\n\n        if (this.state.searchIDType.label === 'Member ID') {\n            onSearchMember();\n        }\n    }\n\n\n\n\n\n\n\n\n    render(): JSX.Element {\n        return (\n            <div className='member-info'>\n                {this.props.ticketStatus === 'Create' ? (\n                    <div>\n                        {this.renderSearchArea()}\n                        <div className='line-border' />\n                    </div>\n                ) : this.props.ticketStatus === 'Update' ||\n                    this.props.ticketStatus === 'Resolve' ? (\n                    this.renderTopArea()\n                ) : null}\n                {this.props.member ? (\n                    <MemberDataSection \n                        member={this.props.member}\n                        benefits={this.benefits}\n                        recentTickets={this.state.recentTickets}\n                        disableRecentTickets={this.props.disableRecentTickets}\n                        loadingBenefits={this.state.loadingBenefits}\n                        loadingRecentTickets={this.state.loadingRecentTickets}\n                        onUpdateMemberStateChange={this.props.onUpdateMemberStateChange}\n                        getRecentTicketsData={this.getRecentTicketsData} />\n                ) : this.props.client ? (\n                    <ClientDataSection \n                        client={this.props.client}\n                        recentTickets={this.state.recentTickets}\n                        linkedTickets={this.state.linkedTickets}\n                        disableRecentTickets={this.props.disableRecentTickets}\n                        disableLinkedTickets={this.props.disableLinkedTickets}\n                        loadingRecentTickets={this.state.loadingRecentTickets}\n                        loadingLinkedTickets={this.state.loadingLinkedTickets}\n                        getRecentTicketsData={this.getRecentTicketsData}\n                        getLinkedTicketsData={this.getLinkedTicketsData} />\n                ) : (\n                    <>\n                    {this.state.loadingMember || this.state.loadingClient ? (\n                        <Loading height='3rem' />\n                    ) : null}\n                    {this.props.promptChooseMember ? (\n                        <div className='section' style={{color: '#E53935'}}>\n                            Choose a member/client first before submitting the ticket.\n                        </div> \n                    ) : null}\n                    </>\n                )}\n                    \n                {this.props.ticket ? (\n                    this.renderTicketData(this.props.ticket)\n                ) : (null)}\n                <div className='section' />\n            </div>\n        );\n    }\n\n\n\n    renderSearchArea(): JSX.Element {\n        return (\n            <div className='section'>\n                <Breadcrumbs className='bread-crumbs'>\n                    <Link href='#/customer-care'>TICKETS</Link>\n                    <div className='current-text'>CREATE A TICKET</div>\n                </Breadcrumbs>\n\n                <div className='header-1'>Create Ticket</div>\n\n                <div style={{position: 'relative'}}>\n                    <TypeValueField \n                        placeholder='Search ID'\n                        type={this.state.searchIDType}\n                        value={this.state.searchIDValue}\n                        choices={this.idTypes}\n                        onChangeType={(type: DropdownChoice) => {\n                            this.setState({searchIDType: type});\n                        }}\n                        onChangeValue={(value: string) => {\n                            this.onSearchChanged(value);\n                        }} />\n\n                    {this.state.loadingMembers ||  this.state.loadingClients ? (\n                        <div style={{position: 'absolute', right: '8px', bottom: '13px'}}>\n                            <Loading height='none' size={16}/>\n                        </div>\n                    ) : null}\n                </div>\n\n                {this.state.searchIDType.label === 'Member ID' ? (\n                    <SearchedMembersList \n                        searchText={this.state.searchIDValue}\n                        members={this.members}\n                        onSelectMember={(memberId: string) => {\n                            this.getMemberData(memberId);\n                            if (this.props.onUpdateMemberStateChange) {\n                                this.props.onUpdateMemberStateChange(undefined);\n                            }\n                            this.setState({\n                                searchIDValue: '',\n                                loadingMember: true,\n                                recentTickets: []\n                            });\n                        }} />\n\n                ) : this.state.searchIDType.label === 'Client ID' ? (\n                    <SearchedClientsList\n                        searchText={this.state.searchIDValue}\n                        clients={this.clients}\n                        onSelectClient={(clientId: string) => {\n                            this.getClientData(clientId);\n                            if (this.props.onUpdateClientStateChange) {\n                                this.props.onUpdateClientStateChange(undefined);\n                            }\n                            this.setState({\n                                searchIDValue: '',\n                                loadingClient: true,\n                                recentTickets: [],\n                                linkedTickets: []\n                            });\n                        }} />\n                    \n                ) : null}\n\n                <TextButton \n                    icon={faSearch}\n                    label='Advanced Search'\n                    onClick={() => {\n\n                    }}\n                    />\n            </div>\n        );\n    }\n\n    renderTopArea(): JSX.Element {\n        return (\n            <div className='section'>\n                <Breadcrumbs className='bread-crumbs'>\n                    <Link href='#/customer-care'>TICKETS</Link>\n                    <Link className='current-text'>{this.props.ticketStatus.toUpperCase() + ' TICKET'}</Link>\n                </Breadcrumbs>\n\n                {this.props.ticket ? (\n                    <span className='header-1'>\n                        {`${this.props.ticketStatus} Ticket ${this.props.ticket.ticketNo}`}\n                    </span>\n                ) : null}\n                \n\n            </div>\n        );\n    }\n\n    renderTicketData(ticket: TicketData): JSX.Element {\n        return (\n            <div className='section'>\n                <div className='sub-section'>\n                    <div className='light-text'>TICKET TYPE</div>\n                    <div className='small-text'>{ticket.ticketType}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>SPECIFIC TYPE</div>\n                    <div className='small-text'>{ticket.specificType}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>URGENCY</div>\n                    <div className='small-text'>{ticket.urgency}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>ASSIGNED TO</div>\n                    <div className='small-text'>{ticket.agent.name}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>RECEIVED VIA</div>\n                    <div className='small-text'>{ticket.ticketSource}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>RECEIVED FROM</div>\n                    <div className='small-text'>{ticket.callerName}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>NUMBER/EMAIL</div>\n                    <div className='small-text'>{ticket.contactNo}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>CALL TRANSACTION NO.</div>\n                    <div className='small-text'>{ticket.transactionNo}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>CREATED BY</div>\n                    <div className='small-text'>{ticket.createdBy.name}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>DATE AND TIME CREATED</div>\n                    <div className='small-text'>{GlobalFunction.toDateAndTime(ticket.dateCreated)}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>DATE AND TIME LAST UPDATED</div>\n                    <div className='small-text'>{GlobalFunction.toDateAndTime(ticket.dateUpdated)}</div>\n                </div>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\nimport Select from 'react-select';\nimport { DropdownChoice } from '../Models';\nimport { Option } from 'react-select/src/filters';\n\ninterface IProps {\n    placeholder?: string;\n    disabled?: boolean;\n    value: DropdownChoice;\n    choices: DropdownChoice[];\n    error?: boolean;\n    onChange: (value: DropdownChoice) => void;\n}\n\ninterface IStates {\n    value: string;\n}\n\nexport class Dropdown extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            value: ''\n        }\n    }\n\n    shouldComponentUpdate(props: IProps, _state: any) {\n        return (\n            (this.props.placeholder !== props.placeholder) ||\n            (this.props.disabled !== props.disabled) ||\n            (this.props.value !== props.value) ||\n            (this.props.choices !== props.choices) ||\n            (this.props.error !== props.error)\n        );\n    }\n\n    render(): JSX.Element {\n\n        return (\n            <div className='dropdown'>\n                {this.props.placeholder ? (\n                    <div className={this.props.disabled ? 'text-disabled text' : 'text'}>\n                        {this.props.placeholder}\n                    </div>\n                ) : null}\n                \n                <Select\n                    className='actual-dropdown'\n                    classNamePrefix={this.props.error ? 'actual-dropdown-error' : 'actual-dropdown'}\n                    isDisabled={this.props.disabled ? this.props.disabled : false}\n                    value={this.props.value}\n                    options={this.props.choices} \n                    onInputChange={(value: string, _a) => {\n                        this.setState({value: value});\n                    }}\n                    noOptionsMessage={() => {\n                        return (\n                            this.props.choices.length === 0 ? (\n                                'Loading...'\n                            ) : (\n                                this.state.value.length < 3 ? (\n                                    'Enter at least 3 characters to search'\n                                ) : (\n                                    'No options'\n                                )\n                            )\n                        )\n                    }}\n                    filterOption={(option: Option, rawInput: string) => {\n                        const hasNoInput = (rawInput.length === 0);\n                        const choicesAreShort = (this.props.choices.length <= 20);\n                        const inputIsShort = (rawInput.length < 3);\n                        const isInputMatch = (option.label.toLowerCase().includes(rawInput.toLowerCase()));\n                        if (choicesAreShort) {\n                            if (hasNoInput) {\n                                return true;\n                            }\n                            return isInputMatch;\n                        } else {\n                            if (!inputIsShort) {\n                                return isInputMatch;\n                            }\n                            return false;\n                        }\n                    }}\n                    onChange={(choice: DropdownChoice) => {\n                        this.props.onChange(choice);\n                    }} />\n                    \n            </div>\n        );\n    }\n}","import * as React from 'react';\n// import { Select, MenuItem } from '@material-ui/core';\nimport Select from 'react-select';\nimport './component-style.scss';\nimport { DropdownChoice } from '../Models';\nimport { Option } from 'react-select/src/filters';\n\ninterface IProps {\n    placeholder?: string;\n    disabled?: boolean;\n    detail?: string;\n    value: DropdownChoice;\n    choices: DropdownChoice[];\n    error?: boolean;\n    onChange: (value: DropdownChoice) => void;\n}\n\ninterface IStates {\n    value: string;\n}\n\nexport class DetailedDropdown extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            value: ''\n        }\n    }\n\n    shouldComponentUpdate(props: IProps, _state: IStates) {\n        return (\n            this.props.choices.length !== props.choices.length ||\n            this.props.value.value !== props.value.value\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='detailed-dropdown'>\n                {this.props.placeholder ? (\n                    <div className='text'>{this.props.placeholder}</div>\n                ) : null}\n                \n                <div className='autocomplete'>\n                    <div className={\n                        this.props.disabled ? 'detail-disabled' :\n                        this.props.error ? 'detail-error' : 'detail'}>\n                        {this.props.detail ? this.props.detail : this.props.value.value ? this.props.value.value : null}\n                    </div>\n                    <Select\n                        className='actual-dropdown'\n                        classNamePrefix={this.props.error ? 'actual-dropdown-error' : 'actual-dropdown'}\n                        isDisabled={this.props.disabled ? this.props.disabled : false}\n                        value={this.props.value}\n                        options={this.props.choices} \n                        onInputChange={(value: string, _a) => {\n                            this.setState({value: value});\n                        }}\n                        noOptionsMessage={() => {\n                            return (\n                                this.props.choices.length === 0 ? (\n                                    'Loading...'\n                                ) : (\n                                    this.state.value.length < 3 ? (\n                                        'Enter at least 3 characters to search'\n                                    ) : (\n                                        'No options'\n                                    )\n                                )\n                            )\n                        }}\n                        filterOption={(option: Option, rawInput: string) => {\n                            const hasNoInput = (rawInput.length === 0);\n                            const choicesAreShort = (this.props.choices.length <= 20);\n                            const inputIsShort = (rawInput.length < 3);\n                            const isInputMatch = (option.label.toLowerCase().includes(rawInput.toLowerCase()));\n                            if (choicesAreShort) {\n                                if (hasNoInput) {\n                                    return true;\n                                }\n                                return isInputMatch;\n                            } else {\n                                if (!inputIsShort) {\n                                    return isInputMatch;\n                                }\n                            }\n                            return false;                            \n                        }}\n                        onChange={(choice: DropdownChoice) => {\n                            this.props.onChange(choice);\n                        }} />\n                </div>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\n// import { GlobalFunction } from '../GlobalFunction';\n\ninterface IProps {\n    placeholder?: string;\n    value: number;\n    detail: string;\n    error?: boolean;\n    onChange: (value: number) => void;\n\n    isFloat?: boolean;\n}\n\ninterface IStates {\n    // isEditing: boolean;\n    value: string;\n}\n\nexport class DetailedNumberField extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            // isEditing: false\n            value: this.props.value.toString()\n        }\n    }\n\n    componentWillReceiveProps(props: IProps) {\n        let targetNewValue = props.value ? props.value.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,') : '';\n\n        if (targetNewValue.charAt(targetNewValue.length - 4) === '.') {\n            targetNewValue = props.value.toFixed(2).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\n        }\n\n        if (targetNewValue !== this.state.value) {\n            this.setState({value: \n                this.props.isFloat && this.state.value.charAt(this.state.value.length - 1) === '.' ?\n                    `${targetNewValue}.` :\n                    targetNewValue});\n        }\n    }\n\n    render(): JSX.Element {\n        const dynamicStyle = {\n            borderColor: (this.props.error ? '#E53935' : undefined)\n        };\n\n        return (\n            <div className='detailed-input-field'>\n                {this.props.placeholder ? (\n                    <div className='text'>{this.props.placeholder}</div>\n                ) : null}\n                <div className='input-field'>\n                    <input\n                        className='text-field left'\n                        style={dynamicStyle}\n                        value={this.state.value}\n                        onFocus={() => {\n                            if (this.props.value == 0) {\n                                this.setState({value: ''});\n                            }\n                        }}\n                        onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                            let value = event.target.value;\n                            let numberValue = parseFloat(value.replace(/,|-/g, ''));\n                            if (!isNaN(numberValue)) {\n                                numberValue = numberValue < 1000000000 ? numberValue : this.props.value;\n                            }\n                            let stringValue = !isNaN(numberValue) ? (\n                                this.props.isFloat && value.charAt(value.length - 1) === '.' ?\n                                    `${numberValue}.` :\n                                    numberValue.toString()\n                            ) : '';\n                            const newStringValue = stringValue.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n                            this.setState({value: newStringValue}, () => {\n                                if (this.props.isFloat) {\n                                    this.props.onChange(!isNaN(numberValue) ? numberValue : 0);\n                                } else {\n                                    this.props.onChange(!isNaN(numberValue) ? numberValue : 0);\n                                }\n                            });\n                        }} />\n                    <div className={`detail ${this.props.error ? 'error' : ''} right`}>\n                        {this.props.detail}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\nimport MomentUtils from '@date-io/moment';\nimport { KeyboardDatePicker, MuiPickersUtilsProvider, MaterialUiPickersDate } from '@material-ui/pickers';\n\ninterface IProps {\n    placeholder?: string;\n    value: Date | null;\n    minDate?: Date;\n    disabled?: boolean;\n    onChange: (value: Date | null) => void;\n}\n\nexport class DatePicker extends React.Component<IProps> {\n\n    shouldComponentUpdate(props: IProps, _state: any) {\n        return (\n            (this.props.placeholder !== props.placeholder) ||\n            (this.props.value !== props.value)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='date-picker'>\n                {this.props.placeholder ? (\n                    <div className='text'>{this.props.placeholder}</div>\n                ) : null}\n                <MuiPickersUtilsProvider utils={MomentUtils}>\n                    <KeyboardDatePicker\n                        className={this.props.disabled ? 'text-field-disabled text-field' : 'text-field'}\n                        disabled={this.props.disabled}\n                        variant='dialog'\n                        format='MM/DD/YYYY'\n                        minDate={this.props.minDate ? this.props.minDate : new Date(1900, 1, 1)}\n                        value={this.props.value}\n                        onChange={(date: MaterialUiPickersDate | null) => {\n                            this.props.onChange(date ? date.toDate() : null);\n                        }} />\n                </MuiPickersUtilsProvider>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { DetailedDropdown } from 'Pages/CustomerCarePage/Components/DetailedDropdown';\nimport { DetailedNumberField } from 'Pages/CustomerCarePage/Components/DetailedNumberField';\nimport { DatePicker } from 'Pages/CustomerCarePage/Components/DatePicker';\nimport { DropdownChoice, ConfinementDetails } from 'Pages/CustomerCarePage/Models';\n\n\ninterface IProps {\n    confinement: ConfinementDetails;\n    facilities: DropdownChoice[];\n    doctors: DropdownChoice[];\n    cptCodes: DropdownChoice[];\n    createTicketAttemp: boolean;\n    refreshConfinementState: () => void;\n}\n\nexport class ConfinementSection extends React.Component<IProps> {\n\n    confinementTypes: DropdownChoice[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.confinementTypes = [\n            { value: '1', label: 'Elective / Scheduled' },\n            { value: '2', label: 'ER leading to confinement' }\n        ];\n    }\n\n    render(): JSX.Element {\n        const confinement = this.props.confinement;\n        return (\n            <div className='confinement-details'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='sub-section'>\n                    <div className='header-2'>CONFINEMENT DETAILS</div>\n                    <DetailedDropdown \n                        choices={this.props.facilities}\n                        placeholder='Provider'\n                        value={confinement.provider}\n                        error={\n                            this.props.createTicketAttemp && \n                            confinement.provider.value === ''}\n                        onChange={(value: DropdownChoice) => {\n                            this.props.confinement.provider = value;\n                            this.props.refreshConfinementState();\n                        }} />\n                    <Grid container spacing={1}>\n                        <Grid item xs={6}>\n                            <DatePicker \n                                placeholder='Date Admitted' \n                                value={confinement.dateAdmitted}\n                                onChange={(value: Date) => {\n                                    this.props.confinement.dateAdmitted = value;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Dropdown \n                                placeholder='Kind of Confinement' \n                                choices={this.confinementTypes}\n                                value={{ value: '', label: confinement.confinementKind}}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    confinement.confinementKind === ''}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.confinement.confinementKind = value.label;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={3}>\n                            <InputField \n                                placeholder='Room Type' \n                                value={confinement.roomType}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    confinement.roomType === ''}\n                                onChange={(value: string) => {\n                                    this.props.confinement.roomType = value;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={3}>\n                            <DetailedNumberField \n                                placeholder='Cost Per Day' \n                                value={confinement.costPerDay}\n                                detail={'PHP'}\n                                isFloat={true}\n                                onChange={(value: number) => {\n                                    this.props.confinement.costPerDay = value;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Dropdown  \n                                placeholder='Admitting Physician' \n                                choices={this.props.doctors}\n                                value={confinement.doctor}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    confinement.doctor.value === ''}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.confinement.doctor = value;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <DetailedDropdown \n                                placeholder='Initial Diagnosis' \n                                choices={this.props.cptCodes}\n                                value={confinement.initialDiagnosis}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    confinement.initialDiagnosis.value === ''}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.confinement.initialDiagnosis = value;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={3}>\n                            <DetailedNumberField \n                                placeholder='Amount' \n                                value={confinement.amount}\n                                detail={'PHP'}\n                                isFloat={true}\n                                onChange={(value: number) => {\n                                    this.props.confinement.amount = value;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </Grid>\n                    </Grid>\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\n\ninterface IProps {\n    value: number;\n    onChange: (value: number) => void;\n\n    placeholder?: string;\n    error?: boolean;\n    isFloat?: boolean;\n    disableDelimiter?: boolean;\n}\n\ninterface IStates {\n    value: string;\n}\n\nexport class NumberField extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            value: this.props.value.toString()\n        }\n    }\n\n    componentWillReceiveProps(props: IProps) {\n        let targetNewValue = props.value ? (\n            !this.props.disableDelimiter ? \n                props.value.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,') : \n                props.value.toString()) : '';\n\n        if (targetNewValue.charAt(targetNewValue.length - 4) === '.') {\n            targetNewValue = props.value.toFixed(2).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\n        }\n\n        if (targetNewValue !== this.state.value) {\n            this.setState({value: \n                this.props.isFloat && this.state.value.charAt(this.state.value.length - 1) === '.' ?\n                    `${targetNewValue}.` :\n                    targetNewValue});\n        }\n    }\n\n    render(): JSX.Element {\n        const props = this.props;\n        const dynamicStyle = {\n            borderColor: (props.error ? '#E53935' : undefined)\n        };\n\n        return (\n            <div className='input-field-container'>\n                {this.props.placeholder ? (\n                    <div className='text'>{this.props.placeholder}</div>\n                ) : null}\n                <input\n                    className='text-field'\n                    style={dynamicStyle}\n                    value={this.state.value} \n                    onFocus={() => {\n                        if (this.props.value == 0) {\n                            this.setState({value: ''});\n                        }\n                    }}\n                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                        let value = event.target.value;\n                        let numberValue = parseFloat(value.replace(/,|-/g, ''));\n                        if (!isNaN(numberValue)) {\n                            numberValue = numberValue < 1000000000 ? numberValue : this.props.value;\n                        }\n                        let stringValue = !isNaN(numberValue) ? (\n                            this.props.isFloat && value.charAt(value.length - 1) === '.' ?\n                                `${numberValue}.` :\n                                numberValue.toString()\n                        ) : '';\n                        const newStringValue = stringValue.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n                        this.setState({value: this.props.disableDelimiter ? numberValue.toString() : newStringValue}, () => {\n                            if (this.props.isFloat) {\n                                this.props.onChange(!isNaN(numberValue) ? numberValue : 0);\n                            } else {\n                                this.props.onChange(!isNaN(numberValue) ? numberValue : 0);\n                            }\n                        });\n                    }} />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\nimport { Checkbox } from '@material-ui/core';\n\ninterface IProps {\n    placeholder?: string;\n    label?: string;\n    value: boolean;\n    onChange: (value: boolean) => void;\n}\n\nexport class CustomCheckbox extends React.Component<IProps> {\n\n    shouldComponentUpdate(props: IProps, _state: any) {\n        return (\n            (this.props.placeholder !== props.placeholder) ||\n            (this.props.value !== props.value)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='check-box-area'>\n                {this.props.placeholder ? (\n                    <div className='text'>{this.props.placeholder}</div>\n                ) : null}\n                <Checkbox\n                    className='check-box'\n                    checked={this.props.value}\n                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                        this.props.onChange(event.target.checked);\n                    }} />\n                {this.props.label ? (\n                    <span className='text'>{this.props.label}</span>\n                ) : null}\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport {  Grid, TableCell, TableRow } from '@material-ui/core';\nimport { faMinusCircle, faPlus, faPen, faCheckCircle, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport { DetailedDropdown } from 'Pages/CustomerCarePage/Components/DetailedDropdown';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { ProcedureData, DropdownChoice, AvailmentDetails, DiagnosisData } from 'Pages/CustomerCarePage/Models';\nimport { NumberField } from 'Pages/CustomerCarePage/Components/NumberField';\nimport { CustomCheckbox } from 'Pages/CustomerCarePage/Components/CustomCheckbox';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\n\ninterface IProps {\n    availment: AvailmentDetails;\n    facilities: DropdownChoice[];\n    doctors: DropdownChoice[];\n    icd10Codes: DropdownChoice[];\n    cptCodes: DropdownChoice[];\n    createTicketAttemp: boolean;\n    refreshAvailmentState: () => void;\n}\n\ninterface IStates {\n    icd10Code: DropdownChoice;\n    doctor: DropdownChoice;\n\n    itemToEditIndex: number;\n    icd10CodeToEdit: DropdownChoice;\n    doctorToEdit: DropdownChoice;\n}\n\nexport class AvailmentSection extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            icd10Code: { value: '', label: '' },\n            doctor: { value: '', label: '' },\n\n            itemToEditIndex: -1,\n            icd10CodeToEdit: { value: '', label: '' },\n            doctorToEdit: { value: '', label: '' }\n        };\n    }\n\n    getFilteredICD10(): DropdownChoice[] {\n        let filteredICD10: DropdownChoice[] = [];\n        for (var i = 0; i < this.props.icd10Codes.length; i++) {\n            let isSame = false;\n            for (var j = 0; j < this.props.availment.diagnoses.length; j++) {\n                isSame = (\n                    this.props.availment.diagnoses[j].icd10Code.value === \n                    this.props.icd10Codes[i].value ? true : isSame);\n            }\n            if (!isSame) {\n                filteredICD10 = filteredICD10.concat(this.props.icd10Codes[i]);\n            }\n        }\n        return filteredICD10;\n    }\n\n    getProcedureCosts(procedures: ProcedureData[]) {\n        let totalCost = 0;\n        procedures.map(procedure => {\n            totalCost += procedure.amount;\n        });\n        return totalCost;\n    }\n    \n    pushBlankDiagnosis(icd10Code: DropdownChoice, doctor: DropdownChoice) {\n        this.props.availment.diagnoses.push({\n            icd10Code: icd10Code,\n            remarks: '',\n            isPrimary: false,\n            isFinal: false,\n            doctors: [{\n                id: '',\n                name: doctor.label,\n                specialization: '',\n                type: 'Admitting',\n                fee: 0,\n                noOfVisits: 0,\n                remarks: ''\n            }],\n            procedures: [{\n                cptCode: { value: '', label: '' },\n                isPHIC: false,\n                amount: 0,\n                notes: '',\n                assessmentType: 'Pending',\n                assessmentRemarks: '',\n                approvedAmount: 0,\n                doctor: '',\n                dateAdded: new Date()\n            }],\n            assessmentType: 'Pending',\n            assessmentRemarks: '',\n            approvedAmount: 0\n        });\n    }\n\n    pushBlankProcedures(diagnosisIndex: number) {\n        this.props.availment.diagnoses[diagnosisIndex].procedures.push({\n            cptCode: { value: '', label: '' },\n            isPHIC: false,\n            amount: 0,\n            notes: '',\n            assessmentType: 'Pending',\n            assessmentRemarks: '',\n            approvedAmount: 0,\n            doctor: '',\n            dateAdded: new Date()\n        });\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='availment-section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='sub-section'>\n                    <div className='header-2'>AVAILMENT DETAILS</div>\n                    <DetailedDropdown \n                        choices={this.props.facilities}\n                        placeholder='Provider'\n                        value={this.props.availment.provider}\n                        error={\n                            this.props.createTicketAttemp && \n                            this.props.availment.provider.value === ''}\n                        onChange={(value: DropdownChoice) => {\n                            this.props.availment.provider = value;\n                            this.props.refreshAvailmentState();\n                        }} />\n                </div>\n                <div className='sub-section'>\n                    <div className='header-3'>LIST OF AVAILMENTS</div>\n                    <div className='text'>\n                        Add a diagnosis first then add procedures per diagnosis after\n                    </div>\n                    <div className='sub-section'>\n                        <CustomTable\n                            rows={this.props.availment.diagnoses}\n                            renderHeader={() => this.renderTableHeader()}\n                            renderRow={(rowData: any, index: number) => \n                                this.renderTableRow(rowData, index)} />\n                    </div>\n                    {this.props.createTicketAttemp && this.props.availment.diagnoses.length === 0 ? (\n                        <div className='sub-section' style={{color: '#E53935'}}>\n                            No diagnosis. Need atleast one diagnosis.\n                        </div> \n                    ) : (null)}\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n        return (\n            <>\n            <TableCell style={{minWidth: '300px', maxWidth: '300px'}}>\n                <DetailedDropdown \n                    choices={this.getFilteredICD10()}\n                    value={this.state.icd10Code}\n                    onChange={(value: DropdownChoice) => {\n                        this.setState({icd10Code: value});\n                    }} />\n            </TableCell>\n            <TableCell style={{minWidth: '150px', maxWidth: '150px'}}>\n                <Dropdown \n                    choices={this.props.doctors}\n                    value={this.state.doctor}\n                    onChange={(value: DropdownChoice) => {\n                        this.setState({doctor: value});\n                    }} />\n            </TableCell>\n            <TableCell style={{textAlign: 'center'}}>\n                <TextButton \n                    icon={faPlus} \n                    label=\"Add diagnosis\"\n                    onClick={() => {\n                        if (this.state.doctor.value !== '' && this.state.icd10Code.value !== '') {\n                            this.pushBlankDiagnosis(this.state.icd10Code, this.state.doctor);\n                            this.props.refreshAvailmentState();\n                            this.setState({\n                                icd10Code: { value: '', label: '' },\n                                doctor: { value: '', label: '' }\n                            });\n                        }\n                    }} />\n            </TableCell>\n            </>\n        );\n    }\n\n    renderTableRow(diagnosis: DiagnosisData, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n        const editIcon = { display: 'inline-block', paddingRight: '0.5rem' };\n        const deleteIcon = { display: 'inline-block' };\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                <TableCell colSpan={3}>\n                    <Grid container spacing={1}>\n                        {this.state.itemToEditIndex === index ? (\n                            <>\n                            <Grid item xs={6}>\n                                <DetailedDropdown \n                                    choices={this.getFilteredICD10()}\n                                    value={this.state.icd10CodeToEdit}\n                                    onChange={(value: DropdownChoice) => {\n                                        this.setState({icd10CodeToEdit: value});\n                                    }} />\n                            </Grid>\n                            <Grid item xs={5}>\n                                <Dropdown \n                                    choices={this.props.doctors}\n                                    value={this.state.doctorToEdit}\n                                    onChange={(value: DropdownChoice) => {\n                                        this.setState({doctorToEdit: value});\n                                    }} />\n                            </Grid>\n                            <Grid item xs={1} style={{lineHeight: '2rem'}}>\n                                <div style={editIcon}>\n                                    <IconButton\n                                        icon={faCheckCircle}\n                                        onClick={() => {\n                                            this.props.availment.diagnoses[index].icd10Code = this.state.icd10CodeToEdit;\n                                            this.props.availment.diagnoses[index].doctors[0].name = this.state.doctorToEdit.label;\n                                            this.props.refreshAvailmentState();\n                                            this.setState({itemToEditIndex: -1});\n                                        }}/>\n                                </div>\n                                <div style={deleteIcon}>\n                                    <IconButton\n                                        icon={faTimesCircle}\n                                        onClick={() => {\n                                            this.setState({itemToEditIndex: -1});\n                                        }}/>\n                                </div>\n                            </Grid>\n                            </>\n                        ) : (\n                            <>\n                            <Grid item xs={6} className='header-2'>\n                                {diagnosis.icd10Code.value + ' - ' + diagnosis.icd10Code.label}\n                            </Grid>\n                            <Grid item xs={3} className='header-2'>\n                                {diagnosis.doctors[0].name}\n                            </Grid>\n                            <Grid item xs={2} className='header-2'>\n                                {GlobalFunction.formatNumber(this.getProcedureCosts(diagnosis.procedures), true) + \" PHP\"}\n                            </Grid>\n                            <Grid item xs={1}>\n                                {/* <div style={editIcon}> */}\n                                    <IconButton\n                                        icon={faPen}\n                                        onClick={() => {\n                                            this.setState({\n                                                itemToEditIndex: index,\n                                                icd10CodeToEdit: diagnosis.icd10Code,\n                                                doctorToEdit: {\n                                                    value: diagnosis.doctors[0].id,\n                                                    label: diagnosis.doctors[0].name\n                                                }\n                                            });\n                                        }}/>\n                                {/* </div>\n                                <div style={deleteIcon}> */}\n                                    <IconButton\n                                        icon={faMinusCircle}\n                                        onClick={() => {\n                                            this.props.availment.diagnoses.splice(index, 1);\n                                            this.props.refreshAvailmentState();\n                                        }}/>\n                                {/* </div> */}\n                            </Grid>\n                            </>\n                        )}\n                    </Grid>\n                    {diagnosis.procedures.map((procedure, procedureIndex) => {\n                        return this.renderProcedureDetails(procedure, index, procedureIndex);\n                    })}\n                </TableCell>\n            </TableRow>\n        );\n    }\n    \n    renderProcedureDetails(procedure: ProcedureData, diagnosisIndex: number, index: number): JSX.Element {\n        const stateProcedure = this.props.availment.diagnoses[diagnosisIndex].procedures[index];\n        const stateProcedures = this.props.availment.diagnoses[diagnosisIndex].procedures;\n        return (\n            <div style={{position: 'relative'}}>\n                <div style={{paddingTop: '0.5rem'}} />\n                <div className='line-border' />\n                <div style={{paddingTop: '0.5rem'}} />\n                <Grid container spacing={2}>\n                    <Grid item xs={8}>\n                        <DetailedDropdown \n                            placeholder='Procedure'\n                            choices={this.props.cptCodes}\n                            value={procedure.cptCode}\n                            onChange={(value: DropdownChoice) => {\n                                stateProcedure.cptCode = value;\n                                if (index === (stateProcedures.length - 1)) {\n                                    this.pushBlankProcedures(diagnosisIndex);\n                                }\n                                this.props.refreshAvailmentState();\n                            }} />\n                    </Grid>\n                    <Grid item xs={3}>\n                        <NumberField\n                            placeholder='Amount'\n                            value={procedure.amount}\n                            onChange={(value: number) => {\n                                stateProcedure.amount = value;\n                                this.props.refreshAvailmentState();\n                            }} />\n                    </Grid>\n                    <Grid item xs={1}>\n                        <CustomCheckbox\n                            placeholder='PHIC'\n                            value={procedure.isPHIC}\n                            onChange={(value: boolean) => {\n                                stateProcedure.isPHIC = value;\n                                this.props.refreshAvailmentState();\n                            }} />\n                    </Grid>\n                </Grid>\n                <div style={{position: 'absolute'}}>\n                    <TextButton \n                        label='Add procedure'\n                        icon={faPlus}\n                        onClick={() => {\n                            this.pushBlankProcedures(diagnosisIndex);\n                            this.props.refreshAvailmentState();\n                        }}/>\n                </div>\n                <div style={{paddingTop: '1rem'}} />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport Dropzone from 'react-dropzone';\nimport './component-style.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFileUpload } from '@fortawesome/free-solid-svg-icons';\n\ninterface IProps {\n    placeholder?: string;\n    accept?: string;\n    onDrop: (files: File[]) => void;\n}\n\nexport class CustomDropzone extends React.Component<IProps> {\n\n    shouldComponentUpdate(props: IProps, _state: any) {\n        return (this.props.placeholder !== props.placeholder);\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='custom-uploader'>\n                {this.props.placeholder ? (\n                    <div className='text'>{this.props.placeholder}</div>\n                ) : (null)}\n                <div className='upload-box'>\n                    <Dropzone\n                        multiple={false}\n                        onDrop={acceptedFiles => this.props.onDrop(acceptedFiles)}\n                        accept={this.props.accept}\n                        // accept=\"application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n                        >\n                        {({getRootProps, getInputProps}) => (\n                            <section>\n                                <div className='upload-file' {...getRootProps()}>\n                                    <input {...getInputProps()} />\n                                    <FontAwesomeIcon className='fa-1.5x' icon={faFileUpload} />\n                                    <div>Drag or drop file to upload a <br />supporting document</div>\n                                </div>\n                            </section>\n                        )}\n                    </Dropzone>\n                </div>\n                \n\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { TextareaAutosize } from '@material-ui/core';\nimport './component-style.scss';\n\ninterface IProps {\n    placeholder?: string;\n    value: string;\n    defaultRows?: number;\n    onChange: (value: string) => void;\n}\n\nexport class InputArea extends React.Component<IProps> {\n\n    shouldComponentUpdate(props: IProps, _state: any) {\n        return (\n            (this.props.placeholder !== props.placeholder) ||\n            (this.props.value !== props.value) ||\n            (this.props.defaultRows !== props.defaultRows)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='input-field-container'>\n                {this.props.placeholder ? (\n                    <div className='text'>{this.props.placeholder}</div>\n                ) : null}\n                <TextareaAutosize \n                    className='text-field'\n                    rows={this.props.defaultRows ? this.props.defaultRows : 4}\n                    value={this.props.value}\n                    onChange={(event: React.ChangeEvent<HTMLTextAreaElement>) => {\n                        this.props.onChange(event.target.value);\n                    }}\n                />\n            </div>\n        );\n    }\n}","\nimport * as React from 'react';\nimport './component-style.scss';\nimport { Chip } from '@material-ui/core';\n\ninterface IProps {\n    label: string;\n    value: string;\n    onDelete: (value: string) => void;\n}\n\nexport class CustomChip extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        return (\n            <Chip \n                className='chip'\n                label={this.props.label} \n                onDelete={() => {this.props.onDelete(this.props.value)}} />\n        );\n    }\n}","import * as React from 'react';\nimport {  Grid } from '@material-ui/core';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { TicketData, DropdownChoice, MemberData, ClientData } from 'Pages/CustomerCarePage/Models';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { CustomDropzone } from 'Pages/CustomerCarePage/Components/CustomDropzone';\nimport { InputArea } from 'Pages/CustomerCarePage/Components/InputArea';\nimport { CustomChip } from 'Pages/CustomerCarePage/Components/CustomChip';\n\ninterface IProps {\n    member?: MemberData;\n    client?: ClientData;\n    ticket: TicketData;\n    facilities: DropdownChoice[];\n    agents: DropdownChoice[];\n    createTicketAttemp: boolean;\n    refreshTicketState: () => void;\n}\nexport class TicketInfoSection extends React.Component<IProps> {\n\n    ticketChannels: DropdownChoice[];\n    ticketSources: DropdownChoice[];\n    ticketTypes: DropdownChoice[];\n    specificTypes: DropdownChoice[];\n    urgencies: DropdownChoice[];\n    agents: DropdownChoice[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.ticketChannels = [\n            { value: '1', label: 'Call' },\n            { value: '2', label: 'SMS' },\n            { value: '3', label: 'Text' },\n            { value: '4', label: 'Email' },\n            { value: '5', label: 'Walk-in' }\n        ];\n\n        this.ticketSources = [\n            { value: '1', label: 'Member' },\n            { value: '2', label: 'Corporate Client' },\n            { value: '3', label: 'Broker' },\n            { value: '4', label: 'Agent' },\n            { value: '5', label: 'Clinic/Hospital' }\n        ];\n\n        this.ticketTypes = [\n            { value: '1', label: 'Availment' },\n            { value: '2', label: 'Inquiry' }\n        ];\n\n        this.specificTypes = [\n            { value: '1', label: 'Outpatient Procedure' },\n            { value: '2', label: 'Inpatient' },\n            { value: '3', label: 'Emergency Room' },\n            { value: '4', label: 'Consultation' }\n        ];\n\n        this.urgencies = [\n            { value: '1', label: 'Low' },\n            { value: '2', label: 'Medium' },\n            { value: '3', label: 'High' }\n        ];\n\n        this.agents = [\n            { value: '', label: 'Me' }\n        ]\n    }\n\n    componentDidMount() {\n        this.agents[0].value = localStorage['user_id'];\n    }\n\n    render(): JSX.Element {\n        console.log(\"TICK INFO\");\n        const ticket = this.props.ticket;\n\n        return (\n            <div className='ticket-info'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='sub-section'>\n                    <div className='header-2'>TICKET INFORMATION</div>\n                    <Grid container spacing={1}>\n                        <Grid item xs={5}>\n                            <Dropdown \n                                placeholder='Received via'\n                                choices={this.ticketChannels}\n                                value={{ value: '', label: ticket.ticketChannel }}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    ticket.ticketChannel === ''}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.ticket.ticketChannel = value.label;\n                                    this.props.refreshTicketState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={7}>\n                            <InputField \n                                placeholder='Transaction No.' \n                                value={ticket.transactionNo}\n                                disabled={true}\n                                onChange={(value: string) => {\n                                    this.props.ticket.transactionNo = value;\n                                    this.props.refreshTicketState();\n                                }} />\n                        </Grid>\n                    </Grid>\n                    <Dropdown \n                        placeholder='Received From'\n                        choices={this.ticketSources}\n                        value={{ value: '', label: ticket.ticketSource}}\n                        error={\n                            this.props.createTicketAttemp && \n                            ticket.ticketSource === ''}\n                        onChange={(value: DropdownChoice) => {\n                            this.props.ticket.ticketSource = value.label;\n                            this.props.refreshTicketState();\n                        }} />\n                    <div>\n                        {ticket.ticketSource === 'Member' ? (\n                            <div>\n                                <InputField \n                                    placeholder='Member Name'\n                                    value={ticket.memberName}\n                                    error={\n                                        this.props.createTicketAttemp && \n                                        ticket.memberName === ''}\n                                    onChange={(value: string) => {\n                                        this.props.ticket.memberName = value;\n                                        this.props.refreshTicketState();\n                                    }} />\n                            </div>\n\n                        ) : ticket.ticketSource === 'Corporate Client' ? (\n                            <div>\n                                <InputField \n                                    placeholder='Corporate Client Name'\n                                    value={ticket.clientName}\n                                    error={\n                                        this.props.createTicketAttemp && \n                                        ticket.clientName === ''}\n                                    onChange={(value: string) => {\n                                        this.props.ticket.clientName = value;\n                                        this.props.refreshTicketState();\n                                    }} />\n                            </div>\n                        \n                        ) : ticket.ticketSource === 'Broker' ? (\n                            <div>\n                                <InputField \n                                    placeholder='Broker Name'\n                                    value={ticket.brokerName}\n                                    error={\n                                        this.props.createTicketAttemp && \n                                        ticket.brokerName.trim() === ''}    \n                                    onChange={(value: string) => {\n                                        this.props.ticket.brokerName = value;\n                                        this.props.refreshTicketState();\n                                    }} />\n                            </div>\n\n                        ) : ticket.ticketSource === 'Clinic/Hospital' ? (\n                            <div>\n                                <Dropdown \n                                    placeholder='Name of Hospital'\n                                    choices={this.props.facilities}\n                                    value={ticket.facility}\n                                    error={\n                                        this.props.createTicketAttemp && \n                                        ticket.facility.value === ''}\n                                    onChange={(value: DropdownChoice) => {\n                                        this.props.ticket.facility = value;\n                                        this.props.refreshTicketState();\n                                    }} />\n                                <InputField \n                                    placeholder='Department/Section' \n                                    value={ticket.department}\n                                    error={\n                                        this.props.createTicketAttemp && \n                                        ticket.department.trim() === ''}\n                                    onChange={(value: string) => {\n                                        this.props.ticket.department = value;\n                                        this.props.refreshTicketState();\n                                    }} />\n                            </div>\n                        ) : null}\n                    </div>\n                    <InputField \n                        placeholder='Name of Caller' \n                        value={ticket.callerName}\n                        error={\n                            this.props.createTicketAttemp && \n                            ticket.callerName.trim() === ''}\n                        onChange={(value: string) => {\n                            this.props.ticket.callerName = value;\n                            this.props.refreshTicketState();\n                        }} />\n                    <InputField \n                        placeholder='Contact No.' \n                        value={ticket.contactNo}\n                        error={\n                            this.props.createTicketAttemp && \n                            ticket.contactNo.trim() === ''}\n                        onChange={(value: string) => {\n                            if (value.match(/^[0-9\\b]+$/) || value.length == 0) {\n                                this.props.ticket.contactNo = value; \n                                this.props.refreshTicketState();\n                            }\n                        }} />\n                </div>\n                \n                <div className='sub-section'>\n                    <div className='header-2'>TICKET CATEGORY</div>\n                    <Grid container spacing={1}>\n                        <Grid item xs={5}>\n                            <Dropdown \n                                placeholder='Ticket Type'\n                                choices={this.ticketTypes}\n                                value={{ value: '', label: ticket.ticketType}}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    ticket.ticketType === ''}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.ticket.ticketType = value.label;\n                                    if (value.label === 'Inquiry') {\n                                        this.props.ticket.specificType = 'Not Applicable';\n                                    } else {\n                                        this.props.ticket.specificType = '';\n                                    }\n                                    this.props.refreshTicketState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={7}>\n                            <Dropdown \n                                placeholder='Specific Type'\n                                disabled={ticket.ticketType !== 'Availment'}\n                                choices={this.specificTypes}\n                                value={{ value: '', label: ticket.specificType}}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    ticket.specificType === '' && \n                                    ticket.ticketType !== 'Inquiry'}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.ticket.specificType = value.label;\n                                    this.props.refreshTicketState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={5}>\n                            <Dropdown \n                                placeholder='Urgency'\n                                choices={this.urgencies}\n                                value={{ value: '', label: ticket.urgency}}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    ticket.urgency === ''}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.ticket.urgency = value.label;\n                                    this.props.refreshTicketState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={7}>\n                            <Dropdown \n                                placeholder='Assign To'\n                                choices={this.agents} /* Use this.props.agents later */\n                                value={{ value: ticket.agent.id, label: ticket.agent.name}}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    ticket.agent.id === ''}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.ticket.agent = {\n                                        id: value.value,\n                                        name: value.label\n                                    };\n                                    this.props.refreshTicketState();\n                                }} />\n                        </Grid>\n                    </Grid>\n                </div>\n\n                <div className='sub-section'>\n                    <div className='header-2'>ADDITIONAL NOTES AND FILES</div>\n                    <InputArea\n                        placeholder='Additional Notes'\n                        value={ticket.additionalNotes}\n                        onChange={(value: string) => {\n                            this.props.ticket.additionalNotes = value;\n                            this.props.refreshTicketState();\n                        }} />\n                    <CustomDropzone\n                        accept='image/*'\n                        onDrop={(files: File[]) => {\n                            ticket.additionalFiles.push(files[0]);\n                            this.props.refreshTicketState();\n                        }} />\n                        {ticket.additionalFiles.map((file, index) => {\n                            return (\n                                <CustomChip\n                                    label={file.name}\n                                    value={index.toString()}\n                                    onDelete={(value: string) => {\n                                        ticket.additionalFiles.splice(parseInt(value), 1);\n                                        this.props.refreshTicketState();\n                                    }} />\n                            );\n                        })}\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}\n","import * as React from 'react';\nimport './component-style.scss';\nimport ChipInput from 'material-ui-chip-input';\n\ninterface IProps {\n    placeholder: string;\n    value: string[];\n    onAdd: (value: string) => void;\n    onDelete: (index: number) => void;\n}\n\nexport class InputChip extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        \n        return (\n            <div className='input-field-container'>\n                <div className='text'>{this.props.placeholder}</div>\n                <ChipInput \n                    className='text-field'\n                    value={this.props.value} \n                    fullWidthInput={false}\n                    onAdd={(chip: any) => this.props.onAdd(chip)}\n                    onDelete={(_chip: any, index: number) => this.props.onDelete(index)} />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport {  Grid, TableCell, TableRow } from '@material-ui/core';\nimport { faMinusCircle, faPlus, faPen } from '@fortawesome/free-solid-svg-icons';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { DropdownChoice, InquiryData } from 'Pages/CustomerCarePage/Models';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { CustomDropzone } from 'Pages/CustomerCarePage/Components/CustomDropzone';\nimport { CustomChip } from 'Pages/CustomerCarePage/Components/CustomChip';\nimport { InputChip } from 'Pages/CustomerCarePage/Components/InputChip';\n// import { ComplexTable } from 'Pages/CustomerCarePage/Components/ComplexTable';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\n\ninterface IProps {\n    inquiries: InquiryData[];\n    refreshInquiryState: () => void;\n}\n\ninterface IStates {\n    inquiry: DropdownChoice;\n}\n\nexport class InquirySection extends React.PureComponent<IProps, IStates> {\n\n    inquiries: DropdownChoice[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            inquiry: { value: '', label: '' }\n        };\n\n        this.inquiries = [\n            { value: '1', label: 'Member Status / Card Inquiry' },\n            { value: '2', label: 'Member Network Access Inquiry' },\n            { value: '3', label: 'Member Benefit Inquiry - General [Outpatient]' },\n            { value: '4', label: 'Member Benefit Inquiry - General [Inpatient]' },\n            { value: '5', label: 'Member Benefit Inquiry - General [Emergency]' },\n            { value: '6', label: 'Member Benefit Inquiry - General [Dental]' },\n            { value: '7', label: 'Member Benefit Inquiry - General [APE / ECU]' },\n            { value: '8', label: 'Member Benefit Inquiry - General [Riders]' },\n            { value: '9', label: 'Member Coverage Inquiry - Specific Benefit' },\n            { value: '10', label: 'Member Availment Inquiry - CanAvail' },\n            { value: '11', label: 'Member Eligibility Inquiry' },\n            { value: '12', label: 'Reimbursement Status Inquiry' },\n            { value: '13', label: 'General Affiliated Network Inquiry - Facility' },\n            { value: '14', label: 'General Affiliated Network Inquiry - Doctor' },\n            { value: '15', label: 'General Affiliated Network Inquiry - Dentist' },\n            { value: '16', label: 'Procedural Inquiry - Outpatient' },\n            { value: '17', label: 'Procedural Inquiry - Inpatient' },\n            { value: '18', label: 'Procedural Inquiry - Emergency' },\n            { value: '19', label: 'Procedural Inquiry - Dental' },\n            { value: '20', label: 'Procedural Inquiry - APE / ECU' },\n            { value: '21', label: 'Procedural Inquiry - Member Enrolment / Cancellation / Update' },\n            { value: '22', label: 'Procedural Inquiry - Reimbursement' },\n            { value: '23', label: 'Procedural Inquiry - Others' }\n        ];\n    }\n\n    onAddInquiry() {\n        if (this.state.inquiry.value !== '') {\n            this.props.inquiries.push({\n                inquiry: this.state.inquiry,\n                detail: '',\n                specificDetail: [],\n                answer: '',\n                remarks: '',\n                relatedTickets: [],\n                supportDocs: []\n            });\n            \n            this.props.refreshInquiryState();\n            this.setState({inquiry: { value: '', label: '' }});\n        }\n    }\n\n    getFilteredInquiries(): DropdownChoice[] {\n        let filteredInquiries: DropdownChoice[] = [];\n        for (var i = 0; i < this.inquiries.length; i++) {\n            let isSame = false;\n            for (var j = 0; j < this.props.inquiries.length; j++) {\n                isSame = (\n                    this.props.inquiries[j].inquiry.value === \n                    this.inquiries[i].value ? true : isSame);\n            }\n            if (!isSame) {\n                filteredInquiries = filteredInquiries.concat(this.inquiries[i]);\n            }\n        }\n        return filteredInquiries;\n    }\n    \n    onRemoveInquiry(index: number) {\n        this.props.inquiries.splice(index, 1);\n        this.props.refreshInquiryState();\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='availment-section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='sub-section'>\n                    <div className='header-2'>INQUIRY</div>\n                    <div className='text'>\n                        Add an inquiry type and then add the question and its details after\n                    </div>\n                    <div className='sub-section'>\n                        <CustomTable \n                            rows={this.props.inquiries}\n                            renderHeader={() => this.renderTableHeader()}\n                            renderRow={(rowData: any, index: number) => \n                                this.renderTableRow(rowData, index)} />\n                    </div>\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n        return (\n            <>\n            <TableCell style={{minWidth: '400px', maxWidth: '400px'}}>\n                <Dropdown \n                    choices={this.getFilteredInquiries()}\n                    value={this.state.inquiry}\n                    onChange={(value: DropdownChoice) => {\n                        this.setState({inquiry: value});\n                    }} />\n            </TableCell>\n            <TableCell style={{minWidth: '125px', maxWidth: '125px', textAlign: 'center'}}>\n                <TextButton \n                    icon={faPlus} \n                    label=\"Add inquiry\"\n                    onClick={() => {\n                        this.onAddInquiry();\n                    }} />\n            </TableCell>\n            </>\n        );\n    }\n\n    renderTableRow(inquiry: InquiryData, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                <TableCell colSpan={2}>\n                    <Grid container spacing={1}>\n                        <Grid item xs={10} className='header-2'>\n                            {inquiry.inquiry.label}\n                        </Grid>\n                        <Grid item xs={2} style={{textAlign: 'right'}}>\n                            <IconButton\n                                icon={faPen}\n                                onClick={() => {\n                                    this.onRemoveInquiry(index);\n                                }}/>\n                            <IconButton\n                                icon={faMinusCircle}\n                                onClick={() => {\n                                    this.onRemoveInquiry(index);\n                                }}/>\n                        </Grid>\n                    </Grid>\n                    <div style={{position: 'relative'}}>\n                        <div style={{paddingTop: '0.5rem'}} />\n                        <div className='line-border' />\n                        <div style={{paddingTop: '0.5rem'}} />\n                        <Grid container>\n                            <Grid item xs={1}/>\n                            <Grid item xs={11}>\n                                <div style={{margin: '8px 8px 1.5rem 8px'}}>\n                                    <InputField \n                                        placeholder='Details of inquiry (Question)'\n                                        value={inquiry.detail}\n                                        onChange={(value: string) => {\n                                            inquiry.detail = value;\n                                            this.props.refreshInquiryState();\n                                        }} />\n                                        <InputChip \n                                            placeholder='Specific Details (Type benefit/doctor/facility to describe inquiry, press enter to add)'\n                                            value={inquiry.specificDetail}\n                                            onAdd={(value: string) => {\n                                                inquiry.specificDetail.push(value);\n                                                this.props.refreshInquiryState();\n                                            }}\n                                            onDelete={(index: number) => {\n                                                inquiry.specificDetail.splice(index, 1);\n                                                this.props.refreshInquiryState();\n                                            }} />\n                                    <InputField \n                                        placeholder='Answer'\n                                        value={inquiry.answer}\n                                        onChange={(value: string) => {\n                                            inquiry.answer = value;\n                                            this.props.refreshInquiryState();\n                                        }} />\n                                    <InputField \n                                        placeholder='Remarks (Optional)'\n                                        value={inquiry.remarks}\n                                        onChange={(value: string) => {\n                                            inquiry.remarks = value;\n                                            this.props.refreshInquiryState();\n                                        }} />\n                                    <InputChip \n                                            placeholder='Related Tickets (Optional, press enter to add)'\n                                            value={inquiry.relatedTickets}\n                                            onAdd={(value: string) => {\n                                                inquiry.relatedTickets.push(value);\n                                                this.props.refreshInquiryState();\n                                            }}\n                                            onDelete={(index: number) => {\n                                                inquiry.relatedTickets.splice(index, 1);\n                                                this.props.refreshInquiryState();\n                                            }} />\n                                    <Grid container spacing={2}>\n                                        <Grid item xs={7}>\n                                            <CustomDropzone \n                                                accept='image/*'\n                                                onDrop={(files: File[]) => {\n                                                    inquiry.supportDocs.push(files[0]);\n                                                    this.props.refreshInquiryState();\n                                                }}/>\n                                        </Grid>\n                                        <Grid item xs={5}>\n                                            {inquiry.supportDocs.map((doc, index) => {\n                                                return (\n                                                    <CustomChip\n                                                        label={doc.name}\n                                                        value={index.toString()}\n                                                        onDelete={(value: string) => {\n                                                            inquiry.supportDocs.splice(parseInt(value), 1);\n                                                            this.props.refreshInquiryState();\n                                                        }} />\n                                                );\n                                            })}\n                                        </Grid>\n                                    </Grid>\n                                </div>\n                                \n                            </Grid>\n                        </Grid>\n                    </div>\n                </TableCell>\n            </TableRow>\n        );\n    }\n}","import * as React from 'react';\nimport { ConsultationDetails, DropdownChoice } from 'Pages/CustomerCarePage/Models';\nimport { DetailedDropdown } from 'Pages/CustomerCarePage/Components/DetailedDropdown';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\n\ninterface IProps {\n    consultation: ConsultationDetails;\n    facilities: DropdownChoice[];\n    doctors: DropdownChoice[];\n    icd10Codes: DropdownChoice[];\n    createTicketAttemp: boolean;\n    refreshConsultationState: () => void;\n}\n\nexport class ConsultationSection extends React.Component<IProps> {\n\n    constructor(props: IProps) {\n        super(props);\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='availment-section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='sub-section'>\n                    <div className='header-2'>AVAILMENT DETAILS</div>\n                    <DetailedDropdown \n                        choices={this.props.facilities}\n                        placeholder='Provider'\n                        value={this.props.consultation.provider}\n                        error={\n                            this.props.createTicketAttemp && \n                            this.props.consultation.provider.value === ''}\n                        onChange={(value: DropdownChoice) => {\n                            this.props.consultation.provider = value;\n                            this.props.refreshConsultationState();\n                        }} />\n\n                    <DetailedDropdown \n                        choices={this.props.icd10Codes}\n                        placeholder='Diagnosis'\n                        value={this.props.consultation.diagnosis}\n                        error={\n                            this.props.createTicketAttemp && \n                            this.props.consultation.diagnosis.value === ''}\n                        onChange={(value: DropdownChoice) => {\n                            this.props.consultation.diagnosis = value;\n                            this.props.refreshConsultationState();\n                        }} />\n                    <Dropdown \n                        choices={this.props.doctors}\n                        placeholder='Doctor'\n                        value={this.props.consultation.doctor}\n                        error={\n                            this.props.createTicketAttemp && \n                            this.props.consultation.doctor.value === ''}\n                        onChange={(value: DropdownChoice) => {\n                            this.props.consultation.doctor = value;\n                            this.props.refreshConsultationState();\n                        }} />\n                    <InputField\n                        placeholder='Notes'\n                        value={this.props.consultation.notes}\n                        onChange={(value: string) => {\n                            this.props.consultation.notes = value;\n                            this.props.refreshConsultationState();\n                        }} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport {  Grid, TableCell, TableRow } from '@material-ui/core';\nimport { faMinusCircle, faPlus, faPen, faCheckCircle, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport { DetailedDropdown } from 'Pages/CustomerCarePage/Components/DetailedDropdown';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { ProcedureData, DropdownChoice, AvailmentDetails, DiagnosisData } from 'Pages/CustomerCarePage/Models';\nimport { NumberField } from 'Pages/CustomerCarePage/Components/NumberField';\nimport { CustomCheckbox } from 'Pages/CustomerCarePage/Components/CustomCheckbox';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\n\ninterface IProps {\n    availment: AvailmentDetails;\n    facilities: DropdownChoice[];\n    doctors: DropdownChoice[];\n    icd10Codes: DropdownChoice[];\n    cptCodes: DropdownChoice[];\n    createTicketAttemp: boolean;\n    refreshAvailmentState: () => void;\n}\n\ninterface IStates {\n    icd10Code: DropdownChoice;\n    doctor: DropdownChoice;\n    chiefComplaint: string;\n    history: string;\n\n    itemToEditIndex: number;\n    icd10CodeToEdit: DropdownChoice;\n    doctorToEdit: DropdownChoice;\n}\n\nexport class EmergencyRoomSection extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            icd10Code: { value: '', label: '' },\n            doctor: { value: '', label: '' },\n            chiefComplaint: '',\n            history: '',\n\n            itemToEditIndex: -1,\n            icd10CodeToEdit: { value: '', label: '' },\n            doctorToEdit: { value: '', label: '' }\n        };\n    }\n\n    getFilteredICD10(): DropdownChoice[] {\n        let filteredICD10: DropdownChoice[] = [];\n        for (var i = 0; i < this.props.icd10Codes.length; i++) {\n            let isSame = false;\n            for (var j = 0; j < this.props.availment.diagnoses.length; j++) {\n                isSame = (\n                    this.props.availment.diagnoses[j].icd10Code.value === \n                    this.props.icd10Codes[i].value ? true : isSame);\n            }\n            if (!isSame) {\n                filteredICD10 = filteredICD10.concat(this.props.icd10Codes[i]);\n            }\n        }\n        return filteredICD10;\n    }\n\n    getProcedureCosts(procedures: ProcedureData[]) {\n        let totalCost = 0;\n        procedures.map(procedure => {\n            totalCost += procedure.amount;\n        });\n        return totalCost;\n    }\n    \n    pushBlankDiagnosis(icd10Code: DropdownChoice, doctor: DropdownChoice) {\n        this.props.availment.diagnoses.push({\n            icd10Code: icd10Code,\n            remarks: '',\n            isPrimary: false,\n            isFinal: false,\n            doctors: [{\n                id: '',\n                name: doctor.label,\n                specialization: '',\n                fee: 0,\n                noOfVisits: 0,\n                remarks: '',\n                type: 'Admitting'\n            }],\n            procedures: [{\n                cptCode: { value: '', label: '' },\n                isPHIC: false,\n                amount: 0,\n                notes: '',\n                assessmentType: 'Pending',\n                assessmentRemarks: '',\n                approvedAmount: 0,\n                doctor: '',\n                dateAdded: new Date()\n            }],\n            assessmentType: 'Pending',\n            assessmentRemarks: '',\n            approvedAmount: 0\n        });\n    }\n\n    pushBlankProcedures(diagnosisIndex: number) {\n        this.props.availment.diagnoses[diagnosisIndex].procedures.push({\n            cptCode: { value: '', label: '' },\n            isPHIC: false,\n            amount: 0,\n            notes: '',\n            assessmentType: 'Pending',\n            assessmentRemarks: '',\n            approvedAmount: 0,\n            doctor: '',\n            dateAdded: new Date()\n        });\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='availment-section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='sub-section'>\n                    <div className='header-2'>AVAILMENT DETAILS</div>\n                    <DetailedDropdown \n                        choices={this.props.facilities}\n                        placeholder='Provider'\n                        value={this.props.availment.provider}\n                        error={\n                            this.props.createTicketAttemp && \n                            this.props.availment.provider.value === ''}\n                        onChange={(value: DropdownChoice) => {\n                            this.props.availment.provider = value;\n                            this.props.refreshAvailmentState();\n                        }} />\n                    <InputField\n                        placeholder='Chief Complaint'\n                        value={this.state.chiefComplaint}\n                        onChange={(value: string) => {\n                            this.setState({chiefComplaint: value});\n                        }} />\n                    <InputField\n                        placeholder='History'\n                        value={this.state.history}\n                        onChange={(value: string) => {\n                            this.setState({history: value});\n                        }} />\n                </div>\n                <div className='sub-section'>\n                    <div className='header-3'>LIST OF AVAILMENTS</div>\n                    <div className='text'>\n                        Add a diagnosis first then add procedures per diagnosis after\n                    </div>\n                    <div className='sub-section'>\n                        <CustomTable\n                            rows={this.props.availment.diagnoses}\n                            renderHeader={() => this.renderTableHeader()}\n                            renderRow={(rowData: any, index: number) => \n                                this.renderTableRow(rowData, index)} />\n                    </div>\n                    {this.props.createTicketAttemp && this.props.availment.diagnoses.length === 0 ? (\n                        <div className='sub-section' style={{color: '#E53935'}}>\n                            No diagnosis. Need atleast one diagnosis.\n                        </div> \n                    ) : (null)}\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n        return (\n            <>\n            <TableCell style={{minWidth: '300px', maxWidth: '300px'}}>\n                <DetailedDropdown \n                    choices={this.getFilteredICD10()}\n                    value={this.state.icd10Code}\n                    onChange={(value: DropdownChoice) => {\n                        this.setState({icd10Code: value});\n                    }} />\n            </TableCell>\n            <TableCell style={{minWidth: '150px', maxWidth: '150px'}}>\n                <Dropdown \n                    choices={this.props.doctors}\n                    value={this.state.doctor}\n                    onChange={(value: DropdownChoice) => {\n                        this.setState({doctor: value});\n                    }} />\n            </TableCell>\n            <TableCell style={{textAlign: 'center'}}>\n                <TextButton \n                    icon={faPlus} \n                    label=\"Add diagnosis\"\n                    onClick={() => {\n                        if (this.state.doctor.value !== '' && this.state.icd10Code.value !== '') {\n                            this.pushBlankDiagnosis(this.state.icd10Code, this.state.doctor);\n                            this.props.refreshAvailmentState();\n                            this.setState({\n                                icd10Code: { value: '', label: '' },\n                                doctor: { value: '', label: '' }\n                            });\n                        }\n                    }} />\n            </TableCell>\n            </>\n        );\n    }\n\n    renderTableRow(diagnosis: DiagnosisData, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n        const editIcon = { display: 'inline-block', paddingRight: '0.5rem' };\n        const deleteIcon = { display: 'inline-block' };\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                <TableCell colSpan={3}>\n                    <Grid container spacing={1}>\n                        {this.state.itemToEditIndex === index ? (\n                            <>\n                            <Grid item xs={6}>\n                                <DetailedDropdown \n                                    choices={this.getFilteredICD10()}\n                                    value={this.state.icd10CodeToEdit}\n                                    onChange={(value: DropdownChoice) => {\n                                        this.setState({icd10CodeToEdit: value});\n                                    }} />\n                            </Grid>\n                            <Grid item xs={5}>\n                                <Dropdown \n                                    choices={this.props.doctors}\n                                    value={this.state.doctorToEdit}\n                                    onChange={(value: DropdownChoice) => {\n                                        this.setState({doctorToEdit: value});\n                                    }} />\n                            </Grid>\n                            <Grid item xs={1} style={{lineHeight: '2rem'}}>\n                                <div style={editIcon}>\n                                    <IconButton\n                                        icon={faCheckCircle}\n                                        onClick={() => {\n                                            this.props.availment.diagnoses[index].icd10Code = this.state.icd10CodeToEdit;\n                                            this.props.availment.diagnoses[index].doctors[0].name = this.state.doctorToEdit.label;\n                                            this.props.refreshAvailmentState();\n                                            this.setState({itemToEditIndex: -1});\n                                        }}/>\n                                </div>\n                                <div style={deleteIcon}>\n                                    <IconButton\n                                        icon={faTimesCircle}\n                                        onClick={() => {\n                                            this.setState({itemToEditIndex: -1});\n                                        }}/>\n                                </div>\n                            </Grid>\n                            </>\n                        ) : (\n                            <>\n                            <Grid item xs={6} className='header-2'>\n                                {diagnosis.icd10Code.value + ' - ' + diagnosis.icd10Code.label}\n                            </Grid>\n                            <Grid item xs={3} className='header-2'>\n                                {diagnosis.doctors[0].name}\n                            </Grid>\n                            <Grid item xs={2} className='header-2'>\n                                {GlobalFunction.formatNumber(this.getProcedureCosts(diagnosis.procedures), true) + \" PHP\"}\n                            </Grid>\n                            <Grid item xs={1}>\n                                <div style={editIcon}>\n                                    <IconButton\n                                        icon={faPen}\n                                        onClick={() => {\n                                            this.setState({\n                                                itemToEditIndex: index,\n                                                icd10CodeToEdit: diagnosis.icd10Code,\n                                                doctorToEdit: {\n                                                    value: diagnosis.doctors[0].id,\n                                                    label: diagnosis.doctors[0].name\n                                                }\n                                            });\n                                        }}/>\n                                </div>\n                                <div style={deleteIcon}>\n                                    <IconButton\n                                        icon={faMinusCircle}\n                                        onClick={() => {\n                                            this.props.availment.diagnoses.splice(index, 1);\n                                            this.props.refreshAvailmentState();\n                                        }}/>\n                                </div>\n                            </Grid>\n                            </>\n                        )}\n                    </Grid>\n                    {diagnosis.procedures.map((procedure, procedureIndex) => {\n                        return this.renderProcedureDetails(procedure, index, procedureIndex);\n                    })}\n                </TableCell>\n            </TableRow>\n        );\n    }\n    \n    renderProcedureDetails(procedure: ProcedureData, diagnosisIndex: number, index: number): JSX.Element {\n        const stateProcedure = this.props.availment.diagnoses[diagnosisIndex].procedures[index];\n        const stateProcedures = this.props.availment.diagnoses[diagnosisIndex].procedures;\n        return (\n            <div style={{position: 'relative'}}>\n                <div style={{paddingTop: '0.5rem'}} />\n                <div className='line-border' />\n                <div style={{paddingTop: '0.5rem'}} />\n                <Grid container spacing={2}>\n                    <Grid item xs={8}>\n                        <DetailedDropdown \n                            placeholder='Procedure'\n                            choices={this.props.cptCodes}\n                            value={procedure.cptCode}\n                            onChange={(value: DropdownChoice) => {\n                                stateProcedure.cptCode = value;\n                                if (index === (stateProcedures.length - 1)) {\n                                    this.pushBlankProcedures(diagnosisIndex);\n                                }\n                                this.props.refreshAvailmentState();\n                            }} />\n                    </Grid>\n                    <Grid item xs={3}>\n                        <NumberField\n                            placeholder='Amount'\n                            value={procedure.amount}\n                            onChange={(value: number) => {\n                                stateProcedure.amount = value;\n                                this.props.refreshAvailmentState();\n                            }} />\n                    </Grid>\n                    <Grid item xs={1}>\n                        <CustomCheckbox\n                            placeholder='PHIC'\n                            value={procedure.isPHIC}\n                            onChange={(value: boolean) => {\n                                stateProcedure.isPHIC = value;\n                                this.props.refreshAvailmentState();\n                            }} />\n                    </Grid>\n                </Grid>\n                <div style={{position: 'absolute'}}>\n                    <TextButton \n                        label='Add procedure'\n                        icon={faPlus}\n                        onClick={() => {\n                            this.pushBlankProcedures(diagnosisIndex);\n                            this.props.refreshAvailmentState();\n                        }}/>\n                </div>\n                <div style={{paddingTop: '1rem'}} />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Button } from '@material-ui/core';\nimport { GlobalFunction } from './GlobalFunction';\n\ninterface IProps {\n    lastSave?: Date;\n    disableCloseTicket?: boolean;\n    disableFinalAssessment?: boolean;\n    disableAssign?: boolean;\n    disableEscalate?: boolean;\n\n    onSaveForNow?: () => void;\n    onSubmitTicket?: () => void;\n    onResolveTicket?: () => void;\n    onSummarizeAssessment?: () => void;\n    onGenerateApprovalCode?: () => void;\n\n    onAssign?: () => void;\n    onEscalate?: () => void;\n    onUpdateTicket?: () => void;\n    onFinalAssessment?: () => void;\n    onCloseTicket?: () => void;\n}\n\nexport class TicketFooter extends React.Component<IProps> {\n\n    interval?: NodeJS.Timeout;\n\n    componentDidMount() {\n        this.interval = setInterval(() => this.setState({ time: Date.now() }), 5000);\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='footer'>\n\n                {this.props.onSaveForNow ? (\n                    <Button \n                        className='button-transparent' \n                        variant='outlined'\n                        onClick={this.props.onSaveForNow}>\n                        <div style={{display: 'block'}}>\n                            <div className='text'>Save For Now</div>\n                            {this.props.lastSave ? (\n                                <div className='small-text'>\n                                    {`Auto-saved ${GlobalFunction.getTimeDeffirence(this.props.lastSave, new Date())} ago`}\n                                </div>\n                            ) : null}\n                        </div>\n                    </Button>\n                ) : null}\n\n                {this.props.onResolveTicket ? (\n                    <Button \n                        className='button'\n                        disabled={this.props.onResolveTicket === null}\n                        onClick={this.props.onResolveTicket}>\n                        Mark as Resolved\n                    </Button>\n                ) : null}\n                \n                {this.props.onSubmitTicket ? (\n                    <Button \n                        className='button'\n                        disabled={this.props.onSubmitTicket === null}\n                        onClick={this.props.onSubmitTicket}>\n                        Submit Ticket\n                    </Button>\n                ) : null}\n\n                {this.props.onAssign ? (\n                    <Button \n                        className='button'\n                        color='default'\n                        disabled={this.props.disableAssign}\n                        onClick={this.props.onAssign}>\n                        Assign\n                    </Button>\n                ) : null}\n\n                {this.props.onEscalate ? (\n                    <Button \n                        className='button-error'\n                        disabled={this.props.disableEscalate}\n                        onClick={this.props.onEscalate}>\n                        Escalate\n                    </Button>\n                ) : null}\n\n                {this.props.onUpdateTicket ? (\n                    <Button \n                        className='button'\n                        disabled={this.props.onUpdateTicket === null}\n                        onClick={this.props.onUpdateTicket}>\n                        Update Ticket\n                    </Button>\n                ) : null}\n\n                {this.props.onFinalAssessment ? (\n                    <Button \n                        className='button'\n                        disabled={this.props.disableFinalAssessment}\n                        onClick={this.props.onFinalAssessment}>\n                        Proceed with Final Assessment\n                    </Button>\n                ) : null}\n\n                {this.props.onSummarizeAssessment ? (\n                    <Button \n                        className='button'\n                        disabled={this.props.onSummarizeAssessment === null}\n                        onClick={this.props.onSummarizeAssessment}>\n                        Summarize Assessment\n                    </Button>\n                ) : null}\n\n                {this.props.onGenerateApprovalCode ? (\n                    <Button \n                        className='button'\n                        disabled={this.props.onGenerateApprovalCode === null}\n                        onClick={this.props.onGenerateApprovalCode}>\n                        Generate Approval Code\n                    </Button>\n                ) : null}\n\n                {this.props.onCloseTicket ? (\n                    <Button \n                        className='button'\n                        disabled={this.props.disableCloseTicket}\n                        onClick={this.props.onCloseTicket}>\n                        Close Ticket\n                    </Button>\n                ) : null}\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\nimport { Tabs, Tab } from '@material-ui/core';\n\ninterface IProps {\n    tabList: { value: number, label: string }[];\n    selectedTab: number;\n    setSelectedTab: (index: number) => void;\n}\n\nexport class CustomTabs extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        return (\n            <Tabs\n                className='tabs' \n                value={this.props.selectedTab}\n                variant='scrollable'\n                scrollButtons='auto'\n                indicatorColor='primary'\n                onChange={(_event: React.ChangeEvent<{}>, value: number) => {\n                    this.props.setSelectedTab(value );\n                }}>\n                {this.props.tabList.map(tab => {\n                    return <Tab value={tab.value} label={tab.label} />\n                })}\n            </Tabs>\n        );\n    }\n}","import * as React from 'react';\nimport { Grid } from '@material-ui/core';\nimport { ClientData } from 'Pages/CustomerCarePage/Models';\n\ninterface IProps {\n    client: ClientData;\n}\n\ninterface IStates {\n    \n}\n\nexport class BasicInformationSection extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n\n        };\n    }\n\n    render() : JSX.Element {\n        const client = this.props.client;\n\n        const yearsAndCount = client.years ? `${new Date().getUTCFullYear() - client.years} (${client.years})` : '---';\n        const brokerName = client.salesChannel ? client.salesChannel.contactName : '---';\n        const brokerCompany = client.salesChannel ? client.salesChannel.company : '---';\n\n        return (\n            <Grid container spacing={2}>\n                {this.renderItem('CORPORATE ACCOUNT NO.', client.corporateAccountNo, 12, 'header-1')}\n                {this.renderItem('REGISTERED COMPANY NAME', client.registeredName)}\n                {this.renderItem('TRADE COMPANY NAME', client.brandName)}\n                {this.renderItem('INDUSTRY', client.industry || '---')}\n                {this.renderItem('OWNWESHIP', client.ownership || '---')}\n                {this.renderItem('CORPORATE TIN', client.tinNo || '---')}\n                {this.renderItem('SEC REGISTRATION NO.', client.secRegNo || '---')}\n                {this.renderItem('E-VAT NO.', client.evatNo || '---')}\n                {this.renderItem('ESTABLISHED (YEARS)', yearsAndCount)}\n                {this.renderItem('AUTHORIZED SIGNATORY', client.authSignatory)}\n                {this.renderItem('BROKER/BDO', brokerName)}\n                {this.renderItem('BROKER COMPANY', brokerCompany)}\n                {this.renderItem('PREVIOUS HMO', client.prevHMOProvider)}\n\n                {client.mainOfficeAddress && client.mainOfficeAddress.contactPersons.length > 0 ? (\n                    <>\n                    {this.renderItem('CONTACT PERSON')}\n                    {this.renderItem('POSITION')}\n                    {this.renderItem('CONTACT NO.')}\n                    {this.renderItem('CONTACT EMAIL')}\n                    </>\n                ) : null}\n                \n                {client.mainOfficeAddress && client.mainOfficeAddress.contactPersons.map(contact => {\n                    return (\n                        <>\n                        {this.renderItem('', contact.name)}\n                        {this.renderItem('', contact.designation)}\n                        {this.renderItem('', contact.contactNo)}\n                        {this.renderItem('', contact.email)}\n                        </>\n                    );\n                })}\n            </Grid>\n        );\n    }\n\n    renderItem(label: string, value?: string | number, xs?: any, headerName?: string): JSX.Element {\n        return (\n            <Grid item className='sub-section' xs={xs ? xs : 3}>\n                {label.length > 0 ? (\n                    <div className='light-text'>{label}</div>\n                ) : null}\n                {value ? (\n                    <div className={headerName ? headerName : 'header-2'}>{value}</div>\n                ) : null}\n            </Grid>\n        )\n    }\n}","import * as React from 'react';\nimport { Grid, Tabs, Tab } from '@material-ui/core';\nimport { ClientData } from 'Pages/CustomerCarePage/Models';\nimport { API } from 'Pages/CustomerCarePage/API';\nimport { Payloads } from 'Pages/CustomerCarePage/Payloads';\nimport { BasicInformationSection } from './BasicInformationSection';\nimport { Loading } from 'Pages/CustomerCarePage/Components/Loading';\n\ninterface IProps {\n    clientId: string;\n}\n\ninterface IStates {\n    client?: ClientData;\n    selectedTab: number;\n}\n\nexport class ClientProfileSection extends React.Component<IProps, IStates> {\n\n    informationTabs = [\n        { value: 1, label: 'Basic Information' },\n        { value: 2, label: 'Contracts/Branches' },\n        { value: 3, label: 'Member Fields' },\n        { value: 4, label: 'Servicing Instructions' }\n    ];\n\n    accountTabs = [\n        { value: 5, label: 'HMO Information' },\n        { value: 6, label: 'Members' },\n        { value: 7, label: 'History' },\n        { value: 8, label: 'Documents' }\n    ];\n\n    activitiesTabs = [\n        { value: 9, label: 'Audit Logs' }\n    ];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            selectedTab: 1\n        };\n    }\n\n    componentDidMount() {\n        API.get(`clients/account/hmo-info/${this.props.clientId}`,\n            (response) => {\n                console.log(response);\n                this.setState({client: Payloads.getClientData(response.client)});\n            },\n            (error) => {\n                console.log(error);\n            });\n    }\n\n    render() : JSX.Element {\n        return (\n            <div className='section' style={{width: '100%'}}>\n                <div style={{paddingTop: '2.5rem'}} />\n                <Grid container className='sub-section' spacing={5}>\n                    {this.renderSideBar()}\n                    {this.renderMainContent()}\n\n                    {/* {this.state.benefitListUpdated ? (\n                        this.renderBenefitsList()\n                    ) : (\n                        <Grid item xs={10}>\n                            <Loading height='10rem'/>\n                        </Grid>\n                    )} */}\n                    \n                </Grid>\n            </div>\n        );\n    }\n\n    renderSideBar(): JSX.Element {\n        const rightBorderStyle = {\n            borderRight: '#3C394A22 solid 1px'\n        }\n        return (\n            <Grid item xs={2} style={rightBorderStyle}>\n                {/* TEST */}\n                {this.renderSideTabs(this.informationTabs)}\n                {this.renderSideTabs(this.accountTabs)}\n                {this.renderSideTabs(this.activitiesTabs)}\n            </Grid>\n        );\n    }\n\n    renderSideTabs(tabs: any[]): JSX.Element {\n        return (\n            <Tabs\n                className='custom-vertical-tabs' \n                orientation='vertical'\n                value={this.state.selectedTab}\n                variant='scrollable'\n                scrollButtons='auto'\n                indicatorColor='primary'\n                onChange={(_event: React.ChangeEvent<{}>, value: number) => {\n                    this.setState({selectedTab: value});\n                }}>\n                {tabs.map(tab => {\n                    return (\n                        <Tab \n                            value={tab.value} \n                            label={\n                                <div style={{width: '100%'}}>\n                                    <div className='header-3'>{tab.label}</div>\n                                </div>\n                            } />\n                    )\n                })}\n            </Tabs>\n        );\n    }\n\n    renderMainContent(): JSX.Element {\n        return (\n            <Grid item xs={10}>\n                {this.state.client ? (\n                    <BasicInformationSection client={this.state.client} />\n                ) : (\n                    <Loading height='10rem'/>\n                )}\n                \n            </Grid>\n        );\n    }\n}","import * as React from 'react';\nimport { Grid, TableRow, TableCell } from '@material-ui/core';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\nimport { faSort, faCheck, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { API } from 'Pages/CustomerCarePage/API';\n\ninterface IProps {\n    clientId: string;\n}\n\ninterface IStates {\n    filterCode: string;\n    filterName: string;\n    filterLocation: string;\n\n    // facilitiesListUpdated: boolean;\n\n    groups: PartnerNetworkGroup[];\n}\n\ninterface PartnerNetworkGroup {\n    checked: boolean;\n    name: string;\n    label: string;\n}\n\nexport class PartnerNetworkSection extends React.Component<IProps, IStates> {\n    \n    dummyData = [\n        { code: '87854', name: 'St. Mary’s Hospital Calamba', location: 'CMC Ave, Real, Calamba, Laguna' },\n        { code: '40092', name: 'Evangelista Medical Specialty Hospital', location: 'Macaria Drive, San Pedro, Laguna' },\n        { code: '14659', name: 'Los Banos Doctors Hospital and Medical Center', location: 'Lopez Ave, Los Baños, Laguna' }\n    ];\n\n    groupChoices: PartnerNetworkGroup[] = [\n        { checked: false, name: 'Top 5 Hospitals', label: 'top_5_hospitals' },\n        { checked: false, name: 'Top 6 Hospitals', label: 'top_6_hospitals' },\n        { checked: false, name: 'Healthway Clinics', label: 'healthway_clinics' },\n        { checked: false, name: 'Medical City Network', label: 'medical_city_network' }\n    ]\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            filterCode: '',\n            filterName: '',\n            filterLocation: '',\n            // facilitiesListUpdated: false,\n            groups: []\n        }\n    }\n\n    componentDidMount() {\n        API.get(`clients/account/hmo-info/${this.props.clientId}`,\n            (response) => {\n                constructPartnerNetworkData(response.benefit_plan_tree);;\n            },\n            (error) => {\n                console.log(error);\n            });\n        // @ts-ignore\n        // const combineNodes = (parentNodes: any, childNodes: any) => {\n        //     const nodes = parentNodes.reduce ((result, parent) => {\n        //         parent.children.map ((child) => {\n        //         let foundChild = childNodes.find ((childNode) => child === childNode._id);\n            \n        //         if (foundChild) {\n        //             let child = Object.assign({}, foundChild);\n            \n        //             child['parent_name'] = parent.name;\n        //             child['parent_code'] = parent.code;\n        //             child['disabled'] = false;\n        //             result.push(child);\n        //         }\n        //         });\n            \n        //         return result;\n        //     }, new Array());\n            \n        //     return nodes;\n        // };\n\n        const constructPartnerNetworkData = (response: any[]) => {\n            const targetNodeId = response\n                .find(node => node.level == 4 && node.name === 'Network')\n                .children\n                    .find(child => response\n                        .find(node => node._id === child).custom_metadata.partner_network_list);\n\n            const pnGroups = response.filter(node => node.level == 4 && node.name === 'Network')[0].custom_metadata.groups;\n            const pnFacilities = response.find(node => node._id === targetNodeId).custom_metadata.partner_network_list;\n            \n            console.log(pnGroups);\n            console.log(pnFacilities);\n            \n            \n            /* Assign Groups */\n            this.setState({groups: this.groupChoices.map(i => i)});\n            this.state.groups.forEach(group => {\n                group.checked = pnGroups.find(pnGroup => group.label === pnGroup)\n            })\n            this.setState({groups: this.state.groups});\n        }\n    }\n\n    getFilteredFacilitiesData(): any {\n        const includes = (from: string, to: string) => {\n            return from.toLowerCase().includes(to.toLowerCase());\n        };\n\n        const { filterCode, filterLocation, filterName } = this.state;\n\n        return (\n            this.dummyData\n                .filter(facility => filterCode === '' || includes(facility.code, filterCode))\n                .filter(facility => filterName === '' || includes(facility.name, filterName))\n                .filter(facility => filterLocation === '' || includes(facility.location, filterLocation))\n        );\n    }\n\n    sortFacilities(attrName: string, isAsc: boolean): void {\n        this.dummyData.sort((a: any, b: any) => \n            (a[attrName].toString().toLowerCase() > b[attrName].toString().toLowerCase()) ? (isAsc ? 1 : -1) : (isAsc ? -1 : 1)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Check Partner Network</div>\n                <div className='sub-section'>\n                    <div className='header-2'>TYPE</div>\n                    <div className='small-text'>Open Door</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='header-2'>GROUP</div>\n                    <Grid className='sub-section' container spacing={2} style={{width: '50%'}}>\n                        {this.state.groups.map(group => {\n                            return (\n                                <Grid item xs={6}>\n                                    <span>\n                                        {group.checked ? (\n                                            <FontAwesomeIcon icon={faCheck} style={{color: '#3AB77D'}} />\n                                        ) : (\n                                            <FontAwesomeIcon icon={faTimes} style={{color: '#FD5451'}} />\n                                        )}\n                                    </span>\n                                    <span style={{paddingLeft: '1rem'}}>{group.name}</span>\n                                </Grid>\n                            );\n                        })}\n                    </Grid>\n                </div>\n                <div className='sub-section'>\n                    <Grid className='sub-section' container spacing={2}>\n                        <Grid item xs={2}>\n                            <TextButton label='Excluded Hospitals' onClick={() => {}} />\n                        </Grid>\n                        <Grid item xs={2}>\n                            <TextButton label='Included Hospitals' onClick={() => {}} />   \n                        </Grid>\n                    </Grid>\n                    <CustomTable\n                        rows={this.getFilteredFacilitiesData()}\n                        renderHeader={() => this.renderTableHeader()}\n                        renderRow={(rowData: any, index: number) => \n                            this.renderTableRow(rowData, index)} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n        \n        return (\n            <>\n            {this.renderHeaderColumn('code', 'Facility Code')}\n            {this.renderHeaderColumn('name', 'Name')}\n            {this.renderHeaderColumn('location', 'Location')}\n            </>\n        );\n    }\n\n    renderTableRow(facility: any, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                <TableCell>{facility.code}</TableCell>\n                <TableCell>{facility.name}</TableCell>\n                <TableCell>{facility.location}</TableCell>\n            </TableRow>\n        );\n    }\n\n    renderHeaderColumn(attrName: string, headerText: string): JSX.Element {\n        return (\n            <TableCell>\n                <span className='header-2'>{headerText}</span>\n                <div style={{float: 'right'}}>\n                    <IconButton \n                        icon={faSort} \n                        onClick={() => {\n                            this.sortFacilities(attrName, true);\n                            // this.setState({facilitiesListUpdated: true});\n                        }} />\n                </div>\n                <InputField\n                    value={this.state[attrName]}\n                    onChange={(value: string) => {\n                        this.setState(prevState => ({...prevState, [attrName]: value}));\n                    }} />\n            </TableCell>\n        );\n    }\n}","import * as React from 'react';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { TableRow, TableCell, Grid } from '@material-ui/core';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\nimport { faSort } from '@fortawesome/free-solid-svg-icons';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\n\ninterface IStates {\n    loaId: string;\n    approvalCode: string;\n    diagnosis: string;\n    procedure: string;\n    provider: string;\n    amount: string;\n    sessions: string;\n    dateAvailed: string;\n    type: string;\n    status: string;\n}\n\n\nexport class CheckUtilizationSection extends React.Component<{}, IStates> {\n\n    dummyData = [\n        {\n            loa: { id: '9999-99999', swipe: true },\n            approvalCode: '99999999',\n            diagnosis: { code: '999.99', name: 'ICD10 Name', desc: 'Description.' },\n            procedure: { code: '999.99', name: 'CPT Name', desc: 'Description.' },\n            provider: { name: 'General Santos Doctor’s Hospitals.' },\n            amount: 0,\n            sessions: 1,\n            dateAvailed: new Date(),\n            type: 'IBNR',\n            status: 'Approved'\n        }\n    ]\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            loaId: '',\n            approvalCode: '',\n            diagnosis: '',\n            procedure: '',\n            provider: '',\n            amount: '',\n            sessions: '',\n            dateAvailed: '',\n            type: '',\n            status: ''\n        };\n    }\n    \n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Check Utilization</div>\n                <Grid container className='sub-section' spacing={2}>\n                    <Grid item xs={3}>\n                        <div className='light-text'>ANNUAL BENEFIT LIMIT</div>\n                        <div className='header-1'>{'PHP 0.00'}</div>\n                    </Grid>\n                    <Grid item xs={9}>\n                        <Line \n                            items={[\n                                { value: 70, color: '#3FBB7F', label1: 'UTILIZED', label2: 'PHP 38,021.35' },\n                                { value: 5, color: '#1D236F', label1: 'IBNR', label2: 'PHP 11,978.65' },\n                                { value: 25, color: '#FCB53F', label1: 'AVAILABLE', label2: 'PHP 50,001' }\n                            ]}\n                            maxValue={100} />\n                    </Grid>\n                </Grid>\n                <div className='sub-section'>\n                    <CustomTable\n                        className='custom-table-scrollable'\n                        rows={this.dummyData}\n                        renderHeader={() => this.renderTableHeader()}\n                        renderRow={(rowData: any, index: number) => \n                            this.renderTableRow(rowData, index)} \n                        rowsPerPageOptions={[10, 25, 50]} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n        return (\n            <>\n            {this.renderHeaderColumn('loaId', 'LOA ID', '100px')}\n            {this.renderHeaderColumn('approvalCode', 'Approval Code', '120px')}\n            {this.renderHeaderColumn('diagnosis', 'Diagnosis', '200px')}\n            {this.renderHeaderColumn('procedure', 'Procedure', '200px')}\n            {this.renderHeaderColumn('provider', 'Provider', '150px')}\n            {this.renderHeaderColumn('amount', 'Amount', '100px')}\n            {this.renderHeaderColumn('sessions', 'Sessions', '75px')}\n            {this.renderHeaderColumn('dateAvailed', 'Date Availed', '150px')}\n            {this.renderHeaderColumn('type', 'Type', '75px')}\n            {this.renderHeaderColumn('status', 'Status', '75px')}\n            </>\n        );\n    }\n\n    renderTableRow(utilization: any, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                <TableCell>{utilization.loa.id}</TableCell>\n                <TableCell>{utilization.approvalCode}</TableCell>\n                <TableCell>{utilization.diagnosis.name}</TableCell>\n                <TableCell>{utilization.procedure.name}</TableCell>\n                <TableCell>{utilization.provider.name}</TableCell>\n                <TableCell>{utilization.amount}</TableCell>\n                <TableCell>{utilization.sessions}</TableCell>\n                <TableCell>{GlobalFunction.toCommonDateString(utilization.dateAvailed)}</TableCell>\n                <TableCell>{utilization.type}</TableCell>\n                <TableCell>{utilization.status}</TableCell>\n            </TableRow>\n        );\n    }\n\n\n    renderHeaderColumn(attrName: string, headerText: string, width: string): JSX.Element {\n        return (\n            <TableCell style={{minWidth: width, maxWidth: width}}>\n                <span className='header-2'>{headerText}</span>\n                <div style={{float: 'right'}}>\n                    <IconButton \n                        icon={faSort} \n                        onClick={() => {\n                            // this.sortTickets('urgency', true);\n                            // this.setState({ticketListUpdated: true});\n                        }} />\n                </div>\n                <InputField\n                    value={this.state[attrName]}\n                    onChange={(value: string) => {\n                        this.setState(prevState => ({...prevState, [attrName]: value}));\n                    }} />\n            </TableCell>\n        );\n    }\n}\n\n\ninterface LineProps {\n    items: {\n        value: number;\n        color: string;\n        label1: string;\n        label2: string;\n    }[]\n    maxValue: number;\n}\n\nexport class Line extends React.Component<LineProps> {\n\n    render(): JSX.Element {\n        return (\n            <div style={{width: '50%', height: 0}}>\n                {this.props.items.map(item => {\n                    return (\n                        <div \n                            style={{\n                                width: (item.value / this.props.maxValue * 100) + '%', \n                                height: '6px', \n                                display: 'inline-block',\n                                backgroundColor: item.color\n                            }} />\n                    );\n                })}\n                <div style={{padding: '0.5rem 0'}}>\n                {this.props.items.map(item => {\n                    return (\n                        <div \n                            style={{\n                                width: (1 / this.props.items.length * 100) + '%', \n                                height: '6px', \n                                display: 'inline-block'\n                            }}>\n                            <div>\n                                <div \n                                    style={{\n                                        width: '10px', \n                                        height: '10px', \n                                        backgroundColor: item.color,\n                                        display: 'inline-block',\n                                        marginRight: '1rem'\n                                    }}/>\n                                <div \n                                    className='light-text' \n                                    style={{\n                                        display: 'inline-block'\n                                    }}>\n                                    {item.label1}\n                                </div>\n                                <div \n                                    className='header-2' \n                                    style={{\n                                        color: item.color,\n                                    }}>\n                                    {item.label2}\n                                </div>\n                            </div>\n                         </div>\n                    );\n                })}\n                </div>\n            </div>\n        );\n    }\n}","\nimport * as React from 'react';\nimport Grid from '@material-ui/core/Grid';\n\nimport './../style.scss';\nimport { LeftPanelSection } from '../LeftPanelSection/LeftPanelSection';\nimport { API } from './../API';\nimport { ConfinementSection } from './Components/ConfinementSection';\nimport { AvailmentSection } from './Components/AvailmentSection';\nimport { TicketInfoSection } from './Components/TicketInfoSection';\nimport { TicketData, MemberData, DropdownChoice, ConfinementDetails, InquiryData, AvailmentDetails, ConsultationDetails, ClientData } from '../Models';\nimport { InquirySection } from './Components/InquirySection';\nimport { Payloads } from '../Payloads';\nimport { ConsultationSection } from './Components/ConsultationSection';\nimport { Processmaker } from '../Processmaker';\nimport { EmergencyRoomSection } from './Components/EmergencyRoomSection';\nimport { TicketFooter } from '../TicketFooter';\nimport { Loading } from '../Components/Loading';\nimport { Snackbar } from '@material-ui/core';\nimport { GlobalFunction } from '../GlobalFunction';\nimport { CustomTabs } from '../Components/CustomTab';\nimport { ClientProfileSection } from './Components/ClientProfileSection/ClientProfileSection';\nimport { PartnerNetworkSection } from '../ResolveTicketPage/Components/PartnerNetworkSection';\nimport { CheckUtilizationSection } from '../ResolveTicketPage/Components/CheckUtilizationSection';\n\ninterface IProps {\n    history: any;\n}\n\ninterface IStates {\n    tabSelected: number;\n    createTicketAttemp: boolean;\n    isIcd10CodesLoaded: boolean;\n    isSaving: boolean;\n    loadedResources: number;\n    snackbarMessage: string | null;\n    lastSave?: Date;\n\n    /* Can save to tmp */\n    client?: ClientData;\n    member?: MemberData;\n    ticket: TicketData;\n    availment: AvailmentDetails;\n    confinement: ConfinementDetails;\n    consultation: ConsultationDetails;\n    inquiries: InquiryData[];\n}\n\nexport class CreateTicketPage extends React.Component<IProps, IStates> {\n\n    static RESOURCES_TO_LOAD = 1;\n\n    tabList = [\n        { value: 1, label: 'Ticket Details' }, \n        { value: 2, label: 'Client Profile' }, \n        { value: 3, label: 'Partner Network' }, \n        { value: 4, label: 'Exclusion' }, \n        { value: 5, label: 'Utilization' }, \n        { value: 6, label: 'Tickets' },  \n        { value: 7, label: 'Contract' }\n    ];\n\n    icd10Codes: DropdownChoice[];\n    cptCodes: DropdownChoice[];\n    facilities: DropdownChoice[];\n    doctors: DropdownChoice[];\n    agents: DropdownChoice[];\n    \n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            tabSelected: 1,\n            createTicketAttemp: false,\n            isIcd10CodesLoaded: false,\n            isSaving: false,\n            snackbarMessage: null,\n            loadedResources: 0,\n\n            ticket: {\n                ticketChannel: 'Call',\n                transactionNo: '9999-9999',\n                ticketSource: '',\n                memberName: '',\n                clientName: '',\n                brokerName: '',\n                facility: { value: '', label: '' },\n                department: '',\n                callerName: '',\n                contactNo: '',\n                ticketType: '',\n                specificType: '',\n                urgency: 'High',\n                agent: { id: '', name: '' },\n                additionalNotes: '',\n                additionalFiles: [],\n                ticketNo: '',\n                pmCaseId: '',\n                status: 'Open',\n                createdBy: { \n                    id: localStorage['user_id'], \n                    name: `${localStorage['first_name']} ${localStorage['last_name']}` \n                },\n                dateCreated: new Date(),\n                dateUpdated: new Date(),\n                dateEscalated: null\n            },\n            availment: {\n                provider: { value: '', label: '' },\n                diagnoses: []\n            },\n            confinement: {\n                provider: { value: '', label: '' },\n                dateAdmitted: new Date(),\n                confinementKind: '',\n                roomType: '',\n                costPerDay: 0,\n                doctor: { value: '', label: '' },\n                initialDiagnosis: { value: '', label: '' },\n                amount: 0\n            },\n            consultation: {\n                provider: { value: '', label: '' },\n                diagnosis: { value: '', label: '' },\n                doctor: { value: '', label: '' },\n                notes: '',\n                assessmentRemarks: '',\n                assessmentType: 'Pending',\n                approvedAmount: 0\n            },\n            inquiries: []\n        };\n\n        this.facilities = [];\n        this.agents = [];\n        this.doctors = [];\n        this.cptCodes = [];\n        this.icd10Codes = [];\n    }\n\n    componentDidMount() {\n        API.get('facilities',\n            (response) => {\n                this.facilities = response.map(facility => {\n                    return { \n                        value: facility.facility_id,\n                        label: facility.name \n                    }\n                });\n            },\n            (error) => {\n                console.log(error);\n            });\n\n\n\n        const tempIcd10Codes = localStorage.getItem('icd10_codes');\n        if (!tempIcd10Codes) {\n            API.get('icd10-codes?filter[limit]=1000',\n                (response) => {\n                    this.icd10Codes = response.map(icd10Code => {\n                        return { \n                            value: icd10Code.full_code,\n                            label: icd10Code.abbreviated_description \n                        };\n                    });\n                    localStorage.setItem('icd10_codes', JSON.stringify(this.icd10Codes));\n                    this.setState({isIcd10CodesLoaded: true});\n                },\n                (error) => {\n                    console.log(error);\n                });\n        } else {\n            this.icd10Codes = JSON.parse(tempIcd10Codes);\n            console.log(\"Using the local copy of ICD10 Codes\");\n        }\n        \n\n\n        const tempCptCodes = localStorage.getItem('cpt_codes');\n        if (!tempCptCodes) {\n            API.get('cpts',\n                (response) => {\n                    this.cptCodes = response.map(cptCode => {\n                        return {\n                            value: cptCode.code.toString(),\n                            label: cptCode.label \n                        };\n                    });\n                    localStorage.setItem('cpt_codes', JSON.stringify(this.cptCodes));\n                }, \n                (error) => {\n                    console.log(error);\n                });\n        } else {\n            this.cptCodes = JSON.parse(tempCptCodes);\n            console.log(\"Using the local copy of CPT Codes\");\n        }\n        \n\n\n        API.get('doctors',\n            (response) => {\n                this.doctors = response.map(doctor => {\n                    return {\n                        value: doctor._id,\n                        label: ('Dr. ' + doctor.first_name +  ' ' + doctor.last_name),\n                        params: [doctor.type]\n                    };\n                });\n            }, \n            (error) => {\n                console.log(error);\n            });\n\n        API.get(`tmp?filter[where][and][0][user_id]=${localStorage['user_id']}&filter[where][and][1][module]=Customer%20Care`,\n            (response) => {\n                console.debug(response);\n                response = response.filter(item => item.process === 'Create Ticket');\n                if (response.length > 0) {\n                    this.setState({\n                        lastSave: new Date(response[0].timestamp),\n                        member: response[0].data.member,\n                        ticket: response[0].data.ticket,\n                        availment: response[0].data.availment,\n                        confinement: response[0].data.confinement,\n                        consultation: response[0].data.confinement,\n                        inquiries: response[0].data.inquiries\n                    });\n                }\n                this.setState({loadedResources: this.state.loadedResources + 1});\n            },\n            (error) => {\n                console.log(error);\n                this.setState({loadedResources: this.state.loadedResources + 1});\n            });\n    }\n\n    uploadFiles = (nextAction: Function) => {\n        let hasFiles = false;\n\n        const files = new FormData();\n        this.state.ticket.additionalFiles.forEach(file => {\n            if (!file['field']) {\n                files.append(`supported_documents`, file);\n                hasFiles = true;\n            }\n        });\n\n        this.setState({isSaving: true});\n\n        if (hasFiles) {\n            API.postFormData('tmp/upload?path=customer-care', files,\n                (uploadResponse) => {\n                    nextAction(uploadResponse);\n                },\n                (error) => {\n                    console.log(error);\n                    this.setState({\n                        isSaving: false,\n                        snackbarMessage: 'Failed to upload files.'\n                    });\n                });\n        } else {\n            nextAction([]);\n        }\n    }\n\n    submitTicket = () => {\n\n        this.setState({createTicketAttemp: true});\n        const ticket = this.state.ticket;\n        const confinement = this.state.confinement;\n        const availment = this.state.availment;\n        const consultation = this.state.consultation;\n        const inquiries = this.state.inquiries;\n        \n        if (!this.state.member && !this.state.client) return;\n\n        /* Confinement Details must have all contents */\n        if (ticket.ticketType === 'Availment' && ticket.specificType === 'Inpatient') {\n            if (confinement.provider.value === '' ||\n                confinement.confinementKind === '' ||\n                confinement.costPerDay === 0 ||\n                confinement.doctor.value === '' ||\n                confinement.initialDiagnosis.value === '' ||\n                confinement.roomType === '') {\n                return;\n            }\n        }\n\n        this.setState({isSaving: true});\n\n        this.uploadFiles((uploadResponse) => {\n            const payload = Payloads.getPostTicketPayload(\n                ticket, \n                \n                !uploadResponse.error && uploadResponse.length > 0 ? (\n                    this.state.ticket.additionalFiles\n                        .filter(file => file['field'])\n                        .concat(uploadResponse)\n                ) : (\n                    this.state.ticket.additionalFiles\n                ),\n                this.state.member,\n                this.state.client,\n                confinement, \n                availment, \n                inquiries, \n                consultation);\n            API.post('customer-care/tickets', JSON.stringify(payload),\n                (postTicketResponse) => { \n                    console.log(postTicketResponse);\n                    if (postTicketResponse['_id']) {\n                        console.log('Ticket No: '+postTicketResponse['id']);\n                        this.submitTicketProcessMaker(postTicketResponse['_id'], this.state.ticket);\n                    } else {\n                        this.setState({\n                            isSaving: false,\n                            snackbarMessage: 'Failed to create ticket.'\n                        });\n                    }  \n                },\n                (error) => {\n                    console.log(error);\n                    this.setState({\n                        isSaving: false,\n                        snackbarMessage: 'Failed to create ticket.'\n                    });\n                });\n        });\n    }\n\n    submitTicketProcessMaker = (ticketId: string, ticket: TicketData) => {\n        let is_availment = false;\n        if (ticket.ticketType === 'Availment') {\n            is_availment=true;\n        }\n        let trigger_id = \"3905447335db2a32daafd33048658514\"; //should refer to redux createtickettrigger_id!!!\n        let body = {\n            \"pro_uid\" : \"1538417025dae8dae9ff7a9016454302\", //should refer to redux createticketproject_id!!!\n            \"tas_uid\":\"6092309955dae8db0a85907021073537\",   //should refer to redux createticketstarttask_id!!!\n            \"ticket_no\": ticketId,\n            \"can_be_resolved_imm\": 0,\n            \"is_availment\":is_availment\n        };\n        console.log('Body:', body);\n\n        Processmaker.post('cases', body,\n            (casesResponse) => {\n                if (casesResponse['app_uid']) {\n                    processmakerExecuteTrigger(\n                        casesResponse['app_uid'], \n                        casesResponse['app_number'],\n                        trigger_id\n                    );\n                }\n            }, \n            (error) => {\n                console.log(error);\n                this.setState({\n                    isSaving: false,\n                    snackbarMessage: 'Failed to create ticket.'\n                });\n            }\n        );\n        \n        const processmakerExecuteTrigger = (appUID: string, appNo: string, triggerId: string) => {\n            Processmaker.put(`cases/${appUID}/execute-trigger/${triggerId}`, body,\n                (triggerResponse) => {\n                    console.log('Trigger Response: ', triggerResponse);\n                    processmakerVariable(appUID, appNo);\n                }, \n                (error) => {\n                    console.log(error);\n                    this.setState({\n                        isSaving: false,\n                        snackbarMessage: 'Failed to create ticket.'\n                    });\n                });\n        }\n\n        const processmakerVariable = (appUID: string, appNo: string) => {\n            Processmaker.put(`cases/${appUID}/variable`, body,\n                (variableResponse) => {\n                    console.log('Set Variable Response: ', variableResponse);\n                    patchCaseUID(appUID, appNo);\n                }, \n                (error) => {\n                    console.log(error);\n                    this.setState({\n                        isSaving: false,\n                        snackbarMessage: 'Failed to create ticket.'\n                    });\n                });\n        }\n\n        const patchCaseUID = (appUID: string, appNo: string) => {\n            API.patch(`customer-care/tickets/${ticketId}`, { pmaker_case_uid: appUID },\n                (patchTicketResponse) => {\n                    console.log('Patch Response: ', patchTicketResponse);\n                    redirectToNextPage(appUID, appNo);\n                },\n                (error) => {\n                    console.log(error);\n                    this.setState({\n                        isSaving: false,\n                        snackbarMessage: 'Failed to create ticket.'\n                    });\n                });\n        }\n\n        const redirectToNextPage = (appUID: string, appNo: string) => {\n            const ticketNo = GlobalFunction.generateTicketNumber(ticket.ticketType, ticket.specificType, appNo);\n            const url = \n                ticket.ticketType === 'Inquiry' || ticket.specificType === 'Inpatient' ? (\n                    `#/customer-care/update-ticket/${appUID}/${ticketNo}/${ticketId}`\n                ) : (\n                    `#/customer-care/resolve-ticket/${appUID}/${ticketNo}/${ticketId}`\n                );\n            this.props.history.push(url);\n            window.location.reload();\n            this.setState({isSaving: false});\n        }\n    }\n\n    saveForNow = () => {\n        this.uploadFiles((uploadResponse) => {\n            console.log(uploadResponse);\n            const payload = {\n                user_id: localStorage['user_id'],\n                module: 'Customer Care',\n                process: 'Create Ticket',\n                timestamp: new Date(),\n                data: {\n                    member: this.state.member,\n                    ticket: {\n                        ...this.state.ticket,\n                        additionalFiles: !uploadResponse.error && uploadResponse.length > 0 ? (\n                            this.state.ticket.additionalFiles\n                                .filter(file => file['field'])\n                                .concat(uploadResponse)\n                        ) : (\n                            this.state.ticket.additionalFiles\n                        )\n                    },\n                    availment: this.state.availment,\n                    confinement: this.state.confinement,\n                    consultation: this.state.confinement,\n                    inquiries: this.state.inquiries\n                }\n            };\n            console.log('Saving this: ', payload);\n            API.post('tmp', JSON.stringify(payload),\n                (response) => {\n                    console.log(response);\n                    if (response._id) {\n                        this.setState({\n                            isSaving: false,\n                            snackbarMessage: 'Progress saved.',\n                            lastSave: new Date()\n                        });\n                    } else {\n                        this.setState({\n                            isSaving: false,\n                            snackbarMessage: 'Failed to save progress.'\n                        });\n                    }\n                },\n                (error) => {\n                    console.log(error);\n                    this.setState({\n                        isSaving: false,\n                        snackbarMessage: 'Failed to save progress.'\n                    });\n                });\n        });\n    }\n\n    render(): JSX.Element {\n\n        return (\n            <>\n            <Grid container className='customer-care-main'>\n\n                {this.state.loadedResources !== CreateTicketPage.RESOURCES_TO_LOAD || this.state.isSaving ? (\n                    <div \n                        style={{\n                            backgroundColor: '#00000055', \n                            zIndex: 100, \n                            position: 'fixed', \n                            width: '100%', \n                            height: '100%'}}>\n                        <Loading height='15rem' size={100}/>\n                    </div>\n                    \n                ) : (null)}\n\n                <Snackbar\n\t\t\t        anchorOrigin={{vertical: 'top',horizontal: 'right'}}\n\t\t\t        open={this.state.snackbarMessage ? true : false}\n\t\t\t        autoHideDuration={6000}\n\t\t\t        onClose={() => {\n                        this.setState({snackbarMessage: null});\n                    }}\n                    message={this.state.snackbarMessage} />\n\n                <LeftPanelSection \n                    client={this.state.client}\n                    member={this.state.member}\n                    ticketStatus='Create'\n                    promptChooseMember={this.state.createTicketAttemp}\n                    onUpdateMemberStateChange={(member: MemberData) => {\n                        if (member) {\n                            const hasActiveContract = (\n                                member.contract && \n                                member.contract.status === 'Active'\n                            );\n                            if (!hasActiveContract && this.state.ticket.ticketType === 'Availment') {\n                                this.state.ticket.ticketType = '';\n                                this.setState({ticket: Object.assign({}, this.state.ticket)});\n                            }\n                        }\n\n                        this.setState({member: member});\n                    }}\n                    onUpdateClientStateChange={(client: ClientData) => {\n                        this.setState({client: client});\n                    }} />\n\n                {this.state.client ? (\n                    <>\n                    <CustomTabs \n                        tabList={this.tabList}\n                        selectedTab={this.state.tabSelected}\n                        setSelectedTab={(index: number) => {\n                            this.setState({tabSelected: Math.min(index, 2)});\n                        }} />\n                    <div className={`main-content${this.state.tabSelected === 1 ? '-flex' : ''}`}>\n                        {this.state.tabSelected === 1 ? (\n                            this.renderMainContent()\n                        ) : this.state.tabSelected === 2 ? (\n                            <ClientProfileSection clientId={this.state.client.id} />\n                        ) : this.state.tabSelected === 3 ? (\n                            <PartnerNetworkSection clientId={this.state.client.id}/>\n                        ) : this.state.tabSelected === 4 ? (\n                            <div className='header'>TAB 3</div>\n                        ) : this.state.tabSelected === 5 ? (\n                            <CheckUtilizationSection />\n                        ) : this.state.tabSelected === 6 ? (\n                            <div className='header'>TAB 5</div>\n                        ) : this.state.tabSelected === 7 ? (\n                            <div className='header'>TAB 6</div>\n                        ) : null}\n                    </div>\n                    </>\n                ) : (\n                    <div className='main-content-flex'>\n                        {this.renderMainContent()}\n                    </div>\n                )}  \n            </Grid>\n\n            <TicketFooter \n                lastSave={this.state.lastSave}\n                onSaveForNow={() => {\n                    this.saveForNow();\n                }} \n                onSubmitTicket={() => {\n                    this.submitTicket();\n                }} />\n            </>\n        );\n    }\n\n    renderMainContent(): JSX.Element {\n        return (\n            <>\n            <TicketInfoSection \n                member={this.state.member}\n                client={this.state.client}\n                ticket={this.state.ticket} \n                facilities={this.facilities}\n                agents={this.agents}\n                createTicketAttemp={this.state.createTicketAttemp}\n                refreshTicketState={() => {\n                    this.setState({ticket: Object.assign({}, this.state.ticket)});\n                }} />\n\n            {this.state.ticket.ticketType === 'Availment' ? (\n            \n                this.state.ticket.specificType === 'Outpatient Procedure' ? (  \n                    <AvailmentSection\n                        availment={this.state.availment}\n                        facilities={this.facilities}\n                        doctors={this.doctors}\n                        icd10Codes={this.icd10Codes}\n                        cptCodes={this.cptCodes}\n                        createTicketAttemp={this.state.createTicketAttemp}\n                        refreshAvailmentState={() => {\n                            this.setState({availment: Object.assign({}, this.state.availment)});\n                        }} />\n\n                ) : this.state.ticket.specificType === 'Inpatient' ? ( \n                    <ConfinementSection\n                        confinement={this.state.confinement}\n                        facilities={this.facilities}\n                        doctors={this.doctors}\n                        cptCodes={this.icd10Codes}\n                        createTicketAttemp={this.state.createTicketAttemp}\n                        refreshConfinementState={() => {\n                            this.setState({confinement: this.state.confinement});\n                        }} />\n                ) : this.state.ticket.specificType === 'Emergency Room' ? (\n                    <EmergencyRoomSection\n                        availment={this.state.availment}\n                        facilities={this.facilities}\n                        doctors={this.doctors}\n                        icd10Codes={this.icd10Codes}\n                        cptCodes={this.cptCodes}\n                        createTicketAttemp={this.state.createTicketAttemp}\n                        refreshAvailmentState={() => {\n                            this.setState({availment: this.state.availment});\n                        }} />\n                    \n                ) : this.state.ticket.specificType === 'Consultation' ? ( \n                    <ConsultationSection\n                        consultation={this.state.consultation}\n                        facilities={this.facilities}\n                        doctors={this.doctors}\n                        icd10Codes={this.icd10Codes}\n                        createTicketAttemp={this.state.createTicketAttemp}\n                        refreshConsultationState={() => {\n                            this.setState({consultation: this.state.consultation});\n                        }} />\n                ) : null\n\n            ) : this.state.ticket.ticketType === 'Inquiry' ? (\n                <InquirySection\n                    inquiries={this.state.inquiries}\n                    refreshInquiryState={() => {\n                        this.setState({inquiries: this.state.inquiries});\n                    }} />\n            ) : null}\n            </>\n        );\n    }\n}","\nimport * as React from 'react';\n\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { Grid, TableCell, TableRow } from '@material-ui/core';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { UpdateData, AccommodationData, DiagnosisData, PhysicianData, ProcedureData, ItemData } from '../UpdateTicketProps';\nimport { DropdownChoice } from 'Pages/CustomerCarePage/Models';\n\ninterface IProps {\n    ticketNo: string;\n    updates: UpdateData[];\n    accommodations: AccommodationData[];\n    diagnoses: DiagnosisData[];\n    physicians: PhysicianData[];\n    procedures: ProcedureData[];\n    items: ItemData[];\n\n    provider: DropdownChoice;\n    dateAdmitted: Date;\n    confinementKind: string;\n\n    coverage: DropdownChoice;\n    philhealthAmount: number;\n    finalBill: number;\n    dischargeDate: Date | null;\n    setTabSelected: (value: number) => void;\n}\n\nexport class SummarySection extends React.Component<IProps> {\n\n    constructor(props: IProps) {\n        super(props);\n    }\n\n    getTotalAccommodationCost = () => {\n        let totalCost = 0;\n        this.props.accommodations.map(accommodation => {\n            totalCost += accommodation.costPerDay * accommodation.days;\n        });\n        return totalCost;\n    }\n\n    getTotalPhysicianCost = () => {\n        let totalCost = 0;\n        this.props.physicians.map(physician => {\n            totalCost += physician.amount;\n        });\n        return totalCost;\n    }\n\n    getTotalProcedureCost = () => {\n        let totalCost = 0;\n        this.props.procedures.map(procedure => {\n            totalCost += procedure.amount;\n        });\n        return totalCost;\n    }\n\n    getTotalItemCost = () => {\n        let totalCost = 0;\n        this.props.items.map(item => {\n            totalCost += item.amount;\n        });\n        return totalCost;\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n                <div className='header-1'>Review Summary</div>\n                {this.renderSection('UPDATES', 'update', 2,\n                    <CustomTable\n                        className='custom-table'\n                        rows={this.props.updates}\n                        renderHeader={() => {\n                            return (\n                                <>\n                                <TableCell>Remarks</TableCell>\n                                <TableCell style={{width: '200px'}}>As of Date</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '200px'}}>Running Hospital Bill</TableCell>\n                                </>\n                            );\n                        }}\n                        renderRow={(update: UpdateData, index: number) => {\n                            const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                            return (\n                                <TableRow style={{backgroundColor: backgroundColor}}>\n                                    <TableCell>{update.remarks}</TableCell>\n                                    <TableCell>{GlobalFunction.toCommonDateString(update.date)}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(update.hospitalBill, true)} PHP`}</TableCell>\n                                </TableRow>\n                            );\n                        }} />\n                )}\n                \n                {this.renderSection('ROOM ACCOMMODATIONS', 'room', 3, \n                    <CustomTable\n                        className='custom-table'\n                        rows={this.props.accommodations}\n                        renderHeader={() => {\n                            return (\n                                <>\n                                <TableCell>Room Type</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '200px'}}>No. of Days</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '300px'}}>Cost Per Day</TableCell>\n                                </>\n                            );\n                        }}\n                        renderRow={(accommodation: AccommodationData, index: number) => {\n                            const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                            return (\n                                <TableRow style={{backgroundColor: backgroundColor}}>\n                                    <TableCell>{accommodation.roomType}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{accommodation.days}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(accommodation.costPerDay, true)} PHP`}</TableCell>\n                                </TableRow>\n                            );\n                        }} />,\n                        this.getTotalAccommodationCost()\n                )}\n\n                {this.renderSection('DIAGNOSES', 'diagnosis', 4, \n                    <CustomTable\n                        className='custom-table'\n                        rows={this.props.diagnoses}\n                        renderHeader={() => {\n                            return (\n                                <>\n                                <TableCell style={{width: '300px'}}>Diagnosis</TableCell>\n                                <TableCell>Remarks</TableCell>\n                                <TableCell style={{textAlign: 'center', width: '100px'}}>Type</TableCell>\n                                <TableCell style={{textAlign: 'center', width: '175px'}}>Primary Diagnosis?</TableCell>\n                                </>\n                            );\n                        }}\n                        renderRow={(diagnosis: DiagnosisData, index: number) => {\n                            const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                            return (\n                                <TableRow style={{backgroundColor: backgroundColor}}>\n                                    <TableCell>{`${diagnosis.diagnosis.value} - ${diagnosis.diagnosis.label}`}</TableCell>\n                                    <TableCell>{diagnosis.remarks}</TableCell>\n                                    <TableCell style={{textAlign: 'center'}}>{diagnosis.isFinal ? 'Final' : 'Initial'}</TableCell>\n                                    <TableCell style={{textAlign: 'center'}}>{diagnosis.isPrimary ? 'Yes' : 'No'}</TableCell>\n                                </TableRow>\n                            );\n                        }} />\n                )}\n                \n                {this.renderSection('PHYSICIANS', 'physicians', 5, \n                    <CustomTable\n                        className='custom-table'\n                        rows={this.props.physicians}\n                        renderHeader={() => {\n                            return (\n                                <>\n                                <TableCell style={{width: '250px'}}>Specialization - Doctor Name</TableCell>\n                                <TableCell style={{width: '100px'}}>Diagnosis</TableCell>\n                                <TableCell>Remarks</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '125px'}}>No. of Visits</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '200px'}}>Amount</TableCell>\n                                </>\n                            );\n                        }}\n                        renderRow={(physician: PhysicianData, index: number) => {\n                            const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                            return (\n                                <TableRow style={{backgroundColor: backgroundColor}}>\n                                    {physician.physician.params? (\n                                        <TableCell>\n                                            <div className='text'>{`${physician.physician.params[0]} - ${physician.physician.label}`}</div>\n                                            <div className='light-text'>{`${physician.physician.params[1]} Physician`}</div>\n                                        </TableCell>\n                                    ) : ''}\n                                    <TableCell>{physician.diagnosis.value}</TableCell>\n                                    <TableCell>{physician.remarks}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{physician.visits}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(physician.amount, true)} PHP`}</TableCell>\n                                </TableRow>\n                            );\n                        }} />,\n                        this.getTotalPhysicianCost()\n                )}\n                \n                {this.renderSection('PROCEDURES', 'procedures', 6,\n                    <CustomTable\n                        className='custom-table'\n                        rows={this.props.procedures}\n                        renderHeader={() => {\n                            return (\n                                <>\n                                <TableCell style={{width: '200px'}}>Procedure</TableCell>\n                                <TableCell style={{width: '100px'}}>Diagnosis</TableCell>\n                                <TableCell style={{width: '175px'}}>Doctor</TableCell>\n                                <TableCell style={{width: '150px'}}>Date</TableCell>\n                                <TableCell style={{minWidth: '100px'}}>Remarks</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '150px'}}>Amount</TableCell>\n                                </>\n                            );\n                        }}\n                        renderRow={(procedure: ProcedureData, index: number) => {\n                            const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                            return (\n                                <TableRow style={{backgroundColor: backgroundColor}}>\n                                    <TableCell>{`${procedure.procedure.value} - ${procedure.procedure.label}`}</TableCell>\n                                    <TableCell>{procedure.diagnosis.value}</TableCell>\n                                    <TableCell>{procedure.physician.label}</TableCell>\n                                    <TableCell>{GlobalFunction.toCommonDateString(procedure.date)}</TableCell>\n                                    <TableCell>{procedure.remarks}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(procedure.amount, true)} PHP`}</TableCell>\n                                </TableRow>\n                            );\n                        }} />,\n                        this.getTotalProcedureCost()\n                )}\n                \n                {this.renderSection('OTHER DETAILS', 'item', 8, \n                    <CustomTable \n                        className='custom-table'\n                        rows={this.props.items}\n                        renderHeader={() => {\n                            return (\n                                <>\n                                <TableCell>Item</TableCell>\n                                <TableCell style={{width: '250px'}}>Type</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '250px'}}>Amount</TableCell>\n                                </>\n                            );\n                        }}\n                        renderRow={(item: ItemData, index: number) => {\n                            const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                            return (\n                                <TableRow style={{backgroundColor: backgroundColor}}>\n                                    <TableCell>{item.name}</TableCell>\n                                    <TableCell>{item.type.label}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(item.amount, true)} PHP`}</TableCell>\n                                </TableRow>\n                            );\n                        }} />,\n                        this.getTotalItemCost()\n                )}\n                \n                <div className='sub-section'>\n                    <Grid container>\n                        <Grid item xs={4}>\n                            <div className='header-2'>PHILHEALTH</div>\n                            <div className='sub-section'>\n                                <div className='light-text'>COVERAGE</div>\n                                <div className='small-text'>{this.props.coverage.label}</div>\n                            </div>\n                            <div className='sub-section'>\n                                <div className='light-text'>AMOUNT</div>\n                                <div className='small-text'>{GlobalFunction.formatNumber(this.props.philhealthAmount, true) + \" PHP\"}</div>\n                            </div>\n                            <div className='sub-section'>\n                                <div className='light-text'>TICKET NUMBER</div>\n                                <div className='small-text'>{this.props.ticketNo}</div>\n                            </div>\n                        </Grid>\n                        <Grid item xs={4}>\n                            <div className='header-2'>CONFINEMENT</div>\n                            <div className='sub-section'>\n                                <div className='light-text'>PROVIDER</div>\n                                <div className='small-text'>{this.props.provider.value + ' - ' + this.props.provider.label}</div>\n                            </div>\n                            <div className='sub-section'>\n                                <div className='light-text'>DATE ADMITTED</div>\n                                <div className='small-text'>{GlobalFunction.toCommonDateString(this.props.dateAdmitted)}</div>\n                            </div>\n                            <div className='sub-section'>\n                                <div className='light-text'>KIND OF CONFINEMENT</div>\n                                <div className='small-text'>{this.props.confinementKind}</div>\n                            </div>\n                        </Grid>\n                        <Grid item xs={4}>\n                            <div className='header-2'>DISCHARGE DETAILS</div>\n                            <div className='sub-section'>\n                                <div className='light-text'>FINAL HOSPITAL BILL AMOUNT</div>\n                                <div className='small-text'>{GlobalFunction.formatNumber(this.props.finalBill, true) + ' PHP'}</div>\n                            </div>\n                            <div className='sub-section'>\n                                <div className='light-text'>DISCHARGE DATE</div>\n                                <div className='small-text'>\n                                    {this.props.dischargeDate ? (\n                                        GlobalFunction.toCommonDateString(this.props.dischargeDate)\n                                    ) : '---'}\n                                </div>\n                            </div>\n                        </Grid>\n                        <Grid item xs={4}>\n                            <TextButton \n                                label='Edit PhilHealth' \n                                onClick={() => {\n                                    window.scroll(0, -window.pageYOffset);\n                                    this.props.setTabSelected(7);\n                                }}/>\n                        </Grid>\n                        <Grid item xs={4}>\n                            <TextButton \n                                label='Edit Confinement Details' \n                                onClick={() => {\n                                    window.scroll(0, -window.pageYOffset);\n                                    this.props.setTabSelected(3);\n                                }}/>\n                        </Grid>\n                        <Grid item xs={4}>\n                            <TextButton\n                                label='Edit Discharge Details' \n                                onClick={() => {\n                                    window.scroll(0, -window.pageYOffset);\n                                    this.props.setTabSelected(7);\n                                }}/>\n                        </Grid>\n                    </Grid>\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderSection(headerName: string, miniText: string, tabIndex: number, table: JSX.Element, totalValue?: number): JSX.Element {\n        return (\n            <div className='sub-section'>\n                <div style={{float: 'right'}}>\n                    <TextButton \n                        label={`Add / Edit ${miniText}`} \n                        onClick={() => {\n                            window.scroll(0, -window.pageYOffset);\n                            this.props.setTabSelected(tabIndex);\n                        }}/>\n                </div>\n                <div className='header-2'>{headerName}</div>\n                {table}\n                {totalValue ? (\n                    <div className='sub-section'>\n                        <div style={{float: 'right'}}>\n                            <span className='small-text'>TOTAL AMOUNT</span>\n                            <span style={{marginLeft: '1rem'}} />\n                            <span className='header-2'>\n                                {GlobalFunction.formatNumber(totalValue, true) + ' PHP'}\n                            </span>\n                        </div>\n                </div>\n                ) : null}\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Table, TableBody, TableCell, TableHead, TableRow } from '@material-ui/core';\nimport './../../Components/component-style.scss';\nimport { faPen, faMinusCircle, faCheckCircle, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport { IconButton } from '../../Components/IconButton';\n\ninterface IProps {\n    className: string;\n    placeholder: string;\n    cols: string[];\n    rows: string[][] | any;\n    defaultRows?: number;\n\n    onSaveEditRow: (rowIndex: number, value: any) => void;\n    onDeleteRow: (rowIndex: number) => void; \n\n    /* \n     * Use this to stylize the column cells.\n     * rowIndex: the row index you want to style.\n     * colIndex: the column index you want to style.\n     * value: give you control to manipulate the value.\n     */\n    onFormat?: (rowIndex: number, colIndex: number, value: any) => JSX.Element;\n\n    /*\n     * Use this to stylize the column headers.\n     * colIndex: the column index you want to style.\n     * name: the header name at will appear.\n     */\n    onHeaderFormat?: (colIndex: number, name: string) => JSX.Element;\n\n    /* \n     * Use this when you want to stylize the column cell edit field\n     * colIndex: the column index you want to style.\n     * value: give you control to manipulate the value.\n     * onChange: a function called when user tried to type/input.\n     * - value: \n     */\n    editField: (colIndex: number, value: any, onChange: (value: any) => void) => JSX.Element;\n}\n\ninterface IStates {\n    rowToEdit: number;\n    data: any;\n}\n\nexport class CRUDTable extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            rowToEdit: -1,\n\n            data: {}\n        }\n    }\n\n    handleOnChange = (attrName: string) => (value: any) => {\n        this.setState(prevState => ({\n            data: {\n                ...prevState.data,\n                [attrName]: value\n            }\n        }));\n    }\n\n    renderCell(row: number, column: number, attrName: string, value: any): JSX.Element {\n        return (\n            <TableCell key={column}>\n                {this.state.rowToEdit === row ? (\n                    this.props.editField ? this.props.editField(column, this.state.data[attrName], this.handleOnChange(attrName)) : value  \n                ) : (\n                    this.props.onFormat ? this.props.onFormat(row, column, value) : value\n                )}\n            </TableCell>\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <>\n            <div className='header-2'>{this.props.placeholder}</div>\n            <Table className={(this.props.className ? this.props.className : '') + ' table'}>\n                <TableHead>\n                    <TableRow>\n                        {this.props.cols.map((colName, index) => {\n                            return (\n                                this.props.onHeaderFormat ? (\n                                    this.props.onHeaderFormat(index, colName)\n                                ) : (\n                                    <TableCell key={index}>{colName}</TableCell>\n                                )\n                            );\n                        })}\n                        <TableCell className='last-column'>\n                        </TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {this.props.rows.map((row, index1) => {\n                        const backgroundColor = (index1 % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                        return (\n                            <TableRow style={{backgroundColor: backgroundColor}} key={index1}>\n                                {Object.keys(row).map((attrName, index2) => {\n                                    return (this.renderCell(index1, index2, attrName, row[attrName]));\n                                })}\n                                <TableCell className='last-column'>\n                                    {this.state.rowToEdit !== index1 ? (\n                                        <>\n                                        <div style={{display: 'inline-block', paddingRight: '0.5rem'}}>\n                                            <IconButton icon={faPen} onClick={() => {\n                                                this.setState({rowToEdit: index1});\n                                                this.setState({data: row});\n                                            }} />\n                                        </div>\n                                        <div style={{display: 'inline-block'}}>\n                                            <IconButton icon={faMinusCircle} onClick={() => {\n                                                this.props.onDeleteRow(index1)\n                                            }} />\n                                        </div>\n                                        </>\n                                    ) : ( \n                                        <>\n                                        <div style={{display: 'inline-block', paddingRight: '0.5rem'}}>\n                                            <IconButton icon={faCheckCircle} onClick={() => {\n                                                this.props.onSaveEditRow(index1, this.state.data);\n                                                this.setState({rowToEdit: -1});\n                                            }} />\n                                        </div>\n                                        <div style={{display: 'inline-block'}}>\n                                            <IconButton icon={faTimesCircle} onClick={() => {\n                                                this.setState({rowToEdit: -1});\n                                            }} />\n                                        </div>\n                                        </>\n                                    )}\n                                </TableCell>\n                            </TableRow>\n                        );\n                    })}\n                </TableBody>\n            </Table>\n            </>\n        );\n    }\n}","import * as React from 'react';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { Grid, TableCell } from '@material-ui/core';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\n\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { DatePicker } from 'Pages/CustomerCarePage/Components/DatePicker';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { DetailedNumberField } from 'Pages/CustomerCarePage/Components/DetailedNumberField';\nimport { UpdateData } from '../UpdateTicketProps';\n\nimport { CRUDTable } from './CRUDTable';\nimport { CustomCheckbox } from 'Pages/CustomerCarePage/Components/CustomCheckbox';\nimport { ConfinementDetails } from '../UpdateTicketPage';\n\ninterface IProps {\n    confinement: ConfinementDetails;\n    updates: UpdateData[];\n    state: UpdateData;\n    refreshUpdatesState: () => void;\n}\n\nexport class UpdateSection extends React.Component<IProps> {\n\n    constructor(props: IProps) {\n        super(props);\n    }\n\n    onFormatTableHeader = (colIndex: number, value: any) => {\n        return (\n            colIndex === 2 ? (\n                <TableCell style={{textAlign: 'right', minWidth: '200px'}}>{value}</TableCell>\n            ) : (\n                <TableCell style={{minWidth: '150px'}}>{value}</TableCell>\n            )\n        );\n    }\n\n    onFormatCRUDTable = (colIndex: number, value: any) => {\n        return (\n            colIndex === 1 ? (\n                <div>{GlobalFunction.toCommonDateString(value)}</div>\n            ) : colIndex === 2 ? (\n                <div style={{textAlign: 'right'}}>\n                    {GlobalFunction.formatNumber(value, true) + ' PHP'}\n                </div>\n            ) : (value)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Add Update</div>\n                <div className='sub-section'>\n                    <Grid container spacing={2}>\n                        <Grid item xs={6}>\n                            <InputField \n                                placeholder='Remarks'\n                                value={this.props.state.remarks}\n                                charLimit={100}\n                                onChange={(value: string) => {\n                                    this.props.state.remarks = value;\n                                    this.props.refreshUpdatesState();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <DatePicker \n                                placeholder='As of Date'\n                                value={this.props.state.date}\n                                onChange={(value: Date) => {\n                                    this.props.state.date = value;\n                                    this.props.refreshUpdatesState();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <DetailedNumberField \n                                placeholder='Running Hospital Bill'\n                                detail='PHP'\n                                isFloat={true}\n                                value={this.props.state.hospitalBill}\n                                onChange={(value: number) => {\n                                    this.props.state.hospitalBill = value;\n                                    this.props.refreshUpdatesState();\n                                }}/>\n                        </Grid>\n                    </Grid>\n                    <div style={{paddingTop: '5px'}} />\n                    <TextButton \n                        label='Add update' \n                        icon={faPlus}\n                        onClick={() => {\n                            var state = this.props.state;\n                            const tempData = {\n                                remarks: state.remarks,\n                                date: state.date,\n                                hospitalBill: state.hospitalBill\n                            }\n                            this.props.updates.unshift(tempData);\n                            this.props.state.remarks = '';\n                            this.props.state.date = new Date();\n                            this.props.state.hospitalBill = 0;\n                            this.props.refreshUpdatesState();\n                        }}/>\n                </div>\n                \n                <div className='sub-section'>\n                    <CRUDTable \n                        className='custom-table'\n                        placeholder='UPDATES'\n                        \n                        cols={['Remarks', 'As of Date', 'Running Hospital Bill']}\n                        rows={this.props.updates} \n                        onSaveEditRow={(index: number, data: any) => {\n                            this.props.updates[index] = data;\n                            this.props.refreshUpdatesState();\n                        }}\n                        onDeleteRow={(index: number) => {\n                            this.props.updates.splice(index, 1);\n                            this.props.refreshUpdatesState();\n                        }}\n                        onHeaderFormat={(colIndex: number, colName: string) => {\n                            return this.onFormatTableHeader(colIndex, colName);\n                        }} \n                        onFormat={(_rowIndex: number, colIndex: number, value: any) => {\n                            return this.onFormatCRUDTable(colIndex, value);\n                        }} \n                        editField={(colIndex: number, currentVal: any, onChange: any) => {\n                            if (colIndex === 0) {\n                                return (\n                                    <InputField\n                                        value={currentVal}\n                                        onChange={(value: string) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 1) {\n                                return (\n                                    <DatePicker\n                                        value={currentVal}\n                                        onChange={(value: Date) => onChange(value)}/>\n                                );\n                            } else {\n                                return (\n                                    <DetailedNumberField\n                                        detail='PHP'\n                                        isFloat={true}\n                                        value={currentVal}\n                                        onChange={(value: number) => onChange(value)}/>\n                                );\n                            }\n                        }} />\n                </div>\n                <div className='sub-section'>\n                    <div className='header-2'>OTHER DETAILS</div>                    \n                    <CustomCheckbox \n                        label='Gift Given?'\n                        value={this.props.confinement.giftGiven}\n                        onChange={(value: boolean) => {\n                            this.props.confinement.giftGiven = value;\n                            this.props.refreshUpdatesState();\n                        }} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { Grid, TableCell } from '@material-ui/core';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\n\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { DetailedDropdown } from 'Pages/CustomerCarePage/Components/DetailedDropdown';\nimport { NumberField } from 'Pages/CustomerCarePage/Components/NumberField';\nimport { DetailedNumberField } from 'Pages/CustomerCarePage/Components/DetailedNumberField';\nimport { CRUDTable } from 'Pages/CustomerCarePage/UpdateTicketPage/Components/CRUDTable';\nimport { DatePicker } from 'Pages/CustomerCarePage/Components/DatePicker';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { DropdownChoice } from 'Pages/CustomerCarePage/Models';\nimport { AccommodationData } from '../UpdateTicketProps';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\n\ninterface IProps {\n    accommodations: AccommodationData[];\n    state: AccommodationData;\n    facilitiesList: DropdownChoice[];\n    provider: DropdownChoice;\n    dateAdmitted: Date;\n    confinementKind: string;\n    refreshAccommodationsState: () => void;\n}\n\nexport class AccommodationsSection extends React.Component<IProps> {\n\n    confinementTypes: DropdownChoice[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.confinementTypes = [\n            { value: '1', label: 'Elective / Scheduled' },\n            { value: '2', label: 'ER leading to confinement' }\n        ];\n    }\n\n    onFormatTableHeader = (colIndex: number, value: any) => {\n        return (\n            colIndex === 1 || colIndex === 2 ? (\n                <TableCell style={{textAlign: 'right', minWidth: '200px'}}>{value}</TableCell>\n            ) : (\n                <TableCell style={{minWidth: '150px'}}>{value}</TableCell>\n            )\n        );\n    }\n\n    onFormatCRUDTable = (colIndex: number, value: any) => {\n        const textAlign = (colIndex !== 0 ? 'right' : 'left');\n        return (\n            <div style={{textAlign: textAlign}}>\n                {colIndex === 2 ? \n                    GlobalFunction.formatNumber(value, true) + ' PHP' : \n                    value}\n            </div>\n        );\n    }\n\n    getTotalCost = () => {\n        let totalCost = 0;\n        this.props.accommodations.map(accommodation => {\n            totalCost += accommodation.costPerDay * accommodation.days;\n        });\n\n        return totalCost;\n    }\n\n    renderConfinementDetails(): JSX.Element {\n        return (\n            <div className='sub-section'>\n                <div className='header-2'>CONFINEMENT DETAILS</div>\n                <Grid container spacing={2}>\n                    <Grid item xs={6}>\n                        <DetailedDropdown \n                            placeholder='Provider'\n                            value={this.props.provider}\n                            choices={this.props.facilitiesList}\n                            disabled={true}\n                            onChange={(_value: DropdownChoice) => null}/>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <DatePicker \n                            placeholder='Date Admitted'\n                            value={this.props.dateAdmitted}\n                            disabled={true}\n                            onChange={(_value: Date) => null}/>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <Dropdown \n                            placeholder='Kind of Confinement'\n                            value={{ value: '', label: this.props.confinementKind }}\n                            choices={this.confinementTypes}\n                            disabled={true}\n                            onChange={(_value: DropdownChoice) => null}/>\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n\n    renderAddRoomAccommodation(): JSX.Element {\n        return (\n            <div className='sub-section'>\n                <Grid container spacing={2}>\n                    <Grid item xs={6}>\n                        <InputField \n                            placeholder='Room Type'\n                            value={this.props.state.roomType}\n                            onChange={(value: string) => {\n                                this.props.state.roomType = value;\n                                this.props.refreshAccommodationsState();\n                            }}/>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <NumberField \n                            placeholder='No. of Days'\n                            value={this.props.state.days}\n                            error={this.props.state.days < 1 || isNaN(this.props.state.days)}\n                            onChange={(value: number) => {\n                                this.props.state.days = value;\n                                this.props.refreshAccommodationsState();\n                            }}/>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <DetailedNumberField \n                            placeholder='Cost Per Day'\n                            detail='PHP'\n                            isFloat={true}\n                            value={this.props.state.costPerDay}\n                            onChange={(value: number) => {\n                                this.props.state.costPerDay = value;\n                                this.props.refreshAccommodationsState();\n                            }}/>\n                    </Grid>\n                </Grid>\n                <div style={{paddingTop: '5px'}} />\n                {this.props.state.days > 0 ? (\n                    <TextButton \n                        label='Add room' \n                        icon={faPlus}\n                        onClick={() => {\n                            var state = this.props.state;\n                            const tempData = {\n                                roomType: state.roomType,\n                                days: state.days,\n                                costPerDay: state.costPerDay\n                            }\n                            this.props.accommodations.unshift(tempData);\n                            this.props.state.roomType = '';\n                            this.props.state.days = 0;\n                            this.props.state.costPerDay = 0;\n                            this.props.refreshAccommodationsState();\n                        }}/>\n                ) : null}\n            </div>\n        );\n    }\n\n    render(): JSX.Element {\n\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Add Room Accommodation</div>\n                {this.renderAddRoomAccommodation()}\n                <div className='sub-section' />\n                {this.renderConfinementDetails()}\n                <div className='sub-section'>\n                    <CRUDTable \n                        className='custom-table'\n                        placeholder='ROOM ACCOMMODATIONS'\n                        cols={['Room Type', 'No. of Days', 'Cost Per Day']} \n                        rows={this.props.accommodations}\n                        onSaveEditRow={(index: number, data: any) => {\n                            this.props.accommodations[index] = data;\n                            this.props.refreshAccommodationsState();\n                        }}\n                        onDeleteRow={(index: number) => {\n                            this.props.accommodations.splice(index, 1);\n                            this.props.refreshAccommodationsState();\n                        }}\n                        onHeaderFormat={(colIndex: number, colName: string) => {\n                            return this.onFormatTableHeader(colIndex, colName);\n                        }} \n                        onFormat={(_rowIndex: number, colIndex: number, value: any) => {\n                            return this.onFormatCRUDTable(colIndex, value);\n                        }}\n                        editField={(colIndex: number, currentVal: any, onChange: any) => {\n                            if (colIndex === 0) {\n                                return (\n                                    <InputField\n                                        value={currentVal}\n                                        onChange={(value: string) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 1) {\n                                return (\n                                    <NumberField\n                                        value={currentVal}\n                                        onChange={(value: number) => onChange(value < 1 ? 1 : value)}/>\n                                );\n                            } else {\n                                return (\n                                    <DetailedNumberField\n                                        detail='PHP'\n                                        isFloat={true}\n                                        value={currentVal}\n                                        onChange={(value: number) => onChange(value)}/>\n                                );\n                            }\n                        }} />\n                    <div className='sub-section'>\n                        <div style={{float: 'right'}}>\n                            <span className='small-text'>TOTAL AMOUNT</span>\n                            <span style={{marginLeft: '1rem'}} />\n                            <span className='header-2'>{GlobalFunction.formatNumber(this.getTotalCost(), true) + ' PHP'}</span>\n                        </div>\n                    </div>\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\nimport { Radio } from '@material-ui/core';\n\ninterface IProps {\n    label?: string;\n    checkedCondition: boolean;\n    disabled?: boolean;\n    onChange: () => void;\n}\n\nexport class CustomRadio extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        return (\n            <div className='check-box-area'>\n                <Radio\n                    disabled={this.props.disabled}\n                    className='check-box'\n                    checked={this.props.checkedCondition}\n                    onChange={(_event: React.ChangeEvent<HTMLInputElement>) => {\n                        this.props.onChange();\n                    }} />\n                {this.props.label ? (\n                    <span className='text' style={{paddingLeft: '10px'}}>{this.props.label}</span>\n                ) : null}\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { Grid, TableCell } from '@material-ui/core';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\n\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { DetailedDropdown } from 'Pages/CustomerCarePage/Components/DetailedDropdown';\nimport { CRUDTable } from 'Pages/CustomerCarePage/UpdateTicketPage/Components/CRUDTable';\nimport { DropdownChoice } from 'Pages/CustomerCarePage/Models';\nimport { CustomCheckbox } from 'Pages/CustomerCarePage/Components/CustomCheckbox';\nimport { DiagnosisData, PhysicianData, ProcedureData } from '../UpdateTicketProps';\nimport { CustomRadio } from 'Pages/CustomerCarePage/Components/CustomRadio';\n\ninterface IProps {\n    diagnoses: DiagnosisData[];\n    state: DiagnosisData;\n    physicians: PhysicianData[];\n    procedures: ProcedureData[];\n    diagnosesList: DropdownChoice[];\n    primaryDiagnosisIndex: number;\n    refreshDiagnosisStateChange: () => void;\n    setPrimaryDiagnosisIndex: (index: number) => void;\n}\n\nexport class DiagnosesSection extends React.Component<IProps> {\n\n    getFilteredICD10Codes(): DropdownChoice[] {\n        let filteredIcd10: DropdownChoice[] = [];\n        for (var i = 0; i < this.props.diagnosesList.length; i++) {\n            let isSame = false;\n            for (var j = 0; j < this.props.diagnoses.length; j++) {\n                isSame = (\n                    this.props.diagnoses[j].diagnosis.value === \n                    this.props.diagnosesList[i].value ? true : isSame);\n            }\n            if (!isSame) {\n                filteredIcd10 = filteredIcd10.concat(this.props.diagnosesList[i]);\n            }\n        }\n        return filteredIcd10;\n    }\n\n    onFormatTableHeader = (colIndex: number, value: any) => {\n        return (\n            colIndex === 0 || colIndex === 1 ? (\n                <TableCell style={{minWidth: '200px', maxWidth: '200px'}}>{value}</TableCell>\n            ) : colIndex === 3 ? (\n                <TableCell style={{minWidth: '200px', maxWidth: '200px', textAlign: 'center'}}>{value}</TableCell>\n            ) : (\n                <TableCell style={{minWidth: '100px', maxWidth: '100px'}}>{value}</TableCell>\n            )\n        );\n    }\n\n    onFormatCRUDTable = (rowIndex: number, colIndex: number, value: any) => {\n        return (\n            colIndex === 0 ? (\n                <div style={{minWidth: '200px', maxWidth: '200px'}}>\n                    {value.value + \" - \" + value.label}\n                </div>\n            ) : colIndex === 2 ? (\n            <div>{value ? 'Final' : 'Initial'}</div>\n            ) : colIndex === 3 ? (\n                <div style={{textAlign: 'center'}}>\n                    <CustomRadio\n                        disabled={!this.props.diagnoses[rowIndex].isFinal}\n                        checkedCondition={this.props.primaryDiagnosisIndex === rowIndex}\n                        onChange={() => {\n                            this.props.setPrimaryDiagnosisIndex(rowIndex);\n                        }} />\n                </div>\n            ) : (value)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Add Diagnosis</div>\n                <div className='sub-section'>\n                    <Grid container spacing={2}>\n                        <Grid item xs={6}>\n                            <DetailedDropdown \n                                placeholder='Diagnosis'\n                                value={this.props.state.diagnosis}\n                                choices={this.getFilteredICD10Codes()}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.state.diagnosis = value;\n                                    this.props.refreshDiagnosisStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <InputField \n                                placeholder='Remarks'\n                                value={this.props.state.remarks}\n                                charLimit={100}\n                                onChange={(value: string) => {\n                                    this.props.state.remarks = value;\n                                    this.props.refreshDiagnosisStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <CustomCheckbox \n                                label='Final Diagnosis?'\n                                value={this.props.state.isFinal}\n                                onChange={(value: boolean) => {\n                                    this.props.state.isFinal = value;\n                                    this.props.refreshDiagnosisStateChange();\n                                }}/>\n                        </Grid>\n                        \n                    </Grid>\n                    <div style={{paddingTop: '5px'}} />\n                        <TextButton \n                            label='Add diagnosis' \n                            icon={faPlus}\n                            onClick={() => {\n                                var data = this.props.state;\n                                const tempData = {\n                                    diagnosis: data.diagnosis,\n                                    remarks: data.remarks,\n                                    isFinal: data.isFinal,\n                                    isPrimary: true\n                                }\n                                this.props.diagnoses.unshift(tempData);\n                                this.props.state.diagnosis = { value: '', label: '' };\n                                this.props.state.remarks = '';\n                                this.props.state.isFinal = false;\n                                this.props.refreshDiagnosisStateChange();\n                                this.props.setPrimaryDiagnosisIndex(this.props.primaryDiagnosisIndex + 1);\n                            }}/>\n                </div>\n                <div className='sub-section'>\n                    <CRUDTable \n                        className='custom-table'\n                        placeholder='DIAGNOSES'\n                        \n                        cols={['Diagnosis', 'Remarks', 'Type', 'Primary Diagnosis?']} \n                        rows={this.props.diagnoses}\n                        onSaveEditRow={(index: number, data: any) => {\n                            this.props.diagnoses[index] = data;\n                            this.props.refreshDiagnosisStateChange();\n                        }}\n                        onDeleteRow={(index: number) => {\n                            this.props.physicians.filter(physician => \n                                physician.diagnosis.label !== \n                                this.props.diagnoses[index].diagnosis.label);\n                            this.props.diagnoses.splice(index, 1);\n                            this.props.refreshDiagnosisStateChange();\n                            this.props.setPrimaryDiagnosisIndex(\n                                this.props.primaryDiagnosisIndex != index ?\n                                this.props.primaryDiagnosisIndex - 1 : -1);\n                        }}\n                        onHeaderFormat={(colIndex: number, colName: string) => {\n                            return this.onFormatTableHeader(colIndex, colName);\n                        }} \n                        onFormat={(rowIndex: number, colIndex: number, value: any) => {\n                            return this.onFormatCRUDTable(rowIndex, colIndex, value);\n                        }}\n                        editField={(colIndex: number, currentVal: any, onChange: any) => {\n                            if (colIndex === 0) {\n                                return (\n                                    <DetailedDropdown\n                                        choices={this.getFilteredICD10Codes()}\n                                        value={currentVal}\n                                        onChange={(value: DropdownChoice) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 1) {\n                                return (\n                                    <InputField\n                                        value={currentVal}\n                                        onChange={(value: string) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 2) {\n                                return (\n                                    <CustomCheckbox \n                                        label='Is Final?'\n                                        value={currentVal}\n                                        onChange={(value: boolean) => onChange(value)}/>\n                                );\n                            } else {\n                                return (\n                                    <div></div>\n                                );\n                            }\n                        }} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Grid, Radio, TableCell } from '@material-ui/core';\nimport { PhysicianData, DiagnosisData } from '../UpdateTicketProps';\nimport { DetailedDropdown } from 'Pages/CustomerCarePage/Components/DetailedDropdown';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { NumberField } from 'Pages/CustomerCarePage/Components/NumberField';\nimport { DetailedNumberField } from 'Pages/CustomerCarePage/Components/DetailedNumberField';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { CRUDTable } from 'Pages/CustomerCarePage/UpdateTicketPage/Components/CRUDTable';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { DropdownChoice } from 'Pages/CustomerCarePage/Models';\n\ninterface IProps {\n    physicians: PhysicianData[];\n    state: PhysicianData;\n    physiciansList: DropdownChoice[];\n    diagnosesList: DiagnosisData[];\n    refreshPhysiciansStateChange: () => void;\n}\n\n// interface IStates {\n//     physician: DropdownChoice;\n//     diagnosis: DropdownChoice;\n//     type: string;\n//     remarks: string;\n//     visits: number;\n//     amount: number;\n// }\n\nexport class PhysiciansSection extends React.Component<IProps> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        // this.state = {\n        //     physician: { value: '', label: '' },\n        //     diagnosis: { value: '', label: '' },\n        //     type: '',\n        //     remarks: '',\n        //     visits: 0,\n        //     amount: 0\n        // }\n    }\n\n    onFormatTableHeader = (colIndex: number, value: any) => {\n        return (\n            colIndex === 0 ? (\n                <TableCell style={{minWidth: '250px'}}>{value}</TableCell>\n            ) : colIndex === 1 ? (\n                <TableCell style={{minWidth: '100px'}}>{value}</TableCell>\n            ) : colIndex === 3 || colIndex === 4 ? (\n                <TableCell style={{minWidth: '150px', textAlign: 'right'}}>{value}</TableCell>\n            ) : (\n                <TableCell style={{minWidth: '150px'}}>{value}</TableCell>\n            )\n        );\n    }\n\n    onFormatCRUDTable = (colIndex: number, value: any) => {\n        return (\n            colIndex === 0 ? (\n                <div>\n                    <div>{value.params[0] + ' - ' + value.label}</div>\n                    <div className='light-text'>{value.params[1] + ' Physician'}</div>\n                </div>\n            ) : colIndex === 1 ? (\n                <div>{value.value}</div>\n            ) : colIndex === 3 || colIndex === 4 ? (\n                <div style={{textAlign: 'right'}}>\n                    {colIndex === 4 ? GlobalFunction.formatNumber(value, true) + ' PHP' : value}\n                </div>\n            ) : (value)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Add Physician</div>\n                <div className='sub-section'>\n                    <Grid container spacing={2}>\n                        <Grid item xs={6}>\n                            <DetailedDropdown \n                                placeholder='Doctor'\n                                detail={this.props.state.physician.params ? this.props.state.physician.params[0] : ''}\n                                value={this.props.state.physician}\n                                choices={this.props.physiciansList}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.state.physician = value;\n                                    this.props.refreshPhysiciansStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <DetailedDropdown \n                                placeholder='Diagnosis'\n                                value={this.props.state.diagnosis}\n                                choices={this.props.diagnosesList.map(value => {\n                                    return value.diagnosis; \n                                })}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.state.diagnosis = value;\n                                    this.props.refreshPhysiciansStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <InputField \n                                placeholder='Remarks'\n                                value={this.props.state.remarks}\n                                charLimit={100}\n                                onChange={(value: string) => {\n                                    this.props.state.remarks = value;\n                                    this.props.refreshPhysiciansStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={1}>\n                            <NumberField\n                                placeholder='Visits'\n                                value={this.props.state.visits}\n                                onChange={(value: number) => {\n                                    this.props.state.visits = value;\n                                    this.props.refreshPhysiciansStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={2}>\n                            <DetailedNumberField\n                                placeholder='Amount'\n                                detail='PHP'\n                                isFloat={true}\n                                value={this.props.state.amount}\n                                onChange={(value: number) => {\n                                    this.props.state.amount = value;\n                                    this.props.refreshPhysiciansStateChange();\n                                }}/>\n                        </Grid>\n                        {this.props.state.physician.params ? (\n                            <Grid item xs={3}>\n                                <div>\n                                <Grid container style={{paddingTop: '1rem'}}>\n                                    <Grid item xs={6}>\n                                        <Radio \n                                            className='check-box'\n                                            style={{height: '100%', width: 0}}\n                                            checked={this.props.state.physician.params[1] === 'Admitting'}\n                                            value={'Admitting'}\n                                            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                                                if (this.props.state.physician.params) {\n                                                    this.props.state.physician.params[1] = event.target.value;\n                                                }\n                                                this.props.refreshPhysiciansStateChange();\n                                            }} /> Admitting\n                                    </Grid>\n                                    <Grid item xs={6}>\n                                        <Radio \n                                            className='check-box'\n                                            style={{height: '100%', width: 0}}\n                                            checked={this.props.state.physician.params[1] === 'Attending'}\n                                            value={'Attending'}\n                                            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                                                if (this.props.state.physician.params) {\n                                                    this.props.state.physician.params[1] = event.target.value;\n                                                }\n                                                this.props.refreshPhysiciansStateChange();\n                                            }} /> Attending\n                                    </Grid>\n                                </Grid>\n                                </div>\n                            </Grid>\n                        ) : null}\n                    </Grid>\n                    <div style={{paddingTop: '5px'}} />\n                    <TextButton \n                        label='Add physician' \n                        icon={faPlus}\n                        onClick={() => {\n                            var data = this.props.state;\n                            const tempData = {\n                                physician: {\n                                    value: data.physician.value,\n                                    label: data.physician.label,\n                                    params: data.physician.params ? data.physician.params : undefined\n                                },\n                                diagnosis: data.diagnosis,\n                                remarks: data.remarks,\n                                visits: data.visits,\n                                amount: data.amount\n                            };\n                            this.props.physicians.unshift(tempData);\n                            this.props.state.physician = { value: '', label: '', params: ['', ''] };\n                            this.props.state.diagnosis = { value: '', label: '' };\n                            this.props.state.remarks = '';\n                            this.props.state.visits = 0;\n                            this.props.state.amount = 0;\n                            this.props.refreshPhysiciansStateChange();\n                        }}/>\n                </div>\n                <div className='sub-section'>\n                    <CRUDTable \n                        className='custom-table'\n                        placeholder='PHYSICIANS'\n                        cols={['Specialization - Doctor Name', 'Diagnosis', 'Remarks', 'No. of Visits', 'Amount']} \n                        rows={this.props.physicians}\n                        onSaveEditRow={(index: number, data: any) => {\n                            // this.props.editPhysician(index, data);\n                            this.props.physicians[index] = data;\n                            this.props.refreshPhysiciansStateChange();\n                        }}\n                        onDeleteRow={(index: number) => {\n                            // this.props.deletePhysician(index);\n                            this.props.physicians.splice(index, 1);\n                            this.props.refreshPhysiciansStateChange();\n                        }}\n                        onHeaderFormat={(colIndex: number, colName: string) => {\n                            return this.onFormatTableHeader(colIndex, colName);\n                        }} \n                        onFormat={(_rowIndex: number, colIndex: number, value: any) => {\n                            return this.onFormatCRUDTable(colIndex, value);\n                        }}\n                        editField={(colIndex: number, currentVal: any, onChange: any) => {\n                            if (colIndex === 0) {\n                                return (\n                                    <DetailedDropdown\n                                        detail={currentVal.params[0]}\n                                        choices={this.props.physiciansList}\n                                        value={currentVal}\n                                        onChange={(value: DropdownChoice) => onChange({\n                                            value: value.value,\n                                            label: value.label,\n                                            params: [value.params ? value.params[0] : '', currentVal.params[1]]\n                                        })}/>\n                                );\n                            } else if (colIndex === 1) {\n                                return (\n                                <div>{currentVal.value}</div>\n                                    // <DetailedDropdown\n                                    //     choices={this.props.diagnosesList.map(value => {\n                                    //         return value.diagnosis; \n                                    //     })}\n                                    //     value={currentVal}\n                                    //     onChange={(value: DropdownChoice) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 2) {\n                                return (\n                                    <InputField\n                                        value={currentVal}\n                                        onChange={(value: string) => onChange(value)}/>\n                                );\n                                \n                            } else if (colIndex === 3) {\n                                return (\n                                    <NumberField\n                                        value={currentVal}\n                                        onChange={(value: number) => onChange(value)}/>\n                                );\n                            \n                            } else {\n                                return (\n                                    <DetailedNumberField\n                                        detail='PHP'\n                                        isFloat={true}\n                                        value={currentVal}\n                                        onChange={(value: number) => onChange(value)}/>\n                                );\n                            }\n                        }} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { CRUDTable } from 'Pages/CustomerCarePage/UpdateTicketPage/Components/CRUDTable';\nimport { Grid, TableCell } from '@material-ui/core';\nimport { DetailedDropdown } from 'Pages/CustomerCarePage/Components/DetailedDropdown';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { DatePicker } from 'Pages/CustomerCarePage/Components/DatePicker';\nimport { DetailedNumberField } from 'Pages/CustomerCarePage/Components/DetailedNumberField';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { DropdownChoice } from 'Pages/CustomerCarePage/Models';\nimport { ProcedureData, DiagnosisData } from '../UpdateTicketProps';\n\ninterface IProps {\n    procedures: ProcedureData[];\n    state: ProcedureData;\n    proceduresList: DropdownChoice[];\n    diagnosesList: DiagnosisData[];\n    physiciansList: DropdownChoice[];\n    refreshProceduresStateChange: () => void;\n}\n\nexport class ProceduresSection extends React.Component<IProps> {\n\n    onFormatTableHeader = (colIndex: number, value: any) => {\n        return (\n            colIndex === 0 ? (\n                <TableCell style={{minWidth: '200px'}}>{value}</TableCell>\n            ) : colIndex === 1 ? (\n                <TableCell style={{minWidth: '100px'}}>{value}</TableCell>\n            ) : colIndex === 2 || colIndex === 3 ? (\n                <TableCell style={{minWidth: '150px'}}>{value}</TableCell>\n            ) : colIndex === 5 ? (\n                <TableCell style={{textAlign: 'right', minWidth: '100px'}}>{value}</TableCell>\n            ) : (\n                <TableCell style={{minWidth: '150px'}}>{value}</TableCell>\n            )\n        );\n    }\n\n    onFormatCRUDTable = (colIndex: number, value: any) => {\n        return (\n            colIndex === 0 ? (\n                <div>{value.value + ' - ' + value.label}</div>\n            ) : colIndex === 1 ? (\n                <div>{value.value}</div>\n            ) : colIndex === 2 ? (\n                <div>{value.label}</div>\n            ) : colIndex === 3 ? (\n                <div>{GlobalFunction.toCommonDateString(value)}</div>\n            ) : colIndex === 5 ? (\n                <div style={{textAlign: 'right'}}>\n                    {GlobalFunction.formatNumber(value, true) + ' PHP'}\n                </div>\n            ) : (value)\n        );\n    }\n\n    render(): JSX.Element {\n\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Add Procedure</div>\n                <div className='sub-section'>\n                    <Grid container spacing={2}>\n                        <Grid item xs={6}>\n                            <DetailedDropdown \n                                placeholder='Procedure'\n                                value={this.props.state.procedure}\n                                choices={this.props.proceduresList}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.state.procedure = value;\n                                    this.props.refreshProceduresStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <DetailedDropdown \n                                placeholder='Diagnosis'\n                                value={this.props.state.diagnosis}\n                                choices={this.props.diagnosesList.map(value => {\n                                    return value.diagnosis; \n                                })}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.state.diagnosis = value;\n                                    this.props.refreshProceduresStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <DetailedDropdown \n                                placeholder='Doctor'\n                                detail={this.props.state.physician.params ? this.props.state.physician.params[0] : undefined}\n                                value={this.props.state.physician}\n                                choices={this.props.physiciansList}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.state.physician = value;\n                                    this.props.refreshProceduresStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <InputField \n                                placeholder='Remarks'\n                                value={this.props.state.remarks}\n                                charLimit={100}\n                                onChange={(value: string) => {\n                                    this.props.state.remarks = value;\n                                    this.props.refreshProceduresStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <DatePicker \n                                placeholder='Date'\n                                value={this.props.state.date}\n                                onChange={(value: Date) => {\n                                    this.props.state.date = value;\n                                    this.props.refreshProceduresStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <DetailedNumberField \n                                placeholder='Amount'\n                                detail='PHP'\n                                isFloat={true}\n                                value={this.props.state.amount}\n                                onChange={(value: number) => {\n                                    this.props.state.amount = value;\n                                    this.props.refreshProceduresStateChange();\n                                }}/>\n                        </Grid>\n                    </Grid>\n                    <div style={{paddingTop: '5px'}} />\n                    <TextButton \n                        label='Add procedure' \n                        icon={faPlus}\n                        onClick={() => {\n                            var data = this.props.state;\n                            const tempData = {\n                                procedure: data.procedure,\n                                diagnosis: data.diagnosis,\n                                physician: data.physician,\n                                date: data.date,\n                                remarks: data.remarks,\n                                amount: data.amount\n                            }\n                            this.props.procedures.unshift(tempData);\n                            this.props.state.procedure = { value: '', label: '' };\n                            this.props.state.diagnosis = { value: '', label: '' };\n                            this.props.state.physician = { value: '', label: '' };\n                            this.props.state.remarks = '';\n                            this.props.state.date = new Date();\n                            this.props.state.amount = 0;\n                            this.props.refreshProceduresStateChange();\n                        }}/>\n                </div>\n                <div className='sub-section'>\n                    <CRUDTable \n                        className='custom-table'\n                        placeholder='PROCEDURES'\n                        \n                        cols={['Procedure', 'Diagnosis', 'Doctor', 'Date', 'Remarks', 'Amount']} \n                        rows={this.props.procedures}\n                        onSaveEditRow={(index: number, data: any) => {\n                            // this.props.editProcedure(index, data);\n                            this.props.procedures[index] = data;\n                            this.props.refreshProceduresStateChange();\n                        }}\n                        onDeleteRow={(index: number) => {\n                            // this.props.deleteProcedure(index);\n                            this.props.procedures.splice(index, 1);\n                            this.props.refreshProceduresStateChange();\n                        }}\n                        onHeaderFormat={(colIndex: number, colName: string) => {\n                            return this.onFormatTableHeader(colIndex, colName);\n                        }}\n                        onFormat={(_rowIndex: number, colIndex: number, value: any) => {\n                            return this.onFormatCRUDTable(colIndex, value);\n                        }}\n                        editField={(colIndex: number, currentVal: any, onChange: any) => {\n                            if (colIndex === 0) {\n                                return (\n                                    <DetailedDropdown\n                                        choices={this.props.proceduresList}\n                                        value={currentVal}\n                                        onChange={(value: DropdownChoice) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 1) {\n                                return (\n                                    <DetailedDropdown\n                                        choices={this.props.diagnosesList.map(value => {\n                                            return value.diagnosis; \n                                        })}\n                                        value={currentVal}\n                                        onChange={(value: DropdownChoice) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 2) {\n                                return (\n                                    <DetailedDropdown\n                                        detail={currentVal.params[0]}\n                                        choices={this.props.physiciansList}\n                                        value={currentVal}\n                                        onChange={(value: DropdownChoice) => onChange(value)}/>\n                                ); \n                            } else if (colIndex === 3) {\n                                return (\n                                    <DatePicker\n                                        value={currentVal}\n                                        onChange={(value: Date) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 4) {\n                                return (\n                                    <InputField\n                                        value={currentVal}\n                                        charLimit={100}\n                                        onChange={(value: string) => onChange(value)}/>\n                                );\n                            \n                            } else {\n                                return (\n                                    <DetailedNumberField\n                                        detail='PHP'\n                                        isFloat={true}\n                                        value={currentVal}\n                                        onChange={(value: number) => onChange(value)}/>\n                                );\n                            }\n                        }} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { CRUDTable } from 'Pages/CustomerCarePage/UpdateTicketPage/Components/CRUDTable';\nimport { Grid, TableCell } from '@material-ui/core';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { DetailedNumberField } from 'Pages/CustomerCarePage/Components/DetailedNumberField';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { DropdownChoice } from 'Pages/CustomerCarePage/Models';\nimport { ItemData } from '../UpdateTicketProps';\n\ninterface IProps {\n    items: ItemData[];\n    state: ItemData;\n    refreshItemsStateChange: () => void;\n}\n\nexport class OtherDetailsSection extends React.Component<IProps> {\n\n    itemTypes: DropdownChoice[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.itemTypes = [\n            { value: '1', label: 'Medicine' },\n            { value: '2', label: 'Non-coverable' },\n            { value: '3', label: 'Rooms' },\n            { value: '4', label: 'Miscellaneous' }\n        ]\n    }\n\n    onFormatTableHeader = (colIndex: number, value: any) => {\n        return (\n            colIndex === 2 ? (\n                <TableCell style={{textAlign: 'right', minWidth: '200px'}}>{value}</TableCell>\n            ) : (\n                <TableCell style={{minWidth: '300px'}}>{value}</TableCell>\n            )\n        );\n    }\n\n    onFormatCRUDTable = (colIndex: number, value: any) => {\n        return (\n            colIndex === 1 ? (\n                value.label\n            ) : colIndex === 2 ? (\n                <div style={{textAlign: 'right'}}>\n                    {GlobalFunction.formatNumber(value, true) + ' PHP'}\n                </div>\n            ) : (value)\n        );\n    }\n\n    render(): JSX.Element {\n        console.log(this.props.items);\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Add Other Details</div>\n                <div className='sub-section'>\n                    <Grid container spacing={2}>\n                        <Grid item xs={6}>\n                            <InputField \n                                placeholder='Item'\n                                value={this.props.state.name}\n                                error={this.props.state.name.trim().length == 0}\n                                onChange={(value: string) => {\n                                    this.props.state.name = value;\n                                    this.props.refreshItemsStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <Dropdown \n                                placeholder='Type'\n                                value={this.props.state.type}\n                                choices={this.itemTypes}\n                                error={this.props.state.type.value === ''}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.state.type = value;\n                                    this.props.refreshItemsStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <DetailedNumberField \n                                placeholder='Amount'\n                                detail='PHP'\n                                isFloat={true}\n                                value={this.props.state.amount}\n                                error={this.props.state.amount == 0}\n                                onChange={(value: number) => {\n                                    this.props.state.amount = value;\n                                    this.props.refreshItemsStateChange();\n                                }}/>\n                        </Grid>\n                    </Grid>\n                    <div style={{paddingTop: '5px'}} />\n                    {this.props.state.name.trim().length != 0 &&\n                     this.props.state.type.value !== '' &&\n                     this.props.state.amount != 0 ? (\n                        <TextButton \n                            label='Add item' \n                            icon={faPlus}\n                            onClick={() => {\n                                var state = this.props.state;\n                                const tempData = {\n                                    name: state.name,\n                                    type: { value: state.type.value, label: state.type.label },\n                                    amount: state.amount\n                                }\n                                this.props.items.unshift(tempData);\n                                this.props.state.name = '';\n                                this.props.state.type = { value: '', label: '' };\n                                this.props.state.amount = 0;\n                                this.props.refreshItemsStateChange();\n                            }}/>\n                    ) : null}\n                </div>\n                <div className='sub-section'>\n                    <CRUDTable \n                        className='custom-table'\n                        placeholder='OTHER DETAILS'\n                        \n                        cols={['Item', 'Type', 'Amount']} \n                        rows={this.props.items}\n                        onSaveEditRow={(index: number, data: any) => {\n                            // this.props.editItem(index, data);\n                            this.props.items[index] = data;\n                            this.props.refreshItemsStateChange();\n                        }}\n                        onDeleteRow={(index: number) => {\n                            // this.props.deleteItem(index);\n                            this.props.items.splice(index, 1);\n                            this.props.refreshItemsStateChange();\n                        }}\n                        onHeaderFormat={(colIndex: number, colName: string) => {\n                            return this.onFormatTableHeader(colIndex, colName);\n                        }}\n                        onFormat={(_rowIndex: number, colIndex: number, value: any) => {\n                            return this.onFormatCRUDTable(colIndex, value);\n                        }}\n                        editField={(colIndex: number, currentVal: any, onChange: any) => {\n                            if (colIndex === 0) {\n                                return (\n                                    <InputField\n                                        value={currentVal}\n                                        onChange={(value: string) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 1) {\n                                return (\n                                    <Dropdown\n                                        choices={this.itemTypes}\n                                        value={currentVal}\n                                        onChange={(value: DropdownChoice) => onChange(value)}/>\n                                );\n                            } else {\n                                return (\n                                    <DetailedNumberField\n                                        detail='PHP'\n                                        isFloat={true}\n                                        value={currentVal}\n                                        onChange={(value: number) => onChange(value)}/>\n                                );\n                            }\n                        }} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { Grid } from '@material-ui/core';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { DetailedNumberField } from 'Pages/CustomerCarePage/Components/DetailedNumberField';\nimport { DatePicker } from 'Pages/CustomerCarePage/Components/DatePicker';\nimport { DropdownChoice } from 'Pages/CustomerCarePage/Models';\n\ninterface IProps {\n    dateAdmitted: Date;\n    coverage: DropdownChoice;\n    ticketNo: string;\n    paidBy: string;\n    philhealthAmount: number;\n    finalBill: number;\n    dischargeDate: Date | null;\n    onUpdateTicketStateChange: (attrName: string, value: any) => void;\n}\n\nexport class DischargeDetailsSection extends React.Component<IProps> {\n\n    coverageList: DropdownChoice[];\n\n    constructor(props: any) {\n        super(props);\n\n        this.coverageList = [\n            { value: '1', label: 'Filed' },\n            { value: '2', label: 'Corporate Guarantee' },\n            { value: '3', label: 'Not Compensable' },\n            { value: '4', label: 'Less than 24 hours' },\n            { value: '5', label: 'Paid' },\n            { value: '6', label: 'PH Rider' },\n            { value: '7', label: 'Non-PNDF' }\n        ]\n    }\n\n\n    render(): JSX.Element {\n\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Set PhilHealth</div>\n                <div className='sub-section'>\n                    <Grid container spacing={2}>\n                        <Grid item xs={6}>\n                            <Dropdown \n                                placeholder='Coverage'\n                                choices={this.coverageList}\n                                value={this.props.coverage}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.onUpdateTicketStateChange('coverage', value);\n                                }} />\n                        </Grid>\n                        {this.props.coverage.label === 'Corporate Guarantee' ? (\n                            <Grid item xs={3}>\n                                <InputField \n                                    placeholder='Ticket Number'\n                                    value={this.props.ticketNo}\n                                    onChange={(value: string) => {\n                                        this.props.onUpdateTicketStateChange('ticketNo', value);\n                                    }} />\n                            </Grid>\n                        ) : null}\n                        {this.props.coverage.label === 'Paid' ? (\n                        <Grid item xs={3}>\n                            <InputField \n                                placeholder='Paid by'\n                                value={this.props.paidBy}\n                                onChange={(value: string) => {\n                                    this.props.onUpdateTicketStateChange('paidBy', value);\n                                }} />\n                        </Grid>\n                        ) : null}\n                        {this.props.coverage.label === 'Filed' ||\n                            this.props.coverage.label === 'Corporate Guarantee' ||\n                            this.props.coverage.label === 'Paid' ? (\n                            <Grid item xs={3}>\n                                <DetailedNumberField \n                                    placeholder='Amount'\n                                    detail='PHP'\n                                    isFloat={true}\n                                    value={this.props.philhealthAmount}\n                                    onChange={(value: number) => {\n                                        this.props.onUpdateTicketStateChange('philhealthAmount', value);\n                                    }} />\n                            </Grid>\n                        ) : null}\n\n                        \n                        \n                    </Grid>\n                </div>\n                <div className='header-1'>Add Discharge Details</div>\n                <div className='sub-section'>\n                    <Grid container spacing={2}>\n                        <Grid item xs={3}>\n                            <DetailedNumberField \n                                placeholder='Final Hospital Bill Amount'\n                                detail='PHP'\n                                isFloat={true}\n                                value={this.props.finalBill}\n                                onChange={(value: number) => {\n                                    this.props.onUpdateTicketStateChange('finalBill', value);\n                                }} />\n                        </Grid>\n                        <Grid item xs={3}>\n                            <DatePicker \n                                placeholder='Discharge Date'\n                                value={this.props.dischargeDate}\n                                minDate={this.props.dateAdmitted}\n                                onChange={(value: Date) => {\n                                    this.props.onUpdateTicketStateChange('dischargeDate', value);\n                                }} />\n                        </Grid>\n                    </Grid>\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { CRUDTable } from 'Pages/CustomerCarePage/UpdateTicketPage/Components/CRUDTable';\nimport { Grid } from '@material-ui/core';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { CustomDropzone } from 'Pages/CustomerCarePage/Components/CustomDropzone';\nimport { FileData } from '../UpdateTicketProps';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\n\ninterface IProps {\n    files: FileData[];\n    state: FileData;\n    refreshFilesStateChange: () => void;\n}\n\nexport class UploadedDocumentsSection extends React.Component<IProps> {\n\n    render(): JSX.Element {console.log(this.props.files);\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Upload Documents</div>\n                <div className='sub-section'>\n                    <Grid container>\n                        <Grid item xs={6}>\n                            <CustomDropzone\n                                accept='image/*'\n                                onDrop={(files: File[]) => {\n                                    this.props.state.file = files[0];\n                                    this.props.refreshFilesStateChange();\n                                }} />\n                            <div>{this.props.state.file ? this.props.state.file.name : null}</div>\n                            <div className='sub-section' />\n                            <InputField \n                                placeholder='Document Name' \n                                value={this.props.state.docName}\n                                onChange={(value: string) => {\n                                    this.props.state.docName = value;\n                                    this.props.refreshFilesStateChange();\n                                }} />\n                        </Grid>\n                        <Grid item xs={6} />\n                    </Grid>\n                    <div style={{paddingTop: '5px'}} />\n                    <TextButton \n                        label='Add document' \n                        icon={faPlus}\n                        onClick={() => {\n                            var state = this.props.state;\n                            if (state.file !== null) {\n                                const tempData = {\n                                    docName: state.docName,\n                                    file: state.file\n                                }\n                                this.props.files.unshift(tempData);\n                                this.props.state.docName = '';\n                                this.props.state.file = null;\n                                this.props.refreshFilesStateChange();\n                            }\n                        }}/>\n                </div>\n                \n                <div className='sub-section'>\n                    <CRUDTable \n                        className='custom-table'\n                        placeholder='UPLOADED DOCUMENTS'\n                        \n                        cols={['Document Name', 'Filename']} \n                        rows={this.props.files}\n                        onSaveEditRow={(index: number, data: any) => {\n                            // this.props.editFile(index, data);\n                            \n                            this.props.files[index] = data;\n                            this.props.refreshFilesStateChange();\n                        }}\n                        onDeleteRow={(index: number) => {\n                            // this.props.deleteFile(index);\n                            this.props.files.splice(index, 1);\n                            this.props.refreshFilesStateChange();\n                        }}\n                        onFormat={(_rowIndex: number, colIndex: number, value: any) => {\n                            return (colIndex === 1 ? (value.name) : (value));\n                        }}\n                        editField={(colIndex: number, currentVal: any, onChange: any) => {\n                            if (colIndex === 0) {\n                                return (\n                                    <InputField\n                                        value={currentVal}\n                                        onChange={(value: string) => onChange(value)}/>\n                                );\n                            }\n                            return currentVal.name;\n                        }} />\n                </div>\n\n                <div className='section' />\n            </div>\n        );\n    }\n}","\nimport * as React from 'react';\nimport { Grid, TableCell, TableRow } from '@material-ui/core';\nimport { InquiryData, DropdownChoice } from 'Pages/CustomerCarePage/Models';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { faMinusCircle, faPlus, faPen } from '@fortawesome/free-solid-svg-icons';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { InputChip } from 'Pages/CustomerCarePage/Components/InputChip';\nimport { CustomChip } from 'Pages/CustomerCarePage/Components/CustomChip';\nimport { CustomDropzone } from 'Pages/CustomerCarePage/Components/CustomDropzone';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\n\ninterface IProps {\n    inquiries: InquiryData[];\n    refreshInquiryState: () => void;\n}\n\ninterface IStates {\n    inquiry: DropdownChoice;\n}\n\nexport class UpdateInquirySection extends React.Component<IProps, IStates> {\n\n    inquiries: DropdownChoice[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            inquiry: { value: '', label: '' }\n        };\n\n        this.inquiries = [\n            { value: '1', label: 'Member Status / Card Inquiry' },\n            { value: '2', label: 'Member Network Access Inquiry' },\n            { value: '3', label: 'Member Benefit Inquiry - General [Outpatient]' },\n            { value: '4', label: 'Member Benefit Inquiry - General [Inpatient]' },\n            { value: '5', label: 'Member Benefit Inquiry - General [Emergency]' },\n            { value: '6', label: 'Member Benefit Inquiry - General [Dental]' },\n            { value: '7', label: 'Member Benefit Inquiry - General [APE / ECU]' },\n            { value: '8', label: 'Member Benefit Inquiry - General [Riders]' },\n            { value: '9', label: 'Member Coverage Inquiry - Specific Benefit' },\n            { value: '10', label: 'Member Availment Inquiry - CanAvail' },\n            { value: '11', label: 'Member Eligibility Inquiry' },\n            { value: '12', label: 'Reimbursement Status Inquiry' },\n            { value: '13', label: 'General Affiliated Network Inquiry - Facility' },\n            { value: '14', label: 'General Affiliated Network Inquiry - Doctor' },\n            { value: '15', label: 'General Affiliated Network Inquiry - Dentist' },\n            { value: '16', label: 'Procedural Inquiry - Outpatient' },\n            { value: '17', label: 'Procedural Inquiry - Inpatient' },\n            { value: '18', label: 'Procedural Inquiry - Emergency' },\n            { value: '19', label: 'Procedural Inquiry - Dental' },\n            { value: '20', label: 'Procedural Inquiry - APE / ECU' },\n            { value: '21', label: 'Procedural Inquiry - Member Enrolment / Cancellation / Update' },\n            { value: '22', label: 'Procedural Inquiry - Reimbursement' },\n            { value: '23', label: 'Procedural Inquiry - Others' }\n        ];\n    }\n\n    getFilteredInquiries(): DropdownChoice[] {\n        let filteredInquiries: DropdownChoice[] = [];\n        for (var i = 0; i < this.inquiries.length; i++) {\n            let isSame = false;\n            for (var j = 0; j < this.props.inquiries.length; j++) {\n                isSame = (\n                    this.props.inquiries[j].inquiry.value === \n                    this.inquiries[i].value ? true : isSame);\n            }\n            if (!isSame) {\n                filteredInquiries = filteredInquiries.concat(this.inquiries[i]);\n            }\n        }\n        return filteredInquiries;\n    }\n\n    onAddInquiry() {\n        if (this.state.inquiry.value !== '') {\n            this.props.inquiries.push({\n                inquiry: this.state.inquiry,\n                detail: '',\n                specificDetail: [],\n                answer: '',\n                remarks: '',\n                relatedTickets: [],\n                supportDocs: []\n            });\n            \n            this.props.refreshInquiryState();\n            this.setState({inquiry: { value: '', label: '' }});\n        }\n    }\n\n    onRemoveInquiry(index: number) {\n        this.props.inquiries.splice(index, 1);\n        this.props.refreshInquiryState();\n    }\n\n\n    render(): JSX.Element {\n        return (\n            <div className='main-content'>\n                <div className='section' style={{paddingRight: '2.5rem'}}>\n                    <div className='header-1'>Update Inquiry</div>\n                    <div className='text'>\n                        Add an inquiry type and then add the question and its details after\n                    </div>\n                    <div className='sub-section'>\n                        {true ? (\n                            <CustomTable \n                                rows={this.props.inquiries}\n                                renderHeader={() => this.renderTableHeader()}\n                                renderRow={(rowData: any, index: number) => \n                                    this.renderTableRow(rowData, index)} />\n                        ) : (null)}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n        return (\n            <>\n            <TableCell>\n                <Dropdown \n                    choices={this.getFilteredInquiries()}\n                    value={this.state.inquiry}\n                    onChange={(value: DropdownChoice) => {\n                        this.setState({inquiry: value});\n                    }} />\n            </TableCell>\n            <TableCell style={{width: '200px', textAlign: 'center'}}>\n                <TextButton \n                    icon={faPlus} \n                    label=\"Add inquiry\"\n                    onClick={() => {\n                        this.onAddInquiry();\n                    }} />\n            </TableCell>\n            </>\n        );\n    }\n\n    renderTableRow(inquiry: InquiryData, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                <TableCell colSpan={2}>\n                    <Grid container spacing={1}>\n                        <Grid item xs={11} className='header-2'>\n                            {inquiry.inquiry.label}\n                        </Grid>\n                        <Grid item xs={1} style={{textAlign: 'right'}}>\n                            <IconButton\n                                icon={faPen}\n                                onClick={() => {\n                                    this.onRemoveInquiry(index);\n                                }}/>\n                            <IconButton\n                                icon={faMinusCircle}\n                                onClick={() => {\n                                    this.onRemoveInquiry(index);\n                                }}/>\n                        </Grid>\n                    </Grid>\n                    <div style={{position: 'relative'}}>\n                        <div style={{paddingTop: '0.5rem'}} />\n                        <div className='line-border' />\n                        <div style={{paddingTop: '0.5rem'}} />\n                        <Grid container spacing={2}>\n                            <Grid item xs={6}>\n                                <InputField \n                                    placeholder='Details of inquiry (Question)'\n                                    value={inquiry.detail}\n                                    onChange={(value: string) => {\n                                        inquiry.detail = value;\n                                        this.props.refreshInquiryState();\n                                    }} />\n                            </Grid>\n                            <Grid item xs={6}>\n                                <InputChip \n                                    placeholder='Specific Details (Type benefit/doctor/facility to describe inquiry, press enter to add)'\n                                    value={inquiry.specificDetail}\n                                    onAdd={(value: string) => {\n                                        inquiry.specificDetail.push(value);\n                                        this.props.refreshInquiryState();\n                                    }}\n                                    onDelete={(index: number) => {\n                                        inquiry.specificDetail.splice(index, 1);\n                                        this.props.refreshInquiryState();\n                                    }} />\n                            </Grid>\n                        </Grid>\n                        <InputField \n                            placeholder='Answer'\n                            value={inquiry.answer}\n                            onChange={(value: string) => {\n                                inquiry.answer = value;\n                                this.props.refreshInquiryState();\n                            }} />\n                        <InputField \n                            placeholder='Remarks (Optional)'\n                            value={inquiry.remarks}\n                            onChange={(value: string) => {\n                                inquiry.remarks = value;\n                                this.props.refreshInquiryState();\n                            }} />\n                        <Grid container spacing={2}>\n                            <Grid item xs={6}>\n                                <InputChip \n                                    placeholder='Related Tickets (Optional, press enter to add)'\n                                    value={inquiry.relatedTickets}\n                                    onAdd={(value: string) => {\n                                        inquiry.relatedTickets.push(value);\n                                        this.props.refreshInquiryState();\n                                    }}\n                                    onDelete={(index: number) => {\n                                        inquiry.relatedTickets.splice(index, 1);\n                                        this.props.refreshInquiryState();\n                                    }} />\n                            </Grid>\n                            <Grid item xs={4}>\n                                <CustomDropzone \n                                    accept='image/*'\n                                    onDrop={(files: File[]) => {\n                                        inquiry.supportDocs.push(files[0]);\n                                        this.props.refreshInquiryState();\n                                    }}/>\n                            </Grid>\n                            <Grid item xs={2}>\n                                {inquiry.supportDocs.map((doc, index) => {\n                                    return (\n                                        <CustomChip\n                                            label={doc.name}\n                                            value={index.toString()}\n                                            onDelete={(value: string) => {\n                                                inquiry.supportDocs.splice(parseInt(value), 1);\n                                                this.props.refreshInquiryState();\n                                            }} />\n                                    );\n                                })}\n                            </Grid>\n                        </Grid>\n                    </div>\n                </TableCell>\n            </TableRow>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\nimport { Modal, Fade } from '@material-ui/core';\nimport { IconButton } from './IconButton';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\n\ninterface IProps {\n    className?: string;\n    isOpen: boolean;\n    renderHeader: () => JSX.Element;\n    renderContent: () => JSX.Element;\n    renderFooter: () => JSX.Element;\n    handleClose?: () => void;\n}\n\nexport class CustomModal extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        return (\n            <div>\n                <Modal\n                    className={`${this.props.className ? this.props.className : ''} custom-modal`}\n                    open={this.props.isOpen}\n                    onClose={this.props.handleClose}\n                    closeAfterTransition>\n                    <Fade in={this.props.isOpen}>\n                        <div className='modal'>\n                            {this.props.handleClose ? (\n                                <div style={{textAlign: 'right'}}>\n                                    <IconButton\n                                        icon={faTimes} \n                                        size='1x' \n                                        onClick={this.props.handleClose} />\n                                </div>\n                                \n                            ) : null}\n                            <div className='header'>\n                                {this.props.renderHeader()}\n                            </div>\n                            <div className='content'>\n                                {this.props.renderContent()}\n                            </div>\n                            <div className='bottom'>\n                                {this.props.renderFooter()}\n                            </div>\n                        </div>\n                    </Fade>\n                </Modal>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { match } from \"react-router-dom\";\nimport {\n    UpdateData, \n    AccommodationData, \n    DiagnosisData, \n    PhysicianData, \n    ProcedureData,\n    ItemData,\n    FileData\n} from './UpdateTicketProps';\nimport { Grid, Button, Snackbar } from '@material-ui/core';\nimport { SummarySection } from './Components/SummarySection';\nimport { UpdateSection } from './Components/UpdateSection';\nimport { API } from '../API';\nimport { AccommodationsSection } from './Components/AccommodationsSection';\nimport { DiagnosesSection } from './Components/DiagnosesSection';\nimport { PhysiciansSection } from './Components/PhysiciansSection';\nimport { ProceduresSection } from './Components/ProceduresSection';\nimport { OtherDetailsSection } from './Components/OtherDetailsSection';\nimport { DischargeDetailsSection } from './Components/DischargeDetailsSection';\nimport { UploadedDocumentsSection } from './Components/UploadedDocumentsSection';\nimport { LeftPanelSection } from '../LeftPanelSection/LeftPanelSection';\nimport { DropdownChoice, TicketData, MemberData, InquiryData, ClientData } from '../Models';\nimport { UpdateInquirySection } from './Components/UpdateInquirySection';\nimport { CustomTabs } from '../Components/CustomTab';\nimport { Payloads } from '../Payloads';\nimport { Processmaker } from '../Processmaker';\nimport { Loading } from '../Components/Loading';\nimport { CustomModal } from '../Components/CustomModal';\nimport { TicketFooter } from '../TicketFooter';\n\ninterface IProps {\n    required: string;\n    match: match<MatchParams>;\n    history: any;\n}\n\ninterface MatchParams {\n    id: string;\n}\n\ninterface IStates {\n    loadedResources: number;\n    isAssessmentModalOpen: boolean;\n    isSaving: boolean;\n    snackbarMessage: string | null;\n    lastSave?: Date;\n\n    /* Can save to tmp */\n    tabSelected: number;\n    member?: MemberData;\n    client?: ClientData;\n    ticket: TicketData;\n    confinement?: ConfinementDetails;\n    inquiries?: InquiryData[];\n\n    updateState: UpdateData;\n    accommodationState: AccommodationData;\n    diagnosisState: DiagnosisData;\n    physicianState: PhysicianData;\n    procedureState: ProcedureData;\n    otherDetailState: ItemData;\n    fileState: FileData;\n}\n\nexport interface ConfinementDetails {\n    provider: DropdownChoice;\n    dateAdmitted: Date;\n    confinementKind: string;\n    giftGiven: boolean;\n    coverage: DropdownChoice;\n    ticketNo: string;\n    paidBy: string;\n    philhealthAmount: number;\n    finalBill: number;\n    dischargeDate: Date | null;\n    primaryDiagnosisIndex: number;\n\n    updates: UpdateData[];\n    accommodations: AccommodationData[];\n    diagnoses: DiagnosisData[];\n    physicians: PhysicianData[];\n    procedures: ProcedureData[];\n    items: ItemData[];\n    files: FileData[];\n}\n\ninterface ErrorMessageFormat {\n    message: string;\n    targets: string[];\n}\n\nexport class UpdateTicketPage extends React.Component<IProps, IStates> {\n\n    static RESOURCES_TO_LOAD = 5;\n\n    tabList: { value: number, label: string }[];\n    icd10Codes: DropdownChoice[];\n    cptCodes: DropdownChoice[];\n    facilities: DropdownChoice[];\n    doctors: DropdownChoice[];\n    agents: DropdownChoice[];\n\n    errors: ErrorMessageFormat[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            tabSelected: 1,\n            loadedResources: 0,\n            isAssessmentModalOpen: false,\n            isSaving: false,\n            snackbarMessage: null,\n            ticket: {\n                ticketChannel: '',\n                transactionNo: '',\n                ticketSource: '',\n                memberName: '',\n                clientName: '',\n                brokerName: '',\n                facility: { value: '', label: '' },\n                department: '',\n                callerName: '',\n                contactNo: '',\n                ticketType: '',\n                specificType: '',\n                urgency: '',\n                agent: { id: '', name: '' },\n                additionalNotes: '',\n                additionalFiles: [],\n                ticketNo: '',\n                pmCaseId: '',\n                status: 'Open',\n                createdBy: { id: '1', name: 'Jilmer Cariaso - Static' },\n                dateCreated: new Date(),\n                dateUpdated: new Date(),\n                dateEscalated: null\n            },\n            updateState: {\n                remarks: '',\n                date: new Date(),\n                hospitalBill: 0\n            },\n            accommodationState: {\n                roomType: '',\n                days: 0,\n                costPerDay: 0\n            },\n            diagnosisState: {\n                diagnosis: { value: '', label: '' },\n                remarks: '',\n                isFinal: false,\n                isPrimary: false\n            },\n            physicianState: {\n                physician: { value: '', label: '', params: [''] },\n                diagnosis: { value: '', label: '' },\n                remarks: '',\n                visits: 0,\n                amount: 0\n            },\n            procedureState: {\n                procedure: { value: '', label: '' },\n                diagnosis: { value: '', label: '' },\n                physician: { value: '', label: '' },\n                remarks: '',\n                date: new Date(),\n                amount: 0\n            },\n            otherDetailState: {\n                name: '',\n                type: { value: '', label: '' },\n                amount: 0\n            },\n            fileState: {\n                docName: '',\n                file: null\n            }\n        };\n\n        this.tabList = [\n            { value: 1, label: 'Summary' }, \n            { value: 2, label: 'Updates' }, \n            { value: 3, label: 'Room Accommodations' }, \n            { value: 4, label: 'Diagnoses' }, \n            { value: 5, label: 'Physicians' }, \n            { value: 6, label: 'Procedures' },  \n            { value: 7, label: 'PhilHealth & Discharge Details' }, \n            { value: 8, label: 'Other Details' }, \n            { value: 9, label: 'Uploaded Documents' }\n        ];\n\n        this.facilities = [];\n        this.agents = [];\n        this.doctors = [];\n        this.cptCodes = [];\n        this.icd10Codes = [];\n        this.errors = [];\n    }\n\n    componentDidMount() {\n        // this.loadTicketData(`customer-care/tickets/${this.props.match.params['ticketId']}`);\n        API.get(`tmp?` +\n            `filter[where][and][0][user_id]=${localStorage['user_id']}&` +\n            `filter[where][and][1][module]=Customer%20Care&` + \n            `filter[where][and][2][ticket_no]=${this.props.match.params['ticketId']}`,\n            (response) => {\n                if (response.length > 0) {\n                    this.setState({\n                        lastSave: new Date(response[0].timestamp),\n                        loadedResources: this.state.loadedResources + 1,\n                        tabSelected: response[0].data.tab_selected,\n                        member: response[0].data.member,\n                        ticket: response[0].data.ticket,\n                        confinement: response[0].data.confinement,\n                        inquiries: response[0].data.inquiries,\n                        updateState: response[0].data.update_state,\n                        accommodationState: response[0].data.accommodation_state,\n                        diagnosisState: response[0].data.diagnosis_state,\n                        physicianState: response[0].data.physician_state,\n                        procedureState: response[0].data.procedure_state,\n                        otherDetailState: response[0].data.other_detail_state,\n                        fileState: response[0].data.file_state\n                    });\n                } else {\n                    this.loadTicketData(`customer-care/tickets/${this.props.match.params['ticketId']}`);\n                }\n            },\n            (error) => {\n                console.log(error);\n                this.loadTicketData(`customer-care/tickets/${this.props.match.params['ticketId']}`);\n            });\n\n        API.get('facilities',\n            (response) => {\n                this.setState({loadedResources: this.state.loadedResources + 1});\n                this.facilities = response.map(facility => {\n                    return { \n                        value: facility.facility_id,\n                        label: facility.name \n                    }\n                });\n            },\n            (error) => {\n                console.log(error);\n            });\n\n        API.get('icd10-codes?filter[limit]=1000',\n            (response) => {\n                console.log(response);  \n                this.setState({loadedResources: this.state.loadedResources + 1});\n                this.icd10Codes = response.map(icd10Code => {\n                    return { \n                        value: icd10Code.full_code,\n                        label: icd10Code.abbreviated_description \n                    };\n                });\n            },\n            (error) => {\n                console.log(error);\n            });\n\n        API.get('cpts?filter[limit]=1000',\n            (response) => {\n                this.setState({loadedResources: this.state.loadedResources + 1});\n                this.cptCodes = response.map(cptCode => {\n                    return {\n                        value: cptCode.code,\n                        label: cptCode.label \n                    };\n                });\n            }, \n            (error) => {\n                console.log(error);\n            });\n\n        API.get('doctors',\n            (response) => {\n                this.setState({loadedResources: this.state.loadedResources + 1});\n                this.doctors = response.map(doctor => {\n                    return {\n                        value: doctor._id,\n                        label: ('Dr. ' + doctor.first_name +  ' ' + doctor.last_name),\n                        params: [doctor.type]\n                    };\n                });\n            }, \n            (error) => {\n                console.log(error);\n            });\n    }\n\n    loadTicketData = (url: string) => {\n        API.get(url, \n            (response) => {\n                console.log(response);\n                this.setState({loadedResources: this.state.loadedResources + 1});\n                const ticketCategory = response.ticket_category;\n                const confinement = ticketCategory.confinement_details;\n                const inquiry = ticketCategory.inquiry_details;\n\n                this.setState({ticket: Payloads.getTicketData(response, this.props.match.params['appNo'])});\n\n                if (confinement) {\n                    this.setState({confinement: Payloads.getConfinementData(confinement, response)});\n                }\n                \n                if (inquiry) {\n                    this.setState({inquiries: inquiry.inquiry_list.map(value => {\n                        return {\n                            inquiry: { value: '', label: value.inquiry },\n                            detail: value.value,\n                            specificDetail: value.specific_detail,\n                            answer: value.answer,\n                            remarks: value.remarks,\n                            relatedTickets: value.related_tickets,\n                            supportDocs: value.support_docs\n                        };\n                    })});\n                }\n\n                if (response.member_id.length > 0) {\n                    API.get(`customer-care/members/${response.member_id}`, \n                        (response) => {\n                            this.setState({member: Payloads.getMemberData(response)});\n                            API.get(`customer-care/members/${response.member_id}/benefits`,\n                                (response) => {\n                                    console.log(response);\n                                },\n                                (error) => {\n                                    console.log(error);\n                                });\n                        },\n                        (error) => {\n                            console.log(error);\n                        });\n                }\n\n                if (response.client_id.length > 0) {\n                    API.get(`customer-care/clients/${response.client_id}`,\n                        (response) => {\n                            this.setState({client: Payloads.getClientData(response)});\n                        },\n                        (error) => {\n                            console.log(error);\n                        });\n                }\n                \n            },\n            (error) => {\n                console.log(error);\n            });\n    }\n\n    getErrorList = () => {\n        let errors: ErrorMessageFormat[] = [];\n\n        const confinement = this.state.confinement;\n        \n        if (confinement) {\n\n            /* Check if there's a physician assigned to each diagnosis */\n            let errorDiagnosis = confinement.diagnoses.filter(diagnosis => {\n                let matched = false;\n                confinement.physicians.map(physician => {\n                    matched = physician.diagnosis.value === diagnosis.diagnosis.value ? true : matched;\n                });\n                return !matched;\n            });\n\n            if (errorDiagnosis.length > 0) {\n                errors.push({\n                    message: 'Please assign a physician for the following diagnoses before proceding:',\n                    targets: errorDiagnosis.map(diagnosis => {\n                        return `${diagnosis.diagnosis.value} ${diagnosis.diagnosis.label}`\n                    })\n                });\n                this.setState({tabSelected: 5});\n            }\n        }\n        return errors;\n    }\n\n    uploadFiles = (fileData: FileData[], nextAction: Function) => {\n        let hasFiles = false;\n\n        const files = new FormData();\n        fileData.forEach(file => {\n            if (file.file && file.file['path'] && !file.file['field']) {\n                files.append(`supported_documents`, file.file);\n                hasFiles = true;\n            }\n        });\n\n        this.setState({isSaving: true});\n\n        if (hasFiles) {\n            API.postFormData('tmp/upload?path=customer-care', files,\n                (uploadResponse) => {\n                    nextAction(uploadResponse);\n                },\n                (error) => {\n                    console.log(error);\n                    this.setState({\n                        isSaving: false,\n                        snackbarMessage: 'Failed to upload files.'\n                    });\n                });\n        } else {\n            nextAction([]);\n        }\n    }\n\n    apiUpdateTicket = (onSuccess: Function) => {\n        const confinement = this.state.confinement;\n        const inquiries = this.state.inquiries;\n\n        if ((!this.state.member && !this.state.client) || (!confinement && !inquiries)) return;\n\n        const fileData = this.state.confinement ? (\n            this.state.confinement.files.filter(file => file.file ? !file.file['field'] : false) \n        ) : [];\n        \n        this.uploadFiles(fileData, (uploadResponse) => {\n            const payload = Payloads.getPutTicketPayload(\n                this.state.ticket,\n                !uploadResponse.error && uploadResponse.length > 0 ? (\n                    confinement ? (\n                        confinement.files\n                            .map(file => { \n                                return {\n                                    ...file.file,\n                                    docName: file.docName\n                                }\n                            })\n                            .filter(file => file ? file['field'] : false)\n                            .concat(\n                                uploadResponse.map((response, index) => {\n                                    return {\n                                        ...response,\n                                        docName: fileData[index].docName\n                                    }\n                                })\n                            )\n                    ) : [] \n                ) : (\n                    confinement ? (\n                        confinement.files.map(file => {\n                            return {\n                                ...file.file,\n                                docName: file.docName\n                            }\n                        })\n                    ) : []\n                ),\n                this.state.member, \n                this.state.client,\n                this.state.confinement,\n                this.state.inquiries\n            );\n\n            console.log(payload);\n            API.put(`customer-care/tickets/${this.props.match.params['ticketId']}`, payload,\n                (response) => {\n                    console.log(response);\n                    processmakerGetCase(this.props.match.params['caseId']);\n                },\n                (error) => {\n                    console.log(error);\n                    this.setState({\n                        isSaving: false,\n                        snackbarMessage: 'Failed to update ticket.'\n                    });\n                });\n            \n\n            const processmakerGetCase = (caseId: string) => {\n                Processmaker.get(`cases/${caseId}`,\n                    (response) => {\n                        console.log(response);\n                        if (response['current_task'][0]['tas_title'] === 'Create Ticket') {\n                            processmakerRouteCase(caseId);\n                        } else {\n                            onSuccess();\n                        }\n                    },\n                    (error) => {\n                        console.log(error);\n                        this.setState({\n                            isSaving: false,\n                            snackbarMessage: 'Failed to update ticket.'\n                        });\n                    }\n                );\n            }\n\n            const processmakerRouteCase = (caseId: string) => {\n                Processmaker.put(`cases/${caseId}/route-case`, {},\n                    (response) => {\n                        console.log(response);\n                        onSuccess();\n                    },\n                    (error) => {\n                        console.log(error);\n                        this.setState({\n                            isSaving: false,\n                            snackbarMessage: 'Failed to update ticket.'\n                        });\n                    }\n                );\n            }\n        });\n    }\n\n    saveForNow = () => {\n        const member = this.state.member;\n        const confinement = this.state.confinement;\n        const inquiries = this.state.inquiries;\n\n        if (!member || (!confinement && !inquiries)) return;\n\n        const fileData = this.state.confinement ? this.state.confinement.files : [];\n\n        this.uploadFiles(fileData, (uploadResponse) => {\n            if (!this.state.member) {\n                return;\n            }\n\n            const payload = {\n                user_id: localStorage['user_id'],\n                ticket_no: this.state.ticket.id,\n                module: 'Customer Care',\n                process: 'Update Ticket',\n                timestamp: new Date(),\n                data: {\n                    tab_selected: this.state.tabSelected,\n                    member: this.state.member,\n                    ticket: this.state.ticket,\n                    confinement: confinement ? {\n                        ...confinement,\n                        files: confinement.files\n                            .filter(file => file.file ? file.file['field'] : [])\n                            .concat(\n                                uploadResponse.map(file => {\n                                    return {\n                                        docName: file.name,\n                                        file: file\n                                    }\n                                })\n                            )\n                    } : undefined,\n                    inquiries: this.state.inquiries,\n                    update_state: this.state.updateState,\n                    accommodation_state: this.state.accommodationState,\n                    diagnosis_state: this.state.diagnosisState,\n                    physician_state: this.state.physicianState,\n                    procedure_state: this.state.procedureState,\n                    other_detail_state: this.state.otherDetailState,\n                    file_state: this.state.fileState\n                }\n            };\n            \n            API.post('tmp', JSON.stringify(payload),\n                (response) => {\n                    console.log(response);\n                    if (response._id) {\n                        this.setState({\n                            isSaving: false,\n                            snackbarMessage: 'Progress saved.',\n                            lastSave: new Date()\n                        });\n                    } else {\n                        this.setState({\n                            isSaving: false,\n                            snackbarMessage: 'Failed to save progress.'\n                        });\n                    }\n                },\n                (error) => {\n                    console.log(error);\n                    this.setState({\n                        isSaving: false,\n                        snackbarMessage: 'Failed to save progress.'\n                    });\n                });\n        });\n    }\n\n    render(): JSX.Element {\n        return (\n            <Grid container className='customer-care-main'>\n                {this.state.loadedResources !== UpdateTicketPage.RESOURCES_TO_LOAD || this.state.isSaving ? (\n                    <div \n                        style={{\n                            backgroundColor: '#00000055', \n                            zIndex: 100, \n                            position: 'fixed', \n                            width: '100%', \n                            height: '100%'}}>\n                        <Loading height='10rem'/>\n                    </div>\n                    \n                ) : (null)}\n\n                <Snackbar\n\t\t\t        anchorOrigin={{\n\t\t\t          vertical: 'top',\n\t\t\t          horizontal: 'right',\n\t\t\t        }}\n\t\t\t        open={this.state.snackbarMessage ? true : false}\n\t\t\t        autoHideDuration={6000}\n\t\t\t        onClose={() => {\n                        this.setState({snackbarMessage: null});\n                    }}\n                    message={this.state.snackbarMessage} />\n\n                <CustomModal\n                    className='modal'\n                    isOpen={this.state.isAssessmentModalOpen}\n                    handleClose={() => this.setState({isAssessmentModalOpen: false})}\n                    renderHeader={() => {\n                        return <>Missing Information</>\n                    }}\n                    renderContent={() => {\n                        return (\n                            <div className='header-2'>\n                                {this.errors.map(error => {\n                                    return (\n                                        <>\n                                        <p>{error.message}</p>\n                                        <p>\n                                            {error.targets.map(target => {\n                                                return <div>{`- ${target}`}</div>\n                                            })}\n                                        </p>\n                                        </>\n                                    );\n                                })}\n                            </div>\n                        );\n                    }}\n                    renderFooter={() => {\n                        return (\n                            <Button \n                                variant='outlined' \n                                color='primary'\n                                onClick={() => {this.setState({isAssessmentModalOpen: false})}}>\n                                Okay\n                            </Button>\n                        );\n                    }} />\n                \n                <LeftPanelSection \n                    member={this.state.member}\n                    client={this.state.client}\n                    ticket={this.state.ticket}\n                    ticketStatus='Update'\n                    disableRecentTickets\n                    disableLinkedTickets />\n\n                {this.state.confinement ? (\n                    this.renderInpatientContent(this.state.confinement)\n                ) : this.state.inquiries ? (\n                    this.renderInquiryContent(this.state.inquiries)\n                ) : null}\n\n                <TicketFooter\n                    disableFinalAssessment={this.state.ticket.ticketType === 'Inquiry'}\n                    disableAssign\n                    disableEscalate\n                    lastSave={this.state.lastSave}\n                    onSaveForNow={() => {\n                        this.saveForNow();\n                    }} \n                    onAssign={ () => null}\n                    onEscalate={() => null}\n                    onFinalAssessment={ () => {\n                        this.errors = this.getErrorList();\n                        if (this.errors.length == 0) {\n                            this.apiUpdateTicket(() => {\n                                this.props.history.push(\n                                    '#/customer-care/resolve-ticket/' +\n                                    this.props.match.params['caseId'] + '/' +\n                                    this.props.match.params['appNo'] + '/' +\n                                    this.props.match.params['ticketId']);\n                                window.location.reload();\n                            });\n                        } else {\n                            this.setState({isAssessmentModalOpen: true});\n                        }\n                    }}\n                    onUpdateTicket={() => {\n                        this.apiUpdateTicket(() => {\n                            this.props.history.push('#/customer-care/tickets');\n                            window.location.reload();\n                        });\n                    }} />\n            </Grid>\n        );\n    }\n\n    renderInpatientContent(confinement: ConfinementDetails): JSX.Element {\n        return (\n            <div className='main-content'>\n                <CustomTabs \n                    tabList={this.tabList}\n                    selectedTab={this.state.tabSelected}\n                    setSelectedTab={(index: number) => {\n                        this.setState({tabSelected: index});\n                    }} />\n                    \n                {this.state.tabSelected === 1 ? (\n                    <SummarySection \n                        ticketNo={this.state.ticket.ticketNo} \n                        updates={confinement.updates}\n                        accommodations={confinement.accommodations}\n                        diagnoses={confinement.diagnoses}\n                        physicians={confinement.physicians}\n                        procedures={confinement.procedures}\n                        items={confinement.items}\n                        provider={confinement.provider}\n                        dateAdmitted={confinement.dateAdmitted}\n                        confinementKind={confinement.confinementKind}\n                        coverage={confinement.coverage}\n                        philhealthAmount={confinement.philhealthAmount}\n                        finalBill={confinement.finalBill}\n                        dischargeDate={confinement.dischargeDate}\n                        setTabSelected={(value: number) => this.setState({tabSelected: value})}/>\n                    \n\n                ) : this.state.tabSelected === 2 ? (\n                    <UpdateSection \n                        confinement={confinement}\n                        updates={confinement.updates}\n                        state={this.state.updateState}\n                        refreshUpdatesState={() => {\n                            this.setState({confinement: confinement});\n                        }} /> \n\n                ) : this.state.tabSelected === 3 ? (\n                    this.state.ticket ? (\n                        <AccommodationsSection\n                            accommodations={confinement.accommodations}\n                            state={this.state.accommodationState}\n                            facilitiesList={this.facilities}\n                            provider={confinement.provider}\n                            dateAdmitted={confinement.dateAdmitted}\n                            confinementKind={confinement.confinementKind}\n                            refreshAccommodationsState={() => {\n                                this.setState({confinement: confinement});\n                            }} />\n                    ) : null\n\n                ) : this.state.tabSelected === 4 ? (\n                    this.state.ticket ? (\n                        <DiagnosesSection \n                            diagnoses={confinement.diagnoses}\n                            state={this.state.diagnosisState}\n                            physicians={confinement.physicians}\n                            procedures={confinement.procedures}\n                            diagnosesList={this.icd10Codes}\n                            primaryDiagnosisIndex={confinement.primaryDiagnosisIndex}\n                            refreshDiagnosisStateChange={() => {\n                                this.setState({confinement: confinement});\n                            }}\n                            setPrimaryDiagnosisIndex={(index: number) => {\n                                this.setState(prevState => ({\n                                    ...prevState,\n                                    confinement: {\n                                        ...confinement,\n                                        primaryDiagnosisIndex: index\n                                    }\n                                }));\n                            }} />\n                    ) : null\n\n                ) : this.state.tabSelected === 5 ? (\n                    <PhysiciansSection \n                        physicians={confinement.physicians}\n                        state={this.state.physicianState}\n                        physiciansList={this.doctors}\n                        diagnosesList={confinement.diagnoses}\n                        refreshPhysiciansStateChange={() => {\n                            this.setState({confinement: confinement});\n                        }} />\n\n                ) : this.state.tabSelected === 6 ? (\n                    <ProceduresSection\n                        procedures={confinement.procedures}\n                        state={this.state.procedureState}\n                        proceduresList={this.cptCodes}\n                        diagnosesList={confinement.diagnoses}\n                        physiciansList={this.doctors}\n                        refreshProceduresStateChange={() => {\n                            this.setState({confinement: confinement});\n                        }} />\n\n                ) : this.state.tabSelected === 7 ? (\n                    <DischargeDetailsSection \n                        dateAdmitted={confinement.dateAdmitted}\n                        coverage={confinement.coverage} \n                        ticketNo={confinement.ticketNo} \n                        paidBy={confinement.paidBy} \n                        philhealthAmount={confinement.philhealthAmount}\n                        finalBill={confinement.finalBill} \n                        dischargeDate={confinement.dischargeDate}\n                        onUpdateTicketStateChange={(attrName: string, value: any) => {\n                            this.setState(prevState => ({\n                                ...prevState,\n                                confinement: {\n                                    ...confinement,\n                                    [attrName]: value\n                                }\n                            }));\n                        }} />\n                    \n                ) : this.state.tabSelected === 8 ? (\n                    <OtherDetailsSection \n                        items={confinement.items}\n                        state={this.state.otherDetailState}\n                        refreshItemsStateChange={() => {\n                            this.setState({confinement: confinement});\n                        }} />\n                    \n                ) : this.state.tabSelected === 9 ? (\n                    <UploadedDocumentsSection \n                        files={confinement.files}\n                        state={this.state.fileState}\n                        refreshFilesStateChange={() => {\n                            this.setState({confinement: confinement});\n                        }} />\n                    \n                    \n                    \n                ) : null}\n            </div>\n        );\n    }\n\n    renderInquiryContent(inquiries: InquiryData[]): JSX.Element {\n        return (\n            <UpdateInquirySection \n                inquiries={inquiries}\n                refreshInquiryState={() => {\n                    this.setState({inquiries: inquiries});\n                }} />\n        );\n    }\n}","/**\n * Asynchronously loads the component for FeaturePage\n */\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Components, Utils } from '@hims/core';\nconst { loadable } = Utils;\nconst { LoadingIndicator } = Components.UI;\n\n\nexport default loadable(async () => {\n  let {HomePage,  mapStateToProps, mapDispatchToProps} = await import('./HomePage');\n  const Component = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  )(HomePage);\n  return {default: Component};\n}, {\n  fallback: <LoadingIndicator />,\n});\n","import * as React from 'react';\nimport { Grid } from '@material-ui/core';\n\ninterface IProps {\n    data: any[];\n    renderHeader: () => JSX.Element;\n    renderRow: (rowData: any, index: number) => JSX.Element;\n}\n\nexport class ComplexTable extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        return (\n            <div className='complex-table'>\n                <Grid className='header' container spacing={1}>\n                    {this.props.renderHeader()}\n                </Grid>\n                \n                {this.props.data.map((rowData, index) => {\n                    const backColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                    return (\n                        <div className='item' style={{backgroundColor: backColor}}>\n                            {this.props.renderRow(rowData, index)}\n                        </div>\n                    );\n                })}\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { ComplexTable } from 'Pages/CustomerCarePage/Components/ComplexTable';\nimport { Grid } from '@material-ui/core';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { ProcedureData, AvailmentDetails, DiagnosisData } from 'Pages/CustomerCarePage/Models';\nimport { InputArea } from 'Pages/CustomerCarePage/Components/InputArea';\nimport { CustomRadio } from 'Pages/CustomerCarePage/Components/CustomRadio';\nimport { NumberField } from 'Pages/CustomerCarePage/Components/NumberField';\n\ninterface IProps {\n    availment: AvailmentDetails;\n    refreshAvailmentState: () => void;\n}\n\n\nexport class ApproveAvailmentSection extends React.Component<IProps> {\n\n    constructor(props: IProps) {\n        super(props);\n    }\n\n    getProceduresCost = (diagnosis: DiagnosisData) => {\n        let total = 0;\n        diagnosis.procedures.map(procedure => {\n            total += procedure.amount;\n        });\n        return total;\n    }\n\n    getApprovedAvailmentsCost = () => {\n        let total = 0;\n        this.props.availment.diagnoses.map(diagnosis => {\n            diagnosis.procedures.map(procedure => {\n                total += (procedure.assessmentType === 'Approved' ? procedure.amount : 0);\n            });\n        });\n        return total;\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Approve or Disapprove Availments</div>\n                <div className='sub-section'>\n                    <div className='light-text'>PROVIDER</div>\n                    <div className='small-text'>\n                        {this.props.availment.provider.value + ' - ' + this.props.availment.provider.label}\n                    </div>\n                    <div style={{float: 'right'}}>\n                        <span className='small-text'>TOTAL AMOUNT</span>\n                        <span style={{marginLeft: '1rem'}} />\n                        <span className='header-2'>\n                            {'PHP ' + GlobalFunction.formatNumber(this.getApprovedAvailmentsCost(), true)}\n                        </span>\n                    </div>\n                </div>\n                <div className='sub-section'>\n                    <ComplexTable \n                        data={this.props.availment.diagnoses}\n                        renderHeader={() => this.renderHeader()}\n                        renderRow={(rowData: any, index: number) => \n                            this.renderRow(rowData, index)} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderHeader(): JSX.Element {\n        const headerNameStyle = {\n            margin: 0,\n            padding: '12px 0 12px 0'\n        };\n\n        return (\n            <>\n                <Grid item xs={4}>\n                    <div className='header-2' style={headerNameStyle}>Diagnosis</div>\n                </Grid>\n                <Grid item xs={3}>\n                    <div className='header-2' style={headerNameStyle}>Doctor</div>\n                </Grid>\n                <Grid item xs={2}>\n                    <div className='header-2' style={headerNameStyle}>Professional Fee</div>\n                </Grid>\n                <Grid item xs={3}>\n                    <div className='header-2' style={{...headerNameStyle, textAlign: 'right'}}>\n                        Total Amt. of Procedures\n                    </div>\n                </Grid>\n            </>\n        );\n    }\n\n    renderRow(diagnosis: DiagnosisData, _index: number): JSX.Element {\n        return (\n            <>\n                <Grid className='small-section' container>\n                    <Grid item xs={4}>\n                        {diagnosis.icd10Code.value + ' - ' + diagnosis.icd10Code.label}\n                    </Grid>\n                    <Grid item xs={3}>\n                        {diagnosis.doctors[0].name}\n                    </Grid>\n                    <Grid item xs={2}>\n                        {'PHP ' + GlobalFunction.formatNumber(diagnosis.doctors[0].fee, true)}\n                    </Grid>\n                    <Grid item xs={3} style={{fontWeight: 'bold', textAlign: 'right'}}>\n                        {'PHP ' + GlobalFunction.formatNumber(this.getProceduresCost(diagnosis), true)}\n                    </Grid>\n                </Grid>\n                <div className='line-border' />\n                {diagnosis.procedures.map((procedure, index) => {\n                    return this.renderProcedure(procedure, index);\n                })}\n            </>\n        );\n    }\n\n    renderProcedure(procedure: ProcedureData, index: number): JSX.Element {\n        return (\n            <>\n            <div className='line-border' />\n            <div className='section' >\n                \n                <Grid container>\n                    <Grid item xs={4}>\n                        <div>\n                            <Grid container>\n                                <Grid item xs={2} style={{padding: '0 0.5rem', marginTop: '-3px'}}>\n                                    <div className='number-item'>{index + 1}</div>\n                                </Grid>\n                                <Grid item xs={10} className='header-2'>\n                                    {procedure.cptCode.value + ' - ' + procedure.cptCode.label}\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Grid>\n                    \n                </Grid>\n                <Grid container spacing={1}>\n                    <Grid item xs={4}>\n                        <div>\n                            <Grid container>\n                                <Grid item xs={2} />\n                                <Grid item xs={10}>\n                                    <div className='sub-section'>\n                                        <div className='light-text'>AMOUNT</div>\n                                        <div className='small-text'>{'PHP ' + GlobalFunction.formatNumber(procedure.amount, true)}</div>\n                                    </div>\n                                    <div className='sub-section'>\n                                        <div className='light-text'>PHILHEALTH REQUIRED?</div>\n                                        <div className='small-text'>{procedure.isPHIC ? 'Yes' : 'No'}</div>\n                                    </div>\n                                    <div className='sub-section'>\n                                        <div className='light-text'>DATE OF AVAILMENT</div>\n                                        <div className='small-text'>{GlobalFunction.toCommonDateString(procedure.dateAdded)}</div>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <div className='sub-section'>\n                            <div className='light-text'>SYSTEM ASSESSMENT</div>\n                            <div className='small-text'>{'Approve *'}</div>\n                        </div>\n                        <div className='sub-section'>\n                            <div className='light-text'>REMAINING BALANCE</div>\n                            <div className='small-text'>{'PHP ' + 0 + '.00 *'}</div>\n                        </div>\n                        <div className='sub-section'>\n                            <div className='light-text'>CLAUSE</div>\n                            <div className='small-text'>{'Laboratory tests, x-rays, and other diagnostic examinations prescribed by the INTELLICARE physician*'}</div>\n                        </div>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <div className='sub-section'>\n                            <div className='light-text'>Choose Assessment</div>\n                            <CustomRadio \n                                label='Approve'\n                                checkedCondition={procedure.assessmentType === 'Approved'}\n                                onChange={() => {\n                                    procedure.assessmentType = 'Approved';\n                                    this.props.refreshAvailmentState();\n                                }} />\n                            {procedure.assessmentType === 'Approved' ? (\n                                <NumberField\n                                    value={procedure.approvedAmount}\n                                    placeholder='Partial (optional)'\n                                    isFloat\n                                    onChange={(value: number) => {\n                                        procedure.approvedAmount = value;\n                                        this.props.refreshAvailmentState();\n                                    }} />\n                            ) : null}\n                            <CustomRadio \n                                label='Disapprove'\n                                checkedCondition={procedure.assessmentType === 'Disapproved'}\n                                onChange={() => {\n                                    procedure.assessmentType = 'Disapproved';\n                                    this.props.refreshAvailmentState();\n                                }} />\n                            <CustomRadio \n                                label='Pending'\n                                checkedCondition={procedure.assessmentType === 'Pending'}\n                                onChange={() => {\n                                    procedure.assessmentType = 'Pending';\n                                    this.props.refreshAvailmentState();\n                                }} />\n                        </div>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <div className='sub-section'>\n                            <div className='light-text'>Remarks</div>\n                            <InputArea\n                                value={procedure.assessmentRemarks}\n                                defaultRows={5}\n                                onChange={(value: string) => {\n                                    procedure.assessmentRemarks = value;\n                                    this.props.refreshAvailmentState();\n                                }} />\n                        </div>\n                    </Grid>\n                </Grid>\n            </div>\n            </>\n        );\n    }\n}","import * as React from 'react';\nimport { Grid, TableCell, TableRow } from '@material-ui/core';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { API } from 'Pages/CustomerCarePage/API';\nimport { PartialBenefitData } from 'Pages/CustomerCarePage/Models';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\nimport { faSort } from '@fortawesome/free-solid-svg-icons';\nimport { LabelDisplayedRowsArgs } from '@material-ui/core/TablePagination';\nimport { Loading } from 'Pages/CustomerCarePage/Components/Loading';\n\ninterface IProps {\n    memberId: string;\n}\n\ninterface IStates {\n    benefitCategory: string;\n    benefitName: string;\n    limitType: string;\n    limit: string;\n\n    benefitListUpdated: boolean;\n}\n\n\nexport class CheckBenefitSection extends React.Component<IProps, IStates> {\n\n    benefits: PartialBenefitData[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            benefitCategory: '',\n            benefitName: '',\n            limitType: '',\n            limit: '',\n            benefitListUpdated: false\n        }\n\n        this.benefits = [];\n    }\n\n    componentDidMount() {\n        this.loadBenefitsData();\n    }\n\n    loadBenefitsData(): void {\n        API.get(`customer-care/members/${this.props.memberId}/benefits`, \n            (response) => {\n                console.log(response);\n                this.benefits = this.combineNodes(\n                        response.filter(benefit => benefit.level == 6),\n                        response.filter(benefit => benefit.level == 7)\n                    ).map(benefit => {\n                        return {\n                            category: benefit.parent_name,\n                            name: benefit.name,\n                            limitType: (benefit.limits.length > 0 ? benefit.limits[0].type : 'None'),\n                            limit: (benefit.limits.length > 0 ? (\n                                benefit.limits[0].limit + ' ' + benefit.limits[0].limit_unit\n                            ) : '---')\n                        }\n                    });\n                this.setState({benefitListUpdated: true});\n\n                /* Testing only */\n                console.log(\n                    this.combineNodes(\n                        response.filter(benefit => benefit.level == 6),\n                        response.filter(benefit => benefit.level == 7)\n                    )\n                );\n            },\n            (error) => {\n                console.log(error);\n            });\n    }\n\n    combineNodes = (parentNodes, childNodes) => {\n        const nodes = parentNodes.reduce ((result, parent) => {\n            parent.children.map ((child) => {\n            let foundChild = childNodes.find ((childNode) => child === childNode._id);\n        \n            if (foundChild) {\n                let child = Object.assign({}, foundChild);\n        \n                child['parent_name'] = parent.name;\n                child['parent_code'] = parent.code;\n                child['disabled'] = false;\n                result.push(child);\n            }\n            });\n        \n            return result;\n        }, new Array());\n        \n        return nodes;\n    };\n\n    getFilteredBenefitsData = () => {\n        return (\n            this.benefits\n                .filter(benefit => \n                    this.state.benefitCategory === '' || \n                    benefit.category.toLowerCase().includes(this.state.benefitCategory.toLowerCase()))\n                .filter(benefit => \n                    this.state.benefitName === '' || \n                    benefit.name.toLowerCase().includes(this.state.benefitName.toLowerCase()))\n                .filter(benefit => \n                    this.state.limitType === '' || \n                    benefit.limitType.toLowerCase().includes(this.state.limitType.toLowerCase()))\n                .filter(benefit => \n                    this.state.limit === '' || \n                    benefit.limit.toLowerCase().includes(this.state.limit.toLowerCase()))\n        );\n    }\n    \n    sortBenefits(attrName: string, isAsc: boolean): void {\n        this.benefits.sort((a: PartialBenefitData, b: PartialBenefitData) => \n            (a[attrName] && b[attrName] && a[attrName].toString().toLowerCase() > b[attrName].toString().toLowerCase()) ? \n                (isAsc ? 1 : -1) : (isAsc ? -1 : 1)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Check Benefits</div>\n                <div className='sub-section' />\n                <Grid container className='sub-section' spacing={5}>\n                    {this.renderSideBar()}\n\n                    {this.state.benefitListUpdated ? (\n                        this.renderBenefitsList()\n                    ) : (\n                        <Grid item xs={10}>\n                            <Loading height='10rem'/>\n                        </Grid>\n                    )}\n                    \n                </Grid>\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderSideBar(): JSX.Element {\n        const rightBorderStyle = {\n            borderRight: '#3C394A22 solid 1px'\n        }\n        return (\n            <Grid item xs={2} style={rightBorderStyle}>\n                    <div className='small-text'>Contract ID</div>\n                    <div className='header-1'>{'2019-0928*'}</div>\n                <div className='sub-section'>\n                    <div className='small-text'>Room and Board</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>COVERAGE</div>\n                    <div className='sub-section'>\n                        <TextButton \n                            label='APE' \n                            onClick={() => {\n                                this.setState({benefitListUpdated: false});\n                                this.loadBenefitsData();\n                            }} />\n                    </div>\n                    <div className='sub-section'>\n                        <TextButton \n                            label='PPE' \n                            onClick={() => {\n                                this.setState({benefitListUpdated: false});\n                                this.loadBenefitsData();\n                            }} />\n                    </div>\n                    <div className='sub-section'>\n                        <TextButton \n                            label='Inpatient' \n                            onClick={() => {\n                                this.setState({benefitListUpdated: false});\n                                this.loadBenefitsData();\n                            }} />\n                    </div>\n                    <div className='sub-section'>\n                        <TextButton \n                            label='Outpatient' \n                            onClick={() => {\n                                this.setState({benefitListUpdated: false});\n                                this.loadBenefitsData();\n                            }} />\n                    </div>\n                    <div className='sub-section'>\n                        <TextButton \n                            label='Emergency' \n                            onClick={() => {\n                                this.setState({benefitListUpdated: false});\n                                this.loadBenefitsData();\n                            }} />\n                    </div>\n                </div>\n\n                <div className='sub-section'>\n                    <div className='header-1 light-text'>RIDERS</div>\n                </div>\n\n            </Grid>\n        );\n    }\n\n    renderBenefitsList(): JSX.Element {\n\n        return (\n            <Grid item xs={10}>\n                <div className='sub-section'>\n                    <CustomTable\n                        rows={this.getFilteredBenefitsData()}\n                        renderHeader={() => this.renderTableHeader()}\n                        renderRow={(rowData: any, index: number) => \n                            this.renderTableRow(rowData, index)}\n                        onChangeInfo={(info: LabelDisplayedRowsArgs) => \n                            `${info.from}-${info.to} out of ${info.count} benefits`}\n                        labelRowsPerPage='Show'\n                        rowsPerPageOptions={[10, 25, 50]} />\n                </div>\n\n            </Grid>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n\n        return (\n            <>\n            {this.renderHeaderColumn('benefitCategory', 'Benefit Category', '150px')}\n            {this.renderHeaderColumn('benefitName', 'Benefit', '250px')}\n            {this.renderHeaderColumn('limitType', 'Limit Type', '100px')}\n            {this.renderHeaderColumn('limit', 'Limit', '100px')}\n            </>\n        );\n    }\n\n    renderTableRow(benefit: PartialBenefitData, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                <TableCell>{benefit.category}</TableCell>\n                <TableCell>{benefit.name}</TableCell>\n                <TableCell>{benefit.limitType}</TableCell>\n                <TableCell>{benefit.limit}</TableCell>\n            </TableRow>\n        );\n    }\n\n    renderHeaderColumn(attrName: string, headerText: string, width: string): JSX.Element {\n        return (\n            <TableCell style={{width: width}}>\n                <span className='header-2'>{headerText}</span>\n                <div style={{float: 'right'}}>\n                    <IconButton \n                        icon={faSort} \n                        onClick={() => {\n                            this.sortBenefits(attrName, true);\n                            this.setState({benefitListUpdated: true});\n                        }} />\n                </div>\n                <InputField\n                    value={this.state[attrName]}\n                    onChange={(value: string) => {\n                        this.setState(prevState => ({...prevState, [attrName]: value}));\n                    }} />\n            </TableCell>\n        );\n    }\n}","import * as React from 'react';\nimport { ComplexTable } from 'Pages/CustomerCarePage/Components/ComplexTable';\nimport { Grid, TableCell, TableRow } from '@material-ui/core';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { ProcedureData, AvailmentDetails, DiagnosisData, LOAData, DropdownChoice } from 'Pages/CustomerCarePage/Models';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { NumberField } from 'Pages/CustomerCarePage/Components/NumberField';\nimport { DatePicker } from 'Pages/CustomerCarePage/Components/DatePicker';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { faPlus, faMinusCircle } from '@fortawesome/free-solid-svg-icons';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\nimport { ConfinementDetails } from '../ResolveTicketPage';\n\ninterface IProps {\n    availment?: AvailmentDetails;\n    loas: LOAData[];\n    loaToDelete: string[];\n    canEditLOAs: boolean;\n    refreshLOAStates: () => void;\n}\n\ninterface IStates {\n    loaNumber: number;\n    status: DropdownChoice;\n    amount: number;\n    loaDate: Date;\n    notes: string;\n}\n\nexport class SummaryAvailmentSection extends React.Component<IProps, IStates> {\n\n    APPROVED = 'Approved';\n    DISAPPROVED = 'Disapproved';\n    PENDING = 'Pending';\n\n    loaTypes: DropdownChoice[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            loaNumber: 0,\n            status: { value: '', label: '' },\n            amount: 0,\n            loaDate: new Date(),\n            notes: ''\n        }\n\n        this.loaTypes = [\n            { value: '1', label: 'Pending' },\n            { value: '2', label: 'Claimed' },\n            { value: '3', label: 'Disapproved' }\n        ]\n    }\n\n    getProceduresCost = (diagnosis: DiagnosisData) => {\n        let total = 0;\n        diagnosis.procedures.map(procedure => {\n            total += procedure.amount;\n        })\n        return total;\n    }\n\n    getApprovedAvailments = (availment: AvailmentDetails | ConfinementDetails) => {\n        const approvedAvailments = availment.diagnoses.map(diagnosis => {\n            return {\n                ...diagnosis,\n                procedures: diagnosis.procedures\n                    .filter(procedure => procedure.assessmentType === this.APPROVED)\n                    .map(procedure => {return procedure;})\n            };\n        });\n        return approvedAvailments.filter(availment => availment.procedures.length > 0);\n    }\n\n    getDisapprovedAvailments = (availment: AvailmentDetails | ConfinementDetails) => {\n        const disapprovedAvailments = availment.diagnoses.map(diagnosis => {\n            return {\n                ...diagnosis,\n                procedures: diagnosis.procedures\n                    .filter(procedure => procedure.assessmentType === this.DISAPPROVED)\n                    .map(procedure => {return procedure;})\n            };\n        });\n        return disapprovedAvailments.filter(availment => availment.procedures.length > 0);\n    }\n\n    getApprovedAvailmentsCost = (availment: AvailmentDetails | ConfinementDetails) => {\n        let total = 0;\n        availment.diagnoses.map(diagnosis => {\n            diagnosis.procedures.map(procedure => {\n                total += (procedure.assessmentType === this.APPROVED ? procedure.amount : 0);\n            });\n        });\n        return total;\n    }\n\n    render(): JSX.Element {\n        if (this.props.availment) {\n            return this.renderAvailment(this.props.availment);\n        } else {\n            return <div>WALANG AVAILMENT</div>\n        }\n    }\n\n    renderAvailment(availment: AvailmentDetails | ConfinementDetails): JSX.Element {\n        const approvedAvailments = this.getApprovedAvailments(availment);\n        const disapprovedAvailments = this.getDisapprovedAvailments(availment);\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Summary of Approved Availments</div>\n                <div className='sub-section'>\n                    <div className='light-text'>PROVIDER</div>\n                    <div className='small-text'>\n                        {availment.provider.value + ' - ' + availment.provider.label}\n                    </div>\n                    <div style={{float: 'right'}}>\n                        <span className='small-text'>TOTAL AMOUNT</span>\n                        <span style={{marginLeft: '1rem'}} />\n                        <span className='header-2'>\n                            {'PHP ' + GlobalFunction.formatNumber(this.getApprovedAvailmentsCost(availment), true)}\n                        </span>\n                    </div>\n                </div>\n                {approvedAvailments.length > 0 ? (\n                    <div className='sub-section'>\n                        <ComplexTable \n                            data={this.getApprovedAvailments(availment)}\n                            renderHeader={() => this.renderHeader()}\n                            renderRow={(rowData: any, index: number) => \n                                this.renderRow(rowData, index)} />\n                    </div>\n                ) : null}\n                <div className='sub-section'>\n                    <CustomTable\n                        className={!this.props.canEditLOAs ? 'custom-table' : undefined}\n                        rows={this.props.loas}\n                        renderHeader={() => this.renderLOAHeader(this.props.canEditLOAs)}\n                        renderRow={(rowData: any, index: number) => \n                            this.renderLOARow(rowData, index)} />\n                </div>\n                <div className='sub-section' />\n                {disapprovedAvailments.length > 0 ? (\n                    <>\n                    <div className='header-1' style={{color: '#FD5451'}}>Disapproved Availments</div>\n                    <div className='sub-section'>\n                        <ComplexTable \n                            data={this.getDisapprovedAvailments(availment)}\n                            renderHeader={() => this.renderHeader()}\n                            renderRow={(rowData: any, index: number) => \n                                this.renderRow(rowData, index)} />\n                    </div>\n                    </>\n                ) : null}\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderHeader(): JSX.Element {\n        const headerNameStyle = {\n            margin: 0,\n            padding: '12px 0 12px 0'\n        };\n\n        return (\n            <>\n                <Grid item xs={4}>\n                    <div className='header-2' style={headerNameStyle}>Diagnosis</div>\n                </Grid>\n                <Grid item xs={4}>\n                    <div className='header-2' style={headerNameStyle}>Doctor</div>\n                </Grid>\n                <Grid item xs={2}>\n                    <div className='header-2' style={headerNameStyle}>Professional Fee</div>\n                </Grid>\n                <Grid item xs={2}>\n                    <div className='header-2' style={{...headerNameStyle, textAlign: 'right'}}>\n                        Total Amt. of Procedures\n                    </div>\n                </Grid>\n            </>\n        );\n    }\n\n    renderRow(diagnosis: DiagnosisData, _index: number): JSX.Element {\n        return (\n            <>\n                <Grid className='small-section' container>\n                    <Grid item xs={4}>\n                        {diagnosis.icd10Code.value + ' - ' + diagnosis.icd10Code.label}\n                    </Grid>\n                    <Grid item xs={4}>\n                        {diagnosis.doctors[0].id + ' - ' + diagnosis.doctors[0].name}\n                    </Grid>\n                    <Grid item xs={2}>\n                        {'PHP ' + GlobalFunction.formatNumber(diagnosis.doctors[0].fee, true)}\n                    </Grid>\n                    <Grid item xs={2} style={{fontWeight: 'bold', textAlign: 'right'}}>\n                        {'PHP ' + GlobalFunction.formatNumber(this.getProceduresCost(diagnosis), true)}\n                    </Grid>\n                </Grid>\n                <div className='line-border' />\n                {diagnosis.procedures.map((procedure, index) => {\n                    return this.renderProcedure(procedure, index);\n                })}\n            </>\n        );\n    }\n\n    renderProcedure(procedure: ProcedureData, index: number): JSX.Element {\n\n        return (\n            <>\n            <div className='line-border' />\n            <div className='section' >\n                <Grid container>\n                    <Grid item xs={4}>\n                        <div>\n                            <Grid container>\n                                <Grid item xs={2} style={{padding: '0 0.5rem', marginTop: '-3px'}}>\n                                    <div className='number-item'>\n                                    {index + 1}\n                                    </div>\n                                </Grid>\n                                <Grid item xs={10} className='header-2'>\n                                    {procedure.cptCode.value + ' - ' + procedure.cptCode.label}\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Grid>\n                </Grid>\n                <Grid container>\n                    <Grid item xs={4}>\n                        <div>\n                            <Grid container>\n                                <Grid item xs={2} />\n                                <Grid item xs={10}>\n                                    <div className='sub-section'>\n                                        <div className='light-text'>AMOUNT</div>\n                                        <div className='small-text'>{'PHP ' + GlobalFunction.formatNumber(procedure.amount, true)}</div>\n                                    </div>\n                                    <div className='sub-section'>\n                                        <div className='light-text'>PHILHEALTH REQUIRED?</div>\n                                        <div className='small-text'>{procedure.isPHIC ? 'Yes' : 'No'}</div>\n                                    </div>\n                                    <div className='sub-section'>\n                                        <div className='light-text'>DATE OF AVAILMENT</div>\n                                        <div className='small-text'>{GlobalFunction.toCommonDateString(procedure.dateAdded)}</div>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <div className='sub-section'>\n                            <div className='light-text'>SYSTEM ASSESSMENT</div>\n                            <div className='small-text'>{'Approve *'}</div>\n                        </div>\n                        <div className='sub-section'>\n                            <div className='light-text'>REMAINING BALANCE</div>\n                            <div className='small-text'>{'PHP ' + 0 + '.00 *'}</div>\n                        </div>\n                        <div className='sub-section'>\n                            <div className='light-text'>CLAUSE</div>\n                            <div className='small-text'>{'Laboratory tests, x-rays, and other diagnostic examinations prescribed by the INTELLICARE physician*'}</div>\n                        </div>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <div className='sub-section'>\n                            <div className='light-text'>ASSESSMENT</div>\n                            <div className='header-2'>{procedure.assessmentType}</div>\n                        </div>\n                        <div className='sub-section'>\n                            <div className='light-text'>REMARKS</div>\n                            <div className='small-text'>\n                                {procedure.assessmentRemarks ? procedure.assessmentRemarks : 'NONE'}\n                            </div>\n                        </div>\n                    </Grid>\n                </Grid>\n            </div>\n            </>\n        );\n    }\n\n    renderLOAHeader(canEdit: boolean): JSX.Element {\n        if (canEdit) {\n            return (\n                <>\n                <TableCell style={{minWidth: '100px', maxWidth: '100px'}}>\n                    <div className='header-2'>LOA Number</div>\n                    <NumberField\n                        value={this.state.loaNumber}\n                        disableDelimiter={true}\n                        onChange={(value: number) => this.setState({loaNumber: value})} />\n                        \n                </TableCell>\n                <TableCell style={{minWidth: '100px', maxWidth: '100px'}}>\n                    <div className='header-2'>Amount</div>\n                    <NumberField\n                        value={this.state.amount}\n                        onChange={(value: number) => this.setState({amount: value})} />\n                </TableCell>\n                <TableCell style={{minWidth: '100px', maxWidth: '100px'}}>\n                    <div className='header-2'>Date</div>\n                    <DatePicker\n                        value={this.state.loaDate}\n                        onChange={(value: Date) => this.setState({loaDate: value})} />\n                </TableCell>\n                <TableCell>\n                    <div className='header-2'>Notes</div>\n                    <InputField\n                        value={this.state.notes}\n                        onChange={(value: string) => this.setState({notes: value})} />\n                </TableCell>\n                <TableCell style={{width: '100px', textAlign: 'center'}}>\n                    <TextButton \n                        label='Add LOA'\n                        icon={faPlus}\n                        onClick={() => {\n                            this.props.loas.push({\n                                loaNo: this.state.loaNumber,\n                                amount: this.state.amount,\n                                date: this.state.loaDate,\n                                notes: this.state.notes\n                            });\n                            this.props.refreshLOAStates();\n                            this.setState({\n                                loaNumber: 0, \n                                status: { value: '', label: '' },\n                                amount: 0,\n                                loaDate: new Date(),\n                                notes: ''\n                            });\n                        }}/>\n                </TableCell>\n                </>\n            );\n        }\n\n        return (\n            <>\n            <TableCell style={{minWidth: '100px', maxWidth: '100px'}}>LOA Number</TableCell>\n            <TableCell style={{minWidth: '100px', maxWidth: '100px'}}>Amount</TableCell>\n            <TableCell style={{minWidth: '100px', maxWidth: '100px'}}>Date</TableCell>\n            <TableCell>Notes</TableCell>\n            </>\n        );\n    }\n\n    renderLOARow(loa: LOAData, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                <TableCell>{loa.loaNo}</TableCell>\n                <TableCell>{`${GlobalFunction.formatNumber(loa.amount)} PHP`}</TableCell>\n                <TableCell>{GlobalFunction.toShortDateString(loa.date)}</TableCell>\n                <TableCell>{loa.notes}</TableCell>\n                {this.props.canEditLOAs ? (\n                    <TableCell>\n                        <Grid container>\n                            <Grid item xs={6} />\n                            <Grid item xs={6}>\n                                <IconButton\n                                    icon={faMinusCircle}\n                                    onClick={() => {\n                                        if (loa.id) {\n                                            this.props.loaToDelete.push(loa.id);\n                                        }\n                                        this.props.loas.splice(index, 1);\n                                        this.props.refreshLOAStates();\n                                    }}/>\n                            </Grid>\n                        </Grid>\n                    </TableCell>\n                ) : null}\n            </TableRow>\n        );\n    }\n}","import * as React from 'react';\n// import { TicketData } from 'Pages/CustomerCarePage/Models';\nimport { API } from 'Pages/CustomerCarePage/API';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\nimport { Grid } from '@material-ui/core';\nimport { TicketData, AvailmentDetails, ConfinementDetails } from 'Pages/CustomerCarePage/Models';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\n\ninterface IProps {\n    ticketId: string;\n    onCloseButtonClicked: () => void;\n}\n\ninterface IStates {\n    ticket?: TicketData;\n    availment?: AvailmentDetails;\n    confinement?: ConfinementDetails;\n}\n\nexport class TicketInfoModal extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            \n        };\n    }\n\n    componentDidMount() {\n        console.log(this.props.ticketId);\n\n        API.get('customer-care/tickets/' + this.props.ticketId, \n            (response) => {\n                const ticketCategory = response.ticket_category;\n                const availmentDetails = ticketCategory.availment_details;\n                const confinementDetails = ticketCategory.confinement_details;\n                this.setState({ticket: {\n                    ticketChannel: response.received_via,\n                    transactionNo: response.transaction_no,\n                    ticketSource: response.received_from,\n                    memberName: response.member_name,\n                    clientName: response.corporate_client,\n                    brokerName: response.broker,\n                    facility: { value: '', label: response.hospital_name },\n                    department: response.department,\n                    callerName: response.caller_name,\n                    contactNo: response.contact_no,\n                    ticketType: ticketCategory.ticket_type,\n                    specificType: ticketCategory.specific_type,\n                    urgency: ticketCategory.urgency,\n                    agent: { id: '', name: ticketCategory.assign_to },\n                    additionalNotes: response.additional_notes,\n                    additionalFiles: [],\n                    ticketNo: response.ticket_no,\n                    pmCaseId: response.pmaker_case_uid,\n                    status: response.status,\n                    createdBy: { id: response.created_by.id, name: response.created_by.name },\n                    dateCreated: new Date(response.date_created),\n                    dateUpdated: new Date(response.date_updated),\n                    dateEscalated: new Date(response.date_escalated)\n                }});\n                \n                if (availmentDetails) {\n                    const providerData = availmentDetails.provider.split(' - ');\n                    this.setState({availment: {\n                        provider: { value: providerData[0], label: providerData[1] },\n                        diagnoses: availmentDetails.availments_list.map(diagnosis => {\n                            return {\n                                icd10Code: { value: diagnosis.code, label: diagnosis.name },\n                                remarks: diagnosis.remarks,\n                                isPrimary: diagnosis.is_primary,\n                                isFinal: diagnosis.is_final,\n                                doctors: diagnosis.doctors.map(doctor => {\n                                    return {\n                                        id: doctor.id,\n                                        name: doctor.name,\n                                        specialization: doctor.specialization,\n                                        fee: doctor.fee,\n                                        noOfVisits: doctor.no_of_visits,\n                                        remarks: doctor.remarks\n                                    }\n                                }),\n                                procedures: diagnosis.procedures.map(procedure => {\n                                    return {\n                                        cptCode: { value: procedure.code, label: procedure.name },\n                                        isPHIC: procedure.phic,\n                                        amount: parseInt(procedure.amount),\n                                        notes: procedure.notes,\n                                        assessmentType: procedure.assessment_type,\n                                        assessmentRemarks: procedure.assessment_remarks\n                                    }\n                                })\n                            }\n                        })\n                    }});\n                }\n\n                if (confinementDetails) {\n                    const providerData = availmentDetails.provider.split(' - ');\n                    this.setState({availment: {\n                        provider: { value: providerData[0], label: providerData[1] },\n                        diagnoses: availmentDetails.availments_list.map(diagnosis => {\n                            return {\n                                icd10Code: { value: diagnosis.code, label: diagnosis.name },\n                                remarks: diagnosis.remarks,\n                                isPrimary: diagnosis.is_primary,\n                                isFinal: diagnosis.is_final,\n                                doctors: diagnosis.doctors.map(doctor => {\n                                    return {\n                                        id: doctor.id,\n                                        name: doctor.name,\n                                        specialization: doctor.specialization,\n                                        fee: doctor.fee,\n                                        noOfVisits: doctor.no_of_visits,\n                                        remarks: doctor.remarks\n                                    }\n                                }),\n                                procedures: diagnosis.procedures.map(procedure => {\n                                    return {\n                                        cptCode: { value: procedure.code, label: procedure.name },\n                                        isPHIC: procedure.phic,\n                                        amount: parseInt(procedure.amount),\n                                        notes: procedure.notes,\n                                        assessmentType: procedure.assessment_type,\n                                        assessmentRemarks: procedure.assessment_remarks\n                                    }\n                                })\n                            }\n                        })\n                    }});\n                }\n            },\n            (error) => {\n                console.log(error);\n            });\n    }\n\n    getTotalAailmentProcedureCost(): number {\n        let total = 0;\n\n        if (this.state.availment) {\n            this.state.availment.diagnoses.map(diagnosis => \n                diagnosis.procedures.map(procedure => \n                    total += procedure.amount\n                )\n            )\n        }\n        \n        return total;\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='ticket-modal section'>\n                <div style={{float: 'right', marginTop: '-1rem', fontSize: '1rem'}}>\n                    <IconButton \n                        icon={faTimes} \n                        onClick={() => {\n                            this.props.onCloseButtonClicked();\n                        }} />\n                </div>\n                {this.state.ticket ? (\n                    this.renderTicketInfo(this.state.ticket)\n                ) : null}\n            </div>\n        )\n    }\n\n    renderTicketInfo(ticket: TicketData): JSX.Element {\n        return (\n            <>\n            <div className='sub-sections'>\n                <div className='header-1'>{'Ticket 0000823'}</div>\n                <div className='text'>{ticket.status + ' - ' + ticket.urgency + ', Due on May 23, 2019*'}</div>\n            </div>\n            <div className='sub-section'>\n                {/* <div className='text'>{name}</div>\n                <div className='text'>{\"Happytime Technology Inc.\"}</div>\n                <div className='text'>{'Rank and File - Principal'}</div> */}\n                <Grid container>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>TICKET TYPE</div>\n                        <div className='small-text'>{ticket.ticketType}</div>\n                    </Grid>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>SPECIFIC TYPE</div>\n                        <div className='small-text'>{ticket.specificType}</div>\n                    </Grid>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>RECEIVED VIA</div>\n                        <div className='small-text'>{ticket.ticketChannel}</div>\n                    </Grid>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>CALL TRANSACTION NO.</div>\n                        <div className='small-text'>{ticket.transactionNo}</div>\n                    </Grid>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>RECEIVED FROM</div>\n                        <div className='small-text'>{'??? ' + '(' + ticket.ticketSource + ')'}</div>\n                    </Grid>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>NUMBER / EMAIL</div>\n                        <div className='small-text'>{ticket.contactNo}</div>\n                    </Grid>\n                </Grid>\n                <div className='sub-section'>\n                    <div className='light-text'>ASSIGNED TO</div>\n                    <div className='small-text'>{ticket.agent.name}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>DIAGNOSIS — PROCEDURES</div>\n                    {this.state.availment ? (\n                        <Grid container spacing={2} className='sub-section'>\n                            {this.state.availment.diagnoses.map((diagnosis, index) => {\n                                return (\n                                    <>\n                                    <Grid item xs={12} className='header-2'>\n                                        {(index + 1) + '. ' +\n                                         diagnosis.icd10Code.value + ' - ' + \n                                         diagnosis.icd10Code.label}\n                                    </Grid>\n                                    {diagnosis.procedures.map((procedure, index2) => {\n                                        return (\n                                            <>\n                                            <Grid item xs={1} />\n                                            <Grid item xs={11} className='small-text'>\n                                                {(index2 + 10).toString(36) + '. ' + procedure.cptCode.label}\n                                            </Grid>\n                                            </>\n                                        );\n                                    })}\n                                    </>\n                                );\n                            })}\n                        </Grid>\n                    ) : null}\n                    {/* <div className='sub-section'> */}\n                    <div style={{paddingTop: '0.5rem'}} />\n                    <div className='header-2'>{'TOTAL: PHP ' + GlobalFunction.formatNumber(this.getTotalAailmentProcedureCost(), true)}</div>\n                {/* </div> */}\n                </div>\n                \n                <div className='sub-section'>\n                    <div className='light-text'>CREATED BY</div>\n                    <div className='small-text'>{ticket.createdBy.name}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>DATE AND TIME CREATED</div>\n                    <div className='small-text'>{GlobalFunction.toDateAndTime(ticket.dateCreated)}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>DATE AND TIME LAST UPDATED</div>\n                    <div className='small-text'>{GlobalFunction.toDateAndTime(ticket.dateUpdated)}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>DATE AND TIME LAST ESCALATED</div>\n                    <div className='small-text'>{\"May 14, 2019 — 09:33:00 AM*\"}</div>\n                </div>\n                {/* <div className='sub-section'> */}\n                    \n                {/* </div> */}\n            </div>\n            <TextButton\n                        label='View More'\n                        onClick={() => {\n\n                        }} />\n            </>\n        )\n    }\n}","import * as React from 'react';\nimport { TableCell, TableRow } from '@material-ui/core';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\n\nimport { DropdownChoice, PartialTicketData } from 'Pages/CustomerCarePage/Models';\nimport { API } from 'Pages/CustomerCarePage/API';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\nimport { faSort } from '@fortawesome/free-solid-svg-icons';\nimport { TicketInfoModal } from './TicketInfoModal';\nimport { LabelDisplayedRowsArgs } from '@material-ui/core/TablePagination';\nimport { Loading } from 'Pages/CustomerCarePage/Components/Loading';\n\ninterface IProps {\n    ticketNo: string;\n}\n\ninterface IStates {\n    urgency: number;\n    status: string;\n    ticketNo: string;\n    channel: string;\n    type: string;\n    specificType: string;\n    source: string;\n    assignee: string;\n    lastUpdate: string;\n    ticketListUpdated: boolean;\n    selectedTicketId?: string;\n}\n\nexport class ReviewTicketsSection extends React.Component<IProps, IStates> {\n\n    ticketChannels: DropdownChoice[];\n    ticketTypes: DropdownChoice[];\n    specificTypes: DropdownChoice[];\n    tickets: PartialTicketData[];\n\n    constructor(props: any) {\n        super(props);\n\n        this.ticketChannels = [\n            { value: '0', label: '' },\n            { value: '1', label: 'Call' },\n            { value: '2', label: 'SMS' },\n            { value: '3', label: 'Text' },\n            { value: '4', label: 'Email' }\n        ];\n\n        this.ticketTypes = [\n            { value: '0', label: '' },\n            { value: '1', label: 'Availment' },\n            { value: '2', label: 'Inquiry' }\n        ];\n\n        this.specificTypes = [\n            { value: '0', label: '' },\n            { value: '1', label: 'Outpatient Procedure' },\n            { value: '2', label: 'Inpatient' },\n            { value: '3', label: 'Emergency Room' },\n            { value: '4', label: 'Consultation' }\n        ];\n\n        this.state = {\n            urgency: 0,\n            status: '',\n            ticketNo: '',\n            channel: '',\n            type: '',\n            specificType: '',\n            source: '',\n            assignee: '',\n            lastUpdate: '',\n            ticketListUpdated: false,\n            selectedTicketId: undefined\n        }\n\n        this.tickets = [];\n    }\n\n    componentDidMount() {\n        API.get('customer-care/tickets',\n            (response) => {\n                this.tickets = response.map(ticket => {\n                    return {\n                        id: ticket._id,\n                        ticketNo: this.props.ticketNo,\n                        urgency: (\n                            ticket.ticket_category.urgency === 'Low' ? 3 :\n                            ticket.ticket_category.urgency === 'Medium' ? 2 : \n                            ticket.ticket_category.urgency === 'High' ? 1 : 0),\n                        status: ticket.status,\n                        channel: ticket.received_via,\n                        type: ticket.ticket_category.ticket_type,\n                        specificType: ticket.ticket_category.specific_type,\n                        source: {\n                            value: ticket.received_from.toUpperCase(), \n                            label: (\n                                ticket.member_name ? ticket.member_name :\n                                ticket.corporate_client ? ticket.corporate_client :\n                                ticket.broker ? ticket.broker :\n                                ticket.hospital_name ? ticket.hospital_name : ''\n                            )\n                        },\n                        assignee: ticket.ticket_category.assign_to,\n                        lastUpdate: new Date(ticket.date_updated),\n                    }\n                });\n                this.setState({ticketListUpdated: true});\n            },\n            (error) => {\n                console.log(error);\n            });\n    }\n\n    getFilteredTicketData = () => {\n        return (\n            this.tickets\n                .filter(ticket => \n                    this.state.urgency === 0 || \n                    isNaN(this.state.urgency) ||\n                    ticket.urgency === this.state.urgency)\n                .filter(ticket => \n                    this.state.status === '' || \n                    ticket.status\n                        .toLowerCase()\n                        .includes(this.state.status.toLowerCase()))\n                .filter(ticket => \n                    this.state.ticketNo === '' || \n                    ticket.ticketNo\n                        .toLowerCase()\n                        .includes(this.state.ticketNo.toLowerCase()))\n                .filter(ticket => \n                    this.state.channel === '' || \n                    ticket.channel\n                        .toLowerCase()\n                        .includes(this.state.channel.toLowerCase()))\n                .filter(ticket => \n                    this.state.type === '' || \n                    ticket.type\n                        .toLowerCase()\n                        .includes(this.state.type.toLowerCase()))\n                .filter(ticket => \n                    this.state.specificType === '' || \n                    ticket.specificType\n                        .toLowerCase()\n                        .includes(this.state.specificType.toLowerCase()))\n                .filter(ticket => \n                    this.state.source === '' || \n                    ticket.source.label\n                        .toLowerCase()\n                        .includes(this.state.source.toLowerCase()) ||\n                    ticket.source.value\n                        .toLowerCase()\n                        .includes(this.state.source.toLowerCase()))\n                .filter(ticket => \n                    this.state.assignee === '' || \n                    ticket.assignee\n                        .toLowerCase()\n                        .includes(this.state.assignee.toLowerCase()))\n                .filter(ticket => \n                    this.state.lastUpdate === '' || \n                    GlobalFunction.toShortDateString(ticket.lastUpdate)\n                        .toLowerCase()\n                        .includes(this.state.lastUpdate.toLowerCase()))\n        );\n    }\n\n    sortTickets(attrName: string, isAsc: boolean): void {\n        this.tickets.sort((a: PartialTicketData, b: PartialTicketData) => \n            (a[attrName].toString().toLowerCase() > b[attrName].toString().toLowerCase()) ? \n                (isAsc ? 1 : -1) : (isAsc ? -1 : 1)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Review Tickets</div>\n                <div className='sub-section'>\n                    {this.state.ticketListUpdated ? (\n                        <CustomTable\n                            className='custom-table-selectable'\n                            rows={this.getFilteredTicketData()}\n                            renderHeader={() => this.renderTableHeader()}\n                            renderRow={(rowData: any, index: number) => \n                                this.renderTableRow(rowData, index)}\n                            onChangeInfo={(info: LabelDisplayedRowsArgs) => \n                                `${info.from}-${info.to} out of ${info.count} tickets`}\n                            labelRowsPerPage='Show'\n                            rowsPerPageOptions={[10, 25, 50]} />\n                    ) : (\n                        <Loading height='10rem'/>\n                    )}\n                </div>\n\n                {/* Modals */}\n                {this.state.selectedTicketId ? (\n                    <TicketInfoModal \n                        ticketId={this.state.selectedTicketId}\n                        onCloseButtonClicked={() => {\n                            this.setState({selectedTicketId: undefined});\n                        }} />\n                ) : null}\n                <div className='section' />\n            </div>\n        );\n    }\n\n\n\n\n\n    renderTableHeader(): JSX.Element {\n        return (\n            <>\n            {this.renderHeaderColumn('urgency', 'Urgency')}\n            {this.renderHeaderColumn('status', 'Status')}\n            {this.renderHeaderColumn('ticketNo', 'Ticket ID')}\n            {this.renderHeaderColumn('channel', 'Channel')}\n            {this.renderHeaderColumn('type', 'Type')}\n            {this.renderHeaderColumn('specificType', 'Specific Type')}\n            {this.renderHeaderColumn('source', 'Source')}\n            {this.renderHeaderColumn('assignee', 'Assigned')}\n            {this.renderHeaderColumn('lastUpdate', 'Last Update')}\n            </>\n        );\n    }\n\n\n\n\n\n    renderTableRow = (ticket: PartialTicketData, index: number) => {\n        const backgroundColor = (index % 2 === 0 ? (\n                ticket.urgency === 1 ? '#FFF2F2' : '#FFFFFF'\n            ) : (\n                ticket.urgency === 1 ? '#F7ECEC' : '#F6F7FA'\n            ));\n\n        const urgencyColor = (\n            ticket.urgency === 3 ? '#3AB77D' :\n            ticket.urgency === 2 ? '#FAB435' :\n            ticket.urgency === 1 ? '#FD5451' : '')\n        \n        return (\n            <TableRow \n                style={{backgroundColor: backgroundColor}} \n                onClick={() => {\n                    this.setState({selectedTicketId: ticket.id});\n                }}>\n                <TableCell style={{textAlign: 'center', paddingLeft: 0}}>\n                    <div \n                        className='number-item' \n                        style={{display: 'inline-block', backgroundColor: urgencyColor}}>\n                        {ticket.urgency}\n                    </div>\n                </TableCell>\n                <TableCell>{ticket.status}</TableCell>\n                <TableCell>{ticket.ticketNo}</TableCell>\n                <TableCell>{ticket.channel}</TableCell>\n                <TableCell>{ticket.type}</TableCell>\n                <TableCell>{ticket.specificType}</TableCell>\n                <TableCell>\n                    <div className='text'>{ticket.source.label}</div>\n                    <div className='light-text' style={{fontSize: '9px'}}>\n                        {ticket.source.value}\n                    </div>\n                </TableCell>\n                <TableCell>{ticket.assignee}</TableCell>\n                <TableCell>{GlobalFunction.toDateAndTime(ticket.lastUpdate)}</TableCell>\n            </TableRow>\n        );\n    }\n\n\n\n    renderHeaderColumn(attrName: string, headerText: string): JSX.Element {\n        return (\n            <TableCell>\n                <span className='header-2'>{headerText}</span>\n                <div style={{float: 'right'}}>\n                    <IconButton \n                        icon={faSort} \n                        onClick={() => {\n                            this.sortTickets(attrName, true);\n                            this.setState({ticketListUpdated: true});\n                        }} />\n                </div>\n                <InputField\n                    value={this.state[attrName]}\n                    onChange={(value: string) => {\n                        this.setState(prevState => ({...prevState, [attrName]: value}));\n                    }} />\n            </TableCell>\n        );\n    }\n}\n\n\n","import * as React from 'react';\nimport { Grid, TableCell, TableRow, Tabs, Tab } from '@material-ui/core';\nimport { ConfinementDetails } from '../ResolveTicketPage';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { DiagnosisData, ProcedureData, DoctorData } from 'Pages/CustomerCarePage/Models';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { AccommodationData } from 'Pages/CustomerCarePage/UpdateTicketPage/UpdateTicketProps';\nimport { CustomRadio } from 'Pages/CustomerCarePage/Components/CustomRadio';\nimport { ComplexTable } from 'Pages/CustomerCarePage/Components/ComplexTable';\nimport { InputArea } from 'Pages/CustomerCarePage/Components/InputArea';\n\ninterface IProps {\n    confinement: ConfinementDetails;\n    refreshConfinementState: () => void;\n}\n\ninterface IStates {\n    selectedTab: any;\n}\n\n\nexport class ApproveInpatientSection extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            selectedTab: 0\n        }\n    }\n\n    getTotalAccommodationCost = (diagnosis: DiagnosisData) => {\n        let totalCost = 0;\n        if (diagnosis.isPrimary) {\n            this.props.confinement.accommodations.map(accommodation => {\n                totalCost += accommodation.costPerDay * accommodation.days;\n            });\n        }\n        return totalCost;\n    }\n\n    getProceduresCost = (diagnosis: DiagnosisData) => {\n        let total = 0;\n        diagnosis.procedures.map(procedure => {\n            total += procedure.amount;\n        });\n        return total;\n    }\n\n    getAttendingPhysicianCost = (diagnosis: DiagnosisData) => {\n        let total = 0;\n        diagnosis.doctors\n            .filter(doctor => doctor.type === 'Attending')\n            .map(doctor => {\n                total += doctor.fee;\n            });\n        return total;\n    }\n\n    getAvailmentCost = (diagnosis: DiagnosisData) => {\n        return (\n            this.getProceduresCost(diagnosis) +\n            this.getAttendingPhysicianCost(diagnosis) +\n            this.getTotalAccommodationCost(diagnosis)\n        );\n    }\n\n    getAllAvailmentsCost = () => {\n        let total = 0;\n        this.props.confinement.diagnoses.map(diagnosis => {\n            total += this.getAvailmentCost(diagnosis);\n        });\n        return total;\n    }\n\n    getAllProceduresCount = () => {\n        let total = 0;\n        this.props.confinement.diagnoses.map(diagnosis => {\n            total += diagnosis.procedures.length;\n        });\n        return total;\n    }\n\n    render(): JSX.Element {\n        const confinement = this.props.confinement;\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Approve or Disapprove Inpatient</div>\n                <Grid container spacing={2}>\n                    <Grid item xs={4}>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>PROVIDER</div>\n                            <div className='small-text'>\n                                {`${confinement.provider.value} - ${confinement.provider.label}`}\n                            </div>\n                        </div>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>KIND OF CONFINEMENT</div>\n                            <div className='small-text'>{confinement.confinementKind}</div>\n                        </div>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>DATE ADMITTED</div>\n                            <div className='small-text'>\n                                {GlobalFunction.toCommonDateString(confinement.dateAdmitted)}\n                            </div>\n                        </div>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>PHILHEALTH</div>\n                            <div className='small-text'>{confinement.coverage.label}</div>\n                        </div>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>LINKED TICKETS</div>\n                            <div className='small-text'>{'---*'}</div>\n                        </div>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>GIFT GIVEN</div>\n                            <div className='small-text'>{confinement.giftGiven ? 'Yes' : 'No'}</div>\n                        </div>\n                    </Grid>\n                </Grid>\n                {this.renderTabs()}\n                {this.state.selectedTab === 0 ? (\n                    this.renderSummarySection(confinement)\n                ) : (\n                    this.renderDiagnosisSection(\n                        confinement.diagnoses.filter(diagnosis => \n                            diagnosis.icd10Code.value === this.state.selectedTab\n                        )[0]\n                    )\n                )}\n                \n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderTabs(): JSX.Element {\n        return (\n            <div className='sub-section'>\n                <Tabs\n                    className='custom-tabs' \n                    value={this.state.selectedTab}\n                    variant='scrollable'\n                    scrollButtons='auto'\n                    indicatorColor='primary'\n                    onChange={(_event: React.ChangeEvent<{}>, value: number) => {\n                        this.setState({selectedTab: value});\n                    }}>\n                        <Tab \n                            value={0} \n                            label={\n                                <div>\n                                    <div className='header-2'>SUMMARY OF DIAGNOSIS</div>\n                                    <div className='smaller-text'>\n                                        {`${GlobalFunction.formatNumber(this.getAllAvailmentsCost(), true)} PHP \n                                        (${this.getAllProceduresCount()} Procedures)`}\n                                    </div>\n                                </div>\n                            } />\n                        {this.props.confinement.diagnoses\n                            .filter(diagnosis => diagnosis.isPrimary)\n                            .map(diagnosis => {\n                                const totalCost = this.getAvailmentCost(diagnosis);\n                                const proceduresCount = diagnosis.procedures.length;\n                                return (\n                                    <Tab \n                                        value={diagnosis.icd10Code.value} \n                                        label={\n                                            <div>\n                                                <div className='header-2'>PRIMARY DIAGNOSIS</div>\n                                                <div className='smaller-text'>\n                                                    {`${GlobalFunction.formatNumber(totalCost, true)} PHP \n                                                    (${proceduresCount} Procedure${proceduresCount > 1 ? 's' : ''})`}\n                                                </div>\n                                            </div>\n                                        } />\n                                );\n                            })}\n                        {this.props.confinement.diagnoses\n                            .filter(diagnosis => !diagnosis.isPrimary)\n                            .map((diagnosis, index) => {\n                                const totalCost = this.getAvailmentCost(diagnosis);\n                                const proceduresCount = diagnosis.procedures.length;\n                                return (\n                                    <Tab \n                                        value={diagnosis.icd10Code.value} \n                                        label={\n                                            <div>\n                                            <div className='header-2'>{`DIAGNOSIS ${index + 1}`}</div>\n                                            <div className='smaller-text'>\n                                                {`${GlobalFunction.formatNumber(totalCost, true)} PHP \n                                                (${proceduresCount} Procedure${proceduresCount > 1 ? 's' : ''})`}\n                                            </div>\n                                            </div>\n                                        } />\n                                );\n                            })}\n                </Tabs>\n                <div style={{borderBottom: '2px solid #1E2071'}} />\n            </div>\n        );\n    }\n\n    renderSummarySection(confinement: ConfinementDetails): JSX.Element {\n        return (\n            <div>\n                {confinement.diagnoses\n                    .filter(diagnosis => diagnosis.isPrimary)\n                    .map(diagnosis => {\n                        return this.renderDiagnosisInfo(diagnosis, 0);    \n                    })}\n                {confinement.diagnoses\n                    .filter(diagnosis => !diagnosis.isPrimary)\n                    .map((diagnosis, index)=> {\n                        return this.renderDiagnosisInfo(diagnosis, index + 1);    \n                    })}\n            </div>\n        );\n    }\n\n    renderDiagnosisInfo(diagnosis: DiagnosisData, index: number): JSX.Element {\n        const procedureCost = this.getProceduresCost(diagnosis);\n        const accommodationCost = this.getTotalAccommodationCost(diagnosis);\n        const attendingPhysicianCost = this.getAttendingPhysicianCost(diagnosis);\n        return (\n            <Grid container className='sub-section'>\n                <div style={{width: '2rem'}}>\n                    <div className='number-item'>{index + 1}</div>\n                </div>\n                <div style={{width: 'calc(100% - 2rem)'}}>\n                    <div style={{marginBottom: '1rem'}}>\n                        <div className='text'>\n                            {`${diagnosis.icd10Code.value} — ${diagnosis.icd10Code.label}`}\n                            {diagnosis.isPrimary ? (\n                                <span className='header-2'>{' (PRIMARY)'}</span>\n                            ) : null}\n                        </div>\n                        {diagnosis.doctors.filter(doctor => doctor.type === 'Admitting')\n                            .map(doctor => {\n                                return (\n                                    <>\n                                    <div className='small-text'>{`${doctor.id} - ${doctor.name}`}</div>\n                                    <div className='small-text'>\n                                        {`PHP ${GlobalFunction.formatNumber(doctor.fee, true)}`}\n                                    </div>\n                                    </>\n                                );\n                            })\n                        }\n                        \n                        <div className='small-text'>\n                            {`Remarks: ${diagnosis.remarks ? diagnosis.remarks : 'None'}`}\n                        </div>\n                        <div className='small-text'>\n                            {`PHIC: No*`}\n                        </div>\n                        <div className='header-2'>\n                            {`TOTAL AMOUNT: ${GlobalFunction.formatNumber(\n                                procedureCost + accommodationCost + attendingPhysicianCost, true\n                            )} PHP`}\n                        </div>\n                        <TextButton \n                            label='Approve/Disapprove Diagnosis' \n                            onClick={() => {\n                                window.scroll(0, -window.pageYOffset);\n                                this.setState({selectedTab: diagnosis.icd10Code.value});\n                            }} />\n                    </div>\n\n                    {this.renderTableSection('PROCEDURES',\n                        <CustomTable\n                            className='custom-table'\n                            rows={diagnosis.procedures}\n                            renderHeader={() => {\n                                return (\n                                    <>\n                                    <TableCell>Procedure</TableCell>\n                                    <TableCell style={{textAlign: 'right', width: '150px'}}>Amount</TableCell>\n                                    <TableCell style={{width: '150px'}}>Date</TableCell>\n                                    <TableCell style={{width: '250px'}}>Clause</TableCell>\n                                    <TableCell style={{textAlign: 'right', width: '150px'}}>Remaining Bal.</TableCell>\n                                    </>\n                                );\n                            }}\n                            renderRow={(procedure: ProcedureData, index: number) => {\n                                const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                                return (\n                                    <TableRow style={{backgroundColor: backgroundColor}}>\n                                        <TableCell>{`${procedure.cptCode.value} — ${procedure.cptCode.label}`}</TableCell>\n                                        <TableCell style={{textAlign: 'right'}}>\n                                            {`${GlobalFunction.formatNumber(procedure.amount, true)} PHP`}\n                                        </TableCell>\n                                        <TableCell>{GlobalFunction.toShortDateString(procedure.dateAdded)}</TableCell>\n                                        <TableCell>{`This is the clause*`}</TableCell>\n                                        <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(9999, true)} PHP*`}</TableCell>\n                                    </TableRow>\n                                );\n                            }} />,\n                            procedureCost\n                    )}\n\n                    {diagnosis.isPrimary ? (\n                        this.renderTableSection('ROOM ACCOMMODATIONS',\n                            <CustomTable\n                                className='custom-table'\n                                rows={this.props.confinement.accommodations}\n                                renderHeader={() => {\n                                    return (\n                                        <>\n                                        <TableCell>Room Type</TableCell>\n                                        <TableCell style={{textAlign: 'right', width: '200px'}}>No. of days</TableCell>\n                                        <TableCell style={{textAlign: 'right', width: '200px'}}>Cost per day</TableCell>\n                                        <TableCell style={{textAlign: 'center', width: '200px'}}>HIMS Assessment</TableCell>\n                                        </>\n                                    );\n                                }}\n                                renderRow={(accommodations: AccommodationData, index: number) => {\n                                    const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                                    return (\n                                        <TableRow style={{backgroundColor: backgroundColor}}>\n                                            <TableCell>{accommodations.roomType}</TableCell>\n                                            <TableCell style={{textAlign: 'right'}}>{accommodations.days}</TableCell>\n                                            <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(accommodations.costPerDay, true)} PHP`}</TableCell>\n                                            <TableCell style={{textAlign: 'center'}}>{`Approve*`}</TableCell>\n                                        </TableRow>\n                                    );\n                                }} />,\n                                accommodationCost\n                        )\n                    ) : null}\n\n                    {this.renderTableSection('ATTENDING PHYSICIANS',\n                        <CustomTable\n                            className='custom-table'\n                            rows={diagnosis.doctors.filter(doctor => doctor.type === 'Attending')}\n                            renderHeader={() => {\n                                return (\n                                    <>\n                                    <TableCell>Name of Doctor</TableCell>\n                                    <TableCell style={{width: '200px'}}>Specialization</TableCell>\n                                    <TableCell style={{textAlign: 'right', width: '125px'}}>No. of Visits</TableCell>\n                                    <TableCell style={{textAlign: 'right', width: '200px'}}>Amount</TableCell>\n                                    </>\n                                );\n                            }}\n                            renderRow={(doctor: DoctorData, index: number) => {\n                                const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                                return (\n                                    <TableRow style={{backgroundColor: backgroundColor}}>\n                                        <TableCell>{doctor.name}</TableCell>\n                                        <TableCell>{doctor.specialization}</TableCell>\n                                        <TableCell style={{textAlign: 'right'}}>{doctor.noOfVisits}</TableCell>\n                                        <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(doctor.fee, true)} PHP`}</TableCell>\n                                    </TableRow>\n                                );\n                            }} />,\n                            attendingPhysicianCost\n                    )}\n                </div>\n            </Grid>\n        );\n    }\n\n    renderTableSection(headerName: string, table: JSX.Element, totalValue?: number): JSX.Element {\n        return (\n            <div className='sub-section'>\n                <div className='header-2'>{headerName}</div>\n                {table}\n                {totalValue ? (\n                    <div className='sub-section'>\n                        <div style={{float: 'right'}}>\n                            <span className='small-text'>TOTAL AMOUNT</span>\n                            <span style={{marginLeft: '1rem'}} />\n                            <span className='header-2'>\n                                {GlobalFunction.formatNumber(totalValue, true) + ' PHP'}\n                            </span>\n                        </div>\n                </div>\n                ) : null}\n            </div>\n        );\n    }\n\n    renderDiagnosisSection(diagnosis: DiagnosisData): JSX.Element {\n        console.log(this.props.confinement.diagnoses);  \n        const procedureCost = this.getProceduresCost(diagnosis);\n        const accommodationCost = this.getTotalAccommodationCost(diagnosis);\n        const attendingPhysicianCost = this.getAttendingPhysicianCost(diagnosis);\n        return (\n            <div className='sub-section' style={{marginLeft: '1rem'}}>\n                <Grid container spacing={2}>\n                    <Grid item xs={6}>\n                        <div className='text'>\n                            {`${diagnosis.icd10Code.value} — ${diagnosis.icd10Code.label}`}\n                            {diagnosis.isPrimary ? (\n                                <span className='header-2'>{' (PRIMARY)'}</span>\n                            ) : null}\n                        </div>\n                        {diagnosis.doctors.filter(doctor => doctor.type === 'Admitting')\n                            .map(doctor => {\n                                return (\n                                    <>\n                                    <div className='small-text'>{`${doctor.id} - ${doctor.name}`}</div>\n                                    <div className='small-text'>\n                                        {`PHP ${GlobalFunction.formatNumber(doctor.fee, true)}`}\n                                    </div>\n                                    </>\n                                );\n                            })\n                        }\n                        \n                        <div className='small-text'>\n                            {`Remarks: ${diagnosis.remarks ? diagnosis.remarks : 'None'}`}\n                        </div>\n                        <div className='small-text'>\n                            {`PHIC: No*`}\n                        </div>\n                        <div className='header-2'>\n                            {`TOTAL AMOUNT: ${GlobalFunction.formatNumber(\n                                procedureCost + accommodationCost + attendingPhysicianCost, true\n                            )} PHP`}\n                        </div>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <div className='light-text'>Choose Assessment</div>\n                        <CustomRadio \n                            label='Approve'\n                            checkedCondition={diagnosis.assessmentType === 'Approved'}\n                            onChange={() => {\n                                diagnosis.assessmentType = 'Approved';\n                                this.props.refreshConfinementState();\n                            }} />\n                        <CustomRadio \n                            label='Disapprove'\n                            checkedCondition={diagnosis.assessmentType === 'Disapproved'}\n                            onChange={() => {\n                                diagnosis.assessmentType = 'Disapproved';\n                                this.props.refreshConfinementState();\n                            }} />\n                    </Grid>\n                    <Grid item xs={4}>\n                        <div className='light-text'>Remarks</div>\n                        <InputArea\n                            value={diagnosis.assessmentRemarks}\n                            onChange={(value: string) => {\n                                diagnosis.assessmentRemarks = value;\n                                this.props.refreshConfinementState();\n                            }} />\n                    </Grid>\n                    \n                </Grid>\n                <div className='sub-section'>\n                    <ComplexTable \n                        data={diagnosis.procedures}\n                        renderHeader={() => this.renderHeader()}\n                        renderRow={(rowData: any, index: number) => \n                            this.renderRow(rowData, index)} />\n                </div>\n\n                {diagnosis.isPrimary ? (\n                    this.renderTableSection('ROOM ACCOMMODATIONS',\n                        <CustomTable\n                            className='custom-table'\n                            rows={this.props.confinement.accommodations}\n                            renderHeader={() => {\n                                return (\n                                    <>\n                                    <TableCell>Room Type</TableCell>\n                                    <TableCell style={{textAlign: 'right', width: '200px'}}>No. of days</TableCell>\n                                    <TableCell style={{textAlign: 'right', width: '200px'}}>Cost per day</TableCell>\n                                    <TableCell style={{textAlign: 'center', width: '200px'}}>HIMS Assessment</TableCell>\n                                    </>\n                                );\n                            }}\n                            renderRow={(accommodations: AccommodationData, index: number) => {\n                                const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                                return (\n                                    <TableRow style={{backgroundColor: backgroundColor}}>\n                                        <TableCell>{accommodations.roomType}</TableCell>\n                                        <TableCell style={{textAlign: 'right'}}>{accommodations.days}</TableCell>\n                                        <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(accommodations.costPerDay, true)} PHP`}</TableCell>\n                                        <TableCell style={{textAlign: 'center'}}>{`Approve*`}</TableCell>\n                                    </TableRow>\n                                );\n                            }} />,\n                            accommodationCost\n                    )\n                ) : null}\n\n                {this.renderTableSection('ATTENDING PHYSICIANS',\n                    <CustomTable\n                        className='custom-table'\n                        rows={diagnosis.doctors.filter(doctor => doctor.type === 'Attending')}\n                        renderHeader={() => {\n                            return (\n                                <>\n                                <TableCell>Name of Doctor</TableCell>\n                                <TableCell style={{width: '200px'}}>Specialization</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '125px'}}>No. of Visits</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '200px'}}>Amount</TableCell>\n                                </>\n                            );\n                        }}\n                        renderRow={(doctor: DoctorData, index: number) => {\n                            const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                            return (\n                                <TableRow style={{backgroundColor: backgroundColor}}>\n                                    <TableCell>{doctor.name}</TableCell>\n                                    <TableCell>{doctor.specialization}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{doctor.noOfVisits}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(doctor.fee, true)} PHP`}</TableCell>\n                                </TableRow>\n                            );\n                        }} />,\n                        attendingPhysicianCost\n                )}\n                <div className='section' />\n            </div>\n        );\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n    renderHeader(): JSX.Element {\n        const headerNameStyle = {\n            margin: 0,\n            padding: '12px 0 12px 0'\n        };\n\n        return (\n            <>\n                <Grid item xs={4}>\n                    <div className='header-2' style={headerNameStyle}>Procedure Details</div>\n                </Grid>\n                <Grid item xs={4}>\n                    <div className='header-2' style={headerNameStyle}>System Details</div>\n                </Grid>\n                <Grid item xs={4}>\n                    <div className='header-2' style={headerNameStyle}>Assessment</div>\n                </Grid>\n            </>\n        );\n    }\n\n    renderRow(procedure: ProcedureData, index: number): JSX.Element {\n        return (\n            <div className='section' >\n                \n                <Grid container>\n                    <Grid item xs={4}>\n                        <div>\n                            <Grid container>\n                                <Grid item xs={2} style={{padding: '0 0.5rem', marginTop: '-3px'}}>\n                                    <div className='number-item'>{index + 1}</div>\n                                </Grid>\n                                <Grid item xs={10} className='header-2'>\n                                    {procedure.cptCode.value + ' - ' + procedure.cptCode.label}\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Grid>\n                    \n                </Grid>\n                <Grid container>\n                    <Grid item xs={4}>\n                        <div>\n                            <Grid container>\n                                <Grid item xs={2} />\n                                <Grid item xs={10}>\n                                    <div className='sub-section-2'>\n                                        <div className='light-text'>AMOUNT</div>\n                                        <div className='small-text'>{'PHP ' + GlobalFunction.formatNumber(procedure.amount, true)}</div>\n                                    </div>\n                                    <div className='sub-section-2'>\n                                        <div className='light-text'>PHILHEALTH REQUIRED?</div>\n                                        <div className='small-text'>{procedure.isPHIC ? 'Yes' : 'No'}</div>\n                                    </div>\n                                    <div className='sub-section-2'>\n                                        <div className='light-text'>DATE OF AVAILMENT</div>\n                                        <div className='small-text'>{GlobalFunction.toCommonDateString(procedure.dateAdded)}</div>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>SYSTEM ASSESSMENT</div>\n                            <div className='small-text'>{'Approve *'}</div>\n                        </div>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>REMAINING BALANCE</div>\n                            <div className='small-text'>{'PHP ' + 0 + '.00 *'}</div>\n                        </div>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>CLAUSE</div>\n                            <div className='small-text'>{'Laboratory tests, x-rays, and other diagnostic examinations prescribed by the INTELLICARE physician*'}</div>\n                        </div>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>Choose Assessment</div>\n                            <CustomRadio \n                                label='Approve'\n                                checkedCondition={procedure.assessmentType === 'Approved'}\n                                onChange={() => {\n                                    procedure.assessmentType = 'Approved';\n                                    this.props.refreshConfinementState();\n                                }} />\n                            <CustomRadio \n                                label='Disapprove'\n                                checkedCondition={procedure.assessmentType === 'Disapproved'}\n                                onChange={() => {\n                                    procedure.assessmentType = 'Disapproved';\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </div>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>Remarks</div>\n                            <InputArea\n                                value={procedure.assessmentRemarks}\n                                onChange={(value: string) => {\n                                    procedure.assessmentRemarks = value;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </div>\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport {  ConsultationDetails } from 'Pages/CustomerCarePage/Models';\nimport { CustomRadio } from 'Pages/CustomerCarePage/Components/CustomRadio';\nimport { Grid } from '@material-ui/core';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\n\ninterface IProps {\n    consultation: ConsultationDetails;\n    refreshConsultationState: () => void;\n}\n\ninterface IStates {\n    selectedTab: any;\n}\n\nexport class ApproveConsultationSection extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            selectedTab: 0\n        }\n    }\n\n    render(): JSX.Element {\n        console.log(this.props.consultation)\n        const consultation = this.props.consultation;\n        return (\n            <Grid container className='section'>\n                <Grid item xs={6}>\n                    <div style={{paddingTop: '2.5rem'}} />\n                    <div className='header-1'>Resolve Consultation</div>\n                    <div className='sub-section-2'>\n                        <div className='light-text'>PROVIDER</div>\n                        <div className='small-text'>\n                            {`${consultation.provider.value} - ${consultation.provider.label}`}\n                        </div>\n                    </div>\n                    <div className='sub-section-2'>\n                        <div className='light-text'>DIAGNOSIS</div>\n                        <div className='small-text'>\n                            {`${consultation.diagnosis.value} - ${consultation.diagnosis.label}`}\n                        </div>\n                    </div>\n                    <div className='sub-section-2'>\n                        <div className='light-text'>DOCTOR</div>\n                        <div className='small-text'>\n                            {consultation.doctor.label}\n                        </div>\n                    </div>\n                    <div className='sub-section-2'>\n                        <div className='light-text'>NOTES</div>\n                        <div className='small-text'>{consultation.notes ? consultation.notes : 'None'}</div>\n                    </div>\n                    <div className='sub-section'>\n                    <div className='header-2'>ASSESSMENT</div>\n                        <CustomRadio \n                            label='Approve'\n                            checkedCondition={consultation.assessmentType === 'Approved'}\n                            onChange={() => {\n                                consultation.assessmentType = 'Approved';\n                                this.props.refreshConsultationState();\n                            }} />\n                        <CustomRadio \n                            label='Disapprove'\n                            checkedCondition={consultation.assessmentType === 'Disapproved'}\n                            onChange={() => {\n                                consultation.assessmentType = 'Disapproved';\n                                this.props.refreshConsultationState();\n                            }} />\n                        <CustomRadio \n                            label='Pending'\n                            checkedCondition={consultation.assessmentType === 'Pending'}\n                            onChange={() => {\n                                consultation.assessmentType = 'Pending';\n                                this.props.refreshConsultationState();\n                            }} />\n                        <InputField\n                            placeholder='Reason'\n                            value={consultation.assessmentRemarks}\n                            onChange={(value: string) => {\n                                consultation.assessmentRemarks = value;\n                                this.props.refreshConsultationState();\n                            }} />\n                    </div>\n                    <div className='section' />\n                </Grid>\n            </Grid>\n        );\n    }\n}","\nimport * as React from 'react';\nimport { match } from \"react-router-dom\";\nimport { API } from '../API';\nimport { MemberData, TicketData, AvailmentDetails, LOAData, DropdownChoice, DiagnosisData, ConsultationDetails, ClientData } from '../Models';\nimport { LeftPanelSection } from '../LeftPanelSection/LeftPanelSection';\nimport { CustomTabs } from '../Components/CustomTab';\nimport { Grid } from '@material-ui/core';\nimport { ApproveAvailmentSection } from './Components/ApproveAvailmentSection';\nimport { CheckBenefitSection } from './Components/CheckBenefitSection';\nimport { PartnerNetworkSection } from './Components/PartnerNetworkSection';\nimport { SummaryAvailmentSection } from './Components/SummaryAvailmentSection';\nimport { ReviewTicketsSection } from './Components/ReviewTicketsSection';\nimport { Payloads } from '../Payloads';\nimport { CheckUtilizationSection } from './Components/CheckUtilizationSection';\nimport { CheckContractSection } from './Components/CheckContractSection';\nimport { Processmaker } from '../Processmaker';\nimport { AccommodationData } from '../UpdateTicketPage/UpdateTicketProps';\nimport { ApproveInpatientSection } from './Components/ApproveInpatientSection';\nimport { Loading } from '../Components/Loading';\nimport { ApproveConsultationSection } from './Components/ApproveConsultationSection';\nimport { TicketFooter } from '../TicketFooter';\n\ninterface IProps {\n    required: string;\n    match: match<MatchParams>;\n    history: any;\n}\n\ninterface MatchParams {\n    id: string;\n}\n\ninterface IStates {\n    tabSelected: number;\n    isSummarizing: boolean;\n    loadedResources: number;\n\n    member?: MemberData;\n    client?: ClientData;\n    ticket: TicketData;\n\n    availment?: AvailmentDetails;\n    confinement?: ConfinementDetails;\n    consultation?: ConsultationDetails;\n\n    pmId: string;\n    loas: LOAData[];\n    loaToDelete: string[];\n}\n\nexport interface ConfinementDetails {\n    provider: DropdownChoice;\n    dateAdmitted: Date;\n    confinementKind: string;\n    giftGiven: boolean;\n    coverage: DropdownChoice;\n    philhealthAmount: number;\n    finalBill: number;\n    dischargeDate: Date | null;\n\n    updates: any;\n    others: any;\n    diagnoses: DiagnosisData[];\n    accommodations: AccommodationData[];\n}\n\nexport class ResolveTicketPage extends React.Component<IProps, IStates> {\n\n    static RESOURCES_TO_LOAD = 2;\n\n    tabList = [\n        { value: 1, label: 'Availments' }, \n        { value: 2, label: 'Benefits' }, \n        { value: 3, label: 'Partner Network' }, \n        { value: 4, label: 'Exclusion' }, \n        { value: 5, label: 'Utilization' }, \n        { value: 6, label: 'Tickets' },  \n        { value: 7, label: 'Contract' }\n    ];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            tabSelected: 1,\n            isSummarizing: false,\n            loadedResources: 0,\n            ticket: {\n                ticketChannel: '',\n                transactionNo: '',\n                ticketSource: '',\n                memberName: '',\n                clientName: '',\n                brokerName: '',\n                facility: { value: '', label: '' },\n                department: '',\n                callerName: '',\n                contactNo: '',\n                ticketType: '',\n                specificType: '',\n                urgency: '',\n                agent: { id: '', name: '' },\n                additionalNotes: '',\n                additionalFiles: [],\n                ticketNo: '',\n                pmCaseId: '',\n                status: 'Open',\n                createdBy: { id: '1', name: 'Jilmer Cariaso - Static' },\n                dateCreated: new Date(),\n                dateUpdated: new Date(),\n                dateEscalated: null\n            },\n            pmId: '',\n            loas: [],\n            loaToDelete: []\n        };\n    }\n\n    componentDidMount() {\n        API.get('customer-care/tickets/' + this.props.match.params['ticketId'],\n            (response) => {\n                //console.log('resp: '+JSON.stringify(response,null,2));\n                this.setState({loadedResources: this.state.loadedResources + 1});\n\n                const ticketCategory = response.ticket_category;\n                const availment = ticketCategory.availment_details;\n                const confinement = ticketCategory.confinement_details;\n                const consultation = ticketCategory.consultation_details;\n                \n                this.setState({ticket: {\n                    ticketChannel: response.received_via,\n                    transactionNo: response.transaction_no,\n                    ticketSource: response.received_from,\n                    memberName: response.member_name,\n                    clientName: response.corporate_client,\n                    brokerName: response.broker,\n                    facility: { value: '', label: response.hospital_name },\n                    department: response.department,\n                    callerName: response.caller_name,\n                    contactNo: response.contact_no,\n                    ticketType: ticketCategory.ticket_type,\n                    specificType: ticketCategory.specific_type,\n                    urgency: ticketCategory.urgency,\n                    agent: { id: '', name: ticketCategory.assign_to },\n                    additionalNotes: response.additional_notes,\n                    additionalFiles: [],\n                    ticketNo: this.props.match.params['appNo'],\n                    pmCaseId: response.pmaker_case_uid,\n                    status: response.status,\n                    createdBy: response.created_by,\n                    dateCreated: new Date(response.date_created),\n                    dateUpdated: new Date(response.date_updated),\n                    dateEscalated: new Date(response.date_escalated),\n                    approvalCode: response.approval_code\n                }});\n\n                if (availment) {\n                    const providerData = availment.provider.split(' - ');\n                    this.setState({availment: {\n                        provider: { value: providerData[0], label: providerData[1] },\n                        diagnoses: availment.availments_list.map(diagnosis => {\n                            return {\n                                icd10Code: { value: diagnosis.code, label: diagnosis.name },\n                                remarks: diagnosis.remarks,\n                                isPrimary: diagnosis.is_primary,\n                                isFinal: diagnosis.is_final,\n                                doctors: diagnosis.doctors.map(doctor => {\n                                    return {\n                                        id: doctor.id,\n                                        name: doctor.name,\n                                        specialization: doctor.specialization,\n                                        fee: doctor.fee,\n                                        noOfVisits: doctor.no_of_visits,\n                                        remarks: doctor.remarks\n                                    }\n                                }),\n                                procedures: diagnosis.procedures.map(procedure => {\n                                    return {\n                                        cptCode: { value: procedure.code, label: procedure.name },\n                                        isPHIC: procedure.phic,\n                                        amount: parseInt(procedure.amount),\n                                        notes: procedure.notes,\n                                        doctor: { value: '', label: procedure.doctor },\n                                        dateAdded: new Date(procedure.date_added),\n                                        assessmentType: procedure.assessment_type,\n                                        assessmentRemarks: procedure.assessment_remarks,\n                                        approvedAmount: procedure.approved_amount\n                                    }\n                                })\n                            }\n                        })\n                    }});\n                }\n\n                if (confinement) {\n                    const providerData = confinement.provider.split(' - ');\n                    this.setState({confinement: {\n                        provider: { value: providerData[0], label: providerData[1] },\n                        dateAdmitted: new Date(confinement.date_admitted),\n                        confinementKind: confinement.confinement_kind,\n                        giftGiven: confinement.gift_given,\n                        coverage: { value: '', label: confinement.coverage },\n                        philhealthAmount: confinement.philhealth_amount,\n                        finalBill: confinement.final_bill,\n                        dischargeDate: new Date(confinement.discharge_date),\n                        diagnoses: confinement.diagnoses.map(diagnosis => {\n                            return {\n                                icd10Code: { value: diagnosis.code, label: diagnosis.name },\n                                remarks: diagnosis.remarks,\n                                isPrimary: diagnosis.is_primary,\n                                isFinal: diagnosis.is_final,\n                                assessmentType: diagnosis.assessment_type,\n                                assessmentRemarks: diagnosis.assessment_remarks,\n                                approvedAmount: diagnosis.approved_amount,\n                                doctors: diagnosis.doctors.map(doctor => {\n                                    return {\n                                        id: doctor.id,\n                                        name: doctor.name,\n                                        specialization: doctor.specialization,\n                                        type: doctor.type,\n                                        fee: doctor.fee,\n                                        noOfVisits: doctor.no_of_visits,\n                                        remarks: doctor.remarks\n                                    }\n                                }),\n                                procedures: diagnosis.procedures.map(procedure => {\n                                    return {\n                                        cptCode: { value: procedure.code, label: procedure.name },\n                                        isPHIC: procedure.phic,\n                                        amount: parseInt(procedure.amount),\n                                        notes: procedure.notes,\n                                        doctor: { value: '', label: procedure.doctor },\n                                        dateAdded: new Date(procedure.date_added),\n                                        assessmentType: procedure.assessment_type,\n                                        assessmentRemarks: procedure.assessment_remarks,\n                                        approvedAmount: procedure.approved_amount\n                                    }\n                                })\n                            }\n                        }),\n                        accommodations: confinement.room_accommodation.map(accommodation => {\n                            return {\n                                roomType: accommodation.room_type,\n                                days: parseInt(accommodation.no_of_days),\n                                costPerDay: accommodation.cost\n                            }\n                        }),\n                        updates: confinement.updates,\n                        others: confinement.others\n                    }});\n\n                    this.tabList[0].label = 'Inpatient';\n                }\n\n                if (consultation) {\n                    const providerData = consultation.provider.split(' - ');\n                    const diagnosisData = consultation.diagnosis.split(' - ');\n                    const doctorData = consultation.doctor.split(' - ');\n                    this.setState({consultation: {\n                        provider: { value: providerData[0], label: providerData[1] },\n                        diagnosis: { value: diagnosisData[0], label: diagnosisData[1] },\n                        doctor: { value: doctorData[0], label: doctorData[1] },\n                        notes: consultation.notes,\n                        assessmentType: consultation.assessment_type,\n                        assessmentRemarks: consultation.assessment_remarks,\n                        approvedAmount: consultation.approved_amount\n                    }});\n                    this.tabList[0].label = 'Consultation Details';\n                }\n\n                this.setState({loas: response.loa.map(loa => {\n                    return {\n                        id: loa._id,\n                        loaNo: loa.loa_no,\n                        amount: loa.amount,\n                        date: new Date(loa.date),\n                        notes: loa.notes\n                    }\n                })});\n\n                if (response.member_id.length > 0) {\n                    API.get(`customer-care/members/${response.member_id}`, \n                        (response) => {\n                            this.setState({member: Payloads.getMemberData(response)});\n                            API.get(`customer-care/members/${response.member_id}/benefits`,\n                                (response) => {\n                                    console.log(response);\n                                    this.setState({loadedResources: this.state.loadedResources + 1});\n                                },\n                                (error) => {\n                                    console.log(error);\n                                });\n                        },\n                        (error) => {\n                            console.log(error);\n                        });\n                }\n\n                if (response.client_id.length > 0) {\n                    API.get(`customer-care/clients/${response.client_id}`,\n                        (response) => {\n                            this.setState({client: Payloads.getClientData(response)});\n                            this.setState({loadedResources: this.state.loadedResources + 1});\n                        },\n                        (error) => {\n                            console.log(error);\n                        });\n                }\n            },\n            (error) => {\n                console.log(error);\n            });\n    }\n\n    onUpdateAssessment = () => {\n\n        if (!this.state.member && !this.state.client) {\n            return;\n        }\n\n        const payload = Payloads.getPutUpdateAssessmentPayload(\n            this.state.ticket,\n            this.state.loas,\n            this.state.member,\n            this.state.client,\n            this.state.availment,\n            this.state.confinement,\n            this.state.consultation\n        );\n        \n        console.log(JSON.stringify(payload));\n        API.delete('customer-care/tickets/loa', this.state.loaToDelete,\n            (response) => {\n                console.log(response);\n                API.put(`customer-care/tickets/${this.props.match.params['ticketId']}`, payload,\n                    (response) => {\n                        console.log(response);\n                        this.state.ticket.approvalCode = response.approval_code;\n                        this.setState({ticket: this.state.ticket});\n                        window.location.reload();\n                    },\n                    (error) => {\n                        console.log(error);\n                    });\n            },\n            (error) => {\n                console.log(error);\n            });\n    }\n\n    onResolve = () => {\n        API.patch(`customer-care/tickets/${this.props.match.params['ticketId']}`, { status: 'Resolved' },\n                (patchTicketResponse) => {\n                    console.log('Patch Response: ', patchTicketResponse);\n                    onResolveProcessmaker();\n                },\n                (error) => {\n                    console.log(error);\n                });\n    \n        const onResolveProcessmaker = () => {\n            Processmaker.get(`cases/${this.props.match.params['caseId']}`,\n                (response) => {                               \n                    if (this.state.availment || this.state.confinement || this.state.consultation) {\n                        if (response['current_task'][0]['tas_title'] === 'Approve / Disapprove Availment') {\n                            processmakerRouteCase(() => {\n                                returnToTicketList();\n                            });\n                        } else if (response['current_task'][0]['tas_title'] === 'Modify / Update Ticket') {\n                            processmakerRouteCase(() => {\n                                processmakerRouteCase(() => {\n                                    returnToTicketList();\n                                });\n                            });\n                        } else if (response['current_task'][0]['tas_title'] === 'Create Ticket') {\n                            processmakerRouteCase(() => {\n                                processmakerRouteCase(() => {\n                                    processmakerRouteCase(() => {\n                                        returnToTicketList();\n                                    });\n                                });\n                            });\n                        }\n                    } else {\n                        returnToTicketList();\n                    }\n                },\n                (error) => {\n                    console.log(error);\n                }\n            );\n        }\n\n        const processmakerRouteCase = (onSuccess: Function) => {\n            Processmaker.put(`cases/${this.props.match.params['caseId']}/route-case`, {},\n                (response) => {\n                    console.log(response);\n                    onSuccess();\n                },\n                (error) => {\n                    console.log(error);\n                }\n            );\n        }\n\n        const returnToTicketList = () => {\n            this.props.history.push('#/customer-care/tickets');\n            window.location.reload();\n        }\n    }\n\n    allAvailmentIsDisapproved = () => {\n        if (this.state.availment) {\n            for (const diagnosis of this.state.availment.diagnoses) {\n                for (const procedure of diagnosis.procedures) {\n                    if (procedure.assessmentType !== 'Disapproved') {\n                        return false;\n                    }\n                }\n            }\n        }\n        if (this.state.confinement) {\n            for (const diagnosis of this.state.confinement.diagnoses) {\n                for (const procedure of diagnosis.procedures) {\n                    if (procedure.assessmentType !== 'Disapproved') {\n                        return false;\n                    }\n                }\n            }\n        }\n        if (this.state.consultation) {\n            if (this.state.consultation.assessmentType !== 'Disapproved') {\n                return true;\n            }\n        }\n        return true;\n    }\n\n\n    render(): JSX.Element {\n        return (\n            <Grid container className='customer-care-main'>\n                {this.state.loadedResources !== ResolveTicketPage.RESOURCES_TO_LOAD ? (\n                    <div \n                        style={{\n                            backgroundColor: '#00000055', \n                            zIndex: 100, \n                            position: 'fixed', \n                            width: '100%', \n                            height: '100%'}}>\n                        <Loading height='10rem'/>\n                    </div>\n                    \n                ) : (null)}\n\n                <LeftPanelSection \n                    member={this.state.member}\n                    client={this.state.client}\n                    ticket={this.state.ticket}\n                    ticketStatus='Resolve'\n                    disableRecentTickets\n                    disableLinkedTickets />\n\n                <CustomTabs \n                    tabList={this.tabList}\n                    selectedTab={this.state.tabSelected}\n                    setSelectedTab={(index: number) => {\n                        this.setState({tabSelected: index});\n                    }} />\n\n                <div className='main-content'>\n                    {this.state.tabSelected === 1 ? (\n\n                        this.state.availment ? (\n                            this.renderOutpatientContent(this.state.availment)\n\n                        ) : this.state.confinement ? (\n                            this.renderInpatientContent(this.state.confinement)\n\n                        ) : this.state.consultation ? (\n                            this.renderConsultationContent(this.state.consultation)\n\n                        ) : null\n                        \n                    ) : this.state.tabSelected === 2 && this.state.member ? (\n                        <CheckBenefitSection\n                            memberId={this.state.member.memberId} />\n                    ) : this.state.tabSelected === 3 && (this.state.member || this.state.client) ? (\n                        <PartnerNetworkSection \n                            clientId={\n                                this.state.member ? this.state.member.client.id : \n                                this.state.client ? this.state.client.id : ''} />\n                    ) : this.state.tabSelected === 5 ? (\n                        <CheckUtilizationSection />\n                    ) : this.state.tabSelected === 6 ? (\n                        <ReviewTicketsSection \n                            ticketNo={this.state.ticket.ticketNo} />\n                    ) : this.state.tabSelected === 7 && this.state.member ? (\n                        <CheckContractSection \n                            memberId={this.state.member.memberId} />\n                    ) : null}\n                </div>\n\n                <TicketFooter\n                    disableCloseTicket\n                    disableAssign\n                    disableEscalate\n                    onAssign={() => {}}\n                    onEscalate={() => {}}\n                    onSummarizeAssessment={\n                        !this.state.ticket.approvalCode &&\n                        !this.state.consultation && \n                        !this.state.isSummarizing ? () => {\n                            this.setState({isSummarizing: true});\n                        } : undefined}\n                    onGenerateApprovalCode={\n                        !this.state.ticket.approvalCode && \n                        (this.state.consultation || this.state.isSummarizing) &&\n                        !this.allAvailmentIsDisapproved() ? () => {\n                            this.onUpdateAssessment();\n                        } : undefined}\n                    onResolveTicket={\n                        this.state.ticket.status !== 'Resolved' &&\n                        (this.state.ticket.approvalCode ||\n                        this.allAvailmentIsDisapproved()) ? () => {\n                            this.onResolve();\n                        } : undefined}\n                    onCloseTicket={\n                        this.state.ticket.status === 'Resolved' ? () => null : undefined} />\n            </Grid>\n        );\n    }\n\n    renderOutpatientContent(availment: AvailmentDetails): JSX.Element {\n        return (\n            !this.state.isSummarizing && !this.state.ticket.approvalCode ? (\n                <ApproveAvailmentSection \n                    availment={availment}\n                    refreshAvailmentState={() => {\n                        this.setState({availment: this.state.availment});\n                    }} />\n            ) : (\n                <SummaryAvailmentSection \n                    availment={availment}\n                    loas={this.state.loas}\n                    loaToDelete={this.state.loaToDelete}\n                    canEditLOAs={!this.state.ticket.approvalCode}\n                    refreshLOAStates={() => {\n                        this.setState({\n                            loas: this.state.loas,\n                            loaToDelete: this.state.loaToDelete\n                        });\n                    }} />\n            )\n        );\n    }\n\n    renderInpatientContent(confinement: ConfinementDetails): JSX.Element {\n        return (\n            !this.state.isSummarizing && !this.state.ticket.approvalCode ? (\n                <ApproveInpatientSection\n                    confinement={confinement}\n                    refreshConfinementState={() => {\n                        this.setState({confinement: this.state.confinement});\n                    }} />\n            \n            ) : (\n                <SummaryAvailmentSection \n                    availment={confinement}\n                    loas={this.state.loas}\n                    loaToDelete={this.state.loaToDelete}\n                    canEditLOAs={!this.state.ticket.approvalCode}\n                    refreshLOAStates={() => {\n                        this.setState({\n                            loas: this.state.loas,\n                            loaToDelete: this.state.loaToDelete\n                        });\n                    }} />\n            )\n        );\n    }\n\n    renderConsultationContent(consultation: ConsultationDetails): JSX.Element {\n        return (\n            <div>\n                <ApproveConsultationSection \n                    consultation={consultation}\n                    refreshConsultationState={() => {\n                        this.setState({consultation: this.state.consultation});\n                    }} />\n            </div>\n        );\n    }\n}","/**\n * Asynchronously loads the component for FeaturePage\n */\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Components, Utils } from '@hims/core';\nconst { loadable } = Utils;\nconst { LoadingIndicator } = Components.UI;\n\nexport default loadable(\n  async () => {\n    const {\n      TicketListPage,\n      mapStateToProps,\n      mapDispatchToProps,\n    } = await import('./TicketListPage');\n\n    const Component = connect(\n      mapStateToProps,\n      mapDispatchToProps,\n    )(TicketListPage);\n    return { default: Component };\n  },\n  {\n    fallback: <LoadingIndicator />,\n  },\n);\n","import * as React from 'react';\nimport './component-style.scss';\n\ninterface IProps {\n    placeholder: string;\n    value: string;\n    detail: string;\n    onChange: (value: string) => void;\n}\n\nexport class DetailedInputField extends React.Component<IProps> {\n\n    shouldComponentUpdate(props: IProps, _state: any) {\n        return (\n            (this.props.placeholder !== props.placeholder) ||\n            (this.props.value !== props.value) ||\n            (this.props.detail !== props.detail)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='detailed-input-field'>\n                <div className='text'>{this.props.placeholder}</div>\n                <div className='input-field'>\n                    <input \n                        className='text-field left' \n                        value={this.props.value}\n                        onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                            this.props.onChange(event.target.value);\n                        }} />\n                    <div className='detail right'>{this.props.detail}</div>\n                </div>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Grid, TableCell, TableRow } from '@material-ui/core';\nimport './../style.scss';\nimport { CustomTable } from '../Components/CustomTable';\nimport { InputField } from '../Components/InputField';\nimport { IconButton } from '../Components/IconButton';\nimport { faSort } from '@fortawesome/free-solid-svg-icons';\nimport { LabelDisplayedRowsArgs } from '@material-ui/core/TablePagination';\nimport { CustomRadio } from '../Components/CustomRadio';\nimport { Dropdown } from '../Components/Dropdown';\nimport { DropdownChoice } from '../Models';\nimport { DetailedDropdown } from '../Components/DetailedDropdown';\nimport { DetailedInputField } from '../Components/DetailedInputField';\n\ninterface IProps {\n\n}\n\ninterface IStates {\n    \n}\n\nexport class AdvanceSearch extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n\n        };\n    }\n    \n    render(): JSX.Element {\n        return (\n            <Grid container className='customer-care-main'>\n                <div className='section'>\n                    <div className='header'>Advanced Search</div>\n\n                    <div className='bordered-section'>\n                        <Grid container spacing={10}>\n                            <Grid item xs={3}>\n                                <div className='header-2'>SEARCH FOR A</div>\n                                <DetailedDropdown\n                                    value={{value:'Testing adjustable width', label: ''}}\n                                    choices={[{value:'', label: ''}]}\n                                    onChange={(_value: DropdownChoice) => {\n\n                                    }} />\n                                <DetailedInputField\n                                    placeholder=''\n                                    value=''\n                                    detail='Testing here'\n                                    onChange={(_value: string) => {\n\n                                    }} />\n\n                                <CustomRadio\n                                    label='Member'\n                                    checkedCondition={true}\n                                    onChange={() => {}} />\n                                <CustomRadio\n                                    label='Corporate Client'\n                                    checkedCondition={false}\n                                    onChange={() => {}} />\n                            </Grid>\n                            <Grid item xs={3}>\n                                <div className='header-2'>SEARCH BY COMPANY</div>\n                                <Dropdown \n                                    placeholder='Member Type'\n                                    value={{value:'', label: ''}}\n                                    choices={[{value:'', label: ''}]}\n                                    onChange={(_value: DropdownChoice) => {\n\n                                    }} />\n                                <Dropdown \n                                    placeholder='Member Status'\n                                    value={{value:'', label: ''}}\n                                    choices={[{value:'', label: ''}]}\n                                    onChange={(_value: DropdownChoice) => {\n\n                                    }} />\n                            </Grid>\n                            <Grid item xs={3}>\n                                <div className='header-2'>SEARCH BY MEMBER DETAILS</div>\n                            </Grid>\n                            <Grid item xs={3}>\n                                \n                            </Grid>\n                        </Grid>\n                    </div>\n\n\n                    <div className='sub-section'>\n                        <div className='header-3'>{`SEARCH RESULTS (${9999})`}</div>\n                        <CustomTable\n                            className='custom-table-selectable'\n                            rows={[[0,0,0,0],[0,0,0,0]]}\n                            renderHeader={() => this.renderTableHeader()}\n                            renderRow={(rowData: any, index: number) => \n                                this.renderTableRow(rowData, index)}\n                            onChangeInfo={(info: LabelDisplayedRowsArgs) => \n                                `${info.from}-${info.to} out of ${info.count} results`}\n                            labelRowsPerPage='Show'\n                            rowsPerPageOptions={[10, 25, 50]} />\n                        {/* <div className='text'>\n                            Add a diagnosis first then add procedures per diagnosis after\n                        </div>\n                        <div className='sub-section'>\n                            <CustomTable\n                                rows={this.props.availment.diagnoses}\n                                renderHeader={() => this.renderTableHeader()}\n                                renderRow={(rowData: any, index: number) => \n                                    this.renderTableRow(rowData, index)} />\n                        </div>\n                        {this.props.createTicketAttemp && this.props.availment.diagnoses.length === 0 ? (\n                            <div className='sub-section' style={{color: '#E53935'}}>\n                                No diagnosis. Need atleast one diagnosis.\n                            </div> \n                        ) : (null)} */}\n                    </div>\n                </div>\n                \n            </Grid>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n        return (\n            <>\n            {this.renderHeaderColumn('cardNo', 'Member ID')}\n            {this.renderHeaderColumn('name', 'Name')}\n            {this.renderHeaderColumn('corporates', 'Corporate/s')}\n            {this.renderHeaderColumn('planType', 'Plan Type')}\n            {this.renderHeaderColumn('', 'Action', '60px')}\n            </>\n        );\n    }\n\n\n\n\n\n    renderTableRow = (_data: any, index: number) => {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                <TableCell>{'ticket.status'}</TableCell>\n                <TableCell>{'ticket.ticketNo'}</TableCell>\n                <TableCell>{'ticket.channel'}</TableCell>\n                <TableCell>{'ticket.type'}</TableCell>\n                <TableCell></TableCell>\n            </TableRow>\n        );\n    }\n\n\n\n    renderHeaderColumn(attrName: string, headerText: string, width?: string): JSX.Element {\n        return (\n            <TableCell style={{width: width}}>\n                <span className='header-2'>{headerText}</span>\n                \n                {attrName !== '' ? (\n                    <>\n                    <div style={{float: 'right'}}>\n                        <IconButton \n                            icon={faSort} \n                            onClick={() => {\n                                // this.sortTickets(attrName, true);\n                                // this.setState({ticketListUpdated: true});\n                            }} />\n                    </div>\n                    <InputField\n                        value={this.state[attrName]}\n                        onChange={(_value: string) => {\n                            // this.setState(prevState => ({...prevState, [attrName]: value}));\n                        }} />\n                    </>\n                ) : null}\n                \n            </TableCell>\n        );\n    }\n    \n}","/**\n *\n * App\n *\n * This component is the skeleton around the actual pages, and should only\n * contain code that should be seen on all pages. (e.g. navigation bar)\n */\n\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { renderRoutes } from 'react-router-config';\n\nimport { Switch, Route } from 'react-router-dom';\n\nimport { Containers, Components } from '@hims/core';\nimport { createBrowserHistory } from 'history';\n// import { HomePage } from 'Pages/Home/HomePage';\n\n\nimport { CreateTicketPage } from 'Pages/CustomerCarePage/CreateTicketPage/CreateTicketPage';\nimport { UpdateTicketPage } from 'Pages/CustomerCarePage/UpdateTicketPage/UpdateTicketPage';\nimport HomePage from 'Pages/Home/Loadable';\nimport { ResolveTicketPage } from 'Pages/CustomerCarePage/ResolveTicketPage/ResolveTicketPage';\nimport TicketListPage from 'Pages/TicketList/Loadable';\nimport { AdvanceSearch } from 'Pages/CustomerCarePage/AdvanceSearch/AdvanceSearch';\n// import LoginPage from 'Pages/Login/LoginPage';\n\nconst history = createBrowserHistory();\nconst NotFoundPage = Containers.NotFoundPage;\n// import ExitToAppIcon from '@material-ui/icons/ExitToApp';\n\nlet routes = [\n  {\n    path: '/home',\n    component: HomePage,\n  },\n  {\n    path: '/tickets',\n    component: TicketListPage,\n  },\n  // {\n  //   path: \"/login\",\n  //   component: LoginPage\n  // },\n  {\n    path: \"/\",\n    component: CreateTicketPage,\n    exact: true\n  },\n  {\n    path: \"/search\",\n    component: AdvanceSearch\n  },\n  {\n    path: \"/update-ticket/:caseId/:appNo/:ticketId\",\n    component: UpdateTicketPage\n  },\n  {\n    path: \"/resolve-ticket/:caseId/:appNo/:ticketId\",\n    component: ResolveTicketPage\n  }\n];\nconst prefix = '/customer-care';\nroutes.map(route => (route.path = `${prefix}${route.path}`));\n\nexport default function App() {\n\n  return (\n    <div>\n      \n      <Helmet\n        titleTemplate=\"NEO - %s\"\n        defaultTitle=\"NEO\"\n      >\n        <meta name=\"description\" content=\"NEO application\" />\n      </Helmet>\n      \n      <div className='side-bar'>\n        <Components.UI.PageLayout history={history} page={\"customer care\"} />\n      </div>\n      <div className='main'>\n        <Switch>\n          {renderRoutes(routes)}\n          <Route path=\"\" component={NotFoundPage} />\n        </Switch>\n      </div>\n      \n        \n      {/* </Components.UI.PageLayout> */}\n    </div>\n  );\n}","/**\n * i18n.js\n *\n * This will setup the i18n language files and locale data for the app.\n *\n *   IMPORTANT: This file is used by the internal build\n *   script `extract-intl`, and must use CommonJS module syntax\n *   You CANNOT use import/export in this file.\n */\n\n// prettier-ignore\nimport { Containers } from '@hims/core';\nconst enTranslationMessages = require('Messages/en.json');\n\nexport const translationMessages = {\n  en: Containers.Message.formatTranslationMessages('en', enTranslationMessages),\n};\n","/**\n * AppConstants\n * Each action has a corresponding type, which the reducer knows and picks up on.\n * To avoid weird typos between the reducer and the actions, we save them as\n * constants here. We prefix them with 'yourproject/YourComponent' so we avoid\n * reducers accidentally picking up actions they shouldn't.\n *\n */\n\nenum ActionTypes {\n    LOAD_REPOS = 'boilerplate/App/LOAD_REPOS',\n    LOAD_REPOS_SUCCESS = 'boilerplate/App/LOAD_REPOS_SUCCESS',\n    LOAD_REPOS_ERROR = 'boilerplate/App/LOAD_REPOS_ERROR',\n}\n  \nexport {};\nexport default ActionTypes;\n  ","import { ContainerState, ContainerActions } from './types';\nimport ActionTypes from './constants';\n\n// The initial state of the App\nexport const initialState: ContainerState = {\n  loading: false,\n  error: false,\n  currentUser: '',\n  userData: {\n    repositories: [],\n  },\n};\n\n// Take this container's state (as a slice of root state), this container's actions and return new state\nfunction appReducer(\n  state: ContainerState = initialState,\n  action: ContainerActions,\n): ContainerState {\n  switch (action.type) {\n    case ActionTypes.LOAD_REPOS:\n      return {\n        currentUser: state.currentUser,\n        loading: true,\n        error: false,\n        userData: {\n          repositories: [],\n        },\n      };\n    case ActionTypes.LOAD_REPOS_SUCCESS:\n      return {\n        currentUser: action.payload.username,\n        loading: false,\n        error: state.error,\n        userData: {\n          repositories: action.payload.repos,\n        },\n      };\n    case ActionTypes.LOAD_REPOS_ERROR:\n      const { error, loading, ...rest } = state;\n      return {\n        error: action.payload,\n        loading: false,\n        ...rest,\n      };\n    default:\n      return state;\n  }\n}\n\nexport default appReducer;\n","/**\n * app.ts\n *\n * This is the entry file for the application, only setup and boilerplate\n * code.\n */\n\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\n// Import all the third party stuff\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport FontFaceObserver from 'fontfaceobserver';\nimport 'sanitize.css/sanitize.css';\n\n\n\n// Import root app\nimport App from 'Containers/App';\n\n// Import Language Provider\n// import MessageProvider from 'Containers/LanguageProvider';\n\n// Load the favicon and the .htaccess file\n// import '!file-loader?name=[name].[ext]!./images/favicon.ico';\n// import 'file-loader?name=.htaccess!./.htaccess';\n\nimport { Components, Containers, Utils } from '@hims/core';\n// import { Containers, Utils } from '@hims/core';\nimport { translationMessages } from 'i18n';\nimport createReducer from './reducers';\n\nconst { configureStore, history } = Utils;\nconst MessageProvider = Containers.Message.Provider;\nconst { ServiceWorker } = Components.Services;\n\n// Import i18n messages\n\n// Observe loading of Open Sans (to remove open sans, remove the <link> tag in\n// the index.html file and this observer)\nconst openSansObserver = new FontFaceObserver('Open Sans', {});\n\n// Create redux store with history\nconst initialState = {};\nconst store = configureStore(createReducer, initialState, history);\nconst MOUNT_NODE = document.getElementById('app') as HTMLElement;\n\nconst render = (messages: any, Component = App) => {\n  const Document: React.ComponentType<Containers.Document.IProps<any, any>> = Containers.Document.Component;\n  ReactDOM.render(\n    // tslint:disable-next-line:jsx-wrap-multiline\n      <Document Component={Component} store={store} componentProps={{}}>\n        <MessageProvider messages={messages}>\n          <Component />\n        </MessageProvider>\n      </Document>\n    ,\n    MOUNT_NODE,\n  );\n};\n\ndeclare const module: any;\n\nexport default ()=>{\n  // When Open Sans is loaded, add a font-family using Open Sans to the body\n  openSansObserver.load(undefined, 60000).then(() => {\n    document.body.classList.add('fontLoaded');\n  });\n\n  if (module.hot) {\n    module.hot.accept(['./i18n', './Containers/App'], () => {\n      ReactDOM.unmountComponentAtNode(MOUNT_NODE);\n      // tslint:disable-next-line:max-line-length\n      const App = require('./Containers/App').default; // https://github.com/webpack/webpack-dev-server/issues/100\n      render(translationMessages, App);\n    });\n    // Make reducers hot reloadable, see http://mxs.is/googmo\n    /* istanbul ignore next */\n    module['hot'].accept('./reducers', () => {\n      store.replaceReducer(createReducer(store.injectedReducers));\n    });\n  }\n  // Chunked polyfill for browsers without Intl support\n  if (!(window as any).Intl) {\n    new Promise(resolve => {\n      resolve(import('intl'));\n    })\n      .then(() =>\n        Promise.all([\n          import('intl/locale-data/jsonp/en.js'),\n          import('intl/locale-data/jsonp/de.js'),\n        ]),\n      )\n      .then(() => render(translationMessages))\n      .catch(err => {\n        throw err;\n      });\n  } else {\n    render(translationMessages);\n  }\n\n  // Install ServiceWorker and AppCache in the end since\n  // it's not most important operation and if main code fails,\n  // we do not want it installed\n  // if (process.env.NODE_ENV === 'production') {\n  //   require('offline-plugin/runtime').install();\n  // }\n\n  // If you want your app to work offline and load faster, you can change\n  // unregister() to register() below. Note this comes with some pitfalls.\n  // Learn more about service workers: https://bit.ly/CRA-PWA\n  ServiceWorker.register();\n}\n","/**\n * Combine all reducers in this file and export the combined reducers.\n */\n\nimport { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\n\nimport { Containers, Utils } from '@hims/core';\nimport globalReducer from 'Containers/App/reducer';\n\n/**\n * Merges the main reducer with the router state and dynamically injected reducers\n */\nexport default function createReducer(injectedReducers = {}) {\n  const { history } = Utils;\n  const rootReducer = combineReducers({\n    global: globalReducer,\n    language: Containers.Message.messageProviderReducer,\n    router: connectRouter(history),\n    ...injectedReducers,\n  });\n\n  return rootReducer;\n}\n"],"sourceRoot":""}