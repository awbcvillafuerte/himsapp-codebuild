{"version":3,"sources":["Pages/TicketList/ActionConsts.ts","Pages/TicketList/TicketListActions.ts","Pages/TicketList/TicketListTableData.ts","Pages/TicketList/TicketListPage.tsx"],"names":["ActionConsts","ResetReducer","SetReducer","TicketListActions","payload","type","columnNames","name","title","tableData","formattedColumns","required_columns","urgency_columns","text_columns","date_columns","boolean_columns","detaillink_columns","columnExtensions","columns","map","column","width","push","columnName","wordWrapEnabled","getColumnExtensions","fixedColumns","cellProperties","rows","types","specTypes","statuses","channels","is_vip","index","status","faker","random","arrayElement","urgency","capitalize","app_uid","alphaNumeric","dueDate","date","future","specificType","member","findName","company","companyName","ticketOwner","assignedTo","createdDate","lastUpdate","channel","generateRows","popoverStyles","makeStyles","theme","popoverCheckbox","marginLeft","spacing","marginRight","SelectColumnsPopover","props","selectedColumns","setSelectedColumns","classes","popupState","usePopupState","variant","popupId","Button","fullWidth","bindTrigger","Typography","className","clsx","align","icon","faThList","Popover","bindPopover","anchorOrigin","vertical","horizontal","transformOrigin","FormGroup","idx","columnObj","checked","findIndex","FormControlLabel","key","control","Checkbox","onChange","event","target","tmpSelectedColumns","remove","value","color","label","TicketListPage","tickets","tableListRef","timeOut","onLogout","window","location","replace","cols","setState","generateReport","console","log","onSearchTextChange","e","preventDefault","query","clearTimeout","setTimeout","current","apiCall","onStatusFilterClick","newStatus","state","componentWillMount","Object","keys","length","getTableColumns","dockedColumnsCounter","getStyle","minWidth","isSticked","withBorderRight","style","left","zIndex","maxWidth","borderRight","undefined","addColumn","filterType","sortType","disabled","choices","find","filterOption","filterDisabled","filter","loading","ticketStats","ticketList","filters","React","this","position","right","top","Fab","backgroundColor","onClick","Grid","container","direction","justify","alignItems","item","xs","sm","md","TextField","id","placeholder","margin","inputProps","InputProps","startAdornment","faSearch","alignContent","faDownload","Paper","all","open","pending","resolved","closed","CustomTable","ref","minHeight","canOverflow","stickyHeader","renderRow","row","renderTableRow","rowsPerPageOptions","serverSideOption","getUrl","offset","limit","tableFilter","where","and","regexp","ticket_id","like","options","or","assign_to","date_created","between","GlobalFunction","getDate","Date","getTime","date_updated","received_via","skip","order","JSON","stringify","onSuccess","response","ticket","ticket_category","_id","caseId","pmaker_case_uid","ticket_type","specific_type","member_data","toNameFormat","first_name","middle_name","last_name","client","client_data","registered_name","ticket_owner_name","created_by","toDateAndTime","transaction_no","cancelled","getCount","total","TableRow","Processmaker","get","cases","route","current_task","tas_title","includes","href","i","matchedColumn","col","nextColumnIsFixed","urgencyNumber","Low","Medium","High","TableCell","textAlign","display","mapStateToProps","mapDispatchToProps","dispatch","Map","bindActionCreators"],"mappings":"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","file":"static/js/5.ee2f4313.chunk.js","sourcesContent":["export const ActionConsts = {\n  TicketList: {\n    ResetReducer: 'TicketList_ResetReducer',\n    SetReducer: 'TicketList_SetReducer',\n  },\n};\n","//#region Global Imports\n// import { Dispatch } from 'redux';\n//#endregion Global Imports\n\n//#region Local Imports\nimport { ActionConsts } from './ActionConsts';\n// import { PlanetaryService } from 'Components/Services';\n//#endregion Local Imports\n\n//#region Interface Imports\n//#endregion Interface Imports\n\nexport const TicketListActions = {\n  Map: (payload: {}) => ({\n    payload,\n    type: ActionConsts.TicketList.SetReducer,\n  }),\n\n  Reset: () => ({\n    type: ActionConsts.TicketList.ResetReducer,\n  }),\n};\n","import faker from 'faker';\nimport { capitalize } from 'lodash';\n\nconst columnNames = [\n  {\n    name: 'urgency',\n    title: 'Urgency',\n  },\n  {\n    name: 'status',\n    title: 'Status',\n  },\n  {\n    name: 'ticket_id',\n    title: 'Ticket ID',\n  },\n  {\n    name: 'dueDate',\n    title: 'Due Date',\n  },\n  {\n    name: 'type',\n    title: 'Type',\n  },\n  {\n    name: 'specificType',\n    title: 'Specific Type',\n  },\n  {\n    name: 'member',\n    title: 'Member',\n  },\n  {\n    name: 'company',\n    title: 'Company',\n  },\n  {\n    name: 'ticketOwner',\n    title: 'Ticket Owner',\n  },\n  {\n    name: 'assignedTo',\n    title: 'Assigned To',\n  },\n  {\n    name: 'createdDate',\n    title: 'Created Date',\n  },\n  {\n    name: 'lastUpdate',\n    title: 'Last Update',\n  },\n  {\n    name: 'channel',\n    title: 'Channel',\n  },\n  {\n    name: 'is_vip',\n    title: 'VIP',\n  },\n];\n\nconst getColumnExtensions = () => {\n  const columns: any[] = [];\n\n  columnNames.map(column => {\n    let width = 200;\n\n    switch (column.name) {\n      case 'urgency':\n      case 'status':\n      case 'app_uid':\n        width = 100;\n        break;\n      case 'type':\n      case 'dueDate':\n        width = 120;\n        break;\n      case 'specificType':\n      case 'company':\n        width = 250;\n        break;\n      default:\n        width = 200;\n    }\n\n    columns.push({\n      columnName: column.name,\n      width: width,\n      wordWrapEnabled: true,\n    });\n  });\n\n  return columns;\n};\n\nconst generateRows = () => {\n  const rows: any[] = [];\n  const types = ['Inquiry', 'Availment', 'Request', 'Complaint'];\n  const specTypes = [\n    'Billing Dispute Inquiry',\n    'Outpatient Consult',\n    'X-Ray Procedure Availment',\n    'Service Complaint',\n    'Dental Coverage',\n    'Premium Adjustment',\n  ];\n  const statuses = ['open', 'pending', 'resolved', 'closed'];\n  const channels = ['email', 'fax', 'sms'];\n  const is_vip = [true, false];\n  for (let index = 0; index < 50; index++) {\n    const status = faker.random.arrayElement(statuses);\n    const urgency =\n      status === 'closed' || status === 'resolved'\n        ? 3\n        : faker.random.arrayElement([1, 2]);\n\n    rows.push({\n      urgency: urgency,\n      status: capitalize(status),\n      app_uid: faker.random.alphaNumeric(8),\n      dueDate: faker.date.future(),\n      type: faker.random.arrayElement(types),\n      specificType: faker.random.arrayElement(specTypes),\n      member: faker.name.findName(),\n      company: faker.company.companyName(),\n      ticketOwner: faker.name.findName(),\n      assignedTo: faker.name.findName(),\n      createdDate: faker.date.future(),\n      lastUpdate: faker.date.future(),\n      channel: faker.random.arrayElement(channels),\n      is_vip: faker.random.arrayElement(is_vip),\n    });\n  }\n\n  return rows;\n};\n\nconst tableData: any = {\n  formattedColumns: {\n    required_columns: [],\n    urgency_columns: ['urgency'],\n    text_columns: [\n      'status',\n      'app_uid',\n      'type',\n      'specificType',\n      'member',\n      'company',\n      'ticketOwner',\n      'assignedTo',\n      'channel',\n    ],\n    date_columns: [\n      'dueDate', \n      'createdDate', \n      'lastUpdate',\n    ],\n    boolean_columns: [\n      'is_vip',\n    ],\n    detaillink_columns: [\n      'app_uid',\n    ]\n  },\n  columnExtensions: getColumnExtensions(),\n  fixedColumns: [\n    'urgency',\n    'status',\n    'dueDate',\n    'app_uid',\n    'type',\n    'specificType',\n    'member',\n  ],\n  cellProperties: [],\n  columns: columnNames,\n  rows: generateRows(),\n};\n\nexport { tableData };\n","//#region Global Imports\nimport * as React from 'react';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport { Grid, Typography, Button, TextField, Paper, Popover, Checkbox, FormGroup, FormControlLabel, TableRow, TableCell } from '@material-ui/core';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\n\nimport {\n  usePopupState,\n  bindTrigger,\n  bindPopover,\n} from 'material-ui-popup-state/hooks';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faDownload,\n  faSearch,\n  faThList,\n} from '@fortawesome/free-solid-svg-icons';\nimport { map, findIndex, remove } from 'lodash';\nimport clsx from 'clsx';\nimport { Fab } from '@material-ui/core';\nimport 'Pages/CustomerCarePage/Components/component-style.scss'\n\n//#endregion Global Imports\n\n//#region Interface Imports\nimport { Store } from 'Components/Stores/IStore';\nimport { Loader } from 'Components/UI/LoadingIndicator';\nimport { ITicketListPage } from './ITicketListPage';\nimport { TicketListActions } from './TicketListActions';\nimport { tableData } from './TicketListTableData';\nimport { Processmaker } from '../CustomerCarePage/Processmaker'\nimport './index.scss';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { PositionProperty } from 'csstype';\nimport { DropdownChoice } from 'Pages/CustomerCarePage/Models';\n// import { API } from 'Pages/CustomerCarePage/API';\n//#endregion Interface Imports\n\nconst popoverStyles = makeStyles((theme: Theme) => ({\n  popoverCheckbox: {\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n  },\n}));\n\ninterface SelectColumnsPopoverProps {\n  columns: any[];\n  selectedColumns: any[];\n  setSelectedColumns: any;\n}\n\nconst SelectColumnsPopover: React.FC<SelectColumnsPopoverProps> = (\n\tprops: SelectColumnsPopoverProps,\n): JSX.Element => {\n  const { \n    columns,\n    selectedColumns,\n    setSelectedColumns,\n  } = props;\n  const classes = popoverStyles(props);\n\n  const onCheckChange = (columnObj: any) => (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    if (event.target.checked) {\n      const tmpSelectedColumns = [...selectedColumns];\n      tmpSelectedColumns.push(columnObj);\n\n      setSelectedColumns(tmpSelectedColumns);\n    } else {\n      const tmpSelectedColumns = [...selectedColumns];\n      remove(tmpSelectedColumns, columnName => {\n        return columnName.name === columnObj.name;\n      });\n\n      setSelectedColumns(tmpSelectedColumns);\n    }\n  };\n\n  const popupState = usePopupState({\n    variant: 'popover',\n    popupId: 'columnListPopover',\n  });\n\n  return(\n    <div>\n      <Button fullWidth {...bindTrigger(popupState)}>\n        <Typography className={clsx('link-button')} align=\"right\">\n          <FontAwesomeIcon\n            icon={faThList}\n            className={clsx('link-button-icon')}\n          />\n          <span className={clsx('link-button-text')}>Display Columns</span>\n        </Typography>\n      </Button>\n      <Popover\n        {...bindPopover(popupState)}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n      >\n        <FormGroup>\n          {map(columns, (column, idx) => {\n            const checked =\n              findIndex(selectedColumns, { name: column.name }) >= 0;\n\n            return (\n              <FormControlLabel\n                key={idx}\n                control={\n                  <Checkbox\n                    checked={checked}\n                    onChange={onCheckChange(column)}\n                    value={column.name}\n                    color=\"primary\"\n                  />\n                }\n                className={classes.popoverCheckbox}\n                label={column.title}\n              />\n            );\n          })}\n        </FormGroup>\n      </Popover>\n    </div> \n  );\n};\n\n\n\n\n\nexport class TicketListPage extends React.Component<ITicketListPage.IProps, ITicketListPage.IState> {\n\n  tickets: any[];\n  tableListRef: any;\n  timeOut?: any;\n  \n  constructor(props: ITicketListPage.IProps) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n      loading: false,\n      status: '',\n      query: '',\n      columns: [],\n      selectedColumns: [],\n      fixedColumns: [],\n      formattedColumns: {},\n      columnExtensions: [],\n      rows: [],\n      ticketStats: {},\n      ticketList: [],\n\n      filters: {}\n    };\n\n    this.tickets = [];\n    this.tableListRef = React.createRef();\n  }\n  \n  onLogout = () => {\n    window.location.replace('../index.html#/');\n  }\n\n  setSelectedColumns = (cols) => {\n    this.setState({\n      selectedColumns: cols\n    });\n  }\n\n  generateReport = () => {\n    console.log('generate report');\n  }\n\n  onSearchTextChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    e.preventDefault();\n    const { value } = e.target;\n    this.setState({query: value});\n    clearTimeout(this.timeOut);\n    this.timeOut = setTimeout(() => {\n      this.tableListRef.current.apiCall(true);\n    }, 1000);\n  }\n\n  onStatusFilterClick = (newStatus) => {\n    if(this.state.status === newStatus){\n      return;\n    }\n    this.setState({status: newStatus}, () => {\n      this.tableListRef.current.apiCall(true);\n    });\n  }\n\n  componentWillMount = () => {\n    let cols = tableData.columns;\n    this.setState({\n      columns: cols,\n      selectedColumns: cols,\n      fixedColumns: (Object.keys(tableData).length > 0 ? tableData['fixedColumns'] : []),\n      formattedColumns: (Object.keys(tableData).length > 0 ? tableData['formattedColumns'] : []),\n      columnExtensions: (Object.keys(tableData).length > 0 ? tableData['columnExtensions'] : []),\n    });\n  }\n\n  public render(): JSX.Element {\n    let ins  = this;\n\n    return (\n      <div>\n        {this.state.loading ? <Loader/> : null}\n\n        <div style={{position: 'absolute', right: '1rem', top: '1rem'}}>\n          <Fab color='primary' style={{backgroundColor: '#CCCCCC'}}>\n            <ExitToAppIcon onClick={this.onLogout} />\n          </Fab>\n        </div>\n\n        <div className={clsx('TicketListPage')}>\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"space-between\"\n            alignItems=\"baseline\" >\n            <Grid item xs={12} className={clsx('header-label')}>\n              <Typography className={clsx('title')} color=\"textPrimary\">\n                Tickets\n              </Typography>\n            </Grid>\n          </Grid>\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"space-between\"\n            alignItems=\"center\"\n            spacing={1}\n            className={clsx('search')} >\n            <Grid item sm={12} md={8}>\n              <TextField\n                id=\"cc_search_tickets_tf\"\n                placeholder=\"Search ticket ID\"\n                className={clsx('search-field')}\n                margin=\"dense\"\n                variant=\"outlined\"\n                fullWidth\n                onChange={ins.onSearchTextChange}\n                value={ins.state.query}\n                inputProps={{ 'aria-label': 'bare' }}\n                InputProps={{\n                  startAdornment: (\n                    <FontAwesomeIcon\n                      icon={faSearch}\n                      className={clsx('input-adornment')}\n                    />\n                  ),\n                }}\n              />\n            </Grid>\n            <Grid item sm={6} md={2} alignContent=\"flex-end\" justify=\"flex-end\">\n              <Button fullWidth onClick={() => { this.generateReport() }} disabled>\n                <Typography className={clsx('link-button disabled')} align=\"right\">\n                  <FontAwesomeIcon\n                    icon={faDownload}\n                    className={clsx('link-button-icon disabled')}\n                  />\n                  <span className={clsx('link-button-text')}>Generate Report</span>\n                </Typography>\n              </Button>\n            </Grid>\n            <Grid item sm={6} md={2} alignContent=\"flex-end\">\n              <SelectColumnsPopover \n                setSelectedColumns={this.setSelectedColumns} \n                columns={this.state.columns} \n                selectedColumns={this.state.selectedColumns} />\n            </Grid>\n          </Grid>\n          <Grid container direction=\"row\" className={clsx('tickets-table')}>\n            <Grid item xs={12}>\n              <Paper className={clsx('tickets-table-container')}>\n                <Grid container xs={12}>\n                  <Grid item xs className={clsx('tickets-table-stats')}>\n                    <Typography align=\"center\" onClick={() => { this.onStatusFilterClick('') }}>\n                      <span className={(this.state.status=='') ? clsx('tickets-all') : clsx('tickets-default')}>\n                        {this.state.ticketStats.all? this.state.ticketStats.all : 0}\n                      </span>\n                      <span className={(this.state.status=='') ? clsx('ticket-label-active') : clsx('ticket-label')}>ALL</span>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs className={clsx('tickets-table-stats')}>\n                    <Typography align=\"center\" onClick={() => { this.onStatusFilterClick('open') }}>\n                      <span className={(this.state.status=='open') ? clsx('tickets-open') : clsx('tickets-default')}>\n                        {this.state.ticketStats.open? this.state.ticketStats.open : 0}\n                      </span>\n                      <span className={(this.state.status=='open') ? clsx('ticket-label-active') : clsx('ticket-label')}>OPEN</span>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs className={clsx('tickets-table-stats')}>\n                    <Typography align=\"center\" onClick={() => { this.onStatusFilterClick('pending') }}>\n                      <span className={(this.state.status=='pending') ? clsx('tickets-pending') : clsx('tickets-default')}>\n                        {this.state.ticketStats.pending? this.state.ticketStats.pending : 0}\n                      </span>\n                      <span className={(this.state.status=='pending') ? clsx('ticket-label-active') : clsx('ticket-label')}>PENDING</span>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs className={clsx('tickets-table-stats')}>\n                    <Typography align=\"center\" onClick={() => { this.onStatusFilterClick('resolved') }}>\n                      <span className={(this.state.status=='resolved') ? clsx('tickets-resolved') : clsx('tickets-default')}>\n                        {this.state.ticketStats.resolved? this.state.ticketStats.resolved : 0}\n                      </span>\n                      <span className={(this.state.status=='resolved') ? clsx('ticket-label-active') : clsx('ticket-label')}>RESOLVED</span>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs className={clsx('tickets-table-stats')}>\n                    <Typography align=\"center\" onClick={() => { this.onStatusFilterClick('closed') }}>\n                      <span className={(this.state.status=='closed') ? clsx('tickets-closed') : clsx('tickets-default')}>\n                        {this.state.ticketStats.closed? this.state.ticketStats.closed : 0}\n                      </span>\n                      <span className={(this.state.status=='closed') ? clsx('ticket-label-active') : clsx('ticket-label')}>CLOSED</span>\n                    </Typography>\n                  </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                  <CustomTable\n                    ref={this.tableListRef}\n                    className='ticket-list-table'\n                    style={{minHeight: '300px'}}\n                    canOverflow\n                    stickyHeader\n                    columns={this.getTableColumns()}\n                    rows={this.tickets}\n                    renderRow={(row: any, index: number) => this.renderTableRow(row, index, this.state.columns, this.state.fixedColumns)}\n                    rowsPerPageOptions={[5, 10, 15]}\n                    serverSideOption={{\n\n                      getUrl: (offset: number, limit: number, tableFilter: any) => {\n                        const millisInDay = 1000 * 60 * 60 * 24;\n\n                        const filter = {\n                          where: { \n                            and: [\n\n                              /* Main Filter */\n                              { status: { regexp: `/${this.state.status}/i` }},\n\n                              /* Search Filters */\n                              this.state.query.length ? {\n                                ticket_id: { regexp: `/${this.state.query}/i` }\n                              } : undefined,\n\n                              /* Table Columns Filter */\n                              tableFilter.urgency && tableFilter.urgency.value.length ? {\n                                'ticket_category.urgency': { like: tableFilter.urgency.value, options: 'i' }\n                              } : undefined,\n                              tableFilter.status ? {\n                                status: { regexp: `/${tableFilter.status}/i` }\n                              } : undefined,\n                              tableFilter.ticket_id ? {\n                                ticket_id: { regexp: `/${tableFilter.ticket_id}/i` }\n                              } : undefined,\n                              tableFilter.type ? {\n                                'ticket_category.ticket_type': { like: tableFilter.type, options: 'i' }\n                              } : undefined,\n                              tableFilter.specificType ? {\n                                'ticket_category.specific_type': { like: tableFilter.specificType, options: 'i' },\n                              } : undefined,\n                              tableFilter.member ? {\n                                or: [\n                                  { 'member_data.last_name': { like: tableFilter.member, options: 'i' }},\n                                  { 'member_data.middle_name': { like: tableFilter.member, options: 'i' }},\n                                  { 'member_data.first_name': { like: tableFilter.member, options: 'i' }}\n                                ]\n                              } : undefined,\n                              tableFilter.company ? {\n                                'client_data.registered_name': { like: tableFilter.company, options: 'i' }\n                              } : undefined,\n                              tableFilter.ticketOwner ? {\n                                'ticket_owner_name': { like: tableFilter.ticketOwner, options: 'i' },\n                                'created_by.name': { like: tableFilter.ticketOwner, options: 'i' }\n                              } : undefined,\n                              tableFilter.assignedTo ? {\n                                assign_to: { regexp: `/${tableFilter.assignedTo}/i` }\n                              } : undefined,\n                              tableFilter.createdDate ? {\n                                date_created: {\n                                    between: [\n                                        GlobalFunction.getDate(new Date(tableFilter.createdDate.getTime() - millisInDay)),\n                                        GlobalFunction.getDate(new Date(tableFilter.createdDate.getTime() + millisInDay))\n                                    ]\n                                }\n                              } : undefined,\n                              tableFilter.lastUpdate ? {\n                                date_updated: {\n                                    between: [\n                                        GlobalFunction.getDate(new Date(tableFilter.lastUpdate.getTime() - millisInDay)),\n                                        GlobalFunction.getDate(new Date(tableFilter.lastUpdate.getTime() + millisInDay))\n                                    ]\n                                }\n                              } : undefined,\n                              tableFilter.channel ? {\n                                received_via: { regexp: `/${tableFilter.channel}/i` }\n                              } : undefined,\n\n                            ].filter(item => item)\n                          },\n                          skip: offset,\n                          limit: limit,\n                          order: 'date_created DESC'\n                        };\n\n                        if (filter.where['and'].length === 0)\n                          // @ts-ignore\n                          filter.where = {};\n\n                        return `customer-care/tickets?filter=${JSON.stringify(filter)}&with_count=true&is_initial=true`\n                      },\n\n                      onSuccess: (response: any) => {\n                        this.tickets = response.tickets.map(ticket => {\n                          return {\n                            urgency: ticket.ticket_category.urgency,\n                            status: ticket.status,\n                            _id: ticket._id,\n                            ticket_id: ticket.ticket_id,\n                            caseId: ticket.pmaker_case_uid,\n                            dueDate: null,\n                            type: ticket.ticket_category.ticket_type,\n                            specificType: ticket.ticket_category.specific_type,\n                            member: ticket.member_data ? \n                              GlobalFunction.toNameFormat(\n                                ticket.member_data.first_name,\n                                ticket.member_data.middle_name,\n                                ticket.member_data.last_name\n                              ) : 'N/A',\n                            company: \n                              ticket.member_data ? ticket.member_data.client : \n                              ticket.client_data ? ticket.client_data.registered_name : \n                              'N/A',\n                            is_vip: ticket.member_data ? ticket.member_data.is_vip ? 'Yes' : 'No' : 'N/A',\n                            ticketOwner: ticket.ticket_owner_name ? ticket.ticket_owner_name : ticket.created_by.name,\n                            assignedTo: ticket.assign_to,\n                            createdDate: ticket.date_created ? \n                              GlobalFunction.toDateAndTime(new Date(ticket.date_created)) :\n                              null,\n                            lastUpdate: ticket.date_updated ?\n                              GlobalFunction.toDateAndTime(new Date(ticket.date_updated)) :\n                              null,\n                            channel: ticket.received_via,\n                            transaction_no: ticket.transaction_no,\n                          }\n                        });\n                        this.setState({ticketStats: {\n                          all: \n                            response.open + \n                            response.closed + \n                            response.resolved + \n                            response.pending + \n                            response.cancelled,\n                          open: response.open,\n                          closed: response.closed,\n                          resolved: response.resolved,\n                          pending: response.pending\n                        }});\n\n                      },\n\n                      getCount: (response: any) => {\n                        return response.total;\n                      }\n\n                    }} />\n                </Grid>\n              </Paper>\n            </Grid>\n          </Grid>\n        </div>\n      </div>\n    );\n  }\n\n  getTableColumns = () => {\n    let dockedColumnsCounter = 0;\n\n    const getStyle = (minWidth: string, isSticked: boolean, withBorderRight: boolean) => {\n      const style = {\n        left: isSticked ? dockedColumnsCounter * 125 : 0,\n        zIndex: isSticked ? 130 : 5,\n        minWidth: minWidth,\n        maxWidth: '300px',\n        borderRight: withBorderRight ? '#9EA3AC 2px solid' : undefined\n      };\n      if (isSticked)\n        dockedColumnsCounter++;\n      return style;\n    }\n\n    const addColumn = (\n      name: string, \n      key: string, \n      minWidth: string, \n      isSticked: boolean, \n      withBorderRight: boolean, \n      filterType: string, \n      sortType?: string,\n      disabled?: boolean,\n      choices?: DropdownChoice[]) => {\n      if (this.state.selectedColumns.find(column => column.name === key)) {\n        return {\n          name: name,\n          key: key,\n          style: getStyle(minWidth, isSticked, withBorderRight),\n          filterType: filterType,\n          filterOption: choices,\n          sortType: sortType,\n          filterDisabled: disabled\n        }\n      }\n      return undefined;\n    }\n\n    const urgencyChoices = [\n      { value: '', label: '' },\n      { value: 'low', label: 'Low' },\n      { value: 'medium', label: 'Medium' },\n      { value: 'high', label: 'High' },\n    ];\n\n    const vipChoices = [\n      { value: '', label: '', },\n      { value: 'false', label: 'No', },\n      { value: 'true', label: 'Yes', }\n    ];\n\n    const tableColumn: any[] = [\n      addColumn('Urgency',       'urgency',      '125px', true,  false, 'dropdown', 'string', undefined, urgencyChoices),\n      addColumn('Status',        'status',       '125px', true,  true,  'string', 'string'),\n      addColumn('Ticket ID',     'ticket_id',    '125px', false, false, 'string', 'string'),\n      addColumn('Due Date',      'dueDate',      '125px', true,  false, 'string', undefined, true),\n      addColumn('Type',          'type',         '125px', true,  false, 'string', 'string'),\n      addColumn('Specific Type', 'specificType', '125px', true,  false, 'string', 'string'),\n      addColumn('Member',        'member',       '125px', true,  true,  'string', 'string'),\n      addColumn('Company',       'company',      '125px', false, false, 'string', 'string'),\n      addColumn('Ticket Owner',  'ticketOwner',  '125px', false, false, 'string', 'string'),\n      addColumn('Assigned To',   'assignedTo',   '200px', false, false, 'string', 'string'),\n      addColumn('Created Date',  'createdDate',  '125px', false, false, 'date', 'date'),\n      addColumn('Last Date',     'lastUpdate',   '125px', false, false, 'date', 'date'),\n      addColumn('Channel',       'channel',      '125px', false, false, 'string', 'string'),\n      addColumn('VIP',           'is_vip',       '125px', false, false, 'dropdown', 'string', undefined, vipChoices)\n    ].filter(column =>  column);\n\n    return tableColumn;\n  }\n\n  renderTableRow(row: any, index: number, columns: any, fixedColumns: any): JSX.Element {\n    let dockedColumnsCounter = 0;\n    const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n    return (\n      <TableRow \n        style={{backgroundColor: backgroundColor}}\n        onClick={() => {\n          Processmaker.get(`cases/${row.caseId}`,(cases) => {\n            //console.log('click',cases,row)\n            const route = \n            (row.status === 'Resolved' && row.type !== 'Inquiry') || \n            row.specificType === 'Outpatient Procedure' ||\n            row.specificType === 'Emergency Room' ||\n            row.specificType === 'Consultation' ||\n            cases.current_task[0].tas_title === 'Inpatient - Proceed with Final Assessment' ||\n            cases.current_task[0].tas_title === 'Inpatient - Approver Proceed with Final Assessment' ||\n            cases.current_task[0].tas_title === 'Inpatient - Approvers Proceed with Final Assessment' ||\n            cases.current_task[0].tas_title === 'Inpatient - Generate Approval Code' ||\n            cases.current_task[0].tas_title === 'Inpatient - Approver Summarize Assessment' ||\n            cases.current_task[0].tas_title === 'Inpatient - Summarize Assessment' ||\n            cases.current_task[0].tas_title === 'Inpatient - Resolve Ticket' ||\n            cases.current_task[0].tas_title === 'Inpatient - Review Ticket' ||\n            cases.current_task[0].tas_title === 'Complaint - Resolve Ticket' ||\n            cases.current_task[0].tas_title === 'Complaint - Escalate Ticket 2' ||\n            cases.current_task[0].tas_title === 'Complaint - Close Ticket' ||\n            cases.current_task[0].tas_title === 'Complaint - Comment 2' ||\n            cases.current_task[0].tas_title === 'Complaint - Escalate Ticket 3' ||\n            cases.current_task[0].tas_title === 'Complaint - Claim Close Task' ||\n            cases.current_task[0].tas_title === 'Complaint - Comment 3' ||\n            cases.current_task[0].tas_title.includes('Outpatient') ||\n            cases.current_task[0].tas_title === 'Approval - Approver Submit for Assessment' ||\n            cases.current_task[0].tas_title === 'Approval - Approver Summarize Assessment' ||\n            cases.current_task[0].tas_title === 'Approval - Resolve Ticket' ||\n            cases.current_task[0].tas_title === 'Approval - Claim Close Ticket' ||\n            cases.current_task[0].tas_title === 'Approval - Escalate Ticket 2' ||\n            cases.current_task[0].tas_title === 'Approval - Escalate Ticket 3' ||\n            cases.current_task[0].tas_title === 'Approval - Escalate Ticket 4' ||\n            cases.current_task[0].tas_title === 'Approval - Comment 2' ||\n            cases.current_task[0].tas_title === 'Approval - Comment 3' ||\n            cases.current_task[0].tas_title === 'Approval - Comment 4' ?\n              'resolve-ticket' : 'update-ticket';\n              window.location.href = `#/customer-care/${route}/${row.caseId}/${row._id}`; \n          }, ()=>{\n              const route = \n              (row.status === 'Resolved' && row.type !== 'Inquiry') || \n              row.specificType === 'Outpatient Procedure' ||\n              row.specificType === 'Emergency Room' ||\n              row.specificType === 'Consultation' ||\n              row.type === 'Complaint/Concern' ||\n              row.caseId === '-' || row.caseId === '---' ? \n                'resolve-ticket' : 'update-ticket';\n                window.location.href = `#/customer-care/${route}/${row.caseId}/${row._id}`; \n          });\n          \n        }}>\n        {columns\n          .filter(column => {\n            for (var i = 0; i < this.state.selectedColumns.length; i++) {\n              if (this.state.selectedColumns[i].name === column.name) {\n                return true;\n              }\n            }\n            return false;\n          })\n          .map((column, index) => {\n            const matchedColumn = fixedColumns.filter(col => col === column.name)[0];\n            let nextColumnIsFixed = true;\n            if (matchedColumn && columns[index + 1]) {\n              nextColumnIsFixed = fixedColumns.filter(col => col ===  columns[index + 1].name)[0] ? true : false;\n            }\n            const style = {\n              left: matchedColumn ? dockedColumnsCounter * 125 : 0,\n              zIndex: matchedColumn ? 125 : 0,\n              position: matchedColumn ? 'sticky' : 'relative' as PositionProperty,\n              minWidth: column.name === 'assignedTo' ? '200px' : '125px',\n              maxWidth: '300px',\n              borderRight: !nextColumnIsFixed ? '#9EA3AC 2px solid' : undefined,\n            };\n            if (matchedColumn) {\n              dockedColumnsCounter++;\n            }\n            const urgencyColor = {\n              Low: '#3AB77D',\n              Medium: '#FAB435',\n              High: '#FD5451'\n            };\n            const urgencyNumber = {\n              Low: 3,\n              Medium: 2,\n              High: 1\n            };\n            return (\n              <TableCell style={style}>\n                {column.name === 'urgency' ? (\n                  <div style={{width: '100%', textAlign: 'center'}}>\n                    <div \n                      className={urgencyNumber[row[column.name]] ? 'number-item' : ''}\n                      style={{\n                        display: 'inline-block', \n                        backgroundColor: urgencyColor[row[column.name]]}}>\n                      {urgencyNumber[row[column.name]] ? (\n                        urgencyNumber[row[column.name]]\n                      ) : '---'}\n                    </div>\n                  </div>\n                ) : row[column.name] ? (\n                  row[column.name]\n                ) : '---'}\n              </TableCell>\n            );\n          })\n        }\n      </TableRow>\n    );\n  }\n}\n\nconst mapStateToProps = (state: Store) => state.ticketList;\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n\tMap: bindActionCreators(TicketListActions.Map, dispatch),\n});\n\nexport { mapStateToProps, mapDispatchToProps };\n"],"sourceRoot":""}