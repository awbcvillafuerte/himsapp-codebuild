{"version":3,"sources":["Pages/TicketList/ActionConsts.ts","Pages/TicketList/TicketListActions.ts","Pages/TicketList/TicketListTableData.ts","Pages/TicketList/Processmaker.tsx","Pages/TicketList/TicketListPage.tsx"],"names":["ActionConsts","ResetReducer","SetReducer","TicketListActions","payload","type","columnNames","name","title","tableData","formattedColumns","required_columns","urgency_columns","text_columns","date_columns","boolean_columns","detaillink_columns","columnExtensions","columns","map","column","width","push","columnName","wordWrapEnabled","getColumnExtensions","fixedColumns","cellProperties","rows","types","specTypes","statuses","channels","is_vip","index","status","faker","random","arrayElement","urgency","capitalize","app_uid","alphaNumeric","dueDate","date","future","specificType","member","findName","company","companyName","ticketOwner","assignedTo","createdDate","lastUpdate","channel","generateRows","backendUrl","process","Processmaker","url","success","fail","token","localStorage","getItem","fetch","method","headers","then","response","json","data","catch","error","body","JSON","stringify","popoverStyles","makeStyles","theme","popoverCheckbox","marginLeft","spacing","marginRight","SelectColumnsPopover","props","selectedColumns","setSelectedColumns","classes","popupState","usePopupState","variant","popupId","Button","fullWidth","bindTrigger","Typography","className","clsx","align","icon","faThList","Popover","bindPopover","anchorOrigin","vertical","horizontal","transformOrigin","FormGroup","idx","columnObj","checked","findIndex","FormControlLabel","key","control","Checkbox","onChange","event","target","tmpSelectedColumns","remove","value","color","label","TicketListPage","tickets","tableListRef","onLogout","window","location","replace","reset","setState","loading","query","getTicketStats","ticketStats","all","length","open","filter","ticket","toLowerCase","closed","resolved","pending","loadTicketList","a","tempTickets","state","API","get","console","log","pmaker_case_uid","ticket_category","ticket_no","_id","ticket_type","specific_type","member_data","GlobalFunction","toNameFormat","last_name","middle_name","first_name","client","client_data","registered_name","created_by","assign_to","toDateAndTime","Date","date_created","date_updated","received_via","transaction_no","app_number","cases","matchedCase","caseItem","generateTicketNumber","sort","cols","getVisibleColumns","generateReport","onSearchTextChange","e","preventDefault","onStatusFilterClick","newStatus","current","resetPage","componentWillMount","Object","keys","componentDidMount","getFilteredTickets","filteredTickets","filters","toString","includes","ticketList","React","attrName","isAsc","this","b","style","position","right","top","Fab","backgroundColor","onClick","Grid","container","direction","justify","alignItems","item","xs","sm","md","TextField","id","placeholder","margin","inputProps","InputProps","startAdornment","faSearch","alignContent","disabled","faDownload","Paper","overflow","CustomTable","ref","canOverflow","stickyHeader","renderHeader","renderTableHeader","renderRow","row","renderTableRow","rowsPerPageOptions","dockedColumnsCounter","i","matchedColumn","col","nextColumnIsFixed","left","zIndex","minWidth","maxWidth","borderRight","undefined","TableCell","float","IconButton","faSort","sortTickets","InputField","TableRow","route","href","textAlign","display","Low","Medium","High","mapStateToProps","mapDispatchToProps","dispatch","Map","bindActionCreators"],"mappings":"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","file":"static/js/5.faf21b8f.chunk.js","sourcesContent":["export const ActionConsts = {\n  TicketList: {\n    ResetReducer: 'TicketList_ResetReducer',\n    SetReducer: 'TicketList_SetReducer',\n  },\n};\n","//#region Global Imports\n// import { Dispatch } from 'redux';\n//#endregion Global Imports\n\n//#region Local Imports\nimport { ActionConsts } from './ActionConsts';\n// import { PlanetaryService } from 'Components/Services';\n//#endregion Local Imports\n\n//#region Interface Imports\n//#endregion Interface Imports\n\nexport const TicketListActions = {\n  Map: (payload: {}) => ({\n    payload,\n    type: ActionConsts.TicketList.SetReducer,\n  }),\n\n  Reset: () => ({\n    type: ActionConsts.TicketList.ResetReducer,\n  }),\n};\n","import faker from 'faker';\nimport { capitalize } from 'lodash';\n\nconst columnNames = [\n  {\n    name: 'urgency',\n    title: 'Urgency',\n  },\n  {\n    name: 'status',\n    title: 'Status',\n  },\n  {\n    name: 'app_number',\n    title: 'Ticket ID',\n  },\n  {\n    name: 'dueDate',\n    title: 'Due Date',\n  },\n  {\n    name: 'type',\n    title: 'Type',\n  },\n  {\n    name: 'specificType',\n    title: 'Specific Type',\n  },\n  {\n    name: 'member',\n    title: 'Member',\n  },\n  {\n    name: 'company',\n    title: 'Company',\n  },\n  {\n    name: 'ticketOwner',\n    title: 'Ticket Owner',\n  },\n  {\n    name: 'assignedTo',\n    title: 'Assigned To',\n  },\n  {\n    name: 'createdDate',\n    title: 'Created Date',\n  },\n  {\n    name: 'lastUpdate',\n    title: 'Last Update',\n  },\n  {\n    name: 'channel',\n    title: 'Channel',\n  },\n  {\n    name: 'is_vip',\n    title: 'VIP',\n  },\n];\n\nconst getColumnExtensions = () => {\n  const columns: any[] = [];\n\n  columnNames.map(column => {\n    let width = 200;\n\n    switch (column.name) {\n      case 'urgency':\n      case 'status':\n      case 'app_uid':\n        width = 100;\n        break;\n      case 'type':\n      case 'dueDate':\n        width = 120;\n        break;\n      case 'specificType':\n      case 'company':\n        width = 250;\n        break;\n      default:\n        width = 200;\n    }\n\n    columns.push({\n      columnName: column.name,\n      width: width,\n      wordWrapEnabled: true,\n    });\n  });\n\n  return columns;\n};\n\nconst generateRows = () => {\n  const rows: any[] = [];\n  const types = ['Inquiry', 'Availment', 'Request', 'Complaint'];\n  const specTypes = [\n    'Billing Dispute Inquiry',\n    'Outpatient Consult',\n    'X-Ray Procedure Availment',\n    'Service Complaint',\n    'Dental Coverage',\n    'Premium Adjustment',\n  ];\n  const statuses = ['open', 'pending', 'resolved', 'closed'];\n  const channels = ['email', 'fax', 'sms'];\n  const is_vip = [true, false];\n  for (let index = 0; index < 50; index++) {\n    const status = faker.random.arrayElement(statuses);\n    const urgency =\n      status === 'closed' || status === 'resolved'\n        ? 3\n        : faker.random.arrayElement([1, 2]);\n\n    rows.push({\n      urgency: urgency,\n      status: capitalize(status),\n      app_uid: faker.random.alphaNumeric(8),\n      dueDate: faker.date.future(),\n      type: faker.random.arrayElement(types),\n      specificType: faker.random.arrayElement(specTypes),\n      member: faker.name.findName(),\n      company: faker.company.companyName(),\n      ticketOwner: faker.name.findName(),\n      assignedTo: faker.name.findName(),\n      createdDate: faker.date.future(),\n      lastUpdate: faker.date.future(),\n      channel: faker.random.arrayElement(channels),\n      is_vip: faker.random.arrayElement(is_vip),\n    });\n  }\n\n  return rows;\n};\n\nconst tableData: any = {\n  formattedColumns: {\n    required_columns: [],\n    urgency_columns: ['urgency'],\n    text_columns: [\n      'status',\n      'app_uid',\n      'type',\n      'specificType',\n      'member',\n      'company',\n      'ticketOwner',\n      'assignedTo',\n      'channel',\n    ],\n    date_columns: [\n      'dueDate', \n      'createdDate', \n      'lastUpdate',\n    ],\n    boolean_columns: [\n      'is_vip',\n    ],\n    detaillink_columns: [\n      'app_uid',\n    ]\n  },\n  columnExtensions: getColumnExtensions(),\n  fixedColumns: [\n    'urgency',\n    'status',\n    'dueDate',\n    'app_uid',\n    'type',\n    'specificType',\n    'member',\n  ],\n  cellProperties: [],\n  columns: columnNames,\n  rows: generateRows(),\n};\n\nexport { tableData };\n","let backendUrl = process.env.REACT_APP_PMAKER_BASE_URL;\n\nexport class Processmaker {\n\n    // //local\n    // static localUrl = 'localhost:32766/api/1.0/workflow';\n\n    // //stg\n    // static stgUrl = 'http://18.140.39.215/api/1.0/workflow';\n    \n    static async get(url: string, success: Function, fail: Function) {\n        const token = localStorage.getItem('pm_token') || '';\n        // const backendUrl = (process.env.NODE_ENV === 'development' ? this.localUrl : this.stgUrl);\n        fetch(backendUrl + url, {\n            method: 'GET',\n            headers: { \n                'Authorization': 'Bearer ' + token\n            },\n        })\n        .then(response => response.json())\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n\n    static async post(url:string, body: any, success: Function, fail: Function) {\n        // const backendUrl = (process.env.NODE_ENV === 'development' ? this.localUrl : this.stgUrl);\n        fetch(backendUrl + url, {\n            method: 'POST',\n            headers: { \n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + localStorage.getItem('pm_token')\n            },\n            body: JSON.stringify(body)\n        })\n        .then(response => response.json())\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n\n    static async put(url: string, body: any, success: Function, fail: Function) {\n        // const backendUrl = (process.env.NODE_ENV === 'development' ? this.localUrl : this.stgUrl);\n        fetch(backendUrl + url, {\n            method: 'PUT',\n            headers: { \n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + localStorage.getItem('pm_token')\n            },\n            body: JSON.stringify(body)\n        })\n        .then(response => response)\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n}","//#region Global Imports\nimport * as React from 'react';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport {\n  Grid,\n  Typography,\n  Button,\n  TextField,\n  Paper,\n  Popover,\n  Checkbox,\n  FormGroup,\n  FormControlLabel,\n  TableRow,\n  TableCell,\n} from '@material-ui/core';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport {\n  usePopupState,\n  bindTrigger,\n  bindPopover,\n} from 'material-ui-popup-state/hooks';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faDownload,\n  faSearch,\n  faThList,\n  faSort,\n} from '@fortawesome/free-solid-svg-icons';\nimport { map, findIndex, remove, filter } from 'lodash';\nimport clsx from 'clsx';\nimport { Fab } from '@material-ui/core';\n\n//#endregion Global Imports\n\n//#region Interface Imports\nimport { Store } from 'Components/Stores/IStore';\nimport { Loader } from 'Components/UI/LoadingIndicator';\nimport { ITicketListPage } from './ITicketListPage';\nimport { TicketListActions } from './TicketListActions';\n// import { TableComponent } from './TicketListTableFixed';\n// import { TableComponent } from './TicketListTable';\nimport { tableData } from './TicketListTableData';\nimport { API } from './API';\nimport { Processmaker } from './Processmaker';\n\n// import { Components } from '@hims/core';\n\nimport './index.scss';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { PositionProperty } from 'csstype';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\n//#endregion Interface Imports\n\nconst popoverStyles = makeStyles((theme: Theme) => ({\n  popoverCheckbox: {\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n  },\n}));\n\ninterface SelectColumnsPopoverProps {\n  columns: any[];\n  selectedColumns: any[];\n  setSelectedColumns: any;\n}\n\nconst SelectColumnsPopover: React.FC<SelectColumnsPopoverProps> = (\n\tprops: SelectColumnsPopoverProps,\n): JSX.Element => {\n  const { \n    columns,\n    selectedColumns,\n    setSelectedColumns,\n  } = props;\n  const classes = popoverStyles(props);\n\n  const onCheckChange = (columnObj: any) => (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    if (event.target.checked) {\n      const tmpSelectedColumns = [...selectedColumns];\n      tmpSelectedColumns.push(columnObj);\n\n      setSelectedColumns(tmpSelectedColumns);\n    } else {\n      const tmpSelectedColumns = [...selectedColumns];\n      remove(tmpSelectedColumns, columnName => {\n        return columnName.name === columnObj.name;\n      });\n\n      setSelectedColumns(tmpSelectedColumns);\n    }\n  };\n\n  const popupState = usePopupState({\n    variant: 'popover',\n    popupId: 'columnListPopover',\n  });\n\n  return(\n    <div>\n      <Button fullWidth {...bindTrigger(popupState)}>\n        <Typography className={clsx('link-button')} align=\"right\">\n          <FontAwesomeIcon\n            icon={faThList}\n            className={clsx('link-button-icon')}\n          />\n          <span className={clsx('link-button-text')}>Display Columns</span>\n        </Typography>\n      </Button>\n      <Popover\n        {...bindPopover(popupState)}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n      >\n        <FormGroup>\n          {map(columns, (column, idx) => {\n            const checked =\n              findIndex(selectedColumns, { name: column.name }) >= 0;\n\n            return (\n              <FormControlLabel\n                key={idx}\n                control={\n                  <Checkbox\n                    checked={checked}\n                    onChange={onCheckChange(column)}\n                    value={column.name}\n                    color=\"primary\"\n                  />\n                }\n                className={classes.popoverCheckbox}\n                label={column.title}\n              />\n            );\n          })}\n        </FormGroup>\n      </Popover>\n    </div> \n  );\n};\n\n\n\n\n\nexport class TicketListPage extends React.Component<ITicketListPage.IProps, ITicketListPage.IState> {\n\n  tickets: any[];\n  tableListRef: any;\n  \n  constructor(props: ITicketListPage.IProps) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n      loading: false,\n      status: '',\n      query: '',\n      columns: [],\n      selectedColumns: [],\n      fixedColumns: [],\n      formattedColumns: {},\n      columnExtensions: [],\n      rows: [],\n      ticketStats: {},\n      ticketList: [],\n\n      filters: {}\n    };\n\n    this.tickets = [];\n    this.tableListRef = React.createRef();\n    //localStorage.setItem('pm_token', '2f0612ef209de4a941580145912ef252549a343d');\n  }\n  \n  onLogout = () => {\n    window.location.replace('../index.html#/');\n  }\n\n\treset = () => {\n\t\tthis.setState({\n      loading: false,\n      // status: '',\n      query: '',\n      // columns: [],\n      // selectedColumns: [],\n      // fixedColumns: [],\n      // formattedColumns: {},\n      // columnExtensions: [],\n      // rows: [],\n      // ticketStats: {},\n      // ticketList: [],\n\t\t});\n  };\n\n  getTicketStats = (tickets: any[]) => {\n    this.setState({ticketStats: {\n      all: tickets.length,\n      open: tickets.filter(ticket => ticket.status.toLowerCase() === 'open').length,\n      closed: tickets.filter(ticket => ticket.status.toLowerCase() === 'closed').length,\n      resolved: tickets.filter(ticket => ticket.status.toLowerCase() === 'resolved').length,\n      pending: tickets.filter(ticket => ticket.status.toLowerCase() === 'pending').length\n    }})\n  };\n\n  loadTicketList = async () => {\n    // let ins = this;\n    let tempTickets: any = [];\n\n    if (this.state.loading) {\n      return;\n    }\n\n    this.setState({loading: true});\n\n    API.get('customer-care/tickets',\n      (tickets) => {\n        console.log(tickets);\n        tickets.map(ticket => {\n          if (ticket.pmaker_case_uid) {\n            tempTickets.push({\n              urgency: ticket.ticket_category.urgency,\n              status: ticket.status,\n              ticket_no: ticket._id,\n              dueDate: '',\n              type: ticket.ticket_category.ticket_type,\n              specificType: ticket.ticket_category.specific_type,\n              member: ticket.member_data ? \n                GlobalFunction.toNameFormat(\n                  ticket.member_data.last_name,\n                  ticket.member_data.middle_name,\n                  ticket.member_data.first_name\n                ) : 'N/A',\n              company: \n                ticket.member_data ? ticket.member_data.client : \n                ticket.client_data ? ticket.client_data.registered_name : \n                'N/A',\n              is_vip: ticket.member_data ? ticket.member_data.is_vip ? 'Yes' : 'No' : 'N/A',\n              ticketOwner: ticket.created_by.name,\n              assignedTo: ticket.ticket_category.assign_to,\n              createdDate: GlobalFunction.toDateAndTime(new Date(ticket.date_created)),\n              lastUpdate: GlobalFunction.toDateAndTime(new Date(ticket.date_updated)),\n              channel: ticket.received_via,\n              transaction_no: ticket.transaction_no,\n\n              pmaker_case_uid: ticket.pmaker_case_uid,\n              app_uid: '',\n              app_number: ''\n            });\n          }\n        });\n\n        Processmaker.get('cases/participated',\n          (cases) => {\n            console.log(cases);\n            tempTickets.map(ticket => {\n              const matchedCase = cases.filter(caseItem => caseItem.app_uid === ticket.pmaker_case_uid)[0];\n              if (matchedCase) {\n                ticket.app_uid = matchedCase.app_uid;\n                ticket.app_number = \n                  GlobalFunction.generateTicketNumber(\n                    ticket.type,\n                    ticket.specificType,\n                    matchedCase.app_number\n                  );\n                this.tickets.push(ticket);\n              }\n            });\n            this.tickets.sort(() =>  {return -1} );\n            this.getTicketStats(this.tickets);\n            this.setState({loading: false});\n          },\n          (error) => {\n            console.log(error);\n          }\n        );\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n\n  setSelectedColumns = (cols) => {\n    this.setState({\n      selectedColumns: cols\n    });\n  }\n\n  getVisibleColumns = () => {\n    return filter(this.state.columns, column => {\n      return findIndex(this.state.selectedColumns, { name: column.name }) >= 0;\n    });\n  }\n\n  generateReport = () => {\n    console.log('generate report');\n  }\n\n  onSearchTextChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    e.preventDefault();\n    const { value } = e.target;\n    this.setState({query: value});\n  }\n\n  onStatusFilterClick = (newStatus) => {\n    if(this.state.status === newStatus){\n      return;\n    }\n    //console.log('status: ', newStatus);\n    this.setState({status: newStatus});\n\n    this.tableListRef.current.resetPage();\n  }\n\n  componentWillMount = () => {\n    let cols = tableData.columns;\n    this.setState({\n      columns: cols,\n      selectedColumns: cols,\n      fixedColumns: (Object.keys(tableData).length > 0 ? tableData['fixedColumns'] : []),\n      formattedColumns: (Object.keys(tableData).length > 0 ? tableData['formattedColumns'] : []),\n      columnExtensions: (Object.keys(tableData).length > 0 ? tableData['columnExtensions'] : []),\n    });\n  }\n\n  componentDidMount = () => {\n    this.loadTicketList();\n  }\n\n  getFilteredTickets = (columns: any) => {\n    let filteredTickets = this.tickets;\n\n    columns.map(column => {\n      filteredTickets = filteredTickets\n        .filter(ticket => \n          this.state.filters[column.name] ? (\n            this.state.filters[column.name] === '' ||\n            (ticket[column.name] && \n              ticket[column.name].toString().toLowerCase().includes(this.state.filters[column.name].toLowerCase())\n            )\n          ) : true\n        )\n        .filter(ticket => \n          this.state.status === '' || \n          ticket.status.toLowerCase() === this.state.status.toLowerCase())\n        .filter(ticket => \n          this.state.query === '' ||\n          ticket['app_number'].toLowerCase().includes(this.state.query.toLowerCase()));\n    });\n\n    if (this.tableListRef.current) {\n      this.tableListRef.current.resetPage();\n    }\n\n    return filteredTickets;\n  }\n\n  sortTickets(attrName: string, isAsc: boolean): void {\n    this.tickets.sort((a: any, b: any) => \n        (a[attrName] && b[attrName] && a[attrName].toString().toLowerCase() > b[attrName].toString().toLowerCase()) ? \n          (isAsc ? 1 : -1) : (isAsc ? -1 : 1)\n    );\n  }\n\n  public render(): JSX.Element {\n    let ins  = this;\n    \n    return (\n      <div>\n        { this.state.loading ?\n          (<Loader/>) : null\n        }\n\n        <div style={{position: 'absolute', right: '1rem', top: '1rem'}}>\n          <Fab color='primary' style={{backgroundColor: '#CCCCCC'}}>\n          <ExitToAppIcon onClick={this.onLogout} />\n          </Fab>\n        </div>\n\n        <div className={clsx('TicketListPage')}>\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"space-between\"\n            alignItems=\"baseline\" >\n            <Grid item xs={12} className={clsx('header-label')}>\n              <Typography className={clsx('title')} color=\"textPrimary\">\n                Tickets\n              </Typography>\n            </Grid>\n          </Grid>\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"space-between\"\n            alignItems=\"center\"\n            spacing={1}\n            className={clsx('search')} >\n            <Grid item sm={12} md={8}>\n              <TextField\n                id=\"cc_search_tickets_tf\"\n                placeholder=\"Search ticket ID\"\n                className={clsx('search-field')}\n                margin=\"dense\"\n                variant=\"outlined\"\n                fullWidth\n                onChange={ins.onSearchTextChange}\n                value={ins.state.query}\n                inputProps={{ 'aria-label': 'bare' }}\n                InputProps={{\n                  startAdornment: (\n                    <FontAwesomeIcon\n                      icon={faSearch}\n                      className={clsx('input-adornment')}\n                    />\n                  ),\n                }}\n              />\n            </Grid>\n            <Grid item sm={6} md={2} alignContent=\"flex-end\" justify=\"flex-end\">\n              <Button fullWidth onClick={() => { this.generateReport() }} disabled>\n                <Typography className={clsx('link-button disabled')} align=\"right\">\n                  <FontAwesomeIcon\n                    icon={faDownload}\n                    className={clsx('link-button-icon disabled')}\n                  />\n                  <span className={clsx('link-button-text')}>Generate Report</span>\n                </Typography>\n              </Button>\n            </Grid>\n            <Grid item sm={6} md={2} alignContent=\"flex-end\">\n              <SelectColumnsPopover \n                setSelectedColumns={this.setSelectedColumns} \n                columns={this.state.columns} \n                selectedColumns={this.state.selectedColumns} />\n            </Grid>\n          </Grid>\n          <Grid container direction=\"row\" className={clsx('tickets-table')}>\n            <Grid item xs={12}>\n              <Paper className={clsx('tickets-table-container')}>\n                <Grid container xs={12}>\n                  <Grid item xs className={clsx('tickets-table-stats')}>\n                    <Typography align=\"center\" onClick={() => { this.onStatusFilterClick('') }}>\n                      <span className={(this.state.status=='') ? clsx('tickets-all') : clsx('tickets-default')}>\n                        {this.state.ticketStats.all? this.state.ticketStats.all : 0}\n                      </span>\n                      <span className={(this.state.status=='') ? clsx('ticket-label-active') : clsx('ticket-label')}>ALL</span>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs className={clsx('tickets-table-stats')}>\n                    <Typography align=\"center\" onClick={() => { this.onStatusFilterClick('open') }}>\n                      <span className={(this.state.status=='open') ? clsx('tickets-open') : clsx('tickets-default')}>\n                        {this.state.ticketStats.open? this.state.ticketStats.open : 0}\n                      </span>\n                      <span className={(this.state.status=='open') ? clsx('ticket-label-active') : clsx('ticket-label')}>OPEN</span>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs className={clsx('tickets-table-stats')}>\n                    <Typography align=\"center\" onClick={() => { this.onStatusFilterClick('pending') }}>\n                      <span className={(this.state.status=='pending') ? clsx('tickets-pending') : clsx('tickets-default')}>\n                        {this.state.ticketStats.pending? this.state.ticketStats.pending : 0}\n                      </span>\n                      <span className={(this.state.status=='pending') ? clsx('ticket-label-active') : clsx('ticket-label')}>PENDING</span>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs className={clsx('tickets-table-stats')}>\n                    <Typography align=\"center\" onClick={() => { this.onStatusFilterClick('resolved') }}>\n                      <span className={(this.state.status=='resolved') ? clsx('tickets-resolved') : clsx('tickets-default')}>\n                        {this.state.ticketStats.resolved? this.state.ticketStats.resolved : 0}\n                      </span>\n                      <span className={(this.state.status=='resolved') ? clsx('ticket-label-active') : clsx('ticket-label')}>RESOLVED</span>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs className={clsx('tickets-table-stats')}>\n                    <Typography align=\"center\" onClick={() => { this.onStatusFilterClick('closed') }}>\n                      <span className={(this.state.status=='closed') ? clsx('tickets-closed') : clsx('tickets-default')}>\n                        {this.state.ticketStats.closed? this.state.ticketStats.closed : 0}\n                      </span>\n                      <span className={(this.state.status=='closed') ? clsx('ticket-label-active') : clsx('ticket-label')}>CLOSED</span>\n                    </Typography>\n                  </Grid>\n                </Grid>\n                <Grid item xs={12} style={{overflow: 'auto'}}>\n                  <CustomTable\n                    ref={this.tableListRef}\n                    className='ticket-list-table'\n                    canOverflow\n                    rows={this.getFilteredTickets(this.state.columns)}\n                    stickyHeader={true}\n                    renderHeader={() => this.renderTableHeader(this.state.columns, this.state.fixedColumns)}\n                    renderRow={(row: any, index: number) => this.renderTableRow(row, index, this.state.columns, this.state.fixedColumns)}\n                    rowsPerPageOptions={[5, 10, 15]} />\n                </Grid>\n              </Paper>\n            </Grid>\n          </Grid>\n        </div>\n      </div>\n    );\n  }\n  \n  renderTableHeader(columns: any, fixedColumns: any): JSX.Element {\n    let dockedColumnsCounter = 0;\n    return (\n      <>\n      {columns\n        .filter(column => {\n          for (var i = 0; i < this.state.selectedColumns.length; i++) {\n            if (this.state.selectedColumns[i].name === column.name) {\n              return true;\n            }\n          }\n          return false;\n        })\n        .map((column, index) => {\n          const matchedColumn = fixedColumns.filter(col => col === column.name)[0];\n          let nextColumnIsFixed = true;\n          if (matchedColumn && columns[index + 1]) {\n            nextColumnIsFixed = fixedColumns.filter(col => col ===  columns[index + 1].name)[0] ? true : false;\n          }\n          const style = {\n            left: matchedColumn ? dockedColumnsCounter * 125 : 0,\n            zIndex: matchedColumn ? 125 : 0,\n            minWidth: '125px',\n            maxWidth: '125px',\n            borderRight: !nextColumnIsFixed ? '#9EA3AC 2px solid' : undefined\n          };\n          if (matchedColumn) {\n            dockedColumnsCounter++;\n          }\n          return (\n            <TableCell style={style}>\n              <span className='header-2'>{column.title}</span>\n              <div style={{float: 'right'}}>\n                  <IconButton \n                      icon={faSort} \n                      onClick={() => {\n                          this.sortTickets(column.name, true);\n                          this.setState({loading: false});\n                      }} />\n              </div>\n              <InputField\n                  value={this.state.filters[column.name]}\n                  onChange={(value: string) => {\n                    this.state.filters[column.name] = value;\n                    this.setState({filters: this.state.filters});\n                      // this.setState(prevState => ({...prevState, [attrName]: value}));\n                  }} />\n            </TableCell>\n          );\n        })\n      }\n      </>\n    );\n  }\n\n  renderTableRow(row: any, index: number, columns: any, fixedColumns: any): JSX.Element {\n    let dockedColumnsCounter = 0;\n    const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n    return (\n      <TableRow \n        style={{backgroundColor: backgroundColor}}\n        onClick={() => {\n          const route = \n            row.status === 'Resolved' || \n            row.specificType === 'Outpatient Procedure' ||\n            row.specificType === 'Consultation' ? \n              'resolve-ticket' : 'update-ticket';\n              window.location.href = `#/customer-care/${route}/${row.app_uid}/${row.app_number}/${row.ticket_no}`;\n        }}>\n        {columns\n          .filter(column => {\n            for (var i = 0; i < this.state.selectedColumns.length; i++) {\n              if (this.state.selectedColumns[i].name === column.name) {\n                return true;\n              }\n            }\n            return false;\n          })\n          .map((column, index) => {\n            const matchedColumn = fixedColumns.filter(col => col === column.name)[0];\n            let nextColumnIsFixed = true;\n            if (matchedColumn && columns[index + 1]) {\n              nextColumnIsFixed = fixedColumns.filter(col => col ===  columns[index + 1].name)[0] ? true : false;\n            }\n            const style = {\n              left: matchedColumn ? dockedColumnsCounter * 125 : 0,\n              zIndex: matchedColumn ? 125 : 0,\n              position: matchedColumn ? 'sticky' : 'relative' as PositionProperty,\n              minWidth: '125px',\n              maxWidth: '125px',\n              borderRight: !nextColumnIsFixed ? '#9EA3AC 2px solid' : undefined\n            };\n            if (matchedColumn) {\n              dockedColumnsCounter++;\n            }\n            const urgencyColor = {\n              Low: '#3AB77D',\n              Medium: '#FAB435',\n              High: '#FD5451'\n            };\n            const urgencyNumber = {\n              Low: 3,\n              Medium: 2,\n              High: 1\n            };\n            return (\n              <TableCell style={style}>\n                {column.name === 'urgency' ? (\n                  <div style={{width: '100%', textAlign: 'center'}}>\n                    <div \n                      className='number-item' \n                      style={{\n                        display: 'inline-block', \n                        backgroundColor: urgencyColor[row[column.name]]}}>\n                      {urgencyNumber[row[column.name]]}\n                    </div>\n                  </div>\n                ) /*: index == 3 || index == 10 || index == 11 ? (\n                  row[column.name]\n                ) : column.name === 'urgency' ? (\n                  row[column.name] ? 'Yes' : 'No'\n                )*/ : row[column.name]}\n              </TableCell>\n            );\n          })\n        }\n      </TableRow>\n    );\n  }\n}\n\nconst mapStateToProps = (state: Store) => state.ticketList;\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n\tMap: bindActionCreators(TicketListActions.Map, dispatch),\n});\n\nexport { mapStateToProps, mapDispatchToProps };\n"],"sourceRoot":""}