{"version":3,"sources":["Pages/TicketList/ActionConsts.ts","Pages/TicketList/TicketListActions.ts","Pages/TicketList/TicketListTableData.ts","Pages/TicketList/TicketListPage.tsx"],"names":["ActionConsts","ResetReducer","SetReducer","TicketListActions","payload","type","columnNames","name","title","tableData","formattedColumns","required_columns","urgency_columns","text_columns","date_columns","boolean_columns","detaillink_columns","columnExtensions","columns","map","column","width","push","columnName","wordWrapEnabled","getColumnExtensions","fixedColumns","cellProperties","rows","types","specTypes","statuses","channels","is_vip","index","status","faker","random","arrayElement","urgency","capitalize","app_uid","alphaNumeric","dueDate","date","future","specificType","member","findName","company","companyName","ticketOwner","assignedTo","createdDate","lastUpdate","channel","generateRows","popoverStyles","makeStyles","theme","popoverCheckbox","marginLeft","spacing","marginRight","SelectColumnsPopover","props","selectedColumns","setSelectedColumns","classes","popupState","usePopupState","variant","popupId","Button","fullWidth","bindTrigger","Typography","className","clsx","align","icon","faThList","Popover","bindPopover","anchorOrigin","vertical","horizontal","transformOrigin","FormGroup","idx","columnObj","checked","findIndex","FormControlLabel","key","control","Checkbox","onChange","event","target","tmpSelectedColumns","remove","value","color","label","TicketListPage","tickets","tableListRef","onLogout","window","location","replace","reset","setState","loading","query","getTicketStats","ticketStats","all","length","open","filter","ticket","toLowerCase","closed","resolved","pending","loadTicketList","a","state","where","ticket_id","API","get","JSON","stringify","unshift","ticket_category","_id","caseId","pmaker_case_uid","ticket_type","specific_type","member_data","GlobalFunction","toNameFormat","first_name","middle_name","last_name","client","client_data","registered_name","ticket_owner_name","created_by","assign_to","toDateAndTime","Date","date_created","date_updated","received_via","transaction_no","cols","getVisibleColumns","generateReport","console","log","onSearchTextChange","e","preventDefault","onStatusFilterClick","newStatus","current","resetPage","componentWillMount","Object","keys","componentDidMount","getFilteredTickets","filteredTickets","filters","toString","includes","toCommonDateString","ticketList","React","attrName","isAsc","this","sort","b","style","position","right","top","Fab","backgroundColor","onClick","Grid","container","direction","justify","alignItems","item","xs","sm","md","TextField","id","placeholder","margin","inputProps","InputProps","startAdornment","faSearch","alignContent","disabled","faDownload","Paper","overflow","CustomTable","ref","canOverflow","stickyHeader","renderHeader","renderTableHeader","renderRow","row","renderTableRow","rowsPerPageOptions","dockedColumnsCounter","i","matchedColumn","col","nextColumnIsFixed","left","zIndex","minWidth","maxWidth","borderRight","undefined","TableCell","float","IconButton","faSort","sortTickets","utils","MomentUtils","format","invalidDateMessage","InputField","TableRow","Processmaker","cases","route","current_task","tas_title","href","textAlign","display","Low","Medium","High","mapStateToProps","mapDispatchToProps","dispatch","Map","bindActionCreators"],"mappings":"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","file":"static/js/5.09e9011f.chunk.js","sourcesContent":["export const ActionConsts = {\n  TicketList: {\n    ResetReducer: 'TicketList_ResetReducer',\n    SetReducer: 'TicketList_SetReducer',\n  },\n};\n","//#region Global Imports\n// import { Dispatch } from 'redux';\n//#endregion Global Imports\n\n//#region Local Imports\nimport { ActionConsts } from './ActionConsts';\n// import { PlanetaryService } from 'Components/Services';\n//#endregion Local Imports\n\n//#region Interface Imports\n//#endregion Interface Imports\n\nexport const TicketListActions = {\n  Map: (payload: {}) => ({\n    payload,\n    type: ActionConsts.TicketList.SetReducer,\n  }),\n\n  Reset: () => ({\n    type: ActionConsts.TicketList.ResetReducer,\n  }),\n};\n","import faker from 'faker';\nimport { capitalize } from 'lodash';\n\nconst columnNames = [\n  {\n    name: 'urgency',\n    title: 'Urgency',\n  },\n  {\n    name: 'status',\n    title: 'Status',\n  },\n  {\n    name: 'ticket_id',\n    title: 'Ticket ID',\n  },\n  {\n    name: 'dueDate',\n    title: 'Due Date',\n  },\n  {\n    name: 'type',\n    title: 'Type',\n  },\n  {\n    name: 'specificType',\n    title: 'Specific Type',\n  },\n  {\n    name: 'member',\n    title: 'Member',\n  },\n  {\n    name: 'company',\n    title: 'Company',\n  },\n  {\n    name: 'ticketOwner',\n    title: 'Ticket Owner',\n  },\n  {\n    name: 'assignedTo',\n    title: 'Assigned To',\n  },\n  {\n    name: 'createdDate',\n    title: 'Created Date',\n  },\n  {\n    name: 'lastUpdate',\n    title: 'Last Update',\n  },\n  {\n    name: 'channel',\n    title: 'Channel',\n  },\n  {\n    name: 'is_vip',\n    title: 'VIP',\n  },\n];\n\nconst getColumnExtensions = () => {\n  const columns: any[] = [];\n\n  columnNames.map(column => {\n    let width = 200;\n\n    switch (column.name) {\n      case 'urgency':\n      case 'status':\n      case 'app_uid':\n        width = 100;\n        break;\n      case 'type':\n      case 'dueDate':\n        width = 120;\n        break;\n      case 'specificType':\n      case 'company':\n        width = 250;\n        break;\n      default:\n        width = 200;\n    }\n\n    columns.push({\n      columnName: column.name,\n      width: width,\n      wordWrapEnabled: true,\n    });\n  });\n\n  return columns;\n};\n\nconst generateRows = () => {\n  const rows: any[] = [];\n  const types = ['Inquiry', 'Availment', 'Request', 'Complaint'];\n  const specTypes = [\n    'Billing Dispute Inquiry',\n    'Outpatient Consult',\n    'X-Ray Procedure Availment',\n    'Service Complaint',\n    'Dental Coverage',\n    'Premium Adjustment',\n  ];\n  const statuses = ['open', 'pending', 'resolved', 'closed'];\n  const channels = ['email', 'fax', 'sms'];\n  const is_vip = [true, false];\n  for (let index = 0; index < 50; index++) {\n    const status = faker.random.arrayElement(statuses);\n    const urgency =\n      status === 'closed' || status === 'resolved'\n        ? 3\n        : faker.random.arrayElement([1, 2]);\n\n    rows.push({\n      urgency: urgency,\n      status: capitalize(status),\n      app_uid: faker.random.alphaNumeric(8),\n      dueDate: faker.date.future(),\n      type: faker.random.arrayElement(types),\n      specificType: faker.random.arrayElement(specTypes),\n      member: faker.name.findName(),\n      company: faker.company.companyName(),\n      ticketOwner: faker.name.findName(),\n      assignedTo: faker.name.findName(),\n      createdDate: faker.date.future(),\n      lastUpdate: faker.date.future(),\n      channel: faker.random.arrayElement(channels),\n      is_vip: faker.random.arrayElement(is_vip),\n    });\n  }\n\n  return rows;\n};\n\nconst tableData: any = {\n  formattedColumns: {\n    required_columns: [],\n    urgency_columns: ['urgency'],\n    text_columns: [\n      'status',\n      'app_uid',\n      'type',\n      'specificType',\n      'member',\n      'company',\n      'ticketOwner',\n      'assignedTo',\n      'channel',\n    ],\n    date_columns: [\n      'dueDate', \n      'createdDate', \n      'lastUpdate',\n    ],\n    boolean_columns: [\n      'is_vip',\n    ],\n    detaillink_columns: [\n      'app_uid',\n    ]\n  },\n  columnExtensions: getColumnExtensions(),\n  fixedColumns: [\n    'urgency',\n    'status',\n    'dueDate',\n    'app_uid',\n    'type',\n    'specificType',\n    'member',\n  ],\n  cellProperties: [],\n  columns: columnNames,\n  rows: generateRows(),\n};\n\nexport { tableData };\n","//#region Global Imports\nimport * as React from 'react';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport MomentUtils from '@date-io/moment';\nimport {\n  Grid,\n  Typography,\n  Button,\n  TextField,\n  Paper,\n  Popover,\n  Checkbox,\n  FormGroup,\n  FormControlLabel,\n  TableRow,\n  TableCell,\n} from '@material-ui/core';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\n// import { DatePicker } from 'Pages/CustomerCarePage/Components/DatePicker';\nimport {\n  usePopupState,\n  bindTrigger,\n  bindPopover,\n} from 'material-ui-popup-state/hooks';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faDownload,\n  faSearch,\n  faThList,\n  faSort,\n} from '@fortawesome/free-solid-svg-icons';\nimport { map, findIndex, remove, filter } from 'lodash';\nimport clsx from 'clsx';\nimport { Fab } from '@material-ui/core';\nimport 'Pages/CustomerCarePage/Components/component-style.scss'\n\n//#endregion Global Imports\n\n//#region Interface Imports\nimport { Store } from 'Components/Stores/IStore';\nimport { Loader } from 'Components/UI/LoadingIndicator';\nimport { ITicketListPage } from './ITicketListPage';\nimport { TicketListActions } from './TicketListActions';\nimport { tableData } from './TicketListTableData';\nimport { Processmaker } from '../CustomerCarePage/Processmaker'\nimport './index.scss';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { PositionProperty } from 'csstype';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { API } from 'Pages/CustomerCarePage/API';\nimport { KeyboardDatePicker, MuiPickersUtilsProvider, \n  // MaterialUiPickersDate \n} from '@material-ui/pickers';\n//#endregion Interface Imports\n\nconst popoverStyles = makeStyles((theme: Theme) => ({\n  popoverCheckbox: {\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n  },\n}));\n\ninterface SelectColumnsPopoverProps {\n  columns: any[];\n  selectedColumns: any[];\n  setSelectedColumns: any;\n}\n\nconst SelectColumnsPopover: React.FC<SelectColumnsPopoverProps> = (\n\tprops: SelectColumnsPopoverProps,\n): JSX.Element => {\n  const { \n    columns,\n    selectedColumns,\n    setSelectedColumns,\n  } = props;\n  const classes = popoverStyles(props);\n\n  const onCheckChange = (columnObj: any) => (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    if (event.target.checked) {\n      const tmpSelectedColumns = [...selectedColumns];\n      tmpSelectedColumns.push(columnObj);\n\n      setSelectedColumns(tmpSelectedColumns);\n    } else {\n      const tmpSelectedColumns = [...selectedColumns];\n      remove(tmpSelectedColumns, columnName => {\n        return columnName.name === columnObj.name;\n      });\n\n      setSelectedColumns(tmpSelectedColumns);\n    }\n  };\n\n  const popupState = usePopupState({\n    variant: 'popover',\n    popupId: 'columnListPopover',\n  });\n\n  return(\n    <div>\n      <Button fullWidth {...bindTrigger(popupState)}>\n        <Typography className={clsx('link-button')} align=\"right\">\n          <FontAwesomeIcon\n            icon={faThList}\n            className={clsx('link-button-icon')}\n          />\n          <span className={clsx('link-button-text')}>Display Columns</span>\n        </Typography>\n      </Button>\n      <Popover\n        {...bindPopover(popupState)}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n      >\n        <FormGroup>\n          {map(columns, (column, idx) => {\n            const checked =\n              findIndex(selectedColumns, { name: column.name }) >= 0;\n\n            return (\n              <FormControlLabel\n                key={idx}\n                control={\n                  <Checkbox\n                    checked={checked}\n                    onChange={onCheckChange(column)}\n                    value={column.name}\n                    color=\"primary\"\n                  />\n                }\n                className={classes.popoverCheckbox}\n                label={column.title}\n              />\n            );\n          })}\n        </FormGroup>\n      </Popover>\n    </div> \n  );\n};\n\n\n\n\n\nexport class TicketListPage extends React.Component<ITicketListPage.IProps, ITicketListPage.IState> {\n\n  tickets: any[];\n  tableListRef: any;\n  \n  constructor(props: ITicketListPage.IProps) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n      loading: false,\n      status: '',\n      query: '',\n      columns: [],\n      selectedColumns: [],\n      fixedColumns: [],\n      formattedColumns: {},\n      columnExtensions: [],\n      rows: [],\n      ticketStats: {},\n      ticketList: [],\n\n      filters: {}\n    };\n\n    this.tickets = [];\n    this.tableListRef = React.createRef();\n    //localStorage.setItem('pm_token', '2f0612ef209de4a941580145912ef252549a343d');\n  }\n  \n  onLogout = () => {\n    window.location.replace('../index.html#/');\n  }\n\n\treset = () => {\n\t\tthis.setState({\n      loading: false,\n      // status: '',\n      query: '',\n      // columns: [],\n      // selectedColumns: [],\n      // fixedColumns: [],\n      // formattedColumns: {},\n      // columnExtensions: [],\n      // rows: [],\n      // ticketStats: {},\n      // ticketList: [],\n\t\t});\n  };\n\n  getTicketStats = (tickets: any[]) => {\n    this.setState({ticketStats: {\n      all: tickets.length,\n      open: tickets.filter(ticket => ticket.status.toLowerCase() === 'open').length,\n      closed: tickets.filter(ticket => ticket.status.toLowerCase() === 'closed').length,\n      resolved: tickets.filter(ticket => ticket.status.toLowerCase() === 'resolved').length,\n      pending: tickets.filter(ticket => ticket.status.toLowerCase() === 'pending').length\n    }})\n  };\n\n  loadTicketList = async () => { \n\n    if (this.state.loading) {\n      return;\n    }\n\n    this.setState({loading: true});\n\n    const filter = {\n      where: { '$and': [{ ticket_id: { '$ne': null }}] }\n    };\n\n    API.get(`customer-care/tickets?filter=${JSON.stringify(filter)}`,\n      (tickets) => {\n        tickets.map(ticket => {\n          this.tickets.unshift({\n            urgency: ticket.ticket_category.urgency,\n            status: ticket.status,\n            _id: ticket._id,\n            ticket_id: ticket.ticket_id,\n            caseId: ticket.pmaker_case_uid,\n            dueDate: '',\n            type: ticket.ticket_category.ticket_type,\n            specificType: ticket.ticket_category.specific_type,\n            member: ticket.member_data ? \n              GlobalFunction.toNameFormat(\n                ticket.member_data.first_name,\n                ticket.member_data.middle_name,\n                ticket.member_data.last_name\n              ) : 'N/A',\n            company: \n              ticket.member_data ? ticket.member_data.client : \n              ticket.client_data ? ticket.client_data.registered_name : \n              'N/A',\n            is_vip: ticket.member_data ? ticket.member_data.is_vip ? 'Yes' : 'No' : 'N/A',\n            ticketOwner: ticket.ticket_owner_name ? ticket.ticket_owner_name : ticket.created_by.name,\n            assignedTo: ticket.assign_to,\n            createdDate: GlobalFunction.toDateAndTime(new Date(ticket.date_created)),\n            lastUpdate: GlobalFunction.toDateAndTime(new Date(ticket.date_updated)),\n            channel: ticket.received_via,\n            transaction_no: ticket.transaction_no,\n          });\n        });\n\n        this.getTicketStats(this.tickets);\n        this.setState({loading: false});\n      }\n    );\n  }\n\n  setSelectedColumns = (cols) => {\n    this.setState({\n      selectedColumns: cols\n    });\n  }\n\n  getVisibleColumns = () => {\n    return filter(this.state.columns, column => {\n      return findIndex(this.state.selectedColumns, { name: column.name }) >= 0;\n    });\n  }\n\n  generateReport = () => {\n    console.log('generate report');\n  }\n\n  onSearchTextChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    e.preventDefault();\n    const { value } = e.target;\n    this.setState({query: value});\n  }\n\n  onStatusFilterClick = (newStatus) => {\n    if(this.state.status === newStatus){\n      return;\n    }\n    //console.log('status: ', newStatus);\n    this.setState({status: newStatus});\n\n    this.tableListRef.current.resetPage();\n  }\n\n  componentWillMount = () => {\n    let cols = tableData.columns;\n    this.setState({\n      columns: cols,\n      selectedColumns: cols,\n      fixedColumns: (Object.keys(tableData).length > 0 ? tableData['fixedColumns'] : []),\n      formattedColumns: (Object.keys(tableData).length > 0 ? tableData['formattedColumns'] : []),\n      columnExtensions: (Object.keys(tableData).length > 0 ? tableData['columnExtensions'] : []),\n    });\n  }\n\n  componentDidMount = () => {\n    this.loadTicketList();\n  }\n\n  getFilteredTickets = (columns: any) => {\n    let filteredTickets = this.tickets;\n    columns.map(column => {\n      filteredTickets = filteredTickets\n        .filter(ticket => \n          this.state.filters[column.name] ? \n          column.name === 'createdDate' ||  column.name === 'lastUpdate' ? \n          (\n            this.state.filters[column.name] === '' ||\n            (ticket[column.name] &&\n              ticket[column.name].toString().toLowerCase().includes(GlobalFunction.toCommonDateString(new Date(this.state.filters[column.name])).toLowerCase())\n            )\n          ) : (\n            this.state.filters[column.name] === '' ||\n            (ticket[column.name] &&\n              ticket[column.name].toString().toLowerCase().includes(this.state.filters[column.name].toLowerCase())\n            )\n          ) : true\n        )\n        .filter(ticket => \n          this.state.status === '' || \n          ticket.status.toLowerCase() === this.state.status.toLowerCase())\n        .filter(ticket => \n          this.state.query === '' ||\n          ticket['ticket_id'].toLowerCase().includes(this.state.query.toLowerCase()));\n    });\n\n    if (this.tableListRef.current) {\n      this.tableListRef.current.resetPage();\n    }\n\n    return filteredTickets;\n  }\n\n  sortTickets(attrName: string, isAsc: boolean): void {\n    this.tickets.sort((a: any, b: any) => \n        (a[attrName] && b[attrName] && a[attrName].toString().toLowerCase() > b[attrName].toString().toLowerCase()) ? \n          (isAsc ? 1 : -1) : (isAsc ? -1 : 1)\n    );\n  }\n\n  public render(): JSX.Element {\n    let ins  = this;\n    \n    return (\n      <div>\n        { this.state.loading ?\n          (<Loader/>) : null\n        }\n\n        <div style={{position: 'absolute', right: '1rem', top: '1rem'}}>\n          <Fab color='primary' style={{backgroundColor: '#CCCCCC'}}>\n          <ExitToAppIcon onClick={this.onLogout} />\n          </Fab>\n        </div>\n\n        <div className={clsx('TicketListPage')}>\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"space-between\"\n            alignItems=\"baseline\" >\n            <Grid item xs={12} className={clsx('header-label')}>\n              <Typography className={clsx('title')} color=\"textPrimary\">\n                Tickets\n              </Typography>\n            </Grid>\n          </Grid>\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"space-between\"\n            alignItems=\"center\"\n            spacing={1}\n            className={clsx('search')} >\n            <Grid item sm={12} md={8}>\n              <TextField\n                id=\"cc_search_tickets_tf\"\n                placeholder=\"Search ticket ID\"\n                className={clsx('search-field')}\n                margin=\"dense\"\n                variant=\"outlined\"\n                fullWidth\n                onChange={ins.onSearchTextChange}\n                value={ins.state.query}\n                inputProps={{ 'aria-label': 'bare' }}\n                InputProps={{\n                  startAdornment: (\n                    <FontAwesomeIcon\n                      icon={faSearch}\n                      className={clsx('input-adornment')}\n                    />\n                  ),\n                }}\n              />\n            </Grid>\n            <Grid item sm={6} md={2} alignContent=\"flex-end\" justify=\"flex-end\">\n              <Button fullWidth onClick={() => { this.generateReport() }} disabled>\n                <Typography className={clsx('link-button disabled')} align=\"right\">\n                  <FontAwesomeIcon\n                    icon={faDownload}\n                    className={clsx('link-button-icon disabled')}\n                  />\n                  <span className={clsx('link-button-text')}>Generate Report</span>\n                </Typography>\n              </Button>\n            </Grid>\n            <Grid item sm={6} md={2} alignContent=\"flex-end\">\n              <SelectColumnsPopover \n                setSelectedColumns={this.setSelectedColumns} \n                columns={this.state.columns} \n                selectedColumns={this.state.selectedColumns} />\n            </Grid>\n          </Grid>\n          <Grid container direction=\"row\" className={clsx('tickets-table')}>\n            <Grid item xs={12}>\n              <Paper className={clsx('tickets-table-container')}>\n                <Grid container xs={12}>\n                  <Grid item xs className={clsx('tickets-table-stats')}>\n                    <Typography align=\"center\" onClick={() => { this.onStatusFilterClick('') }}>\n                      <span className={(this.state.status=='') ? clsx('tickets-all') : clsx('tickets-default')}>\n                        {this.state.ticketStats.all? this.state.ticketStats.all : 0}\n                      </span>\n                      <span className={(this.state.status=='') ? clsx('ticket-label-active') : clsx('ticket-label')}>ALL</span>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs className={clsx('tickets-table-stats')}>\n                    <Typography align=\"center\" onClick={() => { this.onStatusFilterClick('open') }}>\n                      <span className={(this.state.status=='open') ? clsx('tickets-open') : clsx('tickets-default')}>\n                        {this.state.ticketStats.open? this.state.ticketStats.open : 0}\n                      </span>\n                      <span className={(this.state.status=='open') ? clsx('ticket-label-active') : clsx('ticket-label')}>OPEN</span>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs className={clsx('tickets-table-stats')}>\n                    <Typography align=\"center\" onClick={() => { this.onStatusFilterClick('pending') }}>\n                      <span className={(this.state.status=='pending') ? clsx('tickets-pending') : clsx('tickets-default')}>\n                        {this.state.ticketStats.pending? this.state.ticketStats.pending : 0}\n                      </span>\n                      <span className={(this.state.status=='pending') ? clsx('ticket-label-active') : clsx('ticket-label')}>PENDING</span>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs className={clsx('tickets-table-stats')}>\n                    <Typography align=\"center\" onClick={() => { this.onStatusFilterClick('resolved') }}>\n                      <span className={(this.state.status=='resolved') ? clsx('tickets-resolved') : clsx('tickets-default')}>\n                        {this.state.ticketStats.resolved? this.state.ticketStats.resolved : 0}\n                      </span>\n                      <span className={(this.state.status=='resolved') ? clsx('ticket-label-active') : clsx('ticket-label')}>RESOLVED</span>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs className={clsx('tickets-table-stats')}>\n                    <Typography align=\"center\" onClick={() => { this.onStatusFilterClick('closed') }}>\n                      <span className={(this.state.status=='closed') ? clsx('tickets-closed') : clsx('tickets-default')}>\n                        {this.state.ticketStats.closed? this.state.ticketStats.closed : 0}\n                      </span>\n                      <span className={(this.state.status=='closed') ? clsx('ticket-label-active') : clsx('ticket-label')}>CLOSED</span>\n                    </Typography>\n                  </Grid>\n                </Grid>\n                <Grid item xs={12} style={{overflow: 'auto'}}>\n                  <CustomTable\n                    ref={this.tableListRef}\n                    className='ticket-list-table'\n                    canOverflow\n                    rows={this.getFilteredTickets(this.state.columns)}\n                    stickyHeader={true}\n                    renderHeader={() => this.renderTableHeader(this.state.columns, this.state.fixedColumns)}\n                    renderRow={(row: any, index: number) => this.renderTableRow(row, index, this.state.columns, this.state.fixedColumns)}\n                    rowsPerPageOptions={[5, 10, 15]} />\n                </Grid>\n              </Paper>\n            </Grid>\n          </Grid>\n        </div>\n      </div>\n    );\n  }\n  \n  renderTableHeader(columns: any, fixedColumns: any): JSX.Element {\n    let dockedColumnsCounter = 0;\n    return (\n      <>\n      {columns\n        .filter(column => {\n          for (var i = 0; i < this.state.selectedColumns.length; i++) {\n            if (this.state.selectedColumns[i].name === column.name) {\n              return true;\n            }\n          }\n          return false;\n        })\n        .map((column, index) => {\n          const matchedColumn = fixedColumns.filter(col => col === column.name)[0];\n          let nextColumnIsFixed = true;\n          if (matchedColumn && columns[index + 1]) {\n            nextColumnIsFixed = fixedColumns.filter(col => col ===  columns[index + 1].name)[0] ? true : false;\n          }\n          const style = {\n            left: matchedColumn ? dockedColumnsCounter * 125 : 0,\n            zIndex: matchedColumn ? 125 : 0,\n            minWidth: column.name === 'assignedTo' ? '200px' : '125px',\n            maxWidth: '300px',\n            borderRight: !nextColumnIsFixed ? '#9EA3AC 2px solid' : undefined\n          };\n          if (matchedColumn) {\n            dockedColumnsCounter++;\n          }\n          return (\n            <TableCell style={style}>\n              <span className='header-2'>{column.title}</span>\n              <div style={{float: 'right'}}>\n                  <IconButton \n                      icon={faSort} \n                      onClick={() => {\n                          this.sortTickets(column.name, true);\n                          this.setState({loading: false});\n                      }} />\n              </div>\n              {\n                column.name==='createdDate' || column.name==='lastUpdate'\n                \n                ? <div className='date-picker'>\n                    <MuiPickersUtilsProvider utils={MomentUtils}>\n                      <KeyboardDatePicker\n                          className={'text-field'}\n                          variant='dialog'\n                          format='MM/DD/YYYY'\n                          style={{width: '100%'}}\n                          invalidDateMessage=''\n                          value={this.state.filters[column.name] ? this.state.filters[column.name] : ''} \n                          onChange={(date) => {\n                            this.state.filters[column.name] = date;\n                            this.setState({filters: this.state.filters});\n                          }} />\n                    </MuiPickersUtilsProvider> \n                  </div>\n                // ? <DatePicker\n                //   value={this.state.filters[column.name]}\n                //   onChange={(value: Date) => {\n                //     this.state.filters[column.name] = value;\n                //     this.setState({filters: this.state.filters});\n                //   }}\n                // />\n                : <InputField\n                    value={this.state.filters[column.name]}\n                    onChange={(value: string) => {\n                      this.state.filters[column.name] = value;\n                      this.setState({filters: this.state.filters});\n                        // this.setState(prevState => ({...prevState, [attrName]: value}));\n                    }} />\n              }\n              \n            </TableCell>\n          );\n        })\n      }\n      </>\n    );\n  }\n\n  renderTableRow(row: any, index: number, columns: any, fixedColumns: any): JSX.Element {\n    let dockedColumnsCounter = 0;\n    const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n    return (\n      <TableRow \n        style={{backgroundColor: backgroundColor}}\n        onClick={() => {\n          Processmaker.get(`cases/${row.caseId}`,(cases) => {\n            //console.log('click',cases,row)\n            const route = \n            (row.status === 'Resolved' && row.type !== 'Inquiry') || \n            row.specificType === 'Outpatient Procedure' ||\n            row.specificType === 'Emergency Room' ||\n            row.specificType === 'Consultation' ||\n            cases.current_task[0].tas_title === 'Inpatient - Proceed with Final Assessment' ||\n            cases.current_task[0].tas_title === 'Inpatient - Approver Proceed with Final Assessment' ||\n            cases.current_task[0].tas_title === 'Inpatient - Approvers Proceed with Final Assessment' ||\n            cases.current_task[0].tas_title === 'Inpatient - Generate Approval Code' ||\n            cases.current_task[0].tas_title === 'Inpatient - Approver Summarize Assessment' ||\n            cases.current_task[0].tas_title === 'Inpatient - Summarize Assessment' ||\n            cases.current_task[0].tas_title === 'Inpatient - Resolve Ticket' ||\n            cases.current_task[0].tas_title === 'Inpatient - Review Ticket' ||\n            cases.current_task[0].tas_title === 'Complaint - Resolve Ticket' ||\n            cases.current_task[0].tas_title === 'Complaint - Escalate Ticket 2' ||\n            cases.current_task[0].tas_title === 'Complaint - Close Ticket' ||\n            cases.current_task[0].tas_title === 'Complaint - Comment 2' ||\n            cases.current_task[0].tas_title === 'Complaint - Escalate Ticket 3' ||\n            cases.current_task[0].tas_title === 'Complaint - Claim Close Task' ||\n            cases.current_task[0].tas_title === 'Complaint - Comment 3' ||\n            cases.current_task[0].tas_title.includes('Outpatient') ||\n            cases.current_task[0].tas_title === 'Approval - Approver Submit for Assessment' ||\n            cases.current_task[0].tas_title === 'Approval - Approver Summarize Assessment' ||\n            cases.current_task[0].tas_title === 'Approval - Resolve Ticket' ||\n            cases.current_task[0].tas_title === 'Approval - Claim Close Ticket' ||\n            cases.current_task[0].tas_title === 'Approval - Escalate Ticket 2' ||\n            cases.current_task[0].tas_title === 'Approval - Escalate Ticket 3' ||\n            cases.current_task[0].tas_title === 'Approval - Escalate Ticket 4' ||\n            cases.current_task[0].tas_title === 'Approval - Comment 2' ||\n            cases.current_task[0].tas_title === 'Approval - Comment 3' ||\n            cases.current_task[0].tas_title === 'Approval - Comment 4' ?\n              'resolve-ticket' : 'update-ticket';\n              window.location.href = `#/customer-care/${route}/${row.caseId}/${row._id}`; \n          }, ()=>{\n              const route = \n              (row.status === 'Resolved' && row.type !== 'Inquiry') || \n              row.specificType === 'Outpatient Procedure' ||\n              row.specificType === 'Emergency Room' ||\n              row.specificType === 'Consultation' ||\n              row.type === 'Complaint/Concern' ? \n                'resolve-ticket' : 'update-ticket';\n                window.location.href = `#/customer-care/${route}/${row.caseId}/${row._id}`; \n          });\n          \n        }}>\n        {columns\n          .filter(column => {\n            for (var i = 0; i < this.state.selectedColumns.length; i++) {\n              if (this.state.selectedColumns[i].name === column.name) {\n                return true;\n              }\n            }\n            return false;\n          })\n          .map((column, index) => {\n            const matchedColumn = fixedColumns.filter(col => col === column.name)[0];\n            let nextColumnIsFixed = true;\n            if (matchedColumn && columns[index + 1]) {\n              nextColumnIsFixed = fixedColumns.filter(col => col ===  columns[index + 1].name)[0] ? true : false;\n            }\n            const style = {\n              left: matchedColumn ? dockedColumnsCounter * 125 : 0,\n              zIndex: matchedColumn ? 125 : 0,\n              position: matchedColumn ? 'sticky' : 'relative' as PositionProperty,\n              minWidth: column.name === 'assignedTo' ? '200px' : '125px',\n              maxWidth: '300px',\n              borderRight: !nextColumnIsFixed ? '#9EA3AC 2px solid' : undefined,\n            };\n            if (matchedColumn) {\n              dockedColumnsCounter++;\n            }\n            const urgencyColor = {\n              Low: '#3AB77D',\n              Medium: '#FAB435',\n              High: '#FD5451'\n            };\n            const urgencyNumber = {\n              Low: 3,\n              Medium: 2,\n              High: 1\n            };\n            return (\n              <TableCell style={style}>\n                {column.name === 'urgency' ? (\n                  <div style={{width: '100%', textAlign: 'center'}}>\n                    <div \n                      className='number-item' \n                      style={{\n                        display: 'inline-block', \n                        backgroundColor: urgencyColor[row[column.name]]}}>\n                      {urgencyNumber[row[column.name]]}\n                    </div>\n                  </div>\n                ) /*: index == 3 || index == 10 || index == 11 ? (\n                  row[column.name]\n                ) : column.name === 'urgency' ? (\n                  row[column.name] ? 'Yes' : 'No'\n                )*/ : row[column.name]}\n              </TableCell>\n            );\n          })\n        }\n      </TableRow>\n    );\n  }\n}\n\nconst mapStateToProps = (state: Store) => state.ticketList;\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n\tMap: bindActionCreators(TicketListActions.Map, dispatch),\n});\n\nexport { mapStateToProps, mapDispatchToProps };\n"],"sourceRoot":""}