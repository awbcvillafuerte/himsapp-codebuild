{"version":3,"sources":["Pages/CustomerCarePage/GlobalFunction.tsx","Pages/CustomerCarePage/Components/InputField.tsx","Pages/CustomerCarePage/Components/IconButton.tsx","Pages/CustomerCarePage/Components/CustomTable.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/CheckContractSection.tsx","Pages/CustomerCarePage/API.tsx","../@hims/core/dist/index.es.js","Pages/CustomerCarePage/Components/TextButton.tsx","Pages/CustomerCarePage/CreateTicketPage/Components/SearchedMembersList.tsx","Pages/CustomerCarePage/Components/Loading.tsx","Pages/CustomerCarePage/MemberDataSection.tsx","Pages/CustomerCarePage/Components/Dropdown.tsx","Pages/CustomerCarePage/Components/DetailedDropdown.tsx","Pages/CustomerCarePage/Components/DetailedNumberField.tsx","Pages/CustomerCarePage/Components/DatePicker.tsx","Pages/CustomerCarePage/CreateTicketPage/Components/ConfinementSection.tsx","Pages/CustomerCarePage/Components/NumberField.tsx","Pages/CustomerCarePage/Components/CustomCheckbox.tsx","Pages/CustomerCarePage/CreateTicketPage/Components/AvailmentSection.tsx","Pages/CustomerCarePage/Components/CustomDropzone.tsx","Pages/CustomerCarePage/Components/InputArea.tsx","Pages/CustomerCarePage/Components/CustomChip.tsx","Pages/CustomerCarePage/CreateTicketPage/Components/TicketInfoSection.tsx","Pages/CustomerCarePage/CreateTicketPage/Components/SaveTicketFooter.tsx","Pages/CustomerCarePage/Components/InputChip.tsx","Pages/CustomerCarePage/CreateTicketPage/Components/InquirySection.tsx","Pages/CustomerCarePage/Payloads.tsx","Pages/CustomerCarePage/CreateTicketPage/Components/ConsultationSection.tsx","Pages/CustomerCarePage/Processmaker.tsx","Pages/CustomerCarePage/CreateTicketPage/Components/EmergencyRoomSection.tsx","Pages/CustomerCarePage/CreateTicketPage/CreateTicketPage.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/SummarySection.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/CRUDTable.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/UpdateSection.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/AccommodationsSection.tsx","Pages/CustomerCarePage/Components/CustomRadio.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/DiagnosesSection.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/PhysiciansSection.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/ProceduresSection.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/OtherDetailsSection.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/DischargeDetailsSection.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/UploadedDocumentsSection.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/UpdateTicketFooter.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/UpdateInquirySection.tsx","Pages/CustomerCarePage/Components/CustomTab.tsx","Pages/CustomerCarePage/Components/CustomModal.tsx","Pages/CustomerCarePage/UpdateTicketPage/UpdateTicketPage.tsx","Pages/Home/Loadable.tsx","Pages/CustomerCarePage/Components/ComplexTable.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/ApproveAvailmentSection.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/CheckBenefitSection.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/ResolveTicketFooter.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/PartnerNetworkSection.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/SummaryAvailmentSection.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/TicketInfoModal.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/ReviewTicketsSection.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/CheckUtilizationSection.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/ApproveInpatientSection.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/SummaryInpatientSection.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/ApproveConsultationSection.tsx","Pages/CustomerCarePage/ResolveTicketPage/ResolveTicketPage.tsx","Pages/TicketList/Loadable.tsx","Pages/CustomerCarePage/Components/DetailedInputField.tsx","Pages/CustomerCarePage/AdvanceSearch/AdvanceSearch.tsx","Containers/App/index.tsx","i18n.ts","Containers/App/constants.ts","Containers/App/reducer.ts","app.tsx","reducers.ts"],"names":["GlobalFunction","num","isDecimal","toFixed","toString","replace","text","initials","wordArray","split","i","length","substring","toUpperCase","date","day","getDate","monthIndex","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","seconds","getSeconds","meridian","birthDate","ageInMillis","Date","now","Math","abs","getUTCFullYear","ticketType","specificType","ticketNo","tempString","InputField","props","_state","this","placeholder","value","error","dynamicStyle","borderColor","undefined","className","disabled","type","style","onChange","event","charLimit","target","textAlign","React","IconButton","onClick","icon","size","CustomTable","handleChangePage","_event","page","setState","handleChangeRowsPerPage","rowsPerPage","parseInt","getSlicedData","rowsPerPageOptions","startingItem","state","rows","slice","filterData","overflow","canOverflow","stickyHeader","columns","map","column","label","renderHeader","renderRow","row","j","paginationClass","count","labelDisplayedRows","info","onChangeInfo","from","to","labelRowsPerPage","onChangePage","onChangeRowsPerPage","CheckContractSection","contractUrls","contractListUpdated","API","get","cardNo","response","console","log","benefit","_id","pdfUrl","process","execPath","viewerUrl","paddingTop","width","height","src","backendUrl","url","success","fail","fetch","method","headers","then","json","data","catch","body","customHeader","JSON","stringify","Object","freeze","index$1","index$2","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","service_worker","URL","href","origin","addEventListener","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","index$3","ServiceWorker","index$4","BaseTheme","createMuiTheme","palette","primary","main","contrastText","secondary","typography","fontFamily","button","fontWeight","fontSize","textTransform","overrides","MuiDialog","root","MuiDialogTitle","color","MuiDialogContentText","MuiFormControlLabel","MuiIconButton","MuiButton","containedPrimary","boxShadow","backgroundColor","containedSecondary","border","outlinedSecondary","_extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","_assign","assign","t","s","n","arguments","call","apply","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","__generator","f","y","g","_","sent","trys","ops","verb","Symbol","iterator","v","op","TypeError","pop","push","__spreadArrays","il","r","k","a","jl","borderCss","borderRadius","useStyles","makeStyles","theme","createStyles","control","borderBottomColor","input","display","select","marginTop","spacing","valueContainer","flexWrap","flex","alignItems","noOptionsMessage","padding","singleValue","position","left","bottom","paper","zIndex","right","inputComponent","_a","inputRef","getOwnPropertySymbols","propertyIsEnumerable","__rest","createElement","ref","components","Control","children","innerProps","innerRef","selectProps","classes","TextFieldProps","TextField","InputProps","inputProps","variant","fullWidth","Menu","Paper","square","Option","MenuItem","selected","isFocused","component","isSelected","NoOptionsMessage","Typography","Placeholder","SingleValue","ValueContainer","useState","single","setSingle","FormControl","NoSsr","inputId","options","suggestions","optionItem","isSearchable","isClearable","defaultProps","index$5","InputAutocomplete","borderCss$1","useStyles$1","textField","currentValue","setcurrentValue","id","defaultValue","chips","multiline","index$6","InputChipTextField","borderCss$2","borderStyles","useStyles$2","formControl","selectEmpty","marginRight","StyledOutlinedInput","withStyles","OutlinedInput","items","defVal","find","item","getDefaultValue","setCurrentValue","inputLabel","useRef","labelWidth","InputLabel","htmlFor","Select","selectedItem","name","IconComponent","selectItem","displaySelectItem","required","key","index$7","InputSelect","borderCss$3","borderStyles$1","useStyles$3","errorIcon","float","StyledOutlinedInput$1","FormHelperText","errorMessage","index$8","InputSelectSetValue","useStyles$4","borderCss$4","StyledTextField","index$9","InputTextField","useStyles$5","inputSelect","marginBottom","dialog","align","justify","dialogContent","container","paddingRight","paddingLeft","dialogTitle","dialogContentTitle","dialogContentText","formControlLabel","checkBox","dialogAction","justifyContent","resolveDialogAction","leftButton","marginLeft","rightButton","StyledCheckbox","checked","Checkbox","notes","notesError","isResolved","_b","setDisabled","handleClose","onClose","setFieldValue","fieldName","setFieldError","toLowerCase","Grid","direction","xs","DialogTitle","disableTypography","DialogContent","DialogContentText","FormControlLabel","checkedIcon","labelPlacement","DialogActions","Button","onSubmit","selectItems","Dialog","open","isModalOpen","index$a","TicketModal","styles","_super","SampleCoreComponent","render","Component","index$b","useStyles$6","appBar","breakpoints","up","menuButton","logo","badge","grow","flexGrow","AppBar","Toolbar","edge","menuOnClick","Link","logoImage","alt","userOnClick","Avatar","userImage","badgeCount","propTypes","number","useStyles$7","sideBar","listItem","flexDirection","listItemIcon","minWidth","avatar","avatarSelected","listItemText","iconSelected","divider","ListItemLink","ListItem","handleDashboardOnClick","attr","localStorage","setItem","history","getItem","List","ListItemIcon","ListItemText","Divider","useStyles$8","drawer","flexShrink","drawerPaper","content","toolbar","mixins","useStyles$9","gridContainer","breadCrumbs","headerTitle","linkPrevious","cursor","linkCurrent","index$c","Breadcrumbs","useStyles$a","nameFontSize","valueFontSize","useStyles$b","grid","string","useCirclePrimitive","circlePrimitiveStyle","top","rotate","delay","margin","opacity","animation","animationDelay","useStyles$c","useStyles$d","previous_page","current_page","useStyles$e","minHeight","buttonTitle","buttonSubTitle","rightButtons","leftButtons","useStyles$f","sidebar","maxWidth","contentgrid","flexBasis","index$d","LoadingIndicator","AppHeader","AppSidebar","AuthenticatedLayout","mobileOpen","setMobileOpen","handleDrawerToggle","Hidden","smUp","implementation","Drawer","xsDown","PageHeader","ClientInfoItem","GridHorizontalDivider","BreadcrumbsComponent","FloatingButtons","PageLayout","newPlacement","anchorEl","setAnchorEl","_c","setOpen","_d","placement","setPlacement","logolink","Popper","transition","TransitionProps","Fade","timeout","onLogout","Badge","badgeContent","currentTarget","prev","index$e","Actions","Definitions","Reducers","Services","Stores","UI","checkStore","store","shape","dispatch","subscribe","getState","replaceReducer","runSaga","injectedReducers","injectedSagas","DAEMON","ONCE_TILL_UNMOUNT","constants","RESTART_ON_REMOUNT","injectReducerFactory","createReducer","isValid","reducer","Reflect","has","getInjectors","injectReducer","allowedModes","descriptor","saga","mode","_mode","includes","injectSagaFactory","args","newDescriptor","hasSaga","task","ejectSagaFactory","cancel","getInjectors$1","injectSaga","ejectSaga","ResponseError","_this","statusText","Error","parseJSON","checkStatus","ActionTypes","index$f","configureStore","initialState","composeEnhancers","sagaMiddleware","middlewares","enhancers","run","hocWithReducer","WrappedComponent","ReducerInjector","context","displayName","useInjectReducer","hocWithSaga","InjectSaga","injectors","componentWillUnmount","useInjectSaga","loadable","importFunc","fallback","LazyComponent","getReducerInjectors","request","getSagaInjectors","index$g","componentProps","ThemeProvider","basename","ActionTypes$1","locale","selectLanguage","language","enTranslationMessages","formatTranslationMessages","messages","defaultFormattedMessages","keys","reduce","formattedMessages","formattedMessage","stateSelector","languageState","index$h","Provider","Children","only","appLocales","messageProviderReducer","action","CHANGE_LOCALE","payload","header","scope","defaultMessage","index$i","Document","Message","NotFoundPage","TextButton","SearchedMembersList","getExtractedMembers","filter","trim","members","member","searchText","renderMemberShortDetail","firstName","getIntials","middleName","lastName","onSelectMember","clientName","Loading","CircularProgress","MemberDataSection","getMemberData","member_card_no","first_name","middle_name","last_name","client","registered_name","date_of_birth","gender","civilStatus","civil_status","onUpdateMemberStateChange","getRecentTicketsData","loadingMember","recentTickets","ticket","member_id","ticket_no","ticket_category","specific_type","lastUpdate","date_updated","sliceMemberID","slicedText","isMembersLoaded","loadingMembers","ticketStatus","renderSearchArea","renderTopArea","renderMemberInfo","promptChooseMember","renderTicketData","trimmedValue","splitValue","newValue","join","faSearch","toShortDateString","age","getAge","renderTableHeader","rowData","index","renderTableRow","TableCell","recentTicket","TableRow","urgency","agent","ticketSource","callerName","contactNo","transactionNo","createdBy","toDateAndTime","dateCreated","dateUpdated","Dropdown","choices","classNamePrefix","isDisabled","onInputChange","filterOption","option","rawInput","hasNoInput","choicesAreShort","inputIsShort","isInputMatch","choice","DetailedDropdown","detail","DetailedNumberField","isEditing","NaN","onBlur","isFloat","parseFloat","readOnly","formatNumber","onFocus","DatePicker","utils","MomentUtils","format","minDate","toDate","ConfinementSection","confinementTypes","confinement","facilities","provider","createTicketAttemp","refreshConfinementState","dateAdmitted","confinementKind","roomType","costPerDay","doctors","doctor","cptCodes","initialDiagnosis","amount","NumberField","CustomCheckbox","AvailmentSection","icd10Code","itemToEditIndex","icd10CodeToEdit","doctorToEdit","availment","filteredICD10","icd10Codes","isSame","diagnoses","concat","procedures","totalCost","procedure","remarks","isPrimary","isFinal","specialization","fee","noOfVisits","cptCode","isPHIC","assessmentType","assessmentRemarks","dateAdded","diagnosisIndex","refreshAvailmentState","getFilteredICD10","faPlus","pushBlankDiagnosis","diagnosis","colSpan","lineHeight","faCheckCircle","faTimesCircle","getProcedureCosts","faPen","faMinusCircle","splice","procedureIndex","renderProcedureDetails","stateProcedure","stateProcedures","pushBlankProcedures","CustomDropzone","multiple","onDrop","acceptedFiles","getRootProps","getInputProps","faFileUpload","InputArea","defaultRows","TextareaAutosize","CustomChip","Chip","onDelete","TicketInfoSection","ticketChannels","ticketSources","ticketTypes","specificTypes","urgencies","agents","ticketChannel","refreshTicketState","memberName","brokerName","facility","department","additionalNotes","files","additionalFiles","file","SaveTicketFooter","showResolveButton","onResolveTicket","onSubmitTicket","InputChip","fullWidthInput","onAdd","chip","_chip","InquirySection","inquiries","inquiry","specificDetail","answer","relatedTickets","supportDocs","refreshInquiryState","filteredInquiries","getFilteredInquiries","onAddInquiry","onRemoveInquiry","doc","Payloads","consultation","memberCardNo","transaction_no","received_via","received_from","member_name","corporate_client","broker","hospital_name","caller_name","contact_no","additional_notes","supporting_documents","ticket_type","assign_to","availment_details","availments_list","code","is_primary","is_final","params","no_of_visits","phic","date_added","assessment_type","assessment_remarks","confinement_details","date_admitted","confinement_kind","gift_given","updates","room_accommodation","room_type","no_of_days","cost","others","coverage","final_bill","philhealth_amount","discharge_date","consultation_details","inquiry_details","inquiry_list","specific_detail","related_tickets","support_docs","date_created","date_escalated","created_by","client_id","loa","docName","giftGiven","update","hospital_bill","hospitalBill","accommodations","accommodation","days","primaryDiagnosisIndex","physicians","physician","visits","philhealthAmount","finalBill","dischargeDate","loas","loa_no","loaNo","ConsultationSection","refreshConsultationState","Processmaker","EmergencyRoomSection","chiefComplaint","editIcon","deleteIcon","CreateTicketPage","isIcd10CodesLoaded","dateEscalated","facility_id","tempIcd10Codes","parse","full_code","abbreviated_description","tempCptCodes","onSaveForNow","getPostTicketPayload","post","is_availment","case_id","put","SummarySection","getTotalAccommodationCost","getTotalPhysicianCost","getTotalProcedureCost","getTotalItemCost","renderSection","toCommonDateString","scroll","pageYOffset","setTabSelected","headerName","miniText","tabIndex","table","totalValue","CRUDTable","handleOnChange","attrName","prevState","rowToEdit","editField","onFormat","Table","TableHead","cols","colName","onHeaderFormat","TableBody","index1","index2","renderCell","onDeleteRow","onSaveEditRow","UpdateSection","onFormatTableHeader","colIndex","onFormatCRUDTable","tempData","unshift","refreshUpdatesState","_rowIndex","currentVal","AccommodationsSection","getTotalCost","facilitiesList","onUpdateTicketStateChange","isNaN","refreshAccommodationsState","renderAddRoomAccommodation","renderConfinementDetails","CustomRadio","Radio","checkedCondition","DiagnosesSection","rowIndex","setPrimaryDiagnosisIndex","filteredIcd10","diagnosesList","getFilteredICD10Codes","refreshDiagnosisStateChange","PhysiciansSection","physiciansList","refreshPhysiciansStateChange","ProceduresSection","proceduresList","refreshProceduresStateChange","OtherDetailsSection","itemTypes","refreshItemsStateChange","DischargeDetailsSection","coverageList","paidBy","UploadedDocumentsSection","refreshFilesStateChange","UpdateTicketFooter","_props","onAssign","onEscalate","onUpdateTicket","isUpdating","onResolve","UpdateInquirySection","CustomTabs","Tabs","selectedTab","scrollButtons","indicatorColor","setSelectedTab","tabList","tab","Tab","CustomModal","Modal","isOpen","closeAfterTransition","in","faTimes","renderContent","renderFooter","UpdateTicketPage","errors","getErrorList","errorDiagnosis","matched","message","targets","tabSelected","loadedResources","isAssessmentModalOpen","ticketCategory","providerData","getPutTicketPayload","RESOURCES_TO_LOAD","_member","renderInpatientContent","renderInquiryContent","apiSaveTicket","Utils","Components","HomePage","mapStateToProps","mapDispatchToProps","connect","default","ComplexTable","backColor","ApproveAvailmentSection","APPROVED","DISAPPROVED","PENDING","getProceduresCost","total","getApprovedAvailmentsCost","headerNameStyle","_index","renderProcedure","CheckBenefitSection","benefits","getFilteredBenefitsData","benefitCategory","category","benefitName","limitType","limit","benefitListUpdated","loadBenefitsData","limits","limit_unit","isAsc","sort","renderSideBar","renderBenefitsList","borderRight","renderHeaderColumn","headerText","faSort","sortBenefits","ResolveTicketFooter","isSummarizing","onSummarize","PartnerNetworkSection","dummyData","dummyGroups","facilitiesListUpdated","group","faCheck","getFilteredFacilitiesData","sortFacilities","SummaryAvailmentSection","getApprovedAvailments","getDisapprovedAvailments","loaNumber","loaDate","indexToEdit","editLoaNumber","editAmount","editLoaDate","editNotes","approvedAvailments","disapprovedAvailments","renderLOAHeader","renderLOARow","refreshLOAStates","TicketInfoModal","ticketId","availmentDetails","confinementDetails","onCloseButtonClicked","renderTicketInfo","getTotalAailmentProcedureCost","ReviewTicketsSection","tickets","getFilteredTicketData","channel","source","assignee","urgencyColor","selectedTicketId","ticketListUpdated","sortTickets","CheckUtilizationSection","swipe","approvalCode","desc","sessions","dateAvailed","loaId","label1","label2","maxValue","utilization","Line","ApproveInpatientSection","getAttendingPhysicianCost","getAvailmentCost","getAllAvailmentsCost","getAllProceduresCount","renderTabs","renderSummarySection","renderDiagnosisSection","proceduresCount","borderBottom","renderDiagnosisInfo","procedureCost","accommodationCost","attendingPhysicianCost","renderTableSection","SummaryInpatientSection","ApproveConsultationSection","ResolveTicketPage","diagnosisData","doctorData","renderOutpatientContent","renderConsultationContent","getPutResolveTicketPayload","TicketListPage","DetailedInputField","AdvanceSearch","_data","_value","createBrowserHistory","Containers","routes","path","exact","App","Helmet","titleTemplate","defaultTitle","renderRoutes","route","require","translationMessages","en","loading","currentUser","userData","repositories","appReducer","LOAD_REPOS","LOAD_REPOS_SUCCESS","username","repos","LOAD_REPOS_ERROR","rest","MessageProvider","openSansObserver","FontFaceObserver","combineReducers","global","globalReducer","router","connectRouter","MOUNT_NODE","document","getElementById","ReactDOM","load","classList","add","Intl","all","err"],"mappings":"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","file":"static/js/main.cd5ce7cd.chunk.js","sourcesContent":["\n\n\n\nexport class GlobalFunction {\n\n    static formatNumber(num: number, isDecimal: boolean = false) {\n        let value = '';\n        if (isDecimal) {\n            value = num.toFixed(2);\n        } else {\n            value = num.toString();\n        }\n        return value.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n    }\n\n\n    static getIntials(text: string) {\n        var initials = '';\n        var wordArray = text.split(' ');\n        for (var i = 0; i < wordArray.length; i++) {\n            initials += wordArray[i].substring(0,1).toUpperCase() + '.';\n        }\n        return initials;\n    }\n\n    static toCommonDateString(date: Date) {\n        if (date) {\n            const monthNames = [\n                \"January\", \"February\", \"March\",\n                \"April\", \"May\", \"June\", \"July\",\n                \"August\", \"September\", \"October\",\n                \"November\", \"December\"\n            ];\n            const day = date.getDate();\n            const monthIndex = date.getMonth();\n            const year = date.getFullYear();\n            return (monthNames[monthIndex] + \" \" + day + \", \" + year);\n        }\n\n        return '';\n    }\n\n    static toShortDateString(date: Date) {\n        if (date) {\n            const monthNames = [\n                \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \n                \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n            ];\n            const day = date.getDate();\n            const monthIndex = date.getMonth();\n            const year = date.getFullYear();\n            return (monthNames[monthIndex] + \" \" + day + \", \" + year);\n        }\n\n        return '';\n    }\n\n    static toDateAndTime(date: Date) {\n        if (date) {\n            const monthNames = [\n                \"January\", \"February\", \"March\",\n                \"April\", \"May\", \"June\", \"July\",\n                \"August\", \"September\", \"October\",\n                \"November\", \"December\"\n            ];\n            const day = date.getDate();\n            const monthIndex = date.getMonth();\n            const year = date.getFullYear();\n            const hours = date.getHours() - (date.getHours() > 12 ? 12 : 0);\n            const minutes = date.getMinutes();\n            const seconds = date.getSeconds();\n            const meridian = (date.getHours() > 12 ? \"PM\" : \"AM\");\n            return (\n                monthNames[monthIndex] + \" \" + \n                day + \", \" + \n                year + \" - \" + \n                hours + \":\" + \n                minutes + \":\" + \n                seconds + \" \" + \n                meridian);\n        }\n\n        return '';\n    }\n\n    static getAge(birthDate: any) {\n        if (birthDate) {\n            var ageInMillis = Date.now() - birthDate;\n            return Math.abs(new Date(ageInMillis).getUTCFullYear() - 1970);\n        }\n\n        return null;\n    }\n\n    static generateTicketNumber(ticketType: string, specificType: string, ticketNo: string) {\n        const ticketTypes = {\n            \"Availment\": \"AVL\",\n            \"Inquiry\": \"INQ\"\n        };\n        const specificTypes = {\n            \"Inpatient\": \"INP\",\n            \"Outpatient Procedure\": \"OP\",\n            \"Emergency Room\": \"ER\",\n            \"Maternity\": \"MAT\",\n            \"Consultation\": \"CON\"\n        }\n        // return (\n        //     ticketTypes[ticketType] + \n        //     specificTypes[specificType] + \n        //     Math.random().toString(36).substr(2, 6)\n        // );\n        const tempString = (ticketType === 'Inquiry' ? '' : `${specificTypes[specificType]}-`);\n        return `${ticketTypes[ticketType]}-${tempString}${ticketNo}`;\n    }\n}","import * as React from 'react';\n// import { InputBase } from '@material-ui/core';\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\nimport './component-style.scss';\n\ninterface IProps {\n    value: string;\n    onChange: (value: string) => void;\n\n    placeholder?: string;\n    error?: boolean;\n    icon?: IconProp;\n    disabled?: boolean;\n    charLimit?: number;\n}\n\nexport class InputField extends React.Component<IProps> {\n\n    \n\n    shouldComponentUpdate(props: IProps, _state: any) {\n        return (\n            (this.props.placeholder !== props.placeholder) ||\n            (this.props.value !== props.value) ||\n            (this.props.error !== props.error)\n        );\n    }\n\n    render(): JSX.Element {\n        const self = this;\n        const dynamicStyle = {\n            borderColor: (self.props.error ? '#E53935' : undefined)\n        };\n\n        return (\n            <div className='input-field-container'>\n                {this.props.placeholder ? (\n                    <div className={this.props.disabled ? 'text-disabled text' : 'text'}>\n                        {this.props.placeholder}\n                    </div>\n                ) : null}\n                <input type='text' \n                    disabled={this.props.disabled}\n                    className={this.props.disabled ? 'text-field-disabled text-field' : 'text-field'}\n                    style={dynamicStyle}\n                    // fullWidth \n                    value={this.props.value}\n                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                        const condition = \n                            this.props.charLimit ? (\n                                event.target.value.length <= this.props.charLimit \n                            ) : (true) ;\n                            \n                        if (condition) {\n                            this.props.onChange(event.target.value);\n                        }\n                    }} />\n                {this.props.charLimit ? (\n                    <>\n                    <div className='text' />\n                    <div \n                        className={this.props.disabled ? 'text-disabled text' : 'text'}\n                        style={{textAlign: 'right'}}>\n                            {`${this.props.value.length}/${this.props.charLimit}`}\n                    </div>\n                    </>\n                ) : null}\n                \n            \n            </div>\n        );\n    }\n}","\n\nimport * as React from 'react';\n// import { Link } from '@material-ui/core';\nimport './component-style.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { IconProp, SizeProp } from '@fortawesome/fontawesome-svg-core';\n\ninterface IProps {\n    icon: IconProp;\n    onClick: () => void;\n    size?: SizeProp;\n}\n\nexport class IconButton extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        return (\n            <div className='icon-button' onClick={() => this.props.onClick()}>\n                {this.props.icon ? <FontAwesomeIcon icon={this.props.icon} size={this.props.size} /> : null}\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Table, TableBody, TableHead, TableRow, TablePagination, TableCell } from '@material-ui/core';\nimport './component-style.scss';\nimport { LabelDisplayedRowsArgs } from '@material-ui/core/TablePagination';\nimport { DropdownChoice } from '../Models';\n\ninterface IProps {\n    className?: string;\n    paginationClass?: string;\n\n    /* Normal Mode */\n    rows: any[];\n    renderHeader: () => JSX.Element;\n    renderRow: (rowData: any, index: number) => JSX.Element;\n\n    /* Simple Mode - Automatically handles styling, so you can focus on data. */\n    columns?: DropdownChoice[]; // value: attribute, label: the title appearing on the header\n    canFilter?: boolean;\n    canSort?: boolean;\n\n    stickyHeader?: boolean;\n    canOverflow?: boolean;\n    rowsPerPageOptions?: number[];\n    labelRowsPerPage?: string;\n    onChangeInfo?: (info: LabelDisplayedRowsArgs) => string;\n}\n\ninterface IStates {\n    page: number;\n    rowsPerPage: number;\n    \n    filterData: any;\n}\n\nexport class CustomTable extends React.PureComponent<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            page: 0,\n            rowsPerPage: 0,\n\n            filterData: {}\n        }\n    }\n\n    componentDidMount() {\n        if (this.props.rowsPerPageOptions) {\n            this.setState({rowsPerPage: this.props.rowsPerPageOptions[0]});\n        }\n    }\n\n    handleChangePage = (_event: unknown, page: number) => {\n        this.setState({page: page});\n    }\n    \n    handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            rowsPerPage: parseInt(event.target.value, 10),\n            page: 0\n        });\n    }\n\n    getSlicedData = () => {\n        if (this.props.rowsPerPageOptions) {\n            const startingItem = this.state.page * this.state.rowsPerPage;\n            return this.props.rows.slice(startingItem, startingItem + this.state.rowsPerPage);\n        } else {\n            return this.props.rows;\n        }\n    }\n\n    render(): JSX.Element {\n        return (\n            <>\n            <div style={{overflow: this.props.canOverflow ? 'auto' : 'none'}}>\n                <Table \n                    className={`${(this.props.className ? this.props.className : '')} table`} \n                    stickyHeader={this.props.stickyHeader ? this.props.stickyHeader : false}>\n                    <TableHead>\n                        {this.props.columns ? (\n                            <TableRow>\n                                {this.props.columns.map(column => {\n                                    return <TableCell>{column.label}</TableCell>\n                                })}\n                            </TableRow>\n                        ) : this.props.renderHeader ? (\n                            <TableRow>\n                                {this.props.renderHeader()}\n                            </TableRow>\n                        ) : null}\n                    </TableHead>\n                    <TableBody>\n                        {this.props.renderRow ? (\n                            this.getSlicedData().map((row, j) => {\n                                return this.props.renderRow(row, j)\n                            })  \n                        ) : null}\n                    </TableBody>\n                </Table>\n            </div>\n            {this.props.rowsPerPageOptions ? (\n                <TablePagination\n                    className={`${(this.props.paginationClass ? this.props.paginationClass : '')} pagination MuiTablePagination-root`}\n                    rowsPerPageOptions={this.props.rowsPerPageOptions}\n                    count={this.props.rows.length}\n                    rowsPerPage={this.state.rowsPerPage}\n                    page={this.state.page}\n                    labelDisplayedRows={(info: LabelDisplayedRowsArgs) => {\n                        return (\n                            this.props.onChangeInfo ? (\n                                this.props.onChangeInfo(info)\n                            ) : (\n                                `${info.from}-${info.to} of ${info.count}`\n                            ));\n                    }}\n                    labelRowsPerPage={\n                        this.props.labelRowsPerPage ? (\n                            this.props.labelRowsPerPage\n                        ) : (\n                            'Rows per page:'\n                        )}\n                    onChangePage={(_event: unknown, page: number) => {\n                        this.setState({page: page});\n                    }}\n                    onChangeRowsPerPage={(event: React.ChangeEvent<HTMLInputElement>) => {\n                        this.setState({\n                            rowsPerPage: parseInt(event.target.value, 10),\n                            page: 0\n                        });\n                    }} />\n            ) : null}\n            </>\n        );\n    }\n}","import * as React from 'react';\nimport { API } from 'Pages/CustomerCarePage/API';\n\ninterface IProps {\n    cardNo: string;\n}\n\ninterface IStates {\n    contractListUpdated: boolean;\n}\n\nexport class CheckContractSection extends React.Component<IProps, IStates> {\n\n    contractUrls: string[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            contractListUpdated: false\n        }\n\n        this.contractUrls = [];\n    }\n\n    componentDidMount() {\n        API.get(`customer-care/members/${this.props.cardNo}/benefits`,\n            (response) => {\n                console.log(response);\n                this.contractUrls = response.map(benefit => {\n                    return `/customer-care/benefits/io/pdf?id=${benefit._id}&type=contract`\n                });\n\n                this.setState({contractListUpdated: true});\n            },\n            (error) => {\n                console.log(error);\n            });\n    }\n    \n    render(): JSX.Element {\n        const pdfUrl = `${process.execPath}/../../../sample.pdf`;\n        // const viewerUrl = `https://mozilla.github.io/pdf.js/web/viewer.html?file=${pdfUrl}`;\n        const viewerUrl = `${process.execPath}/../pdfjs-2.2.228-dist/web/viewer.html?file=${pdfUrl}`;\n\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Check Contract</div>\n                <div className='sub-section'>\n                    {/*this.contractUrls.map((url, index) => {\n                        return (\n                            index === 0 ?\n                            <iframe \n                                style={{width: '100%', height: '1280px'}}\n                                src={API.getUrl() + url}  />\n\n                            : null\n                        );\n                    })*/}\n                            <iframe \n                                style={{width: '100%', height: '1280px'}}\n                                src={viewerUrl}  />\n                </div>\n                \n            </div>\n        );\n    }\n}","\nlet backendUrl = process.env.REACT_APP_BASE_URL;\n\nexport class API {\n\n    // //local\n    // static localUrl = 'http://18.138.94.224:4101/api';//'https://neo-local.seerlabs.com/api';\n\n    // //stg\n    // static stgUrl = 'http://18.138.94.224:4101/api';\n\n    // static getUrl() {\n    //     return (process.env.NODE_ENV === 'development' ? this.localUrl : this.stgUrl);\n    // }\n\n    static getUrl() {\n        return process.env.REACT_APP_BASE_URL;\n    }\n\n    static async get(url: string, success: Function, fail: Function) {\n        // const backendUrl = (process.env.NODE_ENV === 'development' ? this.localUrl : this.stgUrl);\n        fetch(backendUrl + url, {\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json' }\n        })\n        .then(response => response.json())\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n\n    static async post(url: string, \n                      body: any,\n                      success: Function, \n                      fail: Function,\n                      customHeader: any = { 'Content-Type': 'application/json' }) {\n        // const backendUrl = (process.env.NODE_ENV === 'development' ? this.localUrl : this.stgUrl);\n        fetch(backendUrl + url, {\n            method: 'POST',\n            headers: customHeader,\n            body: body\n        })\n        .then(response => response.json())\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n\n    static async put(url: string, body: any, success: Function, fail: Function) {\n        // const backendUrl = (process.env.NODE_ENV === 'development' ? this.localUrl : this.stgUrl);\n        fetch(backendUrl + url, {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(body)\n        })\n        .then(response => response)\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n}","import { createMuiTheme, makeStyles, createStyles, withStyles } from '@material-ui/core/styles';\nimport React__default, { useState, createElement, useEffect, Component as Component$2, lazy, Suspense } from 'react';\nimport Select from 'react-select';\nimport Typography from '@material-ui/core/Typography';\nimport NoSsr from '@material-ui/core/NoSsr';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ChipInput from 'material-ui-chip-input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport Select$1 from '@material-ui/core/Select';\nimport ExpandMoreRounded from '@material-ui/icons/ExpandMoreRounded';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Grid from '@material-ui/core/Grid';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheckSquare, faHome, faPlusCircle, faUsers, faFileSignature, faIdCardAlt, faTasks, faTable, faFolderOpen, faUserFriends, faScrewdriver, faBookOpen } from '@fortawesome/free-solid-svg-icons';\nimport { faSquare } from '@fortawesome/free-regular-svg-icons';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Link from '@material-ui/core/Link';\nimport Avatar from '@material-ui/core/Avatar';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport Hidden from '@material-ui/core/Hidden';\nimport Drawer from '@material-ui/core/Drawer';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport Badge from '@material-ui/core/Badge';\nimport NotificationsIcon from '@material-ui/icons/NotificationsOutlined';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport Popper from '@material-ui/core/Popper';\nimport { Fade, Paper as Paper$1, List as List$1, ListItem as ListItem$1, ListItemIcon as ListItemIcon$1, ListItemText as ListItemText$1 } from '@material-ui/core';\nimport { useStore, Provider as Provider$1, useSelector } from 'react-redux';\nimport { routerMiddleware, ConnectedRouter } from 'connected-react-router';\nimport { HashRouter } from 'react-router-dom';\nimport { ThemeProvider } from '@material-ui/styles';\nimport invariant from 'invariant';\nimport conformsTo from 'lodash/conformsTo';\nimport isFunction from 'lodash/isFunction';\nimport isObject from 'lodash/isObject';\nimport { applyMiddleware, createStore, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { createBrowserHistory } from 'history';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport isEmpty from 'lodash/isEmpty';\nimport isString from 'lodash/isString';\nimport { createSelector } from 'reselect';\nimport { IntlProvider, defineMessages, FormattedMessage } from 'react-intl';\nvar index =\n/*#__PURE__*/\nObject.freeze({});\nvar index$1 =\n/*#__PURE__*/\nObject.freeze({});\nvar index$2 =\n/*#__PURE__*/\nObject.freeze({}); // This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nvar isLocalhost = Boolean(window.location.hostname === 'localhost' || // [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' || // 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\n\nfunction register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    var publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', function () {\n      var swUrl = process.env.PUBLIC_URL + \"/service-worker.js\";\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config); // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n\n        navigator.serviceWorker.ready.then(function () {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(function (registration) {\n    registration.onupdatefound = function () {\n      var installingWorker = registration.installing;\n\n      if (installingWorker == null) {\n        return;\n      }\n\n      installingWorker.onstatechange = function () {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'); // Execute callback\n\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.'); // Execute callback\n\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(function (error) {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl).then(function (response) {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    var contentType = response.headers.get('content-type');\n\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(function (registration) {\n        registration.unregister().then(function () {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(function () {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nfunction unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      registration.unregister();\n    });\n  }\n}\n\nvar service_worker =\n/*#__PURE__*/\nObject.freeze({\n  register: register,\n  unregister: unregister\n});\nvar index$3 =\n/*#__PURE__*/\nObject.freeze({\n  ServiceWorker: service_worker\n});\nvar index$4 =\n/*#__PURE__*/\nObject.freeze({});\nvar BaseTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#3ab77d',\n      contrastText: '#ffffff'\n    },\n    secondary: {\n      main: '#ffffff',\n      contrastText: '#3ab77d'\n    }\n  },\n  typography: {\n    fontFamily: 'Usual, Roboto, Helvetica, Arial, sans-serif',\n    button: {\n      fontFamily: 'Usual, Roboto, Helvetica, Arial, sans-serif',\n      fontWeight: 700,\n      fontSize: 13,\n      textTransform: 'none'\n    }\n  },\n  overrides: {\n    MuiDialog: {\n      root: {\n        width: '100%'\n      }\n    },\n    MuiDialogTitle: {\n      root: {\n        fontFamily: 'Usual, Roboto, Helvetica, Arial, sans-serif',\n        fontWeight: 550,\n        fontSize: '1em',\n        color: '#272E4C'\n      }\n    },\n    MuiDialogContentText: {\n      root: {\n        fontSize: '.8em',\n        color: '#272E4C'\n      }\n    },\n    MuiFormControlLabel: {\n      label: {\n        fontSize: '.8em',\n        color: '#272E4C'\n      }\n    },\n    MuiIconButton: {\n      root: {\n        fontSize: '.9em'\n      }\n    },\n    MuiButton: {\n      containedPrimary: {\n        boxShadow: '0px 3px 6px #1e207129',\n        '&:hover': {\n          backgroundColor: '#008650'\n        }\n      },\n      containedSecondary: {\n        border: '1px solid #0000001A',\n        boxShadow: '0px 1px 3px #00000033',\n        '&:hover': {\n          backgroundColor: '#3ab77d1a'\n        }\n      },\n      outlinedSecondary: {\n        border: '1px solid #3ab77d',\n        boxShadow: '0px 1px 3px #00000033',\n        '&:hover': {\n          backgroundColor: '#3ab77d1a'\n        }\n      }\n    }\n  }\n});\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return _extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return _assign.apply(this, arguments);\n};\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nfunction __awaiter(thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nfunction __generator(thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n}\n\nfunction __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n}\n\nvar labelColor = 'rgb(21,28,28)';\nvar grayColor = 'rgba(39,52,76,0.3)';\nvar grayColorFocused = 'rgba(39,52,76,0.5)';\nvar borderCss = {\n  borderColor: grayColor,\n  borderRadius: 5\n};\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    root: {\n      width: '100%'\n    },\n    control: {\n      '& label.Mui-focused': {\n        color: labelColor\n      },\n      '& .MuiInput-underline:after': {\n        borderBottomColor: grayColor\n      },\n      '& .MuiOutlinedInput-root': {\n        '& fieldset': borderCss,\n        '&:hover fieldset': borderCss,\n        '&.Mui-focused fieldset': _assign(_assign({}, borderCss), {\n          borderColor: grayColorFocused\n        })\n      }\n    },\n    input: {\n      display: 'flex'\n    },\n    label: {},\n    select: {\n      marginTop: theme.spacing(1),\n      backgroundColor: 'white',\n      width: '100%'\n    },\n    valueContainer: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      flex: 1,\n      alignItems: 'center',\n      overflow: 'hidden'\n    },\n    noOptionsMessage: {\n      padding: theme.spacing(1, 2)\n    },\n    singleValue: {\n      fontSize: 16\n    },\n    placeholder: {\n      position: 'absolute',\n      left: 2,\n      bottom: 6,\n      fontSize: 16\n    },\n    paper: {\n      position: 'absolute',\n      zIndex: 999,\n      left: 0,\n      right: 0\n    }\n  });\n});\n\nfunction NoOptionsMessage(props) {\n  return React__default.createElement(Typography, _assign({\n    color: \"textSecondary\",\n    className: props.selectProps.classes.noOptionsMessage\n  }, props.innerProps), props.children);\n}\n\nfunction inputComponent(_a) {\n  var inputRef = _a.inputRef,\n      props = __rest(_a, [\"inputRef\"]);\n\n  return React__default.createElement(\"div\", _assign({\n    ref: inputRef\n  }, props));\n}\n\nfunction Control(props) {\n  var children = props.children,\n      innerProps = props.innerProps,\n      innerRef = props.innerRef,\n      _a = props.selectProps,\n      classes = _a.classes,\n      TextFieldProps = _a.TextFieldProps;\n  return React__default.createElement(TextField, _assign({\n    className: classes.control,\n    InputProps: {\n      inputComponent: inputComponent,\n      inputProps: _assign({\n        className: classes.input,\n        ref: innerRef,\n        children: children\n      }, innerProps)\n    }\n  }, TextFieldProps, {\n    variant: \"outlined\",\n    fullWidth: true\n  }));\n}\n\nfunction Option(props) {\n  return React__default.createElement(MenuItem, _assign({\n    ref: props.innerRef,\n    selected: props.isFocused,\n    component: \"div\",\n    style: {\n      fontWeight: props.isSelected ? 500 : 400\n    }\n  }, props.innerProps), props.children);\n}\n\nfunction Placeholder(props) {\n  var selectProps = props.selectProps,\n      _a = props.innerProps,\n      innerProps = _a === void 0 ? {} : _a,\n      children = props.children;\n  return React__default.createElement(Typography, _assign({\n    color: \"textSecondary\",\n    className: selectProps.classes.placeholder\n  }, innerProps), children);\n}\n\nfunction SingleValue(props) {\n  return React__default.createElement(Typography, _assign({\n    className: props.selectProps.classes.singleValue\n  }, props.innerProps), props.children);\n}\n\nfunction ValueContainer(props) {\n  return React__default.createElement(\"div\", {\n    className: props.selectProps.classes.valueContainer\n  }, props.children);\n}\n\nfunction Menu(props) {\n  return React__default.createElement(Paper, _assign({\n    square: true,\n    className: props.selectProps.classes.paper\n  }, props.innerProps), props.children);\n}\n\nvar components = {\n  Control: Control,\n  Menu: Menu,\n  Option: Option,\n  NoOptionsMessage: NoOptionsMessage,\n  Placeholder: Placeholder,\n  SingleValue: SingleValue,\n  ValueContainer: ValueContainer\n};\n\nvar InputAutocomplete = function InputAutocomplete(props) {\n  var classes = useStyles();\n\n  var _a = React__default.useState(null),\n      single = _a[0],\n      setSingle = _a[1];\n\n  function handleChange(optionItem) {\n    setSingle(optionItem);\n\n    if (props.onChange) {\n      props.onChange(optionItem);\n    }\n  }\n\n  return React__default.createElement(FormControl, {\n    className: classes.root\n  }, React__default.createElement(Typography, {\n    className: classes.label,\n    color: \"textPrimary\"\n  }, props.label), React__default.createElement(NoSsr, null, React__default.createElement(Select, {\n    className: classes.select,\n    classes: classes,\n    inputId: props.inputId,\n    TextFieldProps: {\n      error: props.error\n    },\n    placeholder: \"\",\n    options: props.suggestions,\n    components: components,\n    value: single,\n    onChange: handleChange,\n    isSearchable: true,\n    isClearable: true\n  })));\n};\n\nInputAutocomplete.defaultProps = {\n  error: false\n};\nvar index$5 =\n/*#__PURE__*/\nObject.freeze({\n  InputAutocomplete: InputAutocomplete\n});\nvar labelColor$1 = 'rgb(21,28,28)';\nvar grayColor$1 = 'rgba(39,52,76,0.3)';\nvar grayColorFocused$1 = 'rgba(39,52,76,0.5)';\nvar borderCss$1 = {\n  borderColor: grayColor$1,\n  borderRadius: 5\n};\nvar useStyles$1 = makeStyles(function (theme) {\n  return {\n    root: {\n      width: '100%'\n    },\n    label: {},\n    textField: {\n      '& label.Mui-focused': {\n        color: labelColor$1\n      },\n      '& .MuiInput-underline:after': {\n        borderBottomColor: grayColor$1\n      },\n      '& .MuiOutlinedInput-root': {\n        '& fieldset': borderCss$1,\n        '&:hover fieldset': borderCss$1,\n        '&.Mui-focused fieldset': _assign(_assign({}, borderCss$1), {\n          borderColor: grayColorFocused$1\n        })\n      },\n      '&': {\n        marginTop: theme.spacing(1),\n        backgroundColor: 'white',\n        width: '100%'\n      }\n    }\n  };\n});\n\nvar InputChipTextField = function InputChipTextField(props) {\n  var classes = useStyles$1();\n\n  var _a = useState(props.value || []),\n      currentValue = _a[0],\n      setcurrentValue = _a[1];\n\n  var onChange = function onChange(chips) {\n    setcurrentValue(chips);\n\n    if (props.onChange) {\n      props.onChange(chips);\n    }\n  };\n\n  return React__default.createElement(FormControl, {\n    className: classes.root\n  }, React__default.createElement(Typography, {\n    className: classes.label,\n    color: \"textPrimary\"\n  }, props.label), React__default.createElement(ChipInput, {\n    id: props.id,\n    className: classes.textField,\n    defaultValue: currentValue,\n    onChange: onChange,\n    error: props.error,\n    variant: \"outlined\"\n  }));\n};\n\nInputChipTextField.defaultProps = {\n  label: '',\n  value: [],\n  error: false,\n  multiline: false,\n  rows: 1,\n  onChange: function onChange(chips) {\n    console.log(chips);\n  }\n};\nvar index$6 =\n/*#__PURE__*/\nObject.freeze({\n  InputChipTextField: InputChipTextField\n});\nvar labelColor$2 = 'rgb(21,28,28)';\nvar grayColor$2 = 'rgba(39,52,76,0.3)';\nvar grayColorFocused$2 = 'rgba(39,52,76,0.5)';\nvar borderCss$2 = {\n  borderColor: grayColor$2,\n  borderRadius: 5\n};\nvar borderStyles = {\n  root: {\n    '& label.Mui-focused': {\n      color: labelColor$2\n    },\n    '& .MuiInput-underline:after': {\n      borderBottomColor: grayColor$2\n    },\n    '& .MuiOutlinedInput-root': {\n      '& fieldset': borderCss$2,\n      '&:hover fieldset': borderCss$2,\n      '&.Mui-focused fieldset': _assign(_assign({}, borderCss$2), {\n        borderColor: grayColorFocused$2\n      })\n    }\n  }\n};\nvar useStyles$2 = makeStyles(function (theme) {\n  return {\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n    formControl: {\n      width: '100%'\n    },\n    label: {\n      fontSize: '.8em'\n    },\n    select: {\n      marginTop: theme.spacing(1),\n      backgroundColor: 'white'\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2)\n    },\n    icon: {\n      marginRight: theme.spacing(2.5),\n      color: grayColor$2\n    }\n  };\n}); // const StyledFormControl = withStyles(borderStyles)(FormControl);\n\nvar StyledOutlinedInput = withStyles(borderStyles)(OutlinedInput);\n\nvar InputSelect = function InputSelect(props) {\n  var defaultValue = {\n    id: -1,\n    value: '',\n    label: ''\n  };\n\n  var items = __spreadArrays([defaultValue], props.data);\n\n  var getDefaultValue = function getDefaultValue() {\n    if (props.value) {\n      var defVal = items.find(function (item) {\n        return item.value === props.value;\n      });\n\n      if (defVal) {\n        return defVal;\n      }\n    }\n\n    return defaultValue;\n  };\n\n  var classes = useStyles$2();\n\n  var _a = useState(getDefaultValue()),\n      currentValue = _a[0],\n      setCurrentValue = _a[1];\n\n  var inputLabel = React__default.useRef(null);\n  var labelWidth = React__default.useState(0)[0]; // React.useEffect(() => {\n  //   setLabelWidth(inputLabel.current!.offsetWidth);\n  // }, []);\n\n  var onChange = function onChange(e) {\n    var selectedItem = items.find(function (item) {\n      return item.value === e.target.value;\n    }) || defaultValue;\n    setCurrentValue(selectedItem);\n\n    if (props.onChange) {\n      props.onChange(selectedItem);\n    }\n  };\n\n  var displaySelectItem = function displaySelectItem(props, selectItem) {\n    if (props.displaySelectItem) {\n      return props.displaySelectItem(selectItem);\n    }\n\n    var disabled = selectItem.id === -1 && props.required;\n    return React__default.createElement(MenuItem, {\n      key: selectItem.id,\n      value: selectItem.value,\n      disabled: disabled\n    }, selectItem.label);\n  };\n\n  return React__default.createElement(\"div\", {\n    className: classes.formControl\n  }, props.label ? React__default.createElement(InputLabel, {\n    color: \"textPrimary\",\n    className: classes.label,\n    ref: inputLabel,\n    htmlFor: props.id,\n    error: props.error\n  }, props.label) : null, React__default.createElement(Select$1, {\n    className: classes.select,\n    value: currentValue.value,\n    onChange: onChange,\n    input: React__default.createElement(StyledOutlinedInput, {\n      id: props.id,\n      name: props.id,\n      error: props.error,\n      labelWidth: labelWidth,\n      fullWidth: true\n    }),\n    IconComponent: function IconComponent() {\n      return React__default.createElement(ExpandMoreRounded, {\n        className: classes.icon\n      });\n    }\n  }, items.map(function (item) {\n    return displaySelectItem(props, item);\n  })));\n};\n\nInputSelect.defaultProps = {\n  value: '',\n  error: false,\n  required: false,\n  onChange: function onChange(value) {\n    console.log(value);\n  }\n};\nvar index$7 =\n/*#__PURE__*/\nObject.freeze({\n  InputSelect: InputSelect\n});\nvar labelColor$3 = 'rgb(21,28,28)';\nvar grayColor$3 = 'rgba(39,52,76,0.3)';\nvar grayColorFocused$3 = 'rgba(39,52,76,0.5)';\nvar borderCss$3 = {\n  borderColor: grayColor$3,\n  borderRadius: 5\n};\nvar borderStyles$1 = {\n  root: {\n    '& label.Mui-focused': {\n      color: labelColor$3\n    },\n    '& .MuiInput-underline:after': {\n      borderBottomColor: grayColor$3\n    },\n    '& .MuiOutlinedInput-root': {\n      '& fieldset': borderCss$3,\n      '&:hover fieldset': borderCss$3,\n      '&.Mui-focused fieldset': _assign(_assign({}, borderCss$3), {\n        borderColor: grayColorFocused$3\n      })\n    }\n  },\n  input: {\n    fontSize: 14 // input: {\n    //   '&:focus': {\n    //     borderRadius: 4,\n    //     borderColor: '#80bdff',\n    //     boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\n    //   }\n    // }\n\n  }\n};\nvar useStyles$3 = makeStyles(function (theme) {\n  return {\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n    formControl: {\n      width: '100%'\n    },\n    label: {\n      fontSize: '.8em'\n    },\n    select: {\n      marginTop: theme.spacing(1),\n      backgroundColor: 'white'\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2)\n    },\n    icon: {\n      marginRight: theme.spacing(2.5),\n      color: grayColor$3\n    },\n    error: {\n      color: '#E53935',\n      fontSize: '12px'\n    },\n    errorIcon: {\n      color: '#E53935',\n      fontSize: 'small',\n      float: 'right'\n    }\n  };\n}); // const StyledFormControl = withStyles(borderStyles)(FormControl);\n\nvar StyledOutlinedInput$1 = withStyles(borderStyles$1)(OutlinedInput);\n\nvar InputSelectSetValue = function InputSelectSetValue(props) {\n  var items = __spreadArrays(props.data);\n\n  var classes = useStyles$3();\n  var inputLabel = React__default.useRef(null);\n  var labelWidth = React__default.useState(0)[0]; // React.useEffect(() => {\n  //   setLabelWidth(inputLabel.current!.offsetWidth);\n  // }, []);\n\n  var onChange = function onChange(e) {\n    var selectedItem = items.find(function (item) {\n      return item.value === e.target.value;\n    });\n\n    if (props.onChange) {\n      props.onChange(selectedItem);\n    }\n  };\n\n  var displaySelectItem = function displaySelectItem(props, selectItem) {\n    if (props.displaySelectItem) {\n      return props.displaySelectItem(selectItem);\n    }\n\n    var disabled = selectItem.id === -1 && props.required;\n    return React__default.createElement(MenuItem, {\n      key: selectItem.id,\n      value: selectItem.value,\n      disabled: disabled\n    }, selectItem.label);\n  };\n\n  return React__default.createElement(\"div\", {\n    className: classes.formControl\n  }, React__default.createElement(InputLabel, {\n    color: \"textPrimary\",\n    className: classes.label,\n    ref: inputLabel,\n    htmlFor: props.id\n  }, props.label), React__default.createElement(Select$1, {\n    className: classes.select,\n    value: props.value,\n    onChange: onChange,\n    disabled: props.disabled,\n    input: React__default.createElement(StyledOutlinedInput$1, {\n      id: props.id,\n      name: props.id,\n      error: props.error,\n      labelWidth: labelWidth,\n      fullWidth: true,\n      disabled: props.disabled\n    }),\n    IconComponent: function IconComponent() {\n      return React__default.createElement(ExpandMoreRounded, {\n        className: classes.icon\n      });\n    }\n  }, items.map(function (item) {\n    return displaySelectItem(props, item);\n  })), props.error && React__default.createElement(\"div\", {\n    className: classes.formControl\n  }, React__default.createElement(FormHelperText, {\n    id: \"component-error-text\",\n    className: classes.error\n  }, props.errorMessage, React__default.createElement(ErrorIcon, {\n    className: classes.errorIcon\n  }))));\n};\n\nInputSelectSetValue.defaultProps = {\n  label: '',\n  value: '',\n  error: false,\n  errorMessage: '',\n  required: false,\n  disabled: false,\n  onChange: function onChange(value) {\n    console.log(value);\n  }\n};\nvar index$8 =\n/*#__PURE__*/\nObject.freeze({\n  InputSelectSetValue: InputSelectSetValue\n});\nvar useStyles$4 = makeStyles(function (theme) {\n  return {\n    root: {\n      width: '100%'\n    },\n    label: {\n      fontSize: '.8em'\n    },\n    textField: {\n      marginTop: theme.spacing(1),\n      backgroundColor: 'white',\n      fontSize: '14px'\n    },\n    error: {\n      color: '#E53935',\n      fontSize: '12px'\n    },\n    errorIcon: {\n      color: '#E53935',\n      fontSize: 'small',\n      float: 'right'\n    }\n  };\n});\nvar labelColor$4 = 'rgb(21,28,28)';\nvar grayColor$4 = 'rgba(39,52,76,0.3)';\nvar grayColorFocused$4 = 'rgba(39,52,76,0.5)';\nvar borderCss$4 = {\n  borderColor: grayColor$4,\n  borderRadius: 5\n};\nvar StyledTextField = withStyles({\n  root: {\n    '& label.Mui-focused': {\n      color: labelColor$4\n    },\n    '& .MuiInput-underline:after': {\n      borderBottomColor: grayColor$4\n    },\n    '& .MuiOutlinedInput-root': {\n      '& fieldset': borderCss$4,\n      '&:hover fieldset': borderCss$4,\n      '&.Mui-focused fieldset': _assign(_assign({}, borderCss$4), {\n        borderColor: grayColorFocused$4\n      })\n    }\n  }\n})(TextField);\n\nvar InputTextField = function InputTextField(props) {\n  var classes = useStyles$4();\n\n  var onChange = function onChange(e) {\n    var value = e.target.value;\n\n    if (props.onChange) {\n      props.onChange(value);\n    }\n  };\n\n  return React__default.createElement(\"div\", {\n    className: classes.root\n  }, props.label ? React__default.createElement(InputLabel, {\n    htmlFor: props.id,\n    className: classes.label,\n    color: \"textPrimary\"\n  }, props.label) : null, React__default.createElement(StyledTextField, {\n    id: props.id,\n    className: classes.textField,\n    value: props.value,\n    onChange: onChange,\n    error: props.error,\n    multiline: props.multiline,\n    rows: props.rows,\n    type: props.type,\n    fullWidth: true,\n    disabled: props.disabled,\n    variant: \"outlined\"\n  }), props.error && React__default.createElement(\"div\", {\n    className: classes.root\n  }, React__default.createElement(FormHelperText, {\n    id: \"component-error-text\",\n    className: classes.error\n  }, props.errorMessage, React__default.createElement(ErrorIcon, {\n    className: classes.errorIcon\n  }))));\n};\n\nInputTextField.defaultProps = {\n  type: 'text',\n  value: '',\n  error: false,\n  errorMessage: '',\n  multiline: false,\n  disabled: false,\n  rows: 1,\n  onChange: function onChange(value) {\n    console.log(\"InputTextField.defaultProps - Value: \" + value);\n  }\n};\nvar index$9 =\n/*#__PURE__*/\nObject.freeze({\n  InputTextField: InputTextField\n}); //declare class to style components\n\nvar useStyles$5 = makeStyles(function (theme) {\n  return {\n    root: {\n      flexWrap: 'wrap'\n    },\n    inputSelect: {\n      marginBottom: theme.spacing(1)\n    },\n    dialog: {\n      align: 'center',\n      justify: 'center',\n      width: '100%'\n    },\n    dialogContent: {\n      paddingTop: '0px'\n    },\n    container: {\n      paddingRight: '15px',\n      paddingLeft: '15px'\n    },\n    dialogTitle: {\n      marginTop: theme.spacing(2)\n    },\n    dialogContentTitle: {},\n    dialogContentText: {},\n    formControlLabel: {},\n    textField: {},\n    checkBox: {\n      paddingLeft: '10px'\n    },\n    dialogAction: {\n      marginBottom: theme.spacing(2),\n      marginTop: theme.spacing(2),\n      justifyContent: 'center'\n    },\n    resolveDialogAction: {\n      marginBottom: theme.spacing(2),\n      marginTop: theme.spacing(4),\n      justifyContent: 'center'\n    },\n    leftButton: {\n      width: 115,\n      marginLeft: 15,\n      marginRight: 10\n    },\n    rightButton: {\n      width: 115,\n      marginLeft: 10,\n      marginRight: 15\n    }\n  };\n});\nvar StyledCheckbox = withStyles({\n  root: {\n    color: '#9EA3AC',\n    '&$checked': {\n      color: '#1E2071'\n    }\n  },\n  checked: {}\n})(Checkbox);\n\nvar TicketModal = function TicketModal(props) {\n  var classes = useStyles$5();\n\n  var _a = React__default.useState({\n    notes: '',\n    notesError: false,\n    isResolved: false\n  }),\n      state = _a[0],\n      setState = _a[1];\n\n  var _b = useState(true),\n      disabled = _b[0],\n      setDisabled = _b[1]; //reset values and close dialog\n\n\n  var handleClose = function handleClose() {\n    setDisabled(true);\n    setState({\n      notes: '',\n      notesError: false,\n      isResolved: false\n    });\n    props.onClose();\n  }; //changes state of the changed values\n\n\n  var setFieldValue = function setFieldValue(fieldName, value) {\n    setState(function (state) {\n      var _a;\n\n      return _assign(_assign({}, state), (_a = {}, _a[fieldName] = value, _a));\n    });\n  };\n\n  var setFieldError = function setFieldError(fieldName, error) {\n    setState(function (state) {\n      var _a;\n\n      return _assign(_assign({}, state), (_a = {}, _a[fieldName] = error, _a));\n    });\n  };\n  /* render ticket management modal in 3 different types (Resolve, Assign, Escalate)\r\n      Sample usage :\r\n      import { Components } from '@hims/core';\r\n      const Modal = Components.UI.TicketModal.TicketModal;\r\n         <Modal\r\n                    type=\"Escalate\" (Resolve/Assign/Escalate) - is not case sensitive but will render title as is\r\n                    onClose={this.onAddDataFieldModalClose}\r\n                    isModalOpen={ticketModal}\r\n                    selectItems={[{\"id\":0,\"value\":'Jae',\"label\":'Jae'},{\"id\":1,\"value\":'Lambert',\"label\":'Lambert'},{\"id\":2,\"value\":'Bau',\"label\":'Bau'}]}\r\n                    onSubmit={this.onAddDataFieldModalClose}\r\n          />\r\n  */\n\n\n  var component = React__default.createElement(\"div\", null);\n\n  switch (props.type.toLowerCase()) {\n    case 'resolve':\n      console.log('in resolve');\n      component = React__default.createElement(\"div\", null, React__default.createElement(Grid, {\n        container: true,\n        className: classes.container,\n        justify: \"flex-start\",\n        alignItems: \"flex-start\",\n        direction: \"column\"\n      }, React__default.createElement(Grid, {\n        item: true,\n        xs: true\n      }, React__default.createElement(DialogTitle, {\n        disableTypography: true,\n        id: \"dialog-title\",\n        className: classes.dialogTitle\n      }, props.type, \" Ticket\")), React__default.createElement(Grid, {\n        item: true,\n        xs: true\n      }, React__default.createElement(DialogContent, {\n        className: classes.dialogContent\n      }, React__default.createElement(DialogContentText, {\n        className: classes.dialogContentText,\n        id: \"alert-dialog-description\"\n      }, \"How was the issue resolved?\"), React__default.createElement(InputTextField, {\n        value: state.notes,\n        error: state.notesError,\n        multiline: true,\n        rows: 4,\n        onChange: function onChange(value) {\n          setFieldValue('notes', value);\n          setFieldError('notesError', value.length === 0);\n        }\n      })), React__default.createElement(Grid, {\n        item: true,\n        xs: true\n      }, React__default.createElement(DialogContent, {\n        className: classes.dialogContent\n      }, React__default.createElement(FormControlLabel, {\n        className: classes.formControlLabel,\n        control: React__default.createElement(StyledCheckbox, {\n          icon: React__default.createElement(FontAwesomeIcon, {\n            icon: faSquare\n          }),\n          checkedIcon: React__default.createElement(FontAwesomeIcon, {\n            icon: faCheckSquare\n          }),\n          color: \"primary\",\n          checked: state.isResolved,\n          onChange: function onChange(value) {\n            setFieldValue('isResolved', value.target.checked);\n            setDisabled(!value.target.checked);\n          },\n          inputProps: {\n            'aria-label': 'primary checkbox'\n          }\n        }),\n        label: \"Mark as resolved\",\n        labelPlacement: \"end\"\n      }))), React__default.createElement(DialogActions, {\n        className: classes.resolveDialogAction\n      }, React__default.createElement(Button, {\n        className: classes.leftButton,\n        variant: \"contained\",\n        onClick: handleClose,\n        color: \"secondary\"\n      }, \"Cancel\"), React__default.createElement(Button, {\n        className: classes.rightButton,\n        variant: \"contained\",\n        disabled: disabled,\n        onClick: props.onSubmit,\n        color: \"primary\"\n      }, \"Resolve\")))));\n      break;\n\n    case 'assign':\n      console.log('in assign');\n      component = React__default.createElement(\"div\", null, React__default.createElement(Grid, {\n        container: true,\n        className: classes.container,\n        justify: \"flex-start\",\n        alignItems: \"flex-start\",\n        direction: \"column\"\n      }, React__default.createElement(Grid, {\n        item: true,\n        xs: true\n      }, React__default.createElement(DialogTitle, {\n        disableTypography: true,\n        id: \"dialog-title\",\n        className: classes.dialogTitle\n      }, props.type, \" Ticket\")), React__default.createElement(Grid, {\n        item: true,\n        xs: true\n      }, React__default.createElement(DialogContent, {\n        className: classes.dialogContent\n      }, React__default.createElement(InputSelect, {\n        id: 'modal-input-select',\n        label: 'Assign To',\n        data: props.selectItems\n      }), React__default.createElement(DialogContentText, null), React__default.createElement(InputTextField, {\n        label: 'Notes',\n        value: state.notes,\n        error: state.notesError,\n        multiline: true,\n        rows: 4,\n        onChange: function onChange(value) {\n          setFieldValue('notes', value);\n          setFieldError('notesError', value.length === 0);\n        }\n      })), React__default.createElement(DialogActions, {\n        className: classes.dialogAction\n      }, React__default.createElement(Button, {\n        className: classes.leftButton,\n        variant: \"contained\",\n        onClick: handleClose,\n        color: \"secondary\"\n      }, \"Cancel\"), React__default.createElement(Button, {\n        className: classes.rightButton,\n        variant: \"contained\",\n        onClick: props.onSubmit,\n        color: \"primary\"\n      }, \"Assign\")))));\n      break;\n\n    case 'escalate':\n      console.log('in escalate');\n      component = React__default.createElement(\"div\", null, React__default.createElement(Grid, {\n        container: true,\n        className: classes.container,\n        justify: \"flex-start\",\n        alignItems: \"flex-start\",\n        direction: \"column\"\n      }, React__default.createElement(Grid, {\n        item: true,\n        xs: true\n      }, React__default.createElement(DialogTitle, {\n        disableTypography: true,\n        id: \"dialog-title\",\n        className: classes.dialogTitle\n      }, props.type, \" Ticket\")), React__default.createElement(Grid, {\n        item: true,\n        xs: true\n      }, React__default.createElement(DialogContent, {\n        className: classes.dialogContent\n      }, React__default.createElement(InputSelect, {\n        id: 'modal-input-select',\n        label: 'Escalate To',\n        data: props.selectItems\n      }), React__default.createElement(DialogContentText, null), React__default.createElement(InputTextField, {\n        label: 'Notes',\n        value: state.notes,\n        error: state.notesError,\n        multiline: true,\n        rows: 4,\n        onChange: function onChange(value) {\n          setFieldValue('notes', value);\n          setFieldError('notesError', value.length === 0);\n        }\n      })), React__default.createElement(DialogActions, {\n        className: classes.dialogAction\n      }, React__default.createElement(Button, {\n        className: classes.leftButton,\n        variant: \"contained\",\n        onClick: handleClose,\n        color: \"secondary\"\n      }, \"Cancel\"), React__default.createElement(Button, {\n        className: classes.rightButton,\n        variant: \"contained\",\n        onClick: props.onSubmit,\n        color: \"primary\"\n      }, \"Escalate\")))));\n      break;\n  }\n\n  return React__default.createElement(Dialog, {\n    className: classes.dialog,\n    open: props.isModalOpen,\n    \"aria-labelledby\": \"simple-dialog-title\"\n  }, component);\n}; //declare defaults\n\n\nTicketModal.defaultProps = {\n  isModalOpen: false,\n  type: 'Resolve',\n  selectItems: [{\n    \"id\": 0,\n    \"value\": '',\n    \"label\": ''\n  }]\n};\nvar index$a =\n/*#__PURE__*/\nObject.freeze({\n  TicketModal: TicketModal\n});\nvar styles = {\n  \"title\": \"index_title__3_oz-\",\n  \"titleBack\": \"index_titleBack__ghwZN\",\n  \"titleFront\": \"index_titleFront__23_8b\",\n  \"titleContact\": \"index_titleContact__2ETaU\",\n  \"titleRecruitmentTitle\": \"index_titleRecruitmentTitle__eDJJH\"\n}; // #endregion Interface Imports\n\nvar SampleCoreComponent =\n/** @class */\nfunction (_super) {\n  __extends(SampleCoreComponent, _super);\n\n  function SampleCoreComponent() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SampleCoreComponent.prototype.render = function () {\n    var text = this.props.text;\n    return React__default.createElement(\"div\", {\n      className: styles.title\n    }, React__default.createElement(\"span\", {\n      className: styles.titleBack\n    }, text), React__default.createElement(\"span\", {\n      className: styles.titleFront\n    }, text));\n  };\n\n  return SampleCoreComponent;\n}(React__default.Component);\n\nvar index$b =\n/*#__PURE__*/\nObject.freeze({\n  SampleCoreComponent: SampleCoreComponent\n});\nvar useStyles$6 = makeStyles(function (theme) {\n  var _a, _b;\n\n  return {\n    appBar: (_a = {\n      backgroundColor: '#ffffff',\n      color: '#808080'\n    }, _a[theme.breakpoints.up('sm')] = {\n      width: 'calc(100% - 85px)'\n    }, _a),\n    menuButton: (_b = {\n      marginRight: theme.spacing(2)\n    }, _b[theme.breakpoints.up('sm')] = {\n      display: 'none'\n    }, _b),\n    logo: {\n      height: '40px'\n    },\n    badge: {\n      backgroundColor: '#ff6969',\n      color: '#ffffff',\n      fontWeight: 700\n    },\n    grow: {\n      flexGrow: 1\n    }\n  };\n});\n\nvar AppHeader = function AppHeader(props) {\n  var classes = useStyles$6();\n\n  var handleMenuOnClick = function handleMenuOnClick() {\n    if (props.menuOnClick) {\n      props.menuOnClick();\n    }\n  }; // const handleNotificationOnClick = () => {\n  //   if (props.notificationOnClick) {\n  //     props.notificationOnClick();\n  //   }\n  // };\n\n\n  var handleUserOnClick = function handleUserOnClick() {\n    if (props.userOnClick) {\n      props.userOnClick();\n    }\n  };\n\n  return React__default.createElement(AppBar, {\n    className: classes.appBar\n  }, React__default.createElement(Toolbar, null, React__default.createElement(IconButton, {\n    edge: \"start\",\n    className: classes.menuButton,\n    onClick: handleMenuOnClick\n  }, React__default.createElement(MenuIcon, null)), React__default.createElement(Link, {\n    href: \"/\"\n  }, React__default.createElement(\"img\", {\n    src: props.logoImage,\n    className: classes.logo,\n    alt: \"logo\"\n  })), React__default.createElement(\"div\", {\n    className: classes.grow\n  }), React__default.createElement(IconButton, {\n    edge: \"end\",\n    onClick: handleUserOnClick\n  }, React__default.createElement(Avatar, {\n    src: props.userImage,\n    alt: \"avatar\"\n  }))));\n};\n\nAppHeader.defaultProps = {\n  badgeCount: 0\n};\nAppHeader.propTypes = {\n  badgeCount: PropTypes.number\n};\nvar useStyles$7 = makeStyles(function () {\n  return {\n    sideBar: {\n      width: '85px'\n    },\n    listItem: {\n      flexDirection: 'column'\n    },\n    listItemIcon: {\n      minWidth: 0\n    },\n    avatar: {\n      backgroundColor: 'rgba(158, 164, 172, 0.18)'\n    },\n    avatarSelected: {\n      backgroundColor: 'rgba(98, 255, 183, 0.18)'\n    },\n    listItemText: {\n      fontSize: 9,\n      color: '#ffffff'\n    },\n    icon: {\n      color: 'white'\n    },\n    iconSelected: {\n      color: 'rgba(98, 255, 183, 1)'\n    },\n    divider: {\n      backgroundColor: 'transparent',\n      height: '50px'\n    }\n  };\n});\n\nfunction ListItemLink(props) {\n  return React__default.createElement(ListItem, _assign({\n    button: true,\n    component: \"a\"\n  }, props));\n}\n\nvar AppSidebar = function AppSidebar(props) {\n  var classes = useStyles$7(); // const [selectedItem, setSelectedItem] = useState(\"dashboard\");\n\n  var handleDashboardOnClick = function handleDashboardOnClick(event, attr) {\n    console.log(\"event >>>\", event);\n\n    switch (attr) {\n      case \"dashboard\":\n        if (props.page === \"membership\") {\n          localStorage.setItem(\"sidebar\", \"dashboard\");\n          props.history.push('#/membership/', {\n            state: \"dashboard\"\n          });\n          window.location.reload();\n        } else if (props.page === \"underwriting\") {\n          localStorage.setItem(\"sidebar\", \"dashboard\");\n          props.history.push('#/underwriting/', {\n            state: \"dashboard\"\n          });\n          window.location.reload();\n        } else if (props.page === \"customer care\") {\n          localStorage.setItem(\"sidebar\", \"dashboard\");\n          props.history.push('#/customer-care', {\n            state: \"dashboard\"\n          });\n          window.location.reload();\n        }\n\n        break;\n\n      case \"members\":\n        if (props.page === \"membership\") {\n          localStorage.setItem(\"sidebar\", \"members\");\n          props.history.push('#/membership/members', {\n            state: \"members\"\n          });\n          window.location.reload();\n        }\n\n        break;\n\n      case \"create ticket\":\n        if (props.page === \"customer care\") {\n          localStorage.setItem(\"sidebar\", \"create ticket\");\n          props.history.push('#/customer-care/create-ticket', {\n            state: \"create ticket\"\n          });\n          window.location.reload();\n        }\n\n        break;\n    } // setSelectedItem(attr);\n\n  };\n\n  console.log(\"localstorage >>>\", localStorage.getItem(\"sidebar\"));\n  return React__default.createElement(\"div\", {\n    className: classes.sideBar\n  }, React__default.createElement(List, null, props.page !== \"customer care\" ? React__default.createElement(ListItemLink, {\n    className: classes.listItem,\n    href: props.page === \"membership\" ? \"#/membership/\" : \"#/underwriting/\"\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faHome,\n    className: classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Dashboard\",\n    disableTypography: true,\n    className: classes.listItemText\n  })) : null, props.page === \"customer care\" ? React__default.createElement(ListItemLink, {\n    className: classes.listItem,\n    href: \"#/customer-care/\"\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faPlusCircle,\n    className: classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Create New\",\n    disableTypography: true,\n    className: classes.listItemText\n  })) : null, props.page !== \"customer care\" ? React__default.createElement(ListItem, {\n    button: true,\n    className: classes.listItem,\n    onClick: function onClick(e) {\n      return handleDashboardOnClick(e, \"clients\");\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faUsers,\n    className: classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Clients\",\n    disableTypography: true,\n    className: classes.listItemText\n  })) : null, props.page !== \"customer care\" ? React__default.createElement(ListItem, {\n    button: true,\n    className: classes.listItem,\n    onClick: function onClick(e) {\n      return handleDashboardOnClick(e, \"proposals\");\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faFileSignature,\n    className: classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Proposals\",\n    disableTypography: true,\n    className: classes.listItemText\n  })) : null, props.page === \"membership\" ? React__default.createElement(ListItemLink, {\n    className: classes.listItem,\n    href: \"#/membership/members\"\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faIdCardAlt,\n    className: classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Members\",\n    disableTypography: true,\n    className: classes.listItemText\n  })) : null, props.page === \"customer care\" ? React__default.createElement(ListItem, {\n    button: true,\n    className: classes.listItem,\n    onClick: function onClick(e) {\n      return handleDashboardOnClick(e, \"members\");\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faIdCardAlt,\n    className: classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Members\",\n    disableTypography: true,\n    className: classes.listItemText\n  })) : null, props.page === \"customer care\" ? React__default.createElement(ListItemLink, {\n    className: classes.listItem,\n    href: \"#/customer-care/tickets\"\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faTasks,\n    className: classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Tickets\",\n    disableTypography: true,\n    className: classes.listItemText\n  })) : null, props.page !== \"customer care\" ? React__default.createElement(ListItem, {\n    button: true,\n    className: classes.listItem,\n    onClick: function onClick(e) {\n      return handleDashboardOnClick(e, \"tickets\");\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faTasks,\n    className: classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Tickets\",\n    disableTypography: true,\n    className: classes.listItemText\n  })) : null, props.page !== \"customer care\" ? React__default.createElement(ListItem, {\n    button: true,\n    className: classes.listItem,\n    onClick: function onClick(e) {\n      return handleDashboardOnClick(e, \"reports\");\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faTable,\n    className: classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Reports\",\n    disableTypography: true,\n    className: classes.listItemText\n  })) : null, props.page === \"underwriting\" ? React__default.createElement(ListItem, {\n    button: true,\n    className: classes.listItem,\n    onClick: function onClick(e) {\n      return handleDashboardOnClick(e, \"templates\");\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faFolderOpen,\n    className: classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Templates\",\n    disableTypography: true,\n    className: classes.listItemText\n  })) : null, props.page === \"membership\" ? React__default.createElement(ListItem, {\n    button: true,\n    className: classes.listItem,\n    onClick: function onClick(e) {\n      return handleDashboardOnClick(e, \"users\");\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faUserFriends,\n    className: classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Users\",\n    disableTypography: true,\n    className: classes.listItemText\n  })) : null, props.page === \"membership\" ? React__default.createElement(ListItem, {\n    button: true,\n    className: classes.listItem,\n    onClick: function onClick(e) {\n      return handleDashboardOnClick(e, \"settings\");\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faScrewdriver,\n    className: classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"settings\",\n    disableTypography: true,\n    className: classes.listItemText\n  })) : null, React__default.createElement(Divider, {\n    className: classes.divider\n  }), React__default.createElement(ListItem, {\n    button: true,\n    className: classes.listItem,\n    onClick: function onClick(e) {\n      return handleDashboardOnClick(e, \"help\");\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faBookOpen,\n    className: classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Help\",\n    disableTypography: true,\n    className: classes.listItemText\n  }))));\n};\n\nvar useStyles$8 = makeStyles(function (theme) {\n  var _a;\n\n  return {\n    root: {\n      display: 'flex'\n    },\n    drawer: (_a = {}, _a[theme.breakpoints.up('sm')] = {\n      width: '72px',\n      flexShrink: 0\n    }, _a),\n    drawerPaper: {\n      backgroundColor: '#1e2071'\n    },\n    content: {\n      flexGrow: 1,\n      padding: \"0 \" + theme.spacing(5) + \"px\"\n    },\n    toolbar: theme.mixins.toolbar\n  };\n});\n\nvar AuthenticatedLayout = function AuthenticatedLayout(props) {\n  var classes = useStyles$8();\n\n  var _a = useState(false),\n      mobileOpen = _a[0],\n      setMobileOpen = _a[1];\n\n  var handleDrawerToggle = function handleDrawerToggle() {\n    setMobileOpen(!mobileOpen);\n  };\n\n  return React__default.createElement(\"div\", {\n    className: classes.root\n  }, React__default.createElement(AppHeader, {\n    logoImage: \"intellicare.png\",\n    userImage: \"user.jpg\",\n    badgeCount: 8,\n    menuOnClick: handleDrawerToggle\n  }), React__default.createElement(\"nav\", {\n    className: classes.drawer\n  }, React__default.createElement(Hidden, {\n    smUp: true,\n    implementation: \"css\"\n  }, React__default.createElement(Drawer, {\n    classes: {\n      paper: classes.drawerPaper\n    },\n    variant: \"temporary\",\n    open: mobileOpen,\n    onClose: handleDrawerToggle\n  }, React__default.createElement(AppSidebar, _assign({}, props)))), React__default.createElement(Hidden, {\n    xsDown: true,\n    implementation: \"css\"\n  }, React__default.createElement(Drawer, {\n    classes: {\n      paper: classes.drawerPaper\n    },\n    variant: \"permanent\",\n    open: true\n  }, React__default.createElement(AppSidebar, _assign({}, props))))), React__default.createElement(\"main\", {\n    className: classes.content\n  }, React__default.createElement(\"div\", {\n    className: classes.toolbar\n  }), props.children));\n};\n\nvar useStyles$9 = makeStyles({\n  root: {\n    backgroundColor: '#ffffff',\n    padding: '10px'\n  },\n  gridContainer: {\n    height: '100px'\n  },\n  breadCrumbs: {\n    marginBottom: '10px'\n  },\n  headerTitle: {\n    fontSize: 25\n  },\n  linkPrevious: {\n    fontSize: 12,\n    fontWeight: 300,\n    color: 'black',\n    cursor: 'pointer'\n  },\n  linkCurrent: {\n    fontSize: 12,\n    color: 'black',\n    cursor: 'pointer'\n  }\n});\n\nvar PageHeader = function PageHeader() {\n  var classes = useStyles$9();\n  return createElement(\"div\", {\n    className: classes.root\n  }, createElement(Grid, {\n    container: true,\n    justify: \"space-between\",\n    alignItems: \"center\",\n    className: classes.gridContainer\n  }, createElement(Grid, {\n    item: true\n  }, createElement(Breadcrumbs, {\n    className: classes.breadCrumbs\n  }, createElement(Link, {\n    className: classes.linkPrevious\n  }, \"CLIENTS\"), createElement(Link, {\n    className: classes.linkCurrent\n  }, \"HAPPY INNOVATIVE TECHNOLOGIES, INC.\")), createElement(Typography, {\n    className: classes.headerTitle\n  }, \"Happy Innovative Technologies, Inc.\")), createElement(Grid, {\n    item: true\n  }, createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\"\n  }, \"Edit Client\"))));\n};\n\nvar index$c =\n/*#__PURE__*/\nObject.freeze({\n  'default': PageHeader\n});\nvar useStyles$a = makeStyles({\n  root: {\n    padding: '5px 5px'\n  },\n  name: function name(props) {\n    return {\n      fontSize: props.nameFontSize,\n      color: 'rgba(39, 46, 76, 0.6)'\n    };\n  },\n  value: function value(props) {\n    return {\n      fontSize: props.valueFontSize,\n      color: 'rgb(39, 46, 76)'\n    };\n  }\n});\n\nvar ClientInfoItem = function ClientInfoItem(props) {\n  var classes = useStyles$a(props);\n  return createElement(\"div\", {\n    className: classes.root\n  }, createElement(Typography, {\n    className: classes.name\n  }, props.name), createElement(Typography, {\n    className: classes.value\n  }, props.value));\n};\n\nClientInfoItem.defaultProps = {\n  nameFontSize: 12,\n  valueFontSize: 16\n};\nvar useStyles$b = makeStyles({\n  grid: function grid(props) {\n    return {\n      height: props.height\n    };\n  }\n});\n\nvar GridHorizontalDivider = function GridHorizontalDivider(props) {\n  var classes = useStyles$b(props);\n  return createElement(Grid, {\n    item: true,\n    xs: 12,\n    className: classes.grid\n  });\n};\n\nGridHorizontalDivider.defaultProps = {\n  height: '10px'\n};\nGridHorizontalDivider.propTypes = {\n  height: PropTypes.string\n};\nvar useCirclePrimitive = makeStyles(function (theme) {\n  var circlePrimitiveStyle = {\n    width: '100%',\n    height: '100%',\n    position: 'absolute',\n    left: '0',\n    top: '0'\n  };\n\n  if (theme.rotate) {\n    Object.assign(circlePrimitiveStyle, {\n      'transform': \"rotate(\" + theme.rotate + \"deg)\"\n    });\n  }\n\n  var circlePrimBeforeStyle = {\n    content: '',\n    display: 'block',\n    margin: '0 auto',\n    width: '15%',\n    height: '15%',\n    backgroundColor: '#999',\n    borderRadius: '100%',\n    '@keyframes circleFadeDelay': {\n      '0%,39%,100%': {\n        opacity: 0\n      },\n      '40%': {\n        opacity: 1\n      }\n    },\n    animation: \"$circleFadeDelay 1.2s infinite ease-in-out both\"\n  };\n\n  if (theme.delay) {\n    Object.assign(circlePrimBeforeStyle, {\n      animationDelay: theme.delay + \"s\"\n    });\n  } // Object.assign(circlePrimitiveStyle, {\n  //   '&:before': circlePrimBeforeStyle,\n  // });\n\n\n  return {\n    root: circlePrimitiveStyle\n  };\n});\n\nvar Circle = function Circle(props) {\n  var classes = useCirclePrimitive(props);\n  return createElement(\"div\", {\n    className: classes.root\n  });\n};\n\nvar useStyles$c = makeStyles({\n  root: {\n    margin: '2em auto',\n    width: '40px',\n    height: '40px',\n    position: 'relative'\n  }\n});\n\nvar Wrapper = function Wrapper(props) {\n  var classes = useStyles$c();\n  return React__default.createElement(\"div\", _assign({\n    className: classes.root\n  }, props));\n};\n\nvar LoadingIndicator = function LoadingIndicator() {\n  return createElement(Wrapper, null, createElement(Circle, null), createElement(Circle, {\n    rotate: 30,\n    delay: -1.1\n  }), createElement(Circle, {\n    rotate: 60,\n    delay: -1\n  }), createElement(Circle, {\n    rotate: 90,\n    delay: -0.9\n  }), createElement(Circle, {\n    rotate: 120,\n    delay: -0.8\n  }), createElement(Circle, {\n    rotate: 150,\n    delay: -0.7\n  }), createElement(Circle, {\n    rotate: 180,\n    delay: -0.6\n  }), createElement(Circle, {\n    rotate: 210,\n    delay: -0.5\n  }), createElement(Circle, {\n    rotate: 240,\n    delay: -0.4\n  }), createElement(Circle, {\n    rotate: 270,\n    delay: -0.3\n  }), createElement(Circle, {\n    rotate: 300,\n    delay: -0.2\n  }), createElement(Circle, {\n    rotate: 330,\n    delay: -0.1\n  }));\n};\n\nvar useStyles$d = makeStyles({\n  previous_page: {\n    fontWeight: 300\n  },\n  current_page: {\n    fontWeight: 600\n  }\n});\n\nvar BreadcrumbsComponent = function BreadcrumbsComponent(props) {\n  var items = props.items;\n  var classes = useStyles$d();\n  return createElement(Breadcrumbs, {\n    \"aria-label\": \"breadcrumb\"\n  }, items.map(function (item, i) {\n    if (item['url'] != \"\") {\n      return createElement(Link, {\n        className: classes.previous_page,\n        key: i,\n        color: \"inherit\",\n        href: item.url\n      }, item.label);\n    } else {\n      return createElement(Typography, {\n        className: classes.current_page,\n        key: i,\n        color: \"textPrimary\"\n      }, item.label);\n    }\n  }));\n};\n\nBreadcrumbsComponent.defaultProps = {\n  items: [{\n    label: \"SAMPLE\",\n    url: \"\"\n  }]\n};\nvar useStyles$e = makeStyles(function (theme) {\n  var _a;\n\n  return {\n    appBar: (_a = {\n      top: 'auto',\n      bottom: 0,\n      border: '1px solid #707070',\n      backgroundColor: 'rgba(54, 54, 54, 0.64)'\n    }, _a[theme.breakpoints.up('sm')] = {\n      width: 'calc(100% - 72px)'\n    }, _a),\n    grow: {\n      flexGrow: 1\n    },\n    button: {\n      margin: '0 10px',\n      minHeight: '42px',\n      minWidth: '150px'\n    },\n    buttonTitle: {\n      fontWeight: 700,\n      fontSize: 13\n    },\n    buttonSubTitle: {\n      fontWeight: 400,\n      fontSize: 7\n    }\n  };\n});\n\nvar FloatingButtons = function FloatingButtons(props) {\n  // const buttonclasses = ButtonStyle();\n  var classes = useStyles$e();\n  return createElement(Grid, {\n    container: true\n  }, createElement(Grid, {\n    item: true,\n    xs: 12\n  }, createElement(AppBar, {\n    className: classes.appBar\n  }, createElement(Toolbar, null, props.rightButtons, createElement(\"div\", {\n    className: classes.grow\n  }), props.leftButtons))));\n};\n\nFloatingButtons.defaultProps = {\n  leftButtons: null,\n  rightButtons: null\n};\nvar useStyles$f = makeStyles(function (theme) {\n  var _a, _b;\n\n  return {\n    root: {\n      display: 'flex'\n    },\n    drawer: (_a = {}, _a[theme.breakpoints.up('sm')] = {\n      width: '72px',\n      flexShrink: 0\n    }, _a),\n    drawerPaper: {\n      backgroundColor: '#1e2071'\n    },\n    content: {\n      flexGrow: 1\n    },\n    toolbar: theme.mixins.toolbar,\n    menuButton: (_b = {\n      marginRight: theme.spacing(2)\n    }, _b[theme.breakpoints.up('sm')] = {\n      display: 'none'\n    }, _b),\n    logo: {\n      height: '40px'\n    },\n    badge: {\n      backgroundColor: '#ff6969',\n      color: '#ffffff',\n      fontWeight: 700\n    },\n    grow: {\n      flexGrow: 1\n    },\n    sidebar: {\n      maxWidth: '85px'\n    },\n    contentgrid: {\n      maxWidth: 'calc(100% - 85px)',\n      flexBasis: 'calc(100% - 85px)'\n    }\n  };\n});\n\nvar PageLayout = function PageLayout(props) {\n  var classes = useStyles$f();\n\n  var _a = useState(false),\n      mobileOpen = _a[0],\n      setMobileOpen = _a[1];\n\n  var _b = React__default.useState(null),\n      anchorEl = _b[0],\n      setAnchorEl = _b[1];\n\n  var _c = React__default.useState(false),\n      open = _c[0],\n      setOpen = _c[1];\n\n  var _d = React__default.useState(),\n      placement = _d[0],\n      setPlacement = _d[1];\n\n  var handleDrawerToggle = function handleDrawerToggle() {\n    setMobileOpen(!mobileOpen);\n  };\n\n  var handleClick = function handleClick(newPlacement) {\n    return function (event) {\n      setAnchorEl(event.currentTarget);\n      setOpen(function (prev) {\n        return placement !== newPlacement || !prev;\n      });\n      setPlacement(newPlacement);\n    };\n  };\n\n  var logolink = '/';\n\n  switch (props.page) {\n    case 'membership':\n      logolink = '#/membership';\n      break;\n\n    case 'underwriting':\n      logolink = '#/underwriting';\n      break;\n\n    default:\n      break;\n  }\n\n  return React__default.createElement(\"div\", {\n    className: classes.root\n  }, React__default.createElement(Popper, {\n    open: open,\n    anchorEl: anchorEl,\n    placement: placement,\n    transition: true\n  }, function (_a) {\n    var TransitionProps = _a.TransitionProps;\n    return React__default.createElement(Fade, _assign({}, TransitionProps, {\n      timeout: 350\n    }), React__default.createElement(Paper$1, null, React__default.createElement(List$1, null, React__default.createElement(ListItem$1, {\n      button: true,\n      onClick: props.onLogout\n    }, React__default.createElement(ListItemIcon$1, null, React__default.createElement(ExitToAppIcon, null)), React__default.createElement(ListItemText$1, {\n      primary: \"Logout\"\n    })))));\n  }), React__default.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"flex-start\"\n  }, React__default.createElement(Grid, {\n    item: true,\n    xs: 1,\n    className: classes.sidebar\n  }, React__default.createElement(\"nav\", {\n    className: classes.drawer\n  }, React__default.createElement(Hidden, {\n    smUp: true,\n    implementation: \"css\"\n  }, React__default.createElement(Drawer, {\n    classes: {\n      paper: classes.drawerPaper\n    },\n    variant: \"temporary\",\n    open: mobileOpen,\n    onClose: handleDrawerToggle\n  }, React__default.createElement(AppSidebar, _assign({}, props)))), React__default.createElement(Hidden, {\n    xsDown: true,\n    implementation: \"css\"\n  }, React__default.createElement(Drawer, {\n    classes: {\n      paper: classes.drawerPaper\n    },\n    variant: \"permanent\",\n    open: true\n  }, React__default.createElement(AppSidebar, _assign({}, props)))))), React__default.createElement(Grid, {\n    item: true,\n    xs: 11,\n    className: classes.contentgrid\n  }, React__default.createElement(Grid, {\n    container: true,\n    direction: \"column\"\n  }, props.page !== \"customer care\" ? React__default.createElement(Grid, {\n    item: true,\n    xs: 12\n  }, React__default.createElement(Toolbar, null, React__default.createElement(IconButton, {\n    edge: \"start\",\n    className: classes.menuButton\n  }, React__default.createElement(MenuIcon, null)), React__default.createElement(Link, {\n    href: logolink\n  }, React__default.createElement(\"img\", {\n    src: \"intellicare.png\",\n    className: classes.logo,\n    alt: \"logo\"\n  })), React__default.createElement(\"div\", {\n    className: classes.grow\n  }), React__default.createElement(IconButton, null, React__default.createElement(Badge, {\n    badgeContent: 8,\n    classes: {\n      badge: classes.badge\n    }\n  }, React__default.createElement(NotificationsIcon, null))), React__default.createElement(IconButton, {\n    edge: \"end\",\n    onClick: handleClick('bottom-end')\n  }, React__default.createElement(Avatar, {\n    src: \"user.jpg\",\n    alt: \"avatar\"\n  })))) : null, React__default.createElement(Grid, {\n    item: true,\n    xs: 12\n  }, React__default.createElement(\"main\", {\n    className: classes.content\n  }, props.children))))));\n};\n\nvar index$d =\n/*#__PURE__*/\nObject.freeze({\n  BaseTheme: BaseTheme,\n  SampleCoreComponent: index$b,\n  InputAutocomplete: index$5,\n  InputChipTextField: index$6,\n  InputSelect: index$7,\n  InputSelectSetValue: index$8,\n  InputTextField: index$9,\n  LoadingIndicator: LoadingIndicator,\n  AppHeader: AppHeader,\n  AppSidebar: AppSidebar,\n  AuthenticatedLayout: AuthenticatedLayout,\n  PageHeader: index$c,\n  ClientInfoItem: ClientInfoItem,\n  GridHorizontalDivider: GridHorizontalDivider,\n  TicketModal: index$a,\n  BreadcrumbsComponent: BreadcrumbsComponent,\n  FloatingButtons: FloatingButtons,\n  PageLayout: PageLayout\n});\nvar index$e =\n/*#__PURE__*/\nObject.freeze({\n  Actions: index,\n  Definitions: index$1,\n  Reducers: index$2,\n  Services: index$3,\n  Stores: index$4,\n  UI: index$d\n});\n/**\r\n * Validate the shape of redux store\r\n */\n\nfunction checkStore(store) {\n  var shape = {\n    dispatch: isFunction,\n    subscribe: isFunction,\n    getState: isFunction,\n    replaceReducer: isFunction,\n    runSaga: isFunction,\n    injectedReducers: isObject,\n    injectedSagas: isObject\n  };\n  invariant(conformsTo(store, shape), '(src/Utils...) injectors: Expected a valid redux store');\n}\n/**\r\n * Create the store with dynamic reducers\r\n */\n\n\nfunction configureStore(createReducer, initialState, history) {\n  if (initialState === void 0) {\n    initialState = {};\n  }\n\n  var composeEnhancers = compose;\n  var reduxSagaMonitorOptions = {}; // If Redux Dev Tools and Saga Dev Tools Extensions are installed, enable them\n\n  /* istanbul ignore next */\n\n  if (process.env.NODE_ENV !== 'production' && typeof window === 'object') {\n    if (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) {\n      composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({});\n    } // NOTE: Uncomment the code below to restore support for Redux Saga\n    // Dev Tools once it supports redux-saga version 1.x.x\n    // if (window.__SAGA_MONITOR_EXTENSION__)\n    //   reduxSagaMonitorOptions = {\n    //     sagaMonitor: window.__SAGA_MONITOR_EXTENSION__,\n    //   };\n\n  }\n\n  var sagaMiddleware = createSagaMiddleware(reduxSagaMonitorOptions); // Create the store with two middlewares\n  // 1. sagaMiddleware: Makes redux-sagas work\n  // 2. routerMiddleware: Syncs the location/URL path to the state\n\n  var middlewares = [sagaMiddleware, routerMiddleware(history)];\n  var enhancers = [applyMiddleware.apply(void 0, middlewares)];\n  var store = createStore(createReducer(), initialState, composeEnhancers.apply(void 0, enhancers)); // Extensions\n\n  store.runSaga = sagaMiddleware.run;\n  store.injectedReducers = {}; // Reducer registry\n\n  store.injectedSagas = {}; // Saga registry\n\n  return store;\n}\n\nvar RESTART_ON_REMOUNT = '@@saga-injector/restart-on-remount';\nvar DAEMON = '@@saga-injector/daemon';\nvar ONCE_TILL_UNMOUNT = '@@saga-injector/once-till-unmount';\nvar constants =\n/*#__PURE__*/\nObject.freeze({\n  RESTART_ON_REMOUNT: RESTART_ON_REMOUNT,\n  DAEMON: DAEMON,\n  ONCE_TILL_UNMOUNT: ONCE_TILL_UNMOUNT\n});\nvar history = createBrowserHistory();\n\nfunction injectReducerFactory(createReducer, store, isValid) {\n  if (isValid === void 0) {\n    isValid = false;\n  } // tslint:disable-next-line: only-arrow-functions\n\n\n  return function injectReducer(key, reducer) {\n    if (!isValid) {\n      checkStore(store);\n    }\n\n    invariant(isString(key) && !isEmpty(key) && isFunction(reducer), '(src/Utils...) injectReducer: Expected `reducer` to be a reducer function'); // tslint:disable-next-line:max-line-length\n    // Check `store.injectedReducers[key] === reducer` for hot reloading when a key is the same but a reducer is different\n\n    if (Reflect.has(store.injectedReducers, key) && store.injectedReducers[key] === reducer) {\n      return;\n    }\n\n    store.injectedReducers[key] = reducer;\n    store.replaceReducer(createReducer(store.injectedReducers));\n  };\n}\n\nfunction getInjectors(createReducer, store) {\n  checkStore(store);\n  return {\n    injectReducer: injectReducerFactory(createReducer, store, true)\n  };\n}\n/**\r\n * Dynamically injects a reducer\r\n *\r\n * @param {string} key A key of the reducer\r\n * @param {function} reducer A reducer that will be injected\r\n *\r\n */\n\n\nfunction hocWithReducer(createReducer, _a) {\n  var key = _a.key,\n      reducer = _a.reducer;\n\n  function wrap(WrappedComponent) {\n    // dont wanna give access to HOC. Child only\n    var ReducerInjector =\n    /** @class */\n    function (_super) {\n      __extends(ReducerInjector, _super);\n\n      function ReducerInjector(props, context) {\n        var _this = _super.call(this, props, context) || this;\n\n        getInjectors(createReducer, context.store).injectReducer(\"\" + key, reducer);\n        return _this;\n      }\n\n      ReducerInjector.prototype.render = function () {\n        return createElement(WrappedComponent, _assign({}, this.props));\n      };\n\n      ReducerInjector.WrappedComponent = WrappedComponent;\n      ReducerInjector.displayName = \"withReducer(\" + (WrappedComponent.displayName || WrappedComponent.name || 'Component') + \")\";\n      return ReducerInjector;\n    }(Component$2);\n\n    return hoistNonReactStatics(ReducerInjector, WrappedComponent);\n  }\n\n  return wrap;\n}\n\nvar useInjectReducer = function useInjectReducer(createReducer, _a) {\n  var key = _a.key,\n      reducer = _a.reducer;\n  var store = useStore();\n  useEffect(function () {\n    getInjectors(createReducer, store).injectReducer(\"\" + key, reducer);\n  }, []);\n};\n\nvar allowedModes = [RESTART_ON_REMOUNT, DAEMON, ONCE_TILL_UNMOUNT];\n\nvar checkKey = function checkKey(key) {\n  return invariant(isString(key) && !isEmpty(key), '(src/Utils...) injectSaga: Expected `key` to be a non empty string');\n};\n\nvar checkDescriptor = function checkDescriptor(descriptor) {\n  var shape = {\n    saga: isFunction,\n    mode: function mode(_mode) {\n      return isString(_mode) && allowedModes.includes(_mode || '');\n    }\n  };\n  invariant(conformsTo(descriptor, shape), '(src/Utils...) injectSaga: Expected a valid saga descriptor');\n};\n\nfunction injectSagaFactory(store, isValid) {\n  if (isValid === void 0) {\n    isValid = false;\n  } // tslint:disable-next-line: only-arrow-functions\n\n\n  return function injectSaga(key, descriptor, args) {\n    if (descriptor === void 0) {\n      descriptor = {};\n    }\n\n    if (!isValid) {\n      checkStore(store);\n    }\n\n    var newDescriptor = _assign(_assign({}, descriptor), {\n      mode: descriptor.mode || DAEMON\n    });\n\n    var saga = newDescriptor.saga,\n        mode = newDescriptor.mode;\n    checkKey(key);\n    checkDescriptor(newDescriptor);\n    var hasSaga = Reflect.has(store.injectedSagas, key);\n\n    if (process.env.NODE_ENV !== 'production') {\n      var oldDescriptor = store.injectedSagas[key]; // enable hot reloading of daemon and once-till-unmount sagas\n\n      if (hasSaga && oldDescriptor.saga !== saga) {\n        oldDescriptor.task.cancel();\n        hasSaga = false;\n      }\n    }\n\n    if (!hasSaga || hasSaga && mode !== DAEMON && mode !== ONCE_TILL_UNMOUNT) {\n      store.injectedSagas[key] = _assign(_assign({}, newDescriptor), {\n        task: store.runSaga(saga, args)\n      });\n    }\n  };\n}\n\nfunction ejectSagaFactory(store, isValid) {\n  if (isValid === void 0) {\n    isValid = false;\n  } // tslint:disable-next-line: only-arrow-functions\n\n\n  return function ejectSaga(key) {\n    if (!isValid) {\n      checkStore(store);\n    }\n\n    checkKey(key);\n\n    if (Reflect.has(store.injectedSagas, key)) {\n      var descriptor = store.injectedSagas[key];\n\n      if (descriptor.mode && descriptor.mode !== DAEMON) {\n        descriptor.task.cancel(); // Clean up in production; in development we need `descriptor.saga` for hot reloading\n\n        if (process.env.NODE_ENV === 'production') {\n          // Need some value to be able to detect `ONCE_TILL_UNMOUNT` sagas in `injectSaga`\n          store.injectedSagas[key] = 'done';\n        }\n      }\n    }\n  };\n}\n\nfunction getInjectors$1(store) {\n  checkStore(store);\n  return {\n    injectSaga: injectSagaFactory(store, true),\n    ejectSaga: ejectSagaFactory(store, true)\n  };\n}\n/**\r\n * Dynamically injects a saga, passes component's props as saga arguments\r\n *\r\n * @param {string} key A key of the saga\r\n * @param {function} saga A root saga that will be injected\r\n * @param {string} [mode] By default (constants.RESTART_ON_REMOUNT) the saga will be started on component mount and\r\n * cancelled with `task.cancel()` on component un-mount for improved performance. Another two options:\r\n *   - constants.DAEMON—starts the saga on component mount and never cancels it or starts again,\r\n *   - constants.ONCE_TILL_UNMOUNT—behaves like 'RESTART_ON_REMOUNT' but never runs it again.\r\n *\r\n */\n\n\nfunction hocWithSaga(_a) {\n  var key = _a.key,\n      saga = _a.saga,\n      mode = _a.mode;\n\n  function wrap(WrappedComponent) {\n    // dont wanna give access to HOC. Child only\n    var InjectSaga =\n    /** @class */\n    function (_super) {\n      __extends(InjectSaga, _super);\n\n      function InjectSaga(props, context) {\n        var _this = _super.call(this, props, context) || this;\n\n        _this.injectors = getInjectors$1(context.store);\n\n        _this.injectors.injectSaga(key, {\n          saga: saga,\n          mode: mode\n        }, _this.props);\n\n        return _this;\n      }\n\n      InjectSaga.prototype.componentWillUnmount = function () {\n        this.injectors.ejectSaga(key);\n      };\n\n      InjectSaga.prototype.render = function () {\n        return createElement(WrappedComponent, _assign({}, this.props));\n      };\n\n      InjectSaga.WrappedComponent = WrappedComponent;\n      InjectSaga.displayName = \"withSaga(\" + (WrappedComponent.displayName || WrappedComponent.name || 'Component') + \")\";\n      return InjectSaga;\n    }(Component$2);\n\n    return hoistNonReactStatics(InjectSaga, WrappedComponent);\n  }\n\n  return wrap;\n}\n\nvar useInjectSaga = function useInjectSaga(_a) {\n  var key = _a.key,\n      saga = _a.saga,\n      mode = _a.mode;\n  var store = useStore();\n  useEffect(function () {\n    var injectors = getInjectors$1(store);\n    injectors.injectSaga(\"\" + key, {\n      saga: saga,\n      mode: mode\n    });\n    return function () {\n      injectors.ejectSaga(\"\" + key);\n    };\n  }, []);\n};\n\nvar loadable = function loadable(importFunc, _a) {\n  var _b = (_a === void 0 ? {\n    fallback: null\n  } : _a).fallback,\n      fallback = _b === void 0 ? null : _b;\n  var LazyComponent = lazy(importFunc);\n\n  var Component = function Component(props) {\n    return React__default.createElement(Suspense, {\n      fallback: fallback\n    }, React__default.createElement(LazyComponent, _assign({}, props)));\n  };\n\n  return Component;\n};\n\nvar ResponseError =\n/** @class */\nfunction (_super) {\n  __extends(ResponseError, _super);\n\n  function ResponseError(response) {\n    var _this = _super.call(this, response.statusText) || this;\n\n    _this.response = response;\n    return _this;\n  }\n\n  return ResponseError;\n}(Error);\n/**\r\n * Parses the JSON returned by a network request\r\n *\r\n * @param  {object} response A response from a network request\r\n *\r\n * @return {object}          The parsed JSON from the request\r\n */\n\n\nfunction parseJSON(response) {\n  return __awaiter(this, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      if (response.status === 204 || response.status === 205) {\n        return [2\n        /*return*/\n        , null];\n      }\n\n      return [2\n      /*return*/\n      , response.json()];\n    });\n  });\n}\n/**\r\n * Checks if a network request came back fine, and throws an error if not\r\n *\r\n * @param  {object} response   A response from a network request\r\n *\r\n * @return {object|undefined} Returns either the response, or throws an error\r\n */\n\n\nfunction checkStatus(response) {\n  return __awaiter(this, void 0, void 0, function () {\n    var error;\n    return __generator(this, function (_a) {\n      if (response.status >= 200 && response.status < 300) {\n        return [2\n        /*return*/\n        , response];\n      }\n\n      error = new ResponseError(response);\n      error.response = response;\n      throw error;\n    });\n  });\n}\n/**\r\n * Requests a URL, returning a promise\r\n *\r\n * @param  {string} url       The URL we want to request\r\n * @param  {object} [options] The options we want to pass to \"fetch\"\r\n *\r\n * @return {object}           The response data\r\n */\n\n\nfunction request(url, options) {\n  return __awaiter(this, void 0, void 0, function () {\n    var fetchResponse, response;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , fetch(url, options)];\n\n        case 1:\n          fetchResponse = _a.sent();\n          return [4\n          /*yield*/\n          , checkStatus(fetchResponse)];\n\n        case 2:\n          response = _a.sent();\n          return [2\n          /*return*/\n          , parseJSON(response)];\n      }\n    });\n  });\n}\n\nvar index$f =\n/*#__PURE__*/\nObject.freeze({\n  checkStore: checkStore,\n  configureStore: configureStore,\n  constants: constants,\n  history: history,\n  hocWithReducer: hocWithReducer,\n  useInjectReducer: useInjectReducer,\n  hocWithSaga: hocWithSaga,\n  useInjectSaga: useInjectSaga,\n  loadable: loadable,\n  injectReducerFactory: injectReducerFactory,\n  getReducerInjectors: getInjectors,\n  request: request,\n  ResponseError: ResponseError,\n  injectSagaFactory: injectSagaFactory,\n  ejectSagaFactory: ejectSagaFactory,\n  getSagaInjectors: getInjectors$1\n});\nvar theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#3ab77d',\n      contrastText: '#ffffff'\n    },\n    secondary: {\n      main: '#ffffff',\n      contrastText: '#3ab77d'\n    }\n  },\n  typography: {\n    fontFamily: '\"Usual\", \"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n    button: {\n      fontFamily: 'Usual, Roboto, Helvetica, Arial, sans-serif',\n      fontWeight: 700,\n      fontSize: 13,\n      textTransform: 'none'\n    }\n  },\n  overrides: {\n    MuiButton: {\n      containedPrimary: {\n        boxShadow: '0px 3px 6px #1e207129',\n        '&:hover': {\n          backgroundColor: '#008650'\n        }\n      },\n      containedSecondary: {\n        border: '1px solid #0000001A',\n        boxShadow: '0px 1px 3px #00000033',\n        '&:hover': {\n          backgroundColor: '#3ab77d1a'\n        }\n      }\n    }\n  }\n});\n\nvar Component = function Component(props) {\n  var Component = props.Component,\n      store = props.store,\n      componentProps = props.componentProps;\n  return createElement(ThemeProvider, {\n    theme: theme\n  }, createElement(Provider$1, {\n    store: store\n  }, createElement(ConnectedRouter, {\n    history: history\n  }, createElement(HashRouter, {\n    basename: \"/\"\n  }, createElement(Component, _assign({}, componentProps))))));\n};\n\nvar index$g =\n/*#__PURE__*/\nObject.freeze({\n  Component: Component\n});\n/*\r\n *\r\n * MessageProvider constants\r\n *\r\n */\n\nvar ActionTypes;\n\n(function (ActionTypes) {\n  ActionTypes[\"CHANGE_LOCALE\"] = \"hims/MsgProvider/CHANGE_LOCALE\";\n})(ActionTypes || (ActionTypes = {}));\n\nvar ActionTypes$1 = ActionTypes;\nvar DEFAULT_LOCALE = 'en';\n/*\r\n *\r\n * MessageProvider reducer\r\n *\r\n */\n\nvar initialState = {\n  locale: DEFAULT_LOCALE\n};\n\nfunction messageProviderReducer(state, action) {\n  if (state === void 0) {\n    state = initialState;\n  }\n\n  switch (action.type) {\n    case ActionTypes$1.CHANGE_LOCALE:\n      return {\n        locale: action.payload\n      };\n\n    default:\n      return state;\n  }\n}\n/**\r\n * Direct selector to the languageToggle state domain\r\n */\n\n\nvar selectLanguage = function selectLanguage(state) {\n  return state.language || initialState;\n};\n/**\r\n * Select the language locale\r\n */\n\n\nvar makeSelectLocale = function makeSelectLocale() {\n  return createSelector(selectLanguage, function (languageState) {\n    return languageState.locale;\n  });\n};\n\nvar enTranslationMessages = require('Messages/en.json'); // prettier-ignore\n\n\nvar appLocales = ['en'];\n\nvar formatTranslationMessages = function formatTranslationMessages(locale, messages) {\n  var defaultFormattedMessages = locale !== DEFAULT_LOCALE ? formatTranslationMessages(DEFAULT_LOCALE, enTranslationMessages) : {};\n\n  var flattenFormattedMessages = function flattenFormattedMessages(formattedMessages, key) {\n    var _a;\n\n    var formattedMessage = !messages[key] && locale !== DEFAULT_LOCALE ? defaultFormattedMessages[key] : messages[key];\n    return _assign(_assign({}, formattedMessages), (_a = {}, _a[key] = formattedMessage, _a));\n  };\n\n  return Object.keys(messages).reduce(flattenFormattedMessages, {});\n};\n\nvar translationMessages = {\n  en: formatTranslationMessages('en', enTranslationMessages)\n};\n/*\r\n *\r\n * MessageProvider\r\n *\r\n * this component connects the redux state message locale to the\r\n * IntlProvider component and i18n messages (loaded from `src/Translations`)\r\n */\n\nvar stateSelector = createSelector(makeSelectLocale(), function (locale) {\n  return {\n    locale: locale\n  };\n});\n\nvar Provider = function Provider(props) {\n  var locale = useSelector(stateSelector).locale;\n  return React__default.createElement(IntlProvider, {\n    locale: locale,\n    key: locale,\n    messages: props.messages[locale]\n  }, React__default.Children.only(props.children));\n};\n\nvar index$h =\n/*#__PURE__*/\nObject.freeze({\n  Provider: Provider,\n  appLocales: appLocales,\n  formatTranslationMessages: formatTranslationMessages,\n  messageProviderReducer: messageProviderReducer\n});\nvar scope = 'boilerplate.containers.NotFoundPage';\nvar messages = defineMessages({\n  header: {\n    id: scope + \".header\",\n    defaultMessage: 'Page not found.'\n  }\n});\n/**\r\n * NotFoundPage\r\n *\r\n * This is the page shown when the user visits a url that doesn't have a route\r\n */\n\nvar Component$1 = function Component$1() {\n  return createElement(\"article\", null, createElement(\"h1\", null, createElement(FormattedMessage, _assign({}, messages.header))));\n};\n\nvar index$i =\n/*#__PURE__*/\nObject.freeze({\n  Document: index$g,\n  Message: index$h,\n  NotFoundPage: Component$1\n});\nvar index$j =\n/*#__PURE__*/\nObject.freeze({});\nexport { index$e as Components, index$i as Containers, index$j as Pages, index$f as Utils };","\n\nimport * as React from 'react';\nimport { Link } from '@material-ui/core';\nimport './component-style.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\n\ninterface IProps {\n    icon?: IconProp;\n    label?: string;\n    onClick: () => void;\n}\n\nexport class TextButton extends React.Component<IProps> {\n\n    shouldComponentUpdate(props: IProps, _state: any) {\n        return (\n            (this.props.icon !== props.icon) ||\n            (this.props.label !== props.label)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <Link className='text-button' onClick={() => this.props.onClick()}>\n                {this.props.icon ? <FontAwesomeIcon icon={this.props.icon} /> : null}\n                {this.props.icon ? <span style={{marginLeft: '10px'}}/> : null}\n                {this.props.label}\n            </Link>\n        );\n    }\n}","import * as React from 'react';\nimport { PartialMemberData } from 'Pages/CustomerCarePage/Models';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\n// import { API } from 'Pages/CustomerCarePage/API';\n\ninterface IProps {\n    members: PartialMemberData[];\n    searchText: string;\n    onSelectMember: (cardNo: string) => void;\n}\n\nexport class SearchedMembersList extends React.Component<IProps> {\n\n    // members: PartialMemberData[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        // this.members = [];\n    }\n\n    // componentDidMount() {\n    //     API.get('customer-care/members', \n    //         (response) => {\n    //             console.log(response);\n    //             this.members = response.map(member => {\n    //                 return {\n    //                     cardNo: member.member_card_no,\n    //                     firstName: member.first_name,\n    //                     middleName: member.middle_name,\n    //                     lastName: member.last_name,\n    //                     clientName: member.client.registered_name\n    //                 }\n    //             });\n    //             console.log(this.members);\n    //         },\n    //         (error) => {\n    //             console.log(error);\n    //         });\n    // }\n\n    getExtractedMembers = (filter: string) => {\n        return (filter.trim().length > 0 ? (\n            this.props.members\n                .filter(member => member.cardNo)\n                .filter(member => member.cardNo.includes(filter))\n                // .filter((_member, index) => index < 3)\n        ) : []);\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='mini-ticket-modals'>\n                {this.getExtractedMembers(this.props.searchText).map(member => {\n                    return (\n                        <>\n                        {this.renderMemberShortDetail(member)}\n                        <div className='line-border' />\n                        </>\n                    );\n                })}\n            </div>\n        );\n    }\n\n    renderMemberShortDetail(member: PartialMemberData): JSX.Element {\n        const name = \n            member.firstName + ' ' + \n            GlobalFunction.getIntials(member.middleName) + ' ' +\n            member.lastName;\n\n        return (\n            <div \n                className='small-section mini-ticket-modal'\n                onClick={() => this.props.onSelectMember(member.cardNo)}>\n                <div className='text' />\n                <div className='text'>\n                    <div className='circle' style={{backgroundColor: '#3AB77D'}} />\n                    <div style={{display: 'inline-block'}}>\n                        <div className='header-2'>{member.cardNo}</div>\n                    </div>\n\n                </div>\n                \n                <div className='text'>{name}</div>\n                <div className='text'>{member.clientName}</div>\n                <div className='text'>{'---'}</div>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\nimport { CircularProgress } from \"@material-ui/core\";\n\ninterface IProps {\n    height?: string;\n    color?: string;\n    size?: number;\n}\n\nexport class Loading extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        return (\n            <div \n                style={{\n                    textAlign: 'center', \n                    paddingTop: this.props.height ? this.props.height : undefined}}>\n                <CircularProgress \n                    size={this.props.size}\n                    style={{\n                        color: this.props.color ? this.props.color : undefined}} />\n            </div>\n            \n        );\n    }\n}","import * as React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport Link from '@material-ui/core/Link';\n\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { GlobalFunction } from './GlobalFunction';\nimport { MemberData, TicketData, PartialMemberData, SimpleTicketData } from 'Pages/CustomerCarePage/Models';\nimport { TextButton } from './Components/TextButton';\nimport { SearchedMembersList } from './CreateTicketPage/Components/SearchedMembersList';\nimport { API } from './API';\nimport { TableRow, TableCell } from '@material-ui/core';\nimport { Loading } from './Components/Loading';\n\ninterface IProps {\n    member?: MemberData;\n    ticket?: TicketData;\n    ticketStatus: 'Create' | 'Update' | 'Resolve';\n    onUpdateMemberStateChange: (member?: MemberData) => void;\n\n    promptChooseMember?: boolean;\n}\n\ninterface IStates {\n    searchText: string;\n    isMembersLoaded: boolean;\n    recentTickets?: SimpleTicketData[];\n    loadingMembers: boolean;\n    loadingMember: boolean;\n}\n\nexport class MemberDataSection extends React.Component<IProps, IStates> {\n\n    members: PartialMemberData[];\n    \n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            searchText: '',\n            isMembersLoaded: false,\n            loadingMembers: false,\n            loadingMember: false\n        };\n\n        this.members = [];\n    }\n\n    getMemberData = (cardNo: string) => {\n        API.get('customer-care/members/' + cardNo, \n            (response) => {\n                console.log(response);\n                const member = {\n                    cardNo: response.member_card_no,\n                    firstName: response.first_name,\n                    middleName: response.middle_name,\n                    lastName: response.last_name,\n                    clientName: response.client.registered_name,\n                    birthDate: new Date(response.date_of_birth),\n                    gender: response.gender,\n                    civilStatus: response.civil_status\n                };\n                this.props.onUpdateMemberStateChange(member);\n                console.log(this.members);\n\n                /* Get member's benefits */\n                API.get('customer-care/members/' + cardNo + '/benefits',\n                    (response) => {\n                        console.log(response);\n                    },\n                    (error) => {\n                        console.log(error);\n                    });\n\n                /* Get Recent Tickets */\n                this.getRecentTicketsData(cardNo);\n                this.setState({loadingMember: false});\n                \n            },\n            (error) => {\n                console.log(error);\n            });\n    }\n\n    getRecentTicketsData = (cardNo: string) => {\n        API.get('customer-care/tickets',\n            (response) => {\n                console.log(response);\n                this.setState({recentTickets: response\n                    .filter(ticket => ticket.member_id === cardNo)\n                    .map(ticket => {\n                        return {\n                            ticketNo: ticket.ticket_no,\n                            specificType: ticket.ticket_category.specific_type,\n                            lastUpdate: new Date(ticket.date_updated)\n                        }\n                    })\n                });\n            },\n            (error) => {\n                console.log(error);\n            });\n    }\n\n    sliceMemberID = (text: string) => {\n        const slicedText: string[] = [];\n        slicedText.push(text.slice(0, 2));\n        slicedText.push(text.slice(2, 4));\n        slicedText.push(text.slice(4, 9));\n        slicedText.push(text.slice(9, 14));\n        slicedText.push(text.slice(14));\n        return slicedText.filter(text => text !== '');\n    }\n\n\n\n\n\n\n\n\n    render(): JSX.Element {\n        return (\n            <div className='member-info'>\n                {this.props.ticketStatus === 'Create' ? (\n                    <div>\n                        {this.renderSearchArea()}\n                        <div className='line-border' />\n                    </div>\n                ) : this.props.ticketStatus === 'Update' ||\n                    this.props.ticketStatus === 'Resolve' ? (\n                    this.renderTopArea()\n                ) : (null)}\n                {this.props.member ? (\n                    this.renderMemberInfo(this.props.member)\n                ) : (\n                    <>\n                    {this.state.loadingMember ? (\n                        <Loading height='4rem' />\n                    ) : (null)}\n                    {this.props.promptChooseMember ? (\n                        <div className='section' style={{color: '#E53935'}}>\n                            Choose a member/client first before submitting the ticket.\n                        </div> \n                    ) : (null)}\n                    </>\n                )}\n                    \n                {this.props.ticket ? (\n                    this.renderTicketData(this.props.ticket)\n                ) : (null)}\n                <div className='section' />\n            </div>\n        );\n    }\n\n\n\n    renderSearchArea(): JSX.Element {\n        return (\n            <div className='section'>\n                <Breadcrumbs className='bread-crumbs'>\n                    <Link href='#/customer-care'>TICKETS</Link>\n                    <div className='current-text'>CREATE A TICKET</div>\n                </Breadcrumbs>\n\n                <div className='header-1'>Create Ticket</div>\n\n                <div style={{position: 'relative'}}>\n                    <InputField \n                        placeholder='Search Member/Client ID'\n                        value={this.state.searchText}\n                        onChange={(value: string) => {\n                            const trimmedValue = value.replace(/-/g, '');\n                            const splitValue = this.sliceMemberID(trimmedValue);\n                            const newValue = splitValue ? splitValue.join('-') : '';\n                            this.setState({searchText: newValue});\n\n                            if (trimmedValue.length >= 13) {\n                                this.setState({loadingMembers: true});\n                                API.get(`customer-care/members?` +\n                                    `filter[where][member_card_no][like]=${newValue}&` +\n                                    `filter[where][member_status][inq]=Active&` +\n                                    `filter[where][member_status][inq]=Cancelled&` +\n                                    `filter[where][member_status][inq]=Expired&` + \n                                    `filter[where][member_status][inq]=Suspended&` + \n                                    `filter[where][member_status][inq]=Terminated`,\n                                    (response) => {\n                                        console.log(response);\n                                        this.members = response.map(member => {\n                                            return {\n                                                cardNo: member.member_card_no,\n                                                firstName: member.first_name,\n                                                middleName: member.middle_name,\n                                                lastName: member.last_name,\n                                                clientName: member.client.registered_name\n                                            }\n                                        });\n                                        this.setState({\n                                            isMembersLoaded: true,\n                                            loadingMembers: false\n                                        });\n                                    },\n                                    (error) => {\n                                        console.log(error);\n                                        this.setState({\n                                            isMembersLoaded: true,\n                                            loadingMembers: false\n                                        });\n                                    });\n                            }\n                        }} />\n\n                    {this.state.loadingMembers ? (\n                        <div style={{position: 'absolute', right: '8px', bottom: '13px'}}>\n                            <Loading height='none' size={16}/>\n                        </div>\n                    ) : null}\n                </div>\n\n                <SearchedMembersList \n                    searchText={this.state.searchText}\n                    members={this.members}\n                    onSelectMember={(cardNo: string) => {\n                        this.getMemberData(cardNo);\n                        this.props.onUpdateMemberStateChange(undefined);\n                        this.setState({\n                            searchText: '',\n                            loadingMember: true,\n                            recentTickets: []\n                        });\n                    }} />\n\n                <TextButton \n                    icon={faSearch}\n                    label='Advance Search'\n                    onClick={() => {\n\n                    }}\n                    />\n            </div>\n        );\n    }\n\n    renderTopArea(): JSX.Element {\n        return (\n            <div className='section'>\n                <Breadcrumbs className='bread-crumbs'>\n                    <Link href='#/customer-care'>TICKETS</Link>\n                    <Link className='current-text'>{this.props.ticketStatus.toUpperCase() + ' TICKET'}</Link>\n                </Breadcrumbs>\n\n                {this.props.ticket ? (\n                    <span className='header-1'>\n                        {`${this.props.ticketStatus} Ticket ${this.props.ticket.ticketNo}`}\n                    </span>\n                ) : null}\n                \n\n            </div>\n        );\n    }\n\n    renderMemberInfo(member: MemberData): JSX.Element {\n        if (!this.state.recentTickets) {\n            this.getRecentTicketsData(member.cardNo);\n        }\n\n        const name =\n            member.firstName + ' ' + \n            GlobalFunction.getIntials(member.middleName) + ' ' +\n            member.lastName + ' '\n        const birthDate = GlobalFunction.toShortDateString(new Date(member.birthDate));\n        const age = GlobalFunction.getAge(new Date(member.birthDate));\n        return (\n            <div className='section'>\n                <div className='circle' style={{backgroundColor: '#3AB77D'}} />\n                <div style={{display: 'inline-block'}}>\n                    <div className='header-2'>{member.cardNo}</div>\n                </div>\n                <div className='text'>{name}</div>\n                <div className='text'>{member.clientName}</div>\n                <div className='text'>{'---'}</div>\n                <Grid container>\n                    {/* <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>{\"R&B\"}</div>\n                        <div className='small-text'>{\"---\"}</div>\n                    </Grid>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>{\"R&B Limit\"}</div>\n                        <div className='small-text'>{\"---\"}</div>\n                    </Grid>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>MBL LIMIT</div>\n                        <div className='small-text'>{\"---\"}</div>\n                    </Grid>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>PEC LIMIT</div>\n                        <div className='small-text'>{\"---\"}</div>\n                    </Grid> */}\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>BIRTHDATE (AGE)</div>\n                        <div className='small-text'>{birthDate + \" (\" + age + \")\"}</div>\n                    </Grid>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>GENDER / STATUS</div>\n                        <div className='small-text'>{member.gender + \" / \" + member.civilStatus}</div>\n                    </Grid>\n                </Grid>\n                <div>\n                    {this.state.recentTickets && this.state.recentTickets.length > 0 ? (\n                        <>\n                        <div className='header-2'>OPEN/PENDING TICKETS</div>\n                        <CustomTable\n                            paginationClass='custom-pagination-small'\n                            className='custom-table-small'\n                            labelRowsPerPage='Rows:'\n                            rows={this.state.recentTickets}\n                            rowsPerPageOptions={[5, 10, 25]}\n                            renderHeader={() => this.renderTableHeader()}\n                            renderRow={(rowData: SimpleTicketData, index: number) =>\n                                this.renderTableRow(rowData, index)} />\n                        </>\n                    ) : null}\n                </div>\n            </div>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n        return (\n            <>\n            <TableCell style={{minWidth: '70px', fontSize: '10px'}}>Ticket ID</TableCell>\n            <TableCell style={{fontSize: '10px'}}>Type</TableCell>\n            <TableCell style={{minWidth: '90px', fontSize: '10px'}}>Last Update</TableCell>\n            </>\n        );\n    }\n\n    renderTableRow(recentTicket: SimpleTicketData, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n        return (\n            <TableRow style={{backgroundColor: backgroundColor, fontSize: '10px'}}>\n                <TableCell>{recentTicket.ticketNo}</TableCell>\n                <TableCell>{recentTicket.specificType}</TableCell>\n                <TableCell>{GlobalFunction.toShortDateString(recentTicket.lastUpdate)}</TableCell>\n            </TableRow>\n        );\n    }\n\n    renderTicketData(ticket: TicketData): JSX.Element {\n        return (\n            <div className='section'>\n                <div className='sub-section'>\n                    <div className='light-text'>TICKET TYPE</div>\n                    <div className='small-text'>{ticket.ticketType}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>SPECIFIC TYPE</div>\n                    <div className='small-text'>{ticket.specificType}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>URGENCY</div>\n                    <div className='small-text'>{ticket.urgency}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>ASSIGNED TO</div>\n                    <div className='small-text'>{ticket.agent.name}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>RECEIVED VIA</div>\n                    <div className='small-text'>{ticket.ticketSource}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>RECEIVED FROM</div>\n                    <div className='small-text'>{ticket.callerName}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>NUMBER/EMAIL</div>\n                    <div className='small-text'>{ticket.contactNo}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>CALL TRANSACTION NO.</div>\n                    <div className='small-text'>{ticket.transactionNo}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>CREATED BY</div>\n                    <div className='small-text'>{ticket.createdBy.name}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>DATE AND TIME CREATED</div>\n                    <div className='small-text'>{GlobalFunction.toDateAndTime(ticket.dateCreated)}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>DATE AND TIME LAST UPDATED</div>\n                    <div className='small-text'>{GlobalFunction.toDateAndTime(ticket.dateUpdated)}</div>\n                </div>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\nimport Select from 'react-select';\nimport { DropdownChoice } from '../Models';\nimport { Option } from 'react-select/src/filters';\n\ninterface IProps {\n    placeholder?: string;\n    disabled?: boolean;\n    value: DropdownChoice;\n    choices: DropdownChoice[];\n    error?: boolean;\n    onChange: (value: DropdownChoice) => void;\n}\n\ninterface IStates {\n    value: string;\n}\n\nexport class Dropdown extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            value: ''\n        }\n    }\n\n    shouldComponentUpdate(props: IProps, _state: any) {\n        return (\n            (this.props.placeholder !== props.placeholder) ||\n            (this.props.disabled !== props.disabled) ||\n            (this.props.value !== props.value) ||\n            (this.props.choices !== props.choices) ||\n            (this.props.error !== props.error)\n        );\n    }\n\n    render(): JSX.Element {\n\n        return (\n            <div className='dropdown'>\n                {this.props.placeholder ? (\n                    <div className={this.props.disabled ? 'text-disabled text' : 'text'}>\n                        {this.props.placeholder}\n                    </div>\n                ) : null}\n                \n                <Select\n                    className='actual-dropdown'\n                    classNamePrefix={this.props.error ? 'actual-dropdown-error' : 'actual-dropdown'}\n                    isDisabled={this.props.disabled ? this.props.disabled : false}\n                    value={this.props.value}\n                    options={this.props.choices} \n                    onInputChange={(value: string, _a) => {\n                        this.setState({value: value});\n                    }}\n                    noOptionsMessage={() => {\n                        return (\n                            this.props.choices.length === 0 ? (\n                                'Loading...'\n                            ) : (\n                                this.state.value.length < 3 ? (\n                                    'Enter at least 3 characters to search'\n                                ) : (\n                                    'No options'\n                                )\n                            )\n                        )\n                    }}\n                    filterOption={(option: Option, rawInput: string) => {\n                        const hasNoInput = (rawInput.length === 0);\n                        const choicesAreShort = (this.props.choices.length <= 20);\n                        const inputIsShort = (rawInput.length < 3);\n                        const isInputMatch = (option.label.toLowerCase().includes(rawInput.toLowerCase()));\n                        if (choicesAreShort) {\n                            if (hasNoInput) {\n                                return true;\n                            }\n                            return isInputMatch;\n                        } else {\n                            if (!inputIsShort) {\n                                return isInputMatch;\n                            }\n                            return false;\n                        }\n                    }}\n                    onChange={(choice: DropdownChoice) => {\n                        this.props.onChange(choice);\n                    }} />\n                    \n            </div>\n        );\n    }\n}","import * as React from 'react';\n// import { Select, MenuItem } from '@material-ui/core';\nimport Select from 'react-select';\nimport './component-style.scss';\nimport { DropdownChoice } from '../Models';\nimport { Option } from 'react-select/src/filters';\n\ninterface IProps {\n    placeholder?: string;\n    disabled?: boolean;\n    detail?: string;\n    value: DropdownChoice;\n    choices: DropdownChoice[];\n    error?: boolean;\n    onChange: (value: DropdownChoice) => void;\n}\n\ninterface IStates {\n    value: string;\n}\n\nexport class DetailedDropdown extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            value: ''\n        }\n    }\n\n    shouldComponentUpdate(props: IProps, _state: IStates) {\n        return (\n            this.props.choices.length !== props.choices.length ||\n            this.props.value.value !== props.value.value\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='detailed-dropdown'>\n                {this.props.placeholder ? (\n                    <div className='text'>{this.props.placeholder}</div>\n                ) : null}\n                \n                <div className='autocomplete'>\n                    <div className={this.props.error ? 'detail-error' : 'detail'}>\n                        {this.props.detail ? this.props.detail : this.props.value.value ? this.props.value.value : null}\n                    </div>\n                    <Select\n                        className='actual-dropdown'\n                        classNamePrefix={this.props.error ? 'actual-dropdown-error' : 'actual-dropdown'}\n                        isDisabled={this.props.disabled ? this.props.disabled : false}\n                        value={this.props.value}\n                        options={this.props.choices} \n                        onInputChange={(value: string, _a) => {\n                            this.setState({value: value});\n                        }}\n                        noOptionsMessage={() => {\n                            return (\n                                this.props.choices.length === 0 ? (\n                                    'Loading...'\n                                ) : (\n                                    this.state.value.length < 3 ? (\n                                        'Enter at least 3 characters to search'\n                                    ) : (\n                                        'No options'\n                                    )\n                                )\n                            )\n                        }}\n                        filterOption={(option: Option, rawInput: string) => {\n                            const hasNoInput = (rawInput.length === 0);\n                            const choicesAreShort = (this.props.choices.length <= 20);\n                            const inputIsShort = (rawInput.length < 3);\n                            const isInputMatch = (option.label.toLowerCase().includes(rawInput.toLowerCase()));\n                            if (choicesAreShort) {\n                                if (hasNoInput) {\n                                    return true;\n                                }\n                                return isInputMatch;\n                            } else {\n                                if (!inputIsShort) {\n                                    return isInputMatch;\n                                }\n                            }\n                            return false;                            \n                        }}\n                        onChange={(choice: DropdownChoice) => {\n                            this.props.onChange(choice);\n                        }} />\n                </div>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\nimport { GlobalFunction } from '../GlobalFunction';\n\ninterface IProps {\n    placeholder?: string;\n    value: number;\n    detail: string;\n    onChange: (value: number) => void;\n\n    isFloat?: boolean;\n}\n\ninterface IStates {\n    isEditing: boolean;\n}\n\nexport class DetailedNumberField extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            isEditing: false\n        }\n    }\n\n    shouldComponentUpdate(props: IProps, state: IStates) {\n        return (\n            (this.props.placeholder !== props.placeholder) ||\n            (this.props.value !== props.value) ||\n            (this.props.detail !== props.detail) ||\n            (this.state.isEditing !== state.isEditing)\n        );\n    }\n\n    render(): JSX.Element {\n        \n        return (\n            <div className='detailed-input-field'>\n                {this.props.placeholder ? (\n                    <div className='text'>{this.props.placeholder}</div>\n                ) : null}\n                <div className='input-field'>\n                    {this.state.isEditing ? (\n                        <input \n                            className='text-field'\n                            type='number'\n                            value={this.props.value ? this.props.value : NaN}\n                            onBlur={() => this.setState({isEditing: !this.state.isEditing})}\n                            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                                const value = this.props.isFloat ? \n                                    (parseFloat(event.target.value)) : \n                                    (parseInt(event.target.value));\n                                this.props.onChange(value);\n                            }} />\n                    ) : (\n                        <input \n                            className='text-field'\n                            readOnly\n                            value={\n                                this.props.value && this.props.value !== 0 ? \n                                    GlobalFunction.formatNumber(this.props.value) \n                                : ''}\n                            onFocus={() => this.setState({isEditing: !this.state.isEditing})} />\n                    )}\n                    <div className='detail'>{this.props.detail}</div>\n                </div>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\nimport MomentUtils from '@date-io/moment';\nimport { KeyboardDatePicker, MuiPickersUtilsProvider, MaterialUiPickersDate } from '@material-ui/pickers';\n\ninterface IProps {\n    placeholder?: string;\n    value: Date | null;\n    minDate?: Date;\n    onChange: (value: Date | null) => void;\n}\n\nexport class DatePicker extends React.Component<IProps> {\n\n    shouldComponentUpdate(props: IProps, _state: any) {\n        return (\n            (this.props.placeholder !== props.placeholder) ||\n            (this.props.value !== props.value)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='date-picker'>\n                {this.props.placeholder ? (\n                    <div className='text'>{this.props.placeholder}</div>\n                ) : null}\n                <MuiPickersUtilsProvider utils={MomentUtils}>\n                    <KeyboardDatePicker\n                        className='text-field'\n                        variant='dialog'\n                        format='MM/DD/YYYY'\n                        minDate={this.props.minDate ? this.props.minDate : new Date(1900, 1, 1)}\n                        value={this.props.value}\n                        onChange={(date: MaterialUiPickersDate | null) => {\n                            this.props.onChange(date ? date.toDate() : null);\n                        }} />\n                </MuiPickersUtilsProvider>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { DetailedDropdown } from 'Pages/CustomerCarePage/Components/DetailedDropdown';\nimport { DetailedNumberField } from 'Pages/CustomerCarePage/Components/DetailedNumberField';\nimport { DatePicker } from 'Pages/CustomerCarePage/Components/DatePicker';\nimport { DropdownChoice, ConfinementDetails } from 'Pages/CustomerCarePage/Models';\n\n\ninterface IProps {\n    confinement: ConfinementDetails;\n    facilities: DropdownChoice[];\n    doctors: DropdownChoice[];\n    cptCodes: DropdownChoice[];\n    createTicketAttemp: boolean;\n    refreshConfinementState: () => void;\n}\n\nexport class ConfinementSection extends React.Component<IProps> {\n\n    confinementTypes: DropdownChoice[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.confinementTypes = [\n            { value: '1', label: 'Elective / Scheduled' },\n            { value: '2', label: 'ER leading to confinement' }\n        ];\n    }\n\n    render(): JSX.Element {\n        const confinement = this.props.confinement;\n        return (\n            <div className='confinement-details'>\n                <div className='sub-section'>\n                    <div className='header-2'>CONFINEMENT DETAILS</div>\n                    <DetailedDropdown \n                        choices={this.props.facilities}\n                        placeholder='Provider'\n                        value={confinement.provider}\n                        error={\n                            this.props.createTicketAttemp && \n                            confinement.provider.value === ''}\n                        onChange={(value: DropdownChoice) => {\n                            this.props.confinement.provider = value;\n                            this.props.refreshConfinementState();\n                        }} />\n                    <Grid container spacing={1}>\n                        <Grid item xs={6}>\n                            <DatePicker \n                                placeholder='Date Admitted' \n                                value={confinement.dateAdmitted}\n                                onChange={(value: Date) => {\n                                    this.props.confinement.dateAdmitted = value;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Dropdown \n                                placeholder='Kind of Confinement' \n                                choices={this.confinementTypes}\n                                value={{ value: '', label: confinement.confinementKind}}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    confinement.confinementKind === ''}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.confinement.confinementKind = value.label;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={3}>\n                            <InputField \n                                placeholder='Room Type' \n                                value={confinement.roomType}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    confinement.roomType === ''}\n                                onChange={(value: string) => {\n                                    this.props.confinement.roomType = value;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={3}>\n                            <DetailedNumberField \n                                placeholder='Cost Per Day' \n                                value={confinement.costPerDay}\n                                detail={'PHP'}\n                                onChange={(value: number) => {\n                                    this.props.confinement.costPerDay = value;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Dropdown  \n                                placeholder='Admitting Physician' \n                                choices={this.props.doctors}\n                                value={confinement.doctor}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    confinement.doctor.value === ''}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.confinement.doctor = value;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <DetailedDropdown \n                                placeholder='Initial Diagnosis' \n                                choices={this.props.cptCodes}\n                                value={confinement.initialDiagnosis}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    confinement.initialDiagnosis.value === ''}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.confinement.initialDiagnosis = value;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={3}>\n                            <DetailedNumberField \n                                placeholder='Amount' \n                                value={confinement.amount}\n                                detail={'PHP'}\n                                onChange={(value: number) => {\n                                    this.props.confinement.amount = value;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </Grid>\n                    </Grid>\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\nimport { GlobalFunction } from '../GlobalFunction';\n\ninterface IProps {\n    value: number;\n    onChange: (value: number) => void;\n\n    placeholder?: string;\n    error?: boolean;\n    isFloat?: boolean;\n}\n\ninterface IStates {\n    isEditing: boolean;\n}\n\nexport class NumberField extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            isEditing: false\n        }\n    }\n\n    render(): JSX.Element {\n        console.log(this.props.value);\n        const props = this.props;\n        const dynamicStyle = {\n            borderColor: (props.error ? '#E53935' : undefined)\n        };\n\n        return (\n            <div className='input-field-container'>\n                {this.props.placeholder ? (\n                    <div className='text'>{this.props.placeholder}</div>\n                ) : null}\n                {this.state.isEditing ? (\n                    <input \n                        className='text-field'\n                        style={dynamicStyle}\n                        type='number'\n                        value={this.props.value ? this.props.value : NaN}\n                        onBlur={() => this.setState({isEditing: !this.state.isEditing})}\n                        onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                            const value = this.props.isFloat ? \n                                (parseFloat(event.target.value)) : \n                                (parseInt(event.target.value));\n                            this.props.onChange(value);\n                        }} />\n                ) : (\n                    <input \n                        className='text-field'\n                        style={dynamicStyle}\n                        readOnly \n                        value={\n                            this.props.value && this.props.value !== 0 ? \n                                GlobalFunction.formatNumber(this.props.value) \n                            : ''}\n                        onFocus={() => this.setState({isEditing: !this.state.isEditing})} />\n                )}\n                \n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\nimport { Checkbox } from '@material-ui/core';\n\ninterface IProps {\n    placeholder?: string;\n    label?: string;\n    value: boolean;\n    onChange: (value: boolean) => void;\n}\n\nexport class CustomCheckbox extends React.Component<IProps> {\n\n    shouldComponentUpdate(props: IProps, _state: any) {\n        return (\n            (this.props.placeholder !== props.placeholder) ||\n            (this.props.value !== props.value)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='check-box-area'>\n                {this.props.placeholder ? (\n                    <div className='text'>{this.props.placeholder}</div>\n                ) : null}\n                <Checkbox\n                    className='check-box'\n                    checked={this.props.value}\n                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                        this.props.onChange(event.target.checked);\n                    }} />\n                {this.props.label ? (\n                    <span className='text'>{this.props.label}</span>\n                ) : null}\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport {  Grid, TableCell, TableRow } from '@material-ui/core';\nimport { faMinusCircle, faPlus, faPen, faCheckCircle, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport { DetailedDropdown } from 'Pages/CustomerCarePage/Components/DetailedDropdown';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { ProcedureData, DropdownChoice, AvailmentDetails, DiagnosisData } from 'Pages/CustomerCarePage/Models';\nimport { NumberField } from 'Pages/CustomerCarePage/Components/NumberField';\nimport { CustomCheckbox } from 'Pages/CustomerCarePage/Components/CustomCheckbox';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\n\ninterface IProps {\n    availment: AvailmentDetails;\n    facilities: DropdownChoice[];\n    doctors: DropdownChoice[];\n    icd10Codes: DropdownChoice[];\n    cptCodes: DropdownChoice[];\n    createTicketAttemp: boolean;\n    refreshAvailmentState: () => void;\n}\n\ninterface IStates {\n    icd10Code: DropdownChoice;\n    doctor: DropdownChoice;\n\n    itemToEditIndex: number;\n    icd10CodeToEdit: DropdownChoice;\n    doctorToEdit: DropdownChoice;\n}\n\nexport class AvailmentSection extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            icd10Code: { value: '', label: '' },\n            doctor: { value: '', label: '' },\n\n            itemToEditIndex: -1,\n            icd10CodeToEdit: { value: '', label: '' },\n            doctorToEdit: { value: '', label: '' }\n        };\n    }\n\n    shouldComponentUpdate(props: IProps, state: IStates) {\n        return (\n            (this.props.availment !== props.availment) ||\n            //(this.state.icd10Code !== state.icd10Code) ||\n            (this.state !== state)\n        );\n    }\n\n    getFilteredICD10(): DropdownChoice[] {\n        let filteredICD10: DropdownChoice[] = [];\n        for (var i = 0; i < this.props.icd10Codes.length; i++) {\n            let isSame = false;\n            for (var j = 0; j < this.props.availment.diagnoses.length; j++) {\n                isSame = (\n                    this.props.availment.diagnoses[j].icd10Code.value === \n                    this.props.icd10Codes[i].value ? true : isSame);\n            }\n            if (!isSame) {\n                filteredICD10 = filteredICD10.concat(this.props.icd10Codes[i]);\n            }\n        }\n        return filteredICD10;\n    }\n\n    getProcedureCosts(procedures: ProcedureData[]) {\n        let totalCost = 0;\n        procedures.map(procedure => {\n            totalCost += procedure.amount;\n        });\n        return totalCost;\n    }\n    \n    pushBlankDiagnosis(icd10Code: DropdownChoice, doctor: DropdownChoice) {\n        this.props.availment.diagnoses.push({\n            icd10Code: icd10Code,\n            remarks: '',\n            isPrimary: false,\n            isFinal: false,\n            doctors: [{\n                id: '',\n                name: doctor.label,\n                specialization: '',\n                type: 'Admitting',\n                fee: 0,\n                noOfVisits: 0,\n                remarks: ''\n            }],\n            procedures: [{\n                cptCode: { value: '', label: '' },\n                isPHIC: false,\n                amount: 0,\n                notes: '',\n                assessmentType: 'Pending',\n                assessmentRemarks: '',\n                doctor: '',\n                dateAdded: new Date()\n            }],\n            assessmentType: 'Pending',\n            assessmentRemarks: ''\n        });\n    }\n\n    pushBlankProcedures(diagnosisIndex: number) {\n        this.props.availment.diagnoses[diagnosisIndex].procedures.push({\n            cptCode: { value: '', label: '' },\n            isPHIC: false,\n            amount: 0,\n            notes: '',\n            assessmentType: 'Pending',\n            assessmentRemarks: '',\n            doctor: '',\n            dateAdded: new Date()\n        });\n    }\n\n    render(): JSX.Element {\n        console.log(\"UPDATING\");\n        return (\n            <div className='availment-section'>\n                <div className='sub-section'>\n                    <div className='header-2'>AVAILMENT DETAILS</div>\n                    <DetailedDropdown \n                        choices={this.props.facilities}\n                        placeholder='Provider'\n                        value={this.props.availment.provider}\n                        error={\n                            this.props.createTicketAttemp && \n                            this.props.availment.provider.value === ''}\n                        onChange={(value: DropdownChoice) => {\n                            this.props.availment.provider = value;\n                            this.props.refreshAvailmentState();\n                        }} />\n                </div>\n                <div className='sub-section'>\n                    <div className='header-3'>LIST OF AVAILMENTS</div>\n                    <div className='text'>\n                        Add a diagnosis first then add procedures per diagnosis after\n                    </div>\n                    <div className='sub-section'>\n                        <CustomTable\n                            rows={this.props.availment.diagnoses}\n                            renderHeader={() => this.renderTableHeader()}\n                            renderRow={(rowData: any, index: number) => \n                                this.renderTableRow(rowData, index)} />\n                    </div>\n                    {this.props.createTicketAttemp && this.props.availment.diagnoses.length === 0 ? (\n                        <div className='sub-section' style={{color: '#E53935'}}>\n                            No diagnosis. Need atleast one diagnosis.\n                        </div> \n                    ) : (null)}\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n        return (\n            <>\n            <TableCell style={{minWidth: '300px', maxWidth: '300px'}}>\n                <DetailedDropdown \n                    choices={this.getFilteredICD10()}\n                    value={this.state.icd10Code}\n                    onChange={(value: DropdownChoice) => {\n                        this.setState({icd10Code: value});\n                    }} />\n            </TableCell>\n            <TableCell style={{minWidth: '150px', maxWidth: '150px'}}>\n                <Dropdown \n                    choices={this.props.doctors}\n                    value={this.state.doctor}\n                    onChange={(value: DropdownChoice) => {\n                        this.setState({doctor: value});\n                    }} />\n            </TableCell>\n            <TableCell style={{textAlign: 'center'}}>\n                <TextButton \n                    icon={faPlus} \n                    label=\"Add diagnosis\"\n                    onClick={() => {\n                        if (this.state.doctor.value !== '' && this.state.icd10Code.value !== '') {\n                            this.pushBlankDiagnosis(this.state.icd10Code, this.state.doctor);\n                            this.props.refreshAvailmentState();\n                            this.setState({\n                                icd10Code: { value: '', label: '' },\n                                doctor: { value: '', label: '' }\n                            });\n                        }\n                    }} />\n            </TableCell>\n            </>\n        );\n    }\n\n    renderTableRow(diagnosis: DiagnosisData, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n        const editIcon = { display: 'inline-block', paddingRight: '0.5rem' };\n        const deleteIcon = { display: 'inline-block' };\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                <TableCell colSpan={3}>\n                    <Grid container spacing={1}>\n                        {this.state.itemToEditIndex === index ? (\n                            <>\n                            <Grid item xs={6}>\n                                <DetailedDropdown \n                                    choices={this.getFilteredICD10()}\n                                    value={this.state.icd10CodeToEdit}\n                                    onChange={(value: DropdownChoice) => {\n                                        this.setState({icd10CodeToEdit: value});\n                                    }} />\n                            </Grid>\n                            <Grid item xs={5}>\n                                <Dropdown \n                                    choices={this.props.doctors}\n                                    value={this.state.doctorToEdit}\n                                    onChange={(value: DropdownChoice) => {\n                                        this.setState({doctorToEdit: value});\n                                    }} />\n                            </Grid>\n                            <Grid item xs={1} style={{lineHeight: '2rem'}}>\n                                <div style={editIcon}>\n                                    <IconButton\n                                        icon={faCheckCircle}\n                                        onClick={() => {\n                                            this.props.availment.diagnoses[index].icd10Code = this.state.icd10CodeToEdit;\n                                            this.props.availment.diagnoses[index].doctors[0].name = this.state.doctorToEdit.label;\n                                            this.props.refreshAvailmentState();\n                                            this.setState({itemToEditIndex: -1});\n                                        }}/>\n                                </div>\n                                <div style={deleteIcon}>\n                                    <IconButton\n                                        icon={faTimesCircle}\n                                        onClick={() => {\n                                            this.setState({itemToEditIndex: -1});\n                                        }}/>\n                                </div>\n                            </Grid>\n                            </>\n                        ) : (\n                            <>\n                            <Grid item xs={6} className='header-2'>\n                                {diagnosis.icd10Code.value + ' - ' + diagnosis.icd10Code.label}\n                            </Grid>\n                            <Grid item xs={3} className='header-2'>\n                                {diagnosis.doctors[0].name}\n                            </Grid>\n                            <Grid item xs={2} className='header-2'>\n                                {GlobalFunction.formatNumber(this.getProcedureCosts(diagnosis.procedures), true) + \" PHP\"}\n                            </Grid>\n                            <Grid item xs={1}>\n                                {/* <div style={editIcon}> */}\n                                    <IconButton\n                                        icon={faPen}\n                                        onClick={() => {\n                                            this.setState({\n                                                itemToEditIndex: index,\n                                                icd10CodeToEdit: diagnosis.icd10Code,\n                                                doctorToEdit: {\n                                                    value: diagnosis.doctors[0].id,\n                                                    label: diagnosis.doctors[0].name\n                                                }\n                                            });\n                                        }}/>\n                                {/* </div>\n                                <div style={deleteIcon}> */}\n                                    <IconButton\n                                        icon={faMinusCircle}\n                                        onClick={() => {\n                                            this.props.availment.diagnoses.splice(index, 1);\n                                            this.props.refreshAvailmentState();\n                                        }}/>\n                                {/* </div> */}\n                            </Grid>\n                            </>\n                        )}\n                    </Grid>\n                    {diagnosis.procedures.map((procedure, procedureIndex) => {\n                        return this.renderProcedureDetails(procedure, index, procedureIndex);\n                    })}\n                </TableCell>\n            </TableRow>\n        );\n    }\n    \n    renderProcedureDetails(procedure: ProcedureData, diagnosisIndex: number, index: number): JSX.Element {\n        const stateProcedure = this.props.availment.diagnoses[diagnosisIndex].procedures[index];\n        const stateProcedures = this.props.availment.diagnoses[diagnosisIndex].procedures;\n        return (\n            <div style={{position: 'relative'}}>\n                <div style={{paddingTop: '0.5rem'}} />\n                <div className='line-border' />\n                <div style={{paddingTop: '0.5rem'}} />\n                <Grid container spacing={2}>\n                    <Grid item xs={8}>\n                        <DetailedDropdown \n                            placeholder='Procedure'\n                            choices={this.props.cptCodes}\n                            value={procedure.cptCode}\n                            onChange={(value: DropdownChoice) => {\n                                stateProcedure.cptCode = value;\n                                if (index === (stateProcedures.length - 1)) {\n                                    this.pushBlankProcedures(diagnosisIndex);\n                                }\n                                this.props.refreshAvailmentState();\n                            }} />\n                    </Grid>\n                    <Grid item xs={3}>\n                        <NumberField\n                            placeholder='Amount'\n                            value={procedure.amount}\n                            onChange={(value: number) => {\n                                stateProcedure.amount = value;\n                                this.props.refreshAvailmentState();\n                            }} />\n                    </Grid>\n                    <Grid item xs={1}>\n                        <CustomCheckbox\n                            placeholder='PHIC'\n                            value={procedure.isPHIC}\n                            onChange={(value: boolean) => {\n                                stateProcedure.isPHIC = value;\n                                this.props.refreshAvailmentState();\n                            }} />\n                    </Grid>\n                </Grid>\n                <div style={{position: 'absolute'}}>\n                    <TextButton \n                        label='Add procedure'\n                        icon={faPlus}\n                        onClick={() => {\n                            this.pushBlankProcedures(diagnosisIndex);\n                            this.props.refreshAvailmentState();\n                        }}/>\n                </div>\n                <div style={{paddingTop: '1rem'}} />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport Dropzone from 'react-dropzone';\nimport './component-style.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFileUpload } from '@fortawesome/free-solid-svg-icons';\n\ninterface IProps {\n    placeholder?: string;\n    onDrop: (files: File[]) => void;\n}\n\nexport class CustomDropzone extends React.Component<IProps> {\n\n    shouldComponentUpdate(props: IProps, _state: any) {\n        return (this.props.placeholder !== props.placeholder);\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='custom-uploader'>\n                {this.props.placeholder ? (\n                    <div className='text'>{this.props.placeholder}</div>\n                ) : (null)}\n                <div className='upload-box'>\n                    <Dropzone\n                        multiple={false}\n                        onDrop={acceptedFiles => this.props.onDrop(acceptedFiles)}\n                        // accept=\"application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n                        >\n                        {({getRootProps, getInputProps}) => (\n                            <section>\n                                <div className='upload-file' {...getRootProps()}>\n                                    <input {...getInputProps()} />\n                                    <FontAwesomeIcon className='fa-1.5x' icon={faFileUpload} />\n                                    <div>Drag or drop file to upload a <br />supporting document</div>\n                                </div>\n                            </section>\n                        )}\n                    </Dropzone>\n                </div>\n                \n\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { TextareaAutosize } from '@material-ui/core';\nimport './component-style.scss';\n\ninterface IProps {\n    placeholder?: string;\n    value: string;\n    defaultRows?: number;\n    onChange: (value: string) => void;\n}\n\nexport class InputArea extends React.Component<IProps> {\n\n    shouldComponentUpdate(props: IProps, _state: any) {\n        return (\n            (this.props.placeholder !== props.placeholder) ||\n            (this.props.value !== props.value) ||\n            (this.props.defaultRows !== props.defaultRows)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='input-field-container'>\n                {this.props.placeholder ? (\n                    <div className='text'>{this.props.placeholder}</div>\n                ) : null}\n                <TextareaAutosize \n                    className='text-field'\n                    rows={this.props.defaultRows ? this.props.defaultRows : 4}\n                    value={this.props.value}\n                    onChange={(event: React.ChangeEvent<HTMLTextAreaElement>) => {\n                        this.props.onChange(event.target.value);\n                    }}\n                />\n            </div>\n        );\n    }\n}","\nimport * as React from 'react';\nimport './component-style.scss';\nimport { Chip } from '@material-ui/core';\n\ninterface IProps {\n    label: string;\n    value: string;\n    onDelete: (value: string) => void;\n}\n\nexport class CustomChip extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        return (\n            <Chip \n                className='chip'\n                label={this.props.label} \n                onDelete={() => {this.props.onDelete(this.props.value)}} />\n        );\n    }\n}","import * as React from 'react';\nimport {  Grid } from '@material-ui/core';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { TicketData, DropdownChoice } from 'Pages/CustomerCarePage/Models';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { CustomDropzone } from 'Pages/CustomerCarePage/Components/CustomDropzone';\nimport { InputArea } from 'Pages/CustomerCarePage/Components/InputArea';\nimport { CustomChip } from 'Pages/CustomerCarePage/Components/CustomChip';\n\ninterface IProps {\n    ticket: TicketData;\n    facilities: DropdownChoice[];\n    agents: DropdownChoice[];\n    createTicketAttemp: boolean;\n    refreshTicketState: () => void;\n}\nexport class TicketInfoSection extends React.Component<IProps> {\n\n    ticketChannels: DropdownChoice[];\n    ticketSources: DropdownChoice[];\n    ticketTypes: DropdownChoice[];\n    specificTypes: DropdownChoice[];\n    urgencies: DropdownChoice[];\n    agents: DropdownChoice[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.ticketChannels = [\n            { value: '1', label: 'Call' },\n            { value: '2', label: 'SMS' },\n            { value: '3', label: 'Text' },\n            { value: '4', label: 'Email' }\n        ];\n\n        this.ticketSources = [\n            { value: '1', label: 'Member' },\n            { value: '2', label: 'Corporate Client' },\n            { value: '3', label: 'Broker' },\n            { value: '4', label: 'Agent' },\n            { value: '5', label: 'Clinic/Hospital' }\n        ];\n\n        this.ticketTypes = [\n            { value: '1', label: 'Availment' },\n            { value: '2', label: 'Inquiry' }\n        ];\n\n        this.specificTypes = [\n            { value: '1', label: 'Outpatient Procedure' },\n            { value: '2', label: 'Inpatient' },\n            { value: '3', label: 'Emergency Room' },\n            { value: '4', label: 'Consultation' }\n        ];\n\n        this.urgencies = [\n            { value: '1', label: 'Low' },\n            { value: '2', label: 'Medium' },\n            { value: '3', label: 'High' }\n        ];\n\n        this.agents = [\n            { value: '1', label: 'Me' }\n        ]\n    }\n\n    shouldComponentUpdate(props: IProps, _state: any) {\n        return (\n            (this.props.ticket !== props.ticket)\n        );\n    }\n\n    render(): JSX.Element {\n        console.log(\"TICK INFO\");\n        const ticket = this.props.ticket;\n\n        return (\n            <div className='ticket-info'>\n                <div className='sub-section'>\n                    <div className='header-2'>TICKET INFORMATION</div>\n                    <Grid container spacing={1}>\n                        <Grid item xs={5}>\n                            <Dropdown \n                                placeholder='Received via'\n                                choices={this.ticketChannels}\n                                value={{ value: '', label: ticket.ticketChannel }}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    ticket.ticketChannel === ''}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.ticket.ticketChannel = value.label;\n                                    this.props.refreshTicketState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={7}>\n                            <InputField \n                                placeholder='Transaction No.' \n                                value={ticket.transactionNo}\n                                disabled={true}\n                                onChange={(value: string) => {\n                                    this.props.ticket.transactionNo = value;\n                                    this.props.refreshTicketState();\n                                }} />\n                        </Grid>\n                    </Grid>\n                    <Dropdown \n                        placeholder='Received From'\n                        choices={this.ticketSources}\n                        value={{ value: '', label: ticket.ticketSource}}\n                        error={\n                            this.props.createTicketAttemp && \n                            ticket.ticketSource === ''}\n                        onChange={(value: DropdownChoice) => {\n                            this.props.ticket.ticketSource = value.label;\n                            this.props.refreshTicketState();\n                        }} />\n                    <div>\n                        {ticket.ticketSource === 'Member' ? (\n                            <div>\n                                <InputField \n                                    placeholder='Member Name'\n                                    value={ticket.memberName}\n                                    error={\n                                        this.props.createTicketAttemp && \n                                        ticket.memberName === ''}\n                                    onChange={(value: string) => {\n                                        this.props.ticket.memberName = value;\n                                        this.props.refreshTicketState();\n                                    }} />\n                            </div>\n\n                        ) : ticket.ticketSource === 'Corporate Client' ? (\n                            <div>\n                                <InputField \n                                    placeholder='Corporate Client Name'\n                                    value={ticket.clientName}\n                                    error={\n                                        this.props.createTicketAttemp && \n                                        ticket.clientName === ''}\n                                    onChange={(value: string) => {\n                                        this.props.ticket.clientName = value;\n                                        this.props.refreshTicketState();\n                                    }} />\n                            </div>\n                        \n                        ) : ticket.ticketSource === 'Broker' ? (\n                            <div>\n                                <InputField \n                                    placeholder='Broker Name'\n                                    value={ticket.brokerName}\n                                    error={\n                                        this.props.createTicketAttemp && \n                                        ticket.brokerName.trim() === ''}    \n                                    onChange={(value: string) => {\n                                        this.props.ticket.brokerName = value;\n                                        this.props.refreshTicketState();\n                                    }} />\n                            </div>\n\n                        ) : ticket.ticketSource === 'Clinic/Hospital' ? (\n                            <div>\n                                <Dropdown \n                                    placeholder='Name of Hospital'\n                                    choices={this.props.facilities}\n                                    value={ticket.facility}\n                                    error={\n                                        this.props.createTicketAttemp && \n                                        ticket.facility.value === ''}\n                                    onChange={(value: DropdownChoice) => {\n                                        this.props.ticket.facility = value;\n                                        this.props.refreshTicketState();\n                                    }} />\n                                <InputField \n                                    placeholder='Department/Section' \n                                    value={ticket.department}\n                                    error={\n                                        this.props.createTicketAttemp && \n                                        ticket.department.trim() === ''}\n                                    onChange={(value: string) => {\n                                        this.props.ticket.department = value;\n                                        this.props.refreshTicketState();\n                                    }} />\n                            </div>\n                        ) : null}\n                    </div>\n                    <InputField \n                        placeholder='Name of Caller' \n                        value={ticket.callerName}\n                        error={\n                            this.props.createTicketAttemp && \n                            ticket.callerName.trim() === ''}\n                        onChange={(value: string) => {\n                            this.props.ticket.callerName = value;\n                            this.props.refreshTicketState();\n                        }} />\n                    <InputField \n                        placeholder='Contact No.' \n                        value={ticket.contactNo}\n                        error={\n                            this.props.createTicketAttemp && \n                            ticket.contactNo.trim() === ''}\n                        onChange={(value: string) => {\n                            this.props.ticket.contactNo = value;\n                            this.props.refreshTicketState();\n                        }} />\n                </div>\n                \n                <div className='sub-section'>\n                    <div className='header-2'>TICKET CATEGORY</div>\n                    <Grid container spacing={1}>\n                        <Grid item xs={5}>\n                            <Dropdown \n                                placeholder='Ticket Type'\n                                choices={this.ticketTypes}\n                                value={{ value: '', label: ticket.ticketType}}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    ticket.ticketType === ''}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.ticket.ticketType = value.label;\n                                    if (value.label === 'Inquiry') {\n                                        this.props.ticket.specificType = 'Not Applicable';\n                                    }\n                                    this.props.refreshTicketState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={7}>\n                            <Dropdown \n                                placeholder='Specific Type'\n                                disabled={ticket.ticketType !== 'Availment'}\n                                choices={this.specificTypes}\n                                value={{ value: '', label: ticket.specificType}}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    ticket.specificType === '' && \n                                    ticket.ticketType !== 'Inquiry'}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.ticket.specificType = value.label;\n                                    this.props.refreshTicketState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={5}>\n                            <Dropdown \n                                placeholder='Urgency'\n                                choices={this.urgencies}\n                                value={{ value: '', label: ticket.urgency}}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    ticket.urgency === ''}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.ticket.urgency = value.label;\n                                    this.props.refreshTicketState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={7}>\n                            <Dropdown \n                                placeholder='Assign To'\n                                choices={this.agents} /* Use this.props.agents later */\n                                value={{ value: ticket.agent.id, label: ticket.agent.name}}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    ticket.agent.id === ''}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.ticket.agent = {\n                                        id: value.value,\n                                        name: value.label\n                                    };\n                                    this.props.refreshTicketState();\n                                }} />\n                        </Grid>\n                    </Grid>\n                </div>\n\n                <div className='sub-section'>\n                    <div className='header-2'>ADDITIONAL NOTES AND FILES</div>\n                    <InputArea\n                        placeholder='Additional Notes'\n                        value={ticket.additionalNotes}\n                        onChange={(value: string) => {\n                            this.props.ticket.additionalNotes = value;\n                            this.props.refreshTicketState();\n                        }} />\n                    <CustomDropzone\n                        onDrop={(files: File[]) => {\n                            ticket.additionalFiles.push(files[0]);\n                            this.props.refreshTicketState();\n                        }} />\n                        {ticket.additionalFiles.map((file, index) => {\n                            return (\n                                <CustomChip\n                                    label={file.name}\n                                    value={index.toString()}\n                                    onDelete={(value: string) => {\n                                        ticket.additionalFiles.splice(parseInt(value), 1);\n                                        this.props.refreshTicketState();\n                                    }} />\n                            );\n                        })}\n                        \n                    {/* </Grid> */}\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Button } from '@material-ui/core';\n\ninterface IProps {\n    showResolveButton: boolean;\n    onSubmitTicket: () => void;\n    onResolveTicket: () => void;\n    onSaveForNow: () => void;\n}\n\nexport class SaveTicketFooter extends React.Component<IProps> {\n\n    shouldComponentUpdate(props: IProps, _state: any) {\n        return (props.showResolveButton != this.props.showResolveButton);\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='footer'>\n                <Button className='button-transparent'>\n                    Save For Now\n                </Button>\n                {this.props.showResolveButton ? (\n                    <Button \n                        className='button'\n                        onClick={this.props.onResolveTicket}>\n                        Mark as Resolved\n                    </Button>\n                ) : null}\n                \n                <Button \n                    className='button'\n                    onClick={this.props.onSubmitTicket}>\n                    Submit Ticket\n                </Button>\n                \n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\nimport ChipInput from 'material-ui-chip-input';\n\ninterface IProps {\n    placeholder: string;\n    value: string[];\n    onAdd: (value: string) => void;\n    onDelete: (index: number) => void;\n}\n\nexport class InputChip extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        \n        return (\n            <div className='input-field-container'>\n                <div className='text'>{this.props.placeholder}</div>\n                <ChipInput \n                    className='text-field'\n                    value={this.props.value} \n                    fullWidthInput={false}\n                    onAdd={(chip: any) => this.props.onAdd(chip)}\n                    onDelete={(_chip: any, index: number) => this.props.onDelete(index)} />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport {  Grid, TableCell, TableRow } from '@material-ui/core';\nimport { faMinusCircle, faPlus, faPen } from '@fortawesome/free-solid-svg-icons';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { DropdownChoice, InquiryData } from 'Pages/CustomerCarePage/Models';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { CustomDropzone } from 'Pages/CustomerCarePage/Components/CustomDropzone';\nimport { CustomChip } from 'Pages/CustomerCarePage/Components/CustomChip';\nimport { InputChip } from 'Pages/CustomerCarePage/Components/InputChip';\n// import { ComplexTable } from 'Pages/CustomerCarePage/Components/ComplexTable';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\n\ninterface IProps {\n    inquiries: InquiryData[];\n    refreshInquiryState: () => void;\n}\n\ninterface IStates {\n    inquiry: DropdownChoice;\n}\n\nexport class InquirySection extends React.PureComponent<IProps, IStates> {\n\n    inquiries: DropdownChoice[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            inquiry: { value: '', label: '' }\n        };\n\n        this.inquiries = [\n            { value: '1', label: 'Member Status / Card Inquiry' },\n            { value: '2', label: 'Member Network Access Inquiry' },\n            { value: '3', label: 'Member Benefit Inquiry - General [Outpatient]' },\n            { value: '4', label: 'Member Benefit Inquiry - General [Inpatient]' },\n            { value: '5', label: 'Member Benefit Inquiry - General [Emergency]' },\n            { value: '6', label: 'Member Benefit Inquiry - General [Dental]' },\n            { value: '7', label: 'Member Benefit Inquiry - General [APE / ECU]' },\n            { value: '8', label: 'Member Benefit Inquiry - General [Riders]' },\n            { value: '9', label: 'Member Coverage Inquiry - Specific Benefit' },\n            { value: '10', label: 'Member Availment Inquiry - CanAvail' },\n            { value: '11', label: 'Member Eligibility Inquiry' },\n            { value: '12', label: 'Reimbursement Status Inquiry' },\n            { value: '13', label: 'General Affiliated Network Inquiry - Facility' },\n            { value: '14', label: 'General Affiliated Network Inquiry - Doctor' },\n            { value: '15', label: 'General Affiliated Network Inquiry - Dentist' },\n            { value: '16', label: 'Procedural Inquiry - Outpatient' },\n            { value: '17', label: 'Procedural Inquiry - Inpatient' },\n            { value: '18', label: 'Procedural Inquiry - Emergency' },\n            { value: '19', label: 'Procedural Inquiry - Dental' },\n            { value: '20', label: 'Procedural Inquiry - APE / ECU' },\n            { value: '21', label: 'Procedural Inquiry - Member Enrolment / Cancellation / Update' },\n            { value: '22', label: 'Procedural Inquiry - Reimbursement' },\n            { value: '23', label: 'Procedural Inquiry - Others' }\n        ];\n    }\n\n    onAddInquiry() {\n        if (this.state.inquiry.value !== '') {\n            this.props.inquiries.push({\n                inquiry: this.state.inquiry,\n                detail: '',\n                specificDetail: [],\n                answer: '',\n                remarks: '',\n                relatedTickets: [],\n                supportDocs: []\n            });\n            \n            this.props.refreshInquiryState();\n            this.setState({inquiry: { value: '', label: '' }});\n        }\n    }\n\n    getFilteredInquiries(): DropdownChoice[] {\n        let filteredInquiries: DropdownChoice[] = [];\n        for (var i = 0; i < this.inquiries.length; i++) {\n            let isSame = false;\n            for (var j = 0; j < this.props.inquiries.length; j++) {\n                isSame = (\n                    this.props.inquiries[j].inquiry.value === \n                    this.inquiries[i].value ? true : isSame);\n            }\n            if (!isSame) {\n                filteredInquiries = filteredInquiries.concat(this.inquiries[i]);\n            }\n        }\n        return filteredInquiries;\n    }\n    \n    onRemoveInquiry(index: number) {\n        this.props.inquiries.splice(index, 1);\n        this.props.refreshInquiryState();\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='availment-section'>\n                <div className='sub-section'>\n                    <div className='header-2'>INQUIRY</div>\n                    <div className='text'>\n                        Add an inquiry type and then add the question and its details after\n                    </div>\n                    <div className='sub-section'>\n                        <CustomTable \n                            rows={this.props.inquiries}\n                            renderHeader={() => this.renderTableHeader()}\n                            renderRow={(rowData: any, index: number) => \n                                this.renderTableRow(rowData, index)} />\n                    </div>\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n        return (\n            <>\n            <TableCell style={{minWidth: '400px', maxWidth: '400px'}}>\n                <Dropdown \n                    choices={this.getFilteredInquiries()}\n                    value={this.state.inquiry}\n                    onChange={(value: DropdownChoice) => {\n                        this.setState({inquiry: value});\n                    }} />\n            </TableCell>\n            <TableCell style={{minWidth: '125px', maxWidth: '125px', textAlign: 'center'}}>\n                <TextButton \n                    icon={faPlus} \n                    label=\"Add inquiry\"\n                    onClick={() => {\n                        this.onAddInquiry();\n                    }} />\n            </TableCell>\n            </>\n        );\n    }\n\n    renderTableRow(inquiry: InquiryData, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                <TableCell colSpan={2}>\n                    <Grid container spacing={1}>\n                        <Grid item xs={10} className='header-2'>\n                            {inquiry.inquiry.label}\n                        </Grid>\n                        <Grid item xs={2} style={{textAlign: 'right'}}>\n                            <IconButton\n                                icon={faPen}\n                                onClick={() => {\n                                    this.onRemoveInquiry(index);\n                                }}/>\n                            <IconButton\n                                icon={faMinusCircle}\n                                onClick={() => {\n                                    this.onRemoveInquiry(index);\n                                }}/>\n                        </Grid>\n                    </Grid>\n                    <div style={{position: 'relative'}}>\n                        <div style={{paddingTop: '0.5rem'}} />\n                        <div className='line-border' />\n                        <div style={{paddingTop: '0.5rem'}} />\n                        <Grid container>\n                            <Grid item xs={1}/>\n                            <Grid item xs={11}>\n                                <div style={{margin: '8px 8px 1.5rem 8px'}}>\n                                    <InputField \n                                        placeholder='Details of inquiry (Question)'\n                                        value={inquiry.detail}\n                                        onChange={(value: string) => {\n                                            inquiry.detail = value;\n                                            this.props.refreshInquiryState();\n                                        }} />\n                                        <InputChip \n                                            placeholder='Specific Details (Type benefit/doctor/facility to describe inquiry, enter to add)'\n                                            value={inquiry.specificDetail}\n                                            onAdd={(value: string) => {\n                                                inquiry.specificDetail.push(value);\n                                                this.props.refreshInquiryState();\n                                            }}\n                                            onDelete={(index: number) => {\n                                                inquiry.specificDetail.splice(index, 1);\n                                                this.props.refreshInquiryState();\n                                            }} />\n                                    <InputField \n                                        placeholder='Answer'\n                                        value={inquiry.answer}\n                                        onChange={(value: string) => {\n                                            inquiry.answer = value;\n                                            this.props.refreshInquiryState();\n                                        }} />\n                                    <InputField \n                                        placeholder='Remarks (Optional)'\n                                        value={inquiry.remarks}\n                                        onChange={(value: string) => {\n                                            inquiry.remarks = value;\n                                            this.props.refreshInquiryState();\n                                        }} />\n                                    <InputChip \n                                            placeholder='Related Tickets (Optional)'\n                                            value={inquiry.relatedTickets}\n                                            onAdd={(value: string) => {\n                                                inquiry.relatedTickets.push(value);\n                                                this.props.refreshInquiryState();\n                                            }}\n                                            onDelete={(index: number) => {\n                                                inquiry.relatedTickets.splice(index, 1);\n                                                this.props.refreshInquiryState();\n                                            }} />\n                                    <Grid container spacing={2}>\n                                        <Grid item xs={7}>\n                                            <CustomDropzone \n                                                // placeholder='Drag or drop file to upload supporting documents'\n                                                onDrop={(files: File[]) => {\n                                                    inquiry.supportDocs.push(files[0]);\n                                                    this.props.refreshInquiryState();\n                                                }}/>\n                                        </Grid>\n                                        <Grid item xs={5}>\n                                            {inquiry.supportDocs.map((doc, index) => {\n                                                return (\n                                                    <CustomChip\n                                                        label={doc.name}\n                                                        value={index.toString()}\n                                                        onDelete={(value: string) => {\n                                                            inquiry.supportDocs.splice(parseInt(value), 1);\n                                                            this.props.refreshInquiryState();\n                                                        }} />\n                                                );\n                                            })}\n                                        </Grid>\n                                    </Grid>\n                                </div>\n                                \n                            </Grid>\n                        </Grid>\n                    </div>\n                </TableCell>\n            </TableRow>\n        );\n    }\n}","import { TicketData, ConfinementDetails, InquiryData, AvailmentDetails, LOAData, ConsultationDetails } from \"./Models\";\nimport { ConfinementDetails as UpdateInpatientDetails } from \"./UpdateTicketPage/UpdateTicketPage\";\nimport { ConfinementDetails as ResolveInpatientDetails } from \"./ResolveTicketPage/ResolveTicketPage\";\n\n\nexport class Payloads {\n\n    static getPostTicketPayload(ticket: TicketData,\n                                confinement: ConfinementDetails, \n                                availment: AvailmentDetails, \n                                inquiries: InquiryData[],\n                                consultation: ConsultationDetails,\n                                memberCardNo: string): any  {\n        return {\n            transaction_no: ticket.transactionNo,\n            received_via: ticket.ticketChannel,\n            received_from: ticket.ticketSource,\n\n            member_name: (ticket.ticketSource === 'Member' ? ticket.memberName : undefined),\n            corporate_client: (ticket.ticketSource === 'Corporate Client' ? ticket.clientName : undefined),\n            broker: (ticket.ticketSource === 'Broker' ? ticket.brokerName : undefined),\n            hospital_name: (ticket.ticketSource === 'Clinic/Hospital' ? (ticket.facility.value + ' - ' + ticket.facility.label) : undefined),\n            department: (ticket.ticketSource === 'Clinic/Hospital' ? ticket.department : undefined),\n\n            caller_name: ticket.callerName,\n            contact_no: ticket.contactNo,\n            additional_notes: ticket.additionalNotes,\n            supporting_documents: [],\n\n            ticket_category: {\n                ticket_type: ticket.ticketType,\n                specific_type: ticket.specificType,\n                urgency: ticket.urgency,\n                assign_to: ticket.agent.name,\n\n                availment_details: (\n                    ticket.ticketType === 'Availment' &&\n                    ticket.specificType === 'Outpatient Procedure' ? {\n                    provider: availment.provider.value + ' - ' + availment.provider.label,\n                    availments_list: availment.diagnoses.map(availment => {\n                        return {\n                            code: availment.icd10Code.value,\n                            name: availment.icd10Code.label,\n                            remarks: '',\n                            is_primary: false,\n                            is_final: false,\n                            \n                            doctors: [\n                                {\n                                    id: '',\n                                    name: availment.doctors[0].name,\n                                    specialization: (confinement.doctor.params ? confinement.doctor.params[0] : null),\n                                    fee: 0,\n                                    no_of_visits: '',\n                                    remarks: ''\n                                }\n                            ],\n\n                            procedures: availment.procedures\n                                .filter(procedure => {\n                                    return procedure.cptCode.value;\n                                })\n                                .map(procedure => {\n                                    return {\n                                        code: procedure.cptCode.value,\n                                        name: procedure.cptCode.label,\n                                        amount: procedure.amount.toString(),\n                                        doctor: '',\n                                        phic: procedure.isPHIC,\n                                        notes: '',\n                                        date_added: new Date(),\n                                        assessment_type: procedure.assessmentType,\n                                        assessment_remarks: procedure.assessmentRemarks\n                                    }\n                                }),\n                            \n                                assessment_type: availment.assessmentType,\n                                assessment_remarks: availment.assessmentRemarks\n                        }\n                    })\n                } : undefined),\n\n                confinement_details: (\n                    ticket.ticketType === 'Availment' &&\n                    ticket.specificType === 'Inpatient' ? {\n                    provider: confinement.provider.value + ' - ' + confinement.provider.label,\n                    date_admitted: confinement.dateAdmitted,\n                    confinement_kind: confinement.confinementKind,\n                    gift_given: false,\n                    updates: [],\n                    room_accommodation: [{\n                        room_type: confinement.roomType,\n                        no_of_days: '1',\n                        cost: confinement.costPerDay\n                    }],\n                    diagnoses: [\n                        {\n                            code: confinement.initialDiagnosis.value,\n                            name: confinement.initialDiagnosis.label,\n                            remarks: '',\n                            is_primary: false,\n                            is_final: false,\n                            \n                            doctors: [\n                                {\n                                    id: '',\n                                    name: confinement.doctor.label,\n                                    specialization: (confinement.doctor.params ? confinement.doctor.params[0] : null),\n                                    fee: confinement.amount,\n                                    no_of_visits: '0',\n                                    remarks: '',\n                                    type: 'Admitting'\n                                }\n                            ],\n\n                            procedures: []\n                        }\n                    ],\n                    others: [],\n                    coverage: 'Filed',\n                    final_bill: 0,\n                    philhealth_amount: 0,\n                    discharge_date: null\n                } : undefined),\n\n                consultation_details: (\n                    ticket.specificType === 'Consultation' ? {\n                    provider: `${consultation.provider.value} - ${consultation.provider.label}`,\n                    diagnosis: `${consultation.diagnosis.value} - ${consultation.diagnosis.label}`,\n                    doctor: `${consultation.doctor.value} - ${consultation.doctor.label}`,\n                    notes: consultation.notes,\n                    assessment_type: consultation.assessmentType,\n                    assessment_remarks: consultation.assessmentRemarks\n                } : undefined),\n\n                inquiry_details: (\n                    ticket.ticketType === 'Inquiry' ? {\n                    inquiry_list: inquiries.map(inquiry => {\n                        return {\n                            inquiry: inquiry.inquiry.label,\n                            value: inquiry.detail,\n                            specific_detail: inquiry.specificDetail,\n                            answer: inquiry.answer,\n                            remarks: inquiry.remarks, \n                            related_tickets: inquiry.relatedTickets, \n                            support_docs: []\n                        }\n                    })\n                } : undefined)\n            },\n            ticket_no: '',\n            status: 'Open',\n            date_created: new Date(),\n            date_updated: new Date(),\n            date_escalated: null,\n            created_by: {\n                _id: ticket.createdBy.id,\n                name: ticket.createdBy.name\n            },\n            member_id: memberCardNo,\n            client_id: '',\n            \n            loa: []\n        };\n    }\n\n\n\n\n\n\n\n\n\n\n    static getPutTicketPayload(ticket: TicketData, \n                               memberCardNo: string,\n                               confinement?: UpdateInpatientDetails,\n                               inquiries?: InquiryData[]): any {\n        return {\n            transaction_no: ticket.transactionNo,\n            received_via: ticket.ticketChannel,\n            received_from: ticket.ticketSource,\n\n            member_name: ticket.memberName,\n            corporate_client: ticket.clientName,\n            broker: ticket.brokerName,\n            hospital_name: ticket.facility.label,\n            department: ticket.department,\n\n            caller_name: ticket.callerName,\n            contact_no: ticket.contactNo,\n            additional_notes: ticket.additionalNotes,\n            supporting_documents: (confinement ? [\n                ...confinement.files.map(file => {\n                    return {\n                        name: file.docName,\n                        type: 'null',\n                        url: 'null',\n                        file: file.file\n                    }\n                })\n             ] : []),\n\n            ticket_category: {\n                ticket_type: ticket.ticketType,\n                specific_type: ticket.specificType,\n                urgency: ticket.urgency,\n                assign_to: ticket.agent.name,\n\n                confinement_details: (confinement ? {\n                    provider: `${confinement.provider.value} - ${confinement.provider.label}`,\n                    date_admitted: confinement.dateAdmitted,\n                    confinement_kind: confinement.confinementKind,\n                    gift_given: confinement.giftGiven,\n                    updates: confinement.updates.map(update => {\n                        return {\n                            remarks: update.remarks,\n                            date: update.date,\n                            hospital_bill: update.hospitalBill.toString()\n                        }\n                    }),\n                    room_accommodation: confinement.accommodations.map(accommodation => {\n                        return {\n                            room_type: accommodation.roomType,\n                            no_of_days: accommodation.days.toString(),\n                            cost: accommodation.costPerDay\n                        }\n                    }),\n                    diagnoses: confinement.diagnoses.map((diagnosis, index) => {\n                        return {\n                            code: diagnosis.diagnosis.value,\n                            name: diagnosis.diagnosis.label,\n                            remarks: diagnosis.remarks,\n                            is_primary: (confinement.primaryDiagnosisIndex === index),\n                            is_final: diagnosis.isFinal,\n                            doctors: confinement.physicians\n                                .filter(physician => physician.diagnosis.value === diagnosis.diagnosis.value)\n                                .map(physician => {\n                                    return {\n                                        id: '',\n                                        name: physician.physician.label,\n                                        specialization: physician.physician.params ? physician.physician.params[0] : '',\n                                        fee: physician.amount,\n                                        no_of_visits: physician.visits.toString(),\n                                        remarks: physician.remarks,\n                                        type: physician.physician.params ? physician.physician.params[1] : ''\n                                    }\n                                }),\n                            procedures: confinement.procedures\n                                .filter(procedure => procedure.diagnosis.value === diagnosis.diagnosis.value)\n                                .map(procedure => {\n                                    return {\n                                        code: procedure.procedure.value + '', // Convert to string\n                                        name: procedure.procedure.label,\n                                        amount: procedure.amount.toString(),\n                                        doctor: procedure.physician.label,\n                                        phic: false,\n                                        notes: procedure.remarks,\n                                        date_added: procedure.date,\n                                        assessment_type: 'Pending',\n                                        assessment_remarks: ''\n                                    }\n                                }),\n                            assessment_type: 'Pending',\n                            assessment_remarks: ''\n                        }\n                    }),\n                    others: confinement.items.map(item => {\n                        return {\n                            amount: item.amount,\n                            name: item.name,\n                            type: item.type\n                        }\n                    }),\n                    coverage: confinement.coverage.label,\n                    philhealth_amount: confinement.philhealthAmount,\n                    final_bill: confinement.finalBill,\n                    discharge_date: confinement.dischargeDate\n                } : undefined),\n\n                inquiry_details: (inquiries ? {\n                    inquiry_list: inquiries.map(inquiry => {\n                        return {\n                            inquiry: inquiry.inquiry.label,\n                            value: inquiry.detail,\n                            specific_detail: inquiry.specificDetail,\n                            answer: inquiry.answer,\n                            remarks: inquiry.remarks, \n                            related_tickets: inquiry.relatedTickets, \n                            support_docs: []\n                        }\n                    })\n                } : undefined)\n            },\n            ticket_no: ticket.ticketNo,\n            status: ticket.status,\n            date_created: ticket.dateCreated,\n            date_updated: ticket.dateUpdated,\n            date_escalated: null,\n            created_by: {\n                _id: ticket.createdBy.id,\n                name: ticket.createdBy.name\n            },\n            member_id: memberCardNo,\n            client_id: '',\n\n            loa: []\n        };\n    }\n\n\n\n\n\n\n\n\n\n\n    static getPutResolveTicketPayload(ticket: TicketData, \n                                      memberCardNo: string,\n                                      loas: LOAData[],\n                                      availment?: AvailmentDetails,\n                                      confinement?: ResolveInpatientDetails,\n                                      consultation?: ConsultationDetails): any {\n        return {\n            transaction_no: ticket.transactionNo,\n            received_via: ticket.ticketChannel,\n            received_from: ticket.ticketSource,\n\n            member_name: ticket.memberName,\n            corporate_client: ticket.clientName,\n            broker: ticket.brokerName,\n            hospital_name: ticket.facility.label,\n            department: ticket.department,\n\n            caller_name: ticket.callerName,\n            contact_no: ticket.contactNo,\n            additional_notes: ticket.additionalNotes,\n            supporting_documents: [],\n\n            ticket_category: {\n                ticket_type: ticket.ticketType,\n                specific_type: ticket.specificType,\n                urgency: ticket.urgency,\n                assign_to: ticket.agent.name,\n\n                availment_details: (availment ? {\n                    provider: availment.provider.value + ' - ' + availment.provider.label,\n                    availments_list: availment.diagnoses.map(availment => {\n                        return {\n                            code: availment.icd10Code.value,\n                            name: availment.icd10Code.label,\n                            remarks: '',\n                            is_primary: false,\n                            is_final: false,\n                            \n                            doctors: [\n                                {\n                                    id: '',\n                                    name: availment.doctors[0].name,\n                                    specialization: '',\n                                    fee: 0,\n                                    no_of_visits: '',\n                                    remarks: ''\n                                }\n                            ],\n\n                            procedures: availment.procedures\n                                .filter(procedure => {\n                                    return procedure.cptCode.value;\n                                })\n                                .map(procedure => {\n                                    return {\n                                        code: procedure.cptCode.value,\n                                        name: procedure.cptCode.label,\n                                        amount: procedure.amount.toString(),\n                                        doctor: '',\n                                        phic: procedure.isPHIC,\n                                        notes: '',\n                                        date_added: new Date(),\n                                        assessment_type: procedure.assessmentType,\n                                        assessment_remarks: procedure.assessmentRemarks\n                                    }\n                                })\n                        }\n                    })\n                } : undefined),\n\n                confinement_details: (confinement ? {\n                    provider: confinement.provider.value + ' - ' + confinement.provider.label,\n                    date_admitted: confinement.dateAdmitted,\n                    confinement_kind: confinement.confinementKind,\n                    gift_given: confinement.giftGiven,\n                    updates: confinement.updates,\n                    room_accommodation: confinement.accommodations.map(accommodation => {\n                        return {\n                            room_type: accommodation.roomType,\n                            no_of_days: accommodation.days.toString(),\n                            cost: accommodation.costPerDay\n                        }\n                    }),\n                    diagnoses: confinement.diagnoses.map(diagnosis => {\n                        return {\n                            code: diagnosis.icd10Code.value,\n                            name: diagnosis.icd10Code.label,\n                            remarks: diagnosis.remarks,\n                            is_primary: diagnosis.isPrimary,\n                            is_final: diagnosis.isFinal,\n                            doctors: diagnosis.doctors.map(doctor => {\n                                return {\n                                    id: doctor.id,\n                                    name: doctor.name,\n                                    specialization: doctor.specialization,\n                                    fee: doctor.fee,\n                                    no_of_visits: doctor.noOfVisits.toString(),\n                                    remarks: doctor.remarks,\n                                    type: doctor.type\n                                }\n                            }),\n                            procedures: diagnosis.procedures.map(procedure => {\n                                return {\n                                    code: procedure.cptCode.value + '', // Convert to string\n                                    name: procedure.cptCode.label,\n                                    amount: procedure.amount.toString(),\n                                    doctor: procedure.doctor,\n                                    phic: procedure.isPHIC,\n                                    notes: procedure.notes,\n                                    date_added: procedure.dateAdded,\n                                    assessment_type: procedure.assessmentType,\n                                    assessment_remarks: procedure.assessmentRemarks\n                                }\n                            }),\n                            assessment_type: diagnosis.assessmentType,\n                            assessment_remarks: diagnosis.assessmentRemarks\n                        }\n                    }),\n                    others: confinement.others,\n                    coverage: confinement.coverage.label,\n                    philhealth_amount: confinement.philhealthAmount,\n                    final_bill: confinement.finalBill,\n                    discharge_date: confinement.dischargeDate\n                } : undefined),\n\n                consultation_details: (consultation ? {\n                    provider: `${consultation.provider.value} - ${consultation.provider.label}`,\n                    diagnosis: `${consultation.diagnosis.value} - ${consultation.diagnosis.label}`,\n                    doctor: `${consultation.doctor.value} - ${consultation.doctor.label}`,\n                    notes: consultation.notes,\n                    assessment_type: consultation.assessmentType,\n                    assessment_remarks: consultation.assessmentRemarks\n                } : undefined)\n            },\n            ticket_no: ticket.ticketNo,\n            status: 'Resolved',\n            date_created: ticket.dateCreated,\n            date_updated: ticket.dateUpdated,\n            date_escalated: null,\n            created_by: {\n                _id: ticket.createdBy.id,\n                name: ticket.createdBy.name\n            },\n            member_id: memberCardNo,\n            client_id: '',\n            loa: loas.map(loa => {\n                return {\n                    loa_no: loa.loaNo,\n                    amount: loa.amount,\n                    date: loa.date,\n                    notes: loa.notes\n                }\n            })\n        };\n    }\n}","import * as React from 'react';\nimport { ConsultationDetails, DropdownChoice } from 'Pages/CustomerCarePage/Models';\nimport { DetailedDropdown } from 'Pages/CustomerCarePage/Components/DetailedDropdown';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\n\ninterface IProps {\n    consultation: ConsultationDetails;\n    facilities: DropdownChoice[];\n    doctors: DropdownChoice[];\n    icd10Codes: DropdownChoice[];\n    createTicketAttemp: boolean;\n    refreshConsultationState: () => void;\n}\n\nexport class ConsultationSection extends React.Component<IProps> {\n\n    constructor(props: IProps) {\n        super(props);\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='availment-section'>\n\n                <div className='sub-section'>\n                    <div className='header-2'>AVAILMENT DETAILS</div>\n                    <DetailedDropdown \n                        choices={this.props.facilities}\n                        placeholder='Provider'\n                        value={this.props.consultation.provider}\n                        error={\n                            this.props.createTicketAttemp && \n                            this.props.consultation.provider.value === ''}\n                        onChange={(value: DropdownChoice) => {\n                            this.props.consultation.provider = value;\n                            this.props.refreshConsultationState();\n                        }} />\n\n                    <DetailedDropdown \n                        choices={this.props.icd10Codes}\n                        placeholder='Diagnosis'\n                        value={this.props.consultation.diagnosis}\n                        error={\n                            this.props.createTicketAttemp && \n                            this.props.consultation.diagnosis.value === ''}\n                        onChange={(value: DropdownChoice) => {\n                            this.props.consultation.diagnosis = value;\n                            this.props.refreshConsultationState();\n                        }} />\n                    <Dropdown \n                        choices={this.props.doctors}\n                        placeholder='Doctor'\n                        value={this.props.consultation.doctor}\n                        error={\n                            this.props.createTicketAttemp && \n                            this.props.consultation.doctor.value === ''}\n                        onChange={(value: DropdownChoice) => {\n                            this.props.consultation.doctor = value;\n                            this.props.refreshConsultationState();\n                        }} />\n                    <InputField\n                        placeholder='Notes'\n                        value={this.props.consultation.notes}\n                        onChange={(value: string) => {\n                            this.props.consultation.notes = value;\n                            this.props.refreshConsultationState();\n                        }} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","let backendUrl = process.env.REACT_APP_PMAKER_BASE_URL;\n\nexport class Processmaker {\n\n    // //local\n    // static localUrl = 'http://18.140.39.215/api/1.0/workflow';//'localhost:32766/api/1.0/workflow';\n\n    // //stg\n    // static stgUrl = 'http://18.140.39.215/api/1.0/workflow';\n\n    static async get(url: string, success: Function, fail: Function) {\n        // const backendUrl = (process.env.NODE_ENV === 'development' ? this.localUrl : this.stgUrl);\n        fetch(backendUrl + url, {\n            method: 'GET',\n            headers: { \n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + localStorage.getItem('pm_token')\n            },\n        })\n        .then(response => response.json())\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n\n    static async post(url:string, body: any, success: Function, fail: Function) {\n        // const backendUrl = (process.env.NODE_ENV === 'development' ? this.localUrl : this.stgUrl);\n        fetch(backendUrl + url, {\n            method: 'POST',\n            headers: { \n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + localStorage.getItem('pm_token')\n            },\n            body: JSON.stringify(body)\n        })\n        .then(response => response.json())\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n\n    static async put(url: string, body: any, success: Function, fail: Function) {\n        // const backendUrl = (process.env.NODE_ENV === 'development' ? this.localUrl : this.stgUrl);\n        fetch(backendUrl + url, {\n            method: 'PUT',\n            headers: { \n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + localStorage.getItem('pm_token')\n            },\n            body: JSON.stringify(body)\n        })\n        .then(response => response)\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n}","import * as React from 'react';\nimport {  Grid, TableCell, TableRow } from '@material-ui/core';\nimport { faMinusCircle, faPlus, faPen, faCheckCircle, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport { DetailedDropdown } from 'Pages/CustomerCarePage/Components/DetailedDropdown';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { ProcedureData, DropdownChoice, AvailmentDetails, DiagnosisData } from 'Pages/CustomerCarePage/Models';\nimport { NumberField } from 'Pages/CustomerCarePage/Components/NumberField';\nimport { CustomCheckbox } from 'Pages/CustomerCarePage/Components/CustomCheckbox';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\n\ninterface IProps {\n    availment: AvailmentDetails;\n    facilities: DropdownChoice[];\n    doctors: DropdownChoice[];\n    icd10Codes: DropdownChoice[];\n    cptCodes: DropdownChoice[];\n    createTicketAttemp: boolean;\n    refreshAvailmentState: () => void;\n}\n\ninterface IStates {\n    icd10Code: DropdownChoice;\n    doctor: DropdownChoice;\n    chiefComplaint: string;\n    history: string;\n\n    itemToEditIndex: number;\n    icd10CodeToEdit: DropdownChoice;\n    doctorToEdit: DropdownChoice;\n}\n\nexport class EmergencyRoomSection extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            icd10Code: { value: '', label: '' },\n            doctor: { value: '', label: '' },\n            chiefComplaint: '',\n            history: '',\n\n            itemToEditIndex: -1,\n            icd10CodeToEdit: { value: '', label: '' },\n            doctorToEdit: { value: '', label: '' }\n        };\n    }\n\n    getFilteredICD10(): DropdownChoice[] {\n        let filteredICD10: DropdownChoice[] = [];\n        for (var i = 0; i < this.props.icd10Codes.length; i++) {\n            let isSame = false;\n            for (var j = 0; j < this.props.availment.diagnoses.length; j++) {\n                isSame = (\n                    this.props.availment.diagnoses[j].icd10Code.value === \n                    this.props.icd10Codes[i].value ? true : isSame);\n            }\n            if (!isSame) {\n                filteredICD10 = filteredICD10.concat(this.props.icd10Codes[i]);\n            }\n        }\n        return filteredICD10;\n    }\n\n    getProcedureCosts(procedures: ProcedureData[]) {\n        let totalCost = 0;\n        procedures.map(procedure => {\n            totalCost += procedure.amount;\n        });\n        return totalCost;\n    }\n    \n    pushBlankDiagnosis(icd10Code: DropdownChoice, doctor: DropdownChoice) {\n        this.props.availment.diagnoses.push({\n            icd10Code: icd10Code,\n            remarks: '',\n            isPrimary: false,\n            isFinal: false,\n            doctors: [{\n                id: '',\n                name: doctor.label,\n                specialization: '',\n                fee: 0,\n                noOfVisits: 0,\n                remarks: '',\n                type: 'Admitting'\n            }],\n            procedures: [{\n                cptCode: { value: '', label: '' },\n                isPHIC: false,\n                amount: 0,\n                notes: '',\n                assessmentType: 'Pending',\n                assessmentRemarks: '',\n                doctor: '',\n                dateAdded: new Date()\n            }],\n            assessmentType: 'Pending',\n            assessmentRemarks: ''\n        });\n    }\n\n    pushBlankProcedures(diagnosisIndex: number) {\n        this.props.availment.diagnoses[diagnosisIndex].procedures.push({\n            cptCode: { value: '', label: '' },\n            isPHIC: false,\n            amount: 0,\n            notes: '',\n            assessmentType: 'Pending',\n            assessmentRemarks: '',\n            doctor: '',\n            dateAdded: new Date()\n        });\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='availment-section'>\n                <div className='sub-section'>\n                    <div className='header-2'>AVAILMENT DETAILS</div>\n                    <DetailedDropdown \n                        choices={this.props.facilities}\n                        placeholder='Provider'\n                        value={this.props.availment.provider}\n                        error={\n                            this.props.createTicketAttemp && \n                            this.props.availment.provider.value === ''}\n                        onChange={(value: DropdownChoice) => {\n                            this.props.availment.provider = value;\n                            this.props.refreshAvailmentState();\n                        }} />\n                    <InputField\n                        placeholder='Chief Complaint'\n                        value={this.state.chiefComplaint}\n                        onChange={(value: string) => {\n                            this.setState({chiefComplaint: value});\n                        }} />\n                    <InputField\n                        placeholder='History'\n                        value={this.state.history}\n                        onChange={(value: string) => {\n                            this.setState({history: value});\n                        }} />\n                </div>\n                <div className='sub-section'>\n                    <div className='header-3'>LIST OF AVAILMENTS</div>\n                    <div className='text'>\n                        Add a diagnosis first then add procedures per diagnosis after\n                    </div>\n                    <div className='sub-section'>\n                        <CustomTable\n                            rows={this.props.availment.diagnoses}\n                            renderHeader={() => this.renderTableHeader()}\n                            renderRow={(rowData: any, index: number) => \n                                this.renderTableRow(rowData, index)} />\n                    </div>\n                    {this.props.createTicketAttemp && this.props.availment.diagnoses.length === 0 ? (\n                        <div className='sub-section' style={{color: '#E53935'}}>\n                            No diagnosis. Need atleast one diagnosis.\n                        </div> \n                    ) : (null)}\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n        return (\n            <>\n            <TableCell style={{minWidth: '300px', maxWidth: '300px'}}>\n                <DetailedDropdown \n                    choices={this.getFilteredICD10()}\n                    value={this.state.icd10Code}\n                    onChange={(value: DropdownChoice) => {\n                        this.setState({icd10Code: value});\n                    }} />\n            </TableCell>\n            <TableCell style={{minWidth: '150px', maxWidth: '150px'}}>\n                <Dropdown \n                    choices={this.props.doctors}\n                    value={this.state.doctor}\n                    onChange={(value: DropdownChoice) => {\n                        this.setState({doctor: value});\n                    }} />\n            </TableCell>\n            <TableCell style={{textAlign: 'center'}}>\n                <TextButton \n                    icon={faPlus} \n                    label=\"Add diagnosis\"\n                    onClick={() => {\n                        if (this.state.doctor.value !== '' && this.state.icd10Code.value !== '') {\n                            this.pushBlankDiagnosis(this.state.icd10Code, this.state.doctor);\n                            this.props.refreshAvailmentState();\n                            this.setState({\n                                icd10Code: { value: '', label: '' },\n                                doctor: { value: '', label: '' }\n                            });\n                        }\n                    }} />\n            </TableCell>\n            </>\n        );\n    }\n\n    renderTableRow(diagnosis: DiagnosisData, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n        const editIcon = { display: 'inline-block', paddingRight: '0.5rem' };\n        const deleteIcon = { display: 'inline-block' };\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                <TableCell colSpan={3}>\n                    <Grid container spacing={1}>\n                        {this.state.itemToEditIndex === index ? (\n                            <>\n                            <Grid item xs={6}>\n                                <DetailedDropdown \n                                    choices={this.getFilteredICD10()}\n                                    value={this.state.icd10CodeToEdit}\n                                    onChange={(value: DropdownChoice) => {\n                                        this.setState({icd10CodeToEdit: value});\n                                    }} />\n                            </Grid>\n                            <Grid item xs={5}>\n                                <Dropdown \n                                    choices={this.props.doctors}\n                                    value={this.state.doctorToEdit}\n                                    onChange={(value: DropdownChoice) => {\n                                        this.setState({doctorToEdit: value});\n                                    }} />\n                            </Grid>\n                            <Grid item xs={1} style={{lineHeight: '2rem'}}>\n                                <div style={editIcon}>\n                                    <IconButton\n                                        icon={faCheckCircle}\n                                        onClick={() => {\n                                            this.props.availment.diagnoses[index].icd10Code = this.state.icd10CodeToEdit;\n                                            this.props.availment.diagnoses[index].doctors[0].name = this.state.doctorToEdit.label;\n                                            this.props.refreshAvailmentState();\n                                            this.setState({itemToEditIndex: -1});\n                                        }}/>\n                                </div>\n                                <div style={deleteIcon}>\n                                    <IconButton\n                                        icon={faTimesCircle}\n                                        onClick={() => {\n                                            this.setState({itemToEditIndex: -1});\n                                        }}/>\n                                </div>\n                            </Grid>\n                            </>\n                        ) : (\n                            <>\n                            <Grid item xs={6} className='header-2'>\n                                {diagnosis.icd10Code.value + ' - ' + diagnosis.icd10Code.label}\n                            </Grid>\n                            <Grid item xs={3} className='header-2'>\n                                {diagnosis.doctors[0].name}\n                            </Grid>\n                            <Grid item xs={2} className='header-2'>\n                                {GlobalFunction.formatNumber(this.getProcedureCosts(diagnosis.procedures), true) + \" PHP\"}\n                            </Grid>\n                            <Grid item xs={1}>\n                                <div style={editIcon}>\n                                    <IconButton\n                                        icon={faPen}\n                                        onClick={() => {\n                                            this.setState({\n                                                itemToEditIndex: index,\n                                                icd10CodeToEdit: diagnosis.icd10Code,\n                                                doctorToEdit: {\n                                                    value: diagnosis.doctors[0].id,\n                                                    label: diagnosis.doctors[0].name\n                                                }\n                                            });\n                                        }}/>\n                                </div>\n                                <div style={deleteIcon}>\n                                    <IconButton\n                                        icon={faMinusCircle}\n                                        onClick={() => {\n                                            this.props.availment.diagnoses.splice(index, 1);\n                                            this.props.refreshAvailmentState();\n                                        }}/>\n                                </div>\n                            </Grid>\n                            </>\n                        )}\n                    </Grid>\n                    {diagnosis.procedures.map((procedure, procedureIndex) => {\n                        return this.renderProcedureDetails(procedure, index, procedureIndex);\n                    })}\n                </TableCell>\n            </TableRow>\n        );\n    }\n    \n    renderProcedureDetails(procedure: ProcedureData, diagnosisIndex: number, index: number): JSX.Element {\n        const stateProcedure = this.props.availment.diagnoses[diagnosisIndex].procedures[index];\n        const stateProcedures = this.props.availment.diagnoses[diagnosisIndex].procedures;\n        return (\n            <div style={{position: 'relative'}}>\n                <div style={{paddingTop: '0.5rem'}} />\n                <div className='line-border' />\n                <div style={{paddingTop: '0.5rem'}} />\n                <Grid container spacing={2}>\n                    <Grid item xs={8}>\n                        <DetailedDropdown \n                            placeholder='Procedure'\n                            choices={this.props.cptCodes}\n                            value={procedure.cptCode}\n                            onChange={(value: DropdownChoice) => {\n                                stateProcedure.cptCode = value;\n                                if (index === (stateProcedures.length - 1)) {\n                                    this.pushBlankProcedures(diagnosisIndex);\n                                }\n                                this.props.refreshAvailmentState();\n                            }} />\n                    </Grid>\n                    <Grid item xs={3}>\n                        <NumberField\n                            placeholder='Amount'\n                            value={procedure.amount}\n                            onChange={(value: number) => {\n                                stateProcedure.amount = value;\n                                this.props.refreshAvailmentState();\n                            }} />\n                    </Grid>\n                    <Grid item xs={1}>\n                        <CustomCheckbox\n                            placeholder='PHIC'\n                            value={procedure.isPHIC}\n                            onChange={(value: boolean) => {\n                                stateProcedure.isPHIC = value;\n                                this.props.refreshAvailmentState();\n                            }} />\n                    </Grid>\n                </Grid>\n                <div style={{position: 'absolute'}}>\n                    <TextButton \n                        label='Add procedure'\n                        icon={faPlus}\n                        onClick={() => {\n                            this.pushBlankProcedures(diagnosisIndex);\n                            this.props.refreshAvailmentState();\n                        }}/>\n                </div>\n                <div style={{paddingTop: '1rem'}} />\n            </div>\n        );\n    }\n}","\nimport * as React from 'react';\nimport Grid from '@material-ui/core/Grid';\n\nimport './../style.scss';\nimport { MemberDataSection } from '../MemberDataSection';\nimport { API } from './../API';\nimport { ConfinementSection } from './Components/ConfinementSection';\nimport { AvailmentSection } from './Components/AvailmentSection';\nimport { TicketInfoSection } from './Components/TicketInfoSection';\nimport { TicketData, MemberData, DropdownChoice, ConfinementDetails, InquiryData, AvailmentDetails, ConsultationDetails } from '../Models';\nimport { SaveTicketFooter } from './Components/SaveTicketFooter';\nimport { InquirySection } from './Components/InquirySection';\nimport { Payloads } from '../Payloads';\nimport { ConsultationSection } from './Components/ConsultationSection';\nimport { Processmaker } from '../Processmaker';\nimport { EmergencyRoomSection } from './Components/EmergencyRoomSection';\n\ninterface IProps {\n    history: any;\n}\n\ninterface IStates {\n    createTicketAttemp: boolean;\n\n    /* Data coming from database */\n    member?: MemberData;\n\n    /* Data to store to database */\n    ticket: TicketData;\n    availment: AvailmentDetails;\n    confinement: ConfinementDetails;\n    consultation: ConsultationDetails;\n    inquiries: InquiryData[];\n\n    isIcd10CodesLoaded: boolean;\n}\n\nexport class CreateTicketPage extends React.Component<IProps, IStates> {\n\n    icd10Codes: DropdownChoice[];\n    cptCodes: DropdownChoice[];\n    facilities: DropdownChoice[];\n    doctors: DropdownChoice[];\n    agents: DropdownChoice[];\n    \n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            createTicketAttemp: false,\n            isIcd10CodesLoaded: false,\n\n            ticket: {\n                ticketChannel: 'Call',\n                transactionNo: '9999-9999',\n                ticketSource: '',\n                memberName: '',\n                clientName: '',\n                brokerName: '',\n                facility: { value: '', label: '' },\n                department: '',\n                callerName: '',\n                contactNo: '',\n                ticketType: '',\n                specificType: '',\n                urgency: 'High',\n                agent: { id: '', name: '' },\n                additionalNotes: '',\n                additionalFiles: [],\n                ticketNo: '',\n                status: 'Open',\n                createdBy: { id: '1', name: 'Jilmer Cariaso - Static' },\n                dateCreated: new Date(),\n                dateUpdated: new Date(),\n                dateEscalated: null\n            },\n            availment: {\n                provider: { value: '', label: '' },\n                diagnoses: []\n            },\n            confinement: {\n                provider: { value: '', label: '' },\n                dateAdmitted: new Date(),\n                confinementKind: '',\n                roomType: '',\n                costPerDay: 0,\n                doctor: { value: '', label: '' },\n                initialDiagnosis: { value: '', label: '' },\n                amount: 0\n            },\n            consultation: {\n                provider: { value: '', label: '' },\n                diagnosis: { value: '', label: '' },\n                doctor: { value: '', label: '' },\n                notes: '',\n                assessmentRemarks: '',\n                assessmentType: ''\n            },\n            inquiries: []\n        };\n\n        this.facilities = [];\n        this.agents = [];\n        this.doctors = [];\n        this.cptCodes = [];\n        this.icd10Codes = [];\n    }\n\n    componentDidMount() {\n        API.get('facilities',\n            (response) => {\n                this.facilities = response.map(facility => {\n                    return { \n                        value: facility.facility_id,\n                        label: facility.name \n                    }\n                });\n            },\n            (error) => {\n                console.log(error);\n            });\n\n\n\n        const tempIcd10Codes = localStorage.getItem('icd10_codes');\n        if (!tempIcd10Codes) {\n            API.get('icd10-codes?filter[limit]=1000',\n                (response) => {\n                    this.icd10Codes = response.map(icd10Code => {\n                        return { \n                            value: icd10Code.full_code,\n                            label: icd10Code.abbreviated_description \n                        };\n                    });\n                    localStorage.setItem('icd10_codes', JSON.stringify(this.icd10Codes));\n                    this.setState({isIcd10CodesLoaded: true});\n                },\n                (error) => {\n                    console.log(error);\n                });\n        } else {\n            this.icd10Codes = JSON.parse(tempIcd10Codes);\n            console.log(\"Using the local copy of ICD10 Codes\");\n        }\n        \n\n\n        const tempCptCodes = localStorage.getItem('cpt_codes');\n        if (!tempCptCodes) {\n            API.get('cpts',\n                (response) => {\n                    this.cptCodes = response.map(cptCode => {\n                        return {\n                            value: cptCode.code.toString(),\n                            label: cptCode.label \n                        };\n                    });\n                    localStorage.setItem('cpt_codes', JSON.stringify(this.cptCodes));\n                }, \n                (error) => {\n                    console.log(error);\n                });\n        } else {\n            this.cptCodes = JSON.parse(tempCptCodes);\n            console.log(\"Using the local copy of CPT Codes\");\n        }\n        \n\n\n        API.get('doctors',\n            (response) => {\n                this.doctors = response.map(doctor => {\n                    return {\n                        value: doctor._id,\n                        label: ('Dr. ' + doctor.first_name +  ' ' + doctor.last_name),\n                        params: [doctor.type]\n                    };\n                });\n            }, \n            (error) => {\n                console.log(error);\n            });\n    }\n\n    render(): JSX.Element {\n\n        return (\n            <>\n            <Grid container className='customer-care-main'>\n\n                <MemberDataSection \n                    member={this.state.member}\n                    ticketStatus='Create'\n                    promptChooseMember={this.state.createTicketAttemp}\n                    onUpdateMemberStateChange={(member: MemberData) => {\n                        this.setState({member: member});\n                    }} />\n                \n                <TicketInfoSection \n                    ticket={this.state.ticket} \n                    facilities={this.facilities}\n                    agents={this.agents}\n                    createTicketAttemp={this.state.createTicketAttemp}\n                    refreshTicketState={() => {\n                        this.setState({ticket: Object.assign({}, this.state.ticket)});\n                    }} />\n\n                {this.state.ticket.ticketType === 'Availment' ? (\n                \n                    this.state.ticket.specificType === 'Outpatient Procedure' ? (  \n                        <AvailmentSection\n                            availment={this.state.availment}\n                            facilities={this.facilities}\n                            doctors={this.doctors}\n                            icd10Codes={this.icd10Codes}\n                            cptCodes={this.cptCodes}\n                            createTicketAttemp={this.state.createTicketAttemp}\n                            refreshAvailmentState={() => {\n                                //this.setState({availment: this.state.availment});\n                                this.setState({availment: Object.assign({}, this.state.availment)});\n                            }} />\n\n                    ) : this.state.ticket.specificType === 'Inpatient' ? ( \n                        <ConfinementSection\n                            confinement={this.state.confinement}\n                            facilities={this.facilities}\n                            doctors={this.doctors}\n                            cptCodes={this.icd10Codes}\n                            createTicketAttemp={this.state.createTicketAttemp}\n                            refreshConfinementState={() => {\n                                this.setState({confinement: this.state.confinement});\n                            }} />\n                    ) : this.state.ticket.specificType === 'Emergency Room' ? (\n                        <EmergencyRoomSection\n                            availment={this.state.availment}\n                            facilities={this.facilities}\n                            doctors={this.doctors}\n                            icd10Codes={this.icd10Codes}\n                            cptCodes={this.cptCodes}\n                            createTicketAttemp={this.state.createTicketAttemp}\n                            refreshAvailmentState={() => {\n                                this.setState({availment: this.state.availment});\n                            }} />\n                        \n                    ) : this.state.ticket.specificType === 'Consultation' ? ( \n                        <ConsultationSection\n                            consultation={this.state.consultation}\n                            facilities={this.facilities}\n                            doctors={this.doctors}\n                            icd10Codes={this.icd10Codes}\n                            createTicketAttemp={this.state.createTicketAttemp}\n                            refreshConsultationState={() => {\n                                this.setState({consultation: this.state.consultation});\n                            }} />\n                    ) : (null)\n\n                ) : this.state.ticket.ticketType === 'Inquiry' ? (\n                    <InquirySection\n                        inquiries={this.state.inquiries}\n                        refreshInquiryState={() => {\n                            this.setState({inquiries: this.state.inquiries});\n                        }} />\n                ) : (null)}\n                \n                \n            </Grid>\n            <SaveTicketFooter \n                showResolveButton={this.state.ticket.ticketType === 'Inquiry' ? true : false}\n                onSaveForNow={() => null} \n                onSubmitTicket={() => {\n                    this.setState({createTicketAttemp: true});\n                    const ticket = this.state.ticket;\n                    const confinement = this.state.confinement;\n                    const availment = this.state.availment;\n                    const consultation = this.state.consultation;\n                    const inquiries = this.state.inquiries;\n                    const cardNo = this.state.member ? this.state.member.cardNo : undefined;\n\n                    /* Must have target member */\n                    if (!cardNo) return;\n\n                    /* Confinement Details must have all contents */\n                    if (ticket.ticketType === 'Availment' && ticket.specificType === 'Inpatient') {\n                        if (confinement.provider.value === '' ||\n                            confinement.confinementKind === '' ||\n                            confinement.costPerDay === 0 ||\n                            confinement.doctor.value === '' ||\n                            confinement.initialDiagnosis.value === '' ||\n                            confinement.roomType === '') {\n                            return;\n                        }\n                    }\n\n\n                    const payload = Payloads.getPostTicketPayload(ticket, confinement, availment, inquiries, consultation, cardNo);\n\n                    console.log(payload);\n                    API.post('customer-care/tickets', JSON.stringify(payload),\n                        (response) => { \n                            console.log(response);\n                            if (response['_id']) {\n                                console.log('Ticket No: '+response['id']);\n                                let is_availment = false;\n                                if (this.state.ticket.ticketType === 'Availment'){\n                                    is_availment=true;\n                                }\n                                let trigger_id = \"3905447335db2a32daafd33048658514\"; //should refer to redux createtickettrigger_id!!!\n                                let body = {\n                                    \"pro_uid\" : \"1538417025dae8dae9ff7a9016454302\", //should refer to redux createticketproject_id!!!\n                                    \"tas_uid\":\"6092309955dae8db0a85907021073537\",   //should refer to redux createticketstarttask_id!!!\n                                    \"ticket_no\":response['_id'],\n                                    \"can_be_resolved_imm\":0,\n                                    \"is_availment\":is_availment\n                                };\n                                console.log('Body: '+body);\n                                //Start Case\n                                Processmaker.post('cases',body,\n                                    (response) => {\n                                        if (response['app_uid']){\n                                            let case_id = response['app_uid'];\n                                            //Trigger Case\n                                            Processmaker.put('cases/'+case_id+'/execute-trigger/'+trigger_id,body,\n                                                (response) => {\n                                                    console.log('Trigger Response: '+response);\n                                                    Processmaker.put('cases/'+case_id+'/variable',body,\n                                                        (response) => {\n                                                            console.log('Set Variable Response: '+response);\n                                                            this.props.history.push('#/customer-care/');\n                                                            window.location.reload();\n                                                        }, \n                                                        (error) => {\n                                                            console.log(error);\n                                                        }\n                                                    );\n                                                }, \n                                                (error) => {\n                                                    console.log(error);\n                                                }\n                                            );\n                                        }\n                                    }, \n                                    (error) => {\n                                        console.log(error);\n                                    }\n                                ); \n                            }     \n                        },\n                        (error) => {\n                            console.log(error);\n                        });\n                }}\n                onResolveTicket={() => {\n\n                }} />\n            </>\n        );\n    }\n}","\nimport * as React from 'react';\n\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { Grid, TableCell, TableRow } from '@material-ui/core';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { UpdateData, AccommodationData, DiagnosisData, PhysicianData, ProcedureData, ItemData } from '../UpdateTicketProps';\nimport { DropdownChoice } from 'Pages/CustomerCarePage/Models';\n\ninterface IProps {\n    ticketNo: string;\n    updates: UpdateData[];\n    accommodations: AccommodationData[];\n    diagnoses: DiagnosisData[];\n    physicians: PhysicianData[];\n    procedures: ProcedureData[];\n    items: ItemData[];\n\n    provider: DropdownChoice;\n    dateAdmitted: Date;\n    confinementKind: string;\n\n    coverage: DropdownChoice;\n    philhealthAmount: number;\n    finalBill: number;\n    dischargeDate: Date | null;\n    setTabSelected: (value: number) => void;\n}\n\nexport class SummarySection extends React.Component<IProps> {\n\n    constructor(props: IProps) {\n        super(props);\n    }\n\n    getTotalAccommodationCost = () => {\n        let totalCost = 0;\n        this.props.accommodations.map(accommodation => {\n            totalCost += accommodation.costPerDay * accommodation.days;\n        });\n        return totalCost;\n    }\n\n    getTotalPhysicianCost = () => {\n        let totalCost = 0;\n        this.props.physicians.map(physician => {\n            totalCost += physician.amount;\n        });\n        return totalCost;\n    }\n\n    getTotalProcedureCost = () => {\n        let totalCost = 0;\n        this.props.procedures.map(procedure => {\n            totalCost += procedure.amount;\n        });\n        return totalCost;\n    }\n\n    getTotalItemCost = () => {\n        let totalCost = 0;\n        this.props.items.map(item => {\n            totalCost += item.amount;\n        });\n        return totalCost;\n    }\n\n    // render(): JSX.Element {\n    //     return (<div></div>);\n        \n    // }\n\n\n    render(): JSX.Element {\n        console.log(this.props.physicians);\n        return (\n            <div className='section'>\n                <div className='header-1'>Review Summary</div>\n                {this.renderSection('UPDATES', 'update', 2,\n                    <CustomTable\n                        className='custom-table'\n                        rows={this.props.updates}\n                        renderHeader={() => {\n                            return (\n                                <>\n                                <TableCell>Remarks</TableCell>\n                                <TableCell style={{width: '200px'}}>As of Date</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '200px'}}>Running Hospital Bill</TableCell>\n                                </>\n                            );\n                        }}\n                        renderRow={(update: UpdateData, index: number) => {\n                            const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                            return (\n                                <TableRow style={{backgroundColor: backgroundColor}}>\n                                    <TableCell>{update.remarks}</TableCell>\n                                    <TableCell>{GlobalFunction.toCommonDateString(update.date)}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(update.hospitalBill, true)} PHP`}</TableCell>\n                                </TableRow>\n                            );\n                        }} />\n                )}\n                \n                {this.renderSection('ROOM ACCOMMODATIONS', 'room', 3, \n                    <CustomTable\n                        className='custom-table'\n                        rows={this.props.accommodations}\n                        renderHeader={() => {\n                            return (\n                                <>\n                                <TableCell>Room Type</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '200px'}}>No. of Days</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '300px'}}>Cost Per Day</TableCell>\n                                </>\n                            );\n                        }}\n                        renderRow={(accommodation: AccommodationData, index: number) => {\n                            const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                            return (\n                                <TableRow style={{backgroundColor: backgroundColor}}>\n                                    <TableCell>{accommodation.roomType}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{accommodation.days}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(accommodation.costPerDay, true)} PHP`}</TableCell>\n                                </TableRow>\n                            );\n                        }} />,\n                        this.getTotalAccommodationCost()\n                )}\n\n                {this.renderSection('DIAGNOSES', 'diagnosis', 4, \n                    <CustomTable\n                        className='custom-table'\n                        rows={this.props.diagnoses}\n                        renderHeader={() => {\n                            return (\n                                <>\n                                <TableCell style={{width: '300px'}}>Diagnosis</TableCell>\n                                <TableCell>Remarks</TableCell>\n                                <TableCell style={{textAlign: 'center', width: '100px'}}>Type</TableCell>\n                                <TableCell style={{textAlign: 'center', width: '175px'}}>Primary Diagnosis?</TableCell>\n                                </>\n                            );\n                        }}\n                        renderRow={(diagnosis: DiagnosisData, index: number) => {\n                            const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                            return (\n                                <TableRow style={{backgroundColor: backgroundColor}}>\n                                    <TableCell>{`${diagnosis.diagnosis.value} - ${diagnosis.diagnosis.label}`}</TableCell>\n                                    <TableCell>{diagnosis.remarks}</TableCell>\n                                    <TableCell style={{textAlign: 'center'}}>{diagnosis.isFinal ? 'Final' : 'Initial'}</TableCell>\n                                    <TableCell style={{textAlign: 'center'}}>{diagnosis.isPrimary ? 'Yes' : 'No'}</TableCell>\n                                </TableRow>\n                            );\n                        }} />\n                )}\n                \n                {this.renderSection('PHYSICIANS', 'physicians', 5, \n                    <CustomTable\n                        className='custom-table'\n                        rows={this.props.physicians}\n                        renderHeader={() => {\n                            return (\n                                <>\n                                <TableCell style={{width: '250px'}}>Specialization - Doctor Name</TableCell>\n                                <TableCell style={{width: '100px'}}>Diagnosis</TableCell>\n                                <TableCell>Remarks</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '125px'}}>No. of Visits</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '200px'}}>Amount</TableCell>\n                                </>\n                            );\n                        }}\n                        renderRow={(physician: PhysicianData, index: number) => {\n                            const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                            return (\n                                <TableRow style={{backgroundColor: backgroundColor}}>\n                                    {physician.physician.params? (\n                                        <TableCell>\n                                            <div className='text'>{`${physician.physician.params[0]} - ${physician.physician.label}`}</div>\n                                            <div className='light-text'>{`${physician.physician.params[1]} Physician`}</div>\n                                        </TableCell>\n                                    ) : ''}\n                                    <TableCell>{physician.diagnosis.value}</TableCell>\n                                    <TableCell>{physician.remarks}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{physician.visits}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(physician.amount, true)} PHP`}</TableCell>\n                                </TableRow>\n                            );\n                        }} />,\n                        this.getTotalPhysicianCost()\n                )}\n                \n                {this.renderSection('PROCEDURES', 'procedures', 6,\n                    <CustomTable\n                        className='custom-table'\n                        rows={this.props.procedures}\n                        renderHeader={() => {\n                            return (\n                                <>\n                                <TableCell style={{width: '200px'}}>Procedure</TableCell>\n                                <TableCell style={{width: '100px'}}>Diagnosis</TableCell>\n                                <TableCell style={{width: '175px'}}>Doctor</TableCell>\n                                <TableCell style={{width: '150px'}}>Date</TableCell>\n                                <TableCell style={{minWidth: '100px'}}>Remarks</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '150px'}}>Amount</TableCell>\n                                </>\n                            );\n                        }}\n                        renderRow={(procedure: ProcedureData, index: number) => {\n                            const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                            return (\n                                <TableRow style={{backgroundColor: backgroundColor}}>\n                                    <TableCell>{`${procedure.procedure.value} - ${procedure.procedure.label}`}</TableCell>\n                                    <TableCell>{procedure.diagnosis.value}</TableCell>\n                                    <TableCell>{procedure.physician.label}</TableCell>\n                                    <TableCell>{GlobalFunction.toCommonDateString(procedure.date)}</TableCell>\n                                    <TableCell>{procedure.remarks}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(procedure.amount, true)} PHP`}</TableCell>\n                                </TableRow>\n                            );\n                        }} />,\n                        this.getTotalProcedureCost()\n                )}\n                \n                {this.renderSection('OTHER DETAILS', 'item', 8, \n                    <CustomTable \n                        className='custom-table'\n                        rows={this.props.items}\n                        renderHeader={() => {\n                            return (\n                                <>\n                                <TableCell>Item</TableCell>\n                                <TableCell style={{width: '250px'}}>Type</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '250px'}}>Amount</TableCell>\n                                </>\n                            );\n                        }}\n                        renderRow={(item: ItemData, index: number) => {\n                            const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                            return (\n                                <TableRow style={{backgroundColor: backgroundColor}}>\n                                    <TableCell>{item.name}</TableCell>\n                                    <TableCell>{item.type}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(item.amount, true)} PHP`}</TableCell>\n                                </TableRow>\n                            );\n                        }} />,\n                        this.getTotalItemCost()\n                )}\n                \n                <div className='sub-section'>\n                    <Grid container>\n                        <Grid item xs={4}>\n                            <div className='header-2'>PHILHEALTH</div>\n                            <div className='sub-section'>\n                                <div className='light-text'>COVERAGE</div>\n                                <div className='small-text'>{this.props.coverage.label}</div>\n                            </div>\n                            <div className='sub-section'>\n                                <div className='light-text'>AMOUNT</div>\n                                <div className='small-text'>{GlobalFunction.formatNumber(this.props.philhealthAmount, true) + \" PHP\"}</div>\n                            </div>\n                            <div className='sub-section'>\n                                <div className='light-text'>TICKET NUMBER</div>\n                                <div className='small-text'>{this.props.ticketNo}</div>\n                            </div>\n                        </Grid>\n                        <Grid item xs={4}>\n                            <div className='header-2'>CONFINEMENT</div>\n                            <div className='sub-section'>\n                                <div className='light-text'>PROVIDER</div>\n                                <div className='small-text'>{this.props.provider.value + ' - ' + this.props.provider.label}</div>\n                            </div>\n                            <div className='sub-section'>\n                                <div className='light-text'>DATE ADMITTED</div>\n                                <div className='small-text'>{GlobalFunction.toCommonDateString(this.props.dateAdmitted)}</div>\n                            </div>\n                            <div className='sub-section'>\n                                <div className='light-text'>KIND OF CONFINEMENT</div>\n                                <div className='small-text'>{this.props.confinementKind}</div>\n                            </div>\n                        </Grid>\n                        <Grid item xs={4}>\n                            <div className='header-2'>DISCHARGE DETAILS</div>\n                            <div className='sub-section'>\n                                <div className='light-text'>FINAL HOSPITAL BILL AMOUNT</div>\n                                <div className='small-text'>{GlobalFunction.formatNumber(this.props.finalBill, true) + ' PHP'}</div>\n                            </div>\n                            <div className='sub-section'>\n                                <div className='light-text'>DISCHARGE DATE</div>\n                                <div className='small-text'>\n                                    {this.props.dischargeDate ? (\n                                        GlobalFunction.toCommonDateString(this.props.dischargeDate)\n                                    ) : '---'}\n                                </div>\n                            </div>\n                        </Grid>\n                        <Grid item xs={4}>\n                            <TextButton \n                                label='Edit PhilHealth' \n                                onClick={() => {\n                                    window.scroll(0, -window.pageYOffset);\n                                    this.props.setTabSelected(7);\n                                }}/>\n                        </Grid>\n                        <Grid item xs={4}>\n                            <TextButton \n                                label='Edit Confinement Details' \n                                onClick={() => {\n                                    window.scroll(0, -window.pageYOffset);\n                                    this.props.setTabSelected(3);\n                                }}/>\n                        </Grid>\n                        <Grid item xs={4}>\n                            <TextButton\n                                label='Edit Discharge Details' \n                                onClick={() => {\n                                    window.scroll(0, -window.pageYOffset);\n                                    this.props.setTabSelected(7);\n                                }}/>\n                        </Grid>\n                    </Grid>\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderSection(headerName: string, miniText: string, tabIndex: number, table: JSX.Element, totalValue?: number): JSX.Element {\n        return (\n            <div className='sub-section'>\n                <div style={{float: 'right'}}>\n                    <TextButton \n                        label={`Add / Edit ${miniText}`} \n                        onClick={() => {\n                            window.scroll(0, -window.pageYOffset);\n                            this.props.setTabSelected(tabIndex);\n                        }}/>\n                </div>\n                <div className='header-2'>{headerName}</div>\n                {table}\n                {totalValue ? (\n                    <div className='sub-section'>\n                        <div style={{float: 'right'}}>\n                            <span className='small-text'>TOTAL AMOUNT</span>\n                            <span style={{marginLeft: '1rem'}} />\n                            <span className='header-2'>\n                                {GlobalFunction.formatNumber(totalValue, true) + ' PHP'}\n                            </span>\n                        </div>\n                </div>\n                ) : null}\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Table, TableBody, TableCell, TableHead, TableRow } from '@material-ui/core';\nimport './../../Components/component-style.scss';\nimport { faPen, faMinusCircle, faCheckCircle, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport { IconButton } from '../../Components/IconButton';\n\ninterface IProps {\n    className: string;\n    placeholder: string;\n    cols: string[];\n    rows: string[][] | any;\n    defaultRows?: number;\n\n    onSaveEditRow: (rowIndex: number, value: any) => void;\n    onDeleteRow: (rowIndex: number) => void; \n\n    /* \n     * Use this to stylize the column cells.\n     * rowIndex: the row index you want to style.\n     * colIndex: the column index you want to style.\n     * value: give you control to manipulate the value.\n     */\n    onFormat?: (rowIndex: number, colIndex: number, value: any) => JSX.Element;\n\n    /*\n     * Use this to stylize the column headers.\n     * colIndex: the column index you want to style.\n     * name: the header name at will appear.\n     */\n    onHeaderFormat?: (colIndex: number, name: string) => JSX.Element;\n\n    /* \n     * Use this when you want to stylize the column cell edit field\n     * colIndex: the column index you want to style.\n     * value: give you control to manipulate the value.\n     * onChange: a function called when user tried to type/input.\n     * - value: \n     */\n    editField: (colIndex: number, value: any, onChange: (value: any) => void) => JSX.Element;\n}\n\ninterface IStates {\n    rowToEdit: number;\n    data: any;\n}\n\nexport class CRUDTable extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            rowToEdit: -1,\n\n            data: {}\n        }\n    }\n\n    handleOnChange = (attrName: string) => (value: any) => {\n        this.setState(prevState => ({\n            data: {\n                ...prevState.data,\n                [attrName]: value\n            }\n        }));\n    }\n\n    renderCell(row: number, column: number, attrName: string, value: any): JSX.Element {\n        return (\n            <TableCell key={column}>\n                {this.state.rowToEdit === row ? (\n                    this.props.editField ? this.props.editField(column, this.state.data[attrName], this.handleOnChange(attrName)) : value  \n                ) : (\n                    this.props.onFormat ? this.props.onFormat(row, column, value) : value\n                )}\n            </TableCell>\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <>\n            <div className='header-2'>{this.props.placeholder}</div>\n            <Table className={(this.props.className ? this.props.className : '') + ' table'}>\n                <TableHead>\n                    <TableRow>\n                        {this.props.cols.map((colName, index) => {\n                            return (\n                                this.props.onHeaderFormat ? (\n                                    this.props.onHeaderFormat(index, colName)\n                                ) : (\n                                    <TableCell key={index}>{colName}</TableCell>\n                                )\n                            );\n                        })}\n                        <TableCell className='last-column'>\n                        </TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {this.props.rows.map((row, index1) => {\n                        const backgroundColor = (index1 % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                        return (\n                            <TableRow style={{backgroundColor: backgroundColor}} key={index1}>\n                                {Object.keys(row).map((attrName, index2) => {\n                                    return (this.renderCell(index1, index2, attrName, row[attrName]));\n                                })}\n                                <TableCell className='last-column'>\n                                    {this.state.rowToEdit !== index1 ? (\n                                        <>\n                                        <div style={{display: 'inline-block', paddingRight: '0.5rem'}}>\n                                            <IconButton icon={faPen} onClick={() => {\n                                                this.setState({rowToEdit: index1});\n                                                this.setState({data: row});\n                                            }} />\n                                        </div>\n                                        <div style={{display: 'inline-block'}}>\n                                            <IconButton icon={faMinusCircle} onClick={() => {\n                                                this.props.onDeleteRow(index1)\n                                            }} />\n                                        </div>\n                                        </>\n                                    ) : ( \n                                        <>\n                                        <div style={{display: 'inline-block', paddingRight: '0.5rem'}}>\n                                            <IconButton icon={faCheckCircle} onClick={() => {\n                                                this.props.onSaveEditRow(index1, this.state.data);\n                                                this.setState({rowToEdit: -1});\n                                            }} />\n                                        </div>\n                                        <div style={{display: 'inline-block'}}>\n                                            <IconButton icon={faTimesCircle} onClick={() => {\n                                                this.setState({rowToEdit: -1});\n                                            }} />\n                                        </div>\n                                        </>\n                                    )}\n                                </TableCell>\n                            </TableRow>\n                        );\n                    })}\n                </TableBody>\n            </Table>\n            </>\n        );\n    }\n}","import * as React from 'react';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { Grid, TableCell } from '@material-ui/core';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\n\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { DatePicker } from 'Pages/CustomerCarePage/Components/DatePicker';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { DetailedNumberField } from 'Pages/CustomerCarePage/Components/DetailedNumberField';\nimport { UpdateData } from '../UpdateTicketProps';\n// import { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\n// import { CRUDTable } from 'Pages/CustomerCarePage/UpdateTicketPage/Components/CRUDTable';\n\nimport { CRUDTable } from './CRUDTable';\n\ninterface IProps {\n    updates: UpdateData[];\n    refreshUpdatesState: () => void;\n}\n\ninterface IStates {\n    remarks: string;\n    date: Date;\n    hospitalBill: number;\n}\n\nexport class UpdateSection extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            remarks: '',\n            date: new Date(),\n            hospitalBill: 0\n        }\n    }\n\n    onFormatTableHeader = (colIndex: number, value: any) => {\n        return (\n            colIndex === 2 ? (\n                <TableCell style={{textAlign: 'right', minWidth: '200px'}}>{value}</TableCell>\n            ) : (\n                <TableCell style={{minWidth: '150px'}}>{value}</TableCell>\n            )\n        );\n    }\n\n    onFormatCRUDTable = (colIndex: number, value: any) => {\n        return (\n            colIndex === 1 ? (\n                <div>{GlobalFunction.toCommonDateString(value)}</div>\n            ) : colIndex === 2 ? (\n                <div style={{textAlign: 'right'}}>\n                    {GlobalFunction.formatNumber(value, true) + ' PHP'}\n                </div>\n            ) : (value)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Add Update</div>\n                <div className='sub-section'>\n                    <Grid container spacing={2}>\n                        <Grid item xs={6}>\n                            <InputField \n                                placeholder='Remarks'\n                                value={this.state.remarks}\n                                charLimit={100}\n                                onChange={(value: string) => {\n                                    this.setState({remarks: value});\n                                }}/>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <DatePicker \n                                placeholder='As of Date'\n                                value={this.state.date}\n                                onChange={(value: Date) => {\n                                    this.setState({date: value});\n                                }}/>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <DetailedNumberField \n                                placeholder='Running Hospital Bill'\n                                detail='PHP'\n                                isFloat={true}\n                                value={this.state.hospitalBill}\n                                onChange={(value: number) => {\n                                    this.setState({hospitalBill: value});\n                                }}/>\n                        </Grid>\n                    </Grid>\n                    <div style={{paddingTop: '5px'}} />\n                    <TextButton \n                        label='Add update' \n                        icon={faPlus}\n                        onClick={() => {\n                            var state = this.state;\n                            const tempData = {\n                                remarks: state.remarks,\n                                date: state.date,\n                                hospitalBill: state.hospitalBill\n                            }\n                            this.props.updates.unshift(tempData);\n                            this.props.refreshUpdatesState();\n                            this.setState({\n                                remarks: '',\n                                date: new Date(),\n                                hospitalBill: 0\n                            });\n                        }}/>\n                </div>\n                \n                <div className='sub-section'>\n                    {/* <CustomTable\n                        className='custom-table'\n                        rows={this.props.updates}\n                        renderHeader={() => {\n                            return (\n                                <>\n                                <TableCell>Remarks</TableCell>\n                                <TableCell>As of Date</TableCell>\n                                <TableCell>Running hospital bill</TableCell>\n                                <TableCell style={{width: '100px'}}/>\n                                </>\n                            );\n                        }}\n                        renderRow={(update: UpdateData, index: number) => {\n                            const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                            return (\n                                <TableRow style={{backgroundColor: backgroundColor}}>\n                                    <TableCell>{update.remarks}</TableCell>\n                                    <TableCell>{GlobalFunction.toCommonDateString(update.date)}</TableCell>\n                                    <TableCell>{GlobalFunction.formatNumber(update.hospitalBill) + '.00 PHP'}</TableCell>\n                                    <TableCell>\n                                        <div style={{display: 'inline-block', paddingRight: '0.5rem'}}>\n                                            <IconButton icon={faPen} onClick={() => {\n                                                //this.setState({rowToEdit: index1});\n                                                //this.setState({data: row});\n                                            }} />\n                                        </div>\n                                        <div style={{display: 'inline-block'}}>\n                                            <IconButton icon={faMinusCircle} onClick={() => {\n                                                //this.props.onDeleteRow(index1)\n                                                this.props.updates.splice(index, 1);\n                                                this.props.refreshUpdatesState();\n                                            }} />\n                                        </div>\n                                    </TableCell>\n                                </TableRow>\n                            ); \n                        }} /> */}\n                    <CRUDTable \n                        className='custom-table'\n                        placeholder='UPDATES'\n                        \n                        cols={['Remarks', 'As of Date', 'Running Hospital Bill']}\n                        rows={this.props.updates} \n                        onSaveEditRow={(index: number, data: any) => {\n                            this.props.updates[index] = data;\n                            this.props.refreshUpdatesState();\n                        }}\n                        onDeleteRow={(index: number) => {\n                            this.props.updates.splice(index, 1);\n                            this.props.refreshUpdatesState();\n                        }}\n                        onHeaderFormat={(colIndex: number, colName: string) => {\n                            return this.onFormatTableHeader(colIndex, colName);\n                        }} \n                        onFormat={(_rowIndex: number, colIndex: number, value: any) => {\n                            return this.onFormatCRUDTable(colIndex, value);\n                        }} \n                        editField={(colIndex: number, currentVal: any, onChange: any) => {\n                            if (colIndex === 0) {\n                                return (\n                                    <InputField\n                                        value={currentVal}\n                                        onChange={(value: string) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 1) {\n                                return (\n                                    <DatePicker\n                                        value={currentVal}\n                                        onChange={(value: Date) => onChange(value)}/>\n                                );\n                            } else {\n                                return (\n                                    <DetailedNumberField\n                                        detail='PHP'\n                                        value={currentVal}\n                                        onChange={(value: number) => onChange(value)}/>\n                                );\n                            }\n                        }} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { Grid, TableCell } from '@material-ui/core';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\n\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { DetailedDropdown } from 'Pages/CustomerCarePage/Components/DetailedDropdown';\nimport { NumberField } from 'Pages/CustomerCarePage/Components/NumberField';\nimport { DetailedNumberField } from 'Pages/CustomerCarePage/Components/DetailedNumberField';\nimport { CRUDTable } from 'Pages/CustomerCarePage/UpdateTicketPage/Components/CRUDTable';\nimport { DatePicker } from 'Pages/CustomerCarePage/Components/DatePicker';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { DropdownChoice } from 'Pages/CustomerCarePage/Models';\nimport { AccommodationData } from '../UpdateTicketProps';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { CustomCheckbox } from 'Pages/CustomerCarePage/Components/CustomCheckbox';\n\ninterface IProps {\n    accommodations: AccommodationData[];\n    facilitiesList: DropdownChoice[];\n    provider: DropdownChoice;\n    dateAdmitted: Date;\n    confinementKind: string;\n    giftGiven: boolean;\n    onUpdateTicketStateChange: (attrName: string, value: any) => void;\n    refreshAccommodationsState: () => void;\n}\n\ninterface IStates {\n    roomType: string;\n    days: number;\n    costPerDay: number;\n}\n\nexport class AccommodationsSection extends React.Component<IProps, IStates> {\n\n    confinementTypes: DropdownChoice[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.confinementTypes = [\n            { value: '1', label: 'Elective / Scheduled' },\n            { value: '2', label: 'ER leading to confinement' }\n        ];\n\n        this.state = {\n            roomType: '',\n            days: 0,\n            costPerDay: 0\n        }\n    }\n\n    onFormatTableHeader = (colIndex: number, value: any) => {\n        return (\n            colIndex === 1 || colIndex === 2 ? (\n                <TableCell style={{textAlign: 'right', minWidth: '200px'}}>{value}</TableCell>\n            ) : (\n                <TableCell style={{minWidth: '150px'}}>{value}</TableCell>\n            )\n        );\n    }\n\n    onFormatCRUDTable = (colIndex: number, value: any) => {\n        const textAlign = (colIndex !== 0 ? 'right' : 'left');\n        return (\n            <div style={{textAlign: textAlign}}>\n                {colIndex === 2 ? \n                    GlobalFunction.formatNumber(value, true) + ' PHP' : \n                    value}\n            </div>\n        );\n    }\n\n    getTotalCost = () => {\n        let totalCost = 0;\n        this.props.accommodations.map(accommodation => {\n            totalCost += accommodation.costPerDay * accommodation.days;\n        });\n\n        return totalCost;\n    }\n\n    renderConfinementDetails(): JSX.Element {\n        return (\n            <div className='sub-section'>\n                <div className='header-2'>CONFINEMENT DETAILS</div>\n                <Grid container spacing={2}>\n                    <Grid item xs={6}>\n                        <DetailedDropdown \n                            placeholder='Provider'\n                            value={this.props.provider}\n                            choices={this.props.facilitiesList}\n                            onChange={(value: DropdownChoice) => {\n                                this.props.onUpdateTicketStateChange('provider', value);\n                            }}/>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <DatePicker \n                            placeholder='Date Admitted'\n                            value={this.props.dateAdmitted}\n                            onChange={(value: Date) => {\n                                this.props.onUpdateTicketStateChange('dateAdmitted', value);\n                            }}/>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <Dropdown \n                            placeholder='Kind of Confinement'\n                            value={{ value: '', label: this.props.confinementKind }}\n                            choices={this.confinementTypes}\n                            onChange={(value: DropdownChoice) => {\n                                this.props.onUpdateTicketStateChange('confinementKind', value);\n                            }}/>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <CustomCheckbox \n                            label='Gift Given?'\n                            value={this.props.giftGiven}\n                            onChange={(value: boolean) => {\n                                this.props.onUpdateTicketStateChange('giftGiven', value);\n                            }} />\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n\n    renderAddRoomAccommodation(): JSX.Element {\n        return (\n            <div className='sub-section'>\n                <Grid container spacing={2}>\n                    <Grid item xs={6}>\n                        <InputField \n                            placeholder='Room Type'\n                            value={this.state.roomType}\n                            onChange={(value: string) => {\n                                this.setState({roomType: value});\n                            }}/>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <NumberField \n                            placeholder='No. of Days'\n                            value={this.state.days}\n                            error={this.state.days < 1 || isNaN(this.state.days)}\n                            onChange={(value: number) => {\n                                this.setState({days: value});\n                            }}/>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <DetailedNumberField \n                            placeholder='Cost Per Day'\n                            detail='PHP'\n                            value={this.state.costPerDay}\n                            onChange={(value: number) => {\n                                this.setState({costPerDay: value});\n                            }}/>\n                    </Grid>\n                </Grid>\n                <div style={{paddingTop: '5px'}} />\n                {this.state.days > 0 ? (\n                    <TextButton \n                        label='Add room' \n                        icon={faPlus}\n                        onClick={() => {\n                            var state = this.state;\n                            const tempData = {\n                                roomType: state.roomType,\n                                days: state.days,\n                                costPerDay: state.costPerDay\n                            }\n                            this.props.accommodations.push(tempData);\n                            this.props.refreshAccommodationsState();\n                            this.setState({\n                                roomType: '',\n                                days: 0,\n                                costPerDay: 0\n                            });\n                        }}/>\n                ) : null}\n            </div>\n        );\n    }\n\n    render(): JSX.Element {\n\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Add Room Accommodation</div>\n                {this.renderAddRoomAccommodation()}\n                <div className='sub-section' />\n                {this.renderConfinementDetails()}\n                <div className='sub-section'>\n                    <CRUDTable \n                        className='custom-table'\n                        placeholder='ROOM ACCOMMODATIONS'\n                        cols={['Room Type', 'No. of Days', 'Cost Per Day']} \n                        rows={this.props.accommodations}\n                        onSaveEditRow={(index: number, data: any) => {\n                            this.props.accommodations[index] = data;\n                            this.props.refreshAccommodationsState();\n                        }}\n                        onDeleteRow={(index: number) => {\n                            this.props.accommodations.splice(index, 1);\n                            this.props.refreshAccommodationsState();\n                        }}\n                        onHeaderFormat={(colIndex: number, colName: string) => {\n                            return this.onFormatTableHeader(colIndex, colName);\n                        }} \n                        onFormat={(_rowIndex: number, colIndex: number, value: any) => {\n                            return this.onFormatCRUDTable(colIndex, value);\n                        }}\n                        editField={(colIndex: number, currentVal: any, onChange: any) => {\n                            if (colIndex === 0) {\n                                return (\n                                    <InputField\n                                        value={currentVal}\n                                        onChange={(value: string) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 1) {\n                                return (\n                                    <NumberField\n                                        value={currentVal}\n                                        onChange={(value: number) => onChange(value < 1 ? 1 : value)}/>\n                                );\n                            } else {\n                                return (\n                                    <DetailedNumberField\n                                        detail='PHP'\n                                        value={currentVal}\n                                        onChange={(value: number) => onChange(value)}/>\n                                );\n                            }\n                        }} />\n                    <div className='sub-section'>\n                        <div style={{float: 'right'}}>\n                            <span className='small-text'>TOTAL AMOUNT</span>\n                            <span style={{marginLeft: '1rem'}} />\n                            <span className='header-2'>{GlobalFunction.formatNumber(this.getTotalCost(), true) + ' PHP'}</span>\n                        </div>\n                    </div>\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\nimport { Radio } from '@material-ui/core';\n\ninterface IProps {\n    label?: string;\n    checkedCondition: boolean;\n    onChange: () => void;\n}\n\nexport class CustomRadio extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        return (\n            <div className='check-box-area'>\n                <Radio\n                    className='check-box'\n                    checked={this.props.checkedCondition}\n                    onChange={(_event: React.ChangeEvent<HTMLInputElement>) => {\n                        this.props.onChange();\n                    }} />\n                {this.props.label ? (\n                    <span className='text' style={{paddingLeft: '10px'}}>{this.props.label}</span>\n                ) : null}\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { Grid, TableCell } from '@material-ui/core';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\n\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { DetailedDropdown } from 'Pages/CustomerCarePage/Components/DetailedDropdown';\nimport { CRUDTable } from 'Pages/CustomerCarePage/UpdateTicketPage/Components/CRUDTable';\nimport { DropdownChoice } from 'Pages/CustomerCarePage/Models';\nimport { CustomCheckbox } from 'Pages/CustomerCarePage/Components/CustomCheckbox';\nimport { DiagnosisData, PhysicianData, ProcedureData } from '../UpdateTicketProps';\nimport { CustomRadio } from 'Pages/CustomerCarePage/Components/CustomRadio';\n\ninterface IProps {\n    diagnoses: DiagnosisData[];\n    physicians: PhysicianData[];\n    procedures: ProcedureData[];\n    diagnosesList: DropdownChoice[];\n    primaryDiagnosisIndex: number;\n    refreshDiagnosisStateChange: () => void;\n    setPrimaryDiagnosisIndex: (index: number) => void;\n}\n\ninterface IStates {\n    diagnosis: DropdownChoice;\n    remarks: string;\n    isFinal: boolean;\n}\n\nexport class DiagnosesSection extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            diagnosis: { value: '', label: '' },\n            remarks: '',\n            isFinal: false\n        }\n    }\n\n    getFilteredICD10Codes(): DropdownChoice[] {\n        let filteredIcd10: DropdownChoice[] = [];\n        for (var i = 0; i < this.props.diagnosesList.length; i++) {\n            let isSame = false;\n            for (var j = 0; j < this.props.diagnoses.length; j++) {\n                isSame = (\n                    this.props.diagnoses[j].diagnosis.value === \n                    this.props.diagnosesList[i].value ? true : isSame);\n            }\n            if (!isSame) {\n                filteredIcd10 = filteredIcd10.concat(this.props.diagnosesList[i]);\n            }\n        }\n        return filteredIcd10;\n    }\n\n    onFormatTableHeader = (colIndex: number, value: any) => {\n        return (\n            colIndex === 0 || colIndex === 1 ? (\n                <TableCell style={{minWidth: '200px', maxWidth: '200px'}}>{value}</TableCell>\n            ) : colIndex === 3 ? (\n                <TableCell style={{minWidth: '200px', maxWidth: '200px', textAlign: 'center'}}>{value}</TableCell>\n            ) : (\n                <TableCell style={{minWidth: '100px', maxWidth: '100px'}}>{value}</TableCell>\n            )\n        );\n    }\n\n    onFormatCRUDTable = (rowIndex: number, colIndex: number, value: any) => {\n        return (\n            colIndex === 0 ? (\n                <div style={{minWidth: '200px', maxWidth: '200px'}}>\n                    {value.value + \" - \" + value.label}\n                </div>\n            ) : colIndex === 2 ? (\n                <div>{value ? 'Final' : 'Initial'}</div>\n            ) : colIndex === 3 ? (\n                <div style={{textAlign: 'center'}}>\n                    <CustomRadio\n                        checkedCondition={this.props.primaryDiagnosisIndex === rowIndex}\n                        onChange={() => {\n                            this.props.setPrimaryDiagnosisIndex(rowIndex);\n                        }} />\n                </div>\n            ) : (value)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Add Diagnosis</div>\n                <div className='sub-section'>\n                    <Grid container spacing={2}>\n                        <Grid item xs={6}>\n                            <DetailedDropdown \n                                placeholder='Diagnosis'\n                                value={this.state.diagnosis}\n                                choices={this.getFilteredICD10Codes()}\n                                onChange={(value: DropdownChoice) => {\n                                    this.setState({diagnosis: value});\n                                }}/>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <InputField \n                                placeholder='Remarks'\n                                value={this.state.remarks}\n                                charLimit={100}\n                                onChange={(value: string) => {\n                                    this.setState({remarks: value});\n                                }}/>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <CustomCheckbox \n                                label='Final Diagnosis?'\n                                value={this.state.isFinal}\n                                onChange={(value: boolean) => {\n                                    this.setState({isFinal: value});\n                                }}/>\n                        </Grid>\n                        \n                    </Grid>\n                    <div style={{paddingTop: '5px'}} />\n                        <TextButton \n                            label='Add diagnosis' \n                            icon={faPlus}\n                            onClick={() => {\n                                var data = this.state;\n                                const tempData = {\n                                    diagnosis: data.diagnosis,\n                                    remarks: data.remarks,\n                                    isFinal: data.isFinal,\n                                    isPrimary: true\n                                }\n                                this.props.diagnoses.push(tempData);\n                                this.props.refreshDiagnosisStateChange();\n                                this.setState({\n                                    diagnosis: { value: '', label: '' },\n                                    remarks: ''\n                                });\n                            }}/>\n                </div>\n                <div className='sub-section'>\n                    <CRUDTable \n                        className='custom-table'\n                        placeholder='DIAGNOSES'\n                        \n                        cols={['Diagnosis', 'Remarks', 'Type', 'Primary Diagnosis?']} \n                        rows={this.props.diagnoses}\n                        onSaveEditRow={(index: number, data: any) => {\n                            this.props.diagnoses[index] = data;\n                            this.props.refreshDiagnosisStateChange();\n                        }}\n                        onDeleteRow={(index: number) => {\n                            this.props.physicians.filter(physician => \n                                physician.diagnosis.label !== \n                                this.props.diagnoses[index].diagnosis.label);\n                            // this.props.procedures.filter(procedure => \n                            //     procedure.diagnosis.value !== \n                            //     this.props.procedures[index].procedure.value);\n                            this.props.diagnoses.splice(index, 1);\n                            this.props.refreshDiagnosisStateChange();\n                        }}\n                        onHeaderFormat={(colIndex: number, colName: string) => {\n                            return this.onFormatTableHeader(colIndex, colName);\n                        }} \n                        onFormat={(rowIndex: number, colIndex: number, value: any) => {\n                            return this.onFormatCRUDTable(rowIndex, colIndex, value);\n                        }}\n                        editField={(colIndex: number, currentVal: any, onChange: any) => {\n                            if (colIndex === 0) {\n                                return (\n                                    <DetailedDropdown\n                                        choices={this.getFilteredICD10Codes()}\n                                        value={currentVal}\n                                        onChange={(value: DropdownChoice) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 1) {\n                                return (\n                                    <InputField\n                                        value={currentVal}\n                                        onChange={(value: string) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 2) {\n                                return (\n                                    <CustomCheckbox \n                                        label='Is Final?'\n                                        value={currentVal}\n                                        onChange={(value: boolean) => onChange(value)}/>\n                                );\n                            } else {\n                                return (\n                                    <div></div>\n                                );\n                            }\n                        }} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Grid, Radio, TableCell } from '@material-ui/core';\nimport { PhysicianData, DiagnosisData } from '../UpdateTicketProps';\nimport { DetailedDropdown } from 'Pages/CustomerCarePage/Components/DetailedDropdown';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { NumberField } from 'Pages/CustomerCarePage/Components/NumberField';\nimport { DetailedNumberField } from 'Pages/CustomerCarePage/Components/DetailedNumberField';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { CRUDTable } from 'Pages/CustomerCarePage/UpdateTicketPage/Components/CRUDTable';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { DropdownChoice } from 'Pages/CustomerCarePage/Models';\n// import { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\n\ninterface IProps {\n    physicians: PhysicianData[];\n    physiciansList: DropdownChoice[];\n    diagnosesList: DiagnosisData[];\n    // addPhysician: (physician: PhysicianData) => void;\n    // editPhysician: (index: number, physician: PhysicianData) => void;\n    // deletePhysician: (index: number) => void;\n    refreshPhysiciansStateChange: () => void;\n}\n\ninterface IStates {\n    physician: DropdownChoice;\n    diagnosis: DropdownChoice;\n    type: string;\n    remarks: string;\n    visits: number;\n    amount: number;\n}\n\nexport class PhysiciansSection extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            physician: { value: '', label: '' },\n            diagnosis: { value: '', label: '' },\n            type: '',\n            remarks: '',\n            visits: 0,\n            amount: 0\n        }\n    }\n\n    onFormatTableHeader = (colIndex: number, value: any) => {\n        return (\n            colIndex === 0 ? (\n                <TableCell style={{minWidth: '250px'}}>{value}</TableCell>\n            ) : colIndex === 1 ? (\n                <TableCell style={{minWidth: '100px'}}>{value}</TableCell>\n            ) : colIndex === 3 || colIndex === 4 ? (\n                <TableCell style={{minWidth: '150px', textAlign: 'right'}}>{value}</TableCell>\n            ) : (\n                <TableCell style={{minWidth: '150px'}}>{value}</TableCell>\n            )\n        );\n    }\n\n    onFormatCRUDTable = (colIndex: number, value: any) => {\n        return (\n            colIndex === 0 ? (\n                <div>\n                    <div>{value.params[0] + ' - ' + value.label}</div>\n                    <div className='light-text'>{value.params[1] + ' Physician'}</div>\n                </div>\n            ) : colIndex === 1 ? (\n                <div>{value.value}</div>\n            ) : colIndex === 3 || colIndex === 4 ? (\n                <div style={{textAlign: 'right'}}>\n                    {colIndex === 4 ? GlobalFunction.formatNumber(value, true) + ' PHP' : value}\n                </div>\n            ) : (value)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Add Physician</div>\n                <div className='sub-section'>\n                    <Grid container spacing={2}>\n                        <Grid item xs={6}>\n                            <DetailedDropdown \n                                placeholder='Doctor'\n                                detail={this.state.physician.params ? this.state.physician.params[0] : ''}\n                                value={this.state.physician}\n                                choices={this.props.physiciansList}\n                                onChange={(value: DropdownChoice) => {\n                                    this.setState({physician: value});\n                                }}/>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <DetailedDropdown \n                                placeholder='Diagnosis'\n                                value={this.state.diagnosis}\n                                choices={this.props.diagnosesList.map(value => {\n                                    return value.diagnosis; \n                                })}\n                                onChange={(value: DropdownChoice) => {\n                                    this.setState({diagnosis: value});\n                                }}/>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <InputField \n                                placeholder='Remarks'\n                                value={this.state.remarks}\n                                charLimit={100}\n                                onChange={(value: string) => {\n                                    this.setState({remarks: value});\n                                }}/>\n                        </Grid>\n                        <Grid item xs={1}>\n                            <NumberField\n                                placeholder='Visits'\n                                value={this.state.visits}\n                                onChange={(value: number) => {\n                                    this.setState({visits: value});\n                                }}/>\n                        </Grid>\n                        <Grid item xs={2}>\n                            <DetailedNumberField\n                                placeholder='Amount'\n                                detail='PHP'\n                                value={this.state.amount}\n                                onChange={(value: number) => {\n                                    this.setState({amount: value});\n                                }}/>\n                        </Grid>\n                        <Grid item xs={3}>\n                            {/* Checkbox here */}\n                            <div>\n                            <Grid container style={{paddingTop: '1rem'}}>\n                                <Grid item xs={6}>\n                                    <Radio \n                                        className='check-box'\n                                        style={{height: '100%', width: 0}}\n                                        checked={this.state.type === 'Admitting'}\n                                        value={'Admitting'}\n                                        onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                                            this.setState({type: event.target.value});\n                                        }} /> Admitting\n                                </Grid>\n                                <Grid item xs={6}>\n                                    <Radio \n                                        className='check-box'\n                                        style={{height: '100%', width: 0}}\n                                        checked={this.state.type === 'Attending'}\n                                        value={'Attending'}\n                                        onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                                            this.setState({type: event.target.value});\n                                        }} /> Attending\n                                </Grid>\n                            </Grid>\n                            </div>\n                        </Grid>\n                    </Grid>\n                    <div style={{paddingTop: '5px'}} />\n                    <TextButton \n                        label='Add physician' \n                        icon={faPlus}\n                        onClick={() => {\n                            var data = this.state;\n                            const tempData = {\n                                physician: {\n                                    value: data.physician.value,\n                                    label: data.physician.label,\n                                    params: [data.physician.params ? data.physician.params[0] : '', data.type]\n                                },\n                                diagnosis: data.diagnosis,\n                                remarks: data.remarks,\n                                visits: data.visits,\n                                amount: data.amount\n                            };\n                            this.props.physicians.push(tempData);\n                            this.props.refreshPhysiciansStateChange();\n                            this.setState({\n                                physician: { value: '', label: '' },\n                                diagnosis: { value: '', label: '' },\n                                type: '',\n                                remarks: '',\n                                visits: 0,\n                                amount: 0\n                            });\n                        }}/>\n                </div>\n                <div className='sub-section'>\n                    <CRUDTable \n                        className='custom-table'\n                        placeholder='PHYSICIANS'\n                        cols={['Specialization - Doctor Name', 'Diagnosis', 'Remarks', 'No. of Visits', 'Amount']} \n                        rows={this.props.physicians}\n                        onSaveEditRow={(index: number, data: any) => {\n                            // this.props.editPhysician(index, data);\n                            this.props.physicians[index] = data;\n                            this.props.refreshPhysiciansStateChange();\n                        }}\n                        onDeleteRow={(index: number) => {\n                            // this.props.deletePhysician(index);\n                            this.props.physicians.splice(index, 1);\n                            this.props.refreshPhysiciansStateChange();\n                        }}\n                        onHeaderFormat={(colIndex: number, colName: string) => {\n                            return this.onFormatTableHeader(colIndex, colName);\n                        }} \n                        onFormat={(_rowIndex: number, colIndex: number, value: any) => {\n                            return this.onFormatCRUDTable(colIndex, value);\n                        }}\n                        editField={(colIndex: number, currentVal: any, onChange: any) => {\n                            if (colIndex === 0) {\n                                return (\n                                    <DetailedDropdown\n                                        detail={currentVal.params[0]}\n                                        choices={this.props.physiciansList}\n                                        value={currentVal}\n                                        onChange={(value: DropdownChoice) => onChange({\n                                            value: value.value,\n                                            label: value.label,\n                                            params: [value.params ? value.params[0] : '', currentVal.params[1]]\n                                        })}/>\n                                );\n                            } else if (colIndex === 1) {\n                                return (\n                                <div>{currentVal.value}</div>\n                                    // <DetailedDropdown\n                                    //     choices={this.props.diagnosesList.map(value => {\n                                    //         return value.diagnosis; \n                                    //     })}\n                                    //     value={currentVal}\n                                    //     onChange={(value: DropdownChoice) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 2) {\n                                return (\n                                    <InputField\n                                        value={currentVal}\n                                        onChange={(value: string) => onChange(value)}/>\n                                );\n                                \n                            } else if (colIndex === 3) {\n                                return (\n                                    <NumberField\n                                        value={currentVal}\n                                        onChange={(value: number) => onChange(value)}/>\n                                );\n                            \n                            } else {\n                                return (\n                                    <DetailedNumberField\n                                        detail='PHP'\n                                        value={currentVal}\n                                        onChange={(value: number) => onChange(value)}/>\n                                );\n                            }\n                        }} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { CRUDTable } from 'Pages/CustomerCarePage/UpdateTicketPage/Components/CRUDTable';\nimport { Grid, TableCell } from '@material-ui/core';\nimport { DetailedDropdown } from 'Pages/CustomerCarePage/Components/DetailedDropdown';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { DatePicker } from 'Pages/CustomerCarePage/Components/DatePicker';\nimport { DetailedNumberField } from 'Pages/CustomerCarePage/Components/DetailedNumberField';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { DropdownChoice } from 'Pages/CustomerCarePage/Models';\nimport { ProcedureData, DiagnosisData } from '../UpdateTicketProps';\n\ninterface IProps {\n    procedures: ProcedureData[];\n    proceduresList: DropdownChoice[];\n    diagnosesList: DiagnosisData[];\n    physiciansList: DropdownChoice[];\n    // addProcedure: (procedure: ProcedureData) => void;\n    // editProcedure: (index: number, procedure: ProcedureData) => void;\n    // deleteProcedure: (index: number) => void;\n    refreshProceduresStateChange: () => void;\n}\n\ninterface IStates {\n    procedure: DropdownChoice;\n    diagnosis: DropdownChoice;\n    physician: DropdownChoice;\n    remarks: string;\n    date: Date;\n    amount: number;\n}\n\nexport class ProceduresSection extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            procedure: { value: '', label: '' },\n            diagnosis: { value: '', label: '' },\n            physician: { value: '', label: '' },\n            remarks: '',\n            date: new Date(),\n            amount: 0\n        }\n    }\n\n    onFormatTableHeader = (colIndex: number, value: any) => {\n        return (\n            colIndex === 0 ? (\n                <TableCell style={{minWidth: '200px'}}>{value}</TableCell>\n            ) : colIndex === 1 ? (\n                <TableCell style={{minWidth: '100px'}}>{value}</TableCell>\n            ) : colIndex === 2 || colIndex === 3 ? (\n                <TableCell style={{minWidth: '150px'}}>{value}</TableCell>\n            ) : colIndex === 5 ? (\n                <TableCell style={{textAlign: 'right', minWidth: '100px'}}>{value}</TableCell>\n            ) : (\n                <TableCell style={{minWidth: '150px'}}>{value}</TableCell>\n            )\n        );\n    }\n\n    onFormatCRUDTable = (colIndex: number, value: any) => {\n        return (\n            colIndex === 0 ? (\n                <div>{value.value + ' - ' + value.label}</div>\n            ) : colIndex === 1 ? (\n                <div>{value.value}</div>\n            ) : colIndex === 2 ? (\n                <div>{value.label}</div>\n            ) : colIndex === 3 ? (\n                <div>{GlobalFunction.toCommonDateString(value)}</div>\n            ) : colIndex === 5 ? (\n                <div style={{textAlign: 'right'}}>\n                    {GlobalFunction.formatNumber(value, true) + ' PHP'}\n                </div>\n            ) : (value)\n        );\n    }\n\n    render(): JSX.Element {\n\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Add Procedure</div>\n                <div className='sub-section'>\n                    <Grid container spacing={2}>\n                        <Grid item xs={6}>\n                            <DetailedDropdown \n                                placeholder='Procedure'\n                                value={this.state.procedure}\n                                choices={this.props.proceduresList}\n                                onChange={(value: DropdownChoice) => {\n                                    this.setState({procedure: value});\n                                }}/>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <DetailedDropdown \n                                placeholder='Diagnosis'\n                                value={this.state.diagnosis}\n                                choices={this.props.diagnosesList.map(value => {\n                                    return value.diagnosis; \n                                })}\n                                onChange={(value: DropdownChoice) => {\n                                    this.setState({diagnosis: value});\n                                }}/>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <DetailedDropdown \n                                placeholder='Doctor'\n                                detail={this.state.physician.params ? this.state.physician.params[0] : undefined}\n                                value={this.state.physician}\n                                choices={this.props.physiciansList}\n                                onChange={(value: DropdownChoice) => {\n                                    this.setState({physician: value});\n                                }}/>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <InputField \n                                placeholder='Remarks'\n                                value={this.state.remarks}\n                                charLimit={100}\n                                onChange={(value: string) => {\n                                    this.setState({remarks: value});\n                                }}/>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <DatePicker \n                                placeholder='Date'\n                                value={this.state.date}\n                                onChange={(value: Date) => {\n                                    this.setState({date: value});\n                                }}/>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <DetailedNumberField \n                                placeholder='Amount'\n                                detail='PHP'\n                                value={this.state.amount}\n                                onChange={(value: number) => {\n                                    this.setState({amount: value});\n                                }}/>\n                        </Grid>\n                    </Grid>\n                    <div style={{paddingTop: '5px'}} />\n                    <TextButton \n                        label='Add procedure' \n                        icon={faPlus}\n                        onClick={() => {\n                            var data = this.state;\n                            const tempData = {\n                                procedure: data.procedure,\n                                diagnosis: data.diagnosis,\n                                physician: data.physician,\n                                date: data.date,\n                                remarks: data.remarks,\n                                amount: data.amount\n                            }\n                            // this.props.addProcedure(tempData);\n                            this.props.procedures.push(tempData);\n                            this.props.refreshProceduresStateChange();\n                            this.setState({\n                                procedure: { value: '', label: '' },\n                                diagnosis: { value: '', label: '' },\n                                physician: { value: '', label: '' },\n                                remarks: '',\n                                date: new Date(),\n                                amount: 0\n                            });\n                        }}/>\n                </div>\n                <div className='sub-section'>\n                    <CRUDTable \n                        className='custom-table'\n                        placeholder='PROCEDURES'\n                        \n                        cols={['Procedure', 'Diagnosis', 'Doctor', 'Date', 'Remarks', 'Amount']} \n                        rows={this.props.procedures}\n                        onSaveEditRow={(index: number, data: any) => {\n                            // this.props.editProcedure(index, data);\n                            this.props.procedures[index] = data;\n                            this.props.refreshProceduresStateChange();\n                        }}\n                        onDeleteRow={(index: number) => {\n                            // this.props.deleteProcedure(index);\n                            this.props.procedures.splice(index, 1);\n                            this.props.refreshProceduresStateChange();\n                        }}\n                        onHeaderFormat={(colIndex: number, colName: string) => {\n                            return this.onFormatTableHeader(colIndex, colName);\n                        }}\n                        onFormat={(_rowIndex: number, colIndex: number, value: any) => {\n                            return this.onFormatCRUDTable(colIndex, value);\n                        }}\n                        editField={(colIndex: number, currentVal: any, onChange: any) => {\n                            if (colIndex === 0) {\n                                return (\n                                    <DetailedDropdown\n                                        choices={this.props.proceduresList}\n                                        value={currentVal}\n                                        onChange={(value: DropdownChoice) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 1) {\n                                return (\n                                    <DetailedDropdown\n                                        choices={this.props.diagnosesList.map(value => {\n                                            return value.diagnosis; \n                                        })}\n                                        value={currentVal}\n                                        onChange={(value: DropdownChoice) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 2) {\n                                return (\n                                    <DetailedDropdown\n                                        detail={currentVal.params[0]}\n                                        choices={this.props.physiciansList}\n                                        value={currentVal}\n                                        onChange={(value: DropdownChoice) => onChange(value)}/>\n                                ); \n                            } else if (colIndex === 3) {\n                                return (\n                                    <DatePicker\n                                        value={currentVal}\n                                        onChange={(value: Date) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 4) {\n                                return (\n                                    <InputField\n                                        value={currentVal}\n                                        charLimit={100}\n                                        onChange={(value: string) => onChange(value)}/>\n                                );\n                            \n                            } else {\n                                return (\n                                    <DetailedNumberField\n                                        detail='PHP'\n                                        value={currentVal}\n                                        onChange={(value: number) => onChange(value)}/>\n                                );\n                            }\n                        }} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { CRUDTable } from 'Pages/CustomerCarePage/UpdateTicketPage/Components/CRUDTable';\nimport { Grid, TableCell } from '@material-ui/core';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { DetailedNumberField } from 'Pages/CustomerCarePage/Components/DetailedNumberField';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { DropdownChoice } from 'Pages/CustomerCarePage/Models';\nimport { ItemData } from '../UpdateTicketProps';\n\ninterface IProps {\n    items: ItemData[];\n    // addItem: (item: ItemData) => void;\n    // editItem: (index: number, item: ItemData) => void;\n    // deleteItem: (index: number) => void;\n    refreshItemsStateChange: () => void;\n}\n\ninterface IStates {\n    name: string;\n    type: DropdownChoice;\n    amount: number;\n}\n\nexport class OtherDetailsSection extends React.Component<IProps, IStates> {\n\n    itemTypes: DropdownChoice[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            name: '',\n            type: { value: '', label: '' },\n            amount: 0\n        }\n\n        this.itemTypes = [\n            { value: '1', label: 'Medicine' },\n            { value: '2', label: 'Non-coverable' },\n            { value: '3', label: 'Rooms' },\n            { value: '4', label: 'Miscellaneous' }\n        ]\n    }\n\n    onFormatTableHeader = (colIndex: number, value: any) => {\n        return (\n            colIndex === 2 ? (\n                <TableCell style={{textAlign: 'right', minWidth: '200px'}}>{value}</TableCell>\n            ) : (\n                <TableCell style={{minWidth: '300px'}}>{value}</TableCell>\n            )\n        );\n    }\n\n    onFormatCRUDTable = (colIndex: number, value: any) => {\n        return (\n            colIndex === 2 ? (\n                <div style={{textAlign: 'right'}}>\n                    {GlobalFunction.formatNumber(value, true) + ' PHP'}\n                </div>\n            ) : (value)\n        );\n    }\n\n    render(): JSX.Element {\n        console.log(this.props.items);\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Add Other Details</div>\n                <div className='sub-section'>\n                    <Grid container spacing={2}>\n                        <Grid item xs={6}>\n                            <InputField \n                                placeholder='Item'\n                                value={this.state.name}\n                                onChange={(value: string) => {\n                                    this.setState({name: value});\n                                }}/>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <Dropdown \n                                placeholder='Type'\n                                value={this.state.type}\n                                choices={this.itemTypes}\n                                onChange={(value: DropdownChoice) => {\n                                    this.setState({type: value});\n                                }}/>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <DetailedNumberField \n                                placeholder='Amount'\n                                detail='PHP'\n                                value={this.state.amount}\n                                onChange={(value: number) => {\n                                    this.setState({amount: value});\n                                }}/>\n                        </Grid>\n                    </Grid>\n                    <div style={{paddingTop: '5px'}} />\n                    <TextButton \n                        label='Add item' \n                        icon={faPlus}\n                        onClick={() => {\n                            var state = this.state;\n                            const tempData = {\n                                name: state.name,\n                                type: state.type.label,\n                                amount: state.amount\n                            }\n                            // this.props.addItem(tempData);\n                            this.props.items.push(tempData);\n                            this.props.refreshItemsStateChange();\n                            this.setState({\n                                name: '',\n                                type: { value: '', label: '' },\n                                amount: 0\n                            });\n                        }}/>\n                </div>\n                <div className='sub-section'>\n                    <CRUDTable \n                        className='custom-table'\n                        placeholder='OTHER DETAILS'\n                        \n                        cols={['Item', 'Type', 'Amount']} \n                        rows={this.props.items}\n                        onSaveEditRow={(index: number, data: any) => {\n                            // this.props.editItem(index, data);\n                            this.props.items[index] = data;\n                            this.props.refreshItemsStateChange();\n                        }}\n                        onDeleteRow={(index: number) => {\n                            // this.props.deleteItem(index);\n                            this.props.items.splice(index, 1);\n                            this.props.refreshItemsStateChange();\n                        }}\n                        onHeaderFormat={(colIndex: number, colName: string) => {\n                            return this.onFormatTableHeader(colIndex, colName);\n                        }}\n                        onFormat={(_rowIndex: number, colIndex: number, value: any) => {\n                            return this.onFormatCRUDTable(colIndex, value);\n                        }}\n                        editField={(colIndex: number, currentVal: any, onChange: any) => {\n                            if (colIndex === 0) {\n                                return (\n                                    <InputField\n                                        value={currentVal}\n                                        onChange={(value: string) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 1) {\n                                return (\n                                    <Dropdown\n                                        choices={this.itemTypes}\n                                        value={currentVal}\n                                        onChange={(value: DropdownChoice) => onChange(value)}/>\n                                );\n                            } else {\n                                return (\n                                    <DetailedNumberField\n                                        detail='PHP'\n                                        value={currentVal}\n                                        onChange={(value: number) => onChange(value)}/>\n                                );\n                            }\n                        }} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { Grid } from '@material-ui/core';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { DetailedNumberField } from 'Pages/CustomerCarePage/Components/DetailedNumberField';\nimport { DatePicker } from 'Pages/CustomerCarePage/Components/DatePicker';\nimport { DropdownChoice } from 'Pages/CustomerCarePage/Models';\n\ninterface IProps {\n    dateAdmitted: Date;\n    coverage: DropdownChoice;\n    philhealthAmount: number;\n    finalBill: number;\n    dischargeDate: Date | null;\n    onUpdateTicketStateChange: (attrName: string, value: any) => void;\n}\n\ninterface IStates {\n    ticketNo: string;\n    paidBy: string;\n}\n\nexport class DischargeDetailsSection extends React.Component<IProps, IStates> {\n\n    coverageList: DropdownChoice[];\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            ticketNo: '',\n            paidBy: ''\n        }\n\n        this.coverageList = [\n            { value: '1', label: 'Filed' },\n            { value: '2', label: 'Corporate Guarantee' },\n            { value: '3', label: 'Not Compensable' },\n            { value: '4', label: 'Less than 24 hours' },\n            { value: '5', label: 'Paid' },\n            { value: '6', label: 'PH Rider' },\n            { value: '7', label: 'Non-PNDF' }\n        ]\n    }\n\n\n    render(): JSX.Element {\n\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Set PhilHealth</div>\n                <div className='sub-section'>\n                    <Grid container spacing={2}>\n                        <Grid item xs={6}>\n                            <Dropdown \n                                placeholder='Coverage'\n                                choices={this.coverageList}\n                                value={this.props.coverage}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.onUpdateTicketStateChange('coverage', value);\n                                }} />\n                        </Grid>\n                        {this.props.coverage.value === '2' ? (\n                            <Grid item xs={3}>\n                                <InputField \n                                    placeholder='Ticket Number'\n                                    value={this.state.ticketNo}\n                                    onChange={(value: string) => {\n                                        this.setState({ticketNo: value});\n                                    }} />\n                            </Grid>\n                        ) : null}\n                        {this.props.coverage.value === '5' ? (\n                        <Grid item xs={3}>\n                            <InputField \n                                placeholder='Paid by'\n                                value={this.state.paidBy}\n                                onChange={(value: string) => {\n                                    this.setState({paidBy: value});\n                                }} />\n                        </Grid>\n                        ) : null}\n                        {this.props.coverage.value === '1' ||\n                            this.props.coverage.value === '2' ||\n                            this.props.coverage.value === '5' ? (\n                            <Grid item xs={3}>\n                                <DetailedNumberField \n                                    placeholder='Amount'\n                                    detail='PHP'\n                                    value={this.props.philhealthAmount}\n                                    onChange={(value: number) => {\n                                        this.props.onUpdateTicketStateChange('philhealthAmount', value);\n                                    }} />\n                            </Grid>\n                        ) : null}\n\n                        \n                        \n                    </Grid>\n                </div>\n                <div className='header-1'>Add Discharge Details</div>\n                <div className='sub-section'>\n                    <Grid container spacing={2}>\n                        <Grid item xs={3}>\n                            <DetailedNumberField \n                                placeholder='Final Hospital Bill Amount'\n                                detail='PHP'\n                                value={this.props.finalBill}\n                                onChange={(value: number) => {\n                                    this.props.onUpdateTicketStateChange('finalBill', value);\n                                }} />\n                        </Grid>\n                        <Grid item xs={3}>\n                            <DatePicker \n                                placeholder='Discharge Date'\n                                value={this.props.dischargeDate}\n                                minDate={this.props.dateAdmitted}\n                                onChange={(value: Date) => {\n                                    this.props.onUpdateTicketStateChange('dischargeDate', value);\n                                }} />\n                        </Grid>\n                    </Grid>\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { CRUDTable } from 'Pages/CustomerCarePage/UpdateTicketPage/Components/CRUDTable';\nimport { Grid } from '@material-ui/core';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { CustomDropzone } from 'Pages/CustomerCarePage/Components/CustomDropzone';\nimport { FileData } from '../UpdateTicketProps';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\n\ninterface IProps {\n    files: FileData[];\n    // addFile: (file: FileData) => void;\n    // editFile: (index: number, file: FileData) => void;\n    // deleteFile: (index: number) => void;\n    refreshFilesStateChange: () => void;\n}\n\ninterface IStates {\n    docName: string;\n    file: File | null;\n}\n\nexport class UploadedDocumentsSection extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            docName: '',\n            file: null\n        }\n    }\n\n    render(): JSX.Element {\n\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Upload Documents</div>\n                <div className='sub-section'>\n                    <Grid container>\n                        <Grid item xs={6}>\n                            <CustomDropzone\n                                onDrop={(files: File[]) => {\n                                    this.setState({file: files[0]});\n                                }} />\n                            <div>{this.state.file ? this.state.file.name : null}</div>\n                            <div className='sub-section' />\n                            <InputField \n                                placeholder='Document Name' \n                                value={this.state.docName}\n                                onChange={(value: string) => {\n                                    this.setState({docName: value});\n                                }} />\n                        </Grid>\n                        <Grid item xs={6} />\n                    </Grid>\n                    <div style={{paddingTop: '5px'}} />\n                    <TextButton \n                        label='Add document' \n                        icon={faPlus}\n                        onClick={() => {\n                            var state = this.state;\n                            if (state.file !== null) {\n                                const tempData = {\n                                    docName: state.docName,\n                                    file: state.file\n                                }\n                                // this.props.addFile(tempData);\n                                this.props.files.push(tempData);\n                                this.props.refreshFilesStateChange();\n                                this.setState({\n                                    docName: '',\n                                    file: null\n                                });\n                            }\n                        }}/>\n                </div>\n                \n                <div className='sub-section'>\n                    <CRUDTable \n                        className='custom-table'\n                        placeholder='UPLOADED DOCUMENTS'\n                        \n                        cols={['Document Name', 'Filename']} \n                        rows={this.props.files}\n                        onSaveEditRow={(index: number, data: any) => {\n                            // this.props.editFile(index, data);\n                            \n                            this.props.files[index] = data;\n                            this.props.refreshFilesStateChange();\n                        }}\n                        onDeleteRow={(index: number) => {\n                            // this.props.deleteFile(index);\n                            this.props.files.splice(index, 1);\n                            this.props.refreshFilesStateChange();\n                        }}\n                        onFormat={(_rowIndex: number, colIndex: number, value: any) => {\n                            return (colIndex === 1 ? (value.name) : (value));\n                        }}\n                        editField={(colIndex: number, currentVal: any, onChange: any) => {\n                            if (colIndex === 0) {\n                                return (\n                                    <InputField\n                                        value={currentVal}\n                                        onChange={(value: string) => onChange(value)}/>\n                                );\n                            }\n                            return currentVal.name;\n                        }} />\n                </div>\n\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Button } from '@material-ui/core';\nimport { Loading } from 'Pages/CustomerCarePage/Components/Loading';\n\ninterface IProps {\n    isUpdating: boolean;\n    onUpdateTicket: () => void;\n    onSaveForNow: () => void;\n    onAssign: () => void;\n    onEscalate: () => void;\n    onResolve: () => void;\n}\n\nexport class UpdateTicketFooter extends React.Component<IProps> {\n    \n    constructor(props: IProps) {\n        super(props);\n    }\n\n    shouldComponentUpdate(_props: IProps, _state: any) {\n        return false;\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='footer'>\n                <Button className='button-transparent'>\n                        Save For Now\n                </Button>\n                <Button \n                    className='button-neutral'\n                    onClick={this.props.onAssign}>\n                    Assign\n                </Button>\n                <Button \n                    className='button-error'\n                    onClick={this.props.onEscalate}>\n                    Escalate\n                </Button>\n                <Button \n                    className='button'\n                    style={{minWidth: '150px'}}\n                    onClick={this.props.onUpdateTicket}>\n                    {this.props.isUpdating ? (\n                        <Loading color='#FFFFFF' size={32} />\n                    ) : ('Update Ticket')}\n                    \n                </Button>\n                <Button \n                    className='button'\n                    style={{minWidth: '150px'}}\n                    onClick={this.props.onResolve}>\n                    {this.props.isUpdating ? (\n                        <Loading color='#FFFFFF' size={32} />\n                    ) : ('Proceed with Final Assessment')}\n                </Button>\n                \n            </div>\n        );\n    }\n}","\nimport * as React from 'react';\nimport { Grid, TableCell, TableRow } from '@material-ui/core';\nimport { InquiryData, DropdownChoice } from 'Pages/CustomerCarePage/Models';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { faMinusCircle, faPlus, faPen } from '@fortawesome/free-solid-svg-icons';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { InputChip } from 'Pages/CustomerCarePage/Components/InputChip';\nimport { CustomChip } from 'Pages/CustomerCarePage/Components/CustomChip';\nimport { CustomDropzone } from 'Pages/CustomerCarePage/Components/CustomDropzone';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\n\ninterface IProps {\n    inquiries: InquiryData[];\n    refreshInquiryState: () => void;\n}\n\ninterface IStates {\n    inquiry: DropdownChoice;\n}\n\nexport class UpdateInquirySection extends React.Component<IProps, IStates> {\n\n    inquiries: DropdownChoice[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            inquiry: { value: '', label: '' }\n        };\n\n        this.inquiries = [\n            { value: '1', label: 'Member Status / Card Inquiry' },\n            { value: '2', label: 'Member Network Access Inquiry' },\n            { value: '3', label: 'Member Benefit Inquiry - General [Outpatient]' },\n            { value: '4', label: 'Member Benefit Inquiry - General [Inpatient]' },\n            { value: '5', label: 'Member Benefit Inquiry - General [Emergency]' },\n            { value: '6', label: 'Member Benefit Inquiry - General [Dental]' },\n            { value: '7', label: 'Member Benefit Inquiry - General [APE / ECU]' },\n            { value: '8', label: 'Member Benefit Inquiry - General [Riders]' },\n            { value: '9', label: 'Member Coverage Inquiry - Specific Benefit' },\n            { value: '10', label: 'Member Availment Inquiry - CanAvail' },\n            { value: '11', label: 'Member Eligibility Inquiry' },\n            { value: '12', label: 'Reimbursement Status Inquiry' },\n            { value: '13', label: 'General Affiliated Network Inquiry - Facility' },\n            { value: '14', label: 'General Affiliated Network Inquiry - Doctor' },\n            { value: '15', label: 'General Affiliated Network Inquiry - Dentist' },\n            { value: '16', label: 'Procedural Inquiry - Outpatient' },\n            { value: '17', label: 'Procedural Inquiry - Inpatient' },\n            { value: '18', label: 'Procedural Inquiry - Emergency' },\n            { value: '19', label: 'Procedural Inquiry - Dental' },\n            { value: '20', label: 'Procedural Inquiry - APE / ECU' },\n            { value: '21', label: 'Procedural Inquiry - Member Enrolment / Cancellation / Update' },\n            { value: '22', label: 'Procedural Inquiry - Reimbursement' },\n            { value: '23', label: 'Procedural Inquiry - Others' }\n        ];\n    }\n\n    getFilteredInquiries(): DropdownChoice[] {\n        let filteredInquiries: DropdownChoice[] = [];\n        for (var i = 0; i < this.inquiries.length; i++) {\n            let isSame = false;\n            for (var j = 0; j < this.props.inquiries.length; j++) {\n                isSame = (\n                    this.props.inquiries[j].inquiry.value === \n                    this.inquiries[i].value ? true : isSame);\n            }\n            if (!isSame) {\n                filteredInquiries = filteredInquiries.concat(this.inquiries[i]);\n            }\n        }\n        return filteredInquiries;\n    }\n\n    onAddInquiry() {\n        if (this.state.inquiry.value !== '') {\n            this.props.inquiries.push({\n                inquiry: this.state.inquiry,\n                detail: '',\n                specificDetail: [],\n                answer: '',\n                remarks: '',\n                relatedTickets: [],\n                supportDocs: []\n            });\n            \n            this.props.refreshInquiryState();\n            this.setState({inquiry: { value: '', label: '' }});\n        }\n    }\n\n    onRemoveInquiry(index: number) {\n        this.props.inquiries.splice(index, 1);\n        this.props.refreshInquiryState();\n    }\n\n\n    render(): JSX.Element {\n        return (\n            <div className='update-ticket'>\n                <div className='section' style={{paddingRight: '2.5rem'}}>\n                    <div className='header-1'>Update Inquiry</div>\n                    <div className='text'>\n                        Add an inquiry type and then add the question and its details after\n                    </div>\n                    <div className='sub-section'>\n                        {true ? (\n                            <CustomTable \n                                rows={this.props.inquiries}\n                                renderHeader={() => this.renderTableHeader()}\n                                renderRow={(rowData: any, index: number) => \n                                    this.renderTableRow(rowData, index)} />\n                        ) : (null)}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n        return (\n            <>\n            <TableCell>\n                <Dropdown \n                    choices={this.getFilteredInquiries()}\n                    value={this.state.inquiry}\n                    onChange={(value: DropdownChoice) => {\n                        this.setState({inquiry: value});\n                    }} />\n            </TableCell>\n            <TableCell style={{width: '200px', textAlign: 'center'}}>\n                <TextButton \n                    icon={faPlus} \n                    label=\"Add inquiry\"\n                    onClick={() => {\n                        this.onAddInquiry();\n                    }} />\n            </TableCell>\n            </>\n        );\n    }\n\n    renderTableRow(inquiry: InquiryData, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                <TableCell colSpan={2}>\n                    <Grid container spacing={1}>\n                        <Grid item xs={11} className='header-2'>\n                            {inquiry.inquiry.label}\n                        </Grid>\n                        <Grid item xs={1} style={{textAlign: 'right'}}>\n                            <IconButton\n                                icon={faPen}\n                                onClick={() => {\n                                    this.onRemoveInquiry(index);\n                                }}/>\n                            <IconButton\n                                icon={faMinusCircle}\n                                onClick={() => {\n                                    this.onRemoveInquiry(index);\n                                }}/>\n                        </Grid>\n                    </Grid>\n                    <div style={{position: 'relative'}}>\n                        <div style={{paddingTop: '0.5rem'}} />\n                        <div className='line-border' />\n                        <div style={{paddingTop: '0.5rem'}} />\n                        <Grid container spacing={2}>\n                            <Grid item xs={6}>\n                                <InputField \n                                    placeholder='Details of inquiry (Question)'\n                                    value={inquiry.detail}\n                                    onChange={(value: string) => {\n                                        inquiry.detail = value;\n                                        this.props.refreshInquiryState();\n                                    }} />\n                            </Grid>\n                            <Grid item xs={6}>\n                                <InputChip \n                                    placeholder='Specific Details (Type benefit/doctor/facility to describe inquiry, enter to add)'\n                                    value={inquiry.specificDetail}\n                                    onAdd={(value: string) => {\n                                        inquiry.specificDetail.push(value);\n                                        this.props.refreshInquiryState();\n                                    }}\n                                    onDelete={(index: number) => {\n                                        inquiry.specificDetail.splice(index, 1);\n                                        this.props.refreshInquiryState();\n                                    }} />\n                            </Grid>\n                        </Grid>\n                        <InputField \n                            placeholder='Answer'\n                            value={inquiry.answer}\n                            onChange={(value: string) => {\n                                inquiry.answer = value;\n                                this.props.refreshInquiryState();\n                            }} />\n                        <InputField \n                            placeholder='Remarks (Optional)'\n                            value={inquiry.remarks}\n                            onChange={(value: string) => {\n                                inquiry.remarks = value;\n                                this.props.refreshInquiryState();\n                            }} />\n                        <Grid container spacing={2}>\n                            <Grid item xs={6}>\n                                <InputChip \n                                    placeholder='Related Tickets (Optional)'\n                                    value={inquiry.relatedTickets}\n                                    onAdd={(value: string) => {\n                                        inquiry.relatedTickets.push(value);\n                                        this.props.refreshInquiryState();\n                                    }}\n                                    onDelete={(index: number) => {\n                                        inquiry.relatedTickets.splice(index, 1);\n                                        this.props.refreshInquiryState();\n                                    }} />\n                            </Grid>\n                            <Grid item xs={4}>\n                                <CustomDropzone \n                                    onDrop={(files: File[]) => {\n                                        inquiry.supportDocs.push(files[0]);\n                                        this.props.refreshInquiryState();\n                                    }}/>\n                            </Grid>\n                            <Grid item xs={2}>\n                                {inquiry.supportDocs.map((doc, index) => {\n                                    return (\n                                        <CustomChip\n                                            label={doc.name}\n                                            value={index.toString()}\n                                            onDelete={(value: string) => {\n                                                inquiry.supportDocs.splice(parseInt(value), 1);\n                                                this.props.refreshInquiryState();\n                                            }} />\n                                    );\n                                })}\n                            </Grid>\n                        </Grid>\n                    </div>\n                </TableCell>\n            </TableRow>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\nimport { Tabs, Tab } from '@material-ui/core';\n\ninterface IProps {\n    tabList: { value: number, label: string }[];\n    selectedTab: number;\n    setSelectedTab: (index: number) => void;\n}\n\nexport class CustomTabs extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        return (\n            <Tabs\n                className='tabs' \n                value={this.props.selectedTab}\n                variant='scrollable'\n                scrollButtons='auto'\n                indicatorColor='primary'\n                onChange={(_event: React.ChangeEvent<{}>, value: number) => {\n                    this.props.setSelectedTab(value );\n                }}>\n                {this.props.tabList.map(tab => {\n                    return <Tab value={tab.value} label={tab.label} />\n                })}\n            </Tabs>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\nimport { Modal, Fade } from '@material-ui/core';\nimport { IconButton } from './IconButton';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\n\ninterface IProps {\n    className?: string;\n    isOpen: boolean;\n    renderHeader: () => JSX.Element;\n    renderContent: () => JSX.Element;\n    renderFooter: () => JSX.Element;\n    handleClose?: () => void;\n}\n\nexport class CustomModal extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        return (\n            <div>\n                <Modal\n                    className={`${this.props.className ? this.props.className : ''} custom-modal`}\n                    open={this.props.isOpen}\n                    onClose={this.props.handleClose}\n                    closeAfterTransition>\n                    <Fade in={this.props.isOpen}>\n                        <div className='modal'>\n                            {this.props.handleClose ? (\n                                <div style={{textAlign: 'right'}}>\n                                    <IconButton\n                                        icon={faTimes} \n                                        size='1x' \n                                        onClick={this.props.handleClose} />\n                                </div>\n                                \n                            ) : null}\n                            <div className='header'>\n                                {this.props.renderHeader()}\n                            </div>\n                            <div className='content'>\n                                {this.props.renderContent()}\n                            </div>\n                            <div className='bottom'>\n                                {this.props.renderFooter()}\n                            </div>\n                        </div>\n                    </Fade>\n                </Modal>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { match } from \"react-router-dom\";\nimport {\n    UpdateData, \n    AccommodationData, \n    DiagnosisData, \n    PhysicianData, \n    ProcedureData,\n    ItemData,\n    FileData\n} from './UpdateTicketProps';\nimport { Grid, Button } from '@material-ui/core';\nimport { SummarySection } from './Components/SummarySection';\nimport { UpdateSection } from './Components/UpdateSection';\nimport { API } from '../API';\nimport { AccommodationsSection } from './Components/AccommodationsSection';\nimport { DiagnosesSection } from './Components/DiagnosesSection';\nimport { PhysiciansSection } from './Components/PhysiciansSection';\nimport { ProceduresSection } from './Components/ProceduresSection';\nimport { OtherDetailsSection } from './Components/OtherDetailsSection';\nimport { DischargeDetailsSection } from './Components/DischargeDetailsSection';\nimport { UploadedDocumentsSection } from './Components/UploadedDocumentsSection';\nimport { MemberDataSection } from '../MemberDataSection';\nimport { DropdownChoice, TicketData, MemberData, InquiryData } from '../Models';\nimport { UpdateTicketFooter } from './Components/UpdateTicketFooter';\nimport { UpdateInquirySection } from './Components/UpdateInquirySection';\nimport { CustomTabs } from '../Components/CustomTab';\nimport { Payloads } from '../Payloads';\nimport { Processmaker } from '../Processmaker';\nimport { Loading } from '../Components/Loading';\nimport { CustomModal } from '../Components/CustomModal';\n\ninterface IProps {\n    required: string;\n    match: match<MatchParams>;\n    history: any;\n}\n\ninterface MatchParams {\n    id: string;\n}\n\ninterface IStates {\n    tabSelected: number;\n    loadedResources: number;\n    isAssessmentModalOpen: boolean;\n\n    member?: MemberData;\n    ticket: TicketData;\n    \n    /* Inpatient states */\n    confinement?: ConfinementDetails;\n\n    /* Inquiry States */\n    inquiries?: InquiryData[];\n}\n\nexport interface ConfinementDetails {\n    provider: DropdownChoice;\n    dateAdmitted: Date;\n    confinementKind: string;\n    giftGiven: boolean;\n    coverage: DropdownChoice;\n    philhealthAmount: number;\n    finalBill: number;\n    dischargeDate: Date | null;\n    primaryDiagnosisIndex: number;\n\n    updates: UpdateData[];\n    accommodations: AccommodationData[];\n    diagnoses: DiagnosisData[];\n    physicians: PhysicianData[];\n    procedures: ProcedureData[];\n    items: ItemData[];\n    files: FileData[];\n}\n\ninterface ErrorMessageFormat {\n    message: string;\n    targets: string[];\n}\n\nexport class UpdateTicketPage extends React.Component<IProps, IStates> {\n\n    static RESOURCES_TO_LOAD = 5;\n\n    tabList: { value: number, label: string }[];\n    icd10Codes: DropdownChoice[];\n    cptCodes: DropdownChoice[];\n    facilities: DropdownChoice[];\n    doctors: DropdownChoice[];\n    agents: DropdownChoice[];\n\n    errors: ErrorMessageFormat[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            tabSelected: 1,\n            loadedResources: 0,\n            isAssessmentModalOpen: false,\n\n            ticket: {\n                ticketChannel: '',\n                transactionNo: '',\n                ticketSource: '',\n                memberName: '',\n                clientName: '',\n                brokerName: '',\n                facility: { value: '', label: '' },\n                department: '',\n                callerName: '',\n                contactNo: '',\n                ticketType: '',\n                specificType: '',\n                urgency: '',\n                agent: { id: '', name: '' },\n                additionalNotes: '',\n                additionalFiles: [],\n                ticketNo: '',\n                status: 'Open',\n                createdBy: { id: '1', name: 'Jilmer Cariaso - Static' },\n                dateCreated: new Date(),\n                dateUpdated: new Date(),\n                dateEscalated: null\n            }\n        };\n\n        this.tabList = [\n            { value: 1, label: 'Summary' }, \n            { value: 2, label: 'Updates' }, \n            { value: 3, label: 'Room Accommodations' }, \n            { value: 4, label: 'Diagnoses' }, \n            { value: 5, label: 'Physicians' }, \n            { value: 6, label: 'Procedures' },  \n            { value: 7, label: 'PhilHealth & Discharge Details' }, \n            { value: 8, label: 'Other Details' }, \n            { value: 9, label: 'Uploaded Documents' }\n        ];\n\n        this.facilities = [];\n        this.agents = [];\n        this.doctors = [];\n        this.cptCodes = [];\n        this.icd10Codes = [];\n        this.errors = [];\n    }\n\n    componentDidMount() {\n\n        API.get('customer-care/tickets/' + this.props.match.params['ticketId'], \n            (response) => {\n                console.log(response);\n                this.setState({loadedResources: this.state.loadedResources + 1});\n                const ticketCategory = response.ticket_category;\n                const confinement = ticketCategory.confinement_details;\n                const inquiry = ticketCategory.inquiry_details;\n\n                this.setState({ticket: {\n                    ticketChannel: response.received_via,\n                    transactionNo: response.transaction_no,\n                    ticketSource: response.received_from,\n                    memberName: response.member_name,\n                    clientName: response.corporate_client,\n                    brokerName: response.broker,\n                    facility: { value: '', label: response.hospital_name },\n                    department: response.department,\n                    callerName: response.caller_name,\n                    contactNo: response.contact_no,\n                    ticketType: ticketCategory.ticket_type,\n                    specificType: ticketCategory.specific_type,\n                    urgency: ticketCategory.urgency,\n                    agent: { id: '', name: ticketCategory.assign_to },\n                    additionalNotes: response.additional_notes,\n                    additionalFiles: [],\n                    ticketNo: this.props.match.params['appNo'],\n                    status: response.status,\n                    createdBy: { id: '1', name: 'Jilmer Cariaso - Static' },\n                    dateCreated: new Date(response.date_created),\n                    dateUpdated: new Date(response.date_updated),\n                    dateEscalated: new Date(response.date_escalated)\n                }});\n\n                if (confinement) {\n                    const providerData = confinement.provider.split(' - ');\n                    this.setState({confinement: {\n                        provider: { value: providerData[0], label: providerData[1] },\n                        dateAdmitted: new Date(confinement.date_admitted),\n                        confinementKind: confinement.confinement_kind,\n                        giftGiven: confinement.gift_given,\n                        coverage: { value: '', label: confinement.coverage },\n                        philhealthAmount: confinement.philhealth_amount,\n                        finalBill: confinement.final_bill,\n                        dischargeDate: confinement.discharge_date ? new Date(confinement.discharge_date) : null,\n\n                        primaryDiagnosisIndex: confinement.diagnoses\n                            .map((value, index) => {\n                                if (value.is_primary) {\n                                    return index;\n                                }\n                                return -1;\n                            })\n                            .filter(value => value != -1)[0],\n\n                        updates: confinement.updates.map(value => {\n                            return {\n                                remarks: value.remarks,\n                                date: new Date(value.date),\n                                hospitalBill: value.hospital_bill\n                            };\n                        }),\n                        accommodations: confinement.room_accommodation.map(value => {\n                            return {\n                                roomType: value.room_type,\n                                days: value.no_of_days,\n                                costPerDay: value.cost\n                            };\n                        }),\n                        diagnoses: confinement.diagnoses.map(value => {\n                            return {\n                                diagnosis: { value: value.code, label: value.name },\n                                remarks: value.remarks,\n                                isFinal: value.is_final,\n                                isPrimary: value.is_primary\n                            };\n                        }),\n                        physicians: [].concat(...confinement.diagnoses.map(diagnosis => {\n                            return diagnosis.doctors.map(doctor => {\n                                return {\n                                    physician: {\n                                        value: '',\n                                        label: doctor.name,\n                                        params: [doctor.specialization, doctor.type]\n                                    },\n                                    diagnosis: { value: diagnosis.code, label: diagnosis.name },\n                                    remarks: doctor.remarks,\n                                    visits: doctor.no_of_visits,\n                                    amount: doctor.fee\n                                };\n                            });\n                        })),\n                        procedures: [].concat(...confinement.diagnoses.map(diagnosis => {\n                            return diagnosis.procedures.map(procedure => {\n                                return {\n                                    procedure: { value: procedure.code, label: procedure.name },\n                                    diagnosis: { value: diagnosis.code, label: diagnosis.name },\n                                    physician: { value: '', label: procedure.doctor },\n                                    date: new Date(procedure.date_added),\n                                    remarks: procedure.notes,\n                                    amount: parseInt(procedure.amount)\n                                };\n                            });\n                        })),\n                        items: confinement.others.map(value => {\n                            return {\n                                name: value.name,\n                                type: value.type,\n                                amount: value.amount\n                            };\n                        }),\n                        files: response.supporting_documents.map(value => {\n                            return {\n                                docName: value.name,\n                                file: value.file\n                            };\n                        })\n                    }});\n                }\n                \n                if (inquiry) {\n                    this.setState({inquiries: inquiry.inquiry_list.map(value => {\n                        return {\n                            inquiry: { value: '', label: value.inquiry },\n                            detail: value.value,\n                            specificDetail: value.specific_detail,\n                            answer: value.answer,\n                            remarks: value.remarks,\n                            relatedTickets: value.related_tickets,\n                            supportDocs: value.support_docs\n                        };\n                    })});\n                }\n\n                /* Get Member Details */\n                API.get('customer-care/members/' + response.member_id, \n                    (response) => {\n                        console.log(response);\n                        this.setState({member: {\n                            cardNo: response.member_card_no,\n                            firstName: response.first_name,\n                            middleName: response.middle_name,\n                            lastName: response.last_name,\n                            clientName: response.client.registered_name,\n                            birthDate: new Date(response.date_of_birth),\n                            gender: response.gender,\n                            civilStatus: response.civil_status\n                        }});\n\n                        API.get('customer-care/members/' + response.member_card_no + '/benefits',\n                            (response) => {\n                                console.log(response);\n                            },\n                            (error) => {\n                                console.log(error);\n                            });\n                    },\n                    (error) => {\n                        console.log(error);\n                    });\n            },\n            (error) => {\n                console.log(error);\n            });\n\n            API.get('facilities',\n            (response) => {\n                this.setState({loadedResources: this.state.loadedResources + 1});\n                this.facilities = response.map(facility => {\n                    return { \n                        value: facility.facility_id,\n                        label: facility.name \n                    }\n                });\n            },\n            (error) => {\n                console.log(error);\n            });\n\n        API.get('icd10-codes?filter[limit]=1000',\n            (response) => {\n                console.log(response);  \n                this.setState({loadedResources: this.state.loadedResources + 1});\n                this.icd10Codes = response.map(icd10Code => {\n                    return { \n                        value: icd10Code.full_code,\n                        label: icd10Code.abbreviated_description \n                    };\n                });\n            },\n            (error) => {\n                console.log(error);\n            });\n\n        API.get('cpts?filter[limit]=1000',\n            (response) => {\n                this.setState({loadedResources: this.state.loadedResources + 1});\n                this.cptCodes = response.map(cptCode => {\n                    return {\n                        value: cptCode.code,\n                        label: cptCode.label \n                    };\n                });\n            }, \n            (error) => {\n                console.log(error);\n            });\n\n        API.get('doctors',\n            (response) => {\n                this.setState({loadedResources: this.state.loadedResources + 1});\n                this.doctors = response.map(doctor => {\n                    return {\n                        value: doctor._id,\n                        label: ('Dr. ' + doctor.first_name +  ' ' + doctor.last_name),\n                        params: [doctor.type]\n                    };\n                });\n            }, \n            (error) => {\n                console.log(error);\n            });\n    }\n\n    getErrorList = () => {\n        let errors: ErrorMessageFormat[] = [];\n\n        const confinement = this.state.confinement;\n        \n        if (confinement) {\n\n            /* Check if there's a physician assigned to each diagnosis */\n            let errorDiagnosis = confinement.diagnoses.filter(diagnosis => {\n                let matched = false;\n                confinement.physicians.map(physician => {\n                    matched = physician.diagnosis.value === diagnosis.diagnosis.value ? true : matched;\n                });\n                return !matched;\n            });\n\n            if (errorDiagnosis.length > 0) {\n                errors.push({\n                    message: 'Please assign a physician for the following diagnoses before proceding:',\n                    targets: errorDiagnosis.map(diagnosis => {\n                        return `${diagnosis.diagnosis.value} ${diagnosis.diagnosis.label}`\n                    })\n                });\n                this.setState({tabSelected: 5});\n            }\n\n            \n        }\n\n        return errors;\n    }\n\n    apiSaveTicket(onSuccess: Function): void {\n        if (!this.state.member) {\n            return;\n        }\n        \n        const payload = Payloads.getPutTicketPayload(\n            this.state.ticket,\n            this.state.member.cardNo, \n            this.state.confinement,\n            this.state.inquiries\n        );\n\n        console.log(payload);\n        API.put('customer-care/tickets/' + this.props.match.params['ticketId'], payload,\n            (response) => {\n                console.log(response);\n                //Check which task case is at\n                Processmaker.get('cases/'+this.props.match.params['caseId'],\n                    (response) => {\n                        console.log(response);\n                        if (response['current_task'][0]['tas_title'] === 'Create Ticket') {\n                            //Route Case to Modify/Update Ticket\n                            Processmaker.put('cases/'+this.props.match.params['caseId']+'/route-case', {},\n                                (response) => {\n                                    console.log(response);\n                                    onSuccess();\n                                    // this.props.history.push('#/customer-care/tickets');\n                                    // window.location.reload();\n                                },\n                                (error) => {\n                                    console.log(error);\n                                }\n                            );\n                        } else {\n                            this.props.history.push('#/customer-care/tickets');\n                            window.location.reload();\n                        }\n                    },\n                    (error) => {\n                        console.log(error);\n                    }\n                );\n            },\n            (error) => {\n                console.log(error);\n            });\n    }\n\n    render(): JSX.Element {\n        return (\n            <Grid container className='customer-care-main'>\n                {this.state.loadedResources !== UpdateTicketPage.RESOURCES_TO_LOAD ? (\n                    <div \n                        style={{\n                            backgroundColor: '#00000055', \n                            zIndex: 100, \n                            position: 'fixed', \n                            width: '100%', \n                            height: '100%'}}>\n                        <Loading height='10rem'/>\n                    </div>\n                    \n                ) : (null)}\n\n                <CustomModal\n                    className='modal'\n                    isOpen={this.state.isAssessmentModalOpen}\n                    handleClose={() => this.setState({isAssessmentModalOpen: false})}\n                    renderHeader={() => {\n                        return <>Missing Information</>\n                    }}\n                    renderContent={() => {\n                        return (\n                            <div className='header-2'>\n                                {this.errors.map(error => {\n                                    return (\n                                        <>\n                                        <p>{error.message}</p>\n                                        <p>\n                                            {error.targets.map(target => {\n                                                return <div>{`- ${target}`}</div>\n                                            })}\n                                        </p>\n                                        </>\n                                    );\n                                })}\n                            </div>\n                        );\n                    }}\n                    renderFooter={() => {\n                        return (\n                            <Button \n                                variant='outlined' \n                                color='primary'\n                                onClick={() => {this.setState({isAssessmentModalOpen: false})}}>\n                                Okay\n                            </Button>\n                        );\n                    }} />\n                \n                <MemberDataSection \n                    member={this.state.member}\n                    ticket={this.state.ticket}\n                    ticketStatus='Update'\n                    onUpdateMemberStateChange={(_member: MemberData) => null} />\n                {this.state.confinement ? (\n                    this.renderInpatientContent(this.state.confinement)\n                ) : this.state.inquiries ? (\n                    this.renderInquiryContent(this.state.inquiries)\n                ) : null}\n                <UpdateTicketFooter \n                    isUpdating={false}\n                    onSaveForNow={() => null} \n                    onAssign={() => null}\n                    onEscalate={() => null}\n                    onResolve={() => {\n                        this.errors = this.getErrorList();\n                        console.log(this.errors.length);\n                        if (this.errors.length == 0) {\n                            this.apiSaveTicket(() => {\n                                this.props.history.push(\n                                    '#/customer-care/resolve-ticket/' +\n                                    this.props.match.params['caseId'] + '/' +\n                                    this.props.match.params['appNo'] + '/' +\n                                    this.props.match.params['ticketId']);\n                                window.location.reload();\n                            });\n                        } else {\n                            this.setState({isAssessmentModalOpen: true});\n                        }\n                    }}\n                    onUpdateTicket={() => {\n                        this.apiSaveTicket(() => {\n                            this.props.history.push('#/customer-care/tickets');\n                            window.location.reload();\n                        });\n                    }} />\n            </Grid>\n        );\n    }\n\n    renderInpatientContent(confinement: ConfinementDetails): JSX.Element {\n        return (\n            <div className='update-ticket'>\n                <CustomTabs \n                    tabList={this.tabList}\n                    selectedTab={this.state.tabSelected}\n                    setSelectedTab={(index: number) => {\n                        this.setState({tabSelected: index});\n                    }} />\n                    \n                {this.state.tabSelected === 1 ? (\n                    <SummarySection \n                        ticketNo={this.state.ticket.ticketNo} \n                        updates={confinement.updates}\n                        accommodations={confinement.accommodations}\n                        diagnoses={confinement.diagnoses}\n                        physicians={confinement.physicians}\n                        procedures={confinement.procedures}\n                        items={confinement.items}\n                        provider={confinement.provider}\n                        dateAdmitted={confinement.dateAdmitted}\n                        confinementKind={confinement.confinementKind}\n                        coverage={confinement.coverage}\n                        philhealthAmount={confinement.philhealthAmount}\n                        finalBill={confinement.finalBill}\n                        dischargeDate={confinement.dischargeDate}\n                        setTabSelected={(value: number) => this.setState({tabSelected: value})}/>\n                    \n\n                ) : this.state.tabSelected === 2 ? (\n                    <UpdateSection \n                        updates={confinement.updates}\n                        refreshUpdatesState={() => {\n                            this.setState({confinement: confinement});\n                        }} /> \n\n                ) : this.state.tabSelected === 3 ? (\n                    this.state.ticket ? (\n                        <AccommodationsSection\n                            accommodations={confinement.accommodations}\n                            facilitiesList={this.facilities}\n                            provider={confinement.provider}\n                            dateAdmitted={confinement.dateAdmitted}\n                            confinementKind={confinement.confinementKind}\n                            giftGiven={confinement.giftGiven}\n                            refreshAccommodationsState={() => {\n                                this.setState({confinement: confinement});\n                            }}\n                            onUpdateTicketStateChange={(attrName: string, value: any) => {\n                                this.setState(prevState => ({\n                                    ...prevState,\n                                    confinement: {\n                                        ...confinement,\n                                        [attrName]: value\n                                    }\n                                }));\n                            }} />\n                    ) : null\n\n                ) : this.state.tabSelected === 4 ? (\n                    this.state.ticket ? (\n                        <DiagnosesSection \n                            diagnoses={confinement.diagnoses}\n                            physicians={confinement.physicians}\n                            procedures={confinement.procedures}\n                            diagnosesList={this.icd10Codes}\n                            primaryDiagnosisIndex={confinement.primaryDiagnosisIndex}\n                            refreshDiagnosisStateChange={() => {\n                                this.setState({confinement: confinement});\n                            }}\n                            setPrimaryDiagnosisIndex={(index: number) => {\n                                // this.setState({primaryDiagnosisIndex: index});\n                                this.setState(prevState => ({\n                                    ...prevState,\n                                    confinement: {\n                                        ...confinement,\n                                        primaryDiagnosisIndex: index\n                                    }\n                                }));\n                            }} />\n                    ) : null\n\n                ) : this.state.tabSelected === 5 ? (\n                    <PhysiciansSection \n                        physicians={confinement.physicians}\n                        physiciansList={this.doctors}\n                        diagnosesList={confinement.diagnoses}\n                        refreshPhysiciansStateChange={() => {\n                            this.setState({confinement: confinement});\n                        }} />\n\n                ) : this.state.tabSelected === 6 ? (\n                    <ProceduresSection\n                        procedures={confinement.procedures}\n                        proceduresList={this.cptCodes}\n                        diagnosesList={confinement.diagnoses}\n                        physiciansList={this.doctors}\n                        refreshProceduresStateChange={() => {\n                            this.setState({confinement: confinement});\n                        }} />\n\n                ) : this.state.tabSelected === 7 ? (\n                    <DischargeDetailsSection \n                        dateAdmitted={confinement.dateAdmitted}\n                        coverage={confinement.coverage} \n                        philhealthAmount={confinement.philhealthAmount}\n                        finalBill={confinement.finalBill} \n                        dischargeDate={confinement.dischargeDate}\n                        onUpdateTicketStateChange={(attrName: string, value: any) => {\n                            this.setState(prevState => ({\n                                ...prevState,\n                                confinement: {\n                                    ...confinement,\n                                    [attrName]: value\n                                }\n                            }));\n                        }} />\n                    \n                ) : this.state.tabSelected === 8 ? (\n                    <OtherDetailsSection \n                        items={confinement.items}\n                        refreshItemsStateChange={() => {\n                            this.setState({confinement: confinement});\n                        }} />\n                    \n                ) : this.state.tabSelected === 9 ? (\n                    <UploadedDocumentsSection \n                        files={confinement.files}\n                        refreshFilesStateChange={() => {\n                            this.setState({confinement: confinement});\n                        }} />\n                    \n                    \n                    \n                ) : null}\n            </div>\n        );\n    }\n\n    renderInquiryContent(inquiries: InquiryData[]): JSX.Element {\n        return (\n            <UpdateInquirySection \n                inquiries={inquiries}\n                refreshInquiryState={() => {\n                    this.setState({inquiries: inquiries});\n                }} />\n        );\n    }\n}\n\n","/**\n * Asynchronously loads the component for FeaturePage\n */\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Components, Utils } from '@hims/core';\nconst { loadable } = Utils;\nconst { LoadingIndicator } = Components.UI;\n\n\nexport default loadable(async () => {\n  let {HomePage,  mapStateToProps, mapDispatchToProps} = await import('./HomePage');\n  const Component = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  )(HomePage);\n  return {default: Component};\n}, {\n  fallback: <LoadingIndicator />,\n});\n","import * as React from 'react';\nimport { Grid } from '@material-ui/core';\n\ninterface IProps {\n    data: any[];\n    renderHeader: () => JSX.Element;\n    renderRow: (rowData: any, index: number) => JSX.Element;\n}\n\nexport class ComplexTable extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        return (\n            <div className='complex-table'>\n                <Grid className='header' container spacing={1}>\n                    {this.props.renderHeader()}\n                </Grid>\n                \n                {this.props.data.map((rowData, index) => {\n                    const backColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                    return (\n                        <div className='item' style={{backgroundColor: backColor}}>\n                            {this.props.renderRow(rowData, index)}\n                        </div>\n                    );\n                })}\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { ComplexTable } from 'Pages/CustomerCarePage/Components/ComplexTable';\nimport { Grid } from '@material-ui/core';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { ProcedureData, AvailmentDetails, DiagnosisData } from 'Pages/CustomerCarePage/Models';\nimport { InputArea } from 'Pages/CustomerCarePage/Components/InputArea';\nimport { CustomRadio } from 'Pages/CustomerCarePage/Components/CustomRadio';\n\ninterface IProps {\n    availment: AvailmentDetails;\n    refreshAvailmentState: () => void;\n}\n\n\nexport class ApproveAvailmentSection extends React.Component<IProps> {\n\n    APPROVED = 'Approved';\n    DISAPPROVED = 'Disapproved';\n    PENDING = 'Pending';\n\n    constructor(props: IProps) {\n        super(props);\n    }\n\n    getProceduresCost = (diagnosis: DiagnosisData) => {\n        let total = 0;\n        diagnosis.procedures.map(procedure => {\n            total += procedure.amount;\n        });\n        return total;\n    }\n\n    getApprovedAvailmentsCost = () => {\n        let total = 0;\n        this.props.availment.diagnoses.map(diagnosis => {\n            diagnosis.procedures.map(procedure => {\n                total += (procedure.assessmentType === this.APPROVED ? procedure.amount : 0);\n            });\n        });\n        return total;\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Approve or Disapprove Availments</div>\n                <div className='sub-section'>\n                    <div className='light-text'>PROVIDER</div>\n                    <div className='small-text'>\n                    {this.props.availment.provider.value + ' - ' + this.props.availment.provider.label}</div>\n                    <div style={{float: 'right'}}>\n                        <span className='small-text'>TOTAL AMOUNT</span>\n                        <span style={{marginLeft: '1rem'}} />\n                        <span className='header-2'>\n                            {'PHP ' + GlobalFunction.formatNumber(this.getApprovedAvailmentsCost(), true)}\n                        </span>\n                    </div>\n                </div>\n                <div className='sub-section'>\n                    <ComplexTable \n                        data={this.props.availment.diagnoses}\n                        renderHeader={() => this.renderHeader()}\n                        renderRow={(rowData: any, index: number) => \n                            this.renderRow(rowData, index)} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderHeader(): JSX.Element {\n        const headerNameStyle = {\n            margin: 0,\n            padding: '12px 0 12px 0'\n        };\n\n        return (\n            <>\n                <Grid item xs={4}>\n                    <div className='header-2' style={headerNameStyle}>Diagnosis</div>\n                </Grid>\n                <Grid item xs={4}>\n                    <div className='header-2' style={headerNameStyle}>Doctor</div>\n                </Grid>\n                <Grid item xs={2}>\n                    <div className='header-2' style={headerNameStyle}>Professional Fee</div>\n                </Grid>\n                <Grid item xs={2}>\n                    <div className='header-2' style={{...headerNameStyle, textAlign: 'right'}}>\n                        Total Amt. of Procedures\n                    </div>\n                </Grid>\n            </>\n        );\n    }\n\n    renderRow(diagnosis: DiagnosisData, _index: number): JSX.Element {\n        return (\n            <>\n                <Grid className='small-section' container>\n                    <Grid item xs={4}>\n                        {diagnosis.icd10Code.value + ' - ' + diagnosis.icd10Code.label}\n                    </Grid>\n                    <Grid item xs={4}>\n                        {diagnosis.doctors[0].id + ' - ' + diagnosis.doctors[0].name}\n                    </Grid>\n                    <Grid item xs={2}>\n                        {'PHP ' + GlobalFunction.formatNumber(diagnosis.doctors[0].fee, true)}\n                    </Grid>\n                    <Grid item xs={2} style={{fontWeight: 'bold', textAlign: 'right'}}>\n                        {'PHP ' + GlobalFunction.formatNumber(this.getProceduresCost(diagnosis), true)}\n                    </Grid>\n                </Grid>\n                <div className='line-border' />\n                {diagnosis.procedures.map((procedure, index) => {\n                    return this.renderProcedure(procedure, index);\n                })}\n            </>\n        );\n    }\n\n    renderProcedure(procedure: ProcedureData, index: number): JSX.Element {\n        return (\n            <>\n            <div className='line-border' />\n            <div className='section' >\n                \n                <Grid container>\n                    <Grid item xs={4}>\n                        <div>\n                            <Grid container>\n                                <Grid item xs={2} style={{padding: '0 0.5rem', marginTop: '-3px'}}>\n                                    <div className='number-item'>{index + 1}</div>\n                                </Grid>\n                                <Grid item xs={10} className='header-2'>\n                                    {procedure.cptCode.value + ' - ' + procedure.cptCode.label}\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Grid>\n                    \n                </Grid>\n                <Grid container>\n                    <Grid item xs={4}>\n                        <div>\n                            <Grid container>\n                                <Grid item xs={2} />\n                                <Grid item xs={10}>\n                                    <div className='sub-section'>\n                                        <div className='light-text'>AMOUNT</div>\n                                        <div className='small-text'>{'PHP ' + GlobalFunction.formatNumber(procedure.amount, true)}</div>\n                                    </div>\n                                    <div className='sub-section'>\n                                        <div className='light-text'>PHILHEALTH REQUIRED?</div>\n                                        <div className='small-text'>{procedure.isPHIC ? 'Yes' : 'No'}</div>\n                                    </div>\n                                    <div className='sub-section'>\n                                        <div className='light-text'>DATE OF AVAILMENT</div>\n                                        <div className='small-text'>{'May 19, 2019 *'}</div>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <div className='sub-section'>\n                            <div className='light-text'>SYSTEM ASSESSMENT</div>\n                            <div className='small-text'>{'Approve *'}</div>\n                        </div>\n                        <div className='sub-section'>\n                            <div className='light-text'>REMAINING BALANCE</div>\n                            <div className='small-text'>{'PHP ' + 0 + '.00 *'}</div>\n                        </div>\n                        <div className='sub-section'>\n                            <div className='light-text'>CLAUSE</div>\n                            <div className='small-text'>{'Laboratory tests, x-rays, and other diagnostic examinations prescribed by the INTELLICARE physician*'}</div>\n                        </div>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <div className='sub-section'>\n                            <div className='light-text'>Choose Assessment</div>\n                            <CustomRadio \n                                label='Approve'\n                                checkedCondition={procedure.assessmentType === this.APPROVED}\n                                onChange={() => {\n                                    procedure.assessmentType = this.APPROVED;\n                                    this.props.refreshAvailmentState();\n                                }} />\n                            <CustomRadio \n                                label='Disapprove'\n                                checkedCondition={procedure.assessmentType === this.DISAPPROVED}\n                                onChange={() => {\n                                    procedure.assessmentType = this.DISAPPROVED;\n                                    this.props.refreshAvailmentState();\n                                }} />\n                            <CustomRadio \n                                label='Pending'\n                                checkedCondition={procedure.assessmentType === this.PENDING}\n                                onChange={() => {\n                                    procedure.assessmentType = this.PENDING;\n                                    this.props.refreshAvailmentState();\n                                }} />\n                        </div>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <div className='sub-section'>\n                            <div className='light-text'>Remarks</div>\n                            <InputArea\n                                value={procedure.assessmentRemarks}\n                                onChange={(value: string) => {\n                                    procedure.assessmentRemarks = value;\n                                    this.props.refreshAvailmentState();\n                                }} />\n                        </div>\n                    </Grid>\n                </Grid>\n            </div>\n            </>\n        );\n    }\n}","import * as React from 'react';\nimport { Grid, TableCell, TableRow } from '@material-ui/core';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { API } from 'Pages/CustomerCarePage/API';\nimport { PartialBenefitData } from 'Pages/CustomerCarePage/Models';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\nimport { faSort } from '@fortawesome/free-solid-svg-icons';\nimport { LabelDisplayedRowsArgs } from '@material-ui/core/TablePagination';\nimport { Loading } from 'Pages/CustomerCarePage/Components/Loading';\n\ninterface IProps {\n    cardNo: string;\n}\n\ninterface IStates {\n    benefitCategory: string;\n    benefitName: string;\n    limitType: string;\n    limit: string;\n\n    benefitListUpdated: boolean;\n}\n\n\nexport class CheckBenefitSection extends React.Component<IProps, IStates> {\n\n    benefits: PartialBenefitData[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            benefitCategory: '',\n            benefitName: '',\n            limitType: '',\n            limit: '',\n            benefitListUpdated: false\n        }\n\n        this.benefits = [];\n    }\n\n    componentDidMount() {\n        this.loadBenefitsData();\n    }\n\n    loadBenefitsData(): void {\n        API.get(`customer-care/members/${this.props.cardNo}/benefits`,\n            (response) => {\n                console.log(response);\n                this.benefits = response.map(benefit => {\n                    return {\n                        category: benefit.type,\n                        name: benefit.name,\n                        limitType: (benefit.limits.length > 0 ? benefit.limits[0].type : '---'),\n                        limit: (benefit.limits.length > 0 ? (\n                            benefit.limits[0].limit + ' ' + benefit.limits[0].limit_unit\n                        ) : '---')\n                    }\n                });\n                this.setState({benefitListUpdated: true});\n            },\n            (error) => {\n                console.log(error);\n            });\n    }\n\n    getFilteredBenefitsData = () => {\n        return (\n            this.benefits\n                .filter(benefit => \n                    this.state.benefitCategory === '' || \n                    benefit.category.toLowerCase().includes(this.state.benefitCategory.toLowerCase()))\n                .filter(benefit => \n                    this.state.benefitName === '' || \n                    benefit.name.toLowerCase().includes(this.state.benefitName.toLowerCase()))\n                .filter(benefit => \n                    this.state.limitType === '' || \n                    benefit.limitType.toLowerCase().includes(this.state.limitType.toLowerCase()))\n                .filter(benefit => \n                    this.state.limit === '' || \n                    benefit.limit.toLowerCase().includes(this.state.limit.toLowerCase()))\n        );\n    }\n    \n    sortBenefits(attrName: string, isAsc: boolean): void {\n        this.benefits.sort((a: PartialBenefitData, b: PartialBenefitData) => \n            (a[attrName] > b[attrName]) ? (isAsc ? 1 : -1) : (isAsc ? -1 : 1)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Check Benefits</div>\n                <div className='sub-section' />\n                <Grid container className='sub-section' spacing={5}>\n                    {this.renderSideBar()}\n\n                    {this.state.benefitListUpdated ? (\n                        this.renderBenefitsList()\n                    ) : (\n                        <Grid item xs={10}>\n                            <Loading height='10rem'/>\n                        </Grid>\n                    )}\n                    \n                </Grid>\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderSideBar(): JSX.Element {\n        const rightBorderStyle = {\n            borderRight: '#3C394A22 solid 1px'\n        }\n        return (\n            <Grid item xs={2} style={rightBorderStyle}>\n                    <div className='small-text'>Contract ID</div>\n                    <div className='header-1'>{'2019-0928*'}</div>\n                <div className='sub-section'>\n                    <div className='small-text'>Room and Board</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>COVERAGE</div>\n                    <div className='sub-section'>\n                        <TextButton \n                            label='APE' \n                            onClick={() => {\n                                this.setState({benefitListUpdated: false});\n                                this.loadBenefitsData();\n                            }} />\n                    </div>\n                    <div className='sub-section'>\n                        <TextButton \n                            label='PPE' \n                            onClick={() => {\n                                this.setState({benefitListUpdated: false});\n                                this.loadBenefitsData();\n                            }} />\n                    </div>\n                    <div className='sub-section'>\n                        <TextButton \n                            label='Inpatient' \n                            onClick={() => {\n                                this.setState({benefitListUpdated: false});\n                                this.loadBenefitsData();\n                            }} />\n                    </div>\n                    <div className='sub-section'>\n                        <TextButton \n                            label='Outpatient' \n                            onClick={() => {\n                                this.setState({benefitListUpdated: false});\n                                this.loadBenefitsData();\n                            }} />\n                    </div>\n                    <div className='sub-section'>\n                        <TextButton \n                            label='Emergency' \n                            onClick={() => {\n                                this.setState({benefitListUpdated: false});\n                                this.loadBenefitsData();\n                            }} />\n                    </div>\n                </div>\n\n                <div className='sub-section'>\n                    <div className='header-1 light-text'>RIDERS</div>\n                </div>\n\n            </Grid>\n        );\n    }\n\n    renderBenefitsList(): JSX.Element {\n\n        return (\n            <Grid item xs={10}>\n                <div className='sub-section'>\n                    <CustomTable\n                        rows={this.getFilteredBenefitsData()}\n                        renderHeader={() => this.renderTableHeader()}\n                        renderRow={(rowData: any, index: number) => \n                            this.renderTableRow(rowData, index)}\n                        onChangeInfo={(info: LabelDisplayedRowsArgs) => \n                            `${info.from}-${info.to} out of ${info.count} benefits`}\n                        labelRowsPerPage='Show'\n                        rowsPerPageOptions={[10, 25, 50]} />\n                </div>\n\n            </Grid>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n\n        return (\n            <>\n            {this.renderHeaderColumn('benefitCategory', 'Benefit Category', '150px')}\n            {this.renderHeaderColumn('benefitName', 'Benefit', '150px')}\n            {this.renderHeaderColumn('limitType', 'Limit Type', '150px')}\n            {this.renderHeaderColumn('limit', 'Limit', '150px')}\n            </>\n        );\n    }\n\n    renderTableRow(benefit: PartialBenefitData, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                <TableCell>{benefit.category}</TableCell>\n                <TableCell>{benefit.name}</TableCell>\n                <TableCell>{benefit.limitType}</TableCell>\n                <TableCell>{benefit.limit}</TableCell>\n            </TableRow>\n        );\n    }\n\n    renderHeaderColumn(attrName: string, headerText: string, width: string): JSX.Element {\n        return (\n            <TableCell style={{minWidth: width, maxWidth: width}}>\n                <span className='header-2'>{headerText}</span>\n                <div style={{float: 'right'}}>\n                    <IconButton \n                        icon={faSort} \n                        onClick={() => {\n                            this.sortBenefits(attrName, true);\n                            this.setState({benefitListUpdated: true});\n                        }} />\n                </div>\n                <InputField\n                    value={this.state[attrName]}\n                    onChange={(value: string) => {\n                        this.setState(prevState => ({...prevState, [attrName]: value}));\n                    }} />\n            </TableCell>\n        );\n    }\n}","import * as React from 'react';\nimport { Button } from '@material-ui/core';\n\ninterface IProps {\n    isSummarizing: boolean;\n    onAssign: () => void;\n    onEscalate: () => void;\n    onSummarize: () => void;\n    onResolve: () => void;\n}\n\nexport class ResolveTicketFooter extends React.Component<IProps> {\n    \n    constructor(props: IProps) {\n        super(props);\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='footer'>\n                <Button \n                    className='button-neutral'\n                    onClick={this.props.onAssign}>\n                    Assign\n                </Button>\n                <Button \n                    className='button-error'\n                    onClick={this.props.onEscalate}>\n                    Escalate\n                </Button>\n                {this.props.isSummarizing ? (\n                    <Button \n                        className='button'\n                        onClick={this.props.onResolve}>\n                        Mark as Resolved\n                    </Button>\n                ) : (\n                    <Button \n                        className='button'\n                        onClick={this.props.onSummarize}>\n                        Summarize Assessment\n                    </Button>\n                )}\n                \n                \n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Grid, TableRow, TableCell } from '@material-ui/core';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\nimport { faSort, faCheck, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\ninterface IStates {\n    code: string;\n    name: string;\n    location: string;\n\n    facilitiesListUpdated: boolean;\n}\n\nexport class PartnerNetworkSection extends React.Component<{}, IStates> {\n    \n    dummyData = [\n        { code: '87854', name: 'St. Mary’s Hospital Calamba', location: 'CMC Ave, Real, Calamba, Laguna' },\n        { code: '40092', name: 'Evangelista Medical Specialty Hospital', location: 'Macaria Drive, San Pedro, Laguna' },\n        { code: '14659', name: 'Los Banos Doctors Hospital and Medical Center', location: 'Lopez Ave, Los Baños, Laguna' }\n    ];\n\n    dummyGroups = [\n        { checked: true, label: 'Top 5 Hospitals' },\n        { checked: false, label: 'Top 6 Hospitals' },\n        { checked: true, label: 'Healthway Clinics' },\n        { checked: false, label: 'Medical City Network' }\n    ]\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            code: '',\n            name: '',\n            location: '',\n            facilitiesListUpdated: false\n        }\n    }\n\n    getFilteredFacilitiesData(): any {\n        return (\n            this.dummyData\n                .filter(facility => \n                    this.state.code === '' || \n                    facility.code.toLowerCase().includes(this.state.code.toLowerCase()))\n                .filter(facility => \n                    this.state.name === '' || \n                    facility.name.toLowerCase().includes(this.state.name.toLowerCase()))\n                .filter(facility => \n                    this.state.location === '' || \n                    facility.location.toLowerCase().includes(this.state.location.toLowerCase()))\n        );\n    }\n\n    sortFacilities(attrName: string, isAsc: boolean): void {\n        this.dummyData.sort((a: any, b: any) => \n            (a[attrName] > b[attrName]) ? (isAsc ? 1 : -1) : (isAsc ? -1 : 1)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Check Partner Network</div>\n                <div className='sub-section'>\n                    <div className='header-2'>TYPE</div>\n                    <div className='small-text'>Open Door</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='header-2'>GROUP</div>\n                    <Grid className='sub-section' container spacing={2} style={{width: '50%'}}>\n                        {this.dummyGroups.map(group => {\n                            return (\n                                <Grid item xs={6}>\n                                    <span>\n                                        {group.checked ? (\n                                            <FontAwesomeIcon icon={faCheck} style={{color: '#3AB77D'}} />\n                                        ) : (\n                                            <FontAwesomeIcon icon={faTimes} style={{color: '#FD5451'}} />\n                                        )}\n                                    </span>\n                                    <span style={{paddingLeft: '1rem'}}>{group.label}</span>\n                                </Grid>\n                            );\n                        })}\n                    </Grid>\n                </div>\n                <div className='sub-section'>\n                    <Grid className='sub-section' container spacing={2}>\n                        <Grid item xs={2}>\n                            <TextButton label='Excluded Hospitals' onClick={() => {}} />\n                        </Grid>\n                        <Grid item xs={2}>\n                            <TextButton label='Included Hospitals' onClick={() => {}} />   \n                        </Grid>\n                    </Grid>\n                    <CustomTable\n                        rows={this.getFilteredFacilitiesData()}\n                        renderHeader={() => this.renderTableHeader()}\n                        renderRow={(rowData: any, index: number) => \n                            this.renderTableRow(rowData, index)} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n        \n        return (\n            <>\n            {this.renderHeaderColumn('code', 'Facility Code')}\n            {this.renderHeaderColumn('name', 'Name')}\n            {this.renderHeaderColumn('location', 'Location')}\n            </>\n        );\n    }\n\n    renderTableRow(facility: any, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                <TableCell>{facility.code}</TableCell>\n                <TableCell>{facility.name}</TableCell>\n                <TableCell>{facility.location}</TableCell>\n            </TableRow>\n        );\n    }\n\n    renderHeaderColumn(attrName: string, headerText: string): JSX.Element {\n        return (\n            <TableCell>\n                <span className='header-2'>{headerText}</span>\n                <div style={{float: 'right'}}>\n                    <IconButton \n                        icon={faSort} \n                        onClick={() => {\n                            this.sortFacilities(attrName, true);\n                            this.setState({facilitiesListUpdated: true});\n                        }} />\n                </div>\n                <InputField\n                    value={this.state[attrName]}\n                    onChange={(value: string) => {\n                        this.setState(prevState => ({...prevState, [attrName]: value}));\n                    }} />\n            </TableCell>\n        );\n    }\n}","import * as React from 'react';\nimport { ComplexTable } from 'Pages/CustomerCarePage/Components/ComplexTable';\nimport { Grid, TableCell, TableRow } from '@material-ui/core';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { ProcedureData, AvailmentDetails, DiagnosisData, LOAData } from 'Pages/CustomerCarePage/Models';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { NumberField } from 'Pages/CustomerCarePage/Components/NumberField';\nimport { DatePicker } from 'Pages/CustomerCarePage/Components/DatePicker';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { faPlus, faPen, faMinusCircle, faCheckCircle, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\n\ninterface IProps {\n    availment: AvailmentDetails;\n    loas: LOAData[];\n    refreshLOAStates: () => void;\n}\n\ninterface IStates {\n    loaNumber: number;\n    amount: number;\n    loaDate: Date;\n    notes: string;\n\n    indexToEdit: number;\n    editLoaNumber: number;\n    editAmount: number;\n    editLoaDate: Date;\n    editNotes: string;\n}\n\nexport class SummaryAvailmentSection extends React.Component<IProps, IStates> {\n\n    APPROVED = 'Approved';\n    DISAPPROVED = 'Disapproved';\n    PENDING = 'Pending';\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            loaNumber: 0,\n            amount: 0,\n            loaDate: new Date(),\n            notes: '',\n\n            indexToEdit: -1,\n            editLoaNumber: 0,\n            editAmount: 0,\n            editLoaDate: new Date(),\n            editNotes: ''\n        }\n    }\n\n    getProceduresCost = (diagnosis: DiagnosisData) => {\n        let total = 0;\n        diagnosis.procedures.map(procedure => {\n            total += procedure.amount;\n        })\n        return total;\n    }\n\n    getApprovedAvailments = () => {\n        const approvedAvailments = this.props.availment.diagnoses.map(diagnosis => {\n            return {\n                ...diagnosis,\n                procedures: diagnosis.procedures\n                    .filter(procedure => procedure.assessmentType === this.APPROVED)\n                    .map(procedure => {\n                        return procedure;\n                    })\n            };\n        });\n        return approvedAvailments.filter(availment => availment.procedures.length > 0);\n    }\n\n    getDisapprovedAvailments = () => {\n        const disapprovedAvailments = this.props.availment.diagnoses.map(diagnosis => {\n            return {\n                ...diagnosis,\n                procedures: diagnosis.procedures\n                    .filter(procedure => procedure.assessmentType === this.DISAPPROVED)\n                    .map(procedure => {\n                        return procedure;\n                    })\n            };\n        });\n        return disapprovedAvailments.filter(availment => availment.procedures.length > 0);\n    }\n\n    getApprovedAvailmentsCost = () => {\n        let total = 0;\n        this.props.availment.diagnoses.map(diagnosis => {\n            diagnosis.procedures.map(procedure => {\n                total += (procedure.assessmentType === this.APPROVED ? procedure.amount : 0);\n            });\n        });\n        return total;\n    }\n\n    render(): JSX.Element {\n        const approvedAvailments = this.getApprovedAvailments();\n        const disapprovedAvailments = this.getDisapprovedAvailments();\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Summary of Approved Availments</div>\n                <div className='sub-section'>\n                    <div className='light-text'>PROVIDER</div>\n                    <div className='small-text'>\n                    {this.props.availment.provider.label}</div>\n                    <div style={{float: 'right'}}>\n                        <span className='small-text'>TOTAL AMOUNT</span>\n                        <span style={{marginLeft: '1rem'}} />\n                        <span className='header-2'>\n                            {'PHP ' + GlobalFunction.formatNumber(this.getApprovedAvailmentsCost(), true)}\n                        </span>\n                    </div>\n                </div>\n                {approvedAvailments.length > 0 ? (\n                    <div className='sub-section'>\n                        <ComplexTable \n                            data={this.getApprovedAvailments()}\n                            renderHeader={() => this.renderHeader()}\n                            renderRow={(rowData: any, index: number) => \n                                this.renderRow(rowData, index)} />\n                    </div>\n                ) : null}\n                <div className='sub-section'>\n                    {/* <ComplexTable \n                        data={this.props.loas}\n                        renderHeader={() => this.renderLOAHeader()}\n                        renderRow={(rowData: any, index: number) => \n                            this.renderLOARow(rowData, index)} /> */}\n                    <CustomTable\n                        rows={this.props.loas}\n                        renderHeader={() => this.renderLOAHeader()}\n                        renderRow={(rowData: any, index: number) => \n                            this.renderLOARow(rowData, index)} />\n                </div>\n                <div className='sub-section' />\n                {disapprovedAvailments.length > 0 ? (\n                    <>\n                    <div className='header-1' style={{color: '#FD5451'}}>Disapproved Availments</div>\n                    <div className='sub-section'>\n                        <ComplexTable \n                            data={this.getDisapprovedAvailments()}\n                            renderHeader={() => this.renderHeader()}\n                            renderRow={(rowData: any, index: number) => \n                                this.renderRow(rowData, index)} />\n                    </div>\n                    </>\n                ) : null}\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderHeader(): JSX.Element {\n        const headerNameStyle = {\n            margin: 0,\n            padding: '12px 0 12px 0'\n        };\n\n        return (\n            <>\n                <Grid item xs={4}>\n                    <div className='header-2' style={headerNameStyle}>Diagnosis</div>\n                </Grid>\n                <Grid item xs={4}>\n                    <div className='header-2' style={headerNameStyle}>Doctor</div>\n                </Grid>\n                <Grid item xs={2}>\n                    <div className='header-2' style={headerNameStyle}>Professional Fee</div>\n                </Grid>\n                <Grid item xs={2}>\n                    <div className='header-2' style={{...headerNameStyle, textAlign: 'right'}}>\n                        Total Amt. of Procedures\n                    </div>\n                </Grid>\n            </>\n        );\n    }\n\n    renderRow(diagnosis: DiagnosisData, _index: number): JSX.Element {\n        return (\n            <>\n                <Grid className='small-section' container>\n                    <Grid item xs={4}>\n                        {diagnosis.icd10Code.value + ' - ' + diagnosis.icd10Code.label}\n                    </Grid>\n                    <Grid item xs={4}>\n                        {diagnosis.doctors[0].id + ' - ' + diagnosis.doctors[0].name}\n                    </Grid>\n                    <Grid item xs={2}>\n                        {'PHP ' + GlobalFunction.formatNumber(diagnosis.doctors[0].fee, true)}\n                    </Grid>\n                    <Grid item xs={2} style={{fontWeight: 'bold', textAlign: 'right'}}>\n                        {'PHP ' + GlobalFunction.formatNumber(this.getProceduresCost(diagnosis), true)}\n                    </Grid>\n                </Grid>\n                <div className='line-border' />\n                {diagnosis.procedures.map((procedure, index) => {\n                    return this.renderProcedure(procedure, index);\n                })}\n            </>\n        );\n    }\n\n    renderProcedure(procedure: ProcedureData, index: number): JSX.Element {\n\n        return (\n            <>\n            <div className='line-border' />\n            <div className='section' >\n                <Grid container>\n                    <Grid item xs={4}>\n                        <div>\n                            <Grid container>\n                                <Grid item xs={2} style={{padding: '0 0.5rem', marginTop: '-3px'}}>\n                                    <div className='number-item'>\n                                    {index + 1}\n                                    </div>\n                                </Grid>\n                                <Grid item xs={10} className='header-2'>\n                                    {procedure.cptCode.value + ' - ' + procedure.cptCode.label}\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Grid>\n                </Grid>\n                <Grid container>\n                    <Grid item xs={4}>\n                        <div>\n                            <Grid container>\n                                <Grid item xs={2} />\n                                <Grid item xs={10}>\n                                    <div className='sub-section'>\n                                        <div className='light-text'>AMOUNT</div>\n                                        <div className='small-text'>{'PHP ' + GlobalFunction.formatNumber(procedure.amount, true)}</div>\n                                    </div>\n                                    <div className='sub-section'>\n                                        <div className='light-text'>PHILHEALTH REQUIRED?</div>\n                                        <div className='small-text'>{procedure.isPHIC ? 'Yes' : 'No'}</div>\n                                    </div>\n                                    <div className='sub-section'>\n                                        <div className='light-text'>DATE OF AVAILMENT</div>\n                                        <div className='small-text'>{'May 19, 2019 *'}</div>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <div className='sub-section'>\n                            <div className='light-text'>SYSTEM ASSESSMENT</div>\n                            <div className='small-text'>{'Approve *'}</div>\n                        </div>\n                        <div className='sub-section'>\n                            <div className='light-text'>REMAINING BALANCE</div>\n                            <div className='small-text'>{'PHP ' + 0 + '.00 *'}</div>\n                        </div>\n                        <div className='sub-section'>\n                            <div className='light-text'>CLAUSE</div>\n                            <div className='small-text'>{'Laboratory tests, x-rays, and other diagnostic examinations prescribed by the INTELLICARE physician*'}</div>\n                        </div>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <div className='sub-section'>\n                            <div className='light-text'>ASSESSMENT</div>\n                            <div className='header-2'>{procedure.assessmentType}</div>\n                        </div>\n                        <div className='sub-section'>\n                            <div className='light-text'>REMARKS</div>\n                            <div className='small-text'>\n                                {procedure.assessmentRemarks ? procedure.assessmentRemarks : 'NONE'}\n                            </div>\n                        </div>\n                    </Grid>\n                </Grid>\n            </div>\n            </>\n        );\n    }\n\n    renderLOAHeader(): JSX.Element {\n        return (\n            <>\n            <TableCell style={{minWidth: '100px', maxWidth: '100px'}}>\n                <div className='header-2'>LOA Number</div>\n                <NumberField\n                    value={this.state.loaNumber}\n                    onChange={(value: number) => this.setState({loaNumber: value})} />\n            </TableCell>\n            <TableCell style={{minWidth: '100px', maxWidth: '100px'}}>\n                <div className='header-2'>Amount</div>\n                <NumberField\n                    value={this.state.amount}\n                    onChange={(value: number) => this.setState({amount: value})} />\n            </TableCell>\n            <TableCell style={{minWidth: '100px', maxWidth: '100px'}}>\n                <div className='header-2'>Date</div>\n                <DatePicker\n                    value={this.state.loaDate}\n                    onChange={(value: Date) => this.setState({loaDate: value})} />\n            </TableCell>\n            <TableCell>\n                <div className='header-2'>Notes</div>\n                <InputField\n                    value={this.state.notes}\n                    onChange={(value: string) => this.setState({notes: value})} />\n            </TableCell>\n            <TableCell style={{minWidth: '75px', maxWidth: '75px', textAlign: 'center'}}>\n                <TextButton \n                    label='Add LOA'\n                    icon={faPlus}\n                    onClick={() => {\n                        this.props.loas.push({\n                            loaNo: this.state.loaNumber,\n                            amount: this.state.amount,\n                            date: this.state.loaDate,\n                            notes: this.state.notes\n                        });\n                        this.props.refreshLOAStates();\n                        this.setState({\n                            loaNumber: 0, \n                            amount: 0,\n                            loaDate: new Date(),\n                            notes: ''\n                        });\n                    }}/>\n            </TableCell>\n            </>\n        );\n    }\n\n    renderLOARow(loa: LOAData, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                {this.state.indexToEdit !== index ? (\n                    <>\n                    <TableCell>{loa.loaNo}</TableCell>\n                    <TableCell>{GlobalFunction.formatNumber(loa.amount)}</TableCell>\n                    <TableCell>{GlobalFunction.toCommonDateString(loa.date)}</TableCell>\n                    <TableCell>{loa.notes}</TableCell>\n                    <TableCell>\n                        <Grid container>\n                            <Grid item xs={6} />\n                            <Grid item xs={3}>\n                                <IconButton\n                                    icon={faPen}\n                                    onClick={() => {\n                                        this.setState({indexToEdit: index});\n                                    }}  />\n                            </Grid>\n                            <Grid item xs={3}>\n                                <IconButton\n                                    icon={faMinusCircle}\n                                    onClick={() => {\n                                        this.props.loas.splice(index, 1);\n                                        this.props.refreshLOAStates();\n                                    }}/>\n                            </Grid>\n                        </Grid>\n                    </TableCell>\n                    </>\n                ) : (\n                    <>\n                    <TableCell>\n                        <NumberField\n                            value={this.state.editLoaNumber}\n                            onChange={(value: number) => this.setState({editLoaNumber: value})} />\n                    </TableCell>\n                    <TableCell>\n                        <NumberField\n                            value={this.state.editAmount}\n                            onChange={(value: number) => this.setState({editAmount: value})} />\n                    </TableCell>\n                    <TableCell>\n                        <DatePicker\n                            value={this.state.editLoaDate}\n                            onChange={(value: Date) => this.setState({editLoaDate: value})} />\n                    </TableCell>\n                    <TableCell>\n                        <InputField\n                            value={this.state.editNotes}\n                            onChange={(value: string) => this.setState({editNotes: value})} />\n                    </TableCell>\n                    <TableCell>\n                        <Grid container>\n                            <Grid item xs={6} />\n                            <Grid item xs={3}>\n                                <IconButton\n                                    icon={faCheckCircle}\n                                    onClick={() => {\n                                        this.props.loas[index] = {\n                                            loaNo: this.state.editLoaNumber,\n                                            amount: this.state.editAmount,\n                                            date: this.state.editLoaDate,\n                                            notes: this.state.editNotes\n                                        };\n                                        this.setState({indexToEdit: -1});\n                                    }}  />\n                            </Grid>\n                            <Grid item xs={3}>\n                                <IconButton\n                                    icon={faTimesCircle}\n                                    onClick={() => {\n                                        this.setState({indexToEdit: -1});\n                                    }}/>\n                            </Grid>\n                        </Grid>\n                    </TableCell>\n                    </>\n                )}\n                \n            </TableRow>\n        );\n    }\n}","import * as React from 'react';\n// import { TicketData } from 'Pages/CustomerCarePage/Models';\nimport { API } from 'Pages/CustomerCarePage/API';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\nimport { Grid } from '@material-ui/core';\nimport { TicketData, AvailmentDetails, ConfinementDetails } from 'Pages/CustomerCarePage/Models';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\n\ninterface IProps {\n    ticketId: string;\n    onCloseButtonClicked: () => void;\n}\n\ninterface IStates {\n    ticket?: TicketData;\n    availment?: AvailmentDetails;\n    confinement?: ConfinementDetails;\n}\n\nexport class TicketInfoModal extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            \n        };\n    }\n\n    componentDidMount() {\n        console.log(this.props.ticketId);\n\n        API.get('customer-care/tickets/' + this.props.ticketId, \n            (response) => {\n                const ticketCategory = response.ticket_category;\n                const availmentDetails = ticketCategory.availment_details;\n                const confinementDetails = ticketCategory.confinement_details;\n                this.setState({ticket: {\n                    ticketChannel: response.received_via,\n                    transactionNo: response.transaction_no,\n                    ticketSource: response.received_from,\n                    memberName: response.member_name,\n                    clientName: response.corporate_client,\n                    brokerName: response.broker,\n                    facility: { value: '', label: response.hospital_name },\n                    department: response.department,\n                    callerName: response.caller_name,\n                    contactNo: response.contact_no,\n                    ticketType: ticketCategory.ticket_type,\n                    specificType: ticketCategory.specific_type,\n                    urgency: ticketCategory.urgency,\n                    agent: { id: '', name: ticketCategory.assign_to },\n                    additionalNotes: response.additional_notes,\n                    additionalFiles: [],\n                    ticketNo: response.ticket_no,\n                    status: response.status,\n                    createdBy: { id: '1', name: 'Jilmer Cariaso - Static' },\n                    dateCreated: new Date(response.date_created),\n                    dateUpdated: new Date(response.date_updated),\n                    dateEscalated: new Date(response.date_escalated)\n                }});\n                \n                if (availmentDetails) {\n                    const providerData = availmentDetails.provider.split(' - ');\n                    this.setState({availment: {\n                        provider: { value: providerData[0], label: providerData[1] },\n                        diagnoses: availmentDetails.availments_list.map(diagnosis => {\n                            return {\n                                icd10Code: { value: diagnosis.code, label: diagnosis.name },\n                                remarks: diagnosis.remarks,\n                                isPrimary: diagnosis.is_primary,\n                                isFinal: diagnosis.is_final,\n                                doctors: diagnosis.doctors.map(doctor => {\n                                    return {\n                                        id: doctor.id,\n                                        name: doctor.name,\n                                        specialization: doctor.specialization,\n                                        fee: doctor.fee,\n                                        noOfVisits: doctor.no_of_visits,\n                                        remarks: doctor.remarks\n                                    }\n                                }),\n                                procedures: diagnosis.procedures.map(procedure => {\n                                    return {\n                                        cptCode: { value: procedure.code, label: procedure.name },\n                                        isPHIC: procedure.phic,\n                                        amount: parseInt(procedure.amount),\n                                        notes: procedure.notes,\n                                        assessmentType: procedure.assessment_type,\n                                        assessmentRemarks: procedure.assessment_remarks\n                                    }\n                                })\n                            }\n                        })\n                    }});\n                }\n\n                if (confinementDetails) {\n                    const providerData = availmentDetails.provider.split(' - ');\n                    this.setState({availment: {\n                        provider: { value: providerData[0], label: providerData[1] },\n                        diagnoses: availmentDetails.availments_list.map(diagnosis => {\n                            return {\n                                icd10Code: { value: diagnosis.code, label: diagnosis.name },\n                                remarks: diagnosis.remarks,\n                                isPrimary: diagnosis.is_primary,\n                                isFinal: diagnosis.is_final,\n                                doctors: diagnosis.doctors.map(doctor => {\n                                    return {\n                                        id: doctor.id,\n                                        name: doctor.name,\n                                        specialization: doctor.specialization,\n                                        fee: doctor.fee,\n                                        noOfVisits: doctor.no_of_visits,\n                                        remarks: doctor.remarks\n                                    }\n                                }),\n                                procedures: diagnosis.procedures.map(procedure => {\n                                    return {\n                                        cptCode: { value: procedure.code, label: procedure.name },\n                                        isPHIC: procedure.phic,\n                                        amount: parseInt(procedure.amount),\n                                        notes: procedure.notes,\n                                        assessmentType: procedure.assessment_type,\n                                        assessmentRemarks: procedure.assessment_remarks\n                                    }\n                                })\n                            }\n                        })\n                    }});\n                }\n            },\n            (error) => {\n                console.log(error);\n            });\n    }\n\n    getTotalAailmentProcedureCost(): number {\n        let total = 0;\n\n        if (this.state.availment) {\n            this.state.availment.diagnoses.map(diagnosis => \n                diagnosis.procedures.map(procedure => \n                    total += procedure.amount\n                )\n            )\n        }\n        \n        return total;\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='ticket-modal section'>\n                <div style={{float: 'right', marginTop: '-1rem', fontSize: '1rem'}}>\n                    <IconButton \n                        icon={faTimes} \n                        onClick={() => {\n                            this.props.onCloseButtonClicked();\n                        }} />\n                </div>\n                {this.state.ticket ? (\n                    this.renderTicketInfo(this.state.ticket)\n                ) : null}\n            </div>\n        )\n    }\n\n    renderTicketInfo(ticket: TicketData): JSX.Element {\n        return (\n            <>\n            <div className='sub-sections'>\n                <div className='header-1'>{'Ticket 0000823'}</div>\n                <div className='text'>{ticket.status + ' - ' + ticket.urgency + ', Due on May 23, 2019*'}</div>\n            </div>\n            <div className='sub-section'>\n                {/* <div className='text'>{name}</div>\n                <div className='text'>{\"Happytime Technology Inc.\"}</div>\n                <div className='text'>{'Rank and File - Principal'}</div> */}\n                <Grid container>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>TICKET TYPE</div>\n                        <div className='small-text'>{ticket.ticketType}</div>\n                    </Grid>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>SPECIFIC TYPE</div>\n                        <div className='small-text'>{ticket.specificType}</div>\n                    </Grid>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>RECEIVED VIA</div>\n                        <div className='small-text'>{ticket.ticketChannel}</div>\n                    </Grid>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>CALL TRANSACTION NO.</div>\n                        <div className='small-text'>{ticket.transactionNo}</div>\n                    </Grid>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>RECEIVED FROM</div>\n                        <div className='small-text'>{'??? ' + '(' + ticket.ticketSource + ')'}</div>\n                    </Grid>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>NUMBER / EMAIL</div>\n                        <div className='small-text'>{ticket.contactNo}</div>\n                    </Grid>\n                </Grid>\n                <div className='sub-section'>\n                    <div className='light-text'>ASSIGNED TO</div>\n                    <div className='small-text'>{ticket.agent.name}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>DIAGNOSIS — PROCEDURES</div>\n                    {this.state.availment ? (\n                        <Grid container spacing={2} className='sub-section'>\n                            {this.state.availment.diagnoses.map((diagnosis, index) => {\n                                return (\n                                    <>\n                                    <Grid item xs={12} className='header-2'>\n                                        {(index + 1) + '. ' +\n                                         diagnosis.icd10Code.value + ' - ' + \n                                         diagnosis.icd10Code.label}\n                                    </Grid>\n                                    {diagnosis.procedures.map((procedure, index2) => {\n                                        return (\n                                            <>\n                                            <Grid item xs={1} />\n                                            <Grid item xs={11} className='small-text'>\n                                                {(index2 + 10).toString(36) + '. ' + procedure.cptCode.label}\n                                            </Grid>\n                                            </>\n                                        );\n                                    })}\n                                    </>\n                                );\n                            })}\n                        </Grid>\n                    ) : null}\n                    {/* <div className='sub-section'> */}\n                    <div style={{paddingTop: '0.5rem'}} />\n                    <div className='header-2'>{'TOTAL: PHP ' + GlobalFunction.formatNumber(this.getTotalAailmentProcedureCost(), true)}</div>\n                {/* </div> */}\n                </div>\n                \n                <div className='sub-section'>\n                    <div className='light-text'>CREATED BY</div>\n                    <div className='small-text'>{ticket.createdBy.name}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>DATE AND TIME CREATED</div>\n                    <div className='small-text'>{GlobalFunction.toDateAndTime(ticket.dateCreated)}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>DATE AND TIME LAST UPDATED</div>\n                    <div className='small-text'>{GlobalFunction.toDateAndTime(ticket.dateUpdated)}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>DATE AND TIME LAST ESCALATED</div>\n                    <div className='small-text'>{\"May 14, 2019 — 09:33:00 AM*\"}</div>\n                </div>\n                {/* <div className='sub-section'> */}\n                    \n                {/* </div> */}\n            </div>\n            <TextButton\n                        label='View More'\n                        onClick={() => {\n\n                        }} />\n            </>\n        )\n    }\n}","import * as React from 'react';\nimport { TableCell, TableRow } from '@material-ui/core';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\n\nimport { DropdownChoice, PartialTicketData } from 'Pages/CustomerCarePage/Models';\nimport { API } from 'Pages/CustomerCarePage/API';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\nimport { faSort } from '@fortawesome/free-solid-svg-icons';\nimport { TicketInfoModal } from './TicketInfoModal';\nimport { LabelDisplayedRowsArgs } from '@material-ui/core/TablePagination';\nimport { Loading } from 'Pages/CustomerCarePage/Components/Loading';\n\ninterface IProps {\n    ticketNo: string;\n}\n\ninterface IStates {\n    urgency: number;\n    status: string;\n    ticketNo: string;\n    channel: string;\n    type: string;\n    specificType: string;\n    source: string;\n    assignee: string;\n    lastUpdate: string;\n    ticketListUpdated: boolean;\n    selectedTicketId?: string;\n}\n\nexport class ReviewTicketsSection extends React.Component<IProps, IStates> {\n\n    ticketChannels: DropdownChoice[];\n    ticketTypes: DropdownChoice[];\n    specificTypes: DropdownChoice[];\n    tickets: PartialTicketData[];\n\n    constructor(props: any) {\n        super(props);\n\n        this.ticketChannels = [\n            { value: '0', label: '' },\n            { value: '1', label: 'Call' },\n            { value: '2', label: 'SMS' },\n            { value: '3', label: 'Text' },\n            { value: '4', label: 'Email' }\n        ];\n\n        this.ticketTypes = [\n            { value: '0', label: '' },\n            { value: '1', label: 'Availment' },\n            { value: '2', label: 'Inquiry' }\n        ];\n\n        this.specificTypes = [\n            { value: '0', label: '' },\n            { value: '1', label: 'Outpatient Procedure' },\n            { value: '2', label: 'Inpatient' },\n            { value: '3', label: 'Emergency Room' },\n            { value: '4', label: 'Consultation' }\n        ];\n\n        this.state = {\n            urgency: 0,\n            status: '',\n            ticketNo: '',\n            channel: '',\n            type: '',\n            specificType: '',\n            source: '',\n            assignee: '',\n            lastUpdate: '',\n            ticketListUpdated: false,\n            selectedTicketId: undefined\n        }\n\n        this.tickets = [];\n    }\n\n    componentDidMount() {\n        API.get('customer-care/tickets',\n            (response) => {\n                this.tickets = response.map(ticket => {\n                    return {\n                        id: ticket._id,\n                        ticketNo: this.props.ticketNo,\n                        urgency: (\n                            ticket.ticket_category.urgency === 'Low' ? 3 :\n                            ticket.ticket_category.urgency === 'Medium' ? 2 : \n                            ticket.ticket_category.urgency === 'High' ? 1 : 0),\n                        status: ticket.status,\n                        channel: ticket.received_via,\n                        type: ticket.ticket_category.ticket_type,\n                        specificType: ticket.ticket_category.specific_type,\n                        source: {\n                            value: ticket.received_from.toUpperCase(), \n                            label: (\n                                ticket.member_name ? ticket.member_name :\n                                ticket.corporate_client ? ticket.corporate_client :\n                                ticket.broker ? ticket.broker :\n                                ticket.hospital_name ? ticket.hospital_name : ''\n                            )\n                        },\n                        assignee: ticket.ticket_category.assign_to,\n                        lastUpdate: new Date(ticket.date_updated),\n                    }\n                });\n                this.setState({ticketListUpdated: true});\n            },\n            (error) => {\n                console.log(error);\n            });\n    }\n\n    getFilteredTicketData = () => {\n        return (\n            this.tickets\n                .filter(ticket => \n                    this.state.urgency === 0 || \n                    isNaN(this.state.urgency) ||\n                    ticket.urgency === this.state.urgency)\n                .filter(ticket => \n                    this.state.status === '' || \n                    ticket.status\n                        .toLowerCase()\n                        .includes(this.state.status.toLowerCase()))\n                .filter(ticket => \n                    this.state.ticketNo === '' || \n                    ticket.ticketNo\n                        .toLowerCase()\n                        .includes(this.state.ticketNo.toLowerCase()))\n                .filter(ticket => \n                    this.state.channel === '' || \n                    ticket.channel\n                        .toLowerCase()\n                        .includes(this.state.channel.toLowerCase()))\n                .filter(ticket => \n                    this.state.type === '' || \n                    ticket.type\n                        .toLowerCase()\n                        .includes(this.state.type.toLowerCase()))\n                .filter(ticket => \n                    this.state.specificType === '' || \n                    ticket.specificType\n                        .toLowerCase()\n                        .includes(this.state.specificType.toLowerCase()))\n                .filter(ticket => \n                    this.state.source === '' || \n                    ticket.source.label\n                        .toLowerCase()\n                        .includes(this.state.source.toLowerCase()) ||\n                    ticket.source.value\n                        .toLowerCase()\n                        .includes(this.state.source.toLowerCase()))\n                .filter(ticket => \n                    this.state.assignee === '' || \n                    ticket.assignee\n                        .toLowerCase()\n                        .includes(this.state.assignee.toLowerCase()))\n                .filter(ticket => \n                    this.state.lastUpdate === '' || \n                    GlobalFunction.toShortDateString(ticket.lastUpdate)\n                        .toLowerCase()\n                        .includes(this.state.lastUpdate.toLowerCase()))\n        );\n    }\n\n    sortTickets(attrName: string, isAsc: boolean): void {\n        this.tickets.sort((a: PartialTicketData, b: PartialTicketData) => \n            (a[attrName] > b[attrName]) ? (isAsc ? 1 : -1) : (isAsc ? -1 : 1)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Review Tickets</div>\n                <div className='sub-section'>\n                    {this.state.ticketListUpdated ? (\n                        <CustomTable\n                            className='custom-table-selectable'\n                            rows={this.getFilteredTicketData()}\n                            renderHeader={() => this.renderTableHeader()}\n                            renderRow={(rowData: any, index: number) => \n                                this.renderTableRow(rowData, index)}\n                            onChangeInfo={(info: LabelDisplayedRowsArgs) => \n                                `${info.from}-${info.to} out of ${info.count} tickets`}\n                            labelRowsPerPage='Show'\n                            rowsPerPageOptions={[10, 25, 50]} />\n                    ) : (\n                        <Loading height='10rem'/>\n                    )}\n                </div>\n\n                {/* Modals */}\n                {this.state.selectedTicketId ? (\n                    <TicketInfoModal \n                        ticketId={this.state.selectedTicketId}\n                        onCloseButtonClicked={() => {\n                            this.setState({selectedTicketId: undefined});\n                        }} />\n                ) : null}\n                <div className='section' />\n            </div>\n        );\n    }\n\n\n\n\n\n    renderTableHeader(): JSX.Element {\n        return (\n            <>\n            {this.renderHeaderColumn('urgency', 'Urgency')}\n            {this.renderHeaderColumn('status', 'Status')}\n            {this.renderHeaderColumn('ticketNo', 'Ticket ID')}\n            {this.renderHeaderColumn('channel', 'Channel')}\n            {this.renderHeaderColumn('type', 'Type')}\n            {this.renderHeaderColumn('specificType', 'Specific Type')}\n            {this.renderHeaderColumn('source', 'Source')}\n            {this.renderHeaderColumn('assignee', 'Assigned')}\n            {this.renderHeaderColumn('lastUpdate', 'Last Update')}\n            </>\n        );\n    }\n\n\n\n\n\n    renderTableRow = (ticket: PartialTicketData, index: number) => {\n        const backgroundColor = (index % 2 === 0 ? (\n                ticket.urgency === 1 ? '#FFF2F2' : '#FFFFFF'\n            ) : (\n                ticket.urgency === 1 ? '#F7ECEC' : '#F6F7FA'\n            ));\n\n        const urgencyColor = (\n            ticket.urgency === 3 ? '#3AB77D' :\n            ticket.urgency === 2 ? '#FAB435' :\n            ticket.urgency === 1 ? '#FD5451' : '')\n        \n        return (\n            <TableRow \n                style={{backgroundColor: backgroundColor}} \n                onClick={() => {\n                    this.setState({selectedTicketId: ticket.id});\n                }}>\n                <TableCell style={{textAlign: 'center', paddingLeft: 0}}>\n                    <div \n                        className='number-item' \n                        style={{display: 'inline-block', backgroundColor: urgencyColor}}>\n                        {ticket.urgency}\n                    </div>\n                </TableCell>\n                <TableCell>{ticket.status}</TableCell>\n                <TableCell>{ticket.ticketNo}</TableCell>\n                <TableCell>{ticket.channel}</TableCell>\n                <TableCell>{ticket.type}</TableCell>\n                <TableCell>{ticket.specificType}</TableCell>\n                <TableCell>\n                    <div className='text'>{ticket.source.label}</div>\n                    <div className='light-text' style={{fontSize: '9px'}}>\n                        {ticket.source.value}\n                    </div>\n                </TableCell>\n                <TableCell>{ticket.assignee}</TableCell>\n                <TableCell>{GlobalFunction.toShortDateString(ticket.lastUpdate)}</TableCell>\n            </TableRow>\n        );\n    }\n\n\n\n    renderHeaderColumn(attrName: string, headerText: string): JSX.Element {\n        return (\n            <TableCell>\n                <span className='header-2'>{headerText}</span>\n                <div style={{float: 'right'}}>\n                    <IconButton \n                        icon={faSort} \n                        onClick={() => {\n                            this.sortTickets(attrName, true);\n                            this.setState({ticketListUpdated: true});\n                        }} />\n                </div>\n                <InputField\n                    value={this.state[attrName]}\n                    onChange={(value: string) => {\n                        this.setState(prevState => ({...prevState, [attrName]: value}));\n                    }} />\n            </TableCell>\n        );\n    }\n}\n\n\n","import * as React from 'react';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { TableRow, TableCell, Grid } from '@material-ui/core';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\nimport { faSort } from '@fortawesome/free-solid-svg-icons';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\n\ninterface IStates {\n    loaId: string;\n    approvalCode: string;\n    diagnosis: string;\n    procedure: string;\n    provider: string;\n    amount: string;\n    sessions: string;\n    dateAvailed: string;\n    type: string;\n    status: string;\n}\n\n\nexport class CheckUtilizationSection extends React.Component<{}, IStates> {\n\n    dummyData = [\n        {\n            loa: { id: '9999-99999', swipe: true },\n            approvalCode: '99999999',\n            diagnosis: { code: '999.99', name: 'ICD10 Name', desc: 'Description.' },\n            procedure: { code: '999.99', name: 'CPT Name', desc: 'Description.' },\n            provider: { name: 'General Santos Doctor’s Hospitals.' },\n            amount: 0,\n            sessions: 1,\n            dateAvailed: new Date(),\n            type: 'IBNR',\n            status: 'Approved'\n        }\n    ]\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            loaId: '',\n            approvalCode: '',\n            diagnosis: '',\n            procedure: '',\n            provider: '',\n            amount: '',\n            sessions: '',\n            dateAvailed: '',\n            type: '',\n            status: ''\n        };\n    }\n    \n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Check Utilization</div>\n                <Grid container className='sub-section' spacing={2}>\n                    <Grid item xs={3}>\n                        <div className='light-text'>ANNUAL BENEFIT LIMIT</div>\n                        <div className='header-1'>{'PHP 0.00'}</div>\n                    </Grid>\n                    <Grid item xs={9}>\n                        <Line \n                            items={[\n                                { value: 70, color: '#3FBB7F', label1: 'UTILIZED', label2: 'PHP 38,021.35' },\n                                { value: 5, color: '#1D236F', label1: 'IBNR', label2: 'PHP 11,978.65' },\n                                { value: 25, color: '#FCB53F', label1: 'AVAILABLE', label2: 'PHP 50,001' }\n                            ]}\n                            maxValue={100} />\n                    </Grid>\n                </Grid>\n                <div className='sub-section'>\n                    <CustomTable\n                        className='custom-table-scrollable'\n                        rows={this.dummyData}\n                        renderHeader={() => this.renderTableHeader()}\n                        renderRow={(rowData: any, index: number) => \n                            this.renderTableRow(rowData, index)} \n                        rowsPerPageOptions={[10, 25, 50]} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n        return (\n            <>\n            {this.renderHeaderColumn('loaId', 'LOA ID', '100px')}\n            {this.renderHeaderColumn('approvalCode', 'Approval Code', '120px')}\n            {this.renderHeaderColumn('diagnosis', 'Diagnosis', '200px')}\n            {this.renderHeaderColumn('procedure', 'Procedure', '200px')}\n            {this.renderHeaderColumn('provider', 'Provider', '150px')}\n            {this.renderHeaderColumn('amount', 'Amount', '100px')}\n            {this.renderHeaderColumn('sessions', 'Sessions', '75px')}\n            {this.renderHeaderColumn('dateAvailed', 'Date Availed', '150px')}\n            {this.renderHeaderColumn('type', 'Type', '75px')}\n            {this.renderHeaderColumn('status', 'Status', '75px')}\n            </>\n        );\n    }\n\n    renderTableRow(utilization: any, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                <TableCell>{utilization.loa.id}</TableCell>\n                <TableCell>{utilization.approvalCode}</TableCell>\n                <TableCell>{utilization.diagnosis.name}</TableCell>\n                <TableCell>{utilization.procedure.name}</TableCell>\n                <TableCell>{utilization.provider.name}</TableCell>\n                <TableCell>{utilization.amount}</TableCell>\n                <TableCell>{utilization.sessions}</TableCell>\n                <TableCell>{GlobalFunction.toCommonDateString(utilization.dateAvailed)}</TableCell>\n                <TableCell>{utilization.type}</TableCell>\n                <TableCell>{utilization.status}</TableCell>\n            </TableRow>\n        );\n    }\n\n\n    renderHeaderColumn(attrName: string, headerText: string, width: string): JSX.Element {\n        return (\n            <TableCell style={{minWidth: width, maxWidth: width}}>\n                <span className='header-2'>{headerText}</span>\n                <div style={{float: 'right'}}>\n                    <IconButton \n                        icon={faSort} \n                        onClick={() => {\n                            // this.sortTickets('urgency', true);\n                            // this.setState({ticketListUpdated: true});\n                        }} />\n                </div>\n                <InputField\n                    value={this.state[attrName]}\n                    onChange={(value: string) => {\n                        this.setState(prevState => ({...prevState, [attrName]: value}));\n                    }} />\n            </TableCell>\n        );\n    }\n}\n\n\ninterface LineProps {\n    items: {\n        value: number;\n        color: string;\n        label1: string;\n        label2: string;\n    }[]\n    maxValue: number;\n}\n\nexport class Line extends React.Component<LineProps> {\n\n    render(): JSX.Element {\n        return (\n            <div style={{width: '50%', height: 0}}>\n                {this.props.items.map(item => {\n                    return (\n                        <div \n                            style={{\n                                width: (item.value / this.props.maxValue * 100) + '%', \n                                height: '6px', \n                                display: 'inline-block',\n                                backgroundColor: item.color\n                            }} />\n                    );\n                })}\n                <div style={{padding: '0.5rem 0'}}>\n                {this.props.items.map(item => {\n                    return (\n                        <div \n                            style={{\n                                width: (1 / this.props.items.length * 100) + '%', \n                                height: '6px', \n                                display: 'inline-block'\n                            }}>\n                            <div>\n                                <div \n                                    style={{\n                                        width: '10px', \n                                        height: '10px', \n                                        backgroundColor: item.color,\n                                        display: 'inline-block',\n                                        marginRight: '1rem'\n                                    }}/>\n                                <div \n                                    className='light-text' \n                                    style={{\n                                        display: 'inline-block'\n                                    }}>\n                                    {item.label1}\n                                </div>\n                                <div \n                                    className='header-2' \n                                    style={{\n                                        color: item.color,\n                                    }}>\n                                    {item.label2}\n                                </div>\n                            </div>\n                         </div>\n                    );\n                })}\n                </div>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Grid, TableCell, TableRow, Tabs, Tab } from '@material-ui/core';\nimport { ConfinementDetails } from '../ResolveTicketPage';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { DiagnosisData, ProcedureData, DoctorData } from 'Pages/CustomerCarePage/Models';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { AccommodationData } from 'Pages/CustomerCarePage/UpdateTicketPage/UpdateTicketProps';\nimport { CustomRadio } from 'Pages/CustomerCarePage/Components/CustomRadio';\nimport { ComplexTable } from 'Pages/CustomerCarePage/Components/ComplexTable';\nimport { InputArea } from 'Pages/CustomerCarePage/Components/InputArea';\n\ninterface IProps {\n    confinement: ConfinementDetails;\n    refreshConfinementState: () => void;\n}\n\ninterface IStates {\n    selectedTab: any;\n}\n\n\nexport class ApproveInpatientSection extends React.Component<IProps, IStates> {\n\n    APPROVED = 'Approved';\n    DISAPPROVED = 'Disapproved';\n    PENDING = 'Pending';\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            selectedTab: 0\n        }\n    }\n\n    getTotalAccommodationCost = (diagnosis: DiagnosisData) => {\n        let totalCost = 0;\n        if (diagnosis.isPrimary) {\n            this.props.confinement.accommodations.map(accommodation => {\n                totalCost += accommodation.costPerDay * accommodation.days;\n            });\n        }\n        return totalCost;\n    }\n\n    getProceduresCost = (diagnosis: DiagnosisData) => {\n        let total = 0;\n        diagnosis.procedures.map(procedure => {\n            total += procedure.amount;\n        });\n        return total;\n    }\n\n    getAttendingPhysicianCost = (diagnosis: DiagnosisData) => {\n        let total = 0;\n        diagnosis.doctors\n            .filter(doctor => doctor.type === 'Attending')\n            .map(doctor => {\n                total += doctor.fee;\n            });\n        return total;\n    }\n\n    getAvailmentCost = (diagnosis: DiagnosisData) => {\n        return (\n            this.getProceduresCost(diagnosis) +\n            this.getAttendingPhysicianCost(diagnosis) +\n            this.getTotalAccommodationCost(diagnosis)\n        );\n    }\n\n    getAllAvailmentsCost = () => {\n        let total = 0;\n        this.props.confinement.diagnoses.map(diagnosis => {\n            total += this.getAvailmentCost(diagnosis);\n        });\n        return total;\n    }\n\n    getAllProceduresCount = () => {\n        let total = 0;\n        this.props.confinement.diagnoses.map(diagnosis => {\n            total += diagnosis.procedures.length;\n        });\n        return total;\n    }\n\n    render(): JSX.Element {\n        const confinement = this.props.confinement;\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Approve or Disapprove Inpatient</div>\n                <Grid container spacing={2}>\n                    <Grid item xs={4}>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>PROVIDER</div>\n                            <div className='small-text'>\n                                {`${confinement.provider.value} - ${confinement.provider.label}`}\n                            </div>\n                        </div>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>KIND OF CONFINEMENT</div>\n                            <div className='small-text'>{confinement.confinementKind}</div>\n                        </div>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>DATE ADMITTED</div>\n                            <div className='small-text'>\n                                {GlobalFunction.toCommonDateString(confinement.dateAdmitted)}\n                            </div>\n                        </div>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>PHILHEALTH</div>\n                            <div className='small-text'>{confinement.coverage.label}</div>\n                        </div>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>LINKED TICKETS</div>\n                            <div className='small-text'>{'---*'}</div>\n                        </div>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>GIFT GIVEN</div>\n                            <div className='small-text'>{confinement.giftGiven ? 'Yes' : 'No'}</div>\n                        </div>\n                    </Grid>\n                </Grid>\n                {this.renderTabs()}\n                {this.state.selectedTab === 0 ? (\n                    this.renderSummarySection(confinement)\n                ) : (\n                    this.renderDiagnosisSection(\n                        confinement.diagnoses.filter(diagnosis => \n                            diagnosis.icd10Code.value === this.state.selectedTab\n                        )[0]\n                    )\n                )}\n                \n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderTabs(): JSX.Element {\n        return (\n            <div className='sub-section'>\n                <Tabs\n                    className='custom-tabs' \n                    value={this.state.selectedTab}\n                    variant='scrollable'\n                    scrollButtons='auto'\n                    indicatorColor='primary'\n                    onChange={(_event: React.ChangeEvent<{}>, value: number) => {\n                        this.setState({selectedTab: value});\n                    }}>\n                        <Tab \n                            value={0} \n                            label={\n                                <div>\n                                    <div className='header-2'>SUMMARY OF DIAGNOSIS</div>\n                                    <div className='smaller-text'>\n                                        {`${GlobalFunction.formatNumber(this.getAllAvailmentsCost(), true)} PHP \n                                        (${this.getAllProceduresCount()} Procedures)`}\n                                    </div>\n                                </div>\n                            } />\n                        {this.props.confinement.diagnoses\n                            .filter(diagnosis => diagnosis.isPrimary)\n                            .map(diagnosis => {\n                                const totalCost = this.getAvailmentCost(diagnosis);\n                                const proceduresCount = diagnosis.procedures.length;\n                                return (\n                                    <Tab \n                                        value={diagnosis.icd10Code.value} \n                                        label={\n                                            <div>\n                                                <div className='header-2'>PRIMARY DIAGNOSIS</div>\n                                                <div className='smaller-text'>\n                                                    {`${GlobalFunction.formatNumber(totalCost, true)} PHP \n                                                    (${proceduresCount} Procedure${proceduresCount > 1 ? 's' : ''})`}\n                                                </div>\n                                            </div>\n                                        } />\n                                );\n                            })}\n                        {this.props.confinement.diagnoses\n                            .filter(diagnosis => !diagnosis.isPrimary)\n                            .map((diagnosis, index) => {\n                                const totalCost = this.getAvailmentCost(diagnosis);\n                                const proceduresCount = diagnosis.procedures.length;\n                                return (\n                                    <Tab \n                                        value={diagnosis.icd10Code.value} \n                                        label={\n                                            <div>\n                                            <div className='header-2'>{`DIAGNOSIS ${index + 1}`}</div>\n                                            <div className='smaller-text'>\n                                                {`${GlobalFunction.formatNumber(totalCost, true)} PHP \n                                                (${proceduresCount} Procedure${proceduresCount > 1 ? 's' : ''})`}\n                                            </div>\n                                            </div>\n                                        } />\n                                );\n                            })}\n                </Tabs>\n                <div style={{borderBottom: '2px solid #1E2071'}} />\n            </div>\n        );\n    }\n\n    renderSummarySection(confinement: ConfinementDetails): JSX.Element {\n        return (\n            <div>\n                {confinement.diagnoses\n                    .filter(diagnosis => diagnosis.isPrimary)\n                    .map(diagnosis => {\n                        return this.renderDiagnosisInfo(diagnosis, 0);    \n                    })}\n                {confinement.diagnoses\n                    .filter(diagnosis => !diagnosis.isPrimary)\n                    .map((diagnosis, index)=> {\n                        return this.renderDiagnosisInfo(diagnosis, index + 1);    \n                    })}\n            </div>\n        );\n    }\n\n    renderDiagnosisInfo(diagnosis: DiagnosisData, index: number): JSX.Element {\n        const procedureCost = this.getProceduresCost(diagnosis);\n        const accommodationCost = this.getTotalAccommodationCost(diagnosis);\n        const attendingPhysicianCost = this.getAttendingPhysicianCost(diagnosis);\n        return (\n            <Grid container className='sub-section'>\n                <div style={{width: '2rem'}}>\n                    <div className='number-item'>{index + 1}</div>\n                </div>\n                <div style={{width: 'calc(100% - 2rem)'}}>\n                    <div style={{marginBottom: '1rem'}}>\n                        <div className='text'>\n                            {`${diagnosis.icd10Code.value} — ${diagnosis.icd10Code.label}`}\n                            {diagnosis.isPrimary ? (\n                                <span className='header-2'>{' (PRIMARY)'}</span>\n                            ) : null}\n                        </div>\n                        {diagnosis.doctors.filter(doctor => doctor.type === 'Admitting')\n                            .map(doctor => {\n                                return (\n                                    <>\n                                    <div className='small-text'>{`${doctor.id} - ${doctor.name}`}</div>\n                                    <div className='small-text'>\n                                        {`PHP ${GlobalFunction.formatNumber(doctor.fee, true)}`}\n                                    </div>\n                                    </>\n                                );\n                            })\n                        }\n                        \n                        <div className='small-text'>\n                            {`Remarks: ${diagnosis.remarks ? diagnosis.remarks : 'None'}`}\n                        </div>\n                        <div className='small-text'>\n                            {`PHIC: No*`}\n                        </div>\n                        <div className='header-2'>\n                            {`TOTAL AMOUNT: ${GlobalFunction.formatNumber(\n                                procedureCost + accommodationCost + attendingPhysicianCost, true\n                            )} PHP`}\n                        </div>\n                        <TextButton \n                            label='Approve/Disapprove Diagnosis' \n                            onClick={() => {\n                                window.scroll(0, -window.pageYOffset);\n                                this.setState({selectedTab: diagnosis.icd10Code.value});\n                            }} />\n                    </div>\n\n                    {this.renderTableSection('PROCEDURES',\n                        <CustomTable\n                            className='custom-table'\n                            rows={diagnosis.procedures}\n                            renderHeader={() => {\n                                return (\n                                    <>\n                                    <TableCell>Procedure</TableCell>\n                                    <TableCell style={{textAlign: 'right', width: '150px'}}>Amount</TableCell>\n                                    <TableCell style={{width: '150px'}}>Date</TableCell>\n                                    <TableCell style={{width: '250px'}}>Clause</TableCell>\n                                    <TableCell style={{textAlign: 'right', width: '150px'}}>Remaining Bal.</TableCell>\n                                    </>\n                                );\n                            }}\n                            renderRow={(procedure: ProcedureData, index: number) => {\n                                const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                                return (\n                                    <TableRow style={{backgroundColor: backgroundColor}}>\n                                        <TableCell>{`${procedure.cptCode.value} — ${procedure.cptCode.label}`}</TableCell>\n                                        <TableCell style={{textAlign: 'right'}}>\n                                            {`${GlobalFunction.formatNumber(procedure.amount, true)} PHP`}\n                                        </TableCell>\n                                        <TableCell>{GlobalFunction.toShortDateString(procedure.dateAdded)}</TableCell>\n                                        <TableCell>{`This is the clause*`}</TableCell>\n                                        <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(9999, true)} PHP*`}</TableCell>\n                                    </TableRow>\n                                );\n                            }} />,\n                            procedureCost\n                    )}\n\n                    {diagnosis.isPrimary ? (\n                        this.renderTableSection('ROOM ACCOMMODATIONS',\n                            <CustomTable\n                                className='custom-table'\n                                rows={this.props.confinement.accommodations}\n                                renderHeader={() => {\n                                    return (\n                                        <>\n                                        <TableCell>Room Type</TableCell>\n                                        <TableCell style={{textAlign: 'right', width: '200px'}}>No. of days</TableCell>\n                                        <TableCell style={{textAlign: 'right', width: '200px'}}>Cost per day</TableCell>\n                                        <TableCell style={{textAlign: 'center', width: '200px'}}>HIMS Assessment</TableCell>\n                                        </>\n                                    );\n                                }}\n                                renderRow={(accommodations: AccommodationData, index: number) => {\n                                    const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                                    return (\n                                        <TableRow style={{backgroundColor: backgroundColor}}>\n                                            <TableCell>{accommodations.roomType}</TableCell>\n                                            <TableCell style={{textAlign: 'right'}}>{accommodations.days}</TableCell>\n                                            <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(accommodations.costPerDay, true)} PHP`}</TableCell>\n                                            <TableCell style={{textAlign: 'center'}}>{`Approve*`}</TableCell>\n                                        </TableRow>\n                                    );\n                                }} />,\n                                accommodationCost\n                        )\n                    ) : null}\n\n                    {this.renderTableSection('ATTENDING PHYSICIANS',\n                        <CustomTable\n                            className='custom-table'\n                            rows={diagnosis.doctors.filter(doctor => doctor.type === 'Attending')}\n                            renderHeader={() => {\n                                return (\n                                    <>\n                                    <TableCell>Name of Doctor</TableCell>\n                                    <TableCell style={{width: '200px'}}>Specialization</TableCell>\n                                    <TableCell style={{textAlign: 'right', width: '125px'}}>No. of Visits</TableCell>\n                                    <TableCell style={{textAlign: 'right', width: '200px'}}>Amount</TableCell>\n                                    </>\n                                );\n                            }}\n                            renderRow={(doctor: DoctorData, index: number) => {\n                                const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                                return (\n                                    <TableRow style={{backgroundColor: backgroundColor}}>\n                                        <TableCell>{doctor.name}</TableCell>\n                                        <TableCell>{doctor.specialization}</TableCell>\n                                        <TableCell style={{textAlign: 'right'}}>{doctor.noOfVisits}</TableCell>\n                                        <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(doctor.fee, true)} PHP`}</TableCell>\n                                    </TableRow>\n                                );\n                            }} />,\n                            attendingPhysicianCost\n                    )}\n                </div>\n            </Grid>\n        );\n    }\n\n    renderTableSection(headerName: string, table: JSX.Element, totalValue?: number): JSX.Element {\n        return (\n            <div className='sub-section'>\n                <div className='header-2'>{headerName}</div>\n                {table}\n                {totalValue ? (\n                    <div className='sub-section'>\n                        <div style={{float: 'right'}}>\n                            <span className='small-text'>TOTAL AMOUNT</span>\n                            <span style={{marginLeft: '1rem'}} />\n                            <span className='header-2'>\n                                {GlobalFunction.formatNumber(totalValue, true) + ' PHP'}\n                            </span>\n                        </div>\n                </div>\n                ) : null}\n            </div>\n        );\n    }\n\n    renderDiagnosisSection(diagnosis: DiagnosisData): JSX.Element {\n        console.log(this.props.confinement.diagnoses);  \n        const procedureCost = this.getProceduresCost(diagnosis);\n        const accommodationCost = this.getTotalAccommodationCost(diagnosis);\n        const attendingPhysicianCost = this.getAttendingPhysicianCost(diagnosis);\n        return (\n            <div className='sub-section' style={{marginLeft: '1rem'}}>\n                <Grid container spacing={2}>\n                    <Grid item xs={6}>\n                        <div className='text'>\n                            {`${diagnosis.icd10Code.value} — ${diagnosis.icd10Code.label}`}\n                            {diagnosis.isPrimary ? (\n                                <span className='header-2'>{' (PRIMARY)'}</span>\n                            ) : null}\n                        </div>\n                        {diagnosis.doctors.filter(doctor => doctor.type === 'Admitting')\n                            .map(doctor => {\n                                return (\n                                    <>\n                                    <div className='small-text'>{`${doctor.id} - ${doctor.name}`}</div>\n                                    <div className='small-text'>\n                                        {`PHP ${GlobalFunction.formatNumber(doctor.fee, true)}`}\n                                    </div>\n                                    </>\n                                );\n                            })\n                        }\n                        \n                        <div className='small-text'>\n                            {`Remarks: ${diagnosis.remarks ? diagnosis.remarks : 'None'}`}\n                        </div>\n                        <div className='small-text'>\n                            {`PHIC: No*`}\n                        </div>\n                        <div className='header-2'>\n                            {`TOTAL AMOUNT: ${GlobalFunction.formatNumber(\n                                procedureCost + accommodationCost + attendingPhysicianCost, true\n                            )} PHP`}\n                        </div>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <div className='light-text'>Choose Assessment</div>\n                        <CustomRadio \n                            label='Approve'\n                            checkedCondition={diagnosis.assessmentType === this.APPROVED}\n                            onChange={() => {\n                                diagnosis.assessmentType = this.APPROVED;\n                                this.props.refreshConfinementState();\n                            }} />\n                        <CustomRadio \n                            label='Disapprove'\n                            checkedCondition={diagnosis.assessmentType === this.DISAPPROVED}\n                            onChange={() => {\n                                diagnosis.assessmentType = this.DISAPPROVED;\n                                this.props.refreshConfinementState();\n                            }} />\n                    </Grid>\n                    <Grid item xs={4}>\n                        <div className='light-text'>Remarks</div>\n                        <InputArea\n                            value={diagnosis.assessmentRemarks}\n                            onChange={(value: string) => {\n                                diagnosis.assessmentRemarks = value;\n                                this.props.refreshConfinementState();\n                            }} />\n                    </Grid>\n                    \n                </Grid>\n                <div className='sub-section'>\n                    <ComplexTable \n                        data={diagnosis.procedures}\n                        renderHeader={() => this.renderHeader()}\n                        renderRow={(rowData: any, index: number) => \n                            this.renderRow(rowData, index)} />\n                </div>\n\n                {diagnosis.isPrimary ? (\n                    this.renderTableSection('ROOM ACCOMMODATIONS',\n                        <CustomTable\n                            className='custom-table'\n                            rows={this.props.confinement.accommodations}\n                            renderHeader={() => {\n                                return (\n                                    <>\n                                    <TableCell>Room Type</TableCell>\n                                    <TableCell style={{textAlign: 'right', width: '200px'}}>No. of days</TableCell>\n                                    <TableCell style={{textAlign: 'right', width: '200px'}}>Cost per day</TableCell>\n                                    <TableCell style={{textAlign: 'center', width: '200px'}}>HIMS Assessment</TableCell>\n                                    </>\n                                );\n                            }}\n                            renderRow={(accommodations: AccommodationData, index: number) => {\n                                const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                                return (\n                                    <TableRow style={{backgroundColor: backgroundColor}}>\n                                        <TableCell>{accommodations.roomType}</TableCell>\n                                        <TableCell style={{textAlign: 'right'}}>{accommodations.days}</TableCell>\n                                        <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(accommodations.costPerDay, true)} PHP`}</TableCell>\n                                        <TableCell style={{textAlign: 'center'}}>{`Approve*`}</TableCell>\n                                    </TableRow>\n                                );\n                            }} />,\n                            accommodationCost\n                    )\n                ) : null}\n\n                {this.renderTableSection('ATTENDING PHYSICIANS',\n                    <CustomTable\n                        className='custom-table'\n                        rows={diagnosis.doctors.filter(doctor => doctor.type === 'Attending')}\n                        renderHeader={() => {\n                            return (\n                                <>\n                                <TableCell>Name of Doctor</TableCell>\n                                <TableCell style={{width: '200px'}}>Specialization</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '125px'}}>No. of Visits</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '200px'}}>Amount</TableCell>\n                                </>\n                            );\n                        }}\n                        renderRow={(doctor: DoctorData, index: number) => {\n                            const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                            return (\n                                <TableRow style={{backgroundColor: backgroundColor}}>\n                                    <TableCell>{doctor.name}</TableCell>\n                                    <TableCell>{doctor.specialization}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{doctor.noOfVisits}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(doctor.fee, true)} PHP`}</TableCell>\n                                </TableRow>\n                            );\n                        }} />,\n                        attendingPhysicianCost\n                )}\n                <div className='section' />\n            </div>\n        );\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n    renderHeader(): JSX.Element {\n        const headerNameStyle = {\n            margin: 0,\n            padding: '12px 0 12px 0'\n        };\n\n        return (\n            <>\n                <Grid item xs={4}>\n                    <div className='header-2' style={headerNameStyle}>Procedure Details</div>\n                </Grid>\n                <Grid item xs={4}>\n                    <div className='header-2' style={headerNameStyle}>System Details</div>\n                </Grid>\n                <Grid item xs={4}>\n                    <div className='header-2' style={headerNameStyle}>Assessment</div>\n                </Grid>\n            </>\n        );\n    }\n\n    renderRow(procedure: ProcedureData, index: number): JSX.Element {\n        return (\n            <div className='section' >\n                \n                <Grid container>\n                    <Grid item xs={4}>\n                        <div>\n                            <Grid container>\n                                <Grid item xs={2} style={{padding: '0 0.5rem', marginTop: '-3px'}}>\n                                    <div className='number-item'>{index + 1}</div>\n                                </Grid>\n                                <Grid item xs={10} className='header-2'>\n                                    {procedure.cptCode.value + ' - ' + procedure.cptCode.label}\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Grid>\n                    \n                </Grid>\n                <Grid container>\n                    <Grid item xs={4}>\n                        <div>\n                            <Grid container>\n                                <Grid item xs={2} />\n                                <Grid item xs={10}>\n                                    <div className='sub-section-2'>\n                                        <div className='light-text'>AMOUNT</div>\n                                        <div className='small-text'>{'PHP ' + GlobalFunction.formatNumber(procedure.amount, true)}</div>\n                                    </div>\n                                    <div className='sub-section-2'>\n                                        <div className='light-text'>PHILHEALTH REQUIRED?</div>\n                                        <div className='small-text'>{procedure.isPHIC ? 'Yes' : 'No'}</div>\n                                    </div>\n                                    <div className='sub-section-2'>\n                                        <div className='light-text'>DATE OF AVAILMENT</div>\n                                        <div className='small-text'>{'May 19, 2019 *'}</div>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>SYSTEM ASSESSMENT</div>\n                            <div className='small-text'>{'Approve *'}</div>\n                        </div>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>REMAINING BALANCE</div>\n                            <div className='small-text'>{'PHP ' + 0 + '.00 *'}</div>\n                        </div>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>CLAUSE</div>\n                            <div className='small-text'>{'Laboratory tests, x-rays, and other diagnostic examinations prescribed by the INTELLICARE physician*'}</div>\n                        </div>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>Choose Assessment</div>\n                            <CustomRadio \n                                label='Approve'\n                                checkedCondition={procedure.assessmentType === this.APPROVED}\n                                onChange={() => {\n                                    procedure.assessmentType = this.APPROVED;\n                                    this.props.refreshConfinementState();\n                                }} />\n                            <CustomRadio \n                                label='Disapprove'\n                                checkedCondition={procedure.assessmentType === this.DISAPPROVED}\n                                onChange={() => {\n                                    procedure.assessmentType = this.DISAPPROVED;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </div>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>Remarks</div>\n                            <InputArea\n                                value={procedure.assessmentRemarks}\n                                onChange={(value: string) => {\n                                    procedure.assessmentRemarks = value;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </div>\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { ComplexTable } from 'Pages/CustomerCarePage/Components/ComplexTable';\nimport { Grid, TableCell, TableRow } from '@material-ui/core';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { ProcedureData, DiagnosisData, LOAData } from 'Pages/CustomerCarePage/Models';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { NumberField } from 'Pages/CustomerCarePage/Components/NumberField';\nimport { DatePicker } from 'Pages/CustomerCarePage/Components/DatePicker';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { faPlus, faPen, faMinusCircle, faCheckCircle, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\nimport { ConfinementDetails } from '../ResolveTicketPage';\n\ninterface IProps {\n    confinement: ConfinementDetails;\n    loas: LOAData[];\n    refreshLOAStates: () => void;\n}\n\ninterface IStates {\n    loaNumber: number;\n    amount: number;\n    loaDate: Date;\n    notes: string;\n\n    indexToEdit: number;\n    editLoaNumber: number;\n    editAmount: number;\n    editLoaDate: Date;\n    editNotes: string;\n}\n\nexport class SummaryInpatientSection extends React.Component<IProps, IStates> {\n\n    APPROVED = 'Approved';\n    DISAPPROVED = 'Disapproved';\n    PENDING = 'Pending';\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            loaNumber: 0,\n            amount: 0,\n            loaDate: new Date(),\n            notes: '',\n\n            indexToEdit: -1,\n            editLoaNumber: 0,\n            editAmount: 0,\n            editLoaDate: new Date(),\n            editNotes: ''\n        }\n    }\n\n    getProceduresCost = (diagnosis: DiagnosisData) => {\n        let total = 0;\n        diagnosis.procedures.map(procedure => {\n            total += procedure.amount;\n        })\n        return total;\n    }\n\n    getApprovedAvailments = () => {\n        const approvedAvailments = this.props.confinement.diagnoses.map(diagnosis => {\n            return {\n                ...diagnosis,\n                procedures: diagnosis.procedures\n                    .filter(procedure => procedure.assessmentType === this.APPROVED)\n                    .map(procedure => {\n                        return procedure;\n                    })\n            };\n        });\n        return approvedAvailments.filter(availment => availment.procedures.length > 0);\n    }\n\n    getDisapprovedAvailments = () => {\n        const disapprovedAvailments = this.props.confinement.diagnoses.map(diagnosis => {\n            return {\n                ...diagnosis,\n                procedures: diagnosis.procedures\n                    .filter(procedure => procedure.assessmentType === this.DISAPPROVED)\n                    .map(procedure => {\n                        return procedure;\n                    })\n            };\n        });\n        return disapprovedAvailments.filter(availment => availment.procedures.length > 0);\n    }\n\n    getApprovedAvailmentsCost = () => {\n        let total = 0;\n        this.props.confinement.diagnoses.map(diagnosis => {\n            diagnosis.procedures.map(procedure => {\n                total += (procedure.assessmentType === this.APPROVED ? procedure.amount : 0);\n            });\n        });\n        return total;\n    }\n\n    render(): JSX.Element {\n        const approvedAvailments = this.getApprovedAvailments();\n        const disapprovedAvailments = this.getDisapprovedAvailments();\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Summary of Approved Availments</div>\n                <div className='sub-section'>\n                    <div className='light-text'>PROVIDER</div>\n                    <div className='small-text'>\n                    {this.props.confinement.provider.label}</div>\n                    <div style={{float: 'right'}}>\n                        <span className='small-text'>TOTAL AMOUNT</span>\n                        <span style={{marginLeft: '1rem'}} />\n                        <span className='header-2'>\n                            {'PHP ' + GlobalFunction.formatNumber(this.getApprovedAvailmentsCost(), true)}\n                        </span>\n                    </div>\n                </div>\n                {approvedAvailments.length > 0 ? (\n                    <div className='sub-section'>\n                        <ComplexTable \n                            data={this.getApprovedAvailments()}\n                            renderHeader={() => this.renderHeader()}\n                            renderRow={(rowData: any, index: number) => \n                                this.renderRow(rowData, index)} />\n                    </div>\n                ) : null}\n                <div className='sub-section'>\n                    {/* <ComplexTable \n                        data={this.props.loas}\n                        renderHeader={() => this.renderLOAHeader()}\n                        renderRow={(rowData: any, index: number) => \n                            this.renderLOARow(rowData, index)} /> */}\n                    <CustomTable\n                        rows={this.props.loas}\n                        renderHeader={() => this.renderLOAHeader()}\n                        renderRow={(rowData: any, index: number) => \n                            this.renderLOARow(rowData, index)} />\n                </div>\n                <div className='sub-section' />\n                {disapprovedAvailments.length > 0 ? (\n                    <>\n                    <div className='header-1' style={{color: '#FD5451'}}>Disapproved Availments</div>\n                    <div className='sub-section'>\n                        <ComplexTable \n                            data={this.getDisapprovedAvailments()}\n                            renderHeader={() => this.renderHeader()}\n                            renderRow={(rowData: any, index: number) => \n                                this.renderRow(rowData, index)} />\n                    </div>\n                    </>\n                ) : null}\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderHeader(): JSX.Element {\n        const headerNameStyle = {\n            margin: 0,\n            padding: '12px 0 12px 0'\n        };\n\n        return (\n            <>\n                <Grid item xs={4}>\n                    <div className='header-2' style={headerNameStyle}>Diagnosis</div>\n                </Grid>\n                <Grid item xs={4}>\n                    <div className='header-2' style={headerNameStyle}>Doctor</div>\n                </Grid>\n                <Grid item xs={2}>\n                    <div className='header-2' style={headerNameStyle}>Professional Fee</div>\n                </Grid>\n                <Grid item xs={2}>\n                    <div className='header-2' style={{...headerNameStyle, textAlign: 'right'}}>\n                        Total Amt. of Procedures\n                    </div>\n                </Grid>\n            </>\n        );\n    }\n\n    renderRow(diagnosis: DiagnosisData, _index: number): JSX.Element {\n        return (\n            <>\n                <Grid className='small-section' container>\n                    <Grid item xs={4}>\n                        {diagnosis.icd10Code.value + ' - ' + diagnosis.icd10Code.label}\n                    </Grid>\n                    <Grid item xs={4}>\n                        {diagnosis.doctors[0].id + ' - ' + diagnosis.doctors[0].name}\n                    </Grid>\n                    <Grid item xs={2}>\n                        {'PHP ' + GlobalFunction.formatNumber(diagnosis.doctors[0].fee, true)}\n                    </Grid>\n                    <Grid item xs={2} style={{fontWeight: 'bold', textAlign: 'right'}}>\n                        {'PHP ' + GlobalFunction.formatNumber(this.getProceduresCost(diagnosis), true)}\n                    </Grid>\n                </Grid>\n                <div className='line-border' />\n                {diagnosis.procedures.map((procedure, index) => {\n                    return this.renderProcedure(procedure, index);\n                })}\n            </>\n        );\n    }\n\n    renderProcedure(procedure: ProcedureData, index: number): JSX.Element {\n\n        return (\n            <>\n            <div className='line-border' />\n            <div className='section' >\n                <Grid container>\n                    <Grid item xs={4}>\n                        <div>\n                            <Grid container>\n                                <Grid item xs={2} style={{padding: '0 0.5rem', marginTop: '-3px'}}>\n                                    <div className='number-item'>\n                                    {index + 1}\n                                    </div>\n                                </Grid>\n                                <Grid item xs={10} className='header-2'>\n                                    {procedure.cptCode.value + ' - ' + procedure.cptCode.label}\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Grid>\n                </Grid>\n                <Grid container>\n                    <Grid item xs={4}>\n                        <div>\n                            <Grid container>\n                                <Grid item xs={2} />\n                                <Grid item xs={10}>\n                                    <div className='sub-section'>\n                                        <div className='light-text'>AMOUNT</div>\n                                        <div className='small-text'>{'PHP ' + GlobalFunction.formatNumber(procedure.amount, true)}</div>\n                                    </div>\n                                    <div className='sub-section'>\n                                        <div className='light-text'>PHILHEALTH REQUIRED?</div>\n                                        <div className='small-text'>{procedure.isPHIC ? 'Yes' : 'No'}</div>\n                                    </div>\n                                    <div className='sub-section'>\n                                        <div className='light-text'>DATE OF AVAILMENT</div>\n                                        <div className='small-text'>{'May 19, 2019 *'}</div>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <div className='sub-section'>\n                            <div className='light-text'>SYSTEM ASSESSMENT</div>\n                            <div className='small-text'>{'Approve *'}</div>\n                        </div>\n                        <div className='sub-section'>\n                            <div className='light-text'>REMAINING BALANCE</div>\n                            <div className='small-text'>{'PHP ' + 0 + '.00 *'}</div>\n                        </div>\n                        <div className='sub-section'>\n                            <div className='light-text'>CLAUSE</div>\n                            <div className='small-text'>{'Laboratory tests, x-rays, and other diagnostic examinations prescribed by the INTELLICARE physician*'}</div>\n                        </div>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <div className='sub-section'>\n                            <div className='light-text'>ASSESSMENT</div>\n                            <div className='header-2'>{procedure.assessmentType}</div>\n                        </div>\n                        <div className='sub-section'>\n                            <div className='light-text'>REMARKS</div>\n                            <div className='small-text'>\n                                {procedure.assessmentRemarks ? procedure.assessmentRemarks : 'NONE'}\n                            </div>\n                        </div>\n                    </Grid>\n                </Grid>\n            </div>\n            </>\n        );\n    }\n\n    renderLOAHeader(): JSX.Element {\n        return (\n            <>\n            <TableCell style={{minWidth: '100px', maxWidth: '100px'}}>\n                <div className='header-2'>LOA Number</div>\n                <NumberField\n                    value={this.state.loaNumber}\n                    onChange={(value: number) => this.setState({loaNumber: value})} />\n            </TableCell>\n            <TableCell style={{minWidth: '100px', maxWidth: '100px'}}>\n                <div className='header-2'>Amount</div>\n                <NumberField\n                    value={this.state.amount}\n                    onChange={(value: number) => this.setState({amount: value})} />\n            </TableCell>\n            <TableCell style={{minWidth: '100px', maxWidth: '100px'}}>\n                <div className='header-2'>Date</div>\n                <DatePicker\n                    value={this.state.loaDate}\n                    onChange={(value: Date) => this.setState({loaDate: value})} />\n            </TableCell>\n            <TableCell>\n                <div className='header-2'>Notes</div>\n                <InputField\n                    value={this.state.notes}\n                    onChange={(value: string) => this.setState({notes: value})} />\n            </TableCell>\n            <TableCell style={{minWidth: '75px', maxWidth: '75px', textAlign: 'center'}}>\n                <TextButton \n                    label='Add LOA'\n                    icon={faPlus}\n                    onClick={() => {\n                        this.props.loas.push({\n                            loaNo: this.state.loaNumber,\n                            amount: this.state.amount,\n                            date: this.state.loaDate,\n                            notes: this.state.notes\n                        });\n                        this.props.refreshLOAStates();\n                        this.setState({\n                            loaNumber: 0, \n                            amount: 0,\n                            loaDate: new Date(),\n                            notes: ''\n                        });\n                    }}/>\n            </TableCell>\n            </>\n        );\n    }\n\n    renderLOARow(loa: LOAData, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                {this.state.indexToEdit !== index ? (\n                    <>\n                    <TableCell>{loa.loaNo}</TableCell>\n                    <TableCell>{GlobalFunction.formatNumber(loa.amount)}</TableCell>\n                    <TableCell>{GlobalFunction.toCommonDateString(loa.date)}</TableCell>\n                    <TableCell>{loa.notes}</TableCell>\n                    <TableCell>\n                        <Grid container>\n                            <Grid item xs={6} />\n                            <Grid item xs={3}>\n                                <IconButton\n                                    icon={faPen}\n                                    onClick={() => {\n                                        this.setState({indexToEdit: index});\n                                    }}  />\n                            </Grid>\n                            <Grid item xs={3}>\n                                <IconButton\n                                    icon={faMinusCircle}\n                                    onClick={() => {\n                                        this.props.loas.splice(index, 1);\n                                        this.props.refreshLOAStates();\n                                    }}/>\n                            </Grid>\n                        </Grid>\n                    </TableCell>\n                    </>\n                ) : (\n                    <>\n                    <TableCell>\n                        <NumberField\n                            value={this.state.editLoaNumber}\n                            onChange={(value: number) => this.setState({editLoaNumber: value})} />\n                    </TableCell>\n                    <TableCell>\n                        <NumberField\n                            value={this.state.editAmount}\n                            onChange={(value: number) => this.setState({editAmount: value})} />\n                    </TableCell>\n                    <TableCell>\n                        <DatePicker\n                            value={this.state.editLoaDate}\n                            onChange={(value: Date) => this.setState({editLoaDate: value})} />\n                    </TableCell>\n                    <TableCell>\n                        <InputField\n                            value={this.state.editNotes}\n                            onChange={(value: string) => this.setState({editNotes: value})} />\n                    </TableCell>\n                    <TableCell>\n                        <Grid container>\n                            <Grid item xs={6} />\n                            <Grid item xs={3}>\n                                <IconButton\n                                    icon={faCheckCircle}\n                                    onClick={() => {\n                                        this.props.loas[index] = {\n                                            loaNo: this.state.editLoaNumber,\n                                            amount: this.state.editAmount,\n                                            date: this.state.editLoaDate,\n                                            notes: this.state.editNotes\n                                        };\n                                        this.setState({indexToEdit: -1});\n                                    }}  />\n                            </Grid>\n                            <Grid item xs={3}>\n                                <IconButton\n                                    icon={faTimesCircle}\n                                    onClick={() => {\n                                        this.setState({indexToEdit: -1});\n                                    }}/>\n                            </Grid>\n                        </Grid>\n                    </TableCell>\n                    </>\n                )}\n                \n            </TableRow>\n        );\n    }\n}","import * as React from 'react';\nimport {  ConsultationDetails } from 'Pages/CustomerCarePage/Models';\nimport { CustomRadio } from 'Pages/CustomerCarePage/Components/CustomRadio';\nimport { Grid } from '@material-ui/core';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\n\ninterface IProps {\n    consultation: ConsultationDetails;\n    refreshConsultationState: () => void;\n}\n\ninterface IStates {\n    selectedTab: any;\n}\n\nexport class ApproveConsultationSection extends React.Component<IProps, IStates> {\n\n    APPROVED = 'Approved';\n    DISAPPROVED = 'Disapproved';\n    PENDING = 'Pending';\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            selectedTab: 0\n        }\n    }\n\n    render(): JSX.Element {\n        console.log(this.props.consultation)\n        const consultation = this.props.consultation;\n        return (\n            <Grid container className='section'>\n                <Grid item xs={6}>\n                    <div style={{paddingTop: '2.5rem'}} />\n                    <div className='header-1'>Resolve Consultation</div>\n                    <div className='sub-section-2'>\n                        <div className='light-text'>PROVIDER</div>\n                        <div className='small-text'>\n                            {`${consultation.provider.value} - ${consultation.provider.label}`}\n                        </div>\n                    </div>\n                    <div className='sub-section-2'>\n                        <div className='light-text'>DIAGNOSIS</div>\n                        <div className='small-text'>\n                            {`${consultation.diagnosis.value} - ${consultation.diagnosis.label}`}\n                        </div>\n                    </div>\n                    <div className='sub-section-2'>\n                        <div className='light-text'>DOCTOR</div>\n                        <div className='small-text'>\n                            {`${consultation.doctor.value} - ${consultation.doctor.label}`}\n                        </div>\n                    </div>\n                    <div className='sub-section-2'>\n                        <div className='light-text'>NOTES</div>\n                        <div className='small-text'>{consultation.notes ? consultation.notes : 'None'}</div>\n                    </div>\n                    <div className='sub-section'>\n                    <div className='header-2'>ASSESSMENT</div>\n                        <CustomRadio \n                            label='Approve'\n                            checkedCondition={consultation.assessmentType === this.APPROVED}\n                            onChange={() => {\n                                consultation.assessmentType = this.APPROVED;\n                                this.props.refreshConsultationState();\n                            }} />\n                        <CustomRadio \n                            label='Disapprove'\n                            checkedCondition={consultation.assessmentType === this.DISAPPROVED}\n                            onChange={() => {\n                                consultation.assessmentType = this.DISAPPROVED;\n                                this.props.refreshConsultationState();\n                            }} />\n                        <CustomRadio \n                            label='Pending'\n                            checkedCondition={consultation.assessmentType === this.PENDING}\n                            onChange={() => {\n                                consultation.assessmentType = this.PENDING;\n                                this.props.refreshConsultationState();\n                            }} />\n                        <InputField\n                            placeholder='Reason'\n                            value={consultation.assessmentRemarks}\n                            onChange={(value: string) => {\n                                consultation.assessmentRemarks = value;\n                                this.props.refreshConsultationState();\n                            }} />\n                    </div>\n                    <div className='section' />\n                </Grid>\n            </Grid>\n        );\n    }\n}","\nimport * as React from 'react';\nimport { match } from \"react-router-dom\";\nimport { API } from '../API';\nimport { MemberData, TicketData, AvailmentDetails, LOAData, DropdownChoice, DiagnosisData, ConsultationDetails } from '../Models';\nimport { MemberDataSection } from '../MemberDataSection';\nimport { CustomTabs } from '../Components/CustomTab';\nimport { Grid } from '@material-ui/core';\nimport { ApproveAvailmentSection } from './Components/ApproveAvailmentSection';\nimport { CheckBenefitSection } from './Components/CheckBenefitSection';\nimport { ResolveTicketFooter } from './Components/ResolveTicketFooter';\nimport { PartnerNetworkSection } from './Components/PartnerNetworkSection';\nimport { SummaryAvailmentSection } from './Components/SummaryAvailmentSection';\nimport { ReviewTicketsSection } from './Components/ReviewTicketsSection';\nimport { Payloads } from '../Payloads';\nimport { CheckUtilizationSection } from './Components/CheckUtilizationSection';\nimport { CheckContractSection } from './Components/CheckContractSection';\nimport { Processmaker } from '../Processmaker';\nimport { AccommodationData } from '../UpdateTicketPage/UpdateTicketProps';\nimport { ApproveInpatientSection } from './Components/ApproveInpatientSection';\nimport { SummaryInpatientSection } from './Components/SummaryInpatientSection';\nimport { Loading } from '../Components/Loading';\nimport { ApproveConsultationSection } from './Components/ApproveConsultationSection';\n\ninterface IProps {\n    required: string;\n    match: match<MatchParams>;\n    history: any;\n}\n\ninterface MatchParams {\n    id: string;\n}\n\ninterface IStates {\n    tabSelected: number;\n    isSummarizing: boolean;\n    loadedResources: number;\n\n    member?: MemberData;\n    ticket: TicketData;\n\n    availment?: AvailmentDetails;\n    confinement?: ConfinementDetails;\n    consultation?: ConsultationDetails;\n\n    loas: LOAData[];\n}\n\nexport interface ConfinementDetails {\n    provider: DropdownChoice;\n    dateAdmitted: Date;\n    confinementKind: string;\n    giftGiven: boolean;\n    coverage: DropdownChoice;\n    philhealthAmount: number;\n    finalBill: number;\n    dischargeDate: Date | null;\n\n    updates: any;\n    others: any;\n    diagnoses: DiagnosisData[];\n    accommodations: AccommodationData[];\n}\n\nexport class ResolveTicketPage extends React.Component<IProps, IStates> {\n\n    static RESOURCES_TO_LOAD = 3;\n\n    tabList = [\n        { value: 1, label: 'Availments' }, \n        { value: 2, label: 'Benefits' }, \n        { value: 3, label: 'Partner Network' }, \n        { value: 4, label: 'Exclusion' }, \n        { value: 5, label: 'Utilization' }, \n        { value: 6, label: 'Tickets' },  \n        { value: 7, label: 'Contract' }\n    ];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            tabSelected: 1,\n            isSummarizing: false,\n            loadedResources: 0,\n            ticket: {\n                ticketChannel: '',\n                transactionNo: '',\n                ticketSource: '',\n                memberName: '',\n                clientName: '',\n                brokerName: '',\n                facility: { value: '', label: '' },\n                department: '',\n                callerName: '',\n                contactNo: '',\n                ticketType: '',\n                specificType: '',\n                urgency: '',\n                agent: { id: '', name: '' },\n                additionalNotes: '',\n                additionalFiles: [],\n                ticketNo: '',\n                status: 'Open',\n                createdBy: { id: '1', name: 'Jilmer Cariaso - Static' },\n                dateCreated: new Date(),\n                dateUpdated: new Date(),\n                dateEscalated: null\n            },\n            loas: []\n        };\n    }\n\n    componentDidMount() {\n        API.get('customer-care/tickets/' + this.props.match.params['ticketId'],\n            (response) => {\n                console.log(response);\n                this.setState({loadedResources: this.state.loadedResources + 1});\n\n                const ticketCategory = response.ticket_category;\n                const availment = ticketCategory.availment_details;\n                const confinement = ticketCategory.confinement_details;\n                const consultation = ticketCategory.consultation_details;\n                \n                this.setState({ticket: {\n                    ticketChannel: response.received_via,\n                    transactionNo: response.transaction_no,\n                    ticketSource: response.received_from,\n                    memberName: response.member_name,\n                    clientName: response.corporate_client,\n                    brokerName: response.broker,\n                    facility: { value: '', label: response.hospital_name },\n                    department: response.department,\n                    callerName: response.caller_name,\n                    contactNo: response.contact_no,\n                    ticketType: ticketCategory.ticket_type,\n                    specificType: ticketCategory.specific_type,\n                    urgency: ticketCategory.urgency,\n                    agent: { id: '', name: ticketCategory.assign_to },\n                    additionalNotes: response.additional_notes,\n                    additionalFiles: [],\n                    ticketNo: this.props.match.params['appNo'],\n                    status: response.status,\n                    createdBy: { id: '1', name: 'Jilmer Cariaso - Static' },\n                    dateCreated: new Date(response.date_created),\n                    dateUpdated: new Date(response.date_updated),\n                    dateEscalated: new Date(response.date_escalated)\n                }});\n\n                if (availment) {\n                    const providerData = availment.provider.split(' - ');\n                    this.setState({availment: {\n                        provider: { value: providerData[0], label: providerData[1] },\n                        diagnoses: availment.availments_list.map(diagnosis => {\n                            return {\n                                icd10Code: { value: diagnosis.code, label: diagnosis.name },\n                                remarks: diagnosis.remarks,\n                                isPrimary: diagnosis.is_primary,\n                                isFinal: diagnosis.is_final,\n                                doctors: diagnosis.doctors.map(doctor => {\n                                    return {\n                                        id: doctor.id,\n                                        name: doctor.name,\n                                        specialization: doctor.specialization,\n                                        fee: doctor.fee,\n                                        noOfVisits: doctor.no_of_visits,\n                                        remarks: doctor.remarks\n                                    }\n                                }),\n                                procedures: diagnosis.procedures.map(procedure => {\n                                    return {\n                                        cptCode: { value: procedure.code, label: procedure.name },\n                                        isPHIC: procedure.phic,\n                                        amount: parseInt(procedure.amount),\n                                        notes: procedure.notes,\n                                        doctor: { value: '', label: procedure.doctor },\n                                        dateAdded: new Date(procedure.date_added),\n                                        assessmentType: procedure.assessment_type,\n                                        assessmentRemarks: procedure.assessment_remarks\n                                    }\n                                })\n                            }\n                        })\n                    }});\n                }\n\n                if (confinement) {\n                    const providerData = confinement.provider.split(' - ');\n                    this.setState({confinement: {\n                        provider: { value: providerData[0], label: providerData[1] },\n                        dateAdmitted: new Date(confinement.date_admitted),\n                        confinementKind: confinement.confinement_kind,\n                        giftGiven: confinement.gift_given,\n                        coverage: { value: '', label: confinement.coverage },\n                        philhealthAmount: confinement.philhealth_amount,\n                        finalBill: confinement.final_bill,\n                        dischargeDate: new Date(confinement.discharge_date),\n                        diagnoses: confinement.diagnoses.map(diagnosis => {\n                            return {\n                                icd10Code: { value: diagnosis.code, label: diagnosis.name },\n                                remarks: diagnosis.remarks,\n                                isPrimary: diagnosis.is_primary,\n                                isFinal: diagnosis.is_final,\n                                assessmentType: diagnosis.assessment_type,\n                                assessmentRemarks: diagnosis.assessment_remarks,\n                                doctors: diagnosis.doctors.map(doctor => {\n                                    return {\n                                        id: doctor.id,\n                                        name: doctor.name,\n                                        specialization: doctor.specialization,\n                                        type: doctor.type,\n                                        fee: doctor.fee,\n                                        noOfVisits: doctor.no_of_visits,\n                                        remarks: doctor.remarks\n                                    }\n                                }),\n                                procedures: diagnosis.procedures.map(procedure => {\n                                    return {\n                                        cptCode: { value: procedure.code, label: procedure.name },\n                                        isPHIC: procedure.phic,\n                                        amount: parseInt(procedure.amount),\n                                        notes: procedure.notes,\n                                        doctor: { value: '', label: procedure.doctor },\n                                        dateAdded: new Date(procedure.date_added),\n                                        assessmentType: procedure.assessment_type,\n                                        assessmentRemarks: procedure.assessment_remarks\n                                    }\n                                })\n                            }\n                        }),\n                        accommodations: confinement.room_accommodation.map(accommodation => {\n                            return {\n                                roomType: accommodation.room_type,\n                                days: parseInt(accommodation.no_of_days),\n                                costPerDay: accommodation.cost\n                            }\n                        }),\n                        updates: confinement.updates,\n                        others: confinement.others\n                    }});\n\n                    this.tabList[0].label = 'Inpatient';\n                }\n\n                if (consultation) {\n                    const providerData = consultation.provider.split(' - ');\n                    const diagnosisData = consultation.diagnosis.split(' - ');\n                    const doctorData = consultation.doctor.split(' - ');\n                    this.setState({consultation: {\n                        provider: { value: providerData[0], label: providerData[1] },\n                        diagnosis: { value: diagnosisData[0], label: diagnosisData[1] },\n                        doctor: { value: doctorData[0], label: doctorData[1] },\n                        notes: consultation.notes,\n                        assessmentType: consultation.assessment_type,\n                        assessmentRemarks: consultation.assessment_remarks\n                    }});\n                    this.tabList[0].label = 'Consultation Details';\n                }\n\n                this.setState({loas: response.loa.map(loa => {\n                    return {\n                        loaNo: loa.loa_no,\n                        amount: loa.amount,\n                        date: new Date(loa.date),\n                        notes: loa.notes\n                    }\n                })});\n\n                /* Get Member Details */\n                API.get('customer-care/members/' + response.member_id, \n                    (response) => {\n                        console.log(response);\n                        this.setState({loadedResources: this.state.loadedResources + 1});\n                        \n                        this.setState({member: {\n                            cardNo: response.member_card_no,\n                            firstName: response.first_name,\n                            middleName: response.middle_name,\n                            lastName: response.last_name,\n                            clientName: response.client.registered_name,\n                            birthDate: new Date(response.date_of_birth),\n                            gender: response.gender,\n                            civilStatus: response.civil_status\n                        }});\n\n                        API.get('customer-care/members/' + response.member_card_no + '/benefits',\n                            (response) => {\n                                console.log(response);\n                                this.setState({loadedResources: this.state.loadedResources + 1});\n                            },\n                            (error) => {\n                                console.log(error);\n                            });\n                    },\n                    (error) => {\n                        console.log(error);\n                    });\n            },\n            (error) => {\n                console.log(error);\n            });\n    }\n\n    render(): JSX.Element {\n        return (\n            <Grid container className='customer-care-main'>\n                {this.state.loadedResources !== ResolveTicketPage.RESOURCES_TO_LOAD ? (\n                    <div \n                        style={{\n                            backgroundColor: '#00000055', \n                            zIndex: 100, \n                            position: 'fixed', \n                            width: '100%', \n                            height: '100%'}}>\n                        <Loading height='10rem'/>\n                    </div>\n                    \n                ) : (null)}\n\n                <MemberDataSection \n                    member={this.state.member}\n                    ticket={this.state.ticket}\n                    ticketStatus='Resolve'\n                    onUpdateMemberStateChange={(_member: MemberData) => null} />\n\n                <CustomTabs \n                    tabList={this.tabList}\n                    selectedTab={this.state.tabSelected}\n                    setSelectedTab={(index: number) => {\n                        this.setState({tabSelected: index});\n                    }} />\n\n                <div className='update-ticket'>\n                    {this.state.tabSelected === 1 ? (\n\n                        this.state.availment ? (\n                            this.renderOutpatientContent(this.state.availment)\n\n                        ) : this.state.confinement ? (\n                            this.renderInpatientContent(this.state.confinement)\n\n                        ) : this.state.consultation ? (\n                            this.renderConsultationContent(this.state.consultation)\n\n                        ) : null\n                        \n                    ) : this.state.tabSelected === 2 && this.state.member ? (\n                        <CheckBenefitSection cardNo={this.state.member.cardNo} />\n                    ) : this.state.tabSelected === 3 ? (\n                        <PartnerNetworkSection />\n                    ) : this.state.tabSelected === 5 ? (\n                        <CheckUtilizationSection />\n                    ) : this.state.tabSelected === 6 ? (\n                        <ReviewTicketsSection \n                            ticketNo={this.props.match.params['caseId']} />\n                    ) : this.state.tabSelected === 7 && this.state.member ? (\n                        <CheckContractSection cardNo={this.state.member.cardNo} />\n                    ) : null}\n                </div>\n\n                <ResolveTicketFooter \n                    isSummarizing={this.state.consultation ? true : this.state.isSummarizing}\n                    onAssign={() => {\n\n                    }}\n                    onEscalate={() => {\n\n                    }}\n                    onSummarize={() => {\n                        this.setState({isSummarizing: true});\n                    }} \n                    onResolve={() => {\n                        if (this.state.member) {\n                            const payload = Payloads.getPutResolveTicketPayload(\n                                this.state.ticket,\n                                this.state.member.cardNo,\n                                this.state.loas,\n                                this.state.availment,\n                                this.state.confinement,\n                                this.state.consultation\n                            );\n                            \n                            console.log(payload);\n                            API.put('customer-care/tickets/' + this.props.match.params['ticketId'], payload,\n                                (response) => {\n                                    console.log(response);\n                                    //Check which case ticket is at\n                                    Processmaker.get('cases/'+this.props.match.params['caseId'],\n                                        (response) => {                                            \n                                            if (this.state.availment || this.state.confinement) { //means this is an availment\n                                                if (response['current_task'][0]['tas_title'] === 'Approve / Disapprove Availment') {\n                                                    Processmaker.put('cases/'+this.props.match.params['caseId']+'/route-case', {},\n                                                        (response) => {\n                                                            console.log(response);\n                                                            this.props.history.push('#/customer-care/tickets');\n                                                            window.location.reload();\n                                                        },\n                                                        (error) => {\n                                                            console.log(error);\n                                                        }\n                                                    );\n                                                }\n                                                else if (response['current_task'][0]['tas_title'] === 'Modify / Update Ticket') {\n                                                    Processmaker.put('cases/'+this.props.match.params['caseId']+'/route-case', {},\n                                                        (response) => {\n                                                            console.log(response);\n                                                            Processmaker.put('cases/'+this.props.match.params['caseId']+'/route-case', {},\n                                                                (response) => {\n                                                                    console.log(response);\n                                                                    this.props.history.push('#/customer-care/tickets');\n                                                                    window.location.reload();\n                                                                },\n                                                                (error) => {\n                                                                    console.log(error);\n                                                                }\n                                                            );\n                                                        },\n                                                        (error) => {\n                                                            console.log(error);\n                                                        }\n                                                    );\n                                                }\n                                                else if (response['current_task'][0]['tas_title'] === 'Create Ticket') {\n                                                    Processmaker.put('cases/'+this.props.match.params['caseId']+'/route-case', {},\n                                                        (response) => {\n                                                            console.log(response);\n                                                            Processmaker.put('cases/'+this.props.match.params['caseId']+'/route-case', {},\n                                                                (response) => {\n                                                                    console.log(response);\n                                                                    Processmaker.put('cases/'+this.props.match.params['caseId']+'/route-case', {},\n                                                                        (response) => {\n                                                                            console.log(response);\n                                                                            this.props.history.push('#/customer-care/tickets');\n                                                                            window.location.reload();\n                                                                        },\n                                                                        (error) => {\n                                                                            console.log(error);\n                                                                        }\n                                                                    );\n                                                                },\n                                                                (error) => {\n                                                                    console.log(error);\n                                                                }\n                                                            );\n                                                        },\n                                                        (error) => {\n                                                            console.log(error);\n                                                        }\n                                                    );\n                                                }\n                                            } else {\n                                                this.props.history.push('#/customer-care/tickets');\n                                                window.location.reload();\n                                            }\n                                        },\n                                        (error) => {\n                                            console.log(error);\n                                        }\n                                    );\n                                },\n                                (error) => {\n                                    console.log(error);\n                                }\n                            );\n                        }\n                    }} />\n            </Grid>\n        );\n    }\n\n    renderOutpatientContent(availment: AvailmentDetails): JSX.Element {\n        return (\n            !this.state.isSummarizing ? (\n                <ApproveAvailmentSection \n                    availment={availment}\n                    refreshAvailmentState={() => {\n                        this.setState({availment: this.state.availment});\n                    }} />\n            ) : (\n                <SummaryAvailmentSection \n                    availment={availment}\n                    loas={this.state.loas}\n                    refreshLOAStates={() => {\n                        this.setState({loas: this.state.loas});\n                    }} />\n            )\n        );\n    }\n\n    renderInpatientContent(confinement: ConfinementDetails): JSX.Element {\n        return (\n            !this.state.isSummarizing ? (\n                <ApproveInpatientSection\n                    confinement={confinement}\n                    refreshConfinementState={() => {\n                        this.setState({confinement: this.state.confinement});\n                    }} />\n            ) : (\n                <SummaryInpatientSection \n                    confinement={confinement}\n                    loas={this.state.loas}\n                    refreshLOAStates={() => {\n                        this.setState({loas: this.state.loas});\n                    }} />\n            )\n        );\n    }\n\n    renderConsultationContent(consultation: ConsultationDetails): JSX.Element {\n        return (\n            <div>\n                <ApproveConsultationSection \n                    consultation={consultation}\n                    refreshConsultationState={() => {\n                        this.setState({consultation: this.state.consultation});\n                    }} />\n            </div>\n        );\n    }\n}","/**\n * Asynchronously loads the component for FeaturePage\n */\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Components, Utils } from '@hims/core';\nconst { loadable } = Utils;\nconst { LoadingIndicator } = Components.UI;\n\nexport default loadable(\n  async () => {\n    const {\n      TicketListPage,\n      mapStateToProps,\n      mapDispatchToProps,\n    } = await import('./TicketListPage');\n\n    const Component = connect(\n      mapStateToProps,\n      mapDispatchToProps,\n    )(TicketListPage);\n    return { default: Component };\n  },\n  {\n    fallback: <LoadingIndicator />,\n  },\n);\n","import * as React from 'react';\nimport './component-style.scss';\n\ninterface IProps {\n    placeholder: string;\n    value: string;\n    detail: string;\n    onChange: (value: string) => void;\n}\n\nexport class DetailedInputField extends React.Component<IProps> {\n\n    shouldComponentUpdate(props: IProps, _state: any) {\n        return (\n            (this.props.placeholder !== props.placeholder) ||\n            (this.props.value !== props.value) ||\n            (this.props.detail !== props.detail)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='detailed-input-field'>\n                <div className='text'>{this.props.placeholder}</div>\n                <div className='input-field'>\n                    <input \n                        className='text-field' \n                        value={this.props.value}\n                        onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                            this.props.onChange(event.target.value);\n                        }}\n                    />\n                    <div className='detail'>{this.props.detail}</div>\n                </div>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Grid, TableCell, TableRow } from '@material-ui/core';\nimport './../style.scss';\nimport { CustomTable } from '../Components/CustomTable';\nimport { InputField } from '../Components/InputField';\nimport { IconButton } from '../Components/IconButton';\nimport { faSort } from '@fortawesome/free-solid-svg-icons';\nimport { LabelDisplayedRowsArgs } from '@material-ui/core/TablePagination';\nimport { CustomRadio } from '../Components/CustomRadio';\nimport { Dropdown } from '../Components/Dropdown';\nimport { DropdownChoice } from '../Models';\nimport { DetailedDropdown } from '../Components/DetailedDropdown';\nimport { DetailedInputField } from '../Components/DetailedInputField';\n\ninterface IProps {\n\n}\n\ninterface IStates {\n    \n}\n\nexport class AdvanceSearch extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n\n        };\n    }\n    \n    render(): JSX.Element {\n        return (\n            <Grid container className='customer-care-main'>\n                <div className='section'>\n                    <div className='header'>Advanced Search</div>\n\n                    <div className='bordered-section'>\n                        <Grid container spacing={10}>\n                            <Grid item xs={3}>\n                                <div className='header-2'>SEARCH FOR A</div>\n                                <DetailedDropdown\n                                    value={{value:'Testing adjustable width', label: ''}}\n                                    choices={[{value:'', label: ''}]}\n                                    onChange={(_value: DropdownChoice) => {\n\n                                    }} />\n                                <DetailedInputField\n                                    placeholder=''\n                                    value=''\n                                    detail='Testing here'\n                                    onChange={(_value: string) => {\n\n                                    }} />\n\n                                <CustomRadio\n                                    label='Member'\n                                    checkedCondition={true}\n                                    onChange={() => {}} />\n                                <CustomRadio\n                                    label='Corporate Client'\n                                    checkedCondition={false}\n                                    onChange={() => {}} />\n                            </Grid>\n                            <Grid item xs={3}>\n                                <div className='header-2'>SEARCH BY COMPANY</div>\n                                <Dropdown \n                                    placeholder='Member Type'\n                                    value={{value:'', label: ''}}\n                                    choices={[{value:'', label: ''}]}\n                                    onChange={(_value: DropdownChoice) => {\n\n                                    }} />\n                                <Dropdown \n                                    placeholder='Member Status'\n                                    value={{value:'', label: ''}}\n                                    choices={[{value:'', label: ''}]}\n                                    onChange={(_value: DropdownChoice) => {\n\n                                    }} />\n                            </Grid>\n                            <Grid item xs={3}>\n                                <div className='header-2'>SEARCH BY MEMBER DETAILS</div>\n                            </Grid>\n                            <Grid item xs={3}>\n                                \n                            </Grid>\n                        </Grid>\n                    </div>\n\n\n                    <div className='sub-section'>\n                        <div className='header-3'>{`SEARCH RESULTS (${9999})`}</div>\n                        <CustomTable\n                            className='custom-table-selectable'\n                            rows={[[0,0,0,0],[0,0,0,0]]}\n                            renderHeader={() => this.renderTableHeader()}\n                            renderRow={(rowData: any, index: number) => \n                                this.renderTableRow(rowData, index)}\n                            onChangeInfo={(info: LabelDisplayedRowsArgs) => \n                                `${info.from}-${info.to} out of ${info.count} results`}\n                            labelRowsPerPage='Show'\n                            rowsPerPageOptions={[10, 25, 50]} />\n                        {/* <div className='text'>\n                            Add a diagnosis first then add procedures per diagnosis after\n                        </div>\n                        <div className='sub-section'>\n                            <CustomTable\n                                rows={this.props.availment.diagnoses}\n                                renderHeader={() => this.renderTableHeader()}\n                                renderRow={(rowData: any, index: number) => \n                                    this.renderTableRow(rowData, index)} />\n                        </div>\n                        {this.props.createTicketAttemp && this.props.availment.diagnoses.length === 0 ? (\n                            <div className='sub-section' style={{color: '#E53935'}}>\n                                No diagnosis. Need atleast one diagnosis.\n                            </div> \n                        ) : (null)} */}\n                    </div>\n                </div>\n                \n            </Grid>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n        return (\n            <>\n            {this.renderHeaderColumn('cardNo', 'Member ID')}\n            {this.renderHeaderColumn('name', 'Name')}\n            {this.renderHeaderColumn('corporates', 'Corporate/s')}\n            {this.renderHeaderColumn('planType', 'Plan Type')}\n            {this.renderHeaderColumn('', 'Action', '60px')}\n            </>\n        );\n    }\n\n\n\n\n\n    renderTableRow = (_data: any, index: number) => {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                <TableCell>{'ticket.status'}</TableCell>\n                <TableCell>{'ticket.ticketNo'}</TableCell>\n                <TableCell>{'ticket.channel'}</TableCell>\n                <TableCell>{'ticket.type'}</TableCell>\n                <TableCell></TableCell>\n            </TableRow>\n        );\n    }\n\n\n\n    renderHeaderColumn(attrName: string, headerText: string, width?: string): JSX.Element {\n        return (\n            <TableCell style={{width: width}}>\n                <span className='header-2'>{headerText}</span>\n                \n                {attrName !== '' ? (\n                    <>\n                    <div style={{float: 'right'}}>\n                        <IconButton \n                            icon={faSort} \n                            onClick={() => {\n                                // this.sortTickets(attrName, true);\n                                // this.setState({ticketListUpdated: true});\n                            }} />\n                    </div>\n                    <InputField\n                        value={this.state[attrName]}\n                        onChange={(_value: string) => {\n                            // this.setState(prevState => ({...prevState, [attrName]: value}));\n                        }} />\n                    </>\n                ) : null}\n                \n            </TableCell>\n        );\n    }\n    \n}","/**\n *\n * App\n *\n * This component is the skeleton around the actual pages, and should only\n * contain code that should be seen on all pages. (e.g. navigation bar)\n */\n\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { renderRoutes } from 'react-router-config';\n\nimport { Switch, Route } from 'react-router-dom';\n\nimport { Containers, Components } from '@hims/core';\nimport { createBrowserHistory } from 'history';\n// import { HomePage } from 'Pages/Home/HomePage';\n\n\nimport { CreateTicketPage } from 'Pages/CustomerCarePage/CreateTicketPage/CreateTicketPage';\nimport { UpdateTicketPage } from 'Pages/CustomerCarePage/UpdateTicketPage/UpdateTicketPage';\nimport HomePage from 'Pages/Home/Loadable';\nimport { ResolveTicketPage } from 'Pages/CustomerCarePage/ResolveTicketPage/ResolveTicketPage';\nimport TicketListPage from 'Pages/TicketList/Loadable';\nimport { AdvanceSearch } from 'Pages/CustomerCarePage/AdvanceSearch/AdvanceSearch';\n// import LoginPage from 'Pages/Login/LoginPage';\n\nconst history = createBrowserHistory();\nconst NotFoundPage = Containers.NotFoundPage;\n// import ExitToAppIcon from '@material-ui/icons/ExitToApp';\n\nlet routes = [\n  {\n    path: '/home',\n    component: HomePage,\n  },\n  {\n    path: '/tickets',\n    component: TicketListPage,\n  },\n  // {\n  //   path: \"/login\",\n  //   component: LoginPage\n  // },\n  {\n    path: \"/\",\n    component: CreateTicketPage,\n    exact: true\n  },\n  {\n    path: \"/search\",\n    component: AdvanceSearch\n  },\n  {\n    path: \"/update-ticket/:caseId/:appNo/:ticketId\",\n    component: UpdateTicketPage\n  },\n  {\n    path: \"/resolve-ticket/:caseId/:appNo/:ticketId\",\n    component: ResolveTicketPage\n  }\n];\nconst prefix = '/customer-care';\nroutes.map(route => (route.path = `${prefix}${route.path}`));\n\nexport default function App() {\n\n  return (\n    <div>\n      \n      <Helmet\n        titleTemplate=\"NEO - %s\"\n        defaultTitle=\"NEO\"\n      >\n        <meta name=\"description\" content=\"NEO application\" />\n      </Helmet>\n      \n      <div className='side-bar'>\n        <Components.UI.PageLayout history={history} page={\"customer care\"} />\n      </div>\n      <div className='main'>\n        <Switch>\n          {renderRoutes(routes)}\n          <Route path=\"\" component={NotFoundPage} />\n        </Switch>\n      </div>\n      \n        \n      {/* </Components.UI.PageLayout> */}\n    </div>\n  );\n}","/**\n * i18n.js\n *\n * This will setup the i18n language files and locale data for the app.\n *\n *   IMPORTANT: This file is used by the internal build\n *   script `extract-intl`, and must use CommonJS module syntax\n *   You CANNOT use import/export in this file.\n */\n\n// prettier-ignore\nimport { Containers } from '@hims/core';\nconst enTranslationMessages = require('Messages/en.json');\n\nexport const translationMessages = {\n  en: Containers.Message.formatTranslationMessages('en', enTranslationMessages),\n};\n","/**\n * AppConstants\n * Each action has a corresponding type, which the reducer knows and picks up on.\n * To avoid weird typos between the reducer and the actions, we save them as\n * constants here. We prefix them with 'yourproject/YourComponent' so we avoid\n * reducers accidentally picking up actions they shouldn't.\n *\n */\n\nenum ActionTypes {\n    LOAD_REPOS = 'boilerplate/App/LOAD_REPOS',\n    LOAD_REPOS_SUCCESS = 'boilerplate/App/LOAD_REPOS_SUCCESS',\n    LOAD_REPOS_ERROR = 'boilerplate/App/LOAD_REPOS_ERROR',\n}\n  \nexport {};\nexport default ActionTypes;\n  ","import { ContainerState, ContainerActions } from './types';\nimport ActionTypes from './constants';\n\n// The initial state of the App\nexport const initialState: ContainerState = {\n  loading: false,\n  error: false,\n  currentUser: '',\n  userData: {\n    repositories: [],\n  },\n};\n\n// Take this container's state (as a slice of root state), this container's actions and return new state\nfunction appReducer(\n  state: ContainerState = initialState,\n  action: ContainerActions,\n): ContainerState {\n  switch (action.type) {\n    case ActionTypes.LOAD_REPOS:\n      return {\n        currentUser: state.currentUser,\n        loading: true,\n        error: false,\n        userData: {\n          repositories: [],\n        },\n      };\n    case ActionTypes.LOAD_REPOS_SUCCESS:\n      return {\n        currentUser: action.payload.username,\n        loading: false,\n        error: state.error,\n        userData: {\n          repositories: action.payload.repos,\n        },\n      };\n    case ActionTypes.LOAD_REPOS_ERROR:\n      const { error, loading, ...rest } = state;\n      return {\n        error: action.payload,\n        loading: false,\n        ...rest,\n      };\n    default:\n      return state;\n  }\n}\n\nexport default appReducer;\n","/**\n * app.ts\n *\n * This is the entry file for the application, only setup and boilerplate\n * code.\n */\n\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\n// Import all the third party stuff\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport FontFaceObserver from 'fontfaceobserver';\nimport 'sanitize.css/sanitize.css';\n\n\n\n// Import root app\nimport App from 'Containers/App';\n\n// Import Language Provider\n// import MessageProvider from 'Containers/LanguageProvider';\n\n// Load the favicon and the .htaccess file\n// import '!file-loader?name=[name].[ext]!./images/favicon.ico';\n// import 'file-loader?name=.htaccess!./.htaccess';\n\nimport { Components, Containers, Utils } from '@hims/core';\n// import { Containers, Utils } from '@hims/core';\nimport { translationMessages } from 'i18n';\nimport createReducer from './reducers';\n\nconst { configureStore, history } = Utils;\nconst MessageProvider = Containers.Message.Provider;\nconst { ServiceWorker } = Components.Services;\n\n// Import i18n messages\n\n// Observe loading of Open Sans (to remove open sans, remove the <link> tag in\n// the index.html file and this observer)\nconst openSansObserver = new FontFaceObserver('Open Sans', {});\n\n// Create redux store with history\nconst initialState = {};\nconst store = configureStore(createReducer, initialState, history);\nconst MOUNT_NODE = document.getElementById('app') as HTMLElement;\n\nconst render = (messages: any, Component = App) => {\n  const Document: React.ComponentType<Containers.Document.IProps<any, any>> = Containers.Document.Component;\n  ReactDOM.render(\n    // tslint:disable-next-line:jsx-wrap-multiline\n      <Document Component={Component} store={store} componentProps={{}}>\n        <MessageProvider messages={messages}>\n          <Component />\n        </MessageProvider>\n      </Document>\n    ,\n    MOUNT_NODE,\n  );\n};\n\ndeclare const module: any;\n\nexport default ()=>{\n  // When Open Sans is loaded, add a font-family using Open Sans to the body\n  openSansObserver.load(undefined, 60000).then(() => {\n    document.body.classList.add('fontLoaded');\n  });\n\n  if (module.hot) {\n    module.hot.accept(['./i18n', './Containers/App'], () => {\n      ReactDOM.unmountComponentAtNode(MOUNT_NODE);\n      // tslint:disable-next-line:max-line-length\n      const App = require('./Containers/App').default; // https://github.com/webpack/webpack-dev-server/issues/100\n      render(translationMessages, App);\n    });\n    // Make reducers hot reloadable, see http://mxs.is/googmo\n    /* istanbul ignore next */\n    module['hot'].accept('./reducers', () => {\n      store.replaceReducer(createReducer(store.injectedReducers));\n    });\n  }\n  // Chunked polyfill for browsers without Intl support\n  if (!(window as any).Intl) {\n    new Promise(resolve => {\n      resolve(import('intl'));\n    })\n      .then(() =>\n        Promise.all([\n          import('intl/locale-data/jsonp/en.js'),\n          import('intl/locale-data/jsonp/de.js'),\n        ]),\n      )\n      .then(() => render(translationMessages))\n      .catch(err => {\n        throw err;\n      });\n  } else {\n    render(translationMessages);\n  }\n\n  // Install ServiceWorker and AppCache in the end since\n  // it's not most important operation and if main code fails,\n  // we do not want it installed\n  // if (process.env.NODE_ENV === 'production') {\n  //   require('offline-plugin/runtime').install();\n  // }\n\n  // If you want your app to work offline and load faster, you can change\n  // unregister() to register() below. Note this comes with some pitfalls.\n  // Learn more about service workers: https://bit.ly/CRA-PWA\n  ServiceWorker.register();\n}\n","/**\n * Combine all reducers in this file and export the combined reducers.\n */\n\nimport { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\n\nimport { Containers, Utils } from '@hims/core';\nimport globalReducer from 'Containers/App/reducer';\n\n/**\n * Merges the main reducer with the router state and dynamically injected reducers\n */\nexport default function createReducer(injectedReducers = {}) {\n  const { history } = Utils;\n  const rootReducer = combineReducers({\n    global: globalReducer,\n    language: Containers.Message.messageProviderReducer,\n    router: connectRouter(history),\n    ...injectedReducers,\n  });\n\n  return rootReducer;\n}\n"],"sourceRoot":""}