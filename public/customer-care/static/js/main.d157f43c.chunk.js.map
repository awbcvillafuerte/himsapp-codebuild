{"version":3,"sources":["Pages/CustomerCarePage/GlobalFunction.tsx","Pages/CustomerCarePage/Components/InputField.tsx","Pages/CustomerCarePage/Components/IconButton.tsx","Pages/CustomerCarePage/API.tsx","Pages/CustomerCarePage/Components/CustomTable.tsx","Pages/TicketList/Processmaker.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/CheckContractSection.tsx","../@hims/core/dist/index.es.js","Pages/CustomerCarePage/Components/TextButton.tsx","Pages/CustomerCarePage/CreateTicketPage/Components/SearchedMembersList.tsx","Pages/CustomerCarePage/Components/Loading.tsx","Pages/CustomerCarePage/MemberDataSection.tsx","Pages/CustomerCarePage/Components/Dropdown.tsx","Pages/CustomerCarePage/Components/DetailedDropdown.tsx","Pages/CustomerCarePage/Components/DetailedNumberField.tsx","Pages/CustomerCarePage/Components/DatePicker.tsx","Pages/CustomerCarePage/CreateTicketPage/Components/ConfinementSection.tsx","Pages/CustomerCarePage/Components/NumberField.tsx","Pages/CustomerCarePage/Components/CustomCheckbox.tsx","Pages/CustomerCarePage/CreateTicketPage/Components/AvailmentSection.tsx","Pages/CustomerCarePage/Components/CustomDropzone.tsx","Pages/CustomerCarePage/Components/InputArea.tsx","Pages/CustomerCarePage/Components/CustomChip.tsx","Pages/CustomerCarePage/CreateTicketPage/Components/TicketInfoSection.tsx","Pages/CustomerCarePage/Components/InputChip.tsx","Pages/CustomerCarePage/CreateTicketPage/Components/InquirySection.tsx","Pages/CustomerCarePage/Payloads.tsx","Pages/CustomerCarePage/CreateTicketPage/Components/ConsultationSection.tsx","Pages/CustomerCarePage/Processmaker.tsx","Pages/CustomerCarePage/CreateTicketPage/Components/EmergencyRoomSection.tsx","Pages/CustomerCarePage/TicketFooter.tsx","Pages/CustomerCarePage/CreateTicketPage/CreateTicketPage.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/SummarySection.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/CRUDTable.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/UpdateSection.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/AccommodationsSection.tsx","Pages/CustomerCarePage/Components/CustomRadio.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/DiagnosesSection.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/PhysiciansSection.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/ProceduresSection.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/OtherDetailsSection.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/DischargeDetailsSection.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/UploadedDocumentsSection.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/UpdateInquirySection.tsx","Pages/CustomerCarePage/Components/CustomTab.tsx","Pages/CustomerCarePage/Components/CustomModal.tsx","Pages/CustomerCarePage/UpdateTicketPage/UpdateTicketPage.tsx","Pages/Home/Loadable.tsx","Pages/CustomerCarePage/Components/ComplexTable.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/ApproveAvailmentSection.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/CheckBenefitSection.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/ResolveTicketFooter.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/PartnerNetworkSection.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/SummaryAvailmentSection.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/TicketInfoModal.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/ReviewTicketsSection.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/CheckUtilizationSection.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/ApproveInpatientSection.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/SummaryInpatientSection.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/ApproveConsultationSection.tsx","Pages/CustomerCarePage/ResolveTicketPage/ResolveTicketPage.tsx","Pages/TicketList/Loadable.tsx","Pages/CustomerCarePage/Components/DetailedInputField.tsx","Pages/CustomerCarePage/AdvanceSearch/AdvanceSearch.tsx","Containers/App/index.tsx","i18n.ts","Containers/App/constants.ts","Containers/App/reducer.ts","app.tsx","reducers.ts"],"names":["GlobalFunction","num","isDecimal","toFixed","toString","replace","text","initials","wordArray","split","i","length","substring","toUpperCase","paramDate","date","Date","day","getDate","monthIndex","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","seconds","getSeconds","meridian","fromDate","toDate","valueList","index","birthDate","ageInMillis","now","Math","abs","getUTCFullYear","ticketType","specificType","ticketNo","tempString","InputField","props","_state","this","placeholder","value","error","dynamicStyle","borderColor","undefined","className","disabled","type","style","onChange","event","charLimit","target","textAlign","React","IconButton","onClick","icon","size","backendUrl","process","API","url","success","fail","fetch","method","headers","then","response","json","data","catch","body","customHeader","JSON","stringify","CustomTable","handleChangePage","_event","page","setState","handleChangeRowsPerPage","rowsPerPage","parseInt","getSlicedData","rowsPerPageOptions","startingItem","state","rows","slice","filterData","overflow","canOverflow","stickyHeader","columns","map","column","label","renderHeader","renderRow","row","j","paginationClass","count","labelDisplayedRows","info","onChangeInfo","from","to","labelRowsPerPage","onChangePage","onChangeRowsPerPage","Processmaker","token","localStorage","getItem","CheckContractSection","contractUrls","contractListUpdated","get","cardNo","console","log","benefit","_id","pdfUrl","execPath","viewerUrl","paddingTop","width","height","src","Object","freeze","index$1","index$2","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","service_worker","URL","href","origin","addEventListener","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","index$3","ServiceWorker","index$4","BaseTheme","createMuiTheme","palette","primary","main","contrastText","secondary","typography","fontFamily","button","fontWeight","fontSize","textTransform","overrides","MuiDialog","root","MuiDialogTitle","color","MuiDialogContentText","MuiFormControlLabel","MuiIconButton","MuiButton","containedPrimary","boxShadow","backgroundColor","containedSecondary","border","outlinedSecondary","_extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","_assign","assign","t","s","n","arguments","call","apply","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","__generator","f","y","g","_","sent","trys","ops","verb","Symbol","iterator","v","op","TypeError","pop","push","__spreadArrays","il","r","k","a","jl","borderCss","borderRadius","useStyles","makeStyles","theme","createStyles","control","borderBottomColor","input","display","select","marginTop","spacing","valueContainer","flexWrap","flex","alignItems","noOptionsMessage","padding","singleValue","position","left","bottom","paper","zIndex","right","inputComponent","_a","inputRef","getOwnPropertySymbols","propertyIsEnumerable","__rest","createElement","ref","components","Control","children","innerProps","innerRef","selectProps","classes","TextFieldProps","TextField","InputProps","inputProps","variant","fullWidth","Menu","Paper","square","Option","MenuItem","selected","isFocused","component","isSelected","NoOptionsMessage","Typography","Placeholder","SingleValue","ValueContainer","useState","single","setSingle","FormControl","NoSsr","inputId","options","suggestions","optionItem","isSearchable","isClearable","defaultProps","index$5","InputAutocomplete","borderCss$1","useStyles$1","textField","currentValue","setcurrentValue","id","defaultValue","chips","multiline","index$6","InputChipTextField","borderCss$2","borderStyles","useStyles$2","formControl","selectEmpty","marginRight","StyledOutlinedInput","withStyles","OutlinedInput","items","defVal","find","item","getDefaultValue","setCurrentValue","inputLabel","useRef","labelWidth","InputLabel","htmlFor","Select","selectedItem","name","IconComponent","selectItem","displaySelectItem","required","key","index$7","InputSelect","borderCss$3","borderStyles$1","useStyles$3","errorIcon","float","StyledOutlinedInput$1","FormHelperText","errorMessage","index$8","InputSelectSetValue","useStyles$4","borderCss$4","StyledTextField","index$9","InputTextField","useStyles$5","inputSelect","marginBottom","dialog","align","justify","dialogContent","container","paddingRight","paddingLeft","dialogTitle","dialogContentTitle","dialogContentText","formControlLabel","checkBox","dialogAction","justifyContent","resolveDialogAction","leftButton","marginLeft","rightButton","StyledCheckbox","checked","Checkbox","notes","notesError","isResolved","_b","setDisabled","handleClose","onClose","setFieldValue","fieldName","setFieldError","toLowerCase","Grid","direction","xs","DialogTitle","disableTypography","DialogContent","DialogContentText","FormControlLabel","checkedIcon","labelPlacement","DialogActions","Button","onSubmit","selectItems","Dialog","open","isModalOpen","index$a","TicketModal","styles","_super","SampleCoreComponent","render","Component","index$b","useStyles$6","appBar","breakpoints","up","menuButton","logo","badge","grow","flexGrow","AppBar","Toolbar","edge","menuOnClick","Link","logoImage","alt","userOnClick","Avatar","userImage","badgeCount","propTypes","number","useStyles$7","sideBar","listItem","flexDirection","listItemIcon","minWidth","avatar","avatarSelected","listItemText","listItemTextSelected","iconSelected","divider","ListItemLink","ListItem","isSelectedSidebar","sidebarItem","selectedSidebar","sidebarChanged","setSidebarChanged","dashboard","members","sidebarSelected","setSidebarSelected","getSidebarSelected","useEffect","removeEventListener","handleDashboardOnClick","attr","history","setItem","handleSidebarClick","List","ListItemIcon","ListItemText","Divider","useStyles$8","drawer","flexShrink","drawerPaper","content","toolbar","mixins","useStyles$9","gridContainer","breadCrumbs","headerTitle","linkPrevious","cursor","linkCurrent","index$c","Breadcrumbs","useStyles$a","nameFontSize","valueFontSize","useStyles$b","grid","string","useCirclePrimitive","circlePrimitiveStyle","top","rotate","delay","margin","opacity","animation","animationDelay","useStyles$c","useStyles$d","previous_page","current_page","useStyles$e","minHeight","buttonTitle","buttonSubTitle","rightButtons","leftButtons","useStyles$f","sidebar","maxWidth","contentgrid","flexBasis","index$d","LoadingIndicator","AppHeader","AppSidebar","AuthenticatedLayout","mobileOpen","setMobileOpen","handleDrawerToggle","Hidden","smUp","implementation","Drawer","xsDown","PageHeader","ClientInfoItem","GridHorizontalDivider","BreadcrumbsComponent","FloatingButtons","PageLayout","newPlacement","anchorEl","setAnchorEl","_c","setOpen","_d","placement","setPlacement","logolink","Popper","transition","TransitionProps","Fade","timeout","onLogout","currentTarget","prev","index$e","Actions","Definitions","Reducers","Services","Stores","UI","checkStore","store","shape","dispatch","subscribe","getState","replaceReducer","runSaga","injectedReducers","injectedSagas","DAEMON","ONCE_TILL_UNMOUNT","constants","RESTART_ON_REMOUNT","injectReducerFactory","createReducer","isValid","reducer","Reflect","has","getInjectors","injectReducer","allowedModes","descriptor","saga","mode","_mode","includes","injectSagaFactory","args","newDescriptor","hasSaga","task","ejectSagaFactory","cancel","getInjectors$1","injectSaga","ejectSaga","ResponseError","_this","statusText","Error","parseJSON","checkStatus","ActionTypes","index$f","configureStore","initialState","composeEnhancers","sagaMiddleware","middlewares","enhancers","run","hocWithReducer","WrappedComponent","ReducerInjector","context","displayName","useInjectReducer","hocWithSaga","InjectSaga","injectors","componentWillUnmount","useInjectSaga","loadable","importFunc","fallback","LazyComponent","getReducerInjectors","request","getSagaInjectors","index$g","componentProps","ThemeProvider","basename","ActionTypes$1","locale","selectLanguage","language","enTranslationMessages","formatTranslationMessages","messages","defaultFormattedMessages","keys","reduce","formattedMessages","formattedMessage","stateSelector","languageState","index$h","Provider","Children","only","appLocales","messageProviderReducer","action","CHANGE_LOCALE","payload","header","scope","defaultMessage","index$i","Document","Message","NotFoundPage","TextButton","SearchedMembersList","getExtractedMembers","filter","trim","member","searchText","renderMemberShortDetail","firstName","getIntials","middleName","lastName","onSelectMember","clientName","Loading","CircularProgress","MemberDataSection","getMemberData","member_card_no","first_name","middle_name","last_name","client","registered_name","date_of_birth","gender","civilStatus","civil_status","contractId","active_contract","isVip","is_vip","onUpdateMemberStateChange","getRecentTicketsData","loadingMember","tickets","recentTickets","ticket","member_id","cases","matchedCase","caseItem","app_uid","pmaker_case_uid","generateTicketNumber","ticket_category","ticket_type","specific_type","app_number","lastUpdate","date_updated","sliceMemberID","slicedText","isMembersLoaded","loadingMembers","ticketStatus","renderSearchArea","renderTopArea","renderMemberInfo","promptChooseMember","renderTicketData","trimmedValue","splitValue","newValue","join","faSearch","toShortDateString","age","getAge","renderTableHeader","rowData","renderTableRow","TableCell","recentTicket","TableRow","urgency","agent","ticketSource","callerName","contactNo","transactionNo","createdBy","toDateAndTime","dateCreated","dateUpdated","Dropdown","choices","classNamePrefix","isDisabled","onInputChange","filterOption","option","rawInput","hasNoInput","choicesAreShort","inputIsShort","isInputMatch","choice","DetailedDropdown","detail","DetailedNumberField","targetNewValue","charAt","isFloat","onFocus","numberValue","parseFloat","isNaN","newStringValue","DatePicker","utils","MomentUtils","format","minDate","ConfinementSection","confinementTypes","confinement","facilities","provider","createTicketAttemp","refreshConfinementState","dateAdmitted","confinementKind","roomType","costPerDay","doctors","doctor","cptCodes","initialDiagnosis","amount","NumberField","CustomCheckbox","AvailmentSection","icd10Code","itemToEditIndex","icd10CodeToEdit","doctorToEdit","filteredICD10","icd10Codes","isSame","availment","diagnoses","concat","procedures","totalCost","procedure","remarks","isPrimary","isFinal","specialization","fee","noOfVisits","cptCode","isPHIC","assessmentType","assessmentRemarks","dateAdded","diagnosisIndex","refreshAvailmentState","getFilteredICD10","faPlus","pushBlankDiagnosis","diagnosis","colSpan","lineHeight","faCheckCircle","faTimesCircle","formatNumber","getProcedureCosts","faPen","faMinusCircle","splice","procedureIndex","renderProcedureDetails","stateProcedure","stateProcedures","pushBlankProcedures","CustomDropzone","multiple","onDrop","acceptedFiles","getRootProps","getInputProps","faFileUpload","InputArea","defaultRows","TextareaAutosize","CustomChip","Chip","onDelete","TicketInfoSection","ticketChannels","ticketSources","ticketTypes","specificTypes","urgencies","agents","ticketChannel","refreshTicketState","memberName","brokerName","facility","department","additionalNotes","files","additionalFiles","file","InputChip","fullWidthInput","onAdd","chip","_chip","InquirySection","inquiries","inquiry","specificDetail","answer","relatedTickets","supportDocs","refreshInquiryState","filteredInquiries","getFilteredInquiries","onAddInquiry","onRemoveInquiry","doc","Payloads","consultation","transaction_no","received_via","received_from","member_name","corporate_client","broker","hospital_name","caller_name","contact_no","additional_notes","supporting_documents","assign_to","availment_details","availments_list","code","is_primary","is_final","no_of_visits","phic","date_added","assessment_type","assessment_remarks","confinement_details","date_admitted","confinement_kind","gift_given","updates","room_accommodation","room_type","no_of_days","cost","params","others","coverage","final_bill","philhealth_amount","discharge_date","consultation_details","inquiry_details","inquiry_list","specific_detail","related_tickets","support_docs","date_created","date_escalated","created_by","client_id","loa","docName","giftGiven","update","hospital_bill","hospitalBill","accommodations","accommodation","days","primaryDiagnosisIndex","physicians","physician","visits","ticket_no","paid_by","paidBy","philhealthAmount","finalBill","dischargeDate","pmCaseId","memberCardNo","loas","loa_no","loaNo","ConsultationSection","refreshConsultationState","EmergencyRoomSection","chiefComplaint","editIcon","deleteIcon","TicketFooter","interval","setInterval","time","onSaveForNow","lastSave","getTimeDeffirence","onResolveTicket","forceShowResolveButton","onSubmitTicket","onAssign","onEscalate","onUpdateTicket","onFinalAssessment","CreateTicketPage","isIcd10CodesLoaded","snackbarMessage","loadedResources","dateEscalated","facility_id","tempIcd10Codes","parse","full_code","abbreviated_description","tempCptCodes","debug","timestamp","RESOURCES_TO_LOAD","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","message","user_id","module","post","tmp","getPostTicketPayload","postTicketResponse","is_availment","casesResponse","case_id","put","triggerResponse","variableResponse","patch","patchTicketResponse","alert","SummarySection","getTotalAccommodationCost","getTotalPhysicianCost","getTotalProcedureCost","getTotalItemCost","renderSection","toCommonDateString","scroll","pageYOffset","setTabSelected","headerName","miniText","tabIndex","table","totalValue","CRUDTable","handleOnChange","attrName","prevState","rowToEdit","editField","onFormat","Table","TableHead","cols","colName","onHeaderFormat","TableBody","index1","index2","renderCell","onDeleteRow","onSaveEditRow","UpdateSection","onFormatTableHeader","colIndex","onFormatCRUDTable","refreshUpdatesState","tempData","unshift","_rowIndex","currentVal","AccommodationsSection","getTotalCost","facilitiesList","onUpdateTicketStateChange","refreshAccommodationsState","renderAddRoomAccommodation","renderConfinementDetails","CustomRadio","Radio","checkedCondition","DiagnosesSection","rowIndex","setPrimaryDiagnosisIndex","filteredIcd10","diagnosesList","getFilteredICD10Codes","refreshDiagnosisStateChange","PhysiciansSection","physiciansList","refreshPhysiciansStateChange","ProceduresSection","proceduresList","refreshProceduresStateChange","OtherDetailsSection","itemTypes","refreshItemsStateChange","DischargeDetailsSection","coverageList","UploadedDocumentsSection","refreshFilesStateChange","UpdateInquirySection","CustomTabs","Tabs","selectedTab","scrollButtons","indicatorColor","setSelectedTab","tabList","tab","Tab","CustomModal","Modal","isOpen","closeAfterTransition","in","faTimes","renderContent","renderFooter","UpdateTicketPage","errors","loadTicketData","ticketCategory","providerData","getErrorList","errorDiagnosis","matched","targets","tabSelected","isAssessmentModalOpen","updateState","accommodationState","diagnosisState","physicianState","procedureState","otherDetailState","fileState","tab_selected","update_state","accommodation_state","diagnosis_state","physician_state","procedure_state","other_detail_state","file_state","getPutTicketPayload","_member","renderInpatientContent","renderInquiryContent","apiSaveTicket","Utils","Components","HomePage","mapStateToProps","mapDispatchToProps","connect","default","ComplexTable","backColor","ApproveAvailmentSection","APPROVED","DISAPPROVED","PENDING","getProceduresCost","total","getApprovedAvailmentsCost","headerNameStyle","_index","renderProcedure","CheckBenefitSection","benefits","combineNodes","parentNodes","childNodes","parent","child","foundChild","childNode","getFilteredBenefitsData","benefitCategory","category","benefitName","limitType","limit","benefitListUpdated","loadBenefitsData","level","parent_name","limits","limit_unit","isAsc","sort","renderSideBar","renderBenefitsList","borderRight","renderHeaderColumn","headerText","faSort","sortBenefits","ResolveTicketFooter","isSummarizing","onResolve","onSummarize","PartnerNetworkSection","dummyData","dummyGroups","facilitiesListUpdated","group","faCheck","getFilteredFacilitiesData","sortFacilities","SummaryAvailmentSection","getApprovedAvailments","getDisapprovedAvailments","loaNumber","loaDate","indexToEdit","editLoaNumber","editAmount","editLoaDate","editNotes","approvedAvailments","disapprovedAvailments","renderLOAHeader","renderLOARow","refreshLOAStates","TicketInfoModal","ticketId","availmentDetails","confinementDetails","onCloseButtonClicked","renderTicketInfo","getTotalAailmentProcedureCost","ReviewTicketsSection","getFilteredTicketData","channel","source","assignee","urgencyColor","selectedTicketId","ticketListUpdated","sortTickets","CheckUtilizationSection","swipe","approvalCode","desc","sessions","dateAvailed","loaId","label1","label2","maxValue","utilization","Line","ApproveInpatientSection","getAttendingPhysicianCost","getAvailmentCost","getAllAvailmentsCost","getAllProceduresCount","renderTabs","renderSummarySection","renderDiagnosisSection","proceduresCount","borderBottom","renderDiagnosisInfo","procedureCost","accommodationCost","attendingPhysicianCost","renderTableSection","SummaryInpatientSection","ApproveConsultationSection","ResolveTicketPage","pmId","create_by","diagnosisData","doctorData","renderOutpatientContent","renderConsultationContent","getPutResolveTicketPayload","TicketListPage","DetailedInputField","AdvanceSearch","_data","_value","createBrowserHistory","Containers","routes","path","exact","App","Helmet","titleTemplate","defaultTitle","renderRoutes","route","require","translationMessages","en","loading","currentUser","userData","repositories","appReducer","LOAD_REPOS","LOAD_REPOS_SUCCESS","username","repos","LOAD_REPOS_ERROR","rest","MessageProvider","openSansObserver","FontFaceObserver","combineReducers","global","globalReducer","router","connectRouter","MOUNT_NODE","document","getElementById","ReactDOM","load","classList","add","Intl","all","err"],"mappings":"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","file":"static/js/main.d157f43c.chunk.js","sourcesContent":["\n\n\n\nexport class GlobalFunction {\n\n    static formatNumber(num: number, isDecimal: boolean = false) {\n        let value = '';\n        if (isDecimal) {\n            value = num.toFixed(2);\n        } else {\n            value = num.toString();\n        }\n        return value.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n    }\n\n\n    static getIntials(text: string) {\n        var initials = '';\n        var wordArray = text.split(' ');\n        for (var i = 0; i < wordArray.length; i++) {\n            initials += wordArray[i].substring(0,1).toUpperCase() + '.';\n        }\n        return initials;\n    }\n\n    static toCommonDateString(paramDate: Date | string) {\n        let date = typeof paramDate === 'string' ? new Date(paramDate) : paramDate;\n        if (date) {\n            const monthNames = [\n                \"January\", \"February\", \"March\",\n                \"April\", \"May\", \"June\", \"July\",\n                \"August\", \"September\", \"October\",\n                \"November\", \"December\"\n            ];\n            const day = date.getDate();\n            const monthIndex = date.getMonth();\n            const year = date.getFullYear();\n            return (monthNames[monthIndex] + \" \" + day + \", \" + year);\n        }\n\n        return '';\n    }\n\n    static toShortDateString(paramDate: Date | string) {\n        let date = typeof paramDate === 'string' ? new Date(paramDate) : paramDate;\n        if (date) {\n            const monthNames = [\n                \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \n                \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n            ];\n            const day = date.getDate();\n            const monthIndex = date.getMonth();\n            const year = date.getFullYear();\n            return (monthNames[monthIndex] + \" \" + day + \", \" + year);\n        }\n\n        return '';\n    }\n\n    static toDateAndTime(paramDate: Date | string) {\n        let date = typeof paramDate === 'string' ? new Date(paramDate) : paramDate;\n        if (date) {\n            const monthNames = [\n                \"January\", \"February\", \"March\",\n                \"April\", \"May\", \"June\", \"July\",\n                \"August\", \"September\", \"October\",\n                \"November\", \"December\"\n            ];\n            const day = date.getDate();\n            const monthIndex = date.getMonth();\n            const year = date.getFullYear();\n            const hours = date.getHours() - (date.getHours() > 12 ? 12 : 0);\n            const minutes = date.getMinutes();\n            const seconds = date.getSeconds();\n            const meridian = (date.getHours() > 12 ? \"PM\" : \"AM\");\n            return (\n                monthNames[monthIndex] + \" \" + \n                day + \", \" + \n                year + \" - \" + \n                hours + \":\" + \n                minutes + \":\" + \n                seconds + \" \" + \n                meridian);\n        }\n\n        return '';\n    }\n\n    static getTimeDeffirence(fromDate: Date, toDate: Date) {\n        const scaleList = [\n            ['year', 'years'],\n            ['month', 'months'], \n            ['day', 'days'], \n            ['hour', 'hours'], \n            ['minute', 'minutes'], \n            ['second', 'seconds'] \n        ];\n        const valueList = [\n            toDate.getFullYear() - fromDate.getFullYear(),\n            toDate.getMonth() - fromDate.getMonth(),\n            toDate.getDate() - fromDate.getDate(),\n            toDate.getHours() - fromDate.getHours(),\n            toDate.getMinutes() - fromDate.getMinutes(),\n            toDate.getSeconds() - fromDate.getSeconds()\n        ];\n\n        let index = 0;\n        for (let i = 0; i < valueList.length; i++) {\n            if (valueList[i] > 0) {\n                index = i;\n                break;\n            }\n        }\n\n        if (index) {\n            return `${valueList[index]} ${scaleList[index][valueList[index] == 1 ? 0 : 1]}`\n        }\n        return '';\n    }\n\n    static getAge(birthDate: any) {\n        if (birthDate) {\n            var ageInMillis = Date.now() - birthDate;\n            return Math.abs(new Date(ageInMillis).getUTCFullYear() - 1970);\n        }\n\n        return null;\n    }\n\n    static generateTicketNumber(ticketType: string, specificType: string, ticketNo: string) {\n        const ticketTypes = {\n            \"Availment\": \"AVL\",\n            \"Inquiry\": \"INQ\"\n        };\n        const specificTypes = {\n            \"Inpatient\": \"INP\",\n            \"Outpatient Procedure\": \"OP\",\n            \"Emergency Room\": \"ER\",\n            \"Maternity\": \"MAT\",\n            \"Consultation\": \"CON\"\n        }\n        const tempString = (ticketType === 'Inquiry' ? '' : `${specificTypes[specificType]}-`);\n        return `${ticketTypes[ticketType]}-${tempString}${ticketNo}`;\n    }\n}","import * as React from 'react';\n// import { InputBase } from '@material-ui/core';\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\nimport './component-style.scss';\n\ninterface IProps {\n    value: string;\n    onChange: (value: string) => void;\n\n    placeholder?: string;\n    error?: boolean;\n    icon?: IconProp;\n    disabled?: boolean;\n    charLimit?: number;\n}\n\nexport class InputField extends React.Component<IProps> {\n\n    \n\n    shouldComponentUpdate(props: IProps, _state: any) {\n        return (\n            (this.props.placeholder !== props.placeholder) ||\n            (this.props.value !== props.value) ||\n            (this.props.error !== props.error)\n        );\n    }\n\n    render(): JSX.Element {\n        const self = this;\n        const dynamicStyle = {\n            borderColor: (self.props.error ? '#E53935' : undefined)\n        };\n\n        return (\n            <div className='input-field-container'>\n                {this.props.placeholder ? (\n                    <div className={this.props.disabled ? 'text-disabled text' : 'text'}>\n                        {this.props.placeholder}\n                    </div>\n                ) : null}\n                <input type='text' \n                    disabled={this.props.disabled}\n                    className={this.props.disabled ? 'text-field-disabled text-field' : 'text-field'}\n                    style={dynamicStyle}\n                    // fullWidth \n                    value={this.props.value}\n                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                        const condition = \n                            this.props.charLimit ? (\n                                event.target.value.length <= this.props.charLimit \n                            ) : (true) ;\n                            \n                        if (condition) {\n                            this.props.onChange(event.target.value);\n                        }\n                    }} />\n                {this.props.charLimit ? (\n                    <>\n                    <div className='text' />\n                    <div \n                        className={this.props.disabled ? 'text-disabled text' : 'text'}\n                        style={{textAlign: 'right'}}>\n                            {`${this.props.value.length}/${this.props.charLimit}`}\n                    </div>\n                    </>\n                ) : null}\n                \n            \n            </div>\n        );\n    }\n}","\n\nimport * as React from 'react';\n// import { Link } from '@material-ui/core';\nimport './component-style.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { IconProp, SizeProp } from '@fortawesome/fontawesome-svg-core';\n\ninterface IProps {\n    icon: IconProp;\n    onClick: () => void;\n    size?: SizeProp;\n}\n\nexport class IconButton extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        return (\n            <div className='icon-button' onClick={() => this.props.onClick()}>\n                {this.props.icon ? <FontAwesomeIcon icon={this.props.icon} size={this.props.size} /> : null}\n            </div>\n        );\n    }\n}","\nlet backendUrl = process.env.REACT_APP_BASE_URL;\n\nexport class API {\n\n    static getUrl() {\n        return process.env.REACT_APP_BASE_URL;\n    }\n\n    static async get(url: string, success: Function, fail: Function) {\n        fetch(backendUrl + url, {\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json' }\n        })\n        .then(response => response.json())\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n\n    static async post(url: string, \n                      body: any,\n                      success: Function, \n                      fail: Function,\n                      customHeader: any = { 'Content-Type': 'application/json' }) {\n        fetch(backendUrl + url, {\n            method: 'POST',\n            headers: customHeader,\n            body: body\n        })\n        .then(response => response.json())\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n\n    static async put(url: string, body: any, success: Function, fail: Function) {\n        fetch(backendUrl + url, {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(body)\n        })\n        .then(response => response)\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n\n    static async patch(url: string, body: any, success: Function, fail: Function) {\n        fetch(backendUrl + url, {\n            method: 'PATCH',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(body)\n        })\n        .then(response => response)\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n}","import * as React from 'react';\nimport { Table, TableBody, TableHead, TableRow, TablePagination, TableCell } from '@material-ui/core';\nimport './component-style.scss';\nimport { LabelDisplayedRowsArgs } from '@material-ui/core/TablePagination';\nimport { DropdownChoice } from '../Models';\n\ninterface IProps {\n    className?: string;\n    paginationClass?: string;\n\n    /* Normal Mode */\n    rows: any[];\n    renderHeader: () => JSX.Element;\n    renderRow: (rowData: any, index: number) => JSX.Element;\n\n    /* Simple Mode - Automatically handles styling, so you can focus on data. */\n    columns?: DropdownChoice[]; // value: attribute, label: the title appearing on the header\n    canFilter?: boolean;\n    canSort?: boolean;\n\n    stickyHeader?: boolean;\n    canOverflow?: boolean;\n    rowsPerPageOptions?: number[];\n    labelRowsPerPage?: string;\n    onChangeInfo?: (info: LabelDisplayedRowsArgs) => string;\n}\n\ninterface IStates {\n    page: number;\n    rowsPerPage: number;\n    \n    filterData: any;\n}\n\nexport class CustomTable extends React.PureComponent<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            page: 0,\n            rowsPerPage: 0,\n\n            filterData: {}\n        }\n    }\n\n    componentDidMount() {\n        if (this.props.rowsPerPageOptions) {\n            this.setState({rowsPerPage: this.props.rowsPerPageOptions[0]});\n        }\n    }\n\n    handleChangePage = (_event: unknown, page: number) => {\n        this.setState({page: page});\n    }\n    \n    handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            rowsPerPage: parseInt(event.target.value, 10),\n            page: 0\n        });\n    }\n\n    getSlicedData = () => {\n        if (this.props.rowsPerPageOptions) {\n            const startingItem = this.state.page * this.state.rowsPerPage;\n            return this.props.rows.slice(startingItem, startingItem + this.state.rowsPerPage);\n        } else {\n            return this.props.rows;\n        }\n    }\n\n    render(): JSX.Element {\n        return (\n            <>\n            <div style={{overflow: this.props.canOverflow ? 'auto' : 'none'}}>\n                <Table \n                    className={`${(this.props.className ? this.props.className : '')} table`} \n                    stickyHeader={this.props.stickyHeader ? this.props.stickyHeader : false}>\n                    <TableHead>\n                        {this.props.columns ? (\n                            <TableRow>\n                                {this.props.columns.map(column => {\n                                    return <TableCell>{column.label}</TableCell>\n                                })}\n                            </TableRow>\n                        ) : this.props.renderHeader ? (\n                            <TableRow>\n                                {this.props.renderHeader()}\n                            </TableRow>\n                        ) : null}\n                    </TableHead>\n                    <TableBody>\n                        {this.props.renderRow ? (\n                            this.getSlicedData().map((row, j) => {\n                                return this.props.renderRow(row, j)\n                            })  \n                        ) : null}\n                    </TableBody>\n                </Table>\n            </div>\n            {this.props.rowsPerPageOptions ? (\n                <TablePagination\n                    className={`${(this.props.paginationClass ? this.props.paginationClass : '')} pagination MuiTablePagination-root`}\n                    rowsPerPageOptions={this.props.rowsPerPageOptions}\n                    count={this.props.rows.length}\n                    rowsPerPage={this.state.rowsPerPage}\n                    page={this.state.page}\n                    labelDisplayedRows={(info: LabelDisplayedRowsArgs) => {\n                        return (\n                            this.props.onChangeInfo ? (\n                                this.props.onChangeInfo(info)\n                            ) : (\n                                `${info.from}-${info.to} of ${info.count}`\n                            ));\n                    }}\n                    labelRowsPerPage={\n                        this.props.labelRowsPerPage ? (\n                            this.props.labelRowsPerPage\n                        ) : (\n                            'Rows per page:'\n                        )}\n                    onChangePage={(_event: unknown, page: number) => {\n                        this.setState({page: page});\n                    }}\n                    onChangeRowsPerPage={(event: React.ChangeEvent<HTMLInputElement>) => {\n                        this.setState({\n                            rowsPerPage: parseInt(event.target.value, 10),\n                            page: 0\n                        });\n                    }} />\n            ) : null}\n            </>\n        );\n    }\n}","let backendUrl = process.env.REACT_APP_PMAKER_BASE_URL;\n\nexport class Processmaker {\n\n    // //local\n    // static localUrl = 'localhost:32766/api/1.0/workflow';\n\n    // //stg\n    // static stgUrl = 'http://18.140.39.215/api/1.0/workflow';\n    \n    static async get(url: string, success: Function, fail: Function) {\n        const token = localStorage.getItem('pm_token') || '';\n        // const backendUrl = (process.env.NODE_ENV === 'development' ? this.localUrl : this.stgUrl);\n        fetch(backendUrl + url, {\n            method: 'GET',\n            headers: { \n                'Authorization': 'Bearer ' + token\n            },\n        })\n        .then(response => response.json())\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n\n    static async post(url:string, body: any, success: Function, fail: Function) {\n        // const backendUrl = (process.env.NODE_ENV === 'development' ? this.localUrl : this.stgUrl);\n        fetch(backendUrl + url, {\n            method: 'POST',\n            headers: { \n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + localStorage.getItem('pm_token')\n            },\n            body: JSON.stringify(body)\n        })\n        .then(response => response.json())\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n\n    static async put(url: string, body: any, success: Function, fail: Function) {\n        // const backendUrl = (process.env.NODE_ENV === 'development' ? this.localUrl : this.stgUrl);\n        fetch(backendUrl + url, {\n            method: 'PUT',\n            headers: { \n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + localStorage.getItem('pm_token')\n            },\n            body: JSON.stringify(body)\n        })\n        .then(response => response)\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n}","import * as React from 'react';\nimport { API } from 'Pages/CustomerCarePage/API';\n\ninterface IProps {\n    cardNo: string;\n}\n\ninterface IStates {\n    contractListUpdated: boolean;\n}\n\nexport class CheckContractSection extends React.Component<IProps, IStates> {\n\n    contractUrls: string[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            contractListUpdated: false\n        }\n\n        this.contractUrls = [];\n    }\n\n    componentDidMount() {\n        API.get(`customer-care/members/${this.props.cardNo}/benefits`,\n            (response) => {\n                console.log(response);\n                this.contractUrls = response.map(benefit => {\n                    return `/customer-care/benefits/io/pdf?id=${benefit._id}&type=contract`\n                });\n\n                this.setState({contractListUpdated: true});\n            },\n            (error) => {\n                console.log(error);\n            });\n    }\n    \n    render(): JSX.Element {\n        const pdfUrl = `${process.execPath}/../../../sample.pdf`;\n        // const viewerUrl = `https://mozilla.github.io/pdf.js/web/viewer.html?file=${pdfUrl}`;\n        const viewerUrl = `${process.execPath}/../pdfjs-2.2.228-dist/web/viewer.html?file=${pdfUrl}`;\n\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Check Contract</div>\n                <div className='sub-section'>\n                    {/*this.contractUrls.map((url, index) => {\n                        return (\n                            index === 0 ?\n                            <iframe \n                                style={{width: '100%', height: '1280px'}}\n                                src={API.getUrl() + url}  />\n\n                            : null\n                        );\n                    })*/}\n                            <iframe \n                                style={{width: '100%', height: '1280px'}}\n                                src={viewerUrl}  />\n                </div>\n                \n            </div>\n        );\n    }\n}","import { createMuiTheme, makeStyles, createStyles, withStyles } from '@material-ui/core/styles';\nimport React__default, { useState, createElement, useEffect, Component as Component$2, lazy, Suspense } from 'react';\nimport Select from 'react-select';\nimport Typography from '@material-ui/core/Typography';\nimport NoSsr from '@material-ui/core/NoSsr';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ChipInput from 'material-ui-chip-input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport Select$1 from '@material-ui/core/Select';\nimport ExpandMoreRounded from '@material-ui/icons/ExpandMoreRounded';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Grid from '@material-ui/core/Grid';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheckSquare, faHome, faPlusCircle, faUsers, faFileSignature, faIdCardAlt, faTasks, faTable, faFolderOpen, faUserFriends, faScrewdriver, faBookOpen } from '@fortawesome/free-solid-svg-icons';\nimport { faSquare } from '@fortawesome/free-regular-svg-icons';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Link from '@material-ui/core/Link';\nimport Avatar from '@material-ui/core/Avatar';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport Hidden from '@material-ui/core/Hidden';\nimport Drawer from '@material-ui/core/Drawer';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport Popper from '@material-ui/core/Popper';\nimport { Fade, Paper as Paper$1, List as List$1, ListItem as ListItem$1, ListItemIcon as ListItemIcon$1, ListItemText as ListItemText$1 } from '@material-ui/core';\nimport { useStore, Provider as Provider$1, useSelector } from 'react-redux';\nimport { routerMiddleware, ConnectedRouter } from 'connected-react-router';\nimport { HashRouter } from 'react-router-dom';\nimport { ThemeProvider } from '@material-ui/styles';\nimport invariant from 'invariant';\nimport conformsTo from 'lodash/conformsTo';\nimport isFunction from 'lodash/isFunction';\nimport isObject from 'lodash/isObject';\nimport { applyMiddleware, createStore, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { createBrowserHistory } from 'history';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport isEmpty from 'lodash/isEmpty';\nimport isString from 'lodash/isString';\nimport { createSelector } from 'reselect';\nimport { IntlProvider, defineMessages, FormattedMessage } from 'react-intl';\nvar index =\n/*#__PURE__*/\nObject.freeze({});\nvar index$1 =\n/*#__PURE__*/\nObject.freeze({});\nvar index$2 =\n/*#__PURE__*/\nObject.freeze({}); // This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nvar isLocalhost = Boolean(window.location.hostname === 'localhost' || // [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' || // 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\n\nfunction register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    var publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', function () {\n      var swUrl = process.env.PUBLIC_URL + \"/service-worker.js\";\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config); // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n\n        navigator.serviceWorker.ready.then(function () {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(function (registration) {\n    registration.onupdatefound = function () {\n      var installingWorker = registration.installing;\n\n      if (installingWorker == null) {\n        return;\n      }\n\n      installingWorker.onstatechange = function () {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'); // Execute callback\n\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.'); // Execute callback\n\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(function (error) {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl).then(function (response) {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    var contentType = response.headers.get('content-type');\n\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(function (registration) {\n        registration.unregister().then(function () {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(function () {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nfunction unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      registration.unregister();\n    });\n  }\n}\n\nvar service_worker =\n/*#__PURE__*/\nObject.freeze({\n  register: register,\n  unregister: unregister\n});\nvar index$3 =\n/*#__PURE__*/\nObject.freeze({\n  ServiceWorker: service_worker\n});\nvar index$4 =\n/*#__PURE__*/\nObject.freeze({});\nvar BaseTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#3ab77d',\n      contrastText: '#ffffff'\n    },\n    secondary: {\n      main: '#ffffff',\n      contrastText: '#3ab77d'\n    }\n  },\n  typography: {\n    fontFamily: 'Usual, Roboto, Helvetica, Arial, sans-serif',\n    button: {\n      fontFamily: 'Usual, Roboto, Helvetica, Arial, sans-serif',\n      fontWeight: 700,\n      fontSize: 13,\n      textTransform: 'none'\n    }\n  },\n  overrides: {\n    MuiDialog: {\n      root: {\n        width: '100%'\n      }\n    },\n    MuiDialogTitle: {\n      root: {\n        fontFamily: 'Usual, Roboto, Helvetica, Arial, sans-serif',\n        fontWeight: 550,\n        fontSize: '1em',\n        color: '#272E4C'\n      }\n    },\n    MuiDialogContentText: {\n      root: {\n        fontSize: '.8em',\n        color: '#272E4C'\n      }\n    },\n    MuiFormControlLabel: {\n      label: {\n        fontSize: '.8em',\n        color: '#272E4C'\n      }\n    },\n    MuiIconButton: {\n      root: {\n        fontSize: '.9em'\n      }\n    },\n    MuiButton: {\n      containedPrimary: {\n        boxShadow: '0px 3px 6px #1e207129',\n        '&:hover': {\n          backgroundColor: '#008650'\n        }\n      },\n      containedSecondary: {\n        border: '1px solid #0000001A',\n        boxShadow: '0px 1px 3px #00000033',\n        '&:hover': {\n          backgroundColor: '#3ab77d1a'\n        }\n      },\n      outlinedSecondary: {\n        border: '1px solid #3ab77d',\n        boxShadow: '0px 1px 3px #00000033',\n        '&:hover': {\n          backgroundColor: '#3ab77d1a'\n        }\n      }\n    }\n  }\n});\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return _extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return _assign.apply(this, arguments);\n};\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nfunction __awaiter(thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nfunction __generator(thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n}\n\nfunction __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n}\n\nvar labelColor = 'rgb(21,28,28)';\nvar grayColor = 'rgba(39,52,76,0.3)';\nvar grayColorFocused = 'rgba(39,52,76,0.5)';\nvar borderCss = {\n  borderColor: grayColor,\n  borderRadius: 5\n};\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    root: {\n      width: '100%'\n    },\n    control: {\n      '& label.Mui-focused': {\n        color: labelColor\n      },\n      '& .MuiInput-underline:after': {\n        borderBottomColor: grayColor\n      },\n      '& .MuiOutlinedInput-root': {\n        '& fieldset': borderCss,\n        '&:hover fieldset': borderCss,\n        '&.Mui-focused fieldset': _assign(_assign({}, borderCss), {\n          borderColor: grayColorFocused\n        })\n      }\n    },\n    input: {\n      display: 'flex'\n    },\n    label: {},\n    select: {\n      marginTop: theme.spacing(1),\n      backgroundColor: 'white',\n      width: '100%'\n    },\n    valueContainer: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      flex: 1,\n      alignItems: 'center',\n      overflow: 'hidden'\n    },\n    noOptionsMessage: {\n      padding: theme.spacing(1, 2)\n    },\n    singleValue: {\n      fontSize: 16\n    },\n    placeholder: {\n      position: 'absolute',\n      left: 2,\n      bottom: 6,\n      fontSize: 16\n    },\n    paper: {\n      position: 'absolute',\n      zIndex: 999,\n      left: 0,\n      right: 0\n    }\n  });\n});\n\nfunction NoOptionsMessage(props) {\n  return React__default.createElement(Typography, _assign({\n    color: \"textSecondary\",\n    className: props.selectProps.classes.noOptionsMessage\n  }, props.innerProps), props.children);\n}\n\nfunction inputComponent(_a) {\n  var inputRef = _a.inputRef,\n      props = __rest(_a, [\"inputRef\"]);\n\n  return React__default.createElement(\"div\", _assign({\n    ref: inputRef\n  }, props));\n}\n\nfunction Control(props) {\n  var children = props.children,\n      innerProps = props.innerProps,\n      innerRef = props.innerRef,\n      _a = props.selectProps,\n      classes = _a.classes,\n      TextFieldProps = _a.TextFieldProps;\n  return React__default.createElement(TextField, _assign({\n    className: classes.control,\n    InputProps: {\n      inputComponent: inputComponent,\n      inputProps: _assign({\n        className: classes.input,\n        ref: innerRef,\n        children: children\n      }, innerProps)\n    }\n  }, TextFieldProps, {\n    variant: \"outlined\",\n    fullWidth: true\n  }));\n}\n\nfunction Option(props) {\n  return React__default.createElement(MenuItem, _assign({\n    ref: props.innerRef,\n    selected: props.isFocused,\n    component: \"div\",\n    style: {\n      fontWeight: props.isSelected ? 500 : 400\n    }\n  }, props.innerProps), props.children);\n}\n\nfunction Placeholder(props) {\n  var selectProps = props.selectProps,\n      _a = props.innerProps,\n      innerProps = _a === void 0 ? {} : _a,\n      children = props.children;\n  return React__default.createElement(Typography, _assign({\n    color: \"textSecondary\",\n    className: selectProps.classes.placeholder\n  }, innerProps), children);\n}\n\nfunction SingleValue(props) {\n  return React__default.createElement(Typography, _assign({\n    className: props.selectProps.classes.singleValue\n  }, props.innerProps), props.children);\n}\n\nfunction ValueContainer(props) {\n  return React__default.createElement(\"div\", {\n    className: props.selectProps.classes.valueContainer\n  }, props.children);\n}\n\nfunction Menu(props) {\n  return React__default.createElement(Paper, _assign({\n    square: true,\n    className: props.selectProps.classes.paper\n  }, props.innerProps), props.children);\n}\n\nvar components = {\n  Control: Control,\n  Menu: Menu,\n  Option: Option,\n  NoOptionsMessage: NoOptionsMessage,\n  Placeholder: Placeholder,\n  SingleValue: SingleValue,\n  ValueContainer: ValueContainer\n};\n\nvar InputAutocomplete = function InputAutocomplete(props) {\n  var classes = useStyles();\n\n  var _a = React__default.useState(null),\n      single = _a[0],\n      setSingle = _a[1];\n\n  function handleChange(optionItem) {\n    setSingle(optionItem);\n\n    if (props.onChange) {\n      props.onChange(optionItem);\n    }\n  }\n\n  return React__default.createElement(FormControl, {\n    className: classes.root\n  }, React__default.createElement(Typography, {\n    className: classes.label,\n    color: \"textPrimary\"\n  }, props.label), React__default.createElement(NoSsr, null, React__default.createElement(Select, {\n    className: classes.select,\n    classes: classes,\n    inputId: props.inputId,\n    TextFieldProps: {\n      error: props.error\n    },\n    placeholder: \"\",\n    options: props.suggestions,\n    components: components,\n    value: single,\n    onChange: handleChange,\n    isSearchable: true,\n    isClearable: true\n  })));\n};\n\nInputAutocomplete.defaultProps = {\n  error: false\n};\nvar index$5 =\n/*#__PURE__*/\nObject.freeze({\n  InputAutocomplete: InputAutocomplete\n});\nvar labelColor$1 = 'rgb(21,28,28)';\nvar grayColor$1 = 'rgba(39,52,76,0.3)';\nvar grayColorFocused$1 = 'rgba(39,52,76,0.5)';\nvar borderCss$1 = {\n  borderColor: grayColor$1,\n  borderRadius: 5\n};\nvar useStyles$1 = makeStyles(function (theme) {\n  return {\n    root: {\n      width: '100%'\n    },\n    label: {},\n    textField: {\n      '& label.Mui-focused': {\n        color: labelColor$1\n      },\n      '& .MuiInput-underline:after': {\n        borderBottomColor: grayColor$1\n      },\n      '& .MuiOutlinedInput-root': {\n        '& fieldset': borderCss$1,\n        '&:hover fieldset': borderCss$1,\n        '&.Mui-focused fieldset': _assign(_assign({}, borderCss$1), {\n          borderColor: grayColorFocused$1\n        })\n      },\n      '&': {\n        marginTop: theme.spacing(1),\n        backgroundColor: 'white',\n        width: '100%'\n      }\n    }\n  };\n});\n\nvar InputChipTextField = function InputChipTextField(props) {\n  var classes = useStyles$1();\n\n  var _a = useState(props.value || []),\n      currentValue = _a[0],\n      setcurrentValue = _a[1];\n\n  var onChange = function onChange(chips) {\n    setcurrentValue(chips);\n\n    if (props.onChange) {\n      props.onChange(chips);\n    }\n  };\n\n  return React__default.createElement(FormControl, {\n    className: classes.root\n  }, React__default.createElement(Typography, {\n    className: classes.label,\n    color: \"textPrimary\"\n  }, props.label), React__default.createElement(ChipInput, {\n    id: props.id,\n    className: classes.textField,\n    defaultValue: currentValue,\n    onChange: onChange,\n    error: props.error,\n    variant: \"outlined\"\n  }));\n};\n\nInputChipTextField.defaultProps = {\n  label: '',\n  value: [],\n  error: false,\n  multiline: false,\n  rows: 1,\n  onChange: function onChange(chips) {\n    console.log(chips);\n  }\n};\nvar index$6 =\n/*#__PURE__*/\nObject.freeze({\n  InputChipTextField: InputChipTextField\n});\nvar labelColor$2 = 'rgb(21,28,28)';\nvar grayColor$2 = 'rgba(39,52,76,0.3)';\nvar grayColorFocused$2 = 'rgba(39,52,76,0.5)';\nvar borderCss$2 = {\n  borderColor: grayColor$2,\n  borderRadius: 5\n};\nvar borderStyles = {\n  root: {\n    '& label.Mui-focused': {\n      color: labelColor$2\n    },\n    '& .MuiInput-underline:after': {\n      borderBottomColor: grayColor$2\n    },\n    '& .MuiOutlinedInput-root': {\n      '& fieldset': borderCss$2,\n      '&:hover fieldset': borderCss$2,\n      '&.Mui-focused fieldset': _assign(_assign({}, borderCss$2), {\n        borderColor: grayColorFocused$2\n      })\n    }\n  }\n};\nvar useStyles$2 = makeStyles(function (theme) {\n  return {\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n    formControl: {\n      width: '100%'\n    },\n    label: {\n      fontSize: '.8em'\n    },\n    select: {\n      marginTop: theme.spacing(1),\n      backgroundColor: 'white'\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2)\n    },\n    icon: {\n      marginRight: theme.spacing(2.5),\n      color: grayColor$2\n    }\n  };\n}); // const StyledFormControl = withStyles(borderStyles)(FormControl);\n\nvar StyledOutlinedInput = withStyles(borderStyles)(OutlinedInput);\n\nvar InputSelect = function InputSelect(props) {\n  var defaultValue = {\n    id: -1,\n    value: '',\n    label: ''\n  };\n\n  var items = __spreadArrays([defaultValue], props.data);\n\n  var getDefaultValue = function getDefaultValue() {\n    if (props.value) {\n      var defVal = items.find(function (item) {\n        return item.value === props.value;\n      });\n\n      if (defVal) {\n        return defVal;\n      }\n    }\n\n    return defaultValue;\n  };\n\n  var classes = useStyles$2();\n\n  var _a = useState(getDefaultValue()),\n      currentValue = _a[0],\n      setCurrentValue = _a[1];\n\n  var inputLabel = React__default.useRef(null);\n  var labelWidth = React__default.useState(0)[0]; // React.useEffect(() => {\n  //   setLabelWidth(inputLabel.current!.offsetWidth);\n  // }, []);\n\n  var onChange = function onChange(e) {\n    var selectedItem = items.find(function (item) {\n      return item.value === e.target.value;\n    }) || defaultValue;\n    setCurrentValue(selectedItem);\n\n    if (props.onChange) {\n      props.onChange(selectedItem);\n    }\n  };\n\n  var displaySelectItem = function displaySelectItem(props, selectItem) {\n    if (props.displaySelectItem) {\n      return props.displaySelectItem(selectItem);\n    }\n\n    var disabled = selectItem.id === -1 && props.required;\n    return React__default.createElement(MenuItem, {\n      key: selectItem.id,\n      value: selectItem.value,\n      disabled: disabled\n    }, selectItem.label);\n  };\n\n  return React__default.createElement(\"div\", {\n    className: classes.formControl\n  }, props.label ? React__default.createElement(InputLabel, {\n    color: \"textPrimary\",\n    className: classes.label,\n    ref: inputLabel,\n    htmlFor: props.id,\n    error: props.error\n  }, props.label) : null, React__default.createElement(Select$1, {\n    className: classes.select,\n    value: currentValue.value,\n    onChange: onChange,\n    input: React__default.createElement(StyledOutlinedInput, {\n      id: props.id,\n      name: props.id,\n      error: props.error,\n      labelWidth: labelWidth,\n      fullWidth: true\n    }),\n    IconComponent: function IconComponent() {\n      return React__default.createElement(ExpandMoreRounded, {\n        className: classes.icon\n      });\n    }\n  }, items.map(function (item) {\n    return displaySelectItem(props, item);\n  })));\n};\n\nInputSelect.defaultProps = {\n  value: '',\n  error: false,\n  required: false,\n  onChange: function onChange(value) {\n    console.log(value);\n  }\n};\nvar index$7 =\n/*#__PURE__*/\nObject.freeze({\n  InputSelect: InputSelect\n});\nvar labelColor$3 = 'rgb(21,28,28)';\nvar grayColor$3 = 'rgba(39,52,76,0.3)';\nvar grayColorFocused$3 = 'rgba(39,52,76,0.5)';\nvar borderCss$3 = {\n  borderColor: grayColor$3,\n  borderRadius: 5\n};\nvar borderStyles$1 = {\n  root: {\n    '& label.Mui-focused': {\n      color: labelColor$3\n    },\n    '& .MuiInput-underline:after': {\n      borderBottomColor: grayColor$3\n    },\n    '& .MuiOutlinedInput-root': {\n      '& fieldset': borderCss$3,\n      '&:hover fieldset': borderCss$3,\n      '&.Mui-focused fieldset': _assign(_assign({}, borderCss$3), {\n        borderColor: grayColorFocused$3\n      })\n    }\n  },\n  input: {\n    fontSize: 14 // input: {\n    //   '&:focus': {\n    //     borderRadius: 4,\n    //     borderColor: '#80bdff',\n    //     boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\n    //   }\n    // }\n\n  }\n};\nvar useStyles$3 = makeStyles(function (theme) {\n  return {\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n    formControl: {\n      width: '100%'\n    },\n    label: {\n      fontSize: '.8em'\n    },\n    select: {\n      marginTop: theme.spacing(1),\n      backgroundColor: 'white'\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2)\n    },\n    icon: {\n      marginRight: theme.spacing(2.5),\n      color: grayColor$3\n    },\n    error: {\n      color: '#E53935',\n      fontSize: '12px'\n    },\n    errorIcon: {\n      color: '#E53935',\n      fontSize: 'small',\n      float: 'right'\n    }\n  };\n}); // const StyledFormControl = withStyles(borderStyles)(FormControl);\n\nvar StyledOutlinedInput$1 = withStyles(borderStyles$1)(OutlinedInput);\n\nvar InputSelectSetValue = function InputSelectSetValue(props) {\n  var items = __spreadArrays(props.data);\n\n  var classes = useStyles$3();\n  var inputLabel = React__default.useRef(null);\n  var labelWidth = React__default.useState(0)[0]; // React.useEffect(() => {\n  //   setLabelWidth(inputLabel.current!.offsetWidth);\n  // }, []);\n\n  var onChange = function onChange(e) {\n    var selectedItem = items.find(function (item) {\n      return item.value === e.target.value;\n    });\n\n    if (props.onChange) {\n      props.onChange(selectedItem);\n    }\n  };\n\n  var displaySelectItem = function displaySelectItem(props, selectItem) {\n    if (props.displaySelectItem) {\n      return props.displaySelectItem(selectItem);\n    }\n\n    var disabled = selectItem.id === -1 && props.required;\n    return React__default.createElement(MenuItem, {\n      key: selectItem.id,\n      value: selectItem.value,\n      disabled: disabled\n    }, selectItem.label);\n  };\n\n  return React__default.createElement(\"div\", {\n    className: classes.formControl\n  }, React__default.createElement(InputLabel, {\n    color: \"textPrimary\",\n    className: classes.label,\n    ref: inputLabel,\n    htmlFor: props.id\n  }, props.label), React__default.createElement(Select$1, {\n    className: classes.select,\n    value: props.value,\n    onChange: onChange,\n    disabled: props.disabled,\n    input: React__default.createElement(StyledOutlinedInput$1, {\n      id: props.id,\n      name: props.id,\n      error: props.error,\n      labelWidth: labelWidth,\n      fullWidth: true,\n      disabled: props.disabled\n    }),\n    IconComponent: function IconComponent() {\n      return React__default.createElement(ExpandMoreRounded, {\n        className: classes.icon\n      });\n    }\n  }, items.map(function (item) {\n    return displaySelectItem(props, item);\n  })), props.error && React__default.createElement(\"div\", {\n    className: classes.formControl\n  }, React__default.createElement(FormHelperText, {\n    id: \"component-error-text\",\n    className: classes.error\n  }, props.errorMessage, React__default.createElement(ErrorIcon, {\n    className: classes.errorIcon\n  }))));\n};\n\nInputSelectSetValue.defaultProps = {\n  label: '',\n  value: '',\n  error: false,\n  errorMessage: '',\n  required: false,\n  disabled: false,\n  onChange: function onChange(value) {\n    console.log(value);\n  }\n};\nvar index$8 =\n/*#__PURE__*/\nObject.freeze({\n  InputSelectSetValue: InputSelectSetValue\n});\nvar useStyles$4 = makeStyles(function (theme) {\n  return {\n    root: {\n      width: '100%'\n    },\n    label: {\n      fontSize: '.8em'\n    },\n    textField: {\n      marginTop: theme.spacing(1),\n      backgroundColor: 'white',\n      fontSize: '14px'\n    },\n    error: {\n      color: '#E53935',\n      fontSize: '12px'\n    },\n    errorIcon: {\n      color: '#E53935',\n      fontSize: 'small',\n      float: 'right'\n    }\n  };\n});\nvar labelColor$4 = 'rgb(21,28,28)';\nvar grayColor$4 = 'rgba(39,52,76,0.3)';\nvar grayColorFocused$4 = 'rgba(39,52,76,0.5)';\nvar borderCss$4 = {\n  borderColor: grayColor$4,\n  borderRadius: 5\n};\nvar StyledTextField = withStyles({\n  root: {\n    '& label.Mui-focused': {\n      color: labelColor$4\n    },\n    '& .MuiInput-underline:after': {\n      borderBottomColor: grayColor$4\n    },\n    '& .MuiOutlinedInput-root': {\n      '& fieldset': borderCss$4,\n      '&:hover fieldset': borderCss$4,\n      '&.Mui-focused fieldset': _assign(_assign({}, borderCss$4), {\n        borderColor: grayColorFocused$4\n      })\n    }\n  }\n})(TextField);\n\nvar InputTextField = function InputTextField(props) {\n  var classes = useStyles$4();\n\n  var onChange = function onChange(e) {\n    var value = e.target.value;\n\n    if (props.onChange) {\n      props.onChange(value);\n    }\n  };\n\n  return React__default.createElement(\"div\", {\n    className: classes.root\n  }, props.label ? React__default.createElement(InputLabel, {\n    htmlFor: props.id,\n    className: classes.label,\n    color: \"textPrimary\"\n  }, props.label) : null, React__default.createElement(StyledTextField, {\n    id: props.id,\n    className: classes.textField,\n    value: props.value,\n    onChange: onChange,\n    error: props.error,\n    multiline: props.multiline,\n    rows: props.rows,\n    type: props.type,\n    fullWidth: true,\n    disabled: props.disabled,\n    variant: \"outlined\"\n  }), props.error && React__default.createElement(\"div\", {\n    className: classes.root\n  }, React__default.createElement(FormHelperText, {\n    id: \"component-error-text\",\n    className: classes.error\n  }, props.errorMessage, React__default.createElement(ErrorIcon, {\n    className: classes.errorIcon\n  }))));\n};\n\nInputTextField.defaultProps = {\n  type: 'text',\n  value: '',\n  error: false,\n  errorMessage: '',\n  multiline: false,\n  disabled: false,\n  rows: 1,\n  onChange: function onChange(value) {\n    console.log(\"InputTextField.defaultProps - Value: \" + value);\n  }\n};\nvar index$9 =\n/*#__PURE__*/\nObject.freeze({\n  InputTextField: InputTextField\n}); //declare class to style components\n\nvar useStyles$5 = makeStyles(function (theme) {\n  return {\n    root: {\n      flexWrap: 'wrap'\n    },\n    inputSelect: {\n      marginBottom: theme.spacing(1)\n    },\n    dialog: {\n      align: 'center',\n      justify: 'center',\n      width: '100%'\n    },\n    dialogContent: {\n      paddingTop: '0px'\n    },\n    container: {\n      paddingRight: '15px',\n      paddingLeft: '15px'\n    },\n    dialogTitle: {\n      marginTop: theme.spacing(2)\n    },\n    dialogContentTitle: {},\n    dialogContentText: {},\n    formControlLabel: {},\n    textField: {},\n    checkBox: {\n      paddingLeft: '10px'\n    },\n    dialogAction: {\n      marginBottom: theme.spacing(2),\n      marginTop: theme.spacing(2),\n      justifyContent: 'center'\n    },\n    resolveDialogAction: {\n      marginBottom: theme.spacing(2),\n      marginTop: theme.spacing(4),\n      justifyContent: 'center'\n    },\n    leftButton: {\n      width: 115,\n      marginLeft: 15,\n      marginRight: 10\n    },\n    rightButton: {\n      width: 115,\n      marginLeft: 10,\n      marginRight: 15\n    }\n  };\n});\nvar StyledCheckbox = withStyles({\n  root: {\n    color: '#9EA3AC',\n    '&$checked': {\n      color: '#1E2071'\n    }\n  },\n  checked: {}\n})(Checkbox);\n\nvar TicketModal = function TicketModal(props) {\n  var classes = useStyles$5();\n\n  var _a = React__default.useState({\n    notes: '',\n    notesError: false,\n    isResolved: false\n  }),\n      state = _a[0],\n      setState = _a[1];\n\n  var _b = useState(true),\n      disabled = _b[0],\n      setDisabled = _b[1]; //reset values and close dialog\n\n\n  var handleClose = function handleClose() {\n    setDisabled(true);\n    setState({\n      notes: '',\n      notesError: false,\n      isResolved: false\n    });\n    props.onClose();\n  }; //changes state of the changed values\n\n\n  var setFieldValue = function setFieldValue(fieldName, value) {\n    setState(function (state) {\n      var _a;\n\n      return _assign(_assign({}, state), (_a = {}, _a[fieldName] = value, _a));\n    });\n  };\n\n  var setFieldError = function setFieldError(fieldName, error) {\n    setState(function (state) {\n      var _a;\n\n      return _assign(_assign({}, state), (_a = {}, _a[fieldName] = error, _a));\n    });\n  };\n  /* render ticket management modal in 3 different types (Resolve, Assign, Escalate)\r\n      Sample usage :\r\n      import { Components } from '@hims/core';\r\n      const Modal = Components.UI.TicketModal.TicketModal;\r\n         <Modal\r\n                    type=\"Escalate\" (Resolve/Assign/Escalate) - is not case sensitive but will render title as is\r\n                    onClose={this.onAddDataFieldModalClose}\r\n                    isModalOpen={ticketModal}\r\n                    selectItems={[{\"id\":0,\"value\":'Jae',\"label\":'Jae'},{\"id\":1,\"value\":'Lambert',\"label\":'Lambert'},{\"id\":2,\"value\":'Bau',\"label\":'Bau'}]}\r\n                    onSubmit={this.onAddDataFieldModalClose}\r\n          />\r\n  */\n\n\n  var component = React__default.createElement(\"div\", null);\n\n  switch (props.type.toLowerCase()) {\n    case 'resolve':\n      console.log('in resolve');\n      component = React__default.createElement(\"div\", null, React__default.createElement(Grid, {\n        container: true,\n        className: classes.container,\n        justify: \"flex-start\",\n        alignItems: \"flex-start\",\n        direction: \"column\"\n      }, React__default.createElement(Grid, {\n        item: true,\n        xs: true\n      }, React__default.createElement(DialogTitle, {\n        disableTypography: true,\n        id: \"dialog-title\",\n        className: classes.dialogTitle\n      }, props.type, \" Ticket\")), React__default.createElement(Grid, {\n        item: true,\n        xs: true\n      }, React__default.createElement(DialogContent, {\n        className: classes.dialogContent\n      }, React__default.createElement(DialogContentText, {\n        className: classes.dialogContentText,\n        id: \"alert-dialog-description\"\n      }, \"How was the issue resolved?\"), React__default.createElement(InputTextField, {\n        value: state.notes,\n        error: state.notesError,\n        multiline: true,\n        rows: 4,\n        onChange: function onChange(value) {\n          setFieldValue('notes', value);\n          setFieldError('notesError', value.length === 0);\n        }\n      })), React__default.createElement(Grid, {\n        item: true,\n        xs: true\n      }, React__default.createElement(DialogContent, {\n        className: classes.dialogContent\n      }, React__default.createElement(FormControlLabel, {\n        className: classes.formControlLabel,\n        control: React__default.createElement(StyledCheckbox, {\n          icon: React__default.createElement(FontAwesomeIcon, {\n            icon: faSquare\n          }),\n          checkedIcon: React__default.createElement(FontAwesomeIcon, {\n            icon: faCheckSquare\n          }),\n          color: \"primary\",\n          checked: state.isResolved,\n          onChange: function onChange(value) {\n            setFieldValue('isResolved', value.target.checked);\n            setDisabled(!value.target.checked);\n          },\n          inputProps: {\n            'aria-label': 'primary checkbox'\n          }\n        }),\n        label: \"Mark as resolved\",\n        labelPlacement: \"end\"\n      }))), React__default.createElement(DialogActions, {\n        className: classes.resolveDialogAction\n      }, React__default.createElement(Button, {\n        className: classes.leftButton,\n        variant: \"contained\",\n        onClick: handleClose,\n        color: \"secondary\"\n      }, \"Cancel\"), React__default.createElement(Button, {\n        className: classes.rightButton,\n        variant: \"contained\",\n        disabled: disabled,\n        onClick: props.onSubmit,\n        color: \"primary\"\n      }, \"Resolve\")))));\n      break;\n\n    case 'assign':\n      console.log('in assign');\n      component = React__default.createElement(\"div\", null, React__default.createElement(Grid, {\n        container: true,\n        className: classes.container,\n        justify: \"flex-start\",\n        alignItems: \"flex-start\",\n        direction: \"column\"\n      }, React__default.createElement(Grid, {\n        item: true,\n        xs: true\n      }, React__default.createElement(DialogTitle, {\n        disableTypography: true,\n        id: \"dialog-title\",\n        className: classes.dialogTitle\n      }, props.type, \" Ticket\")), React__default.createElement(Grid, {\n        item: true,\n        xs: true\n      }, React__default.createElement(DialogContent, {\n        className: classes.dialogContent\n      }, React__default.createElement(InputSelect, {\n        id: 'modal-input-select',\n        label: 'Assign To',\n        data: props.selectItems\n      }), React__default.createElement(DialogContentText, null), React__default.createElement(InputTextField, {\n        label: 'Notes',\n        value: state.notes,\n        error: state.notesError,\n        multiline: true,\n        rows: 4,\n        onChange: function onChange(value) {\n          setFieldValue('notes', value);\n          setFieldError('notesError', value.length === 0);\n        }\n      })), React__default.createElement(DialogActions, {\n        className: classes.dialogAction\n      }, React__default.createElement(Button, {\n        className: classes.leftButton,\n        variant: \"contained\",\n        onClick: handleClose,\n        color: \"secondary\"\n      }, \"Cancel\"), React__default.createElement(Button, {\n        className: classes.rightButton,\n        variant: \"contained\",\n        onClick: props.onSubmit,\n        color: \"primary\"\n      }, \"Assign\")))));\n      break;\n\n    case 'escalate':\n      console.log('in escalate');\n      component = React__default.createElement(\"div\", null, React__default.createElement(Grid, {\n        container: true,\n        className: classes.container,\n        justify: \"flex-start\",\n        alignItems: \"flex-start\",\n        direction: \"column\"\n      }, React__default.createElement(Grid, {\n        item: true,\n        xs: true\n      }, React__default.createElement(DialogTitle, {\n        disableTypography: true,\n        id: \"dialog-title\",\n        className: classes.dialogTitle\n      }, props.type, \" Ticket\")), React__default.createElement(Grid, {\n        item: true,\n        xs: true\n      }, React__default.createElement(DialogContent, {\n        className: classes.dialogContent\n      }, React__default.createElement(InputSelect, {\n        id: 'modal-input-select',\n        label: 'Escalate To',\n        data: props.selectItems\n      }), React__default.createElement(DialogContentText, null), React__default.createElement(InputTextField, {\n        label: 'Notes',\n        value: state.notes,\n        error: state.notesError,\n        multiline: true,\n        rows: 4,\n        onChange: function onChange(value) {\n          setFieldValue('notes', value);\n          setFieldError('notesError', value.length === 0);\n        }\n      })), React__default.createElement(DialogActions, {\n        className: classes.dialogAction\n      }, React__default.createElement(Button, {\n        className: classes.leftButton,\n        variant: \"contained\",\n        onClick: handleClose,\n        color: \"secondary\"\n      }, \"Cancel\"), React__default.createElement(Button, {\n        className: classes.rightButton,\n        variant: \"contained\",\n        onClick: props.onSubmit,\n        color: \"primary\"\n      }, \"Escalate\")))));\n      break;\n  }\n\n  return React__default.createElement(Dialog, {\n    className: classes.dialog,\n    open: props.isModalOpen,\n    \"aria-labelledby\": \"simple-dialog-title\"\n  }, component);\n}; //declare defaults\n\n\nTicketModal.defaultProps = {\n  isModalOpen: false,\n  type: 'Resolve',\n  selectItems: [{\n    \"id\": 0,\n    \"value\": '',\n    \"label\": ''\n  }]\n};\nvar index$a =\n/*#__PURE__*/\nObject.freeze({\n  TicketModal: TicketModal\n});\nvar styles = {\n  \"title\": \"index_title__3_oz-\",\n  \"titleBack\": \"index_titleBack__ghwZN\",\n  \"titleFront\": \"index_titleFront__23_8b\",\n  \"titleContact\": \"index_titleContact__2ETaU\",\n  \"titleRecruitmentTitle\": \"index_titleRecruitmentTitle__eDJJH\"\n}; // #endregion Interface Imports\n\nvar SampleCoreComponent =\n/** @class */\nfunction (_super) {\n  __extends(SampleCoreComponent, _super);\n\n  function SampleCoreComponent() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SampleCoreComponent.prototype.render = function () {\n    var text = this.props.text;\n    return React__default.createElement(\"div\", {\n      className: styles.title\n    }, React__default.createElement(\"span\", {\n      className: styles.titleBack\n    }, text), React__default.createElement(\"span\", {\n      className: styles.titleFront\n    }, text));\n  };\n\n  return SampleCoreComponent;\n}(React__default.Component);\n\nvar index$b =\n/*#__PURE__*/\nObject.freeze({\n  SampleCoreComponent: SampleCoreComponent\n});\nvar useStyles$6 = makeStyles(function (theme) {\n  var _a, _b;\n\n  return {\n    appBar: (_a = {\n      backgroundColor: '#ffffff',\n      color: '#808080'\n    }, _a[theme.breakpoints.up('sm')] = {\n      width: 'calc(100% - 85px)'\n    }, _a),\n    menuButton: (_b = {\n      marginRight: theme.spacing(2)\n    }, _b[theme.breakpoints.up('sm')] = {\n      display: 'none'\n    }, _b),\n    logo: {\n      height: '40px'\n    },\n    badge: {\n      backgroundColor: '#ff6969',\n      color: '#ffffff',\n      fontWeight: 700\n    },\n    grow: {\n      flexGrow: 1\n    }\n  };\n});\n\nvar AppHeader = function AppHeader(props) {\n  var classes = useStyles$6();\n\n  var handleMenuOnClick = function handleMenuOnClick() {\n    if (props.menuOnClick) {\n      props.menuOnClick();\n    }\n  }; // const handleNotificationOnClick = () => {\n  //   if (props.notificationOnClick) {\n  //     props.notificationOnClick();\n  //   }\n  // };\n\n\n  var handleUserOnClick = function handleUserOnClick() {\n    if (props.userOnClick) {\n      props.userOnClick();\n    }\n  };\n\n  return React__default.createElement(AppBar, {\n    className: classes.appBar\n  }, React__default.createElement(Toolbar, null, React__default.createElement(IconButton, {\n    edge: \"start\",\n    className: classes.menuButton,\n    onClick: handleMenuOnClick\n  }, React__default.createElement(MenuIcon, null)), React__default.createElement(Link, {\n    href: \"/\"\n  }, React__default.createElement(\"img\", {\n    src: props.logoImage,\n    className: classes.logo,\n    alt: \"logo\"\n  })), React__default.createElement(\"div\", {\n    className: classes.grow\n  }), React__default.createElement(IconButton, {\n    edge: \"end\",\n    onClick: handleUserOnClick\n  }, React__default.createElement(Avatar, {\n    src: props.userImage,\n    alt: \"avatar\"\n  }))));\n};\n\nAppHeader.defaultProps = {\n  badgeCount: 0\n};\nAppHeader.propTypes = {\n  badgeCount: PropTypes.number\n};\nvar useStyles$7 = makeStyles(function () {\n  return {\n    sideBar: {\n      width: '85px'\n    },\n    listItem: {\n      flexDirection: 'column',\n      marginBottom: '10px'\n    },\n    listItemIcon: {\n      minWidth: 0\n    },\n    avatar: {\n      backgroundColor: 'rgba(158, 164, 172, 0.18)'\n    },\n    avatarSelected: {\n      backgroundColor: 'rgba(98, 255, 183, 0.18)'\n    },\n    listItemText: {\n      fontSize: 9,\n      color: '#ffffff'\n    },\n    listItemTextSelected: {\n      fontSize: 9,\n      color: 'rgba(98, 255, 183, 1)'\n    },\n    icon: {\n      color: 'white'\n    },\n    iconSelected: {\n      color: 'rgba(98, 255, 183, 1)'\n    },\n    divider: {\n      backgroundColor: 'transparent',\n      height: '50px'\n    }\n  };\n});\n\nfunction ListItemLink(props) {\n  return React__default.createElement(ListItem, _assign({\n    button: true,\n    component: \"a\"\n  }, props));\n}\n\nvar AppSidebar = function AppSidebar(props) {\n  var classes = useStyles$7(); // const [selectedItem, setSelectedItem] = useState(\"dashboard\");\n\n  var isSelectedSidebar = function isSelectedSidebar(sidebarItem) {\n    var selectedSidebar = localStorage.getItem('sidebar');\n    var isSelected = selectedSidebar && selectedSidebar === sidebarItem || false;\n    return isSelected;\n  };\n\n  var _a = React__default.useState(true),\n      sidebarChanged = _a[0],\n      setSidebarChanged = _a[1];\n\n  var _b = React__default.useState({\n    dashboard: true,\n    members: false\n  }),\n      sidebarSelected = _b[0],\n      setSidebarSelected = _b[1];\n\n  var getSidebarSelected = function getSidebarSelected() {\n    setSidebarSelected({\n      dashboard: isSelectedSidebar('dashboard'),\n      members: isSelectedSidebar('members')\n    });\n  };\n\n  React__default.useEffect(function () {\n    if (sidebarChanged) {\n      getSidebarSelected();\n      setSidebarChanged(false);\n    }\n  }, [sidebarChanged]);\n  React__default.useEffect(function () {\n    if (typeof window !== 'undefined') {\n      window.addEventListener('storage', getSidebarSelected);\n      return function () {\n        window.removeEventListener('storage', getSidebarSelected);\n      };\n    }\n\n    return undefined;\n  }, []);\n\n  var handleDashboardOnClick = function handleDashboardOnClick(event, attr) {\n    console.log('handleDashboardOnClick event', event);\n    console.log('handleDashboardOnClick attr', attr);\n\n    switch (attr) {\n      case 'dashboard':\n        if (props.page === 'membership') {\n          props.history.push('#/membership/', {\n            state: 'dashboard'\n          });\n          window.location.reload();\n        } else if (props.page === 'underwriting') {\n          props.history.push('#/underwriting/', {\n            state: 'dashboard'\n          });\n          window.location.reload();\n        } else if (props.page === 'customer care') {\n          props.history.push('#/customer-care', {\n            state: 'dashboard'\n          });\n          window.location.reload();\n        }\n\n        break;\n\n      case 'members':\n        if (props.page === 'membership') {\n          props.history.push('#/membership/members', {\n            state: 'members'\n          });\n          window.location.reload();\n        }\n\n        break;\n\n      case 'create ticket':\n        if (props.page === 'customer care') {\n          props.history.push('#/customer-care/create-ticket', {\n            state: 'create ticket'\n          });\n          window.location.reload();\n        }\n\n        break;\n    }\n\n    localStorage.setItem('sidebar', attr);\n    setSidebarChanged(true); // setSelectedItem(attr);\n  };\n\n  var handleSidebarClick = function handleSidebarClick(page) {\n    localStorage.setItem('sidebar', page);\n    setSidebarChanged(true);\n  };\n\n  return React__default.createElement(\"div\", {\n    className: classes.sideBar\n  }, React__default.createElement(List, null, props.page !== 'customer care' ? React__default.createElement(ListItemLink, {\n    className: classes.listItem,\n    href: props.page === 'membership' ? '#/membership/' : '#/underwriting/',\n    onClick: function onClick() {\n      handleSidebarClick('dashboard');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faHome,\n    className: sidebarSelected.dashboard ? classes.iconSelected : classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Dashboard\",\n    disableTypography: true,\n    className: sidebarSelected.dashboard ? classes.listItemTextSelected : classes.listItemText\n  })) : null, props.page === 'customer care' ? React__default.createElement(ListItemLink, {\n    className: classes.listItem,\n    href: '#/customer-care/',\n    onClick: function onClick() {\n      handleSidebarClick('dashboard');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faPlusCircle,\n    className: sidebarSelected.dashboard ? classes.iconSelected : classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Create New\",\n    disableTypography: true,\n    className: sidebarSelected.dashboard ? classes.listItemTextSelected : classes.listItemText\n  })) : null, props.page !== 'customer care' ? React__default.createElement(ListItem, {\n    button: true,\n    className: classes.listItem,\n    onClick: function onClick(e) {\n      return handleDashboardOnClick(e, 'clients');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faUsers,\n    className: classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Clients\",\n    disableTypography: true,\n    className: classes.listItemText\n  })) : null, props.page !== 'customer care' ? React__default.createElement(ListItem, {\n    button: true,\n    className: classes.listItem,\n    onClick: function onClick(e) {\n      return handleDashboardOnClick(e, 'proposals');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faFileSignature,\n    className: classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Proposals\",\n    disableTypography: true,\n    className: classes.listItemText\n  })) : null, props.page === 'membership' ? React__default.createElement(ListItemLink, {\n    className: classes.listItem,\n    href: '#/membership/members',\n    onClick: function onClick() {\n      handleSidebarClick('members');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faIdCardAlt,\n    className: sidebarSelected.members ? classes.iconSelected : classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Members\",\n    disableTypography: true,\n    className: sidebarSelected.members ? classes.listItemTextSelected : classes.listItemText\n  })) : null, props.page === 'customer care' ? React__default.createElement(ListItemLink, {\n    className: classes.listItem,\n    href: '#/membership/members',\n    onClick: function onClick() {\n      handleSidebarClick('members');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faIdCardAlt,\n    className: sidebarSelected.members ? classes.iconSelected : classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Members\",\n    disableTypography: true,\n    className: sidebarSelected.members ? classes.listItemTextSelected : classes.listItemText\n  })) : null, props.page === 'customer care' ? React__default.createElement(ListItemLink, {\n    className: classes.listItem,\n    href: '#/customer-care/tickets'\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faTasks,\n    className: classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Tickets\",\n    disableTypography: true,\n    className: classes.listItemText\n  })) : null, props.page !== 'customer care' ? React__default.createElement(ListItem, {\n    button: true,\n    className: classes.listItem,\n    onClick: function onClick(e) {\n      return handleDashboardOnClick(e, 'tickets');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faTasks,\n    className: classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Tickets\",\n    disableTypography: true,\n    className: classes.listItemText\n  })) : null, props.page !== 'customer care' ? React__default.createElement(ListItem, {\n    button: true,\n    className: classes.listItem,\n    onClick: function onClick(e) {\n      return handleDashboardOnClick(e, 'reports');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faTable,\n    className: classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Reports\",\n    disableTypography: true,\n    className: classes.listItemText\n  })) : null, props.page === 'underwriting' ? React__default.createElement(ListItem, {\n    button: true,\n    className: classes.listItem,\n    onClick: function onClick(e) {\n      return handleDashboardOnClick(e, 'templates');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faFolderOpen,\n    className: classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Templates\",\n    disableTypography: true,\n    className: classes.listItemText\n  })) : null, props.page === 'membership' ? React__default.createElement(ListItem, {\n    button: true,\n    className: classes.listItem,\n    onClick: function onClick(e) {\n      return handleDashboardOnClick(e, 'users');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faUserFriends,\n    className: classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Users\",\n    disableTypography: true,\n    className: classes.listItemText\n  })) : null, props.page === 'membership' ? React__default.createElement(ListItem, {\n    button: true,\n    className: classes.listItem,\n    onClick: function onClick(e) {\n      return handleDashboardOnClick(e, 'settings');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faScrewdriver,\n    className: classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"settings\",\n    disableTypography: true,\n    className: classes.listItemText\n  })) : null, React__default.createElement(Divider, {\n    className: classes.divider\n  }), React__default.createElement(ListItem, {\n    button: true,\n    className: classes.listItem,\n    onClick: function onClick(e) {\n      return handleDashboardOnClick(e, 'help');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faBookOpen,\n    className: classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Help\",\n    disableTypography: true,\n    className: classes.listItemText\n  }))));\n};\n\nvar useStyles$8 = makeStyles(function (theme) {\n  var _a;\n\n  return {\n    root: {\n      display: 'flex'\n    },\n    drawer: (_a = {}, _a[theme.breakpoints.up('sm')] = {\n      width: '72px',\n      flexShrink: 0\n    }, _a),\n    drawerPaper: {\n      backgroundColor: '#1e2071'\n    },\n    content: {\n      flexGrow: 1,\n      padding: \"0 \" + theme.spacing(5) + \"px\"\n    },\n    toolbar: theme.mixins.toolbar\n  };\n});\n\nvar AuthenticatedLayout = function AuthenticatedLayout(props) {\n  var classes = useStyles$8();\n\n  var _a = useState(false),\n      mobileOpen = _a[0],\n      setMobileOpen = _a[1];\n\n  var handleDrawerToggle = function handleDrawerToggle() {\n    setMobileOpen(!mobileOpen);\n  };\n\n  return React__default.createElement(\"div\", {\n    className: classes.root\n  }, React__default.createElement(AppHeader, {\n    logoImage: \"intellicare.png\",\n    userImage: \"user.jpg\",\n    badgeCount: 8,\n    menuOnClick: handleDrawerToggle\n  }), React__default.createElement(\"nav\", {\n    className: classes.drawer\n  }, React__default.createElement(Hidden, {\n    smUp: true,\n    implementation: \"css\"\n  }, React__default.createElement(Drawer, {\n    classes: {\n      paper: classes.drawerPaper\n    },\n    variant: \"temporary\",\n    open: mobileOpen,\n    onClose: handleDrawerToggle\n  }, React__default.createElement(AppSidebar, _assign({}, props)))), React__default.createElement(Hidden, {\n    xsDown: true,\n    implementation: \"css\"\n  }, React__default.createElement(Drawer, {\n    classes: {\n      paper: classes.drawerPaper\n    },\n    variant: \"permanent\",\n    open: true\n  }, React__default.createElement(AppSidebar, _assign({}, props))))), React__default.createElement(\"main\", {\n    className: classes.content\n  }, React__default.createElement(\"div\", {\n    className: classes.toolbar\n  }), props.children));\n};\n\nvar useStyles$9 = makeStyles({\n  root: {\n    backgroundColor: '#ffffff',\n    padding: '10px'\n  },\n  gridContainer: {\n    height: '100px'\n  },\n  breadCrumbs: {\n    marginBottom: '10px'\n  },\n  headerTitle: {\n    fontSize: 25\n  },\n  linkPrevious: {\n    fontSize: 12,\n    fontWeight: 300,\n    color: 'black',\n    cursor: 'pointer'\n  },\n  linkCurrent: {\n    fontSize: 12,\n    color: 'black',\n    cursor: 'pointer'\n  }\n});\n\nvar PageHeader = function PageHeader() {\n  var classes = useStyles$9();\n  return createElement(\"div\", {\n    className: classes.root\n  }, createElement(Grid, {\n    container: true,\n    justify: \"space-between\",\n    alignItems: \"center\",\n    className: classes.gridContainer\n  }, createElement(Grid, {\n    item: true\n  }, createElement(Breadcrumbs, {\n    className: classes.breadCrumbs\n  }, createElement(Link, {\n    className: classes.linkPrevious\n  }, \"CLIENTS\"), createElement(Link, {\n    className: classes.linkCurrent\n  }, \"HAPPY INNOVATIVE TECHNOLOGIES, INC.\")), createElement(Typography, {\n    className: classes.headerTitle\n  }, \"Happy Innovative Technologies, Inc.\")), createElement(Grid, {\n    item: true\n  }, createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\"\n  }, \"Edit Client\"))));\n};\n\nvar index$c =\n/*#__PURE__*/\nObject.freeze({\n  'default': PageHeader\n});\nvar useStyles$a = makeStyles({\n  root: {\n    padding: '5px 5px'\n  },\n  name: function name(props) {\n    return {\n      fontSize: props.nameFontSize,\n      color: 'rgba(39, 46, 76, 0.6)'\n    };\n  },\n  value: function value(props) {\n    return {\n      fontSize: props.valueFontSize,\n      color: 'rgb(39, 46, 76)'\n    };\n  }\n});\n\nvar ClientInfoItem = function ClientInfoItem(props) {\n  var classes = useStyles$a(props);\n  return createElement(\"div\", {\n    className: classes.root\n  }, createElement(Typography, {\n    className: classes.name\n  }, props.name), createElement(Typography, {\n    className: classes.value\n  }, props.value));\n};\n\nClientInfoItem.defaultProps = {\n  nameFontSize: 12,\n  valueFontSize: 16\n};\nvar useStyles$b = makeStyles({\n  grid: function grid(props) {\n    return {\n      height: props.height\n    };\n  }\n});\n\nvar GridHorizontalDivider = function GridHorizontalDivider(props) {\n  var classes = useStyles$b(props);\n  return createElement(Grid, {\n    item: true,\n    xs: 12,\n    className: classes.grid\n  });\n};\n\nGridHorizontalDivider.defaultProps = {\n  height: '10px'\n};\nGridHorizontalDivider.propTypes = {\n  height: PropTypes.string\n};\nvar useCirclePrimitive = makeStyles(function (theme) {\n  var circlePrimitiveStyle = {\n    width: '100%',\n    height: '100%',\n    position: 'absolute',\n    left: '0',\n    top: '0'\n  };\n\n  if (theme.rotate) {\n    Object.assign(circlePrimitiveStyle, {\n      'transform': \"rotate(\" + theme.rotate + \"deg)\"\n    });\n  }\n\n  var circlePrimBeforeStyle = {\n    content: '',\n    display: 'block',\n    margin: '0 auto',\n    width: '15%',\n    height: '15%',\n    backgroundColor: '#999',\n    borderRadius: '100%',\n    '@keyframes circleFadeDelay': {\n      '0%,39%,100%': {\n        opacity: 0\n      },\n      '40%': {\n        opacity: 1\n      }\n    },\n    animation: \"$circleFadeDelay 1.2s infinite ease-in-out both\"\n  };\n\n  if (theme.delay) {\n    Object.assign(circlePrimBeforeStyle, {\n      animationDelay: theme.delay + \"s\"\n    });\n  } // Object.assign(circlePrimitiveStyle, {\n  //   '&:before': circlePrimBeforeStyle,\n  // });\n\n\n  return {\n    root: circlePrimitiveStyle\n  };\n});\n\nvar Circle = function Circle(props) {\n  var classes = useCirclePrimitive(props);\n  return createElement(\"div\", {\n    className: classes.root\n  });\n};\n\nvar useStyles$c = makeStyles({\n  root: {\n    margin: '2em auto',\n    width: '40px',\n    height: '40px',\n    position: 'relative'\n  }\n});\n\nvar Wrapper = function Wrapper(props) {\n  var classes = useStyles$c();\n  return React__default.createElement(\"div\", _assign({\n    className: classes.root\n  }, props));\n};\n\nvar LoadingIndicator = function LoadingIndicator() {\n  return createElement(Wrapper, null, createElement(Circle, null), createElement(Circle, {\n    rotate: 30,\n    delay: -1.1\n  }), createElement(Circle, {\n    rotate: 60,\n    delay: -1\n  }), createElement(Circle, {\n    rotate: 90,\n    delay: -0.9\n  }), createElement(Circle, {\n    rotate: 120,\n    delay: -0.8\n  }), createElement(Circle, {\n    rotate: 150,\n    delay: -0.7\n  }), createElement(Circle, {\n    rotate: 180,\n    delay: -0.6\n  }), createElement(Circle, {\n    rotate: 210,\n    delay: -0.5\n  }), createElement(Circle, {\n    rotate: 240,\n    delay: -0.4\n  }), createElement(Circle, {\n    rotate: 270,\n    delay: -0.3\n  }), createElement(Circle, {\n    rotate: 300,\n    delay: -0.2\n  }), createElement(Circle, {\n    rotate: 330,\n    delay: -0.1\n  }));\n};\n\nvar useStyles$d = makeStyles({\n  previous_page: {\n    fontWeight: 300\n  },\n  current_page: {\n    fontWeight: 600\n  }\n});\n\nvar BreadcrumbsComponent = function BreadcrumbsComponent(props) {\n  var items = props.items;\n  var classes = useStyles$d();\n  return createElement(Breadcrumbs, {\n    \"aria-label\": \"breadcrumb\"\n  }, items.map(function (item, i) {\n    if (item['url'] != \"\") {\n      return createElement(Link, {\n        className: classes.previous_page,\n        key: i,\n        color: \"inherit\",\n        href: item.url\n      }, item.label);\n    } else {\n      return createElement(Typography, {\n        className: classes.current_page,\n        key: i,\n        color: \"textPrimary\"\n      }, item.label);\n    }\n  }));\n};\n\nBreadcrumbsComponent.defaultProps = {\n  items: [{\n    label: \"SAMPLE\",\n    url: \"\"\n  }]\n};\nvar useStyles$e = makeStyles(function (theme) {\n  var _a;\n\n  return {\n    appBar: (_a = {\n      top: 'auto',\n      bottom: 0,\n      border: '1px solid #707070',\n      backgroundColor: 'rgba(54, 54, 54, 0.64)'\n    }, _a[theme.breakpoints.up('sm')] = {\n      width: 'calc(100% - 72px)'\n    }, _a),\n    grow: {\n      flexGrow: 1\n    },\n    button: {\n      margin: '0 10px',\n      minHeight: '42px',\n      minWidth: '150px'\n    },\n    buttonTitle: {\n      fontWeight: 700,\n      fontSize: 13\n    },\n    buttonSubTitle: {\n      fontWeight: 400,\n      fontSize: 7\n    }\n  };\n});\n\nvar FloatingButtons = function FloatingButtons(props) {\n  // const buttonclasses = ButtonStyle();\n  var classes = useStyles$e();\n  return createElement(Grid, {\n    container: true\n  }, createElement(Grid, {\n    item: true,\n    xs: 12\n  }, createElement(AppBar, {\n    className: classes.appBar\n  }, createElement(Toolbar, null, props.rightButtons, createElement(\"div\", {\n    className: classes.grow\n  }), props.leftButtons))));\n};\n\nFloatingButtons.defaultProps = {\n  leftButtons: null,\n  rightButtons: null\n};\nvar useStyles$f = makeStyles(function (theme) {\n  var _a, _b;\n\n  return {\n    root: {\n      display: 'flex'\n    },\n    drawer: (_a = {}, _a[theme.breakpoints.up('sm')] = {\n      width: '72px',\n      flexShrink: 0\n    }, _a),\n    drawerPaper: {\n      backgroundColor: '#1e2071'\n    },\n    content: {\n      flexGrow: 1\n    },\n    toolbar: theme.mixins.toolbar,\n    menuButton: (_b = {\n      marginRight: theme.spacing(2)\n    }, _b[theme.breakpoints.up('sm')] = {\n      display: 'none'\n    }, _b),\n    logo: {\n      height: '40px'\n    },\n    badge: {\n      backgroundColor: '#ff6969',\n      color: '#ffffff',\n      fontWeight: 700\n    },\n    grow: {\n      flexGrow: 1\n    },\n    sidebar: {\n      maxWidth: '85px'\n    },\n    contentgrid: {\n      maxWidth: 'calc(100% - 85px)',\n      flexBasis: 'calc(100% - 85px)'\n    }\n  };\n});\n\nvar PageLayout = function PageLayout(props) {\n  var classes = useStyles$f();\n\n  var _a = useState(false),\n      mobileOpen = _a[0],\n      setMobileOpen = _a[1];\n\n  var _b = React__default.useState(null),\n      anchorEl = _b[0],\n      setAnchorEl = _b[1];\n\n  var _c = React__default.useState(false),\n      open = _c[0],\n      setOpen = _c[1];\n\n  var _d = React__default.useState(),\n      placement = _d[0],\n      setPlacement = _d[1];\n\n  var handleDrawerToggle = function handleDrawerToggle() {\n    setMobileOpen(!mobileOpen);\n  };\n\n  var handleClick = function handleClick(newPlacement) {\n    return function (event) {\n      setAnchorEl(event.currentTarget);\n      setOpen(function (prev) {\n        return placement !== newPlacement || !prev;\n      });\n      setPlacement(newPlacement);\n    };\n  };\n\n  var logolink = '/';\n\n  switch (props.page) {\n    case 'membership':\n      logolink = '#/membership';\n      break;\n\n    case 'underwriting':\n      logolink = '#/underwriting';\n      break;\n\n    default:\n      break;\n  }\n\n  return React__default.createElement(\"div\", {\n    className: classes.root\n  }, React__default.createElement(Popper, {\n    open: open,\n    anchorEl: anchorEl,\n    placement: placement,\n    transition: true\n  }, function (_a) {\n    var TransitionProps = _a.TransitionProps;\n    return React__default.createElement(Fade, _assign({}, TransitionProps, {\n      timeout: 350\n    }), React__default.createElement(Paper$1, null, React__default.createElement(List$1, null, React__default.createElement(ListItem$1, {\n      button: true,\n      onClick: props.onLogout\n    }, React__default.createElement(ListItemIcon$1, null, React__default.createElement(ExitToAppIcon, null)), React__default.createElement(ListItemText$1, {\n      primary: \"Logout\"\n    })))));\n  }), React__default.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"flex-start\"\n  }, React__default.createElement(Grid, {\n    item: true,\n    xs: 1,\n    className: classes.sidebar\n  }, React__default.createElement(\"nav\", {\n    className: classes.drawer\n  }, React__default.createElement(Hidden, {\n    smUp: true,\n    implementation: \"css\"\n  }, React__default.createElement(Drawer, {\n    classes: {\n      paper: classes.drawerPaper\n    },\n    variant: \"temporary\",\n    open: mobileOpen,\n    onClose: handleDrawerToggle\n  }, React__default.createElement(AppSidebar, _assign({}, props)))), React__default.createElement(Hidden, {\n    xsDown: true,\n    implementation: \"css\"\n  }, React__default.createElement(Drawer, {\n    classes: {\n      paper: classes.drawerPaper\n    },\n    variant: \"permanent\",\n    open: true\n  }, React__default.createElement(AppSidebar, _assign({}, props)))))), React__default.createElement(Grid, {\n    item: true,\n    xs: 11,\n    className: classes.contentgrid\n  }, React__default.createElement(Grid, {\n    container: true,\n    direction: \"column\"\n  }, props.page !== 'customer care' ? React__default.createElement(Grid, {\n    item: true,\n    xs: 12\n  }, React__default.createElement(Toolbar, null, React__default.createElement(IconButton, {\n    edge: \"start\",\n    className: classes.menuButton\n  }, React__default.createElement(MenuIcon, null)), React__default.createElement(Link, {\n    href: logolink\n  }, React__default.createElement(\"img\", {\n    src: 'intellicare.png',\n    className: classes.logo,\n    alt: \"logo\"\n  })), React__default.createElement(\"div\", {\n    className: classes.grow\n  }), React__default.createElement(IconButton, {\n    edge: \"end\",\n    onClick: handleClick('bottom-end')\n  }, React__default.createElement(Avatar, {\n    src: 'user.jpg',\n    alt: \"avatar\"\n  })))) : null, React__default.createElement(Grid, {\n    item: true,\n    xs: 12\n  }, React__default.createElement(\"main\", {\n    className: classes.content\n  }, props.children))))));\n};\n\nvar index$d =\n/*#__PURE__*/\nObject.freeze({\n  BaseTheme: BaseTheme,\n  SampleCoreComponent: index$b,\n  InputAutocomplete: index$5,\n  InputChipTextField: index$6,\n  InputSelect: index$7,\n  InputSelectSetValue: index$8,\n  InputTextField: index$9,\n  LoadingIndicator: LoadingIndicator,\n  AppHeader: AppHeader,\n  AppSidebar: AppSidebar,\n  AuthenticatedLayout: AuthenticatedLayout,\n  PageHeader: index$c,\n  ClientInfoItem: ClientInfoItem,\n  GridHorizontalDivider: GridHorizontalDivider,\n  TicketModal: index$a,\n  BreadcrumbsComponent: BreadcrumbsComponent,\n  FloatingButtons: FloatingButtons,\n  PageLayout: PageLayout\n});\nvar index$e =\n/*#__PURE__*/\nObject.freeze({\n  Actions: index,\n  Definitions: index$1,\n  Reducers: index$2,\n  Services: index$3,\n  Stores: index$4,\n  UI: index$d\n});\n/**\r\n * Validate the shape of redux store\r\n */\n\nfunction checkStore(store) {\n  var shape = {\n    dispatch: isFunction,\n    subscribe: isFunction,\n    getState: isFunction,\n    replaceReducer: isFunction,\n    runSaga: isFunction,\n    injectedReducers: isObject,\n    injectedSagas: isObject\n  };\n  invariant(conformsTo(store, shape), '(src/Utils...) injectors: Expected a valid redux store');\n}\n/**\r\n * Create the store with dynamic reducers\r\n */\n\n\nfunction configureStore(createReducer, initialState, history) {\n  if (initialState === void 0) {\n    initialState = {};\n  }\n\n  var composeEnhancers = compose;\n  var reduxSagaMonitorOptions = {}; // If Redux Dev Tools and Saga Dev Tools Extensions are installed, enable them\n\n  /* istanbul ignore next */\n\n  if (process.env.NODE_ENV !== 'production' && typeof window === 'object') {\n    if (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) {\n      composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({});\n    } // NOTE: Uncomment the code below to restore support for Redux Saga\n    // Dev Tools once it supports redux-saga version 1.x.x\n    // if (window.__SAGA_MONITOR_EXTENSION__)\n    //   reduxSagaMonitorOptions = {\n    //     sagaMonitor: window.__SAGA_MONITOR_EXTENSION__,\n    //   };\n\n  }\n\n  var sagaMiddleware = createSagaMiddleware(reduxSagaMonitorOptions); // Create the store with two middlewares\n  // 1. sagaMiddleware: Makes redux-sagas work\n  // 2. routerMiddleware: Syncs the location/URL path to the state\n\n  var middlewares = [sagaMiddleware, routerMiddleware(history)];\n  var enhancers = [applyMiddleware.apply(void 0, middlewares)];\n  var store = createStore(createReducer(), initialState, composeEnhancers.apply(void 0, enhancers)); // Extensions\n\n  store.runSaga = sagaMiddleware.run;\n  store.injectedReducers = {}; // Reducer registry\n\n  store.injectedSagas = {}; // Saga registry\n\n  return store;\n}\n\nvar RESTART_ON_REMOUNT = '@@saga-injector/restart-on-remount';\nvar DAEMON = '@@saga-injector/daemon';\nvar ONCE_TILL_UNMOUNT = '@@saga-injector/once-till-unmount';\nvar constants =\n/*#__PURE__*/\nObject.freeze({\n  RESTART_ON_REMOUNT: RESTART_ON_REMOUNT,\n  DAEMON: DAEMON,\n  ONCE_TILL_UNMOUNT: ONCE_TILL_UNMOUNT\n});\nvar history = createBrowserHistory();\n\nfunction injectReducerFactory(createReducer, store, isValid) {\n  if (isValid === void 0) {\n    isValid = false;\n  } // tslint:disable-next-line: only-arrow-functions\n\n\n  return function injectReducer(key, reducer) {\n    if (!isValid) {\n      checkStore(store);\n    }\n\n    invariant(isString(key) && !isEmpty(key) && isFunction(reducer), '(src/Utils...) injectReducer: Expected `reducer` to be a reducer function'); // tslint:disable-next-line:max-line-length\n    // Check `store.injectedReducers[key] === reducer` for hot reloading when a key is the same but a reducer is different\n\n    if (Reflect.has(store.injectedReducers, key) && store.injectedReducers[key] === reducer) {\n      return;\n    }\n\n    store.injectedReducers[key] = reducer;\n    store.replaceReducer(createReducer(store.injectedReducers));\n  };\n}\n\nfunction getInjectors(createReducer, store) {\n  checkStore(store);\n  return {\n    injectReducer: injectReducerFactory(createReducer, store, true)\n  };\n}\n/**\r\n * Dynamically injects a reducer\r\n *\r\n * @param {string} key A key of the reducer\r\n * @param {function} reducer A reducer that will be injected\r\n *\r\n */\n\n\nfunction hocWithReducer(createReducer, _a) {\n  var key = _a.key,\n      reducer = _a.reducer;\n\n  function wrap(WrappedComponent) {\n    // dont wanna give access to HOC. Child only\n    var ReducerInjector =\n    /** @class */\n    function (_super) {\n      __extends(ReducerInjector, _super);\n\n      function ReducerInjector(props, context) {\n        var _this = _super.call(this, props, context) || this;\n\n        getInjectors(createReducer, context.store).injectReducer(\"\" + key, reducer);\n        return _this;\n      }\n\n      ReducerInjector.prototype.render = function () {\n        return createElement(WrappedComponent, _assign({}, this.props));\n      };\n\n      ReducerInjector.WrappedComponent = WrappedComponent;\n      ReducerInjector.displayName = \"withReducer(\" + (WrappedComponent.displayName || WrappedComponent.name || 'Component') + \")\";\n      return ReducerInjector;\n    }(Component$2);\n\n    return hoistNonReactStatics(ReducerInjector, WrappedComponent);\n  }\n\n  return wrap;\n}\n\nvar useInjectReducer = function useInjectReducer(createReducer, _a) {\n  var key = _a.key,\n      reducer = _a.reducer;\n  var store = useStore();\n  useEffect(function () {\n    getInjectors(createReducer, store).injectReducer(\"\" + key, reducer);\n  }, []);\n};\n\nvar allowedModes = [RESTART_ON_REMOUNT, DAEMON, ONCE_TILL_UNMOUNT];\n\nvar checkKey = function checkKey(key) {\n  return invariant(isString(key) && !isEmpty(key), '(src/Utils...) injectSaga: Expected `key` to be a non empty string');\n};\n\nvar checkDescriptor = function checkDescriptor(descriptor) {\n  var shape = {\n    saga: isFunction,\n    mode: function mode(_mode) {\n      return isString(_mode) && allowedModes.includes(_mode || '');\n    }\n  };\n  invariant(conformsTo(descriptor, shape), '(src/Utils...) injectSaga: Expected a valid saga descriptor');\n};\n\nfunction injectSagaFactory(store, isValid) {\n  if (isValid === void 0) {\n    isValid = false;\n  } // tslint:disable-next-line: only-arrow-functions\n\n\n  return function injectSaga(key, descriptor, args) {\n    if (descriptor === void 0) {\n      descriptor = {};\n    }\n\n    if (!isValid) {\n      checkStore(store);\n    }\n\n    var newDescriptor = _assign(_assign({}, descriptor), {\n      mode: descriptor.mode || DAEMON\n    });\n\n    var saga = newDescriptor.saga,\n        mode = newDescriptor.mode;\n    checkKey(key);\n    checkDescriptor(newDescriptor);\n    var hasSaga = Reflect.has(store.injectedSagas, key);\n\n    if (process.env.NODE_ENV !== 'production') {\n      var oldDescriptor = store.injectedSagas[key]; // enable hot reloading of daemon and once-till-unmount sagas\n\n      if (hasSaga && oldDescriptor.saga !== saga) {\n        oldDescriptor.task.cancel();\n        hasSaga = false;\n      }\n    }\n\n    if (!hasSaga || hasSaga && mode !== DAEMON && mode !== ONCE_TILL_UNMOUNT) {\n      store.injectedSagas[key] = _assign(_assign({}, newDescriptor), {\n        task: store.runSaga(saga, args)\n      });\n    }\n  };\n}\n\nfunction ejectSagaFactory(store, isValid) {\n  if (isValid === void 0) {\n    isValid = false;\n  } // tslint:disable-next-line: only-arrow-functions\n\n\n  return function ejectSaga(key) {\n    if (!isValid) {\n      checkStore(store);\n    }\n\n    checkKey(key);\n\n    if (Reflect.has(store.injectedSagas, key)) {\n      var descriptor = store.injectedSagas[key];\n\n      if (descriptor.mode && descriptor.mode !== DAEMON) {\n        descriptor.task.cancel(); // Clean up in production; in development we need `descriptor.saga` for hot reloading\n\n        if (process.env.NODE_ENV === 'production') {\n          // Need some value to be able to detect `ONCE_TILL_UNMOUNT` sagas in `injectSaga`\n          store.injectedSagas[key] = 'done';\n        }\n      }\n    }\n  };\n}\n\nfunction getInjectors$1(store) {\n  checkStore(store);\n  return {\n    injectSaga: injectSagaFactory(store, true),\n    ejectSaga: ejectSagaFactory(store, true)\n  };\n}\n/**\r\n * Dynamically injects a saga, passes component's props as saga arguments\r\n *\r\n * @param {string} key A key of the saga\r\n * @param {function} saga A root saga that will be injected\r\n * @param {string} [mode] By default (constants.RESTART_ON_REMOUNT) the saga will be started on component mount and\r\n * cancelled with `task.cancel()` on component un-mount for improved performance. Another two options:\r\n *   - constants.DAEMON—starts the saga on component mount and never cancels it or starts again,\r\n *   - constants.ONCE_TILL_UNMOUNT—behaves like 'RESTART_ON_REMOUNT' but never runs it again.\r\n *\r\n */\n\n\nfunction hocWithSaga(_a) {\n  var key = _a.key,\n      saga = _a.saga,\n      mode = _a.mode;\n\n  function wrap(WrappedComponent) {\n    // dont wanna give access to HOC. Child only\n    var InjectSaga =\n    /** @class */\n    function (_super) {\n      __extends(InjectSaga, _super);\n\n      function InjectSaga(props, context) {\n        var _this = _super.call(this, props, context) || this;\n\n        _this.injectors = getInjectors$1(context.store);\n\n        _this.injectors.injectSaga(key, {\n          saga: saga,\n          mode: mode\n        }, _this.props);\n\n        return _this;\n      }\n\n      InjectSaga.prototype.componentWillUnmount = function () {\n        this.injectors.ejectSaga(key);\n      };\n\n      InjectSaga.prototype.render = function () {\n        return createElement(WrappedComponent, _assign({}, this.props));\n      };\n\n      InjectSaga.WrappedComponent = WrappedComponent;\n      InjectSaga.displayName = \"withSaga(\" + (WrappedComponent.displayName || WrappedComponent.name || 'Component') + \")\";\n      return InjectSaga;\n    }(Component$2);\n\n    return hoistNonReactStatics(InjectSaga, WrappedComponent);\n  }\n\n  return wrap;\n}\n\nvar useInjectSaga = function useInjectSaga(_a) {\n  var key = _a.key,\n      saga = _a.saga,\n      mode = _a.mode;\n  var store = useStore();\n  useEffect(function () {\n    var injectors = getInjectors$1(store);\n    injectors.injectSaga(\"\" + key, {\n      saga: saga,\n      mode: mode\n    });\n    return function () {\n      injectors.ejectSaga(\"\" + key);\n    };\n  }, []);\n};\n\nvar loadable = function loadable(importFunc, _a) {\n  var _b = (_a === void 0 ? {\n    fallback: null\n  } : _a).fallback,\n      fallback = _b === void 0 ? null : _b;\n  var LazyComponent = lazy(importFunc);\n\n  var Component = function Component(props) {\n    return React__default.createElement(Suspense, {\n      fallback: fallback\n    }, React__default.createElement(LazyComponent, _assign({}, props)));\n  };\n\n  return Component;\n};\n\nvar ResponseError =\n/** @class */\nfunction (_super) {\n  __extends(ResponseError, _super);\n\n  function ResponseError(response) {\n    var _this = _super.call(this, response.statusText) || this;\n\n    _this.response = response;\n    return _this;\n  }\n\n  return ResponseError;\n}(Error);\n/**\r\n * Parses the JSON returned by a network request\r\n *\r\n * @param  {object} response A response from a network request\r\n *\r\n * @return {object}          The parsed JSON from the request\r\n */\n\n\nfunction parseJSON(response) {\n  return __awaiter(this, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      if (response.status === 204 || response.status === 205) {\n        return [2\n        /*return*/\n        , null];\n      }\n\n      return [2\n      /*return*/\n      , response.json()];\n    });\n  });\n}\n/**\r\n * Checks if a network request came back fine, and throws an error if not\r\n *\r\n * @param  {object} response   A response from a network request\r\n *\r\n * @return {object|undefined} Returns either the response, or throws an error\r\n */\n\n\nfunction checkStatus(response) {\n  return __awaiter(this, void 0, void 0, function () {\n    var error;\n    return __generator(this, function (_a) {\n      if (response.status >= 200 && response.status < 300) {\n        return [2\n        /*return*/\n        , response];\n      }\n\n      error = new ResponseError(response);\n      error.response = response;\n      throw error;\n    });\n  });\n}\n/**\r\n * Requests a URL, returning a promise\r\n *\r\n * @param  {string} url       The URL we want to request\r\n * @param  {object} [options] The options we want to pass to \"fetch\"\r\n *\r\n * @return {object}           The response data\r\n */\n\n\nfunction request(url, options) {\n  return __awaiter(this, void 0, void 0, function () {\n    var fetchResponse, response;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , fetch(url, options)];\n\n        case 1:\n          fetchResponse = _a.sent();\n          return [4\n          /*yield*/\n          , checkStatus(fetchResponse)];\n\n        case 2:\n          response = _a.sent();\n          return [2\n          /*return*/\n          , parseJSON(response)];\n      }\n    });\n  });\n}\n\nvar index$f =\n/*#__PURE__*/\nObject.freeze({\n  checkStore: checkStore,\n  configureStore: configureStore,\n  constants: constants,\n  history: history,\n  hocWithReducer: hocWithReducer,\n  useInjectReducer: useInjectReducer,\n  hocWithSaga: hocWithSaga,\n  useInjectSaga: useInjectSaga,\n  loadable: loadable,\n  injectReducerFactory: injectReducerFactory,\n  getReducerInjectors: getInjectors,\n  request: request,\n  ResponseError: ResponseError,\n  injectSagaFactory: injectSagaFactory,\n  ejectSagaFactory: ejectSagaFactory,\n  getSagaInjectors: getInjectors$1\n});\nvar theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#3ab77d',\n      contrastText: '#ffffff'\n    },\n    secondary: {\n      main: '#ffffff',\n      contrastText: '#3ab77d'\n    }\n  },\n  typography: {\n    fontFamily: '\"Usual\", \"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n    button: {\n      fontFamily: 'Usual, Roboto, Helvetica, Arial, sans-serif',\n      fontWeight: 700,\n      fontSize: 13,\n      textTransform: 'none'\n    }\n  },\n  overrides: {\n    MuiButton: {\n      containedPrimary: {\n        boxShadow: '0px 3px 6px #1e207129',\n        '&:hover': {\n          backgroundColor: '#008650'\n        }\n      },\n      containedSecondary: {\n        border: '1px solid #0000001A',\n        boxShadow: '0px 1px 3px #00000033',\n        '&:hover': {\n          backgroundColor: '#3ab77d1a'\n        }\n      }\n    }\n  }\n});\n\nvar Component = function Component(props) {\n  var Component = props.Component,\n      store = props.store,\n      componentProps = props.componentProps;\n  return createElement(ThemeProvider, {\n    theme: theme\n  }, createElement(Provider$1, {\n    store: store\n  }, createElement(ConnectedRouter, {\n    history: history\n  }, createElement(HashRouter, {\n    basename: \"/\"\n  }, createElement(Component, _assign({}, componentProps))))));\n};\n\nvar index$g =\n/*#__PURE__*/\nObject.freeze({\n  Component: Component\n});\n/*\r\n *\r\n * MessageProvider constants\r\n *\r\n */\n\nvar ActionTypes;\n\n(function (ActionTypes) {\n  ActionTypes[\"CHANGE_LOCALE\"] = \"hims/MsgProvider/CHANGE_LOCALE\";\n})(ActionTypes || (ActionTypes = {}));\n\nvar ActionTypes$1 = ActionTypes;\nvar DEFAULT_LOCALE = 'en';\n/*\r\n *\r\n * MessageProvider reducer\r\n *\r\n */\n\nvar initialState = {\n  locale: DEFAULT_LOCALE\n};\n\nfunction messageProviderReducer(state, action) {\n  if (state === void 0) {\n    state = initialState;\n  }\n\n  switch (action.type) {\n    case ActionTypes$1.CHANGE_LOCALE:\n      return {\n        locale: action.payload\n      };\n\n    default:\n      return state;\n  }\n}\n/**\r\n * Direct selector to the languageToggle state domain\r\n */\n\n\nvar selectLanguage = function selectLanguage(state) {\n  return state.language || initialState;\n};\n/**\r\n * Select the language locale\r\n */\n\n\nvar makeSelectLocale = function makeSelectLocale() {\n  return createSelector(selectLanguage, function (languageState) {\n    return languageState.locale;\n  });\n};\n\nvar enTranslationMessages = require('Messages/en.json'); // prettier-ignore\n\n\nvar appLocales = ['en'];\n\nvar formatTranslationMessages = function formatTranslationMessages(locale, messages) {\n  var defaultFormattedMessages = locale !== DEFAULT_LOCALE ? formatTranslationMessages(DEFAULT_LOCALE, enTranslationMessages) : {};\n\n  var flattenFormattedMessages = function flattenFormattedMessages(formattedMessages, key) {\n    var _a;\n\n    var formattedMessage = !messages[key] && locale !== DEFAULT_LOCALE ? defaultFormattedMessages[key] : messages[key];\n    return _assign(_assign({}, formattedMessages), (_a = {}, _a[key] = formattedMessage, _a));\n  };\n\n  return Object.keys(messages).reduce(flattenFormattedMessages, {});\n};\n\nvar translationMessages = {\n  en: formatTranslationMessages('en', enTranslationMessages)\n};\n/*\r\n *\r\n * MessageProvider\r\n *\r\n * this component connects the redux state message locale to the\r\n * IntlProvider component and i18n messages (loaded from `src/Translations`)\r\n */\n\nvar stateSelector = createSelector(makeSelectLocale(), function (locale) {\n  return {\n    locale: locale\n  };\n});\n\nvar Provider = function Provider(props) {\n  var locale = useSelector(stateSelector).locale;\n  return React__default.createElement(IntlProvider, {\n    locale: locale,\n    key: locale,\n    messages: props.messages[locale]\n  }, React__default.Children.only(props.children));\n};\n\nvar index$h =\n/*#__PURE__*/\nObject.freeze({\n  Provider: Provider,\n  appLocales: appLocales,\n  formatTranslationMessages: formatTranslationMessages,\n  messageProviderReducer: messageProviderReducer\n});\nvar scope = 'boilerplate.containers.NotFoundPage';\nvar messages = defineMessages({\n  header: {\n    id: scope + \".header\",\n    defaultMessage: 'Page not found.'\n  }\n});\n/**\r\n * NotFoundPage\r\n *\r\n * This is the page shown when the user visits a url that doesn't have a route\r\n */\n\nvar Component$1 = function Component$1() {\n  return createElement(\"article\", null, createElement(\"h1\", null, createElement(FormattedMessage, _assign({}, messages.header))));\n};\n\nvar index$i =\n/*#__PURE__*/\nObject.freeze({\n  Document: index$g,\n  Message: index$h,\n  NotFoundPage: Component$1\n});\nvar index$j =\n/*#__PURE__*/\nObject.freeze({});\nexport { index$e as Components, index$i as Containers, index$j as Pages, index$f as Utils };","\n\nimport * as React from 'react';\nimport { Link } from '@material-ui/core';\nimport './component-style.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\n\ninterface IProps {\n    icon?: IconProp;\n    label?: string;\n    onClick: () => void;\n}\n\nexport class TextButton extends React.Component<IProps> {\n\n    shouldComponentUpdate(props: IProps, _state: any) {\n        return (\n            (this.props.icon !== props.icon) ||\n            (this.props.label !== props.label)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <Link className='text-button' onClick={() => this.props.onClick()}>\n                {this.props.icon ? <FontAwesomeIcon icon={this.props.icon} /> : null}\n                {this.props.icon ? <span style={{marginLeft: '10px'}}/> : null}\n                {this.props.label}\n            </Link>\n        );\n    }\n}","import * as React from 'react';\nimport { PartialMemberData } from 'Pages/CustomerCarePage/Models';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\n// import { API } from 'Pages/CustomerCarePage/API';\n\ninterface IProps {\n    members: PartialMemberData[];\n    searchText: string;\n    onSelectMember: (cardNo: string) => void;\n}\n\nexport class SearchedMembersList extends React.Component<IProps> {\n\n    // members: PartialMemberData[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        // this.members = [];\n    }\n\n    // componentDidMount() {\n    //     API.get('customer-care/members', \n    //         (response) => {\n    //             console.log(response);\n    //             this.members = response.map(member => {\n    //                 return {\n    //                     cardNo: member.member_card_no,\n    //                     firstName: member.first_name,\n    //                     middleName: member.middle_name,\n    //                     lastName: member.last_name,\n    //                     clientName: member.client.registered_name\n    //                 }\n    //             });\n    //             console.log(this.members);\n    //         },\n    //         (error) => {\n    //             console.log(error);\n    //         });\n    // }\n\n    getExtractedMembers = (filter: string) => {\n        return (filter.trim().length > 0 ? (\n            this.props.members\n                .filter(member => member.cardNo)\n                .filter(member => member.cardNo.includes(filter))\n                // .filter((_member, index) => index < 3)\n        ) : []);\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='mini-ticket-modals'>\n                {this.getExtractedMembers(this.props.searchText).map(member => {\n                    return (\n                        <>\n                        {this.renderMemberShortDetail(member)}\n                        <div className='line-border' />\n                        </>\n                    );\n                })}\n            </div>\n        );\n    }\n\n    renderMemberShortDetail(member: PartialMemberData): JSX.Element {\n        const name = \n            member.firstName + ' ' + \n            GlobalFunction.getIntials(member.middleName) + ' ' +\n            member.lastName;\n\n        return (\n            <div \n                className='small-section mini-ticket-modal'\n                onClick={() => this.props.onSelectMember(member.cardNo)}>\n                <div className='text' />\n                <div className='text'>\n                    <div className='circle' style={{backgroundColor: '#3AB77D'}} />\n                    <div style={{display: 'inline-block'}}>\n                        <div className='header-2'>{member.cardNo}</div>\n                    </div>\n\n                </div>\n                \n                <div className='text'>{name}</div>\n                <div className='text'>{member.clientName}</div>\n                <div className='text'>{'---'}</div>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\nimport { CircularProgress } from \"@material-ui/core\";\n\ninterface IProps {\n    height?: string;\n    color?: string;\n    size?: number;\n}\n\nexport class Loading extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        return (\n            <div \n                style={{\n                    textAlign: 'center', \n                    paddingTop: this.props.height ? this.props.height : undefined}}>\n                <CircularProgress \n                    size={this.props.size}\n                    style={{\n                        color: this.props.color ? this.props.color : undefined}} />\n            </div>\n            \n        );\n    }\n}","import * as React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport Link from '@material-ui/core/Link';\n\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { GlobalFunction } from './GlobalFunction';\nimport { MemberData, TicketData, PartialMemberData, SimpleTicketData } from 'Pages/CustomerCarePage/Models';\nimport { TextButton } from './Components/TextButton';\nimport { SearchedMembersList } from './CreateTicketPage/Components/SearchedMembersList';\nimport { API } from './API';\nimport { TableRow, TableCell } from '@material-ui/core';\nimport { Loading } from './Components/Loading';\nimport { Processmaker } from 'Pages/TicketList/Processmaker';\n\ninterface IProps {\n    member?: MemberData;\n    ticket?: TicketData;\n    ticketStatus: 'Create' | 'Update' | 'Resolve';\n    onUpdateMemberStateChange: (member?: MemberData) => void;\n\n    promptChooseMember?: boolean;\n}\n\ninterface IStates {\n    searchText: string;\n    isMembersLoaded: boolean;\n    recentTickets?: SimpleTicketData[];\n    loadingMembers: boolean;\n    loadingMember: boolean;\n}\n\nexport class MemberDataSection extends React.Component<IProps, IStates> {\n\n    members: PartialMemberData[];\n    \n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            searchText: '',\n            isMembersLoaded: false,\n            loadingMembers: false,\n            loadingMember: false\n        };\n\n        this.members = [];\n    }\n\n    getMemberData = (cardNo: string) => {\n        API.get('customer-care/members/' + cardNo, \n            (response) => {\n                console.log(response);\n                const member = {\n                    cardNo: response.member_card_no,\n                    firstName: response.first_name,\n                    middleName: response.middle_name,\n                    lastName: response.last_name,\n                    clientName: response.client.registered_name,\n                    birthDate: new Date(response.date_of_birth),\n                    gender: response.gender,\n                    civilStatus: response.civil_status,\n                    contractId: response.active_contract._id,\n                    isVip: response.is_vip\n                };\n                this.props.onUpdateMemberStateChange(member);\n                console.log(this.members);\n\n                /* Get member's benefits */\n                API.get('customer-care/members/' + cardNo + '/benefits',\n                    (response) => {\n                        console.log(response);\n                    },\n                    (error) => {\n                        console.log(error);\n                    });\n\n                /* Get Recent Tickets */\n                this.getRecentTicketsData(cardNo);\n                this.setState({loadingMember: false});\n                \n            },\n            (error) => {\n                console.log(error);\n            });\n    }\n\n    getRecentTicketsData = (cardNo: string) => {\n        API.get('customer-care/tickets',\n            (tickets) => {\n                const recentTickets = tickets.filter(ticket => ticket.member_id === cardNo);\n                if (recentTickets) {\n                    recentTickets.map(ticket => {\n                        Processmaker.get('cases/participated',\n                            (cases) => {\n                                const matchedCase = cases.filter(caseItem => caseItem.app_uid === ticket.pmaker_case_uid)[0];\n                                if (matchedCase && this.state.recentTickets) {\n                                    this.state.recentTickets.push({\n                                        ticketNo: \n                                            GlobalFunction.generateTicketNumber(\n                                                ticket.ticket_category.ticket_type,\n                                                ticket.ticket_category.specific_type,\n                                                matchedCase.app_number\n                                            ),\n                                        specificType: ticket.ticket_category.specific_type !== 'Not Applicable' ? (\n                                            ticket.ticket_category.specific_type\n                                        ) : (\n                                            ticket.ticket_category.ticket_type\n                                        ),\n                                        lastUpdate: new Date(ticket.date_updated)\n                                    });\n                                    this.setState({recentTickets: this.state.recentTickets});\n                                }\n                            },\n                            (error) => {\n                                console.log(error);\n                            }\n                        );\n                    });\n                }\n            },\n            (error) => {\n                console.log(error);\n            }\n        );\n    }\n\n    sliceMemberID = (text: string) => {\n        const slicedText: string[] = [];\n        slicedText.push(text.slice(0, 2));\n        slicedText.push(text.slice(2, 4));\n        slicedText.push(text.slice(4, 9));\n        slicedText.push(text.slice(9, 14));\n        slicedText.push(text.slice(14));\n        return slicedText.filter(text => text !== '');\n    }\n\n\n\n\n\n\n\n\n    render(): JSX.Element {\n        return (\n            <div className='member-info'>\n                {this.props.ticketStatus === 'Create' ? (\n                    <div>\n                        {this.renderSearchArea()}\n                        <div className='line-border' />\n                    </div>\n                ) : this.props.ticketStatus === 'Update' ||\n                    this.props.ticketStatus === 'Resolve' ? (\n                    this.renderTopArea()\n                ) : (null)}\n                {this.props.member ? (\n                    this.renderMemberInfo(this.props.member)\n                ) : (\n                    <>\n                    {this.state.loadingMember ? (\n                        <Loading height='4rem' />\n                    ) : (null)}\n                    {this.props.promptChooseMember ? (\n                        <div className='section' style={{color: '#E53935'}}>\n                            Choose a member/client first before submitting the ticket.\n                        </div> \n                    ) : (null)}\n                    </>\n                )}\n                    \n                {this.props.ticket ? (\n                    this.renderTicketData(this.props.ticket)\n                ) : (null)}\n                <div className='section' />\n            </div>\n        );\n    }\n\n\n\n    renderSearchArea(): JSX.Element {\n        return (\n            <div className='section'>\n                <Breadcrumbs className='bread-crumbs'>\n                    <Link href='#/customer-care'>TICKETS</Link>\n                    <div className='current-text'>CREATE A TICKET</div>\n                </Breadcrumbs>\n\n                <div className='header-1'>Create Ticket</div>\n\n                <div style={{position: 'relative'}}>\n                    <InputField \n                        placeholder='Search Member/Client ID'\n                        value={this.state.searchText}\n                        onChange={(value: string) => {\n                            const trimmedValue = value.replace(/-/g, '');\n                            const splitValue = this.sliceMemberID(trimmedValue);\n                            const newValue = splitValue ? splitValue.join('-') : '';\n                            this.setState({searchText: newValue});\n\n                            if (trimmedValue.length >= 13) {\n                                this.setState({loadingMembers: true});\n                                API.get(`customer-care/members?` +\n                                    `filter[where][member_card_no][like]=${newValue}&` +\n                                    `filter[where][member_status][inq]=Active&` +\n                                    `filter[where][member_status][inq]=Cancelled&` +\n                                    `filter[where][member_status][inq]=Expired&` + \n                                    `filter[where][member_status][inq]=Suspended&` + \n                                    `filter[where][member_status][inq]=Terminated`,\n                                    (response) => {\n                                        console.log(response);\n                                        this.members = response.map(member => {\n                                            return {\n                                                cardNo: member.member_card_no,\n                                                firstName: member.first_name,\n                                                middleName: member.middle_name,\n                                                lastName: member.last_name,\n                                                clientName: member.client.registered_name\n                                            }\n                                        });\n                                        this.setState({\n                                            isMembersLoaded: true,\n                                            loadingMembers: false\n                                        });\n                                    },\n                                    (error) => {\n                                        console.log(error);\n                                        this.setState({\n                                            isMembersLoaded: true,\n                                            loadingMembers: false\n                                        });\n                                    });\n                            }\n                        }} />\n\n                    {this.state.loadingMembers ? (\n                        <div style={{position: 'absolute', right: '8px', bottom: '13px'}}>\n                            <Loading height='none' size={16}/>\n                        </div>\n                    ) : null}\n                </div>\n\n                <SearchedMembersList \n                    searchText={this.state.searchText}\n                    members={this.members}\n                    onSelectMember={(cardNo: string) => {\n                        this.getMemberData(cardNo);\n                        this.props.onUpdateMemberStateChange(undefined);\n                        this.setState({\n                            searchText: '',\n                            loadingMember: true,\n                            recentTickets: []\n                        });\n                    }} />\n\n                <TextButton \n                    icon={faSearch}\n                    label='Advance Search'\n                    onClick={() => {\n\n                    }}\n                    />\n            </div>\n        );\n    }\n\n    renderTopArea(): JSX.Element {\n        return (\n            <div className='section'>\n                <Breadcrumbs className='bread-crumbs'>\n                    <Link href='#/customer-care'>TICKETS</Link>\n                    <Link className='current-text'>{this.props.ticketStatus.toUpperCase() + ' TICKET'}</Link>\n                </Breadcrumbs>\n\n                {this.props.ticket ? (\n                    <span className='header-1'>\n                        {`${this.props.ticketStatus} Ticket ${this.props.ticket.ticketNo}`}\n                    </span>\n                ) : null}\n                \n\n            </div>\n        );\n    }\n\n    renderMemberInfo(member: MemberData): JSX.Element {\n        if (!this.state.recentTickets) {\n            this.getRecentTicketsData(member.cardNo);\n        }\n\n        const name =\n            member.firstName + ' ' + \n            GlobalFunction.getIntials(member.middleName) + ' ' +\n            member.lastName + ' '\n        const birthDate = GlobalFunction.toShortDateString(new Date(member.birthDate));\n        const age = GlobalFunction.getAge(new Date(member.birthDate));\n        return (\n            <div className='section'>\n                <div className={member.isVip ? 'tag' : ''}>\n                    {member.isVip ? (\n                        <div className='tag-label'>VIP</div>\n                    ) : null}\n                    <div className='circle' style={{backgroundColor: '#3AB77D'}} />\n                    <div style={{display: 'inline-block'}}>\n                        <div className='header-2'>{member.cardNo}</div>\n                    </div>\n                    <div className='text'>{name}</div>\n                    <div className='text'>{member.clientName}</div>\n                    <div className='text'>{'---'}</div>\n                </div>\n                <Grid container>\n                    {/* <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>{\"R&B\"}</div>\n                        <div className='small-text'>{\"---\"}</div>\n                    </Grid>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>{\"R&B Limit\"}</div>\n                        <div className='small-text'>{\"---\"}</div>\n                    </Grid>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>MBL LIMIT</div>\n                        <div className='small-text'>{\"---\"}</div>\n                    </Grid>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>PEC LIMIT</div>\n                        <div className='small-text'>{\"---\"}</div>\n                    </Grid> */}\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>BIRTHDATE (AGE)</div>\n                        <div className='small-text'>{birthDate + \" (\" + age + \")\"}</div>\n                    </Grid>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>GENDER / STATUS</div>\n                        <div className='small-text'>{member.gender + \" / \" + member.civilStatus}</div>\n                    </Grid>\n                </Grid>\n                <div>\n                    {this.state.recentTickets && this.state.recentTickets.length > 0 ? (\n                        <>\n                        <div className='header-2'>OPEN/PENDING TICKETS</div>\n                        <CustomTable\n                            paginationClass='custom-pagination-small'\n                            className='custom-table-small'\n                            labelRowsPerPage='Rows:'\n                            rows={this.state.recentTickets}\n                            rowsPerPageOptions={[5, 10, 25]}\n                            renderHeader={() => this.renderTableHeader()}\n                            renderRow={(rowData: SimpleTicketData, index: number) =>\n                                this.renderTableRow(rowData, index)} />\n                        </>\n                    ) : null}\n                </div>\n            </div>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n        return (\n            <>\n            <TableCell style={{minWidth: '70px', fontSize: '10px'}}>Ticket ID</TableCell>\n            <TableCell style={{fontSize: '10px'}}>Type</TableCell>\n            <TableCell style={{minWidth: '90px', fontSize: '10px'}}>Last Update</TableCell>\n            </>\n        );\n    }\n\n    renderTableRow(recentTicket: SimpleTicketData, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n        return (\n            <TableRow style={{backgroundColor: backgroundColor, fontSize: '10px'}}>\n                <TableCell>{recentTicket.ticketNo}</TableCell>\n                <TableCell>{recentTicket.specificType}</TableCell>\n                <TableCell>{GlobalFunction.toShortDateString(recentTicket.lastUpdate)}</TableCell>\n            </TableRow>\n        );\n    }\n\n    renderTicketData(ticket: TicketData): JSX.Element {\n        return (\n            <div className='section'>\n                <div className='sub-section'>\n                    <div className='light-text'>TICKET TYPE</div>\n                    <div className='small-text'>{ticket.ticketType}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>SPECIFIC TYPE</div>\n                    <div className='small-text'>{ticket.specificType}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>URGENCY</div>\n                    <div className='small-text'>{ticket.urgency}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>ASSIGNED TO</div>\n                    <div className='small-text'>{ticket.agent.name}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>RECEIVED VIA</div>\n                    <div className='small-text'>{ticket.ticketSource}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>RECEIVED FROM</div>\n                    <div className='small-text'>{ticket.callerName}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>NUMBER/EMAIL</div>\n                    <div className='small-text'>{ticket.contactNo}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>CALL TRANSACTION NO.</div>\n                    <div className='small-text'>{ticket.transactionNo}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>CREATED BY</div>\n                    <div className='small-text'>{ticket.createdBy.name}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>DATE AND TIME CREATED</div>\n                    <div className='small-text'>{GlobalFunction.toDateAndTime(ticket.dateCreated)}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>DATE AND TIME LAST UPDATED</div>\n                    <div className='small-text'>{GlobalFunction.toDateAndTime(ticket.dateUpdated)}</div>\n                </div>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\nimport Select from 'react-select';\nimport { DropdownChoice } from '../Models';\nimport { Option } from 'react-select/src/filters';\n\ninterface IProps {\n    placeholder?: string;\n    disabled?: boolean;\n    value: DropdownChoice;\n    choices: DropdownChoice[];\n    error?: boolean;\n    onChange: (value: DropdownChoice) => void;\n}\n\ninterface IStates {\n    value: string;\n}\n\nexport class Dropdown extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            value: ''\n        }\n    }\n\n    shouldComponentUpdate(props: IProps, _state: any) {\n        return (\n            (this.props.placeholder !== props.placeholder) ||\n            (this.props.disabled !== props.disabled) ||\n            (this.props.value !== props.value) ||\n            (this.props.choices !== props.choices) ||\n            (this.props.error !== props.error)\n        );\n    }\n\n    render(): JSX.Element {\n\n        return (\n            <div className='dropdown'>\n                {this.props.placeholder ? (\n                    <div className={this.props.disabled ? 'text-disabled text' : 'text'}>\n                        {this.props.placeholder}\n                    </div>\n                ) : null}\n                \n                <Select\n                    className='actual-dropdown'\n                    classNamePrefix={this.props.error ? 'actual-dropdown-error' : 'actual-dropdown'}\n                    isDisabled={this.props.disabled ? this.props.disabled : false}\n                    value={this.props.value}\n                    options={this.props.choices} \n                    onInputChange={(value: string, _a) => {\n                        this.setState({value: value});\n                    }}\n                    noOptionsMessage={() => {\n                        return (\n                            this.props.choices.length === 0 ? (\n                                'Loading...'\n                            ) : (\n                                this.state.value.length < 3 ? (\n                                    'Enter at least 3 characters to search'\n                                ) : (\n                                    'No options'\n                                )\n                            )\n                        )\n                    }}\n                    filterOption={(option: Option, rawInput: string) => {\n                        const hasNoInput = (rawInput.length === 0);\n                        const choicesAreShort = (this.props.choices.length <= 20);\n                        const inputIsShort = (rawInput.length < 3);\n                        const isInputMatch = (option.label.toLowerCase().includes(rawInput.toLowerCase()));\n                        if (choicesAreShort) {\n                            if (hasNoInput) {\n                                return true;\n                            }\n                            return isInputMatch;\n                        } else {\n                            if (!inputIsShort) {\n                                return isInputMatch;\n                            }\n                            return false;\n                        }\n                    }}\n                    onChange={(choice: DropdownChoice) => {\n                        this.props.onChange(choice);\n                    }} />\n                    \n            </div>\n        );\n    }\n}","import * as React from 'react';\n// import { Select, MenuItem } from '@material-ui/core';\nimport Select from 'react-select';\nimport './component-style.scss';\nimport { DropdownChoice } from '../Models';\nimport { Option } from 'react-select/src/filters';\n\ninterface IProps {\n    placeholder?: string;\n    disabled?: boolean;\n    detail?: string;\n    value: DropdownChoice;\n    choices: DropdownChoice[];\n    error?: boolean;\n    onChange: (value: DropdownChoice) => void;\n}\n\ninterface IStates {\n    value: string;\n}\n\nexport class DetailedDropdown extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            value: ''\n        }\n    }\n\n    shouldComponentUpdate(props: IProps, _state: IStates) {\n        return (\n            this.props.choices.length !== props.choices.length ||\n            this.props.value.value !== props.value.value\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='detailed-dropdown'>\n                {this.props.placeholder ? (\n                    <div className='text'>{this.props.placeholder}</div>\n                ) : null}\n                \n                <div className='autocomplete'>\n                    <div className={this.props.error ? 'detail-error' : 'detail'}>\n                        {this.props.detail ? this.props.detail : this.props.value.value ? this.props.value.value : null}\n                    </div>\n                    <Select\n                        className='actual-dropdown'\n                        classNamePrefix={this.props.error ? 'actual-dropdown-error' : 'actual-dropdown'}\n                        isDisabled={this.props.disabled ? this.props.disabled : false}\n                        value={this.props.value}\n                        options={this.props.choices} \n                        onInputChange={(value: string, _a) => {\n                            this.setState({value: value});\n                        }}\n                        noOptionsMessage={() => {\n                            return (\n                                this.props.choices.length === 0 ? (\n                                    'Loading...'\n                                ) : (\n                                    this.state.value.length < 3 ? (\n                                        'Enter at least 3 characters to search'\n                                    ) : (\n                                        'No options'\n                                    )\n                                )\n                            )\n                        }}\n                        filterOption={(option: Option, rawInput: string) => {\n                            const hasNoInput = (rawInput.length === 0);\n                            const choicesAreShort = (this.props.choices.length <= 20);\n                            const inputIsShort = (rawInput.length < 3);\n                            const isInputMatch = (option.label.toLowerCase().includes(rawInput.toLowerCase()));\n                            if (choicesAreShort) {\n                                if (hasNoInput) {\n                                    return true;\n                                }\n                                return isInputMatch;\n                            } else {\n                                if (!inputIsShort) {\n                                    return isInputMatch;\n                                }\n                            }\n                            return false;                            \n                        }}\n                        onChange={(choice: DropdownChoice) => {\n                            this.props.onChange(choice);\n                        }} />\n                </div>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\n// import { GlobalFunction } from '../GlobalFunction';\n\ninterface IProps {\n    placeholder?: string;\n    value: number;\n    detail: string;\n    onChange: (value: number) => void;\n\n    isFloat?: boolean;\n}\n\ninterface IStates {\n    // isEditing: boolean;\n    value: string;\n}\n\nexport class DetailedNumberField extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            // isEditing: false\n            value: this.props.value.toString()\n        }\n    }\n\n    componentWillReceiveProps(props: IProps) {\n        let targetNewValue = props.value ? props.value.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,') : '';\n\n        if (targetNewValue.charAt(targetNewValue.length - 4) === '.') {\n            targetNewValue = props.value.toFixed(2).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\n        }\n\n        if (targetNewValue !== this.state.value) {\n            this.setState({value: \n                this.props.isFloat && this.state.value.charAt(this.state.value.length - 1) === '.' ?\n                    `${targetNewValue}.` :\n                    targetNewValue});\n        }\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='detailed-input-field'>\n                {this.props.placeholder ? (\n                    <div className='text'>{this.props.placeholder}</div>\n                ) : null}\n                <div className='input-field'>\n                    <input\n                        className='text-field'\n                        value={this.state.value}\n                        onFocus={() => {\n                            if (this.props.value == 0) {\n                                this.setState({value: ''});\n                            }\n                        }}\n                        onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                            let value = event.target.value;\n                            let numberValue = parseFloat(value.replace(/,|-/g, ''));\n                            if (!isNaN(numberValue)) {\n                                numberValue = numberValue < 1000000000 ? numberValue : this.props.value;\n                            }\n                            let stringValue = !isNaN(numberValue) ? (\n                                this.props.isFloat && value.charAt(value.length - 1) === '.' ?\n                                    `${numberValue}.` :\n                                    numberValue.toString()\n                            ) : '';\n                            const newStringValue = stringValue.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n                            this.setState({value: newStringValue}, () => {\n                                if (this.props.isFloat) {\n                                    this.props.onChange(!isNaN(numberValue) ? numberValue : 0);\n                                } else {\n                                    this.props.onChange(!isNaN(numberValue) ? numberValue : 0);\n                                }\n                            });\n                        }} />\n                    {/* {this.state.isEditing ? (\n                        <input \n                            className='text-field'\n                            type='number'\n                            value={this.props.value ? this.props.value : NaN}\n                            onBlur={() => this.setState({isEditing: !this.state.isEditing})}\n                            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                                const value = this.props.isFloat ? \n                                    (parseFloat(event.target.value)) : \n                                    (parseInt(event.target.value));\n                                this.props.onChange(value);\n                            }} />\n                    ) : (\n                        <input \n                            className='text-field'\n                            readOnly\n                            value={\n                                this.props.value && this.props.value !== 0 ? \n                                    GlobalFunction.formatNumber(this.props.value) \n                                : ''}\n                            onFocus={() => this.setState({isEditing: !this.state.isEditing})} />\n                    )} */}\n                    <div className='detail'>{this.props.detail}</div>\n                </div>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\nimport MomentUtils from '@date-io/moment';\nimport { KeyboardDatePicker, MuiPickersUtilsProvider, MaterialUiPickersDate } from '@material-ui/pickers';\n\ninterface IProps {\n    placeholder?: string;\n    value: Date | null;\n    minDate?: Date;\n    onChange: (value: Date | null) => void;\n}\n\nexport class DatePicker extends React.Component<IProps> {\n\n    shouldComponentUpdate(props: IProps, _state: any) {\n        return (\n            (this.props.placeholder !== props.placeholder) ||\n            (this.props.value !== props.value)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='date-picker'>\n                {this.props.placeholder ? (\n                    <div className='text'>{this.props.placeholder}</div>\n                ) : null}\n                <MuiPickersUtilsProvider utils={MomentUtils}>\n                    <KeyboardDatePicker\n                        className='text-field'\n                        variant='dialog'\n                        format='MM/DD/YYYY'\n                        minDate={this.props.minDate ? this.props.minDate : new Date(1900, 1, 1)}\n                        value={this.props.value}\n                        onChange={(date: MaterialUiPickersDate | null) => {\n                            this.props.onChange(date ? date.toDate() : null);\n                        }} />\n                </MuiPickersUtilsProvider>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { DetailedDropdown } from 'Pages/CustomerCarePage/Components/DetailedDropdown';\nimport { DetailedNumberField } from 'Pages/CustomerCarePage/Components/DetailedNumberField';\nimport { DatePicker } from 'Pages/CustomerCarePage/Components/DatePicker';\nimport { DropdownChoice, ConfinementDetails } from 'Pages/CustomerCarePage/Models';\n\n\ninterface IProps {\n    confinement: ConfinementDetails;\n    facilities: DropdownChoice[];\n    doctors: DropdownChoice[];\n    cptCodes: DropdownChoice[];\n    createTicketAttemp: boolean;\n    refreshConfinementState: () => void;\n}\n\nexport class ConfinementSection extends React.Component<IProps> {\n\n    confinementTypes: DropdownChoice[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.confinementTypes = [\n            { value: '1', label: 'Elective / Scheduled' },\n            { value: '2', label: 'ER leading to confinement' }\n        ];\n    }\n\n    render(): JSX.Element {\n        const confinement = this.props.confinement;\n        return (\n            <div className='confinement-details'>\n                <div className='sub-section'>\n                    <div className='header-2'>CONFINEMENT DETAILS</div>\n                    <DetailedDropdown \n                        choices={this.props.facilities}\n                        placeholder='Provider'\n                        value={confinement.provider}\n                        error={\n                            this.props.createTicketAttemp && \n                            confinement.provider.value === ''}\n                        onChange={(value: DropdownChoice) => {\n                            this.props.confinement.provider = value;\n                            this.props.refreshConfinementState();\n                        }} />\n                    <Grid container spacing={1}>\n                        <Grid item xs={6}>\n                            <DatePicker \n                                placeholder='Date Admitted' \n                                value={confinement.dateAdmitted}\n                                onChange={(value: Date) => {\n                                    this.props.confinement.dateAdmitted = value;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Dropdown \n                                placeholder='Kind of Confinement' \n                                choices={this.confinementTypes}\n                                value={{ value: '', label: confinement.confinementKind}}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    confinement.confinementKind === ''}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.confinement.confinementKind = value.label;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={3}>\n                            <InputField \n                                placeholder='Room Type' \n                                value={confinement.roomType}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    confinement.roomType === ''}\n                                onChange={(value: string) => {\n                                    this.props.confinement.roomType = value;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={3}>\n                            <DetailedNumberField \n                                placeholder='Cost Per Day' \n                                value={confinement.costPerDay}\n                                detail={'PHP'}\n                                isFloat={true}\n                                onChange={(value: number) => {\n                                    this.props.confinement.costPerDay = value;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Dropdown  \n                                placeholder='Admitting Physician' \n                                choices={this.props.doctors}\n                                value={confinement.doctor}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    confinement.doctor.value === ''}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.confinement.doctor = value;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <DetailedDropdown \n                                placeholder='Initial Diagnosis' \n                                choices={this.props.cptCodes}\n                                value={confinement.initialDiagnosis}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    confinement.initialDiagnosis.value === ''}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.confinement.initialDiagnosis = value;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={3}>\n                            <DetailedNumberField \n                                placeholder='Amount' \n                                value={confinement.amount}\n                                detail={'PHP'}\n                                isFloat={true}\n                                onChange={(value: number) => {\n                                    this.props.confinement.amount = value;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </Grid>\n                    </Grid>\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\n// import { GlobalFunction } from '../GlobalFunction';\n\ninterface IProps {\n    value: number;\n    onChange: (value: number) => void;\n\n    placeholder?: string;\n    error?: boolean;\n    isFloat?: boolean;\n}\n\ninterface IStates {\n    // isEditing: boolean;\n    value: string;\n}\n\nexport class NumberField extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            // isEditing: false,\n            value: this.props.value.toString()\n        }\n    }\n\n    componentWillReceiveProps(props: IProps) {\n        let targetNewValue = props.value ? props.value.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,') : '';\n\n        if (targetNewValue.charAt(targetNewValue.length - 4) === '.') {\n            targetNewValue = props.value.toFixed(2).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\n        }\n\n        if (targetNewValue !== this.state.value) {\n            this.setState({value: \n                this.props.isFloat && this.state.value.charAt(this.state.value.length - 1) === '.' ?\n                    `${targetNewValue}.` :\n                    targetNewValue});\n        }\n    }\n\n    render(): JSX.Element {\n        console.log(this.props.value);\n        const props = this.props;\n        const dynamicStyle = {\n            borderColor: (props.error ? '#E53935' : undefined)\n        };\n\n        return (\n            <div className='input-field-container'>\n                {this.props.placeholder ? (\n                    <div className='text'>{this.props.placeholder}</div>\n                ) : null}\n                <input\n                    className='text-field'\n                    style={dynamicStyle}\n                    value={this.state.value} \n                    onFocus={() => {\n                        if (this.props.value == 0) {\n                            this.setState({value: ''});\n                        }\n                    }}\n                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                        let value = event.target.value;\n                        let numberValue = parseFloat(value.replace(/,|-/g, ''));\n                        if (!isNaN(numberValue)) {\n                            numberValue = numberValue < 1000000000 ? numberValue : this.props.value;\n                        }\n                        let stringValue = !isNaN(numberValue) ? (\n                            this.props.isFloat && value.charAt(value.length - 1) === '.' ?\n                                `${numberValue}.` :\n                                numberValue.toString()\n                        ) : '';\n                        const newStringValue = stringValue.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n                        this.setState({value: newStringValue}, () => {\n                            if (this.props.isFloat) {\n                                this.props.onChange(!isNaN(numberValue) ? numberValue : 0);\n                            } else {\n                                this.props.onChange(!isNaN(numberValue) ? numberValue : 0);\n                            }\n                        });\n                    }} />\n                {/* {this.state.isEditing ? (\n                    <input \n                        className='text-field'\n                        style={dynamicStyle}\n                        type='number'\n                        value={this.props.value ? this.props.value : NaN}\n                        onBlur={() => this.setState({isEditing: !this.state.isEditing})}\n                        onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                            const value = this.props.isFloat ? \n                                (parseFloat(event.target.value)) : \n                                (parseInt(event.target.value));\n                            this.props.onChange(value);\n                        }} />\n                ) : (\n                    <input \n                        className='text-field'\n                        style={dynamicStyle}\n                        readOnly \n                        value={\n                            this.props.value && this.props.value !== 0 ? \n                                GlobalFunction.formatNumber(this.props.value) \n                            : ''}\n                        onFocus={() => this.setState({isEditing: !this.state.isEditing})} />\n                )} */}\n                \n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\nimport { Checkbox } from '@material-ui/core';\n\ninterface IProps {\n    placeholder?: string;\n    label?: string;\n    value: boolean;\n    onChange: (value: boolean) => void;\n}\n\nexport class CustomCheckbox extends React.Component<IProps> {\n\n    shouldComponentUpdate(props: IProps, _state: any) {\n        return (\n            (this.props.placeholder !== props.placeholder) ||\n            (this.props.value !== props.value)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='check-box-area'>\n                {this.props.placeholder ? (\n                    <div className='text'>{this.props.placeholder}</div>\n                ) : null}\n                <Checkbox\n                    className='check-box'\n                    checked={this.props.value}\n                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                        this.props.onChange(event.target.checked);\n                    }} />\n                {this.props.label ? (\n                    <span className='text'>{this.props.label}</span>\n                ) : null}\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport {  Grid, TableCell, TableRow } from '@material-ui/core';\nimport { faMinusCircle, faPlus, faPen, faCheckCircle, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport { DetailedDropdown } from 'Pages/CustomerCarePage/Components/DetailedDropdown';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { ProcedureData, DropdownChoice, AvailmentDetails, DiagnosisData } from 'Pages/CustomerCarePage/Models';\nimport { NumberField } from 'Pages/CustomerCarePage/Components/NumberField';\nimport { CustomCheckbox } from 'Pages/CustomerCarePage/Components/CustomCheckbox';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\n\ninterface IProps {\n    availment: AvailmentDetails;\n    facilities: DropdownChoice[];\n    doctors: DropdownChoice[];\n    icd10Codes: DropdownChoice[];\n    cptCodes: DropdownChoice[];\n    createTicketAttemp: boolean;\n    refreshAvailmentState: () => void;\n}\n\ninterface IStates {\n    icd10Code: DropdownChoice;\n    doctor: DropdownChoice;\n\n    itemToEditIndex: number;\n    icd10CodeToEdit: DropdownChoice;\n    doctorToEdit: DropdownChoice;\n}\n\nexport class AvailmentSection extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            icd10Code: { value: '', label: '' },\n            doctor: { value: '', label: '' },\n\n            itemToEditIndex: -1,\n            icd10CodeToEdit: { value: '', label: '' },\n            doctorToEdit: { value: '', label: '' }\n        };\n    }\n\n    getFilteredICD10(): DropdownChoice[] {\n        let filteredICD10: DropdownChoice[] = [];\n        for (var i = 0; i < this.props.icd10Codes.length; i++) {\n            let isSame = false;\n            for (var j = 0; j < this.props.availment.diagnoses.length; j++) {\n                isSame = (\n                    this.props.availment.diagnoses[j].icd10Code.value === \n                    this.props.icd10Codes[i].value ? true : isSame);\n            }\n            if (!isSame) {\n                filteredICD10 = filteredICD10.concat(this.props.icd10Codes[i]);\n            }\n        }\n        return filteredICD10;\n    }\n\n    getProcedureCosts(procedures: ProcedureData[]) {\n        let totalCost = 0;\n        procedures.map(procedure => {\n            totalCost += procedure.amount;\n        });\n        return totalCost;\n    }\n    \n    pushBlankDiagnosis(icd10Code: DropdownChoice, doctor: DropdownChoice) {\n        this.props.availment.diagnoses.push({\n            icd10Code: icd10Code,\n            remarks: '',\n            isPrimary: false,\n            isFinal: false,\n            doctors: [{\n                id: '',\n                name: doctor.label,\n                specialization: '',\n                type: 'Admitting',\n                fee: 0,\n                noOfVisits: 0,\n                remarks: ''\n            }],\n            procedures: [{\n                cptCode: { value: '', label: '' },\n                isPHIC: false,\n                amount: 0,\n                notes: '',\n                assessmentType: 'Pending',\n                assessmentRemarks: '',\n                doctor: '',\n                dateAdded: new Date()\n            }],\n            assessmentType: 'Pending',\n            assessmentRemarks: ''\n        });\n    }\n\n    pushBlankProcedures(diagnosisIndex: number) {\n        this.props.availment.diagnoses[diagnosisIndex].procedures.push({\n            cptCode: { value: '', label: '' },\n            isPHIC: false,\n            amount: 0,\n            notes: '',\n            assessmentType: 'Pending',\n            assessmentRemarks: '',\n            doctor: '',\n            dateAdded: new Date()\n        });\n    }\n\n    render(): JSX.Element {\n        console.log(\"UPDATING\");\n        return (\n            <div className='availment-section'>\n                <div className='sub-section'>\n                    <div className='header-2'>AVAILMENT DETAILS</div>\n                    <DetailedDropdown \n                        choices={this.props.facilities}\n                        placeholder='Provider'\n                        value={this.props.availment.provider}\n                        error={\n                            this.props.createTicketAttemp && \n                            this.props.availment.provider.value === ''}\n                        onChange={(value: DropdownChoice) => {\n                            this.props.availment.provider = value;\n                            this.props.refreshAvailmentState();\n                        }} />\n                </div>\n                <div className='sub-section'>\n                    <div className='header-3'>LIST OF AVAILMENTS</div>\n                    <div className='text'>\n                        Add a diagnosis first then add procedures per diagnosis after\n                    </div>\n                    <div className='sub-section'>\n                        <CustomTable\n                            rows={this.props.availment.diagnoses}\n                            renderHeader={() => this.renderTableHeader()}\n                            renderRow={(rowData: any, index: number) => \n                                this.renderTableRow(rowData, index)} />\n                    </div>\n                    {this.props.createTicketAttemp && this.props.availment.diagnoses.length === 0 ? (\n                        <div className='sub-section' style={{color: '#E53935'}}>\n                            No diagnosis. Need atleast one diagnosis.\n                        </div> \n                    ) : (null)}\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n        return (\n            <>\n            <TableCell style={{minWidth: '300px', maxWidth: '300px'}}>\n                <DetailedDropdown \n                    choices={this.getFilteredICD10()}\n                    value={this.state.icd10Code}\n                    onChange={(value: DropdownChoice) => {\n                        this.setState({icd10Code: value});\n                    }} />\n            </TableCell>\n            <TableCell style={{minWidth: '150px', maxWidth: '150px'}}>\n                <Dropdown \n                    choices={this.props.doctors}\n                    value={this.state.doctor}\n                    onChange={(value: DropdownChoice) => {\n                        this.setState({doctor: value});\n                    }} />\n            </TableCell>\n            <TableCell style={{textAlign: 'center'}}>\n                <TextButton \n                    icon={faPlus} \n                    label=\"Add diagnosis\"\n                    onClick={() => {\n                        if (this.state.doctor.value !== '' && this.state.icd10Code.value !== '') {\n                            this.pushBlankDiagnosis(this.state.icd10Code, this.state.doctor);\n                            this.props.refreshAvailmentState();\n                            this.setState({\n                                icd10Code: { value: '', label: '' },\n                                doctor: { value: '', label: '' }\n                            });\n                        }\n                    }} />\n            </TableCell>\n            </>\n        );\n    }\n\n    renderTableRow(diagnosis: DiagnosisData, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n        const editIcon = { display: 'inline-block', paddingRight: '0.5rem' };\n        const deleteIcon = { display: 'inline-block' };\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                <TableCell colSpan={3}>\n                    <Grid container spacing={1}>\n                        {this.state.itemToEditIndex === index ? (\n                            <>\n                            <Grid item xs={6}>\n                                <DetailedDropdown \n                                    choices={this.getFilteredICD10()}\n                                    value={this.state.icd10CodeToEdit}\n                                    onChange={(value: DropdownChoice) => {\n                                        this.setState({icd10CodeToEdit: value});\n                                    }} />\n                            </Grid>\n                            <Grid item xs={5}>\n                                <Dropdown \n                                    choices={this.props.doctors}\n                                    value={this.state.doctorToEdit}\n                                    onChange={(value: DropdownChoice) => {\n                                        this.setState({doctorToEdit: value});\n                                    }} />\n                            </Grid>\n                            <Grid item xs={1} style={{lineHeight: '2rem'}}>\n                                <div style={editIcon}>\n                                    <IconButton\n                                        icon={faCheckCircle}\n                                        onClick={() => {\n                                            this.props.availment.diagnoses[index].icd10Code = this.state.icd10CodeToEdit;\n                                            this.props.availment.diagnoses[index].doctors[0].name = this.state.doctorToEdit.label;\n                                            this.props.refreshAvailmentState();\n                                            this.setState({itemToEditIndex: -1});\n                                        }}/>\n                                </div>\n                                <div style={deleteIcon}>\n                                    <IconButton\n                                        icon={faTimesCircle}\n                                        onClick={() => {\n                                            this.setState({itemToEditIndex: -1});\n                                        }}/>\n                                </div>\n                            </Grid>\n                            </>\n                        ) : (\n                            <>\n                            <Grid item xs={6} className='header-2'>\n                                {diagnosis.icd10Code.value + ' - ' + diagnosis.icd10Code.label}\n                            </Grid>\n                            <Grid item xs={3} className='header-2'>\n                                {diagnosis.doctors[0].name}\n                            </Grid>\n                            <Grid item xs={2} className='header-2'>\n                                {GlobalFunction.formatNumber(this.getProcedureCosts(diagnosis.procedures), true) + \" PHP\"}\n                            </Grid>\n                            <Grid item xs={1}>\n                                {/* <div style={editIcon}> */}\n                                    <IconButton\n                                        icon={faPen}\n                                        onClick={() => {\n                                            this.setState({\n                                                itemToEditIndex: index,\n                                                icd10CodeToEdit: diagnosis.icd10Code,\n                                                doctorToEdit: {\n                                                    value: diagnosis.doctors[0].id,\n                                                    label: diagnosis.doctors[0].name\n                                                }\n                                            });\n                                        }}/>\n                                {/* </div>\n                                <div style={deleteIcon}> */}\n                                    <IconButton\n                                        icon={faMinusCircle}\n                                        onClick={() => {\n                                            this.props.availment.diagnoses.splice(index, 1);\n                                            this.props.refreshAvailmentState();\n                                        }}/>\n                                {/* </div> */}\n                            </Grid>\n                            </>\n                        )}\n                    </Grid>\n                    {diagnosis.procedures.map((procedure, procedureIndex) => {\n                        return this.renderProcedureDetails(procedure, index, procedureIndex);\n                    })}\n                </TableCell>\n            </TableRow>\n        );\n    }\n    \n    renderProcedureDetails(procedure: ProcedureData, diagnosisIndex: number, index: number): JSX.Element {\n        const stateProcedure = this.props.availment.diagnoses[diagnosisIndex].procedures[index];\n        const stateProcedures = this.props.availment.diagnoses[diagnosisIndex].procedures;\n        return (\n            <div style={{position: 'relative'}}>\n                <div style={{paddingTop: '0.5rem'}} />\n                <div className='line-border' />\n                <div style={{paddingTop: '0.5rem'}} />\n                <Grid container spacing={2}>\n                    <Grid item xs={8}>\n                        <DetailedDropdown \n                            placeholder='Procedure'\n                            choices={this.props.cptCodes}\n                            value={procedure.cptCode}\n                            onChange={(value: DropdownChoice) => {\n                                stateProcedure.cptCode = value;\n                                if (index === (stateProcedures.length - 1)) {\n                                    this.pushBlankProcedures(diagnosisIndex);\n                                }\n                                this.props.refreshAvailmentState();\n                            }} />\n                    </Grid>\n                    <Grid item xs={3}>\n                        <NumberField\n                            placeholder='Amount'\n                            value={procedure.amount}\n                            onChange={(value: number) => {\n                                stateProcedure.amount = value;\n                                this.props.refreshAvailmentState();\n                            }} />\n                    </Grid>\n                    <Grid item xs={1}>\n                        <CustomCheckbox\n                            placeholder='PHIC'\n                            value={procedure.isPHIC}\n                            onChange={(value: boolean) => {\n                                stateProcedure.isPHIC = value;\n                                this.props.refreshAvailmentState();\n                            }} />\n                    </Grid>\n                </Grid>\n                <div style={{position: 'absolute'}}>\n                    <TextButton \n                        label='Add procedure'\n                        icon={faPlus}\n                        onClick={() => {\n                            this.pushBlankProcedures(diagnosisIndex);\n                            this.props.refreshAvailmentState();\n                        }}/>\n                </div>\n                <div style={{paddingTop: '1rem'}} />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport Dropzone from 'react-dropzone';\nimport './component-style.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFileUpload } from '@fortawesome/free-solid-svg-icons';\n\ninterface IProps {\n    placeholder?: string;\n    onDrop: (files: File[]) => void;\n}\n\nexport class CustomDropzone extends React.Component<IProps> {\n\n    shouldComponentUpdate(props: IProps, _state: any) {\n        return (this.props.placeholder !== props.placeholder);\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='custom-uploader'>\n                {this.props.placeholder ? (\n                    <div className='text'>{this.props.placeholder}</div>\n                ) : (null)}\n                <div className='upload-box'>\n                    <Dropzone\n                        multiple={false}\n                        onDrop={acceptedFiles => this.props.onDrop(acceptedFiles)}\n                        // accept=\"application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n                        >\n                        {({getRootProps, getInputProps}) => (\n                            <section>\n                                <div className='upload-file' {...getRootProps()}>\n                                    <input {...getInputProps()} />\n                                    <FontAwesomeIcon className='fa-1.5x' icon={faFileUpload} />\n                                    <div>Drag or drop file to upload a <br />supporting document</div>\n                                </div>\n                            </section>\n                        )}\n                    </Dropzone>\n                </div>\n                \n\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { TextareaAutosize } from '@material-ui/core';\nimport './component-style.scss';\n\ninterface IProps {\n    placeholder?: string;\n    value: string;\n    defaultRows?: number;\n    onChange: (value: string) => void;\n}\n\nexport class InputArea extends React.Component<IProps> {\n\n    shouldComponentUpdate(props: IProps, _state: any) {\n        return (\n            (this.props.placeholder !== props.placeholder) ||\n            (this.props.value !== props.value) ||\n            (this.props.defaultRows !== props.defaultRows)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='input-field-container'>\n                {this.props.placeholder ? (\n                    <div className='text'>{this.props.placeholder}</div>\n                ) : null}\n                <TextareaAutosize \n                    className='text-field'\n                    rows={this.props.defaultRows ? this.props.defaultRows : 4}\n                    value={this.props.value}\n                    onChange={(event: React.ChangeEvent<HTMLTextAreaElement>) => {\n                        this.props.onChange(event.target.value);\n                    }}\n                />\n            </div>\n        );\n    }\n}","\nimport * as React from 'react';\nimport './component-style.scss';\nimport { Chip } from '@material-ui/core';\n\ninterface IProps {\n    label: string;\n    value: string;\n    onDelete: (value: string) => void;\n}\n\nexport class CustomChip extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        return (\n            <Chip \n                className='chip'\n                label={this.props.label} \n                onDelete={() => {this.props.onDelete(this.props.value)}} />\n        );\n    }\n}","import * as React from 'react';\nimport {  Grid } from '@material-ui/core';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { TicketData, DropdownChoice } from 'Pages/CustomerCarePage/Models';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { CustomDropzone } from 'Pages/CustomerCarePage/Components/CustomDropzone';\nimport { InputArea } from 'Pages/CustomerCarePage/Components/InputArea';\nimport { CustomChip } from 'Pages/CustomerCarePage/Components/CustomChip';\n\ninterface IProps {\n    ticket: TicketData;\n    facilities: DropdownChoice[];\n    agents: DropdownChoice[];\n    createTicketAttemp: boolean;\n    refreshTicketState: () => void;\n}\nexport class TicketInfoSection extends React.Component<IProps> {\n\n    ticketChannels: DropdownChoice[];\n    ticketSources: DropdownChoice[];\n    ticketTypes: DropdownChoice[];\n    specificTypes: DropdownChoice[];\n    urgencies: DropdownChoice[];\n    agents: DropdownChoice[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.ticketChannels = [\n            { value: '1', label: 'Call' },\n            { value: '2', label: 'SMS' },\n            { value: '3', label: 'Text' },\n            { value: '4', label: 'Email' },\n            { value: '5', label: 'Walk-in' }\n        ];\n\n        this.ticketSources = [\n            { value: '1', label: 'Member' },\n            { value: '2', label: 'Corporate Client' },\n            { value: '3', label: 'Broker' },\n            { value: '4', label: 'Agent' },\n            { value: '5', label: 'Clinic/Hospital' }\n        ];\n\n        this.ticketTypes = [\n            { value: '1', label: 'Availment' },\n            { value: '2', label: 'Inquiry' }\n        ];\n\n        this.specificTypes = [\n            { value: '1', label: 'Outpatient Procedure' },\n            { value: '2', label: 'Inpatient' },\n            { value: '3', label: 'Emergency Room' },\n            { value: '4', label: 'Consultation' }\n        ];\n\n        this.urgencies = [\n            { value: '1', label: 'Low' },\n            { value: '2', label: 'Medium' },\n            { value: '3', label: 'High' }\n        ];\n\n        this.agents = [\n            { value: '', label: 'Me' }\n        ]\n    }\n\n    componentDidMount() {\n        this.agents[0].value = localStorage['user_id'];\n    }\n\n    render(): JSX.Element {\n        console.log(\"TICK INFO\");\n        const ticket = this.props.ticket;\n\n        return (\n            <div className='ticket-info'>\n                <div className='sub-section'>\n                    <div className='header-2'>TICKET INFORMATION</div>\n                    <Grid container spacing={1}>\n                        <Grid item xs={5}>\n                            <Dropdown \n                                placeholder='Received via'\n                                choices={this.ticketChannels}\n                                value={{ value: '', label: ticket.ticketChannel }}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    ticket.ticketChannel === ''}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.ticket.ticketChannel = value.label;\n                                    this.props.refreshTicketState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={7}>\n                            <InputField \n                                placeholder='Transaction No.' \n                                value={ticket.transactionNo}\n                                disabled={true}\n                                onChange={(value: string) => {\n                                    this.props.ticket.transactionNo = value;\n                                    this.props.refreshTicketState();\n                                }} />\n                        </Grid>\n                    </Grid>\n                    <Dropdown \n                        placeholder='Received From'\n                        choices={this.ticketSources}\n                        value={{ value: '', label: ticket.ticketSource}}\n                        error={\n                            this.props.createTicketAttemp && \n                            ticket.ticketSource === ''}\n                        onChange={(value: DropdownChoice) => {\n                            this.props.ticket.ticketSource = value.label;\n                            this.props.refreshTicketState();\n                        }} />\n                    <div>\n                        {ticket.ticketSource === 'Member' ? (\n                            <div>\n                                <InputField \n                                    placeholder='Member Name'\n                                    value={ticket.memberName}\n                                    error={\n                                        this.props.createTicketAttemp && \n                                        ticket.memberName === ''}\n                                    onChange={(value: string) => {\n                                        this.props.ticket.memberName = value;\n                                        this.props.refreshTicketState();\n                                    }} />\n                            </div>\n\n                        ) : ticket.ticketSource === 'Corporate Client' ? (\n                            <div>\n                                <InputField \n                                    placeholder='Corporate Client Name'\n                                    value={ticket.clientName}\n                                    error={\n                                        this.props.createTicketAttemp && \n                                        ticket.clientName === ''}\n                                    onChange={(value: string) => {\n                                        this.props.ticket.clientName = value;\n                                        this.props.refreshTicketState();\n                                    }} />\n                            </div>\n                        \n                        ) : ticket.ticketSource === 'Broker' ? (\n                            <div>\n                                <InputField \n                                    placeholder='Broker Name'\n                                    value={ticket.brokerName}\n                                    error={\n                                        this.props.createTicketAttemp && \n                                        ticket.brokerName.trim() === ''}    \n                                    onChange={(value: string) => {\n                                        this.props.ticket.brokerName = value;\n                                        this.props.refreshTicketState();\n                                    }} />\n                            </div>\n\n                        ) : ticket.ticketSource === 'Clinic/Hospital' ? (\n                            <div>\n                                <Dropdown \n                                    placeholder='Name of Hospital'\n                                    choices={this.props.facilities}\n                                    value={ticket.facility}\n                                    error={\n                                        this.props.createTicketAttemp && \n                                        ticket.facility.value === ''}\n                                    onChange={(value: DropdownChoice) => {\n                                        this.props.ticket.facility = value;\n                                        this.props.refreshTicketState();\n                                    }} />\n                                <InputField \n                                    placeholder='Department/Section' \n                                    value={ticket.department}\n                                    error={\n                                        this.props.createTicketAttemp && \n                                        ticket.department.trim() === ''}\n                                    onChange={(value: string) => {\n                                        this.props.ticket.department = value;\n                                        this.props.refreshTicketState();\n                                    }} />\n                            </div>\n                        ) : null}\n                    </div>\n                    <InputField \n                        placeholder='Name of Caller' \n                        value={ticket.callerName}\n                        error={\n                            this.props.createTicketAttemp && \n                            ticket.callerName.trim() === ''}\n                        onChange={(value: string) => {\n                            this.props.ticket.callerName = value;\n                            this.props.refreshTicketState();\n                        }} />\n                    <InputField \n                        placeholder='Contact No.' \n                        value={ticket.contactNo}\n                        error={\n                            this.props.createTicketAttemp && \n                            ticket.contactNo.trim() === ''}\n                        onChange={(value: string) => {\n                            this.props.ticket.contactNo = value;\n                            this.props.refreshTicketState();\n                        }} />\n                </div>\n                \n                <div className='sub-section'>\n                    <div className='header-2'>TICKET CATEGORY</div>\n                    <Grid container spacing={1}>\n                        <Grid item xs={5}>\n                            <Dropdown \n                                placeholder='Ticket Type'\n                                choices={this.ticketTypes}\n                                value={{ value: '', label: ticket.ticketType}}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    ticket.ticketType === ''}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.ticket.ticketType = value.label;\n                                    if (value.label === 'Inquiry') {\n                                        this.props.ticket.specificType = 'Not Applicable';\n                                    }\n                                    this.props.refreshTicketState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={7}>\n                            <Dropdown \n                                placeholder='Specific Type'\n                                disabled={ticket.ticketType !== 'Availment'}\n                                choices={this.specificTypes}\n                                value={{ value: '', label: ticket.specificType}}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    ticket.specificType === '' && \n                                    ticket.ticketType !== 'Inquiry'}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.ticket.specificType = value.label;\n                                    this.props.refreshTicketState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={5}>\n                            <Dropdown \n                                placeholder='Urgency'\n                                choices={this.urgencies}\n                                value={{ value: '', label: ticket.urgency}}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    ticket.urgency === ''}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.ticket.urgency = value.label;\n                                    this.props.refreshTicketState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={7}>\n                            <Dropdown \n                                placeholder='Assign To'\n                                choices={this.agents} /* Use this.props.agents later */\n                                value={{ value: ticket.agent.id, label: ticket.agent.name}}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    ticket.agent.id === ''}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.ticket.agent = {\n                                        id: value.value,\n                                        name: value.label\n                                    };\n                                    this.props.refreshTicketState();\n                                }} />\n                        </Grid>\n                    </Grid>\n                </div>\n\n                <div className='sub-section'>\n                    <div className='header-2'>ADDITIONAL NOTES AND FILES</div>\n                    <InputArea\n                        placeholder='Additional Notes'\n                        value={ticket.additionalNotes}\n                        onChange={(value: string) => {\n                            this.props.ticket.additionalNotes = value;\n                            this.props.refreshTicketState();\n                        }} />\n                    <CustomDropzone\n                        onDrop={(files: File[]) => {\n                            ticket.additionalFiles.push(files[0]);\n                            this.props.refreshTicketState();\n                        }} />\n                        {ticket.additionalFiles.map((file, index) => {\n                            return (\n                                <CustomChip\n                                    label={file.name}\n                                    value={index.toString()}\n                                    onDelete={(value: string) => {\n                                        ticket.additionalFiles.splice(parseInt(value), 1);\n                                        this.props.refreshTicketState();\n                                    }} />\n                            );\n                        })}\n                        \n                    {/* </Grid> */}\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\nimport ChipInput from 'material-ui-chip-input';\n\ninterface IProps {\n    placeholder: string;\n    value: string[];\n    onAdd: (value: string) => void;\n    onDelete: (index: number) => void;\n}\n\nexport class InputChip extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        \n        return (\n            <div className='input-field-container'>\n                <div className='text'>{this.props.placeholder}</div>\n                <ChipInput \n                    className='text-field'\n                    value={this.props.value} \n                    fullWidthInput={false}\n                    onAdd={(chip: any) => this.props.onAdd(chip)}\n                    onDelete={(_chip: any, index: number) => this.props.onDelete(index)} />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport {  Grid, TableCell, TableRow } from '@material-ui/core';\nimport { faMinusCircle, faPlus, faPen } from '@fortawesome/free-solid-svg-icons';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { DropdownChoice, InquiryData } from 'Pages/CustomerCarePage/Models';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { CustomDropzone } from 'Pages/CustomerCarePage/Components/CustomDropzone';\nimport { CustomChip } from 'Pages/CustomerCarePage/Components/CustomChip';\nimport { InputChip } from 'Pages/CustomerCarePage/Components/InputChip';\n// import { ComplexTable } from 'Pages/CustomerCarePage/Components/ComplexTable';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\n\ninterface IProps {\n    inquiries: InquiryData[];\n    refreshInquiryState: () => void;\n}\n\ninterface IStates {\n    inquiry: DropdownChoice;\n}\n\nexport class InquirySection extends React.PureComponent<IProps, IStates> {\n\n    inquiries: DropdownChoice[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            inquiry: { value: '', label: '' }\n        };\n\n        this.inquiries = [\n            { value: '1', label: 'Member Status / Card Inquiry' },\n            { value: '2', label: 'Member Network Access Inquiry' },\n            { value: '3', label: 'Member Benefit Inquiry - General [Outpatient]' },\n            { value: '4', label: 'Member Benefit Inquiry - General [Inpatient]' },\n            { value: '5', label: 'Member Benefit Inquiry - General [Emergency]' },\n            { value: '6', label: 'Member Benefit Inquiry - General [Dental]' },\n            { value: '7', label: 'Member Benefit Inquiry - General [APE / ECU]' },\n            { value: '8', label: 'Member Benefit Inquiry - General [Riders]' },\n            { value: '9', label: 'Member Coverage Inquiry - Specific Benefit' },\n            { value: '10', label: 'Member Availment Inquiry - CanAvail' },\n            { value: '11', label: 'Member Eligibility Inquiry' },\n            { value: '12', label: 'Reimbursement Status Inquiry' },\n            { value: '13', label: 'General Affiliated Network Inquiry - Facility' },\n            { value: '14', label: 'General Affiliated Network Inquiry - Doctor' },\n            { value: '15', label: 'General Affiliated Network Inquiry - Dentist' },\n            { value: '16', label: 'Procedural Inquiry - Outpatient' },\n            { value: '17', label: 'Procedural Inquiry - Inpatient' },\n            { value: '18', label: 'Procedural Inquiry - Emergency' },\n            { value: '19', label: 'Procedural Inquiry - Dental' },\n            { value: '20', label: 'Procedural Inquiry - APE / ECU' },\n            { value: '21', label: 'Procedural Inquiry - Member Enrolment / Cancellation / Update' },\n            { value: '22', label: 'Procedural Inquiry - Reimbursement' },\n            { value: '23', label: 'Procedural Inquiry - Others' }\n        ];\n    }\n\n    onAddInquiry() {\n        if (this.state.inquiry.value !== '') {\n            this.props.inquiries.push({\n                inquiry: this.state.inquiry,\n                detail: '',\n                specificDetail: [],\n                answer: '',\n                remarks: '',\n                relatedTickets: [],\n                supportDocs: []\n            });\n            \n            this.props.refreshInquiryState();\n            this.setState({inquiry: { value: '', label: '' }});\n        }\n    }\n\n    getFilteredInquiries(): DropdownChoice[] {\n        let filteredInquiries: DropdownChoice[] = [];\n        for (var i = 0; i < this.inquiries.length; i++) {\n            let isSame = false;\n            for (var j = 0; j < this.props.inquiries.length; j++) {\n                isSame = (\n                    this.props.inquiries[j].inquiry.value === \n                    this.inquiries[i].value ? true : isSame);\n            }\n            if (!isSame) {\n                filteredInquiries = filteredInquiries.concat(this.inquiries[i]);\n            }\n        }\n        return filteredInquiries;\n    }\n    \n    onRemoveInquiry(index: number) {\n        this.props.inquiries.splice(index, 1);\n        this.props.refreshInquiryState();\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='availment-section'>\n                <div className='sub-section'>\n                    <div className='header-2'>INQUIRY</div>\n                    <div className='text'>\n                        Add an inquiry type and then add the question and its details after\n                    </div>\n                    <div className='sub-section'>\n                        <CustomTable \n                            rows={this.props.inquiries}\n                            renderHeader={() => this.renderTableHeader()}\n                            renderRow={(rowData: any, index: number) => \n                                this.renderTableRow(rowData, index)} />\n                    </div>\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n        return (\n            <>\n            <TableCell style={{minWidth: '400px', maxWidth: '400px'}}>\n                <Dropdown \n                    choices={this.getFilteredInquiries()}\n                    value={this.state.inquiry}\n                    onChange={(value: DropdownChoice) => {\n                        this.setState({inquiry: value});\n                    }} />\n            </TableCell>\n            <TableCell style={{minWidth: '125px', maxWidth: '125px', textAlign: 'center'}}>\n                <TextButton \n                    icon={faPlus} \n                    label=\"Add inquiry\"\n                    onClick={() => {\n                        this.onAddInquiry();\n                    }} />\n            </TableCell>\n            </>\n        );\n    }\n\n    renderTableRow(inquiry: InquiryData, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                <TableCell colSpan={2}>\n                    <Grid container spacing={1}>\n                        <Grid item xs={10} className='header-2'>\n                            {inquiry.inquiry.label}\n                        </Grid>\n                        <Grid item xs={2} style={{textAlign: 'right'}}>\n                            <IconButton\n                                icon={faPen}\n                                onClick={() => {\n                                    this.onRemoveInquiry(index);\n                                }}/>\n                            <IconButton\n                                icon={faMinusCircle}\n                                onClick={() => {\n                                    this.onRemoveInquiry(index);\n                                }}/>\n                        </Grid>\n                    </Grid>\n                    <div style={{position: 'relative'}}>\n                        <div style={{paddingTop: '0.5rem'}} />\n                        <div className='line-border' />\n                        <div style={{paddingTop: '0.5rem'}} />\n                        <Grid container>\n                            <Grid item xs={1}/>\n                            <Grid item xs={11}>\n                                <div style={{margin: '8px 8px 1.5rem 8px'}}>\n                                    <InputField \n                                        placeholder='Details of inquiry (Question)'\n                                        value={inquiry.detail}\n                                        onChange={(value: string) => {\n                                            inquiry.detail = value;\n                                            this.props.refreshInquiryState();\n                                        }} />\n                                        <InputChip \n                                            placeholder='Specific Details (Type benefit/doctor/facility to describe inquiry, press enter to add)'\n                                            value={inquiry.specificDetail}\n                                            onAdd={(value: string) => {\n                                                inquiry.specificDetail.push(value);\n                                                this.props.refreshInquiryState();\n                                            }}\n                                            onDelete={(index: number) => {\n                                                inquiry.specificDetail.splice(index, 1);\n                                                this.props.refreshInquiryState();\n                                            }} />\n                                    <InputField \n                                        placeholder='Answer'\n                                        value={inquiry.answer}\n                                        onChange={(value: string) => {\n                                            inquiry.answer = value;\n                                            this.props.refreshInquiryState();\n                                        }} />\n                                    <InputField \n                                        placeholder='Remarks (Optional)'\n                                        value={inquiry.remarks}\n                                        onChange={(value: string) => {\n                                            inquiry.remarks = value;\n                                            this.props.refreshInquiryState();\n                                        }} />\n                                    <InputChip \n                                            placeholder='Related Tickets (Optional, press enter to add)'\n                                            value={inquiry.relatedTickets}\n                                            onAdd={(value: string) => {\n                                                inquiry.relatedTickets.push(value);\n                                                this.props.refreshInquiryState();\n                                            }}\n                                            onDelete={(index: number) => {\n                                                inquiry.relatedTickets.splice(index, 1);\n                                                this.props.refreshInquiryState();\n                                            }} />\n                                    <Grid container spacing={2}>\n                                        <Grid item xs={7}>\n                                            <CustomDropzone \n                                                // placeholder='Drag or drop file to upload supporting documents'\n                                                onDrop={(files: File[]) => {\n                                                    inquiry.supportDocs.push(files[0]);\n                                                    this.props.refreshInquiryState();\n                                                }}/>\n                                        </Grid>\n                                        <Grid item xs={5}>\n                                            {inquiry.supportDocs.map((doc, index) => {\n                                                return (\n                                                    <CustomChip\n                                                        label={doc.name}\n                                                        value={index.toString()}\n                                                        onDelete={(value: string) => {\n                                                            inquiry.supportDocs.splice(parseInt(value), 1);\n                                                            this.props.refreshInquiryState();\n                                                        }} />\n                                                );\n                                            })}\n                                        </Grid>\n                                    </Grid>\n                                </div>\n                                \n                            </Grid>\n                        </Grid>\n                    </div>\n                </TableCell>\n            </TableRow>\n        );\n    }\n}","import { TicketData, ConfinementDetails, InquiryData, AvailmentDetails, LOAData, ConsultationDetails, MemberData } from \"./Models\";\nimport { ConfinementDetails as UpdateInpatientDetails } from \"./UpdateTicketPage/UpdateTicketPage\";\nimport { ConfinementDetails as ResolveInpatientDetails } from \"./ResolveTicketPage/ResolveTicketPage\";\n\n\nexport class Payloads {\n\n    static getPostTicketPayload(ticket: TicketData,\n                                member?: MemberData,\n                                confinement?: ConfinementDetails, \n                                availment?: AvailmentDetails, \n                                inquiries?: InquiryData[],\n                                consultation?: ConsultationDetails): any  {\n        return {\n            transaction_no: ticket.transactionNo,\n            received_via: ticket.ticketChannel,\n            received_from: ticket.ticketSource,\n\n            member_name: (ticket.ticketSource === 'Member' ? ticket.memberName : undefined),\n            corporate_client: (ticket.ticketSource === 'Corporate Client' ? ticket.clientName : undefined),\n            broker: (ticket.ticketSource === 'Broker' ? ticket.brokerName : undefined),\n            hospital_name: (ticket.ticketSource === 'Clinic/Hospital' ? (ticket.facility.value + ' - ' + ticket.facility.label) : undefined),\n            department: (ticket.ticketSource === 'Clinic/Hospital' ? ticket.department : undefined),\n\n            caller_name: ticket.callerName,\n            contact_no: ticket.contactNo,\n            additional_notes: ticket.additionalNotes,\n            supporting_documents: [],\n\n            ticket_category: {\n                ticket_type: ticket.ticketType,\n                specific_type: ticket.specificType,\n                urgency: ticket.urgency,\n                assign_to: `${ticket.agent.id} - ${ticket.agent.name}`,\n\n                availment_details: (\n                    availment &&\n                    ticket.ticketType === 'Availment' &&\n                    ticket.specificType === 'Outpatient Procedure' ? {\n                    provider: availment.provider.value + ' - ' + availment.provider.label,\n                    availments_list: availment.diagnoses.map(availment => {\n                        return {\n                            code: availment.icd10Code.value,\n                            name: availment.icd10Code.label,\n                            remarks: '',\n                            is_primary: false,\n                            is_final: false,\n                            \n                            doctors: [\n                                {\n                                    id: '',\n                                    name: availment.doctors[0].name,\n                                    specialization: (availment.doctors[0].specialization ? availment.doctors[0].specialization : null),\n                                    fee: 0,\n                                    no_of_visits: '',\n                                    remarks: ''\n                                }\n                            ],\n\n                            procedures: availment.procedures\n                                .filter(procedure => {\n                                    return procedure.cptCode.value;\n                                })\n                                .map(procedure => {\n                                    return {\n                                        code: procedure.cptCode.value,\n                                        name: procedure.cptCode.label,\n                                        amount: procedure.amount.toString(),\n                                        doctor: '',\n                                        phic: procedure.isPHIC,\n                                        notes: '',\n                                        date_added: new Date(),\n                                        assessment_type: procedure.assessmentType,\n                                        assessment_remarks: procedure.assessmentRemarks\n                                    }\n                                }),\n                            \n                                assessment_type: availment.assessmentType,\n                                assessment_remarks: availment.assessmentRemarks\n                        }\n                    })\n                } : undefined),\n\n                confinement_details: (\n                    confinement &&\n                    ticket.ticketType === 'Availment' &&\n                    ticket.specificType === 'Inpatient' ? {\n                    provider: confinement.provider.value + ' - ' + confinement.provider.label,\n                    date_admitted: confinement.dateAdmitted,\n                    confinement_kind: confinement.confinementKind,\n                    gift_given: false,\n                    updates: [],\n                    room_accommodation: [{\n                        room_type: confinement.roomType,\n                        no_of_days: '1',\n                        cost: confinement.costPerDay\n                    }],\n                    diagnoses: [\n                        {\n                            code: confinement.initialDiagnosis.value,\n                            name: confinement.initialDiagnosis.label,\n                            remarks: '',\n                            is_primary: false,\n                            is_final: false,\n                            \n                            doctors: [\n                                {\n                                    id: '',\n                                    name: confinement.doctor.label,\n                                    specialization: (confinement.doctor.params ? confinement.doctor.params[0] : null),\n                                    fee: confinement.amount,\n                                    no_of_visits: '0',\n                                    remarks: '',\n                                    type: 'Admitting'\n                                }\n                            ],\n\n                            procedures: []\n                        }\n                    ],\n                    others: [],\n                    coverage: 'Filed',\n                    final_bill: 0,\n                    philhealth_amount: 0,\n                    discharge_date: null\n                } : undefined),\n\n                consultation_details: (\n                    consultation &&\n                    ticket.specificType === 'Consultation' ? {\n                    provider: `${consultation.provider.value} - ${consultation.provider.label}`,\n                    diagnosis: `${consultation.diagnosis.value} - ${consultation.diagnosis.label}`,\n                    doctor: `${consultation.doctor.value} - ${consultation.doctor.label}`,\n                    notes: consultation.notes,\n                    assessment_type: consultation.assessmentType,\n                    assessment_remarks: consultation.assessmentRemarks\n                } : undefined),\n\n                inquiry_details: (\n                    inquiries &&\n                    ticket.ticketType === 'Inquiry' ? {\n                    inquiry_list: inquiries.map(inquiry => {\n                        return {\n                            inquiry: inquiry.inquiry.label,\n                            value: inquiry.detail,\n                            specific_detail: inquiry.specificDetail,\n                            answer: inquiry.answer,\n                            remarks: inquiry.remarks, \n                            related_tickets: inquiry.relatedTickets, \n                            support_docs: []\n                        }\n                    })\n                } : undefined)\n            },\n            pmaker_case_uid: '',\n            status: 'Open',\n            date_created: new Date(),\n            date_updated: new Date(),\n            date_escalated: null,\n            created_by: {\n                _id: ticket.createdBy.id,\n                name: ticket.createdBy.name\n            },\n            member_id: (member ? member.cardNo : undefined),\n            client_id: '',\n            \n            loa: []\n        };\n    }\n\n\n\n\n\n\n\n\n\n\n    static getPutTicketPayload(ticket: TicketData, \n                               member?: MemberData,\n                               confinement?: UpdateInpatientDetails,\n                               inquiries?: InquiryData[]): any {\n        return {\n            transaction_no: ticket.transactionNo,\n            received_via: ticket.ticketChannel,\n            received_from: ticket.ticketSource,\n\n            member_name: ticket.memberName,\n            corporate_client: ticket.clientName,\n            broker: ticket.brokerName,\n            hospital_name: ticket.facility.label,\n            department: ticket.department,\n\n            caller_name: ticket.callerName,\n            contact_no: ticket.contactNo,\n            additional_notes: ticket.additionalNotes,\n            supporting_documents: (confinement ? [\n                ...confinement.files.map(file => {\n                    return {\n                        name: file.docName,\n                        type: 'null',\n                        url: 'null',\n                        file: file.file\n                    }\n                })\n             ] : []),\n\n            ticket_category: {\n                ticket_type: ticket.ticketType,\n                specific_type: ticket.specificType,\n                urgency: ticket.urgency,\n                assign_to: `${ticket.agent.id} - ${ticket.agent.name}`,\n\n                confinement_details: (confinement ? {\n                    provider: `${confinement.provider.value} - ${confinement.provider.label}`,\n                    date_admitted: confinement.dateAdmitted,\n                    confinement_kind: confinement.confinementKind,\n                    gift_given: confinement.giftGiven,\n                    updates: confinement.updates.map(update => {\n                        return {\n                            remarks: update.remarks,\n                            date: update.date,\n                            hospital_bill: update.hospitalBill.toString()\n                        }\n                    }),\n                    room_accommodation: confinement.accommodations.map(accommodation => {\n                        return {\n                            room_type: accommodation.roomType,\n                            no_of_days: accommodation.days.toString(),\n                            cost: accommodation.costPerDay\n                        }\n                    }),\n                    diagnoses: confinement.diagnoses.map((diagnosis, index) => {\n                        return {\n                            code: diagnosis.diagnosis.value,\n                            name: diagnosis.diagnosis.label,\n                            remarks: diagnosis.remarks,\n                            is_primary: (confinement.primaryDiagnosisIndex === index),\n                            is_final: diagnosis.isFinal,\n                            doctors: confinement.physicians\n                                .filter(physician => physician.diagnosis.value === diagnosis.diagnosis.value)\n                                .map(physician => {\n                                    return {\n                                        id: '',\n                                        name: physician.physician.label,\n                                        specialization: physician.physician.params ? physician.physician.params[0] : '',\n                                        fee: physician.amount,\n                                        no_of_visits: physician.visits.toString(),\n                                        remarks: physician.remarks,\n                                        type: physician.physician.params ? physician.physician.params[1] : ''\n                                    }\n                                }),\n                            procedures: confinement.procedures\n                                .filter(procedure => procedure.diagnosis.value === diagnosis.diagnosis.value)\n                                .map(procedure => {\n                                    return {\n                                        code: procedure.procedure.value + '', // Convert to string\n                                        name: procedure.procedure.label,\n                                        amount: procedure.amount.toString(),\n                                        doctor: procedure.physician.label,\n                                        phic: false,\n                                        notes: procedure.remarks,\n                                        date_added: procedure.date,\n                                        assessment_type: 'Pending',\n                                        assessment_remarks: ''\n                                    }\n                                }),\n                            assessment_type: 'Pending',\n                            assessment_remarks: ''\n                        }\n                    }),\n                    others: confinement.items.map(item => {\n                        return {\n                            amount: item.amount,\n                            name: item.name,\n                            type: item.type.label\n                        }\n                    }),\n                    coverage: confinement.coverage.label,\n                    ticket_no: confinement.ticketNo,\n                    paid_by: confinement.paidBy,\n                    philhealth_amount: confinement.philhealthAmount,\n                    final_bill: confinement.finalBill,\n                    discharge_date: confinement.dischargeDate\n                } : undefined),\n\n                inquiry_details: (inquiries ? {\n                    inquiry_list: inquiries.map(inquiry => {\n                        return {\n                            inquiry: inquiry.inquiry.label,\n                            value: inquiry.detail,\n                            specific_detail: inquiry.specificDetail,\n                            answer: inquiry.answer,\n                            remarks: inquiry.remarks, \n                            related_tickets: inquiry.relatedTickets, \n                            support_docs: []\n                        }\n                    })\n                } : undefined)\n            },\n            pmaker_case_uid: ticket.pmCaseId,\n            status: ticket.status,\n            date_created: ticket.dateCreated,\n            date_updated: ticket.dateUpdated,\n            date_escalated: null,\n            created_by: {\n                _id: ticket.createdBy.id,\n                name: ticket.createdBy.name\n            },\n            member_id: (member ? member.cardNo : undefined),\n            client_id: '',\n\n            loa: []\n        };\n    }\n\n\n\n\n\n\n\n\n\n\n    static getPutResolveTicketPayload(ticket: TicketData, \n                                      memberCardNo: string,\n                                      loas: LOAData[],\n                                      availment?: AvailmentDetails,\n                                      confinement?: ResolveInpatientDetails,\n                                      consultation?: ConsultationDetails): any {\n        return {\n            transaction_no: ticket.transactionNo,\n            received_via: ticket.ticketChannel,\n            received_from: ticket.ticketSource,\n\n            member_name: ticket.memberName,\n            corporate_client: ticket.clientName,\n            broker: ticket.brokerName,\n            hospital_name: ticket.facility.label,\n            department: ticket.department,\n\n            caller_name: ticket.callerName,\n            contact_no: ticket.contactNo,\n            additional_notes: ticket.additionalNotes,\n            supporting_documents: [],\n\n            ticket_category: {\n                ticket_type: ticket.ticketType,\n                specific_type: ticket.specificType,\n                urgency: ticket.urgency,\n                assign_to: `${ticket.agent.id} - ${ticket.agent.name}`,\n\n                availment_details: (availment ? {\n                    provider: availment.provider.value + ' - ' + availment.provider.label,\n                    availments_list: availment.diagnoses.map(availment => {\n                        return {\n                            code: availment.icd10Code.value,\n                            name: availment.icd10Code.label,\n                            remarks: '',\n                            is_primary: false,\n                            is_final: false,\n                            \n                            doctors: [\n                                {\n                                    id: '',\n                                    name: availment.doctors[0].name,\n                                    specialization: '',\n                                    fee: 0,\n                                    no_of_visits: '',\n                                    remarks: ''\n                                }\n                            ],\n\n                            procedures: availment.procedures\n                                .filter(procedure => {\n                                    return procedure.cptCode.value;\n                                })\n                                .map(procedure => {\n                                    return {\n                                        code: procedure.cptCode.value,\n                                        name: procedure.cptCode.label,\n                                        amount: procedure.amount.toString(),\n                                        doctor: '',\n                                        phic: procedure.isPHIC,\n                                        notes: '',\n                                        date_added: new Date(),\n                                        assessment_type: procedure.assessmentType,\n                                        assessment_remarks: procedure.assessmentRemarks\n                                    }\n                                })\n                        }\n                    })\n                } : undefined),\n\n                confinement_details: (confinement ? {\n                    provider: confinement.provider.value + ' - ' + confinement.provider.label,\n                    date_admitted: confinement.dateAdmitted,\n                    confinement_kind: confinement.confinementKind,\n                    gift_given: confinement.giftGiven,\n                    updates: confinement.updates,\n                    room_accommodation: confinement.accommodations.map(accommodation => {\n                        return {\n                            room_type: accommodation.roomType,\n                            no_of_days: accommodation.days.toString(),\n                            cost: accommodation.costPerDay\n                        }\n                    }),\n                    diagnoses: confinement.diagnoses.map(diagnosis => {\n                        return {\n                            code: diagnosis.icd10Code.value,\n                            name: diagnosis.icd10Code.label,\n                            remarks: diagnosis.remarks,\n                            is_primary: diagnosis.isPrimary,\n                            is_final: diagnosis.isFinal,\n                            doctors: diagnosis.doctors.map(doctor => {\n                                return {\n                                    id: doctor.id,\n                                    name: doctor.name,\n                                    specialization: doctor.specialization,\n                                    fee: doctor.fee,\n                                    no_of_visits: doctor.noOfVisits.toString(),\n                                    remarks: doctor.remarks,\n                                    type: doctor.type\n                                }\n                            }),\n                            procedures: diagnosis.procedures.map(procedure => {\n                                return {\n                                    code: procedure.cptCode.value + '', // Convert to string\n                                    name: procedure.cptCode.label,\n                                    amount: procedure.amount.toString(),\n                                    doctor: procedure.doctor,\n                                    phic: procedure.isPHIC,\n                                    notes: procedure.notes,\n                                    date_added: procedure.dateAdded,\n                                    assessment_type: procedure.assessmentType,\n                                    assessment_remarks: procedure.assessmentRemarks\n                                }\n                            }),\n                            assessment_type: diagnosis.assessmentType,\n                            assessment_remarks: diagnosis.assessmentRemarks\n                        }\n                    }),\n                    others: confinement.others,\n                    coverage: confinement.coverage.label,\n                    philhealth_amount: confinement.philhealthAmount,\n                    final_bill: confinement.finalBill,\n                    discharge_date: confinement.dischargeDate\n                } : undefined),\n\n                consultation_details: (consultation ? {\n                    provider: `${consultation.provider.value} - ${consultation.provider.label}`,\n                    diagnosis: `${consultation.diagnosis.value} - ${consultation.diagnosis.label}`,\n                    doctor: `${consultation.doctor.value} - ${consultation.doctor.label}`,\n                    notes: consultation.notes,\n                    assessment_type: consultation.assessmentType,\n                    assessment_remarks: consultation.assessmentRemarks\n                } : undefined)\n            },\n            pmaker_case_uid: ticket.pmCaseId,\n            status: 'Resolved',\n            date_created: ticket.dateCreated,\n            date_updated: ticket.dateUpdated,\n            date_escalated: null,\n            created_by: {\n                _id: ticket.createdBy.id,\n                name: ticket.createdBy.name\n            },\n            member_id: memberCardNo,\n            client_id: '',\n\n            loa: loas.map(loa => {\n                return {\n                    loa_no: loa.loaNo,\n                    amount: loa.amount,\n                    date: loa.date,\n                    notes: loa.notes\n                }\n            })\n        };\n    }\n}","import * as React from 'react';\nimport { ConsultationDetails, DropdownChoice } from 'Pages/CustomerCarePage/Models';\nimport { DetailedDropdown } from 'Pages/CustomerCarePage/Components/DetailedDropdown';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\n\ninterface IProps {\n    consultation: ConsultationDetails;\n    facilities: DropdownChoice[];\n    doctors: DropdownChoice[];\n    icd10Codes: DropdownChoice[];\n    createTicketAttemp: boolean;\n    refreshConsultationState: () => void;\n}\n\nexport class ConsultationSection extends React.Component<IProps> {\n\n    constructor(props: IProps) {\n        super(props);\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='availment-section'>\n\n                <div className='sub-section'>\n                    <div className='header-2'>AVAILMENT DETAILS</div>\n                    <DetailedDropdown \n                        choices={this.props.facilities}\n                        placeholder='Provider'\n                        value={this.props.consultation.provider}\n                        error={\n                            this.props.createTicketAttemp && \n                            this.props.consultation.provider.value === ''}\n                        onChange={(value: DropdownChoice) => {\n                            this.props.consultation.provider = value;\n                            this.props.refreshConsultationState();\n                        }} />\n\n                    <DetailedDropdown \n                        choices={this.props.icd10Codes}\n                        placeholder='Diagnosis'\n                        value={this.props.consultation.diagnosis}\n                        error={\n                            this.props.createTicketAttemp && \n                            this.props.consultation.diagnosis.value === ''}\n                        onChange={(value: DropdownChoice) => {\n                            this.props.consultation.diagnosis = value;\n                            this.props.refreshConsultationState();\n                        }} />\n                    <Dropdown \n                        choices={this.props.doctors}\n                        placeholder='Doctor'\n                        value={this.props.consultation.doctor}\n                        error={\n                            this.props.createTicketAttemp && \n                            this.props.consultation.doctor.value === ''}\n                        onChange={(value: DropdownChoice) => {\n                            this.props.consultation.doctor = value;\n                            this.props.refreshConsultationState();\n                        }} />\n                    <InputField\n                        placeholder='Notes'\n                        value={this.props.consultation.notes}\n                        onChange={(value: string) => {\n                            this.props.consultation.notes = value;\n                            this.props.refreshConsultationState();\n                        }} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","let backendUrl = process.env.REACT_APP_PMAKER_BASE_URL;\n\nexport class Processmaker {\n\n    // //local\n    // static localUrl = 'http://18.140.39.215/api/1.0/workflow';//'localhost:32766/api/1.0/workflow';\n\n    // //stg\n    // static stgUrl = 'http://18.140.39.215/api/1.0/workflow';\n\n    static async get(url: string, success: Function, fail: Function) {\n        // const backendUrl = (process.env.NODE_ENV === 'development' ? this.localUrl : this.stgUrl);\n        fetch(backendUrl + url, {\n            method: 'GET',\n            headers: { \n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + localStorage.getItem('pm_token')\n            },\n        })\n        .then(response => response.json())\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n\n    static async post(url:string, body: any, success: Function, fail: Function) {\n        // const backendUrl = (process.env.NODE_ENV === 'development' ? this.localUrl : this.stgUrl);\n        fetch(backendUrl + url, {\n            method: 'POST',\n            headers: { \n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + localStorage.getItem('pm_token')\n            },\n            body: JSON.stringify(body)\n        })\n        .then(response => response.json())\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n\n    static async put(url: string, body: any, success: Function, fail: Function) {\n        // const backendUrl = (process.env.NODE_ENV === 'development' ? this.localUrl : this.stgUrl);\n        fetch(backendUrl + url, {\n            method: 'PUT',\n            headers: { \n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + localStorage.getItem('pm_token')\n            },\n            body: JSON.stringify(body)\n        })\n        .then(response => response)\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n}","import * as React from 'react';\nimport {  Grid, TableCell, TableRow } from '@material-ui/core';\nimport { faMinusCircle, faPlus, faPen, faCheckCircle, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport { DetailedDropdown } from 'Pages/CustomerCarePage/Components/DetailedDropdown';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { ProcedureData, DropdownChoice, AvailmentDetails, DiagnosisData } from 'Pages/CustomerCarePage/Models';\nimport { NumberField } from 'Pages/CustomerCarePage/Components/NumberField';\nimport { CustomCheckbox } from 'Pages/CustomerCarePage/Components/CustomCheckbox';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\n\ninterface IProps {\n    availment: AvailmentDetails;\n    facilities: DropdownChoice[];\n    doctors: DropdownChoice[];\n    icd10Codes: DropdownChoice[];\n    cptCodes: DropdownChoice[];\n    createTicketAttemp: boolean;\n    refreshAvailmentState: () => void;\n}\n\ninterface IStates {\n    icd10Code: DropdownChoice;\n    doctor: DropdownChoice;\n    chiefComplaint: string;\n    history: string;\n\n    itemToEditIndex: number;\n    icd10CodeToEdit: DropdownChoice;\n    doctorToEdit: DropdownChoice;\n}\n\nexport class EmergencyRoomSection extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            icd10Code: { value: '', label: '' },\n            doctor: { value: '', label: '' },\n            chiefComplaint: '',\n            history: '',\n\n            itemToEditIndex: -1,\n            icd10CodeToEdit: { value: '', label: '' },\n            doctorToEdit: { value: '', label: '' }\n        };\n    }\n\n    getFilteredICD10(): DropdownChoice[] {\n        let filteredICD10: DropdownChoice[] = [];\n        for (var i = 0; i < this.props.icd10Codes.length; i++) {\n            let isSame = false;\n            for (var j = 0; j < this.props.availment.diagnoses.length; j++) {\n                isSame = (\n                    this.props.availment.diagnoses[j].icd10Code.value === \n                    this.props.icd10Codes[i].value ? true : isSame);\n            }\n            if (!isSame) {\n                filteredICD10 = filteredICD10.concat(this.props.icd10Codes[i]);\n            }\n        }\n        return filteredICD10;\n    }\n\n    getProcedureCosts(procedures: ProcedureData[]) {\n        let totalCost = 0;\n        procedures.map(procedure => {\n            totalCost += procedure.amount;\n        });\n        return totalCost;\n    }\n    \n    pushBlankDiagnosis(icd10Code: DropdownChoice, doctor: DropdownChoice) {\n        this.props.availment.diagnoses.push({\n            icd10Code: icd10Code,\n            remarks: '',\n            isPrimary: false,\n            isFinal: false,\n            doctors: [{\n                id: '',\n                name: doctor.label,\n                specialization: '',\n                fee: 0,\n                noOfVisits: 0,\n                remarks: '',\n                type: 'Admitting'\n            }],\n            procedures: [{\n                cptCode: { value: '', label: '' },\n                isPHIC: false,\n                amount: 0,\n                notes: '',\n                assessmentType: 'Pending',\n                assessmentRemarks: '',\n                doctor: '',\n                dateAdded: new Date()\n            }],\n            assessmentType: 'Pending',\n            assessmentRemarks: ''\n        });\n    }\n\n    pushBlankProcedures(diagnosisIndex: number) {\n        this.props.availment.diagnoses[diagnosisIndex].procedures.push({\n            cptCode: { value: '', label: '' },\n            isPHIC: false,\n            amount: 0,\n            notes: '',\n            assessmentType: 'Pending',\n            assessmentRemarks: '',\n            doctor: '',\n            dateAdded: new Date()\n        });\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='availment-section'>\n                <div className='sub-section'>\n                    <div className='header-2'>AVAILMENT DETAILS</div>\n                    <DetailedDropdown \n                        choices={this.props.facilities}\n                        placeholder='Provider'\n                        value={this.props.availment.provider}\n                        error={\n                            this.props.createTicketAttemp && \n                            this.props.availment.provider.value === ''}\n                        onChange={(value: DropdownChoice) => {\n                            this.props.availment.provider = value;\n                            this.props.refreshAvailmentState();\n                        }} />\n                    <InputField\n                        placeholder='Chief Complaint'\n                        value={this.state.chiefComplaint}\n                        onChange={(value: string) => {\n                            this.setState({chiefComplaint: value});\n                        }} />\n                    <InputField\n                        placeholder='History'\n                        value={this.state.history}\n                        onChange={(value: string) => {\n                            this.setState({history: value});\n                        }} />\n                </div>\n                <div className='sub-section'>\n                    <div className='header-3'>LIST OF AVAILMENTS</div>\n                    <div className='text'>\n                        Add a diagnosis first then add procedures per diagnosis after\n                    </div>\n                    <div className='sub-section'>\n                        <CustomTable\n                            rows={this.props.availment.diagnoses}\n                            renderHeader={() => this.renderTableHeader()}\n                            renderRow={(rowData: any, index: number) => \n                                this.renderTableRow(rowData, index)} />\n                    </div>\n                    {this.props.createTicketAttemp && this.props.availment.diagnoses.length === 0 ? (\n                        <div className='sub-section' style={{color: '#E53935'}}>\n                            No diagnosis. Need atleast one diagnosis.\n                        </div> \n                    ) : (null)}\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n        return (\n            <>\n            <TableCell style={{minWidth: '300px', maxWidth: '300px'}}>\n                <DetailedDropdown \n                    choices={this.getFilteredICD10()}\n                    value={this.state.icd10Code}\n                    onChange={(value: DropdownChoice) => {\n                        this.setState({icd10Code: value});\n                    }} />\n            </TableCell>\n            <TableCell style={{minWidth: '150px', maxWidth: '150px'}}>\n                <Dropdown \n                    choices={this.props.doctors}\n                    value={this.state.doctor}\n                    onChange={(value: DropdownChoice) => {\n                        this.setState({doctor: value});\n                    }} />\n            </TableCell>\n            <TableCell style={{textAlign: 'center'}}>\n                <TextButton \n                    icon={faPlus} \n                    label=\"Add diagnosis\"\n                    onClick={() => {\n                        if (this.state.doctor.value !== '' && this.state.icd10Code.value !== '') {\n                            this.pushBlankDiagnosis(this.state.icd10Code, this.state.doctor);\n                            this.props.refreshAvailmentState();\n                            this.setState({\n                                icd10Code: { value: '', label: '' },\n                                doctor: { value: '', label: '' }\n                            });\n                        }\n                    }} />\n            </TableCell>\n            </>\n        );\n    }\n\n    renderTableRow(diagnosis: DiagnosisData, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n        const editIcon = { display: 'inline-block', paddingRight: '0.5rem' };\n        const deleteIcon = { display: 'inline-block' };\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                <TableCell colSpan={3}>\n                    <Grid container spacing={1}>\n                        {this.state.itemToEditIndex === index ? (\n                            <>\n                            <Grid item xs={6}>\n                                <DetailedDropdown \n                                    choices={this.getFilteredICD10()}\n                                    value={this.state.icd10CodeToEdit}\n                                    onChange={(value: DropdownChoice) => {\n                                        this.setState({icd10CodeToEdit: value});\n                                    }} />\n                            </Grid>\n                            <Grid item xs={5}>\n                                <Dropdown \n                                    choices={this.props.doctors}\n                                    value={this.state.doctorToEdit}\n                                    onChange={(value: DropdownChoice) => {\n                                        this.setState({doctorToEdit: value});\n                                    }} />\n                            </Grid>\n                            <Grid item xs={1} style={{lineHeight: '2rem'}}>\n                                <div style={editIcon}>\n                                    <IconButton\n                                        icon={faCheckCircle}\n                                        onClick={() => {\n                                            this.props.availment.diagnoses[index].icd10Code = this.state.icd10CodeToEdit;\n                                            this.props.availment.diagnoses[index].doctors[0].name = this.state.doctorToEdit.label;\n                                            this.props.refreshAvailmentState();\n                                            this.setState({itemToEditIndex: -1});\n                                        }}/>\n                                </div>\n                                <div style={deleteIcon}>\n                                    <IconButton\n                                        icon={faTimesCircle}\n                                        onClick={() => {\n                                            this.setState({itemToEditIndex: -1});\n                                        }}/>\n                                </div>\n                            </Grid>\n                            </>\n                        ) : (\n                            <>\n                            <Grid item xs={6} className='header-2'>\n                                {diagnosis.icd10Code.value + ' - ' + diagnosis.icd10Code.label}\n                            </Grid>\n                            <Grid item xs={3} className='header-2'>\n                                {diagnosis.doctors[0].name}\n                            </Grid>\n                            <Grid item xs={2} className='header-2'>\n                                {GlobalFunction.formatNumber(this.getProcedureCosts(diagnosis.procedures), true) + \" PHP\"}\n                            </Grid>\n                            <Grid item xs={1}>\n                                <div style={editIcon}>\n                                    <IconButton\n                                        icon={faPen}\n                                        onClick={() => {\n                                            this.setState({\n                                                itemToEditIndex: index,\n                                                icd10CodeToEdit: diagnosis.icd10Code,\n                                                doctorToEdit: {\n                                                    value: diagnosis.doctors[0].id,\n                                                    label: diagnosis.doctors[0].name\n                                                }\n                                            });\n                                        }}/>\n                                </div>\n                                <div style={deleteIcon}>\n                                    <IconButton\n                                        icon={faMinusCircle}\n                                        onClick={() => {\n                                            this.props.availment.diagnoses.splice(index, 1);\n                                            this.props.refreshAvailmentState();\n                                        }}/>\n                                </div>\n                            </Grid>\n                            </>\n                        )}\n                    </Grid>\n                    {diagnosis.procedures.map((procedure, procedureIndex) => {\n                        return this.renderProcedureDetails(procedure, index, procedureIndex);\n                    })}\n                </TableCell>\n            </TableRow>\n        );\n    }\n    \n    renderProcedureDetails(procedure: ProcedureData, diagnosisIndex: number, index: number): JSX.Element {\n        const stateProcedure = this.props.availment.diagnoses[diagnosisIndex].procedures[index];\n        const stateProcedures = this.props.availment.diagnoses[diagnosisIndex].procedures;\n        return (\n            <div style={{position: 'relative'}}>\n                <div style={{paddingTop: '0.5rem'}} />\n                <div className='line-border' />\n                <div style={{paddingTop: '0.5rem'}} />\n                <Grid container spacing={2}>\n                    <Grid item xs={8}>\n                        <DetailedDropdown \n                            placeholder='Procedure'\n                            choices={this.props.cptCodes}\n                            value={procedure.cptCode}\n                            onChange={(value: DropdownChoice) => {\n                                stateProcedure.cptCode = value;\n                                if (index === (stateProcedures.length - 1)) {\n                                    this.pushBlankProcedures(diagnosisIndex);\n                                }\n                                this.props.refreshAvailmentState();\n                            }} />\n                    </Grid>\n                    <Grid item xs={3}>\n                        <NumberField\n                            placeholder='Amount'\n                            value={procedure.amount}\n                            onChange={(value: number) => {\n                                stateProcedure.amount = value;\n                                this.props.refreshAvailmentState();\n                            }} />\n                    </Grid>\n                    <Grid item xs={1}>\n                        <CustomCheckbox\n                            placeholder='PHIC'\n                            value={procedure.isPHIC}\n                            onChange={(value: boolean) => {\n                                stateProcedure.isPHIC = value;\n                                this.props.refreshAvailmentState();\n                            }} />\n                    </Grid>\n                </Grid>\n                <div style={{position: 'absolute'}}>\n                    <TextButton \n                        label='Add procedure'\n                        icon={faPlus}\n                        onClick={() => {\n                            this.pushBlankProcedures(diagnosisIndex);\n                            this.props.refreshAvailmentState();\n                        }}/>\n                </div>\n                <div style={{paddingTop: '1rem'}} />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Button } from '@material-ui/core';\nimport { GlobalFunction } from './GlobalFunction';\n\ninterface IProps {\n    lastSave?: Date;\n    forceShowResolveButton?: boolean;\n\n    onSaveForNow?: () => void;\n    onSubmitTicket?: () => void;\n    onResolveTicket?: () => void;\n\n    onAssign?: () => void;\n    onEscalate?: () => void;\n    onUpdateTicket?: () => void;\n    onFinalAssessment?: () => void;\n}\n\nexport class TicketFooter extends React.Component<IProps> {\n\n    interval?: NodeJS.Timeout;\n\n    componentDidMount() {\n        // setInterval()\n        this.interval = setInterval(() => this.setState({ time: Date.now() }), 5000);\n    }\n\n    \n\n    render(): JSX.Element {\n        return (\n            <div className='footer'>\n\n                {this.props.onSaveForNow ? (\n                    <Button \n                        className='button-transparent' \n                        variant='outlined'\n                        onClick={this.props.onSaveForNow}>\n                        <div style={{display: 'block'}}>\n                            <div className='text'>Save For Now</div>\n                            {this.props.lastSave ? (\n                                <div className='small-text'>\n                                    {`Auto-saved ${GlobalFunction.getTimeDeffirence(this.props.lastSave, new Date())} ago`}\n                                </div>\n                            ) : null}\n                        </div>\n                    </Button>\n                ) : null}\n\n                {this.props.onResolveTicket && this.props.forceShowResolveButton ? (\n                    <Button \n                        className='button'\n                        onClick={this.props.onResolveTicket}>\n                        Mark as Resolved\n                    </Button>\n                ) : null}\n                \n                {this.props.onSubmitTicket ? (\n                    <Button \n                        className='button'\n                        onClick={this.props.onSubmitTicket}>\n                        Submit Ticket\n                    </Button>\n                ) : null}\n\n                {this.props.onAssign ? (\n                    <Button \n                        className='button'\n                        color='default'\n                        onClick={this.props.onAssign}>\n                        Assign\n                    </Button>\n                ) : null}\n\n                {this.props.onEscalate ? (\n                    <Button \n                        className='button-error'\n                        onClick={this.props.onEscalate}>\n                        Escalate\n                    </Button>\n                ) : null}\n\n                {this.props.onUpdateTicket ? (\n                    <Button \n                        className='button'\n                        onClick={this.props.onUpdateTicket}>\n                        Update Ticket\n                    </Button>\n                ) : null}\n\n                {this.props.onFinalAssessment ? (\n                    <Button \n                        className='button'\n                        onClick={this.props.onFinalAssessment}>\n                        Proceed with Final Assessment\n                    </Button>\n                ) : null}\n            </div>\n        );\n    }\n}","\nimport * as React from 'react';\nimport Grid from '@material-ui/core/Grid';\n\nimport './../style.scss';\nimport { MemberDataSection } from '../MemberDataSection';\nimport { API } from './../API';\nimport { ConfinementSection } from './Components/ConfinementSection';\nimport { AvailmentSection } from './Components/AvailmentSection';\nimport { TicketInfoSection } from './Components/TicketInfoSection';\nimport { TicketData, MemberData, DropdownChoice, ConfinementDetails, InquiryData, AvailmentDetails, ConsultationDetails } from '../Models';\nimport { InquirySection } from './Components/InquirySection';\nimport { Payloads } from '../Payloads';\nimport { ConsultationSection } from './Components/ConsultationSection';\nimport { Processmaker } from '../Processmaker';\nimport { EmergencyRoomSection } from './Components/EmergencyRoomSection';\nimport { TicketFooter } from '../TicketFooter';\nimport { Loading } from '../Components/Loading';\nimport { Snackbar } from '@material-ui/core';\n// import { IconButton } from '../Components/IconButton';\n// import { faTimes, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\n\ninterface IProps {\n    history: any;\n}\n\ninterface IStates {\n    createTicketAttemp: boolean;\n    isIcd10CodesLoaded: boolean;\n    loadedResources: number;\n    snackbarMessage: string | null;\n    lastSave?: Date;\n\n    /* Can save to tmp */\n    member?: MemberData;\n    ticket: TicketData;\n    availment: AvailmentDetails;\n    confinement: ConfinementDetails;\n    consultation: ConsultationDetails;\n    inquiries: InquiryData[];\n}\n\nexport class CreateTicketPage extends React.Component<IProps, IStates> {\n\n    static RESOURCES_TO_LOAD = 1;\n\n    icd10Codes: DropdownChoice[];\n    cptCodes: DropdownChoice[];\n    facilities: DropdownChoice[];\n    doctors: DropdownChoice[];\n    agents: DropdownChoice[];\n    \n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            createTicketAttemp: false,\n            isIcd10CodesLoaded: false,\n            snackbarMessage: null,\n            loadedResources: 0,\n\n            ticket: {\n                ticketChannel: 'Call',\n                transactionNo: '9999-9999',\n                ticketSource: '',\n                memberName: '',\n                clientName: '',\n                brokerName: '',\n                facility: { value: '', label: '' },\n                department: '',\n                callerName: '',\n                contactNo: '',\n                ticketType: '',\n                specificType: '',\n                urgency: 'High',\n                agent: { id: '', name: '' },\n                additionalNotes: '',\n                additionalFiles: [],\n                ticketNo: '',\n                pmCaseId: '',\n                status: 'Open',\n                createdBy: { \n                    id: localStorage['user_id'], \n                    name: `${localStorage['first_name']} ${localStorage['last_name']}` \n                },\n                dateCreated: new Date(),\n                dateUpdated: new Date(),\n                dateEscalated: null\n            },\n            availment: {\n                provider: { value: '', label: '' },\n                diagnoses: []\n            },\n            confinement: {\n                provider: { value: '', label: '' },\n                dateAdmitted: new Date(),\n                confinementKind: '',\n                roomType: '',\n                costPerDay: 0,\n                doctor: { value: '', label: '' },\n                initialDiagnosis: { value: '', label: '' },\n                amount: 0\n            },\n            consultation: {\n                provider: { value: '', label: '' },\n                diagnosis: { value: '', label: '' },\n                doctor: { value: '', label: '' },\n                notes: '',\n                assessmentRemarks: '',\n                assessmentType: ''\n            },\n            inquiries: []\n        };\n\n        this.facilities = [];\n        this.agents = [];\n        this.doctors = [];\n        this.cptCodes = [];\n        this.icd10Codes = [];\n    }\n\n    componentDidMount() {\n        API.get('facilities',\n            (response) => {\n                this.facilities = response.map(facility => {\n                    return { \n                        value: facility.facility_id,\n                        label: facility.name \n                    }\n                });\n            },\n            (error) => {\n                console.log(error);\n            });\n\n\n\n        const tempIcd10Codes = localStorage.getItem('icd10_codes');\n        if (!tempIcd10Codes) {\n            API.get('icd10-codes?filter[limit]=1000',\n                (response) => {\n                    this.icd10Codes = response.map(icd10Code => {\n                        return { \n                            value: icd10Code.full_code,\n                            label: icd10Code.abbreviated_description \n                        };\n                    });\n                    localStorage.setItem('icd10_codes', JSON.stringify(this.icd10Codes));\n                    this.setState({isIcd10CodesLoaded: true});\n                },\n                (error) => {\n                    console.log(error);\n                });\n        } else {\n            this.icd10Codes = JSON.parse(tempIcd10Codes);\n            console.log(\"Using the local copy of ICD10 Codes\");\n        }\n        \n\n\n        const tempCptCodes = localStorage.getItem('cpt_codes');\n        if (!tempCptCodes) {\n            API.get('cpts',\n                (response) => {\n                    this.cptCodes = response.map(cptCode => {\n                        return {\n                            value: cptCode.code.toString(),\n                            label: cptCode.label \n                        };\n                    });\n                    localStorage.setItem('cpt_codes', JSON.stringify(this.cptCodes));\n                }, \n                (error) => {\n                    console.log(error);\n                });\n        } else {\n            this.cptCodes = JSON.parse(tempCptCodes);\n            console.log(\"Using the local copy of CPT Codes\");\n        }\n        \n\n\n        API.get('doctors',\n            (response) => {\n                this.doctors = response.map(doctor => {\n                    return {\n                        value: doctor._id,\n                        label: ('Dr. ' + doctor.first_name +  ' ' + doctor.last_name),\n                        params: [doctor.type]\n                    };\n                });\n            }, \n            (error) => {\n                console.log(error);\n            });\n\n        API.get(`tmp?filter[where][and][0][user_id]=${localStorage['user_id']}&filter[where][and][1][module]=Customer%20Care`,\n            (response) => {\n                console.debug(response);\n                response = response.filter(item => item.process === 'Create Ticket');\n                if (response.length > 0) {\n                    this.setState({\n                        lastSave: new Date(response[0].timestamp),\n                        member: response[0].data.member,\n                        ticket: response[0].data.ticket,\n                        availment: response[0].data.availment,\n                        confinement: response[0].data.confinement,\n                        consultation: response[0].data.confinement,\n                        inquiries: response[0].data.inquiries\n                    });\n                }\n                this.setState({loadedResources: this.state.loadedResources + 1});\n            },\n            (error) => {\n                console.log(error);\n                this.setState({loadedResources: this.state.loadedResources + 1});\n            });\n    }\n\n    render(): JSX.Element {\n\n        return (\n            <>\n            <Grid container className='customer-care-main'>\n\n                {this.state.loadedResources !== CreateTicketPage.RESOURCES_TO_LOAD ? (\n                    <div \n                        style={{\n                            backgroundColor: '#00000055', \n                            zIndex: 100, \n                            position: 'fixed', \n                            width: '100%', \n                            height: '100%'}}>\n                        <Loading height='15rem' size={100}/>\n                    </div>\n                    \n                ) : (null)}\n\n                <Snackbar\n\t\t\t        anchorOrigin={{\n\t\t\t          vertical: 'top',\n\t\t\t          horizontal: 'right',\n\t\t\t        }}\n\t\t\t        open={this.state.snackbarMessage ? true : false}\n\t\t\t        autoHideDuration={6000}\n\t\t\t        onClose={() => {\n                        this.setState({snackbarMessage: null});\n                    }}\n                    message={this.state.snackbarMessage} />\n\n\n                <MemberDataSection \n                    member={this.state.member}\n                    ticketStatus='Create'\n                    promptChooseMember={this.state.createTicketAttemp}\n                    onUpdateMemberStateChange={(member: MemberData) => {\n                        this.setState({member: member});\n                    }} />\n                \n                <TicketInfoSection \n                    ticket={this.state.ticket} \n                    facilities={this.facilities}\n                    agents={this.agents}\n                    createTicketAttemp={this.state.createTicketAttemp}\n                    refreshTicketState={() => {\n                        this.setState({ticket: Object.assign({}, this.state.ticket)});\n                    }} />\n\n                {this.state.ticket.ticketType === 'Availment' ? (\n                \n                    this.state.ticket.specificType === 'Outpatient Procedure' ? (  \n                        <AvailmentSection\n                            availment={this.state.availment}\n                            facilities={this.facilities}\n                            doctors={this.doctors}\n                            icd10Codes={this.icd10Codes}\n                            cptCodes={this.cptCodes}\n                            createTicketAttemp={this.state.createTicketAttemp}\n                            refreshAvailmentState={() => {\n                                this.setState({availment: Object.assign({}, this.state.availment)});\n                            }} />\n\n                    ) : this.state.ticket.specificType === 'Inpatient' ? ( \n                        <ConfinementSection\n                            confinement={this.state.confinement}\n                            facilities={this.facilities}\n                            doctors={this.doctors}\n                            cptCodes={this.icd10Codes}\n                            createTicketAttemp={this.state.createTicketAttemp}\n                            refreshConfinementState={() => {\n                                this.setState({confinement: this.state.confinement});\n                            }} />\n                    ) : this.state.ticket.specificType === 'Emergency Room' ? (\n                        <EmergencyRoomSection\n                            availment={this.state.availment}\n                            facilities={this.facilities}\n                            doctors={this.doctors}\n                            icd10Codes={this.icd10Codes}\n                            cptCodes={this.cptCodes}\n                            createTicketAttemp={this.state.createTicketAttemp}\n                            refreshAvailmentState={() => {\n                                this.setState({availment: this.state.availment});\n                            }} />\n                        \n                    ) : this.state.ticket.specificType === 'Consultation' ? ( \n                        <ConsultationSection\n                            consultation={this.state.consultation}\n                            facilities={this.facilities}\n                            doctors={this.doctors}\n                            icd10Codes={this.icd10Codes}\n                            createTicketAttemp={this.state.createTicketAttemp}\n                            refreshConsultationState={() => {\n                                this.setState({consultation: this.state.consultation});\n                            }} />\n                    ) : (null)\n\n                ) : this.state.ticket.ticketType === 'Inquiry' ? (\n                    <InquirySection\n                        inquiries={this.state.inquiries}\n                        refreshInquiryState={() => {\n                            this.setState({inquiries: this.state.inquiries});\n                        }} />\n                ) : (null)}\n            </Grid>\n\n            <TicketFooter \n                lastSave={this.state.lastSave}\n                forceShowResolveButton={this.state.ticket.ticketType === 'Inquiry' ? true : false}\n                onSaveForNow={() => {\n                    const payload = {\n                        user_id: localStorage['user_id'],\n                        module: 'Customer Care',\n                        process: 'Create Ticket',\n                        timestamp: new Date(),\n                        data: {\n                            member: this.state.member,\n                            ticket: this.state.ticket,\n                            availment: this.state.availment,\n                            confinement: this.state.confinement,\n                            consultation: this.state.confinement,\n                            inquiries: this.state.inquiries\n                        }\n                    };\n                    console.debug('Saving this: ', payload);\n                    API.post('tmp', JSON.stringify(payload),\n                        (response) => {\n                            console.log(response);\n                            if (response._id) {\n                                this.setState({\n                                    snackbarMessage: 'Progress saved.',\n                                    lastSave: new Date()\n                                });\n                            } else {\n                                this.setState({snackbarMessage: 'Failed to save progress.'});\n                            }\n                        },\n                        (error) => {\n                            console.log(error);\n                            this.setState({snackbarMessage: 'Failed to save progress.'});\n                        });\n                }} \n                onSubmitTicket={() => {\n                    this.setState({createTicketAttemp: true});\n                    const ticket = this.state.ticket;\n                    const member = this.state.member;\n                    const confinement = this.state.confinement;\n                    const availment = this.state.availment;\n                    const consultation = this.state.consultation;\n                    const inquiries = this.state.inquiries;\n                    \n                    /* Must have target member */\n                    if (!member) return;\n\n                    /* Confinement Details must have all contents */\n                    if (ticket.ticketType === 'Availment' && ticket.specificType === 'Inpatient') {\n                        if (confinement.provider.value === '' ||\n                            confinement.confinementKind === '' ||\n                            confinement.costPerDay === 0 ||\n                            confinement.doctor.value === '' ||\n                            confinement.initialDiagnosis.value === '' ||\n                            confinement.roomType === '') {\n                            return;\n                        }\n                    }\n\n                    const payload = {\n                        tmp: {\n                            user_id: localStorage['user_id'],\n                            module: 'Customer Care',\n                            process: 'Create Ticket',\n                            timestamp: new Date()\n                        },\n                        ...Payloads.getPostTicketPayload(ticket, member, confinement, availment, inquiries, consultation)\n                    };\n                        \n                    console.debug(JSON.stringify(payload));\n\n                    API.post('customer-care/tickets', JSON.stringify(payload),\n                        (postTicketResponse) => { \n                            console.log(postTicketResponse);\n                            if (postTicketResponse['_id']) {\n                                console.log('Ticket No: '+postTicketResponse['id']);\n                                let is_availment = false;\n                                if (this.state.ticket.ticketType === 'Availment'){\n                                    is_availment=true;\n                                }\n                                let trigger_id = \"3905447335db2a32daafd33048658514\"; //should refer to redux createtickettrigger_id!!!\n                                let body = {\n                                    \"pro_uid\" : \"1538417025dae8dae9ff7a9016454302\", //should refer to redux createticketproject_id!!!\n                                    \"tas_uid\":\"6092309955dae8db0a85907021073537\",   //should refer to redux createticketstarttask_id!!!\n                                    \"ticket_no\":postTicketResponse['_id'],\n                                    \"can_be_resolved_imm\":0,\n                                    \"is_availment\":is_availment\n                                };\n                                console.log('Body:');\n                                console.log(body);\n                                //Start Case\n                                Processmaker.post('cases', body,\n                                    (casesResponse) => {\n                                        if (casesResponse['app_uid']) {\n                                            let case_id = casesResponse['app_uid'];\n                                            //Trigger Case\n                                            Processmaker.put(`cases/${case_id}/execute-trigger/${trigger_id}`, body,\n                                                (triggerResponse) => {\n                                                    console.log('Trigger Response:');\n                                                    console.log(triggerResponse);\n\n                                                    Processmaker.put(`cases/${case_id}/variable`, body,\n                                                        (variableResponse) => {\n                                                            console.log('Set Variable Response:');\n                                                            console.log(variableResponse);\n\n                                                            API.patch(`customer-care/tickets/${postTicketResponse._id}`, { pmaker_case_uid: case_id },\n                                                                (patchTicketResponse) => {\n                                                                    console.log('Patch Response:');\n                                                                    console.log(patchTicketResponse);\n                                                                    this.props.history.push('#/customer-care/');\n                                                                    window.location.reload();\n                                                                },\n                                                                (error) => {\n                                                                    console.log(error);\n                                                                }\n                                                            );\n                                                        }, \n                                                        (error) => {\n                                                            console.log(error);\n                                                        }\n                                                    );\n                                                }, \n                                                (error) => {\n                                                    console.log(error);\n                                                }\n                                            );\n                                        }\n                                    }, \n                                    (error) => {\n                                        console.log(error);\n                                    }\n                                ); \n                            }     \n                        },\n                        (error) => {\n                            console.log(error);\n                        });\n                }}\n                onResolveTicket={() => {\n                    alert('No implementation yet');\n                }} />\n            </>\n        );\n    }\n}","\nimport * as React from 'react';\n\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { Grid, TableCell, TableRow } from '@material-ui/core';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { UpdateData, AccommodationData, DiagnosisData, PhysicianData, ProcedureData, ItemData } from '../UpdateTicketProps';\nimport { DropdownChoice } from 'Pages/CustomerCarePage/Models';\n\ninterface IProps {\n    ticketNo: string;\n    updates: UpdateData[];\n    accommodations: AccommodationData[];\n    diagnoses: DiagnosisData[];\n    physicians: PhysicianData[];\n    procedures: ProcedureData[];\n    items: ItemData[];\n\n    provider: DropdownChoice;\n    dateAdmitted: Date;\n    confinementKind: string;\n\n    coverage: DropdownChoice;\n    philhealthAmount: number;\n    finalBill: number;\n    dischargeDate: Date | null;\n    setTabSelected: (value: number) => void;\n}\n\nexport class SummarySection extends React.Component<IProps> {\n\n    constructor(props: IProps) {\n        super(props);\n    }\n\n    getTotalAccommodationCost = () => {\n        let totalCost = 0;\n        this.props.accommodations.map(accommodation => {\n            totalCost += accommodation.costPerDay * accommodation.days;\n        });\n        return totalCost;\n    }\n\n    getTotalPhysicianCost = () => {\n        let totalCost = 0;\n        this.props.physicians.map(physician => {\n            totalCost += physician.amount;\n        });\n        return totalCost;\n    }\n\n    getTotalProcedureCost = () => {\n        let totalCost = 0;\n        this.props.procedures.map(procedure => {\n            totalCost += procedure.amount;\n        });\n        return totalCost;\n    }\n\n    getTotalItemCost = () => {\n        let totalCost = 0;\n        this.props.items.map(item => {\n            totalCost += item.amount;\n        });\n        return totalCost;\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n                <div className='header-1'>Review Summary</div>\n                {this.renderSection('UPDATES', 'update', 2,\n                    <CustomTable\n                        className='custom-table'\n                        rows={this.props.updates}\n                        renderHeader={() => {\n                            return (\n                                <>\n                                <TableCell>Remarks</TableCell>\n                                <TableCell style={{width: '200px'}}>As of Date</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '200px'}}>Running Hospital Bill</TableCell>\n                                </>\n                            );\n                        }}\n                        renderRow={(update: UpdateData, index: number) => {\n                            const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                            return (\n                                <TableRow style={{backgroundColor: backgroundColor}}>\n                                    <TableCell>{update.remarks}</TableCell>\n                                    <TableCell>{GlobalFunction.toCommonDateString(update.date)}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(update.hospitalBill, true)} PHP`}</TableCell>\n                                </TableRow>\n                            );\n                        }} />\n                )}\n                \n                {this.renderSection('ROOM ACCOMMODATIONS', 'room', 3, \n                    <CustomTable\n                        className='custom-table'\n                        rows={this.props.accommodations}\n                        renderHeader={() => {\n                            return (\n                                <>\n                                <TableCell>Room Type</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '200px'}}>No. of Days</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '300px'}}>Cost Per Day</TableCell>\n                                </>\n                            );\n                        }}\n                        renderRow={(accommodation: AccommodationData, index: number) => {\n                            const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                            return (\n                                <TableRow style={{backgroundColor: backgroundColor}}>\n                                    <TableCell>{accommodation.roomType}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{accommodation.days}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(accommodation.costPerDay, true)} PHP`}</TableCell>\n                                </TableRow>\n                            );\n                        }} />,\n                        this.getTotalAccommodationCost()\n                )}\n\n                {this.renderSection('DIAGNOSES', 'diagnosis', 4, \n                    <CustomTable\n                        className='custom-table'\n                        rows={this.props.diagnoses}\n                        renderHeader={() => {\n                            return (\n                                <>\n                                <TableCell style={{width: '300px'}}>Diagnosis</TableCell>\n                                <TableCell>Remarks</TableCell>\n                                <TableCell style={{textAlign: 'center', width: '100px'}}>Type</TableCell>\n                                <TableCell style={{textAlign: 'center', width: '175px'}}>Primary Diagnosis?</TableCell>\n                                </>\n                            );\n                        }}\n                        renderRow={(diagnosis: DiagnosisData, index: number) => {\n                            const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                            return (\n                                <TableRow style={{backgroundColor: backgroundColor}}>\n                                    <TableCell>{`${diagnosis.diagnosis.value} - ${diagnosis.diagnosis.label}`}</TableCell>\n                                    <TableCell>{diagnosis.remarks}</TableCell>\n                                    <TableCell style={{textAlign: 'center'}}>{diagnosis.isFinal ? 'Final' : 'Initial'}</TableCell>\n                                    <TableCell style={{textAlign: 'center'}}>{diagnosis.isPrimary ? 'Yes' : 'No'}</TableCell>\n                                </TableRow>\n                            );\n                        }} />\n                )}\n                \n                {this.renderSection('PHYSICIANS', 'physicians', 5, \n                    <CustomTable\n                        className='custom-table'\n                        rows={this.props.physicians}\n                        renderHeader={() => {\n                            return (\n                                <>\n                                <TableCell style={{width: '250px'}}>Specialization - Doctor Name</TableCell>\n                                <TableCell style={{width: '100px'}}>Diagnosis</TableCell>\n                                <TableCell>Remarks</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '125px'}}>No. of Visits</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '200px'}}>Amount</TableCell>\n                                </>\n                            );\n                        }}\n                        renderRow={(physician: PhysicianData, index: number) => {\n                            const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                            return (\n                                <TableRow style={{backgroundColor: backgroundColor}}>\n                                    {physician.physician.params? (\n                                        <TableCell>\n                                            <div className='text'>{`${physician.physician.params[0]} - ${physician.physician.label}`}</div>\n                                            <div className='light-text'>{`${physician.physician.params[1]} Physician`}</div>\n                                        </TableCell>\n                                    ) : ''}\n                                    <TableCell>{physician.diagnosis.value}</TableCell>\n                                    <TableCell>{physician.remarks}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{physician.visits}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(physician.amount, true)} PHP`}</TableCell>\n                                </TableRow>\n                            );\n                        }} />,\n                        this.getTotalPhysicianCost()\n                )}\n                \n                {this.renderSection('PROCEDURES', 'procedures', 6,\n                    <CustomTable\n                        className='custom-table'\n                        rows={this.props.procedures}\n                        renderHeader={() => {\n                            return (\n                                <>\n                                <TableCell style={{width: '200px'}}>Procedure</TableCell>\n                                <TableCell style={{width: '100px'}}>Diagnosis</TableCell>\n                                <TableCell style={{width: '175px'}}>Doctor</TableCell>\n                                <TableCell style={{width: '150px'}}>Date</TableCell>\n                                <TableCell style={{minWidth: '100px'}}>Remarks</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '150px'}}>Amount</TableCell>\n                                </>\n                            );\n                        }}\n                        renderRow={(procedure: ProcedureData, index: number) => {\n                            const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                            return (\n                                <TableRow style={{backgroundColor: backgroundColor}}>\n                                    <TableCell>{`${procedure.procedure.value} - ${procedure.procedure.label}`}</TableCell>\n                                    <TableCell>{procedure.diagnosis.value}</TableCell>\n                                    <TableCell>{procedure.physician.label}</TableCell>\n                                    <TableCell>{GlobalFunction.toCommonDateString(procedure.date)}</TableCell>\n                                    <TableCell>{procedure.remarks}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(procedure.amount, true)} PHP`}</TableCell>\n                                </TableRow>\n                            );\n                        }} />,\n                        this.getTotalProcedureCost()\n                )}\n                \n                {this.renderSection('OTHER DETAILS', 'item', 8, \n                    <CustomTable \n                        className='custom-table'\n                        rows={this.props.items}\n                        renderHeader={() => {\n                            return (\n                                <>\n                                <TableCell>Item</TableCell>\n                                <TableCell style={{width: '250px'}}>Type</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '250px'}}>Amount</TableCell>\n                                </>\n                            );\n                        }}\n                        renderRow={(item: ItemData, index: number) => {\n                            const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                            return (\n                                <TableRow style={{backgroundColor: backgroundColor}}>\n                                    <TableCell>{item.name}</TableCell>\n                                    <TableCell>{item.type.label}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(item.amount, true)} PHP`}</TableCell>\n                                </TableRow>\n                            );\n                        }} />,\n                        this.getTotalItemCost()\n                )}\n                \n                <div className='sub-section'>\n                    <Grid container>\n                        <Grid item xs={4}>\n                            <div className='header-2'>PHILHEALTH</div>\n                            <div className='sub-section'>\n                                <div className='light-text'>COVERAGE</div>\n                                <div className='small-text'>{this.props.coverage.label}</div>\n                            </div>\n                            <div className='sub-section'>\n                                <div className='light-text'>AMOUNT</div>\n                                <div className='small-text'>{GlobalFunction.formatNumber(this.props.philhealthAmount, true) + \" PHP\"}</div>\n                            </div>\n                            <div className='sub-section'>\n                                <div className='light-text'>TICKET NUMBER</div>\n                                <div className='small-text'>{this.props.ticketNo}</div>\n                            </div>\n                        </Grid>\n                        <Grid item xs={4}>\n                            <div className='header-2'>CONFINEMENT</div>\n                            <div className='sub-section'>\n                                <div className='light-text'>PROVIDER</div>\n                                <div className='small-text'>{this.props.provider.value + ' - ' + this.props.provider.label}</div>\n                            </div>\n                            <div className='sub-section'>\n                                <div className='light-text'>DATE ADMITTED</div>\n                                <div className='small-text'>{GlobalFunction.toCommonDateString(this.props.dateAdmitted)}</div>\n                            </div>\n                            <div className='sub-section'>\n                                <div className='light-text'>KIND OF CONFINEMENT</div>\n                                <div className='small-text'>{this.props.confinementKind}</div>\n                            </div>\n                        </Grid>\n                        <Grid item xs={4}>\n                            <div className='header-2'>DISCHARGE DETAILS</div>\n                            <div className='sub-section'>\n                                <div className='light-text'>FINAL HOSPITAL BILL AMOUNT</div>\n                                <div className='small-text'>{GlobalFunction.formatNumber(this.props.finalBill, true) + ' PHP'}</div>\n                            </div>\n                            <div className='sub-section'>\n                                <div className='light-text'>DISCHARGE DATE</div>\n                                <div className='small-text'>\n                                    {this.props.dischargeDate ? (\n                                        GlobalFunction.toCommonDateString(this.props.dischargeDate)\n                                    ) : '---'}\n                                </div>\n                            </div>\n                        </Grid>\n                        <Grid item xs={4}>\n                            <TextButton \n                                label='Edit PhilHealth' \n                                onClick={() => {\n                                    window.scroll(0, -window.pageYOffset);\n                                    this.props.setTabSelected(7);\n                                }}/>\n                        </Grid>\n                        <Grid item xs={4}>\n                            <TextButton \n                                label='Edit Confinement Details' \n                                onClick={() => {\n                                    window.scroll(0, -window.pageYOffset);\n                                    this.props.setTabSelected(3);\n                                }}/>\n                        </Grid>\n                        <Grid item xs={4}>\n                            <TextButton\n                                label='Edit Discharge Details' \n                                onClick={() => {\n                                    window.scroll(0, -window.pageYOffset);\n                                    this.props.setTabSelected(7);\n                                }}/>\n                        </Grid>\n                    </Grid>\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderSection(headerName: string, miniText: string, tabIndex: number, table: JSX.Element, totalValue?: number): JSX.Element {\n        return (\n            <div className='sub-section'>\n                <div style={{float: 'right'}}>\n                    <TextButton \n                        label={`Add / Edit ${miniText}`} \n                        onClick={() => {\n                            window.scroll(0, -window.pageYOffset);\n                            this.props.setTabSelected(tabIndex);\n                        }}/>\n                </div>\n                <div className='header-2'>{headerName}</div>\n                {table}\n                {totalValue ? (\n                    <div className='sub-section'>\n                        <div style={{float: 'right'}}>\n                            <span className='small-text'>TOTAL AMOUNT</span>\n                            <span style={{marginLeft: '1rem'}} />\n                            <span className='header-2'>\n                                {GlobalFunction.formatNumber(totalValue, true) + ' PHP'}\n                            </span>\n                        </div>\n                </div>\n                ) : null}\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Table, TableBody, TableCell, TableHead, TableRow } from '@material-ui/core';\nimport './../../Components/component-style.scss';\nimport { faPen, faMinusCircle, faCheckCircle, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport { IconButton } from '../../Components/IconButton';\n\ninterface IProps {\n    className: string;\n    placeholder: string;\n    cols: string[];\n    rows: string[][] | any;\n    defaultRows?: number;\n\n    onSaveEditRow: (rowIndex: number, value: any) => void;\n    onDeleteRow: (rowIndex: number) => void; \n\n    /* \n     * Use this to stylize the column cells.\n     * rowIndex: the row index you want to style.\n     * colIndex: the column index you want to style.\n     * value: give you control to manipulate the value.\n     */\n    onFormat?: (rowIndex: number, colIndex: number, value: any) => JSX.Element;\n\n    /*\n     * Use this to stylize the column headers.\n     * colIndex: the column index you want to style.\n     * name: the header name at will appear.\n     */\n    onHeaderFormat?: (colIndex: number, name: string) => JSX.Element;\n\n    /* \n     * Use this when you want to stylize the column cell edit field\n     * colIndex: the column index you want to style.\n     * value: give you control to manipulate the value.\n     * onChange: a function called when user tried to type/input.\n     * - value: \n     */\n    editField: (colIndex: number, value: any, onChange: (value: any) => void) => JSX.Element;\n}\n\ninterface IStates {\n    rowToEdit: number;\n    data: any;\n}\n\nexport class CRUDTable extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            rowToEdit: -1,\n\n            data: {}\n        }\n    }\n\n    handleOnChange = (attrName: string) => (value: any) => {\n        this.setState(prevState => ({\n            data: {\n                ...prevState.data,\n                [attrName]: value\n            }\n        }));\n    }\n\n    renderCell(row: number, column: number, attrName: string, value: any): JSX.Element {\n        return (\n            <TableCell key={column}>\n                {this.state.rowToEdit === row ? (\n                    this.props.editField ? this.props.editField(column, this.state.data[attrName], this.handleOnChange(attrName)) : value  \n                ) : (\n                    this.props.onFormat ? this.props.onFormat(row, column, value) : value\n                )}\n            </TableCell>\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <>\n            <div className='header-2'>{this.props.placeholder}</div>\n            <Table className={(this.props.className ? this.props.className : '') + ' table'}>\n                <TableHead>\n                    <TableRow>\n                        {this.props.cols.map((colName, index) => {\n                            return (\n                                this.props.onHeaderFormat ? (\n                                    this.props.onHeaderFormat(index, colName)\n                                ) : (\n                                    <TableCell key={index}>{colName}</TableCell>\n                                )\n                            );\n                        })}\n                        <TableCell className='last-column'>\n                        </TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {this.props.rows.map((row, index1) => {\n                        const backgroundColor = (index1 % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                        return (\n                            <TableRow style={{backgroundColor: backgroundColor}} key={index1}>\n                                {Object.keys(row).map((attrName, index2) => {\n                                    return (this.renderCell(index1, index2, attrName, row[attrName]));\n                                })}\n                                <TableCell className='last-column'>\n                                    {this.state.rowToEdit !== index1 ? (\n                                        <>\n                                        <div style={{display: 'inline-block', paddingRight: '0.5rem'}}>\n                                            <IconButton icon={faPen} onClick={() => {\n                                                this.setState({rowToEdit: index1});\n                                                this.setState({data: row});\n                                            }} />\n                                        </div>\n                                        <div style={{display: 'inline-block'}}>\n                                            <IconButton icon={faMinusCircle} onClick={() => {\n                                                this.props.onDeleteRow(index1)\n                                            }} />\n                                        </div>\n                                        </>\n                                    ) : ( \n                                        <>\n                                        <div style={{display: 'inline-block', paddingRight: '0.5rem'}}>\n                                            <IconButton icon={faCheckCircle} onClick={() => {\n                                                this.props.onSaveEditRow(index1, this.state.data);\n                                                this.setState({rowToEdit: -1});\n                                            }} />\n                                        </div>\n                                        <div style={{display: 'inline-block'}}>\n                                            <IconButton icon={faTimesCircle} onClick={() => {\n                                                this.setState({rowToEdit: -1});\n                                            }} />\n                                        </div>\n                                        </>\n                                    )}\n                                </TableCell>\n                            </TableRow>\n                        );\n                    })}\n                </TableBody>\n            </Table>\n            </>\n        );\n    }\n}","import * as React from 'react';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { Grid, TableCell } from '@material-ui/core';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\n\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { DatePicker } from 'Pages/CustomerCarePage/Components/DatePicker';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { DetailedNumberField } from 'Pages/CustomerCarePage/Components/DetailedNumberField';\nimport { UpdateData } from '../UpdateTicketProps';\n\nimport { CRUDTable } from './CRUDTable';\n\ninterface IProps {\n    updates: UpdateData[];\n    state: UpdateData;\n    refreshUpdatesState: () => void;\n}\n\nexport class UpdateSection extends React.Component<IProps> {\n\n    constructor(props: IProps) {\n        super(props);\n    }\n\n    onFormatTableHeader = (colIndex: number, value: any) => {\n        return (\n            colIndex === 2 ? (\n                <TableCell style={{textAlign: 'right', minWidth: '200px'}}>{value}</TableCell>\n            ) : (\n                <TableCell style={{minWidth: '150px'}}>{value}</TableCell>\n            )\n        );\n    }\n\n    onFormatCRUDTable = (colIndex: number, value: any) => {\n        return (\n            colIndex === 1 ? (\n                <div>{GlobalFunction.toCommonDateString(value)}</div>\n            ) : colIndex === 2 ? (\n                <div style={{textAlign: 'right'}}>\n                    {GlobalFunction.formatNumber(value, true) + ' PHP'}\n                </div>\n            ) : (value)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Add Update</div>\n                <div className='sub-section'>\n                    <Grid container spacing={2}>\n                        <Grid item xs={6}>\n                            <InputField \n                                placeholder='Remarks'\n                                value={this.props.state.remarks}\n                                charLimit={100}\n                                onChange={(value: string) => {\n                                    this.props.state.remarks = value;\n                                    this.props.refreshUpdatesState();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <DatePicker \n                                placeholder='As of Date'\n                                value={this.props.state.date}\n                                onChange={(value: Date) => {\n                                    this.props.state.date = value;\n                                    this.props.refreshUpdatesState();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <DetailedNumberField \n                                placeholder='Running Hospital Bill'\n                                detail='PHP'\n                                isFloat={true}\n                                value={this.props.state.hospitalBill}\n                                onChange={(value: number) => {\n                                    this.props.state.hospitalBill = value;\n                                    this.props.refreshUpdatesState();\n                                }}/>\n                        </Grid>\n                    </Grid>\n                    <div style={{paddingTop: '5px'}} />\n                    <TextButton \n                        label='Add update' \n                        icon={faPlus}\n                        onClick={() => {\n                            var state = this.props.state;\n                            const tempData = {\n                                remarks: state.remarks,\n                                date: state.date,\n                                hospitalBill: state.hospitalBill\n                            }\n                            this.props.updates.unshift(tempData);\n                            this.props.state.remarks = '';\n                            this.props.state.date = new Date();\n                            this.props.state.hospitalBill = 0;\n                            this.props.refreshUpdatesState();\n                        }}/>\n                </div>\n                \n                <div className='sub-section'>\n                    <CRUDTable \n                        className='custom-table'\n                        placeholder='UPDATES'\n                        \n                        cols={['Remarks', 'As of Date', 'Running Hospital Bill']}\n                        rows={this.props.updates} \n                        onSaveEditRow={(index: number, data: any) => {\n                            this.props.updates[index] = data;\n                            this.props.refreshUpdatesState();\n                        }}\n                        onDeleteRow={(index: number) => {\n                            this.props.updates.splice(index, 1);\n                            this.props.refreshUpdatesState();\n                        }}\n                        onHeaderFormat={(colIndex: number, colName: string) => {\n                            return this.onFormatTableHeader(colIndex, colName);\n                        }} \n                        onFormat={(_rowIndex: number, colIndex: number, value: any) => {\n                            return this.onFormatCRUDTable(colIndex, value);\n                        }} \n                        editField={(colIndex: number, currentVal: any, onChange: any) => {\n                            if (colIndex === 0) {\n                                return (\n                                    <InputField\n                                        value={currentVal}\n                                        onChange={(value: string) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 1) {\n                                return (\n                                    <DatePicker\n                                        value={currentVal}\n                                        onChange={(value: Date) => onChange(value)}/>\n                                );\n                            } else {\n                                return (\n                                    <DetailedNumberField\n                                        detail='PHP'\n                                        isFloat={true}\n                                        value={currentVal}\n                                        onChange={(value: number) => onChange(value)}/>\n                                );\n                            }\n                        }} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { Grid, TableCell } from '@material-ui/core';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\n\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { DetailedDropdown } from 'Pages/CustomerCarePage/Components/DetailedDropdown';\nimport { NumberField } from 'Pages/CustomerCarePage/Components/NumberField';\nimport { DetailedNumberField } from 'Pages/CustomerCarePage/Components/DetailedNumberField';\nimport { CRUDTable } from 'Pages/CustomerCarePage/UpdateTicketPage/Components/CRUDTable';\nimport { DatePicker } from 'Pages/CustomerCarePage/Components/DatePicker';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { DropdownChoice } from 'Pages/CustomerCarePage/Models';\nimport { AccommodationData } from '../UpdateTicketProps';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { CustomCheckbox } from 'Pages/CustomerCarePage/Components/CustomCheckbox';\n\ninterface IProps {\n    accommodations: AccommodationData[];\n    state: AccommodationData;\n    facilitiesList: DropdownChoice[];\n    provider: DropdownChoice;\n    dateAdmitted: Date;\n    confinementKind: string;\n    giftGiven: boolean;\n    onUpdateTicketStateChange: (attrName: string, value: any) => void;\n    refreshAccommodationsState: () => void;\n}\n\nexport class AccommodationsSection extends React.Component<IProps> {\n\n    confinementTypes: DropdownChoice[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.confinementTypes = [\n            { value: '1', label: 'Elective / Scheduled' },\n            { value: '2', label: 'ER leading to confinement' }\n        ];\n    }\n\n    onFormatTableHeader = (colIndex: number, value: any) => {\n        return (\n            colIndex === 1 || colIndex === 2 ? (\n                <TableCell style={{textAlign: 'right', minWidth: '200px'}}>{value}</TableCell>\n            ) : (\n                <TableCell style={{minWidth: '150px'}}>{value}</TableCell>\n            )\n        );\n    }\n\n    onFormatCRUDTable = (colIndex: number, value: any) => {\n        const textAlign = (colIndex !== 0 ? 'right' : 'left');\n        return (\n            <div style={{textAlign: textAlign}}>\n                {colIndex === 2 ? \n                    GlobalFunction.formatNumber(value, true) + ' PHP' : \n                    value}\n            </div>\n        );\n    }\n\n    getTotalCost = () => {\n        let totalCost = 0;\n        this.props.accommodations.map(accommodation => {\n            totalCost += accommodation.costPerDay * accommodation.days;\n        });\n\n        return totalCost;\n    }\n\n    renderConfinementDetails(): JSX.Element {\n        return (\n            <div className='sub-section'>\n                <div className='header-2'>CONFINEMENT DETAILS</div>\n                <Grid container spacing={2}>\n                    <Grid item xs={6}>\n                        <DetailedDropdown \n                            placeholder='Provider'\n                            value={this.props.provider}\n                            choices={this.props.facilitiesList}\n                            onChange={(value: DropdownChoice) => {\n                                this.props.onUpdateTicketStateChange('provider', value);\n                            }}/>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <DatePicker \n                            placeholder='Date Admitted'\n                            value={this.props.dateAdmitted}\n                            onChange={(value: Date) => {\n                                this.props.onUpdateTicketStateChange('dateAdmitted', value);\n                            }}/>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <Dropdown \n                            placeholder='Kind of Confinement'\n                            value={{ value: '', label: this.props.confinementKind }}\n                            choices={this.confinementTypes}\n                            onChange={(value: DropdownChoice) => {\n                                this.props.onUpdateTicketStateChange('confinementKind', value);\n                            }}/>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <CustomCheckbox \n                            label='Gift Given?'\n                            value={this.props.giftGiven}\n                            onChange={(value: boolean) => {\n                                this.props.onUpdateTicketStateChange('giftGiven', value);\n                            }} />\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n\n    renderAddRoomAccommodation(): JSX.Element {\n        return (\n            <div className='sub-section'>\n                <Grid container spacing={2}>\n                    <Grid item xs={6}>\n                        <InputField \n                            placeholder='Room Type'\n                            value={this.props.state.roomType}\n                            onChange={(value: string) => {\n                                this.props.state.roomType = value;\n                                this.props.refreshAccommodationsState();\n                            }}/>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <NumberField \n                            placeholder='No. of Days'\n                            value={this.props.state.days}\n                            error={this.props.state.days < 1 || isNaN(this.props.state.days)}\n                            onChange={(value: number) => {\n                                this.props.state.days = value;\n                                this.props.refreshAccommodationsState();\n                            }}/>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <DetailedNumberField \n                            placeholder='Cost Per Day'\n                            detail='PHP'\n                            isFloat={true}\n                            value={this.props.state.costPerDay}\n                            onChange={(value: number) => {\n                                this.props.state.costPerDay = value;\n                                this.props.refreshAccommodationsState();\n                            }}/>\n                    </Grid>\n                </Grid>\n                <div style={{paddingTop: '5px'}} />\n                {this.props.state.days > 0 ? (\n                    <TextButton \n                        label='Add room' \n                        icon={faPlus}\n                        onClick={() => {\n                            var state = this.props.state;\n                            const tempData = {\n                                roomType: state.roomType,\n                                days: state.days,\n                                costPerDay: state.costPerDay\n                            }\n                            this.props.accommodations.unshift(tempData);\n                            this.props.state.roomType = '';\n                            this.props.state.days = 0;\n                            this.props.state.costPerDay = 0;\n                            this.props.refreshAccommodationsState();\n                        }}/>\n                ) : null}\n            </div>\n        );\n    }\n\n    render(): JSX.Element {\n\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Add Room Accommodation</div>\n                {this.renderAddRoomAccommodation()}\n                <div className='sub-section' />\n                {this.renderConfinementDetails()}\n                <div className='sub-section'>\n                    <CRUDTable \n                        className='custom-table'\n                        placeholder='ROOM ACCOMMODATIONS'\n                        cols={['Room Type', 'No. of Days', 'Cost Per Day']} \n                        rows={this.props.accommodations}\n                        onSaveEditRow={(index: number, data: any) => {\n                            this.props.accommodations[index] = data;\n                            this.props.refreshAccommodationsState();\n                        }}\n                        onDeleteRow={(index: number) => {\n                            this.props.accommodations.splice(index, 1);\n                            this.props.refreshAccommodationsState();\n                        }}\n                        onHeaderFormat={(colIndex: number, colName: string) => {\n                            return this.onFormatTableHeader(colIndex, colName);\n                        }} \n                        onFormat={(_rowIndex: number, colIndex: number, value: any) => {\n                            return this.onFormatCRUDTable(colIndex, value);\n                        }}\n                        editField={(colIndex: number, currentVal: any, onChange: any) => {\n                            if (colIndex === 0) {\n                                return (\n                                    <InputField\n                                        value={currentVal}\n                                        onChange={(value: string) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 1) {\n                                return (\n                                    <NumberField\n                                        value={currentVal}\n                                        onChange={(value: number) => onChange(value < 1 ? 1 : value)}/>\n                                );\n                            } else {\n                                return (\n                                    <DetailedNumberField\n                                        detail='PHP'\n                                        isFloat={true}\n                                        value={currentVal}\n                                        onChange={(value: number) => onChange(value)}/>\n                                );\n                            }\n                        }} />\n                    <div className='sub-section'>\n                        <div style={{float: 'right'}}>\n                            <span className='small-text'>TOTAL AMOUNT</span>\n                            <span style={{marginLeft: '1rem'}} />\n                            <span className='header-2'>{GlobalFunction.formatNumber(this.getTotalCost(), true) + ' PHP'}</span>\n                        </div>\n                    </div>\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\nimport { Radio } from '@material-ui/core';\n\ninterface IProps {\n    label?: string;\n    checkedCondition: boolean;\n    onChange: () => void;\n}\n\nexport class CustomRadio extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        return (\n            <div className='check-box-area'>\n                <Radio\n                    className='check-box'\n                    checked={this.props.checkedCondition}\n                    onChange={(_event: React.ChangeEvent<HTMLInputElement>) => {\n                        this.props.onChange();\n                    }} />\n                {this.props.label ? (\n                    <span className='text' style={{paddingLeft: '10px'}}>{this.props.label}</span>\n                ) : null}\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { Grid, TableCell } from '@material-ui/core';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\n\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { DetailedDropdown } from 'Pages/CustomerCarePage/Components/DetailedDropdown';\nimport { CRUDTable } from 'Pages/CustomerCarePage/UpdateTicketPage/Components/CRUDTable';\nimport { DropdownChoice } from 'Pages/CustomerCarePage/Models';\nimport { CustomCheckbox } from 'Pages/CustomerCarePage/Components/CustomCheckbox';\nimport { DiagnosisData, PhysicianData, ProcedureData } from '../UpdateTicketProps';\nimport { CustomRadio } from 'Pages/CustomerCarePage/Components/CustomRadio';\n\ninterface IProps {\n    diagnoses: DiagnosisData[];\n    state: DiagnosisData;\n    physicians: PhysicianData[];\n    procedures: ProcedureData[];\n    diagnosesList: DropdownChoice[];\n    primaryDiagnosisIndex: number;\n    refreshDiagnosisStateChange: () => void;\n    setPrimaryDiagnosisIndex: (index: number) => void;\n}\n\nexport class DiagnosesSection extends React.Component<IProps> {\n\n    getFilteredICD10Codes(): DropdownChoice[] {\n        let filteredIcd10: DropdownChoice[] = [];\n        for (var i = 0; i < this.props.diagnosesList.length; i++) {\n            let isSame = false;\n            for (var j = 0; j < this.props.diagnoses.length; j++) {\n                isSame = (\n                    this.props.diagnoses[j].diagnosis.value === \n                    this.props.diagnosesList[i].value ? true : isSame);\n            }\n            if (!isSame) {\n                filteredIcd10 = filteredIcd10.concat(this.props.diagnosesList[i]);\n            }\n        }\n        return filteredIcd10;\n    }\n\n    onFormatTableHeader = (colIndex: number, value: any) => {\n        return (\n            colIndex === 0 || colIndex === 1 ? (\n                <TableCell style={{minWidth: '200px', maxWidth: '200px'}}>{value}</TableCell>\n            ) : colIndex === 3 ? (\n                <TableCell style={{minWidth: '200px', maxWidth: '200px', textAlign: 'center'}}>{value}</TableCell>\n            ) : (\n                <TableCell style={{minWidth: '100px', maxWidth: '100px'}}>{value}</TableCell>\n            )\n        );\n    }\n\n    onFormatCRUDTable = (rowIndex: number, colIndex: number, value: any) => {\n        return (\n            colIndex === 0 ? (\n                <div style={{minWidth: '200px', maxWidth: '200px'}}>\n                    {value.value + \" - \" + value.label}\n                </div>\n            ) : colIndex === 2 ? (\n                <div>{value ? 'Final' : 'Initial'}</div>\n            ) : colIndex === 3 ? (\n                <div style={{textAlign: 'center'}}>\n                    <CustomRadio\n                        checkedCondition={this.props.primaryDiagnosisIndex === rowIndex}\n                        onChange={() => {\n                            this.props.setPrimaryDiagnosisIndex(rowIndex);\n                        }} />\n                </div>\n            ) : (value)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Add Diagnosis</div>\n                <div className='sub-section'>\n                    <Grid container spacing={2}>\n                        <Grid item xs={6}>\n                            <DetailedDropdown \n                                placeholder='Diagnosis'\n                                value={this.props.state.diagnosis}\n                                choices={this.getFilteredICD10Codes()}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.state.diagnosis = value;\n                                    this.props.refreshDiagnosisStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <InputField \n                                placeholder='Remarks'\n                                value={this.props.state.remarks}\n                                charLimit={100}\n                                onChange={(value: string) => {\n                                    this.props.state.remarks = value;\n                                    this.props.refreshDiagnosisStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <CustomCheckbox \n                                label='Final Diagnosis?'\n                                value={this.props.state.isFinal}\n                                onChange={(value: boolean) => {\n                                    this.props.state.isFinal = value;\n                                    this.props.refreshDiagnosisStateChange();\n                                }}/>\n                        </Grid>\n                        \n                    </Grid>\n                    <div style={{paddingTop: '5px'}} />\n                        <TextButton \n                            label='Add diagnosis' \n                            icon={faPlus}\n                            onClick={() => {\n                                var data = this.props.state;\n                                const tempData = {\n                                    diagnosis: data.diagnosis,\n                                    remarks: data.remarks,\n                                    isFinal: data.isFinal,\n                                    isPrimary: true\n                                }\n                                this.props.diagnoses.unshift(tempData);\n                                this.props.state.diagnosis = { value: '', label: '' };\n                                this.props.state.remarks = '';\n                                this.props.state.isFinal = false;\n                                this.props.refreshDiagnosisStateChange();\n                            }}/>\n                </div>\n                <div className='sub-section'>\n                    <CRUDTable \n                        className='custom-table'\n                        placeholder='DIAGNOSES'\n                        \n                        cols={['Diagnosis', 'Remarks', 'Type', 'Primary Diagnosis?']} \n                        rows={this.props.diagnoses}\n                        onSaveEditRow={(index: number, data: any) => {\n                            this.props.diagnoses[index] = data;\n                            this.props.refreshDiagnosisStateChange();\n                        }}\n                        onDeleteRow={(index: number) => {\n                            this.props.physicians.filter(physician => \n                                physician.diagnosis.label !== \n                                this.props.diagnoses[index].diagnosis.label);\n                            this.props.diagnoses.splice(index, 1);\n                            this.props.refreshDiagnosisStateChange();\n                        }}\n                        onHeaderFormat={(colIndex: number, colName: string) => {\n                            return this.onFormatTableHeader(colIndex, colName);\n                        }} \n                        onFormat={(rowIndex: number, colIndex: number, value: any) => {\n                            return this.onFormatCRUDTable(rowIndex, colIndex, value);\n                        }}\n                        editField={(colIndex: number, currentVal: any, onChange: any) => {\n                            if (colIndex === 0) {\n                                return (\n                                    <DetailedDropdown\n                                        choices={this.getFilteredICD10Codes()}\n                                        value={currentVal}\n                                        onChange={(value: DropdownChoice) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 1) {\n                                return (\n                                    <InputField\n                                        value={currentVal}\n                                        onChange={(value: string) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 2) {\n                                return (\n                                    <CustomCheckbox \n                                        label='Is Final?'\n                                        value={currentVal}\n                                        onChange={(value: boolean) => onChange(value)}/>\n                                );\n                            } else {\n                                return (\n                                    <div></div>\n                                );\n                            }\n                        }} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Grid, Radio, TableCell } from '@material-ui/core';\nimport { PhysicianData, DiagnosisData } from '../UpdateTicketProps';\nimport { DetailedDropdown } from 'Pages/CustomerCarePage/Components/DetailedDropdown';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { NumberField } from 'Pages/CustomerCarePage/Components/NumberField';\nimport { DetailedNumberField } from 'Pages/CustomerCarePage/Components/DetailedNumberField';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { CRUDTable } from 'Pages/CustomerCarePage/UpdateTicketPage/Components/CRUDTable';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { DropdownChoice } from 'Pages/CustomerCarePage/Models';\n\ninterface IProps {\n    physicians: PhysicianData[];\n    state: PhysicianData;\n    physiciansList: DropdownChoice[];\n    diagnosesList: DiagnosisData[];\n    refreshPhysiciansStateChange: () => void;\n}\n\n// interface IStates {\n//     physician: DropdownChoice;\n//     diagnosis: DropdownChoice;\n//     type: string;\n//     remarks: string;\n//     visits: number;\n//     amount: number;\n// }\n\nexport class PhysiciansSection extends React.Component<IProps> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        // this.state = {\n        //     physician: { value: '', label: '' },\n        //     diagnosis: { value: '', label: '' },\n        //     type: '',\n        //     remarks: '',\n        //     visits: 0,\n        //     amount: 0\n        // }\n    }\n\n    onFormatTableHeader = (colIndex: number, value: any) => {\n        return (\n            colIndex === 0 ? (\n                <TableCell style={{minWidth: '250px'}}>{value}</TableCell>\n            ) : colIndex === 1 ? (\n                <TableCell style={{minWidth: '100px'}}>{value}</TableCell>\n            ) : colIndex === 3 || colIndex === 4 ? (\n                <TableCell style={{minWidth: '150px', textAlign: 'right'}}>{value}</TableCell>\n            ) : (\n                <TableCell style={{minWidth: '150px'}}>{value}</TableCell>\n            )\n        );\n    }\n\n    onFormatCRUDTable = (colIndex: number, value: any) => {\n        return (\n            colIndex === 0 ? (\n                <div>\n                    <div>{value.params[0] + ' - ' + value.label}</div>\n                    <div className='light-text'>{value.params[1] + ' Physician'}</div>\n                </div>\n            ) : colIndex === 1 ? (\n                <div>{value.value}</div>\n            ) : colIndex === 3 || colIndex === 4 ? (\n                <div style={{textAlign: 'right'}}>\n                    {colIndex === 4 ? GlobalFunction.formatNumber(value, true) + ' PHP' : value}\n                </div>\n            ) : (value)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Add Physician</div>\n                <div className='sub-section'>\n                    <Grid container spacing={2}>\n                        <Grid item xs={6}>\n                            <DetailedDropdown \n                                placeholder='Doctor'\n                                detail={this.props.state.physician.params ? this.props.state.physician.params[0] : ''}\n                                value={this.props.state.physician}\n                                choices={this.props.physiciansList}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.state.physician = value;\n                                    this.props.refreshPhysiciansStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <DetailedDropdown \n                                placeholder='Diagnosis'\n                                value={this.props.state.diagnosis}\n                                choices={this.props.diagnosesList.map(value => {\n                                    return value.diagnosis; \n                                })}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.state.diagnosis = value;\n                                    this.props.refreshPhysiciansStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <InputField \n                                placeholder='Remarks'\n                                value={this.props.state.remarks}\n                                charLimit={100}\n                                onChange={(value: string) => {\n                                    this.props.state.remarks = value;\n                                    this.props.refreshPhysiciansStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={1}>\n                            <NumberField\n                                placeholder='Visits'\n                                value={this.props.state.visits}\n                                onChange={(value: number) => {\n                                    this.props.state.visits = value;\n                                    this.props.refreshPhysiciansStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={2}>\n                            <DetailedNumberField\n                                placeholder='Amount'\n                                detail='PHP'\n                                isFloat={true}\n                                value={this.props.state.amount}\n                                onChange={(value: number) => {\n                                    this.props.state.amount = value;\n                                    this.props.refreshPhysiciansStateChange();\n                                }}/>\n                        </Grid>\n                        {this.props.state.physician.params ? (\n                            <Grid item xs={3}>\n                                <div>\n                                <Grid container style={{paddingTop: '1rem'}}>\n                                    <Grid item xs={6}>\n                                        <Radio \n                                            className='check-box'\n                                            style={{height: '100%', width: 0}}\n                                            checked={this.props.state.physician.params[1] === 'Admitting'}\n                                            value={'Admitting'}\n                                            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                                                if (this.props.state.physician.params) {\n                                                    this.props.state.physician.params[1] = event.target.value;\n                                                }\n                                                this.props.refreshPhysiciansStateChange();\n                                            }} /> Admitting\n                                    </Grid>\n                                    <Grid item xs={6}>\n                                        <Radio \n                                            className='check-box'\n                                            style={{height: '100%', width: 0}}\n                                            checked={this.props.state.physician.params[1] === 'Attending'}\n                                            value={'Attending'}\n                                            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                                                if (this.props.state.physician.params) {\n                                                    this.props.state.physician.params[1] = event.target.value;\n                                                }\n                                                this.props.refreshPhysiciansStateChange();\n                                            }} /> Attending\n                                    </Grid>\n                                </Grid>\n                                </div>\n                            </Grid>\n                        ) : null}\n                    </Grid>\n                    <div style={{paddingTop: '5px'}} />\n                    <TextButton \n                        label='Add physician' \n                        icon={faPlus}\n                        onClick={() => {\n                            var data = this.props.state;\n                            const tempData = {\n                                physician: {\n                                    value: data.physician.value,\n                                    label: data.physician.label,\n                                    params: data.physician.params ? data.physician.params : undefined\n                                },\n                                diagnosis: data.diagnosis,\n                                remarks: data.remarks,\n                                visits: data.visits,\n                                amount: data.amount\n                            };\n                            this.props.physicians.unshift(tempData);\n                            this.props.state.physician = { value: '', label: '', params: ['', ''] };\n                            this.props.state.diagnosis = { value: '', label: '' };\n                            this.props.state.remarks = '';\n                            this.props.state.visits = 0;\n                            this.props.state.amount = 0;\n                            this.props.refreshPhysiciansStateChange();\n                        }}/>\n                </div>\n                <div className='sub-section'>\n                    <CRUDTable \n                        className='custom-table'\n                        placeholder='PHYSICIANS'\n                        cols={['Specialization - Doctor Name', 'Diagnosis', 'Remarks', 'No. of Visits', 'Amount']} \n                        rows={this.props.physicians}\n                        onSaveEditRow={(index: number, data: any) => {\n                            // this.props.editPhysician(index, data);\n                            this.props.physicians[index] = data;\n                            this.props.refreshPhysiciansStateChange();\n                        }}\n                        onDeleteRow={(index: number) => {\n                            // this.props.deletePhysician(index);\n                            this.props.physicians.splice(index, 1);\n                            this.props.refreshPhysiciansStateChange();\n                        }}\n                        onHeaderFormat={(colIndex: number, colName: string) => {\n                            return this.onFormatTableHeader(colIndex, colName);\n                        }} \n                        onFormat={(_rowIndex: number, colIndex: number, value: any) => {\n                            return this.onFormatCRUDTable(colIndex, value);\n                        }}\n                        editField={(colIndex: number, currentVal: any, onChange: any) => {\n                            if (colIndex === 0) {\n                                return (\n                                    <DetailedDropdown\n                                        detail={currentVal.params[0]}\n                                        choices={this.props.physiciansList}\n                                        value={currentVal}\n                                        onChange={(value: DropdownChoice) => onChange({\n                                            value: value.value,\n                                            label: value.label,\n                                            params: [value.params ? value.params[0] : '', currentVal.params[1]]\n                                        })}/>\n                                );\n                            } else if (colIndex === 1) {\n                                return (\n                                <div>{currentVal.value}</div>\n                                    // <DetailedDropdown\n                                    //     choices={this.props.diagnosesList.map(value => {\n                                    //         return value.diagnosis; \n                                    //     })}\n                                    //     value={currentVal}\n                                    //     onChange={(value: DropdownChoice) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 2) {\n                                return (\n                                    <InputField\n                                        value={currentVal}\n                                        onChange={(value: string) => onChange(value)}/>\n                                );\n                                \n                            } else if (colIndex === 3) {\n                                return (\n                                    <NumberField\n                                        value={currentVal}\n                                        onChange={(value: number) => onChange(value)}/>\n                                );\n                            \n                            } else {\n                                return (\n                                    <DetailedNumberField\n                                        detail='PHP'\n                                        isFloat={true}\n                                        value={currentVal}\n                                        onChange={(value: number) => onChange(value)}/>\n                                );\n                            }\n                        }} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { CRUDTable } from 'Pages/CustomerCarePage/UpdateTicketPage/Components/CRUDTable';\nimport { Grid, TableCell } from '@material-ui/core';\nimport { DetailedDropdown } from 'Pages/CustomerCarePage/Components/DetailedDropdown';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { DatePicker } from 'Pages/CustomerCarePage/Components/DatePicker';\nimport { DetailedNumberField } from 'Pages/CustomerCarePage/Components/DetailedNumberField';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { DropdownChoice } from 'Pages/CustomerCarePage/Models';\nimport { ProcedureData, DiagnosisData } from '../UpdateTicketProps';\n\ninterface IProps {\n    procedures: ProcedureData[];\n    state: ProcedureData;\n    proceduresList: DropdownChoice[];\n    diagnosesList: DiagnosisData[];\n    physiciansList: DropdownChoice[];\n    refreshProceduresStateChange: () => void;\n}\n\nexport class ProceduresSection extends React.Component<IProps> {\n\n    onFormatTableHeader = (colIndex: number, value: any) => {\n        return (\n            colIndex === 0 ? (\n                <TableCell style={{minWidth: '200px'}}>{value}</TableCell>\n            ) : colIndex === 1 ? (\n                <TableCell style={{minWidth: '100px'}}>{value}</TableCell>\n            ) : colIndex === 2 || colIndex === 3 ? (\n                <TableCell style={{minWidth: '150px'}}>{value}</TableCell>\n            ) : colIndex === 5 ? (\n                <TableCell style={{textAlign: 'right', minWidth: '100px'}}>{value}</TableCell>\n            ) : (\n                <TableCell style={{minWidth: '150px'}}>{value}</TableCell>\n            )\n        );\n    }\n\n    onFormatCRUDTable = (colIndex: number, value: any) => {\n        return (\n            colIndex === 0 ? (\n                <div>{value.value + ' - ' + value.label}</div>\n            ) : colIndex === 1 ? (\n                <div>{value.value}</div>\n            ) : colIndex === 2 ? (\n                <div>{value.label}</div>\n            ) : colIndex === 3 ? (\n                <div>{GlobalFunction.toCommonDateString(value)}</div>\n            ) : colIndex === 5 ? (\n                <div style={{textAlign: 'right'}}>\n                    {GlobalFunction.formatNumber(value, true) + ' PHP'}\n                </div>\n            ) : (value)\n        );\n    }\n\n    render(): JSX.Element {\n\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Add Procedure</div>\n                <div className='sub-section'>\n                    <Grid container spacing={2}>\n                        <Grid item xs={6}>\n                            <DetailedDropdown \n                                placeholder='Procedure'\n                                value={this.props.state.procedure}\n                                choices={this.props.proceduresList}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.state.procedure = value;\n                                    this.props.refreshProceduresStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <DetailedDropdown \n                                placeholder='Diagnosis'\n                                value={this.props.state.diagnosis}\n                                choices={this.props.diagnosesList.map(value => {\n                                    return value.diagnosis; \n                                })}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.state.diagnosis = value;\n                                    this.props.refreshProceduresStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <DetailedDropdown \n                                placeholder='Doctor'\n                                detail={this.props.state.physician.params ? this.props.state.physician.params[0] : undefined}\n                                value={this.props.state.physician}\n                                choices={this.props.physiciansList}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.state.physician = value;\n                                    this.props.refreshProceduresStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <InputField \n                                placeholder='Remarks'\n                                value={this.props.state.remarks}\n                                charLimit={100}\n                                onChange={(value: string) => {\n                                    this.props.state.remarks = value;\n                                    this.props.refreshProceduresStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <DatePicker \n                                placeholder='Date'\n                                value={this.props.state.date}\n                                onChange={(value: Date) => {\n                                    this.props.state.date = value;\n                                    this.props.refreshProceduresStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <DetailedNumberField \n                                placeholder='Amount'\n                                detail='PHP'\n                                isFloat={true}\n                                value={this.props.state.amount}\n                                onChange={(value: number) => {\n                                    this.props.state.amount = value;\n                                    this.props.refreshProceduresStateChange();\n                                }}/>\n                        </Grid>\n                    </Grid>\n                    <div style={{paddingTop: '5px'}} />\n                    <TextButton \n                        label='Add procedure' \n                        icon={faPlus}\n                        onClick={() => {\n                            var data = this.props.state;\n                            const tempData = {\n                                procedure: data.procedure,\n                                diagnosis: data.diagnosis,\n                                physician: data.physician,\n                                date: data.date,\n                                remarks: data.remarks,\n                                amount: data.amount\n                            }\n                            this.props.procedures.unshift(tempData);\n                            this.props.state.procedure = { value: '', label: '' };\n                            this.props.state.diagnosis = { value: '', label: '' };\n                            this.props.state.physician = { value: '', label: '' };\n                            this.props.state.remarks = '';\n                            this.props.state.date = new Date();\n                            this.props.state.amount = 0;\n                            this.props.refreshProceduresStateChange();\n                        }}/>\n                </div>\n                <div className='sub-section'>\n                    <CRUDTable \n                        className='custom-table'\n                        placeholder='PROCEDURES'\n                        \n                        cols={['Procedure', 'Diagnosis', 'Doctor', 'Date', 'Remarks', 'Amount']} \n                        rows={this.props.procedures}\n                        onSaveEditRow={(index: number, data: any) => {\n                            // this.props.editProcedure(index, data);\n                            this.props.procedures[index] = data;\n                            this.props.refreshProceduresStateChange();\n                        }}\n                        onDeleteRow={(index: number) => {\n                            // this.props.deleteProcedure(index);\n                            this.props.procedures.splice(index, 1);\n                            this.props.refreshProceduresStateChange();\n                        }}\n                        onHeaderFormat={(colIndex: number, colName: string) => {\n                            return this.onFormatTableHeader(colIndex, colName);\n                        }}\n                        onFormat={(_rowIndex: number, colIndex: number, value: any) => {\n                            return this.onFormatCRUDTable(colIndex, value);\n                        }}\n                        editField={(colIndex: number, currentVal: any, onChange: any) => {\n                            if (colIndex === 0) {\n                                return (\n                                    <DetailedDropdown\n                                        choices={this.props.proceduresList}\n                                        value={currentVal}\n                                        onChange={(value: DropdownChoice) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 1) {\n                                return (\n                                    <DetailedDropdown\n                                        choices={this.props.diagnosesList.map(value => {\n                                            return value.diagnosis; \n                                        })}\n                                        value={currentVal}\n                                        onChange={(value: DropdownChoice) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 2) {\n                                return (\n                                    <DetailedDropdown\n                                        detail={currentVal.params[0]}\n                                        choices={this.props.physiciansList}\n                                        value={currentVal}\n                                        onChange={(value: DropdownChoice) => onChange(value)}/>\n                                ); \n                            } else if (colIndex === 3) {\n                                return (\n                                    <DatePicker\n                                        value={currentVal}\n                                        onChange={(value: Date) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 4) {\n                                return (\n                                    <InputField\n                                        value={currentVal}\n                                        charLimit={100}\n                                        onChange={(value: string) => onChange(value)}/>\n                                );\n                            \n                            } else {\n                                return (\n                                    <DetailedNumberField\n                                        detail='PHP'\n                                        isFloat={true}\n                                        value={currentVal}\n                                        onChange={(value: number) => onChange(value)}/>\n                                );\n                            }\n                        }} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { CRUDTable } from 'Pages/CustomerCarePage/UpdateTicketPage/Components/CRUDTable';\nimport { Grid, TableCell } from '@material-ui/core';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { DetailedNumberField } from 'Pages/CustomerCarePage/Components/DetailedNumberField';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { DropdownChoice } from 'Pages/CustomerCarePage/Models';\nimport { ItemData } from '../UpdateTicketProps';\n\ninterface IProps {\n    items: ItemData[];\n    state: ItemData;\n    refreshItemsStateChange: () => void;\n}\n\nexport class OtherDetailsSection extends React.Component<IProps> {\n\n    itemTypes: DropdownChoice[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.itemTypes = [\n            { value: '1', label: 'Medicine' },\n            { value: '2', label: 'Non-coverable' },\n            { value: '3', label: 'Rooms' },\n            { value: '4', label: 'Miscellaneous' }\n        ]\n    }\n\n    onFormatTableHeader = (colIndex: number, value: any) => {\n        return (\n            colIndex === 2 ? (\n                <TableCell style={{textAlign: 'right', minWidth: '200px'}}>{value}</TableCell>\n            ) : (\n                <TableCell style={{minWidth: '300px'}}>{value}</TableCell>\n            )\n        );\n    }\n\n    onFormatCRUDTable = (colIndex: number, value: any) => {\n        return (\n            colIndex === 1 ? (\n                value.label\n            ) : colIndex === 2 ? (\n                <div style={{textAlign: 'right'}}>\n                    {GlobalFunction.formatNumber(value, true) + ' PHP'}\n                </div>\n            ) : (value)\n        );\n    }\n\n    render(): JSX.Element {\n        console.log(this.props.items);\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Add Other Details</div>\n                <div className='sub-section'>\n                    <Grid container spacing={2}>\n                        <Grid item xs={6}>\n                            <InputField \n                                placeholder='Item'\n                                value={this.props.state.name}\n                                onChange={(value: string) => {\n                                    this.props.state.name = value;\n                                    this.props.refreshItemsStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <Dropdown \n                                placeholder='Type'\n                                value={this.props.state.type}\n                                choices={this.itemTypes}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.state.type = value;\n                                    this.props.refreshItemsStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <DetailedNumberField \n                                placeholder='Amount'\n                                detail='PHP'\n                                isFloat={true}\n                                value={this.props.state.amount}\n                                onChange={(value: number) => {\n                                    this.props.state.amount = value;\n                                    this.props.refreshItemsStateChange();\n                                }}/>\n                        </Grid>\n                    </Grid>\n                    <div style={{paddingTop: '5px'}} />\n                    <TextButton \n                        label='Add item' \n                        icon={faPlus}\n                        onClick={() => {\n                            var state = this.props.state;\n                            const tempData = {\n                                name: state.name,\n                                type: { value: state.type.value, label: state.type.label },\n                                amount: state.amount\n                            }\n                            // this.props.addItem(tempData);\n                            this.props.items.unshift(tempData);\n                            this.props.state.name = '';\n                            this.props.state.type = { value: '', label: '' };\n                            this.props.state.amount = 0;\n                            this.props.refreshItemsStateChange();\n                        }}/>\n                </div>\n                <div className='sub-section'>\n                    <CRUDTable \n                        className='custom-table'\n                        placeholder='OTHER DETAILS'\n                        \n                        cols={['Item', 'Type', 'Amount']} \n                        rows={this.props.items}\n                        onSaveEditRow={(index: number, data: any) => {\n                            // this.props.editItem(index, data);\n                            this.props.items[index] = data;\n                            this.props.refreshItemsStateChange();\n                        }}\n                        onDeleteRow={(index: number) => {\n                            // this.props.deleteItem(index);\n                            this.props.items.splice(index, 1);\n                            this.props.refreshItemsStateChange();\n                        }}\n                        onHeaderFormat={(colIndex: number, colName: string) => {\n                            return this.onFormatTableHeader(colIndex, colName);\n                        }}\n                        onFormat={(_rowIndex: number, colIndex: number, value: any) => {\n                            return this.onFormatCRUDTable(colIndex, value);\n                        }}\n                        editField={(colIndex: number, currentVal: any, onChange: any) => {\n                            if (colIndex === 0) {\n                                return (\n                                    <InputField\n                                        value={currentVal}\n                                        onChange={(value: string) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 1) {\n                                return (\n                                    <Dropdown\n                                        choices={this.itemTypes}\n                                        value={currentVal}\n                                        onChange={(value: DropdownChoice) => onChange(value)}/>\n                                );\n                            } else {\n                                return (\n                                    <DetailedNumberField\n                                        detail='PHP'\n                                        isFloat={true}\n                                        value={currentVal}\n                                        onChange={(value: number) => onChange(value)}/>\n                                );\n                            }\n                        }} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { Grid } from '@material-ui/core';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { DetailedNumberField } from 'Pages/CustomerCarePage/Components/DetailedNumberField';\nimport { DatePicker } from 'Pages/CustomerCarePage/Components/DatePicker';\nimport { DropdownChoice } from 'Pages/CustomerCarePage/Models';\n\ninterface IProps {\n    dateAdmitted: Date;\n    coverage: DropdownChoice;\n    ticketNo: string;\n    paidBy: string;\n    philhealthAmount: number;\n    finalBill: number;\n    dischargeDate: Date | null;\n    onUpdateTicketStateChange: (attrName: string, value: any) => void;\n}\n\nexport class DischargeDetailsSection extends React.Component<IProps> {\n\n    coverageList: DropdownChoice[];\n\n    constructor(props: any) {\n        super(props);\n\n        this.coverageList = [\n            { value: '1', label: 'Filed' },\n            { value: '2', label: 'Corporate Guarantee' },\n            { value: '3', label: 'Not Compensable' },\n            { value: '4', label: 'Less than 24 hours' },\n            { value: '5', label: 'Paid' },\n            { value: '6', label: 'PH Rider' },\n            { value: '7', label: 'Non-PNDF' }\n        ]\n    }\n\n\n    render(): JSX.Element {\n\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Set PhilHealth</div>\n                <div className='sub-section'>\n                    <Grid container spacing={2}>\n                        <Grid item xs={6}>\n                            <Dropdown \n                                placeholder='Coverage'\n                                choices={this.coverageList}\n                                value={this.props.coverage}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.onUpdateTicketStateChange('coverage', value);\n                                }} />\n                        </Grid>\n                        {this.props.coverage.label === 'Corporate Guarantee' ? (\n                            <Grid item xs={3}>\n                                <InputField \n                                    placeholder='Ticket Number'\n                                    value={this.props.ticketNo}\n                                    onChange={(value: string) => {\n                                        this.props.onUpdateTicketStateChange('ticketNo', value);\n                                    }} />\n                            </Grid>\n                        ) : null}\n                        {this.props.coverage.label === 'Paid' ? (\n                        <Grid item xs={3}>\n                            <InputField \n                                placeholder='Paid by'\n                                value={this.props.paidBy}\n                                onChange={(value: string) => {\n                                    this.props.onUpdateTicketStateChange('paidBy', value);\n                                }} />\n                        </Grid>\n                        ) : null}\n                        {this.props.coverage.label === 'Filed' ||\n                            this.props.coverage.label === 'Corporate Guarantee' ||\n                            this.props.coverage.label === 'Paid' ? (\n                            <Grid item xs={3}>\n                                <DetailedNumberField \n                                    placeholder='Amount'\n                                    detail='PHP'\n                                    isFloat={true}\n                                    value={this.props.philhealthAmount}\n                                    onChange={(value: number) => {\n                                        this.props.onUpdateTicketStateChange('philhealthAmount', value);\n                                    }} />\n                            </Grid>\n                        ) : null}\n\n                        \n                        \n                    </Grid>\n                </div>\n                <div className='header-1'>Add Discharge Details</div>\n                <div className='sub-section'>\n                    <Grid container spacing={2}>\n                        <Grid item xs={3}>\n                            <DetailedNumberField \n                                placeholder='Final Hospital Bill Amount'\n                                detail='PHP'\n                                isFloat={true}\n                                value={this.props.finalBill}\n                                onChange={(value: number) => {\n                                    this.props.onUpdateTicketStateChange('finalBill', value);\n                                }} />\n                        </Grid>\n                        <Grid item xs={3}>\n                            <DatePicker \n                                placeholder='Discharge Date'\n                                value={this.props.dischargeDate}\n                                minDate={this.props.dateAdmitted}\n                                onChange={(value: Date) => {\n                                    this.props.onUpdateTicketStateChange('dischargeDate', value);\n                                }} />\n                        </Grid>\n                    </Grid>\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { CRUDTable } from 'Pages/CustomerCarePage/UpdateTicketPage/Components/CRUDTable';\nimport { Grid } from '@material-ui/core';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { CustomDropzone } from 'Pages/CustomerCarePage/Components/CustomDropzone';\nimport { FileData } from '../UpdateTicketProps';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\n\ninterface IProps {\n    files: FileData[];\n    state: FileData;\n    refreshFilesStateChange: () => void;\n}\n\nexport class UploadedDocumentsSection extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Upload Documents</div>\n                <div className='sub-section'>\n                    <Grid container>\n                        <Grid item xs={6}>\n                            <CustomDropzone\n                                onDrop={(files: File[]) => {\n                                    this.props.state.file = files[0];\n                                    this.props.refreshFilesStateChange();\n                                }} />\n                            <div>{this.props.state.file ? this.props.state.file.name : null}</div>\n                            <div className='sub-section' />\n                            <InputField \n                                placeholder='Document Name' \n                                value={this.props.state.docName}\n                                onChange={(value: string) => {\n                                    this.props.state.docName = value;\n                                    this.props.refreshFilesStateChange();\n                                }} />\n                        </Grid>\n                        <Grid item xs={6} />\n                    </Grid>\n                    <div style={{paddingTop: '5px'}} />\n                    <TextButton \n                        label='Add document' \n                        icon={faPlus}\n                        onClick={() => {\n                            var state = this.props.state;\n                            if (state.file !== null) {\n                                const tempData = {\n                                    docName: state.docName,\n                                    file: state.file\n                                }\n                                this.props.files.unshift(tempData);\n                                this.props.state.docName = '';\n                                this.props.state.file = null;\n                                this.props.refreshFilesStateChange();\n                            }\n                        }}/>\n                </div>\n                \n                <div className='sub-section'>\n                    <CRUDTable \n                        className='custom-table'\n                        placeholder='UPLOADED DOCUMENTS'\n                        \n                        cols={['Document Name', 'Filename']} \n                        rows={this.props.files}\n                        onSaveEditRow={(index: number, data: any) => {\n                            // this.props.editFile(index, data);\n                            \n                            this.props.files[index] = data;\n                            this.props.refreshFilesStateChange();\n                        }}\n                        onDeleteRow={(index: number) => {\n                            // this.props.deleteFile(index);\n                            this.props.files.splice(index, 1);\n                            this.props.refreshFilesStateChange();\n                        }}\n                        onFormat={(_rowIndex: number, colIndex: number, value: any) => {\n                            return (colIndex === 1 ? (value.name) : (value));\n                        }}\n                        editField={(colIndex: number, currentVal: any, onChange: any) => {\n                            if (colIndex === 0) {\n                                return (\n                                    <InputField\n                                        value={currentVal}\n                                        onChange={(value: string) => onChange(value)}/>\n                                );\n                            }\n                            return currentVal.name;\n                        }} />\n                </div>\n\n                <div className='section' />\n            </div>\n        );\n    }\n}","\nimport * as React from 'react';\nimport { Grid, TableCell, TableRow } from '@material-ui/core';\nimport { InquiryData, DropdownChoice } from 'Pages/CustomerCarePage/Models';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { faMinusCircle, faPlus, faPen } from '@fortawesome/free-solid-svg-icons';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { InputChip } from 'Pages/CustomerCarePage/Components/InputChip';\nimport { CustomChip } from 'Pages/CustomerCarePage/Components/CustomChip';\nimport { CustomDropzone } from 'Pages/CustomerCarePage/Components/CustomDropzone';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\n\ninterface IProps {\n    inquiries: InquiryData[];\n    refreshInquiryState: () => void;\n}\n\ninterface IStates {\n    inquiry: DropdownChoice;\n}\n\nexport class UpdateInquirySection extends React.Component<IProps, IStates> {\n\n    inquiries: DropdownChoice[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            inquiry: { value: '', label: '' }\n        };\n\n        this.inquiries = [\n            { value: '1', label: 'Member Status / Card Inquiry' },\n            { value: '2', label: 'Member Network Access Inquiry' },\n            { value: '3', label: 'Member Benefit Inquiry - General [Outpatient]' },\n            { value: '4', label: 'Member Benefit Inquiry - General [Inpatient]' },\n            { value: '5', label: 'Member Benefit Inquiry - General [Emergency]' },\n            { value: '6', label: 'Member Benefit Inquiry - General [Dental]' },\n            { value: '7', label: 'Member Benefit Inquiry - General [APE / ECU]' },\n            { value: '8', label: 'Member Benefit Inquiry - General [Riders]' },\n            { value: '9', label: 'Member Coverage Inquiry - Specific Benefit' },\n            { value: '10', label: 'Member Availment Inquiry - CanAvail' },\n            { value: '11', label: 'Member Eligibility Inquiry' },\n            { value: '12', label: 'Reimbursement Status Inquiry' },\n            { value: '13', label: 'General Affiliated Network Inquiry - Facility' },\n            { value: '14', label: 'General Affiliated Network Inquiry - Doctor' },\n            { value: '15', label: 'General Affiliated Network Inquiry - Dentist' },\n            { value: '16', label: 'Procedural Inquiry - Outpatient' },\n            { value: '17', label: 'Procedural Inquiry - Inpatient' },\n            { value: '18', label: 'Procedural Inquiry - Emergency' },\n            { value: '19', label: 'Procedural Inquiry - Dental' },\n            { value: '20', label: 'Procedural Inquiry - APE / ECU' },\n            { value: '21', label: 'Procedural Inquiry - Member Enrolment / Cancellation / Update' },\n            { value: '22', label: 'Procedural Inquiry - Reimbursement' },\n            { value: '23', label: 'Procedural Inquiry - Others' }\n        ];\n    }\n\n    getFilteredInquiries(): DropdownChoice[] {\n        let filteredInquiries: DropdownChoice[] = [];\n        for (var i = 0; i < this.inquiries.length; i++) {\n            let isSame = false;\n            for (var j = 0; j < this.props.inquiries.length; j++) {\n                isSame = (\n                    this.props.inquiries[j].inquiry.value === \n                    this.inquiries[i].value ? true : isSame);\n            }\n            if (!isSame) {\n                filteredInquiries = filteredInquiries.concat(this.inquiries[i]);\n            }\n        }\n        return filteredInquiries;\n    }\n\n    onAddInquiry() {\n        if (this.state.inquiry.value !== '') {\n            this.props.inquiries.push({\n                inquiry: this.state.inquiry,\n                detail: '',\n                specificDetail: [],\n                answer: '',\n                remarks: '',\n                relatedTickets: [],\n                supportDocs: []\n            });\n            \n            this.props.refreshInquiryState();\n            this.setState({inquiry: { value: '', label: '' }});\n        }\n    }\n\n    onRemoveInquiry(index: number) {\n        this.props.inquiries.splice(index, 1);\n        this.props.refreshInquiryState();\n    }\n\n\n    render(): JSX.Element {\n        return (\n            <div className='update-ticket'>\n                <div className='section' style={{paddingRight: '2.5rem'}}>\n                    <div className='header-1'>Update Inquiry</div>\n                    <div className='text'>\n                        Add an inquiry type and then add the question and its details after\n                    </div>\n                    <div className='sub-section'>\n                        {true ? (\n                            <CustomTable \n                                rows={this.props.inquiries}\n                                renderHeader={() => this.renderTableHeader()}\n                                renderRow={(rowData: any, index: number) => \n                                    this.renderTableRow(rowData, index)} />\n                        ) : (null)}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n        return (\n            <>\n            <TableCell>\n                <Dropdown \n                    choices={this.getFilteredInquiries()}\n                    value={this.state.inquiry}\n                    onChange={(value: DropdownChoice) => {\n                        this.setState({inquiry: value});\n                    }} />\n            </TableCell>\n            <TableCell style={{width: '200px', textAlign: 'center'}}>\n                <TextButton \n                    icon={faPlus} \n                    label=\"Add inquiry\"\n                    onClick={() => {\n                        this.onAddInquiry();\n                    }} />\n            </TableCell>\n            </>\n        );\n    }\n\n    renderTableRow(inquiry: InquiryData, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                <TableCell colSpan={2}>\n                    <Grid container spacing={1}>\n                        <Grid item xs={11} className='header-2'>\n                            {inquiry.inquiry.label}\n                        </Grid>\n                        <Grid item xs={1} style={{textAlign: 'right'}}>\n                            <IconButton\n                                icon={faPen}\n                                onClick={() => {\n                                    this.onRemoveInquiry(index);\n                                }}/>\n                            <IconButton\n                                icon={faMinusCircle}\n                                onClick={() => {\n                                    this.onRemoveInquiry(index);\n                                }}/>\n                        </Grid>\n                    </Grid>\n                    <div style={{position: 'relative'}}>\n                        <div style={{paddingTop: '0.5rem'}} />\n                        <div className='line-border' />\n                        <div style={{paddingTop: '0.5rem'}} />\n                        <Grid container spacing={2}>\n                            <Grid item xs={6}>\n                                <InputField \n                                    placeholder='Details of inquiry (Question)'\n                                    value={inquiry.detail}\n                                    onChange={(value: string) => {\n                                        inquiry.detail = value;\n                                        this.props.refreshInquiryState();\n                                    }} />\n                            </Grid>\n                            <Grid item xs={6}>\n                                <InputChip \n                                    placeholder='Specific Details (Type benefit/doctor/facility to describe inquiry, press enter to add)'\n                                    value={inquiry.specificDetail}\n                                    onAdd={(value: string) => {\n                                        inquiry.specificDetail.push(value);\n                                        this.props.refreshInquiryState();\n                                    }}\n                                    onDelete={(index: number) => {\n                                        inquiry.specificDetail.splice(index, 1);\n                                        this.props.refreshInquiryState();\n                                    }} />\n                            </Grid>\n                        </Grid>\n                        <InputField \n                            placeholder='Answer'\n                            value={inquiry.answer}\n                            onChange={(value: string) => {\n                                inquiry.answer = value;\n                                this.props.refreshInquiryState();\n                            }} />\n                        <InputField \n                            placeholder='Remarks (Optional)'\n                            value={inquiry.remarks}\n                            onChange={(value: string) => {\n                                inquiry.remarks = value;\n                                this.props.refreshInquiryState();\n                            }} />\n                        <Grid container spacing={2}>\n                            <Grid item xs={6}>\n                                <InputChip \n                                    placeholder='Related Tickets (Optional, press enter to add)'\n                                    value={inquiry.relatedTickets}\n                                    onAdd={(value: string) => {\n                                        inquiry.relatedTickets.push(value);\n                                        this.props.refreshInquiryState();\n                                    }}\n                                    onDelete={(index: number) => {\n                                        inquiry.relatedTickets.splice(index, 1);\n                                        this.props.refreshInquiryState();\n                                    }} />\n                            </Grid>\n                            <Grid item xs={4}>\n                                <CustomDropzone \n                                    onDrop={(files: File[]) => {\n                                        inquiry.supportDocs.push(files[0]);\n                                        this.props.refreshInquiryState();\n                                    }}/>\n                            </Grid>\n                            <Grid item xs={2}>\n                                {inquiry.supportDocs.map((doc, index) => {\n                                    return (\n                                        <CustomChip\n                                            label={doc.name}\n                                            value={index.toString()}\n                                            onDelete={(value: string) => {\n                                                inquiry.supportDocs.splice(parseInt(value), 1);\n                                                this.props.refreshInquiryState();\n                                            }} />\n                                    );\n                                })}\n                            </Grid>\n                        </Grid>\n                    </div>\n                </TableCell>\n            </TableRow>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\nimport { Tabs, Tab } from '@material-ui/core';\n\ninterface IProps {\n    tabList: { value: number, label: string }[];\n    selectedTab: number;\n    setSelectedTab: (index: number) => void;\n}\n\nexport class CustomTabs extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        return (\n            <Tabs\n                className='tabs' \n                value={this.props.selectedTab}\n                variant='scrollable'\n                scrollButtons='auto'\n                indicatorColor='primary'\n                onChange={(_event: React.ChangeEvent<{}>, value: number) => {\n                    this.props.setSelectedTab(value );\n                }}>\n                {this.props.tabList.map(tab => {\n                    return <Tab value={tab.value} label={tab.label} />\n                })}\n            </Tabs>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\nimport { Modal, Fade } from '@material-ui/core';\nimport { IconButton } from './IconButton';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\n\ninterface IProps {\n    className?: string;\n    isOpen: boolean;\n    renderHeader: () => JSX.Element;\n    renderContent: () => JSX.Element;\n    renderFooter: () => JSX.Element;\n    handleClose?: () => void;\n}\n\nexport class CustomModal extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        return (\n            <div>\n                <Modal\n                    className={`${this.props.className ? this.props.className : ''} custom-modal`}\n                    open={this.props.isOpen}\n                    onClose={this.props.handleClose}\n                    closeAfterTransition>\n                    <Fade in={this.props.isOpen}>\n                        <div className='modal'>\n                            {this.props.handleClose ? (\n                                <div style={{textAlign: 'right'}}>\n                                    <IconButton\n                                        icon={faTimes} \n                                        size='1x' \n                                        onClick={this.props.handleClose} />\n                                </div>\n                                \n                            ) : null}\n                            <div className='header'>\n                                {this.props.renderHeader()}\n                            </div>\n                            <div className='content'>\n                                {this.props.renderContent()}\n                            </div>\n                            <div className='bottom'>\n                                {this.props.renderFooter()}\n                            </div>\n                        </div>\n                    </Fade>\n                </Modal>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { match } from \"react-router-dom\";\nimport {\n    UpdateData, \n    AccommodationData, \n    DiagnosisData, \n    PhysicianData, \n    ProcedureData,\n    ItemData,\n    FileData\n} from './UpdateTicketProps';\nimport { Grid, Button, Snackbar } from '@material-ui/core';\nimport { SummarySection } from './Components/SummarySection';\nimport { UpdateSection } from './Components/UpdateSection';\nimport { API } from '../API';\nimport { AccommodationsSection } from './Components/AccommodationsSection';\nimport { DiagnosesSection } from './Components/DiagnosesSection';\nimport { PhysiciansSection } from './Components/PhysiciansSection';\nimport { ProceduresSection } from './Components/ProceduresSection';\nimport { OtherDetailsSection } from './Components/OtherDetailsSection';\nimport { DischargeDetailsSection } from './Components/DischargeDetailsSection';\nimport { UploadedDocumentsSection } from './Components/UploadedDocumentsSection';\nimport { MemberDataSection } from '../MemberDataSection';\nimport { DropdownChoice, TicketData, MemberData, InquiryData } from '../Models';\nimport { UpdateInquirySection } from './Components/UpdateInquirySection';\nimport { CustomTabs } from '../Components/CustomTab';\nimport { Payloads } from '../Payloads';\nimport { Processmaker } from '../Processmaker';\nimport { Loading } from '../Components/Loading';\nimport { CustomModal } from '../Components/CustomModal';\nimport { TicketFooter } from '../TicketFooter';\n\ninterface IProps {\n    required: string;\n    match: match<MatchParams>;\n    history: any;\n}\n\ninterface MatchParams {\n    id: string;\n}\n\ninterface IStates {\n    loadedResources: number;\n    isAssessmentModalOpen: boolean;\n    snackbarMessage: string | null;\n    lastSave?: Date;\n\n    /* Can save to tmp */\n    tabSelected: number;\n    member?: MemberData;\n    ticket: TicketData;\n    confinement?: ConfinementDetails;\n    inquiries?: InquiryData[];\n\n    updateState: UpdateData;\n    accommodationState: AccommodationData;\n    diagnosisState: DiagnosisData;\n    physicianState: PhysicianData;\n    procedureState: ProcedureData;\n    otherDetailState: ItemData;\n    fileState: FileData;\n}\n\nexport interface ConfinementDetails {\n    provider: DropdownChoice;\n    dateAdmitted: Date;\n    confinementKind: string;\n    giftGiven: boolean;\n    coverage: DropdownChoice;\n    ticketNo: string;\n    paidBy: string;\n    philhealthAmount: number;\n    finalBill: number;\n    dischargeDate: Date | null;\n    primaryDiagnosisIndex: number;\n\n    updates: UpdateData[];\n    accommodations: AccommodationData[];\n    diagnoses: DiagnosisData[];\n    physicians: PhysicianData[];\n    procedures: ProcedureData[];\n    items: ItemData[];\n    files: FileData[];\n}\n\ninterface ErrorMessageFormat {\n    message: string;\n    targets: string[];\n}\n\nexport class UpdateTicketPage extends React.Component<IProps, IStates> {\n\n    static RESOURCES_TO_LOAD = 5;\n\n    tabList: { value: number, label: string }[];\n    icd10Codes: DropdownChoice[];\n    cptCodes: DropdownChoice[];\n    facilities: DropdownChoice[];\n    doctors: DropdownChoice[];\n    agents: DropdownChoice[];\n\n    errors: ErrorMessageFormat[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            tabSelected: 1,\n            loadedResources: 0,\n            isAssessmentModalOpen: false,\n            snackbarMessage: null,\n            ticket: {\n                ticketChannel: '',\n                transactionNo: '',\n                ticketSource: '',\n                memberName: '',\n                clientName: '',\n                brokerName: '',\n                facility: { value: '', label: '' },\n                department: '',\n                callerName: '',\n                contactNo: '',\n                ticketType: '',\n                specificType: '',\n                urgency: '',\n                agent: { id: '', name: '' },\n                additionalNotes: '',\n                additionalFiles: [],\n                ticketNo: '',\n                pmCaseId: '',\n                status: 'Open',\n                createdBy: { id: '1', name: 'Jilmer Cariaso - Static' },\n                dateCreated: new Date(),\n                dateUpdated: new Date(),\n                dateEscalated: null\n            },\n            updateState: {\n                remarks: '',\n                date: new Date(),\n                hospitalBill: 0\n            },\n            accommodationState: {\n                roomType: '',\n                days: 0,\n                costPerDay: 0\n            },\n            diagnosisState: {\n                diagnosis: { value: '', label: '' },\n                remarks: '',\n                isFinal: false,\n                isPrimary: false\n            },\n            physicianState: {\n                physician: { value: '', label: '', params: [''] },\n                diagnosis: { value: '', label: '' },\n                remarks: '',\n                visits: 0,\n                amount: 0\n            },\n            procedureState: {\n                procedure: { value: '', label: '' },\n                diagnosis: { value: '', label: '' },\n                physician: { value: '', label: '' },\n                remarks: '',\n                date: new Date(),\n                amount: 0\n            },\n            otherDetailState: {\n                name: '',\n                type: { value: '', label: '' },\n                amount: 0\n            },\n            fileState: {\n                docName: '',\n                file: null\n            }\n        };\n\n        this.tabList = [\n            { value: 1, label: 'Summary' }, \n            { value: 2, label: 'Updates' }, \n            { value: 3, label: 'Room Accommodations' }, \n            { value: 4, label: 'Diagnoses' }, \n            { value: 5, label: 'Physicians' }, \n            { value: 6, label: 'Procedures' },  \n            { value: 7, label: 'PhilHealth & Discharge Details' }, \n            { value: 8, label: 'Other Details' }, \n            { value: 9, label: 'Uploaded Documents' }\n        ];\n\n        this.facilities = [];\n        this.agents = [];\n        this.doctors = [];\n        this.cptCodes = [];\n        this.icd10Codes = [];\n        this.errors = [];\n    }\n\n    componentDidMount() {\n        // this.loadTicketData(`customer-care/tickets/${this.props.match.params['ticketId']}`);\n        API.get(`tmp?` +\n            `filter[where][and][0][user_id]=${localStorage['user_id']}&` +\n            `filter[where][and][1][module]=Customer%20Care&` + \n            `filter[where][and][2][ticket_no]=${this.props.match.params['ticketId']}`,\n            (response) => {\n                console.debug(response[0]);\n                if (response[0].ticket_no) {\n                    this.setState({\n                        lastSave: new Date(response[0].timestamp),\n                        loadedResources: this.state.loadedResources + 1,\n                        tabSelected: response[0].data.tab_selected,\n                        member: response[0].data.member,\n                        ticket: response[0].data.ticket,\n                        confinement: response[0].data.confinement,\n                        inquiries: response[0].data.inquiries,\n                        updateState: response[0].data.update_state,\n                        accommodationState: response[0].data.accommodation_state,\n                        diagnosisState: response[0].data.diagnosis_state,\n                        physicianState: response[0].data.physician_state,\n                        procedureState: response[0].data.procedure_state,\n                        otherDetailState: response[0].data.other_detail_state,\n                        fileState: response[0].data.file_state\n                    });\n                } else {\n                    this.loadTicketData(`customer-care/tickets/${this.props.match.params['ticketId']}`);\n                }\n            },\n            (error) => {\n                console.log(error);\n                this.loadTicketData(`customer-care/tickets/${this.props.match.params['ticketId']}`);\n            });\n\n        API.get('facilities',\n            (response) => {\n                this.setState({loadedResources: this.state.loadedResources + 1});\n                this.facilities = response.map(facility => {\n                    return { \n                        value: facility.facility_id,\n                        label: facility.name \n                    }\n                });\n            },\n            (error) => {\n                console.log(error);\n            });\n\n        API.get('icd10-codes?filter[limit]=1000',\n            (response) => {\n                console.log(response);  \n                this.setState({loadedResources: this.state.loadedResources + 1});\n                this.icd10Codes = response.map(icd10Code => {\n                    return { \n                        value: icd10Code.full_code,\n                        label: icd10Code.abbreviated_description \n                    };\n                });\n            },\n            (error) => {\n                console.log(error);\n            });\n\n        API.get('cpts?filter[limit]=1000',\n            (response) => {\n                this.setState({loadedResources: this.state.loadedResources + 1});\n                this.cptCodes = response.map(cptCode => {\n                    return {\n                        value: cptCode.code,\n                        label: cptCode.label \n                    };\n                });\n            }, \n            (error) => {\n                console.log(error);\n            });\n\n        API.get('doctors',\n            (response) => {\n                this.setState({loadedResources: this.state.loadedResources + 1});\n                this.doctors = response.map(doctor => {\n                    return {\n                        value: doctor._id,\n                        label: ('Dr. ' + doctor.first_name +  ' ' + doctor.last_name),\n                        params: [doctor.type]\n                    };\n                });\n            }, \n            (error) => {\n                console.log(error);\n            });\n    }\n\n    loadTicketData = (url: string) => {\n        API.get(url, \n            (response) => {\n                console.log(response);\n                this.setState({loadedResources: this.state.loadedResources + 1});\n                const ticketCategory = response.ticket_category;\n                const confinement = ticketCategory.confinement_details;\n                const inquiry = ticketCategory.inquiry_details;\n\n                this.setState({\n                    ticket: {\n                        id: response._id,\n                        ticketChannel: response.received_via,\n                        transactionNo: response.transaction_no,\n                        ticketSource: response.received_from,\n                        memberName: response.member_name,\n                        clientName: response.corporate_client,\n                        brokerName: response.broker,\n                        facility: { value: '', label: response.hospital_name },\n                        department: response.department,\n                        callerName: response.caller_name,\n                        contactNo: response.contact_no,\n                        ticketType: ticketCategory.ticket_type,\n                        specificType: ticketCategory.specific_type,\n                        urgency: ticketCategory.urgency,\n                        agent: { id: '', name: ticketCategory.assign_to },\n                        additionalNotes: response.additional_notes,\n                        additionalFiles: [],\n                        ticketNo: this.props.match.params['appNo'],\n                        pmCaseId: response.pmaker_case_uid,\n                        status: response.status,\n                        createdBy: { id: response.created_by.id, name: response.created_by.name },\n                        dateCreated: new Date(response.date_created),\n                        dateUpdated: new Date(response.date_updated),\n                        dateEscalated: new Date(response.date_escalated)\n                    }\n                });\n\n                if (confinement) {\n                    const providerData = confinement.provider.split(' - ');\n                    this.setState({confinement: {\n                        provider: { value: providerData[0], label: providerData[1] },\n                        dateAdmitted: new Date(confinement.date_admitted),\n                        confinementKind: confinement.confinement_kind,\n                        giftGiven: confinement.gift_given,\n                        coverage: { value: '', label: confinement.coverage },\n                        ticketNo: confinement.ticket_no,\n                        paidBy: confinement.paid_by,\n                        philhealthAmount: confinement.philhealth_amount,\n                        finalBill: confinement.final_bill,\n                        dischargeDate: confinement.discharge_date ? new Date(confinement.discharge_date) : null,\n\n                        primaryDiagnosisIndex: confinement.diagnoses\n                            .map((value, index) => {\n                                if (value.is_primary) {\n                                    return index;\n                                }\n                                return -1;\n                            })\n                            .filter(value => value != -1)[0],\n\n                        updates: confinement.updates.map(value => {\n                            return {\n                                remarks: value.remarks,\n                                date: new Date(value.date),\n                                hospitalBill: parseFloat(value.hospital_bill)\n                            };\n                        }),\n                        accommodations: confinement.room_accommodation.map(value => {\n                            return {\n                                roomType: value.room_type,\n                                days: value.no_of_days,\n                                costPerDay: value.cost\n                            };\n                        }),\n                        diagnoses: confinement.diagnoses.map(value => {\n                            return {\n                                diagnosis: { value: value.code, label: value.name },\n                                remarks: value.remarks,\n                                isFinal: value.is_final,\n                                isPrimary: value.is_primary\n                            };\n                        }),\n                        physicians: [].concat(...confinement.diagnoses.map(diagnosis => {\n                            return diagnosis.doctors.map(doctor => {\n                                return {\n                                    physician: {\n                                        value: '',\n                                        label: doctor.name,\n                                        params: [doctor.specialization, doctor.type]\n                                    },\n                                    diagnosis: { value: diagnosis.code, label: diagnosis.name },\n                                    remarks: doctor.remarks,\n                                    visits: doctor.no_of_visits,\n                                    amount: doctor.fee\n                                };\n                            });\n                        })),\n                        procedures: [].concat(...confinement.diagnoses.map(diagnosis => {\n                            return diagnosis.procedures.map(procedure => {\n                                return {\n                                    procedure: { value: procedure.code, label: procedure.name },\n                                    diagnosis: { value: diagnosis.code, label: diagnosis.name },\n                                    physician: { value: '', label: procedure.doctor },\n                                    date: new Date(procedure.date_added),\n                                    remarks: procedure.notes,\n                                    amount: parseInt(procedure.amount)\n                                };\n                            });\n                        })),\n                        items: confinement.others.map(value => {\n                            return {\n                                name: value.name,\n                                type: { value: '', label: value.type },\n                                amount: value.amount\n                            };\n                        }),\n                        files: response.supporting_documents.map(value => {\n                            return {\n                                docName: value.name,\n                                file: value.file\n                            };\n                        })\n                    }});\n                }\n                \n                if (inquiry) {\n                    this.setState({inquiries: inquiry.inquiry_list.map(value => {\n                        return {\n                            inquiry: { value: '', label: value.inquiry },\n                            detail: value.value,\n                            specificDetail: value.specific_detail,\n                            answer: value.answer,\n                            remarks: value.remarks,\n                            relatedTickets: value.related_tickets,\n                            supportDocs: value.support_docs\n                        };\n                    })});\n                }\n\n                /* Get Member Details */\n                API.get('customer-care/members/' + response.member_id, \n                    (response) => {\n                        console.log(response);\n                        this.setState({member: {\n                            cardNo: response.member_card_no,\n                            firstName: response.first_name,\n                            middleName: response.middle_name,\n                            lastName: response.last_name,\n                            clientName: response.client.registered_name,\n                            birthDate: new Date(response.date_of_birth),\n                            gender: response.gender,\n                            civilStatus: response.civil_status,\n                            contractId: response.active_contract._id,\n                            isVip: response.is_vip\n                        }});\n\n                        API.get('customer-care/members/' + response.member_card_no + '/benefits',\n                            (response) => {\n                                console.log(response);\n                            },\n                            (error) => {\n                                console.log(error);\n                            });\n                    },\n                    (error) => {\n                        console.log(error);\n                    });\n            },\n            (error) => {\n                console.log(error);\n            });\n    }\n\n    getErrorList = () => {\n        let errors: ErrorMessageFormat[] = [];\n\n        const confinement = this.state.confinement;\n        \n        if (confinement) {\n\n            /* Check if there's a physician assigned to each diagnosis */\n            let errorDiagnosis = confinement.diagnoses.filter(diagnosis => {\n                let matched = false;\n                confinement.physicians.map(physician => {\n                    matched = physician.diagnosis.value === diagnosis.diagnosis.value ? true : matched;\n                });\n                return !matched;\n            });\n\n            if (errorDiagnosis.length > 0) {\n                errors.push({\n                    message: 'Please assign a physician for the following diagnoses before proceding:',\n                    targets: errorDiagnosis.map(diagnosis => {\n                        return `${diagnosis.diagnosis.value} ${diagnosis.diagnosis.label}`\n                    })\n                });\n                this.setState({tabSelected: 5});\n            }\n\n            \n        }\n\n        return errors;\n    }\n\n    apiSaveTicket(onSuccess: Function): void {\n\n        if (!this.state.member) {\n            return;\n        }\n        \n        const payload = Payloads.getPutTicketPayload(\n            this.state.ticket,\n            this.state.member, \n            this.state.confinement,\n            this.state.inquiries\n        );\n\n        console.log(payload);\n        API.put('customer-care/tickets/' + this.props.match.params['ticketId'], payload,\n            (response) => {\n                console.log(response);\n                //Check which task case is at\n                Processmaker.get('cases/'+this.props.match.params['caseId'],\n                    (response) => {\n                        console.log(response);\n                        if (response['current_task'][0]['tas_title'] === 'Create Ticket') {\n                            //Route Case to Modify/Update Ticket\n                            Processmaker.put('cases/'+this.props.match.params['caseId']+'/route-case', {},\n                                (response) => {\n                                    console.log(response);\n                                    onSuccess();\n                                    // this.props.history.push('#/customer-care/tickets');\n                                    // window.location.reload();\n                                },\n                                (error) => {\n                                    console.log(error);\n                                }\n                            );\n                        } else {\n                            onSuccess();\n                        }\n                    },\n                    (error) => {\n                        console.log(error);\n                    }\n                );\n            },\n            (error) => {\n                console.log(error);\n            });\n    }\n\n    render(): JSX.Element {\n        return (\n            <Grid container className='customer-care-main'>\n                {this.state.loadedResources !== UpdateTicketPage.RESOURCES_TO_LOAD ? (\n                    <div \n                        style={{\n                            backgroundColor: '#00000055', \n                            zIndex: 100, \n                            position: 'fixed', \n                            width: '100%', \n                            height: '100%'}}>\n                        <Loading height='10rem'/>\n                    </div>\n                    \n                ) : (null)}\n\n                <Snackbar\n\t\t\t        anchorOrigin={{\n\t\t\t          vertical: 'top',\n\t\t\t          horizontal: 'right',\n\t\t\t        }}\n\t\t\t        open={this.state.snackbarMessage ? true : false}\n\t\t\t        autoHideDuration={6000}\n\t\t\t        onClose={() => {\n                        this.setState({snackbarMessage: null});\n                    }}\n                    message={this.state.snackbarMessage} />\n\n                <CustomModal\n                    className='modal'\n                    isOpen={this.state.isAssessmentModalOpen}\n                    handleClose={() => this.setState({isAssessmentModalOpen: false})}\n                    renderHeader={() => {\n                        return <>Missing Information</>\n                    }}\n                    renderContent={() => {\n                        return (\n                            <div className='header-2'>\n                                {this.errors.map(error => {\n                                    return (\n                                        <>\n                                        <p>{error.message}</p>\n                                        <p>\n                                            {error.targets.map(target => {\n                                                return <div>{`- ${target}`}</div>\n                                            })}\n                                        </p>\n                                        </>\n                                    );\n                                })}\n                            </div>\n                        );\n                    }}\n                    renderFooter={() => {\n                        return (\n                            <Button \n                                variant='outlined' \n                                color='primary'\n                                onClick={() => {this.setState({isAssessmentModalOpen: false})}}>\n                                Okay\n                            </Button>\n                        );\n                    }} />\n                \n                <MemberDataSection \n                    member={this.state.member}\n                    ticket={this.state.ticket}\n                    ticketStatus='Update'\n                    onUpdateMemberStateChange={(_member: MemberData) => null} />\n                {this.state.confinement ? (\n                    this.renderInpatientContent(this.state.confinement)\n                ) : this.state.inquiries ? (\n                    this.renderInquiryContent(this.state.inquiries)\n                ) : null}\n\n                <TicketFooter\n                    lastSave={this.state.lastSave}\n                    onSaveForNow={() => {\n\n                        if (!this.state.member) {\n                            return;\n                        }\n\n                        const payload = {\n                            user_id: localStorage['user_id'],\n                            ticket_no: this.state.ticket.id,\n                            module: 'Customer Care',\n                            process: 'Update Ticket',\n                            timestamp: new Date(),\n                            data: {\n                                tab_selected: this.state.tabSelected,\n                                member: this.state.member,\n                                ticket: this.state.ticket,\n                                confinement: this.state.confinement,\n                                inquiries: this.state.inquiries,\n                                update_state: this.state.updateState,\n                                accommodation_state: this.state.accommodationState,\n                                diagnosis_state: this.state.diagnosisState,\n                                physician_state: this.state.physicianState,\n                                procedure_state: this.state.procedureState,\n                                other_detail_state: this.state.otherDetailState,\n                                file_state: this.state.fileState\n                            }\n                        };\n                        console.debug('Saving this: ', payload);\n                        API.post('tmp', JSON.stringify(payload),\n                            (response) => {\n                                console.log(response);\n                                if (response._id) {\n                                    this.setState({\n                                        snackbarMessage: 'Progress saved.',\n                                        lastSave: new Date()\n                                    });\n                                } else {\n                                    this.setState({snackbarMessage: 'Failed to save progress.'});\n                                }\n                            },\n                            (error) => {\n                                console.log(error);\n                                this.setState({snackbarMessage: 'Failed to save progress.'});\n                            });\n                    }} \n                    onAssign={() => null}\n                    onEscalate={() => null}\n                    onFinalAssessment={() => {\n                        this.errors = this.getErrorList();\n                        console.log(this.errors.length);\n                        if (this.errors.length == 0) {\n                            this.apiSaveTicket(() => {\n                                this.props.history.push(\n                                    '#/customer-care/resolve-ticket/' +\n                                    this.props.match.params['caseId'] + '/' +\n                                    this.props.match.params['appNo'] + '/' +\n                                    this.props.match.params['ticketId']);\n                                window.location.reload();\n                            });\n                        } else {\n                            this.setState({isAssessmentModalOpen: true});\n                        }\n                    }}\n                    onUpdateTicket={() => {\n                        this.apiSaveTicket(() => {\n                            this.props.history.push('#/customer-care/tickets');\n                            window.location.reload();\n                        });\n                    }} />\n            </Grid>\n        );\n    }\n\n    renderInpatientContent(confinement: ConfinementDetails): JSX.Element {\n        return (\n            <div className='update-ticket'>\n                <CustomTabs \n                    tabList={this.tabList}\n                    selectedTab={this.state.tabSelected}\n                    setSelectedTab={(index: number) => {\n                        this.setState({tabSelected: index});\n                    }} />\n                    \n                {this.state.tabSelected === 1 ? (\n                    <SummarySection \n                        ticketNo={this.state.ticket.ticketNo} \n                        updates={confinement.updates}\n                        accommodations={confinement.accommodations}\n                        diagnoses={confinement.diagnoses}\n                        physicians={confinement.physicians}\n                        procedures={confinement.procedures}\n                        items={confinement.items}\n                        provider={confinement.provider}\n                        dateAdmitted={confinement.dateAdmitted}\n                        confinementKind={confinement.confinementKind}\n                        coverage={confinement.coverage}\n                        philhealthAmount={confinement.philhealthAmount}\n                        finalBill={confinement.finalBill}\n                        dischargeDate={confinement.dischargeDate}\n                        setTabSelected={(value: number) => this.setState({tabSelected: value})}/>\n                    \n\n                ) : this.state.tabSelected === 2 ? (\n                    <UpdateSection \n                        updates={confinement.updates}\n                        state={this.state.updateState}\n                        refreshUpdatesState={() => {\n                            this.setState({confinement: confinement});\n                        }} /> \n\n                ) : this.state.tabSelected === 3 ? (\n                    this.state.ticket ? (\n                        <AccommodationsSection\n                            accommodations={confinement.accommodations}\n                            state={this.state.accommodationState}\n                            facilitiesList={this.facilities}\n                            provider={confinement.provider}\n                            dateAdmitted={confinement.dateAdmitted}\n                            confinementKind={confinement.confinementKind}\n                            giftGiven={confinement.giftGiven}\n                            refreshAccommodationsState={() => {\n                                this.setState({confinement: confinement});\n                            }}\n                            onUpdateTicketStateChange={(attrName: string, value: any) => {\n                                this.setState(prevState => ({\n                                    ...prevState,\n                                    confinement: {\n                                        ...confinement,\n                                        [attrName]: value\n                                    }\n                                }));\n                            }} />\n                    ) : null\n\n                ) : this.state.tabSelected === 4 ? (\n                    this.state.ticket ? (\n                        <DiagnosesSection \n                            diagnoses={confinement.diagnoses}\n                            state={this.state.diagnosisState}\n                            physicians={confinement.physicians}\n                            procedures={confinement.procedures}\n                            diagnosesList={this.icd10Codes}\n                            primaryDiagnosisIndex={confinement.primaryDiagnosisIndex}\n                            refreshDiagnosisStateChange={() => {\n                                this.setState({confinement: confinement});\n                            }}\n                            setPrimaryDiagnosisIndex={(index: number) => {\n                                this.setState(prevState => ({\n                                    ...prevState,\n                                    confinement: {\n                                        ...confinement,\n                                        primaryDiagnosisIndex: index\n                                    }\n                                }));\n                            }} />\n                    ) : null\n\n                ) : this.state.tabSelected === 5 ? (\n                    <PhysiciansSection \n                        physicians={confinement.physicians}\n                        state={this.state.physicianState}\n                        physiciansList={this.doctors}\n                        diagnosesList={confinement.diagnoses}\n                        refreshPhysiciansStateChange={() => {\n                            this.setState({confinement: confinement});\n                        }} />\n\n                ) : this.state.tabSelected === 6 ? (\n                    <ProceduresSection\n                        procedures={confinement.procedures}\n                        state={this.state.procedureState}\n                        proceduresList={this.cptCodes}\n                        diagnosesList={confinement.diagnoses}\n                        physiciansList={this.doctors}\n                        refreshProceduresStateChange={() => {\n                            this.setState({confinement: confinement});\n                        }} />\n\n                ) : this.state.tabSelected === 7 ? (\n                    <DischargeDetailsSection \n                        dateAdmitted={confinement.dateAdmitted}\n                        coverage={confinement.coverage} \n                        ticketNo={confinement.ticketNo} \n                        paidBy={confinement.paidBy} \n                        philhealthAmount={confinement.philhealthAmount}\n                        finalBill={confinement.finalBill} \n                        dischargeDate={confinement.dischargeDate}\n                        onUpdateTicketStateChange={(attrName: string, value: any) => {\n                            this.setState(prevState => ({\n                                ...prevState,\n                                confinement: {\n                                    ...confinement,\n                                    [attrName]: value\n                                }\n                            }));\n                        }} />\n                    \n                ) : this.state.tabSelected === 8 ? (\n                    <OtherDetailsSection \n                        items={confinement.items}\n                        state={this.state.otherDetailState}\n                        refreshItemsStateChange={() => {\n                            this.setState({confinement: confinement});\n                        }} />\n                    \n                ) : this.state.tabSelected === 9 ? (\n                    <UploadedDocumentsSection \n                        files={confinement.files}\n                        state={this.state.fileState}\n                        refreshFilesStateChange={() => {\n                            this.setState({confinement: confinement});\n                        }} />\n                    \n                    \n                    \n                ) : null}\n            </div>\n        );\n    }\n\n    renderInquiryContent(inquiries: InquiryData[]): JSX.Element {\n        return (\n            <UpdateInquirySection \n                inquiries={inquiries}\n                refreshInquiryState={() => {\n                    this.setState({inquiries: inquiries});\n                }} />\n        );\n    }\n}\n\n","/**\n * Asynchronously loads the component for FeaturePage\n */\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Components, Utils } from '@hims/core';\nconst { loadable } = Utils;\nconst { LoadingIndicator } = Components.UI;\n\n\nexport default loadable(async () => {\n  let {HomePage,  mapStateToProps, mapDispatchToProps} = await import('./HomePage');\n  const Component = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  )(HomePage);\n  return {default: Component};\n}, {\n  fallback: <LoadingIndicator />,\n});\n","import * as React from 'react';\nimport { Grid } from '@material-ui/core';\n\ninterface IProps {\n    data: any[];\n    renderHeader: () => JSX.Element;\n    renderRow: (rowData: any, index: number) => JSX.Element;\n}\n\nexport class ComplexTable extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        return (\n            <div className='complex-table'>\n                <Grid className='header' container spacing={1}>\n                    {this.props.renderHeader()}\n                </Grid>\n                \n                {this.props.data.map((rowData, index) => {\n                    const backColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                    return (\n                        <div className='item' style={{backgroundColor: backColor}}>\n                            {this.props.renderRow(rowData, index)}\n                        </div>\n                    );\n                })}\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { ComplexTable } from 'Pages/CustomerCarePage/Components/ComplexTable';\nimport { Grid } from '@material-ui/core';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { ProcedureData, AvailmentDetails, DiagnosisData } from 'Pages/CustomerCarePage/Models';\nimport { InputArea } from 'Pages/CustomerCarePage/Components/InputArea';\nimport { CustomRadio } from 'Pages/CustomerCarePage/Components/CustomRadio';\n\ninterface IProps {\n    availment: AvailmentDetails;\n    refreshAvailmentState: () => void;\n}\n\n\nexport class ApproveAvailmentSection extends React.Component<IProps> {\n\n    APPROVED = 'Approved';\n    DISAPPROVED = 'Disapproved';\n    PENDING = 'Pending';\n\n    constructor(props: IProps) {\n        super(props);\n    }\n\n    getProceduresCost = (diagnosis: DiagnosisData) => {\n        let total = 0;\n        diagnosis.procedures.map(procedure => {\n            total += procedure.amount;\n        });\n        return total;\n    }\n\n    getApprovedAvailmentsCost = () => {\n        let total = 0;\n        this.props.availment.diagnoses.map(diagnosis => {\n            diagnosis.procedures.map(procedure => {\n                total += (procedure.assessmentType === this.APPROVED ? procedure.amount : 0);\n            });\n        });\n        return total;\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Approve or Disapprove Availments</div>\n                <div className='sub-section'>\n                    <div className='light-text'>PROVIDER</div>\n                    <div className='small-text'>\n                    {this.props.availment.provider.value + ' - ' + this.props.availment.provider.label}</div>\n                    <div style={{float: 'right'}}>\n                        <span className='small-text'>TOTAL AMOUNT</span>\n                        <span style={{marginLeft: '1rem'}} />\n                        <span className='header-2'>\n                            {'PHP ' + GlobalFunction.formatNumber(this.getApprovedAvailmentsCost(), true)}\n                        </span>\n                    </div>\n                </div>\n                <div className='sub-section'>\n                    <ComplexTable \n                        data={this.props.availment.diagnoses}\n                        renderHeader={() => this.renderHeader()}\n                        renderRow={(rowData: any, index: number) => \n                            this.renderRow(rowData, index)} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderHeader(): JSX.Element {\n        const headerNameStyle = {\n            margin: 0,\n            padding: '12px 0 12px 0'\n        };\n\n        return (\n            <>\n                <Grid item xs={4}>\n                    <div className='header-2' style={headerNameStyle}>Diagnosis</div>\n                </Grid>\n                <Grid item xs={4}>\n                    <div className='header-2' style={headerNameStyle}>Doctor</div>\n                </Grid>\n                <Grid item xs={2}>\n                    <div className='header-2' style={headerNameStyle}>Professional Fee</div>\n                </Grid>\n                <Grid item xs={2}>\n                    <div className='header-2' style={{...headerNameStyle, textAlign: 'right'}}>\n                        Total Amt. of Procedures\n                    </div>\n                </Grid>\n            </>\n        );\n    }\n\n    renderRow(diagnosis: DiagnosisData, _index: number): JSX.Element {\n        return (\n            <>\n                <Grid className='small-section' container>\n                    <Grid item xs={4}>\n                        {diagnosis.icd10Code.value + ' - ' + diagnosis.icd10Code.label}\n                    </Grid>\n                    <Grid item xs={4}>\n                        {diagnosis.doctors[0].id + ' - ' + diagnosis.doctors[0].name}\n                    </Grid>\n                    <Grid item xs={2}>\n                        {'PHP ' + GlobalFunction.formatNumber(diagnosis.doctors[0].fee, true)}\n                    </Grid>\n                    <Grid item xs={2} style={{fontWeight: 'bold', textAlign: 'right'}}>\n                        {'PHP ' + GlobalFunction.formatNumber(this.getProceduresCost(diagnosis), true)}\n                    </Grid>\n                </Grid>\n                <div className='line-border' />\n                {diagnosis.procedures.map((procedure, index) => {\n                    return this.renderProcedure(procedure, index);\n                })}\n            </>\n        );\n    }\n\n    renderProcedure(procedure: ProcedureData, index: number): JSX.Element {\n        return (\n            <>\n            <div className='line-border' />\n            <div className='section' >\n                \n                <Grid container>\n                    <Grid item xs={4}>\n                        <div>\n                            <Grid container>\n                                <Grid item xs={2} style={{padding: '0 0.5rem', marginTop: '-3px'}}>\n                                    <div className='number-item'>{index + 1}</div>\n                                </Grid>\n                                <Grid item xs={10} className='header-2'>\n                                    {procedure.cptCode.value + ' - ' + procedure.cptCode.label}\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Grid>\n                    \n                </Grid>\n                <Grid container>\n                    <Grid item xs={4}>\n                        <div>\n                            <Grid container>\n                                <Grid item xs={2} />\n                                <Grid item xs={10}>\n                                    <div className='sub-section'>\n                                        <div className='light-text'>AMOUNT</div>\n                                        <div className='small-text'>{'PHP ' + GlobalFunction.formatNumber(procedure.amount, true)}</div>\n                                    </div>\n                                    <div className='sub-section'>\n                                        <div className='light-text'>PHILHEALTH REQUIRED?</div>\n                                        <div className='small-text'>{procedure.isPHIC ? 'Yes' : 'No'}</div>\n                                    </div>\n                                    <div className='sub-section'>\n                                        <div className='light-text'>DATE OF AVAILMENT</div>\n                                        <div className='small-text'>{'May 19, 2019 *'}</div>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <div className='sub-section'>\n                            <div className='light-text'>SYSTEM ASSESSMENT</div>\n                            <div className='small-text'>{'Approve *'}</div>\n                        </div>\n                        <div className='sub-section'>\n                            <div className='light-text'>REMAINING BALANCE</div>\n                            <div className='small-text'>{'PHP ' + 0 + '.00 *'}</div>\n                        </div>\n                        <div className='sub-section'>\n                            <div className='light-text'>CLAUSE</div>\n                            <div className='small-text'>{'Laboratory tests, x-rays, and other diagnostic examinations prescribed by the INTELLICARE physician*'}</div>\n                        </div>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <div className='sub-section'>\n                            <div className='light-text'>Choose Assessment</div>\n                            <CustomRadio \n                                label='Approve'\n                                checkedCondition={procedure.assessmentType === this.APPROVED}\n                                onChange={() => {\n                                    procedure.assessmentType = this.APPROVED;\n                                    this.props.refreshAvailmentState();\n                                }} />\n                            <CustomRadio \n                                label='Disapprove'\n                                checkedCondition={procedure.assessmentType === this.DISAPPROVED}\n                                onChange={() => {\n                                    procedure.assessmentType = this.DISAPPROVED;\n                                    this.props.refreshAvailmentState();\n                                }} />\n                            <CustomRadio \n                                label='Pending'\n                                checkedCondition={procedure.assessmentType === this.PENDING}\n                                onChange={() => {\n                                    procedure.assessmentType = this.PENDING;\n                                    this.props.refreshAvailmentState();\n                                }} />\n                        </div>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <div className='sub-section'>\n                            <div className='light-text'>Remarks</div>\n                            <InputArea\n                                value={procedure.assessmentRemarks}\n                                onChange={(value: string) => {\n                                    procedure.assessmentRemarks = value;\n                                    this.props.refreshAvailmentState();\n                                }} />\n                        </div>\n                    </Grid>\n                </Grid>\n            </div>\n            </>\n        );\n    }\n}","import * as React from 'react';\nimport { Grid, TableCell, TableRow } from '@material-ui/core';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { API } from 'Pages/CustomerCarePage/API';\nimport { PartialBenefitData } from 'Pages/CustomerCarePage/Models';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\nimport { faSort } from '@fortawesome/free-solid-svg-icons';\nimport { LabelDisplayedRowsArgs } from '@material-ui/core/TablePagination';\nimport { Loading } from 'Pages/CustomerCarePage/Components/Loading';\n\ninterface IProps {\n    cardNo: string;\n}\n\ninterface IStates {\n    benefitCategory: string;\n    benefitName: string;\n    limitType: string;\n    limit: string;\n\n    benefitListUpdated: boolean;\n}\n\n\nexport class CheckBenefitSection extends React.Component<IProps, IStates> {\n\n    benefits: PartialBenefitData[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            benefitCategory: '',\n            benefitName: '',\n            limitType: '',\n            limit: '',\n            benefitListUpdated: false\n        }\n\n        this.benefits = [];\n    }\n\n    componentDidMount() {\n        this.loadBenefitsData();\n    }\n\n    loadBenefitsData(): void {\n        API.get(`customer-care/members/${this.props.cardNo}/benefits`, \n            (response) => {\n                console.log(response);\n                this.benefits = this.combineNodes(\n                        response.filter(benefit => benefit.level == 6),\n                        response.filter(benefit => benefit.level == 7)\n                    ).map(benefit => {\n                        return {\n                            category: benefit.parent_name,\n                            name: benefit.name,\n                            limitType: (benefit.limits.length > 0 ? benefit.limits[0].type : 'None'),\n                            limit: (benefit.limits.length > 0 ? (\n                                benefit.limits[0].limit + ' ' + benefit.limits[0].limit_unit\n                            ) : '---')\n                        }\n                    });\n                this.setState({benefitListUpdated: true});\n\n                /* Testing only */\n                console.log(\n                    this.combineNodes(\n                        response.filter(benefit => benefit.level == 6),\n                        response.filter(benefit => benefit.level == 7)\n                    )\n                );\n            },\n            (error) => {\n                console.log(error);\n            });\n    }\n\n    combineNodes = (parentNodes, childNodes) => {\n        const nodes = parentNodes.reduce ((result, parent) => {\n            parent.children.map ((child) => {\n            let foundChild = childNodes.find ((childNode) => child === childNode._id);\n        \n            if (foundChild) {\n                let child = Object.assign({}, foundChild);\n        \n                child['parent_name'] = parent.name;\n                child['parent_code'] = parent.code;\n                child['disabled'] = false;\n                result.push(child);\n            }\n            });\n        \n            return result;\n        }, new Array());\n        \n        return nodes;\n    };\n\n    getFilteredBenefitsData = () => {\n        return (\n            this.benefits\n                .filter(benefit => \n                    this.state.benefitCategory === '' || \n                    benefit.category.toLowerCase().includes(this.state.benefitCategory.toLowerCase()))\n                .filter(benefit => \n                    this.state.benefitName === '' || \n                    benefit.name.toLowerCase().includes(this.state.benefitName.toLowerCase()))\n                .filter(benefit => \n                    this.state.limitType === '' || \n                    benefit.limitType.toLowerCase().includes(this.state.limitType.toLowerCase()))\n                .filter(benefit => \n                    this.state.limit === '' || \n                    benefit.limit.toLowerCase().includes(this.state.limit.toLowerCase()))\n        );\n    }\n    \n    sortBenefits(attrName: string, isAsc: boolean): void {\n        this.benefits.sort((a: PartialBenefitData, b: PartialBenefitData) => \n            (a[attrName] && b[attrName] && a[attrName].toString().toLowerCase() > b[attrName].toString().toLowerCase()) ? \n                (isAsc ? 1 : -1) : (isAsc ? -1 : 1)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Check Benefits</div>\n                <div className='sub-section' />\n                <Grid container className='sub-section' spacing={5}>\n                    {this.renderSideBar()}\n\n                    {this.state.benefitListUpdated ? (\n                        this.renderBenefitsList()\n                    ) : (\n                        <Grid item xs={10}>\n                            <Loading height='10rem'/>\n                        </Grid>\n                    )}\n                    \n                </Grid>\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderSideBar(): JSX.Element {\n        const rightBorderStyle = {\n            borderRight: '#3C394A22 solid 1px'\n        }\n        return (\n            <Grid item xs={2} style={rightBorderStyle}>\n                    <div className='small-text'>Contract ID</div>\n                    <div className='header-1'>{'2019-0928*'}</div>\n                <div className='sub-section'>\n                    <div className='small-text'>Room and Board</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>COVERAGE</div>\n                    <div className='sub-section'>\n                        <TextButton \n                            label='APE' \n                            onClick={() => {\n                                this.setState({benefitListUpdated: false});\n                                this.loadBenefitsData();\n                            }} />\n                    </div>\n                    <div className='sub-section'>\n                        <TextButton \n                            label='PPE' \n                            onClick={() => {\n                                this.setState({benefitListUpdated: false});\n                                this.loadBenefitsData();\n                            }} />\n                    </div>\n                    <div className='sub-section'>\n                        <TextButton \n                            label='Inpatient' \n                            onClick={() => {\n                                this.setState({benefitListUpdated: false});\n                                this.loadBenefitsData();\n                            }} />\n                    </div>\n                    <div className='sub-section'>\n                        <TextButton \n                            label='Outpatient' \n                            onClick={() => {\n                                this.setState({benefitListUpdated: false});\n                                this.loadBenefitsData();\n                            }} />\n                    </div>\n                    <div className='sub-section'>\n                        <TextButton \n                            label='Emergency' \n                            onClick={() => {\n                                this.setState({benefitListUpdated: false});\n                                this.loadBenefitsData();\n                            }} />\n                    </div>\n                </div>\n\n                <div className='sub-section'>\n                    <div className='header-1 light-text'>RIDERS</div>\n                </div>\n\n            </Grid>\n        );\n    }\n\n    renderBenefitsList(): JSX.Element {\n\n        return (\n            <Grid item xs={10}>\n                <div className='sub-section'>\n                    <CustomTable\n                        rows={this.getFilteredBenefitsData()}\n                        renderHeader={() => this.renderTableHeader()}\n                        renderRow={(rowData: any, index: number) => \n                            this.renderTableRow(rowData, index)}\n                        onChangeInfo={(info: LabelDisplayedRowsArgs) => \n                            `${info.from}-${info.to} out of ${info.count} benefits`}\n                        labelRowsPerPage='Show'\n                        rowsPerPageOptions={[10, 25, 50]} />\n                </div>\n\n            </Grid>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n\n        return (\n            <>\n            {this.renderHeaderColumn('benefitCategory', 'Benefit Category', '150px')}\n            {this.renderHeaderColumn('benefitName', 'Benefit', '250px')}\n            {this.renderHeaderColumn('limitType', 'Limit Type', '100px')}\n            {this.renderHeaderColumn('limit', 'Limit', '100px')}\n            </>\n        );\n    }\n\n    renderTableRow(benefit: PartialBenefitData, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                <TableCell>{benefit.category}</TableCell>\n                <TableCell>{benefit.name}</TableCell>\n                <TableCell>{benefit.limitType}</TableCell>\n                <TableCell>{benefit.limit}</TableCell>\n            </TableRow>\n        );\n    }\n\n    renderHeaderColumn(attrName: string, headerText: string, width: string): JSX.Element {\n        return (\n            <TableCell style={{width: width}}>\n                <span className='header-2'>{headerText}</span>\n                <div style={{float: 'right'}}>\n                    <IconButton \n                        icon={faSort} \n                        onClick={() => {\n                            this.sortBenefits(attrName, true);\n                            this.setState({benefitListUpdated: true});\n                        }} />\n                </div>\n                <InputField\n                    value={this.state[attrName]}\n                    onChange={(value: string) => {\n                        this.setState(prevState => ({...prevState, [attrName]: value}));\n                    }} />\n            </TableCell>\n        );\n    }\n}","import * as React from 'react';\nimport { Button } from '@material-ui/core';\n\ninterface IProps {\n    isSummarizing: boolean;\n    onAssign: () => void;\n    onEscalate: () => void;\n    onSummarize: () => void;\n    onResolve: () => void;\n}\n\nexport class ResolveTicketFooter extends React.Component<IProps> {\n    \n    constructor(props: IProps) {\n        super(props);\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='footer'>\n                <Button \n                    className='button-neutral'\n                    onClick={this.props.onAssign}>\n                    Assign\n                </Button>\n                <Button \n                    className='button-error'\n                    onClick={this.props.onEscalate}>\n                    Escalate\n                </Button>\n                {this.props.isSummarizing ? (\n                    <Button \n                        className='button'\n                        onClick={this.props.onResolve}>\n                        Mark as Resolved\n                    </Button>\n                ) : (\n                    <Button \n                        className='button'\n                        onClick={this.props.onSummarize}>\n                        Summarize Assessment\n                    </Button>\n                )}\n                \n                \n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Grid, TableRow, TableCell } from '@material-ui/core';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\nimport { faSort, faCheck, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\ninterface IStates {\n    code: string;\n    name: string;\n    location: string;\n\n    facilitiesListUpdated: boolean;\n}\n\nexport class PartnerNetworkSection extends React.Component<{}, IStates> {\n    \n    dummyData = [\n        { code: '87854', name: 'St. Mary’s Hospital Calamba', location: 'CMC Ave, Real, Calamba, Laguna' },\n        { code: '40092', name: 'Evangelista Medical Specialty Hospital', location: 'Macaria Drive, San Pedro, Laguna' },\n        { code: '14659', name: 'Los Banos Doctors Hospital and Medical Center', location: 'Lopez Ave, Los Baños, Laguna' }\n    ];\n\n    dummyGroups = [\n        { checked: true, label: 'Top 5 Hospitals' },\n        { checked: false, label: 'Top 6 Hospitals' },\n        { checked: true, label: 'Healthway Clinics' },\n        { checked: false, label: 'Medical City Network' }\n    ]\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            code: '',\n            name: '',\n            location: '',\n            facilitiesListUpdated: false\n        }\n    }\n\n    getFilteredFacilitiesData(): any {\n        return (\n            this.dummyData\n                .filter(facility => \n                    this.state.code === '' || \n                    facility.code.toLowerCase().includes(this.state.code.toLowerCase()))\n                .filter(facility => \n                    this.state.name === '' || \n                    facility.name.toLowerCase().includes(this.state.name.toLowerCase()))\n                .filter(facility => \n                    this.state.location === '' || \n                    facility.location.toLowerCase().includes(this.state.location.toLowerCase()))\n        );\n    }\n\n    sortFacilities(attrName: string, isAsc: boolean): void {\n        this.dummyData.sort((a: any, b: any) => \n            (a[attrName].toString().toLowerCase() > b[attrName].toString().toLowerCase()) ? (isAsc ? 1 : -1) : (isAsc ? -1 : 1)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Check Partner Network</div>\n                <div className='sub-section'>\n                    <div className='header-2'>TYPE</div>\n                    <div className='small-text'>Open Door</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='header-2'>GROUP</div>\n                    <Grid className='sub-section' container spacing={2} style={{width: '50%'}}>\n                        {this.dummyGroups.map(group => {\n                            return (\n                                <Grid item xs={6}>\n                                    <span>\n                                        {group.checked ? (\n                                            <FontAwesomeIcon icon={faCheck} style={{color: '#3AB77D'}} />\n                                        ) : (\n                                            <FontAwesomeIcon icon={faTimes} style={{color: '#FD5451'}} />\n                                        )}\n                                    </span>\n                                    <span style={{paddingLeft: '1rem'}}>{group.label}</span>\n                                </Grid>\n                            );\n                        })}\n                    </Grid>\n                </div>\n                <div className='sub-section'>\n                    <Grid className='sub-section' container spacing={2}>\n                        <Grid item xs={2}>\n                            <TextButton label='Excluded Hospitals' onClick={() => {}} />\n                        </Grid>\n                        <Grid item xs={2}>\n                            <TextButton label='Included Hospitals' onClick={() => {}} />   \n                        </Grid>\n                    </Grid>\n                    <CustomTable\n                        rows={this.getFilteredFacilitiesData()}\n                        renderHeader={() => this.renderTableHeader()}\n                        renderRow={(rowData: any, index: number) => \n                            this.renderTableRow(rowData, index)} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n        \n        return (\n            <>\n            {this.renderHeaderColumn('code', 'Facility Code')}\n            {this.renderHeaderColumn('name', 'Name')}\n            {this.renderHeaderColumn('location', 'Location')}\n            </>\n        );\n    }\n\n    renderTableRow(facility: any, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                <TableCell>{facility.code}</TableCell>\n                <TableCell>{facility.name}</TableCell>\n                <TableCell>{facility.location}</TableCell>\n            </TableRow>\n        );\n    }\n\n    renderHeaderColumn(attrName: string, headerText: string): JSX.Element {\n        return (\n            <TableCell>\n                <span className='header-2'>{headerText}</span>\n                <div style={{float: 'right'}}>\n                    <IconButton \n                        icon={faSort} \n                        onClick={() => {\n                            this.sortFacilities(attrName, true);\n                            this.setState({facilitiesListUpdated: true});\n                        }} />\n                </div>\n                <InputField\n                    value={this.state[attrName]}\n                    onChange={(value: string) => {\n                        this.setState(prevState => ({...prevState, [attrName]: value}));\n                    }} />\n            </TableCell>\n        );\n    }\n}","import * as React from 'react';\nimport { ComplexTable } from 'Pages/CustomerCarePage/Components/ComplexTable';\nimport { Grid, TableCell, TableRow } from '@material-ui/core';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { ProcedureData, AvailmentDetails, DiagnosisData, LOAData } from 'Pages/CustomerCarePage/Models';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { NumberField } from 'Pages/CustomerCarePage/Components/NumberField';\nimport { DatePicker } from 'Pages/CustomerCarePage/Components/DatePicker';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { faPlus, faPen, faMinusCircle, faCheckCircle, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\n\ninterface IProps {\n    availment: AvailmentDetails;\n    loas: LOAData[];\n    refreshLOAStates: () => void;\n}\n\ninterface IStates {\n    loaNumber: number;\n    amount: number;\n    loaDate: Date;\n    notes: string;\n\n    indexToEdit: number;\n    editLoaNumber: number;\n    editAmount: number;\n    editLoaDate: Date;\n    editNotes: string;\n}\n\nexport class SummaryAvailmentSection extends React.Component<IProps, IStates> {\n\n    APPROVED = 'Approved';\n    DISAPPROVED = 'Disapproved';\n    PENDING = 'Pending';\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            loaNumber: 0,\n            amount: 0,\n            loaDate: new Date(),\n            notes: '',\n\n            indexToEdit: -1,\n            editLoaNumber: 0,\n            editAmount: 0,\n            editLoaDate: new Date(),\n            editNotes: ''\n        }\n    }\n\n    getProceduresCost = (diagnosis: DiagnosisData) => {\n        let total = 0;\n        diagnosis.procedures.map(procedure => {\n            total += procedure.amount;\n        })\n        return total;\n    }\n\n    getApprovedAvailments = () => {\n        const approvedAvailments = this.props.availment.diagnoses.map(diagnosis => {\n            return {\n                ...diagnosis,\n                procedures: diagnosis.procedures\n                    .filter(procedure => procedure.assessmentType === this.APPROVED)\n                    .map(procedure => {\n                        return procedure;\n                    })\n            };\n        });\n        return approvedAvailments.filter(availment => availment.procedures.length > 0);\n    }\n\n    getDisapprovedAvailments = () => {\n        const disapprovedAvailments = this.props.availment.diagnoses.map(diagnosis => {\n            return {\n                ...diagnosis,\n                procedures: diagnosis.procedures\n                    .filter(procedure => procedure.assessmentType === this.DISAPPROVED)\n                    .map(procedure => {\n                        return procedure;\n                    })\n            };\n        });\n        return disapprovedAvailments.filter(availment => availment.procedures.length > 0);\n    }\n\n    getApprovedAvailmentsCost = () => {\n        let total = 0;\n        this.props.availment.diagnoses.map(diagnosis => {\n            diagnosis.procedures.map(procedure => {\n                total += (procedure.assessmentType === this.APPROVED ? procedure.amount : 0);\n            });\n        });\n        return total;\n    }\n\n    render(): JSX.Element {\n        const approvedAvailments = this.getApprovedAvailments();\n        const disapprovedAvailments = this.getDisapprovedAvailments();\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Summary of Approved Availments</div>\n                <div className='sub-section'>\n                    <div className='light-text'>PROVIDER</div>\n                    <div className='small-text'>\n                    {this.props.availment.provider.label}</div>\n                    <div style={{float: 'right'}}>\n                        <span className='small-text'>TOTAL AMOUNT</span>\n                        <span style={{marginLeft: '1rem'}} />\n                        <span className='header-2'>\n                            {'PHP ' + GlobalFunction.formatNumber(this.getApprovedAvailmentsCost(), true)}\n                        </span>\n                    </div>\n                </div>\n                {approvedAvailments.length > 0 ? (\n                    <div className='sub-section'>\n                        <ComplexTable \n                            data={this.getApprovedAvailments()}\n                            renderHeader={() => this.renderHeader()}\n                            renderRow={(rowData: any, index: number) => \n                                this.renderRow(rowData, index)} />\n                    </div>\n                ) : null}\n                <div className='sub-section'>\n                    {/* <ComplexTable \n                        data={this.props.loas}\n                        renderHeader={() => this.renderLOAHeader()}\n                        renderRow={(rowData: any, index: number) => \n                            this.renderLOARow(rowData, index)} /> */}\n                    <CustomTable\n                        rows={this.props.loas}\n                        renderHeader={() => this.renderLOAHeader()}\n                        renderRow={(rowData: any, index: number) => \n                            this.renderLOARow(rowData, index)} />\n                </div>\n                <div className='sub-section' />\n                {disapprovedAvailments.length > 0 ? (\n                    <>\n                    <div className='header-1' style={{color: '#FD5451'}}>Disapproved Availments</div>\n                    <div className='sub-section'>\n                        <ComplexTable \n                            data={this.getDisapprovedAvailments()}\n                            renderHeader={() => this.renderHeader()}\n                            renderRow={(rowData: any, index: number) => \n                                this.renderRow(rowData, index)} />\n                    </div>\n                    </>\n                ) : null}\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderHeader(): JSX.Element {\n        const headerNameStyle = {\n            margin: 0,\n            padding: '12px 0 12px 0'\n        };\n\n        return (\n            <>\n                <Grid item xs={4}>\n                    <div className='header-2' style={headerNameStyle}>Diagnosis</div>\n                </Grid>\n                <Grid item xs={4}>\n                    <div className='header-2' style={headerNameStyle}>Doctor</div>\n                </Grid>\n                <Grid item xs={2}>\n                    <div className='header-2' style={headerNameStyle}>Professional Fee</div>\n                </Grid>\n                <Grid item xs={2}>\n                    <div className='header-2' style={{...headerNameStyle, textAlign: 'right'}}>\n                        Total Amt. of Procedures\n                    </div>\n                </Grid>\n            </>\n        );\n    }\n\n    renderRow(diagnosis: DiagnosisData, _index: number): JSX.Element {\n        return (\n            <>\n                <Grid className='small-section' container>\n                    <Grid item xs={4}>\n                        {diagnosis.icd10Code.value + ' - ' + diagnosis.icd10Code.label}\n                    </Grid>\n                    <Grid item xs={4}>\n                        {diagnosis.doctors[0].id + ' - ' + diagnosis.doctors[0].name}\n                    </Grid>\n                    <Grid item xs={2}>\n                        {'PHP ' + GlobalFunction.formatNumber(diagnosis.doctors[0].fee, true)}\n                    </Grid>\n                    <Grid item xs={2} style={{fontWeight: 'bold', textAlign: 'right'}}>\n                        {'PHP ' + GlobalFunction.formatNumber(this.getProceduresCost(diagnosis), true)}\n                    </Grid>\n                </Grid>\n                <div className='line-border' />\n                {diagnosis.procedures.map((procedure, index) => {\n                    return this.renderProcedure(procedure, index);\n                })}\n            </>\n        );\n    }\n\n    renderProcedure(procedure: ProcedureData, index: number): JSX.Element {\n\n        return (\n            <>\n            <div className='line-border' />\n            <div className='section' >\n                <Grid container>\n                    <Grid item xs={4}>\n                        <div>\n                            <Grid container>\n                                <Grid item xs={2} style={{padding: '0 0.5rem', marginTop: '-3px'}}>\n                                    <div className='number-item'>\n                                    {index + 1}\n                                    </div>\n                                </Grid>\n                                <Grid item xs={10} className='header-2'>\n                                    {procedure.cptCode.value + ' - ' + procedure.cptCode.label}\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Grid>\n                </Grid>\n                <Grid container>\n                    <Grid item xs={4}>\n                        <div>\n                            <Grid container>\n                                <Grid item xs={2} />\n                                <Grid item xs={10}>\n                                    <div className='sub-section'>\n                                        <div className='light-text'>AMOUNT</div>\n                                        <div className='small-text'>{'PHP ' + GlobalFunction.formatNumber(procedure.amount, true)}</div>\n                                    </div>\n                                    <div className='sub-section'>\n                                        <div className='light-text'>PHILHEALTH REQUIRED?</div>\n                                        <div className='small-text'>{procedure.isPHIC ? 'Yes' : 'No'}</div>\n                                    </div>\n                                    <div className='sub-section'>\n                                        <div className='light-text'>DATE OF AVAILMENT</div>\n                                        <div className='small-text'>{'May 19, 2019 *'}</div>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <div className='sub-section'>\n                            <div className='light-text'>SYSTEM ASSESSMENT</div>\n                            <div className='small-text'>{'Approve *'}</div>\n                        </div>\n                        <div className='sub-section'>\n                            <div className='light-text'>REMAINING BALANCE</div>\n                            <div className='small-text'>{'PHP ' + 0 + '.00 *'}</div>\n                        </div>\n                        <div className='sub-section'>\n                            <div className='light-text'>CLAUSE</div>\n                            <div className='small-text'>{'Laboratory tests, x-rays, and other diagnostic examinations prescribed by the INTELLICARE physician*'}</div>\n                        </div>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <div className='sub-section'>\n                            <div className='light-text'>ASSESSMENT</div>\n                            <div className='header-2'>{procedure.assessmentType}</div>\n                        </div>\n                        <div className='sub-section'>\n                            <div className='light-text'>REMARKS</div>\n                            <div className='small-text'>\n                                {procedure.assessmentRemarks ? procedure.assessmentRemarks : 'NONE'}\n                            </div>\n                        </div>\n                    </Grid>\n                </Grid>\n            </div>\n            </>\n        );\n    }\n\n    renderLOAHeader(): JSX.Element {\n        return (\n            <>\n            <TableCell style={{minWidth: '100px', maxWidth: '100px'}}>\n                <div className='header-2'>LOA Number</div>\n                <NumberField\n                    value={this.state.loaNumber}\n                    onChange={(value: number) => this.setState({loaNumber: value})} />\n            </TableCell>\n            <TableCell style={{minWidth: '100px', maxWidth: '100px'}}>\n                <div className='header-2'>Amount</div>\n                <NumberField\n                    value={this.state.amount}\n                    onChange={(value: number) => this.setState({amount: value})} />\n            </TableCell>\n            <TableCell style={{minWidth: '100px', maxWidth: '100px'}}>\n                <div className='header-2'>Date</div>\n                <DatePicker\n                    value={this.state.loaDate}\n                    onChange={(value: Date) => this.setState({loaDate: value})} />\n            </TableCell>\n            <TableCell>\n                <div className='header-2'>Notes</div>\n                <InputField\n                    value={this.state.notes}\n                    onChange={(value: string) => this.setState({notes: value})} />\n            </TableCell>\n            <TableCell style={{minWidth: '75px', maxWidth: '75px', textAlign: 'center'}}>\n                <TextButton \n                    label='Add LOA'\n                    icon={faPlus}\n                    onClick={() => {\n                        this.props.loas.push({\n                            loaNo: this.state.loaNumber,\n                            amount: this.state.amount,\n                            date: this.state.loaDate,\n                            notes: this.state.notes\n                        });\n                        this.props.refreshLOAStates();\n                        this.setState({\n                            loaNumber: 0, \n                            amount: 0,\n                            loaDate: new Date(),\n                            notes: ''\n                        });\n                    }}/>\n            </TableCell>\n            </>\n        );\n    }\n\n    renderLOARow(loa: LOAData, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                {this.state.indexToEdit !== index ? (\n                    <>\n                    <TableCell>{loa.loaNo}</TableCell>\n                    <TableCell>{GlobalFunction.formatNumber(loa.amount)}</TableCell>\n                    <TableCell>{GlobalFunction.toCommonDateString(loa.date)}</TableCell>\n                    <TableCell>{loa.notes}</TableCell>\n                    <TableCell>\n                        <Grid container>\n                            <Grid item xs={6} />\n                            <Grid item xs={3}>\n                                <IconButton\n                                    icon={faPen}\n                                    onClick={() => {\n                                        this.setState({\n                                            indexToEdit: index,\n                                            editAmount: loa.amount,\n                                            editLoaDate: loa.date,\n                                            editLoaNumber: loa.loaNo,\n                                            editNotes: loa.notes\n                                        });\n                                    }}  />\n                            </Grid>\n                            <Grid item xs={3}>\n                                <IconButton\n                                    icon={faMinusCircle}\n                                    onClick={() => {\n                                        this.props.loas.splice(index, 1);\n                                        this.props.refreshLOAStates();\n                                    }}/>\n                            </Grid>\n                        </Grid>\n                    </TableCell>\n                    </>\n                ) : (\n                    <>\n                    <TableCell>\n                        <NumberField\n                            value={this.state.editLoaNumber}\n                            onChange={(value: number) => this.setState({editLoaNumber: value})} />\n                    </TableCell>\n                    <TableCell>\n                        <NumberField\n                            value={this.state.editAmount}\n                            onChange={(value: number) => this.setState({editAmount: value})} />\n                    </TableCell>\n                    <TableCell>\n                        <DatePicker\n                            value={this.state.editLoaDate}\n                            onChange={(value: Date) => this.setState({editLoaDate: value})} />\n                    </TableCell>\n                    <TableCell>\n                        <InputField\n                            value={this.state.editNotes}\n                            onChange={(value: string) => this.setState({editNotes: value})} />\n                    </TableCell>\n                    <TableCell>\n                        <Grid container>\n                            <Grid item xs={6} />\n                            <Grid item xs={3}>\n                                <IconButton\n                                    icon={faCheckCircle}\n                                    onClick={() => {\n                                        this.props.loas[index] = {\n                                            loaNo: this.state.editLoaNumber,\n                                            amount: this.state.editAmount,\n                                            date: this.state.editLoaDate,\n                                            notes: this.state.editNotes\n                                        };\n                                        this.setState({indexToEdit: -1});\n                                    }}  />\n                            </Grid>\n                            <Grid item xs={3}>\n                                <IconButton\n                                    icon={faTimesCircle}\n                                    onClick={() => {\n                                        this.setState({indexToEdit: -1});\n                                    }}/>\n                            </Grid>\n                        </Grid>\n                    </TableCell>\n                    </>\n                )}\n                \n            </TableRow>\n        );\n    }\n}","import * as React from 'react';\n// import { TicketData } from 'Pages/CustomerCarePage/Models';\nimport { API } from 'Pages/CustomerCarePage/API';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\nimport { Grid } from '@material-ui/core';\nimport { TicketData, AvailmentDetails, ConfinementDetails } from 'Pages/CustomerCarePage/Models';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\n\ninterface IProps {\n    ticketId: string;\n    onCloseButtonClicked: () => void;\n}\n\ninterface IStates {\n    ticket?: TicketData;\n    availment?: AvailmentDetails;\n    confinement?: ConfinementDetails;\n}\n\nexport class TicketInfoModal extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            \n        };\n    }\n\n    componentDidMount() {\n        console.log(this.props.ticketId);\n\n        API.get('customer-care/tickets/' + this.props.ticketId, \n            (response) => {\n                const ticketCategory = response.ticket_category;\n                const availmentDetails = ticketCategory.availment_details;\n                const confinementDetails = ticketCategory.confinement_details;\n                this.setState({ticket: {\n                    ticketChannel: response.received_via,\n                    transactionNo: response.transaction_no,\n                    ticketSource: response.received_from,\n                    memberName: response.member_name,\n                    clientName: response.corporate_client,\n                    brokerName: response.broker,\n                    facility: { value: '', label: response.hospital_name },\n                    department: response.department,\n                    callerName: response.caller_name,\n                    contactNo: response.contact_no,\n                    ticketType: ticketCategory.ticket_type,\n                    specificType: ticketCategory.specific_type,\n                    urgency: ticketCategory.urgency,\n                    agent: { id: '', name: ticketCategory.assign_to },\n                    additionalNotes: response.additional_notes,\n                    additionalFiles: [],\n                    ticketNo: response.ticket_no,\n                    pmCaseId: response.pmaker_case_uid,\n                    status: response.status,\n                    createdBy: { id: response.created_by.id, name: response.created_by.name },\n                    dateCreated: new Date(response.date_created),\n                    dateUpdated: new Date(response.date_updated),\n                    dateEscalated: new Date(response.date_escalated)\n                }});\n                \n                if (availmentDetails) {\n                    const providerData = availmentDetails.provider.split(' - ');\n                    this.setState({availment: {\n                        provider: { value: providerData[0], label: providerData[1] },\n                        diagnoses: availmentDetails.availments_list.map(diagnosis => {\n                            return {\n                                icd10Code: { value: diagnosis.code, label: diagnosis.name },\n                                remarks: diagnosis.remarks,\n                                isPrimary: diagnosis.is_primary,\n                                isFinal: diagnosis.is_final,\n                                doctors: diagnosis.doctors.map(doctor => {\n                                    return {\n                                        id: doctor.id,\n                                        name: doctor.name,\n                                        specialization: doctor.specialization,\n                                        fee: doctor.fee,\n                                        noOfVisits: doctor.no_of_visits,\n                                        remarks: doctor.remarks\n                                    }\n                                }),\n                                procedures: diagnosis.procedures.map(procedure => {\n                                    return {\n                                        cptCode: { value: procedure.code, label: procedure.name },\n                                        isPHIC: procedure.phic,\n                                        amount: parseInt(procedure.amount),\n                                        notes: procedure.notes,\n                                        assessmentType: procedure.assessment_type,\n                                        assessmentRemarks: procedure.assessment_remarks\n                                    }\n                                })\n                            }\n                        })\n                    }});\n                }\n\n                if (confinementDetails) {\n                    const providerData = availmentDetails.provider.split(' - ');\n                    this.setState({availment: {\n                        provider: { value: providerData[0], label: providerData[1] },\n                        diagnoses: availmentDetails.availments_list.map(diagnosis => {\n                            return {\n                                icd10Code: { value: diagnosis.code, label: diagnosis.name },\n                                remarks: diagnosis.remarks,\n                                isPrimary: diagnosis.is_primary,\n                                isFinal: diagnosis.is_final,\n                                doctors: diagnosis.doctors.map(doctor => {\n                                    return {\n                                        id: doctor.id,\n                                        name: doctor.name,\n                                        specialization: doctor.specialization,\n                                        fee: doctor.fee,\n                                        noOfVisits: doctor.no_of_visits,\n                                        remarks: doctor.remarks\n                                    }\n                                }),\n                                procedures: diagnosis.procedures.map(procedure => {\n                                    return {\n                                        cptCode: { value: procedure.code, label: procedure.name },\n                                        isPHIC: procedure.phic,\n                                        amount: parseInt(procedure.amount),\n                                        notes: procedure.notes,\n                                        assessmentType: procedure.assessment_type,\n                                        assessmentRemarks: procedure.assessment_remarks\n                                    }\n                                })\n                            }\n                        })\n                    }});\n                }\n            },\n            (error) => {\n                console.log(error);\n            });\n    }\n\n    getTotalAailmentProcedureCost(): number {\n        let total = 0;\n\n        if (this.state.availment) {\n            this.state.availment.diagnoses.map(diagnosis => \n                diagnosis.procedures.map(procedure => \n                    total += procedure.amount\n                )\n            )\n        }\n        \n        return total;\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='ticket-modal section'>\n                <div style={{float: 'right', marginTop: '-1rem', fontSize: '1rem'}}>\n                    <IconButton \n                        icon={faTimes} \n                        onClick={() => {\n                            this.props.onCloseButtonClicked();\n                        }} />\n                </div>\n                {this.state.ticket ? (\n                    this.renderTicketInfo(this.state.ticket)\n                ) : null}\n            </div>\n        )\n    }\n\n    renderTicketInfo(ticket: TicketData): JSX.Element {\n        return (\n            <>\n            <div className='sub-sections'>\n                <div className='header-1'>{'Ticket 0000823'}</div>\n                <div className='text'>{ticket.status + ' - ' + ticket.urgency + ', Due on May 23, 2019*'}</div>\n            </div>\n            <div className='sub-section'>\n                {/* <div className='text'>{name}</div>\n                <div className='text'>{\"Happytime Technology Inc.\"}</div>\n                <div className='text'>{'Rank and File - Principal'}</div> */}\n                <Grid container>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>TICKET TYPE</div>\n                        <div className='small-text'>{ticket.ticketType}</div>\n                    </Grid>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>SPECIFIC TYPE</div>\n                        <div className='small-text'>{ticket.specificType}</div>\n                    </Grid>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>RECEIVED VIA</div>\n                        <div className='small-text'>{ticket.ticketChannel}</div>\n                    </Grid>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>CALL TRANSACTION NO.</div>\n                        <div className='small-text'>{ticket.transactionNo}</div>\n                    </Grid>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>RECEIVED FROM</div>\n                        <div className='small-text'>{'??? ' + '(' + ticket.ticketSource + ')'}</div>\n                    </Grid>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>NUMBER / EMAIL</div>\n                        <div className='small-text'>{ticket.contactNo}</div>\n                    </Grid>\n                </Grid>\n                <div className='sub-section'>\n                    <div className='light-text'>ASSIGNED TO</div>\n                    <div className='small-text'>{ticket.agent.name}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>DIAGNOSIS — PROCEDURES</div>\n                    {this.state.availment ? (\n                        <Grid container spacing={2} className='sub-section'>\n                            {this.state.availment.diagnoses.map((diagnosis, index) => {\n                                return (\n                                    <>\n                                    <Grid item xs={12} className='header-2'>\n                                        {(index + 1) + '. ' +\n                                         diagnosis.icd10Code.value + ' - ' + \n                                         diagnosis.icd10Code.label}\n                                    </Grid>\n                                    {diagnosis.procedures.map((procedure, index2) => {\n                                        return (\n                                            <>\n                                            <Grid item xs={1} />\n                                            <Grid item xs={11} className='small-text'>\n                                                {(index2 + 10).toString(36) + '. ' + procedure.cptCode.label}\n                                            </Grid>\n                                            </>\n                                        );\n                                    })}\n                                    </>\n                                );\n                            })}\n                        </Grid>\n                    ) : null}\n                    {/* <div className='sub-section'> */}\n                    <div style={{paddingTop: '0.5rem'}} />\n                    <div className='header-2'>{'TOTAL: PHP ' + GlobalFunction.formatNumber(this.getTotalAailmentProcedureCost(), true)}</div>\n                {/* </div> */}\n                </div>\n                \n                <div className='sub-section'>\n                    <div className='light-text'>CREATED BY</div>\n                    <div className='small-text'>{ticket.createdBy.name}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>DATE AND TIME CREATED</div>\n                    <div className='small-text'>{GlobalFunction.toDateAndTime(ticket.dateCreated)}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>DATE AND TIME LAST UPDATED</div>\n                    <div className='small-text'>{GlobalFunction.toDateAndTime(ticket.dateUpdated)}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>DATE AND TIME LAST ESCALATED</div>\n                    <div className='small-text'>{\"May 14, 2019 — 09:33:00 AM*\"}</div>\n                </div>\n                {/* <div className='sub-section'> */}\n                    \n                {/* </div> */}\n            </div>\n            <TextButton\n                        label='View More'\n                        onClick={() => {\n\n                        }} />\n            </>\n        )\n    }\n}","import * as React from 'react';\nimport { TableCell, TableRow } from '@material-ui/core';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\n\nimport { DropdownChoice, PartialTicketData } from 'Pages/CustomerCarePage/Models';\nimport { API } from 'Pages/CustomerCarePage/API';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\nimport { faSort } from '@fortawesome/free-solid-svg-icons';\nimport { TicketInfoModal } from './TicketInfoModal';\nimport { LabelDisplayedRowsArgs } from '@material-ui/core/TablePagination';\nimport { Loading } from 'Pages/CustomerCarePage/Components/Loading';\n\ninterface IProps {\n    ticketNo: string;\n}\n\ninterface IStates {\n    urgency: number;\n    status: string;\n    ticketNo: string;\n    channel: string;\n    type: string;\n    specificType: string;\n    source: string;\n    assignee: string;\n    lastUpdate: string;\n    ticketListUpdated: boolean;\n    selectedTicketId?: string;\n}\n\nexport class ReviewTicketsSection extends React.Component<IProps, IStates> {\n\n    ticketChannels: DropdownChoice[];\n    ticketTypes: DropdownChoice[];\n    specificTypes: DropdownChoice[];\n    tickets: PartialTicketData[];\n\n    constructor(props: any) {\n        super(props);\n\n        this.ticketChannels = [\n            { value: '0', label: '' },\n            { value: '1', label: 'Call' },\n            { value: '2', label: 'SMS' },\n            { value: '3', label: 'Text' },\n            { value: '4', label: 'Email' }\n        ];\n\n        this.ticketTypes = [\n            { value: '0', label: '' },\n            { value: '1', label: 'Availment' },\n            { value: '2', label: 'Inquiry' }\n        ];\n\n        this.specificTypes = [\n            { value: '0', label: '' },\n            { value: '1', label: 'Outpatient Procedure' },\n            { value: '2', label: 'Inpatient' },\n            { value: '3', label: 'Emergency Room' },\n            { value: '4', label: 'Consultation' }\n        ];\n\n        this.state = {\n            urgency: 0,\n            status: '',\n            ticketNo: '',\n            channel: '',\n            type: '',\n            specificType: '',\n            source: '',\n            assignee: '',\n            lastUpdate: '',\n            ticketListUpdated: false,\n            selectedTicketId: undefined\n        }\n\n        this.tickets = [];\n    }\n\n    componentDidMount() {\n        API.get('customer-care/tickets',\n            (response) => {\n                this.tickets = response.map(ticket => {\n                    return {\n                        id: ticket._id,\n                        ticketNo: this.props.ticketNo,\n                        urgency: (\n                            ticket.ticket_category.urgency === 'Low' ? 3 :\n                            ticket.ticket_category.urgency === 'Medium' ? 2 : \n                            ticket.ticket_category.urgency === 'High' ? 1 : 0),\n                        status: ticket.status,\n                        channel: ticket.received_via,\n                        type: ticket.ticket_category.ticket_type,\n                        specificType: ticket.ticket_category.specific_type,\n                        source: {\n                            value: ticket.received_from.toUpperCase(), \n                            label: (\n                                ticket.member_name ? ticket.member_name :\n                                ticket.corporate_client ? ticket.corporate_client :\n                                ticket.broker ? ticket.broker :\n                                ticket.hospital_name ? ticket.hospital_name : ''\n                            )\n                        },\n                        assignee: ticket.ticket_category.assign_to,\n                        lastUpdate: new Date(ticket.date_updated),\n                    }\n                });\n                this.setState({ticketListUpdated: true});\n            },\n            (error) => {\n                console.log(error);\n            });\n    }\n\n    getFilteredTicketData = () => {\n        return (\n            this.tickets\n                .filter(ticket => \n                    this.state.urgency === 0 || \n                    isNaN(this.state.urgency) ||\n                    ticket.urgency === this.state.urgency)\n                .filter(ticket => \n                    this.state.status === '' || \n                    ticket.status\n                        .toLowerCase()\n                        .includes(this.state.status.toLowerCase()))\n                .filter(ticket => \n                    this.state.ticketNo === '' || \n                    ticket.ticketNo\n                        .toLowerCase()\n                        .includes(this.state.ticketNo.toLowerCase()))\n                .filter(ticket => \n                    this.state.channel === '' || \n                    ticket.channel\n                        .toLowerCase()\n                        .includes(this.state.channel.toLowerCase()))\n                .filter(ticket => \n                    this.state.type === '' || \n                    ticket.type\n                        .toLowerCase()\n                        .includes(this.state.type.toLowerCase()))\n                .filter(ticket => \n                    this.state.specificType === '' || \n                    ticket.specificType\n                        .toLowerCase()\n                        .includes(this.state.specificType.toLowerCase()))\n                .filter(ticket => \n                    this.state.source === '' || \n                    ticket.source.label\n                        .toLowerCase()\n                        .includes(this.state.source.toLowerCase()) ||\n                    ticket.source.value\n                        .toLowerCase()\n                        .includes(this.state.source.toLowerCase()))\n                .filter(ticket => \n                    this.state.assignee === '' || \n                    ticket.assignee\n                        .toLowerCase()\n                        .includes(this.state.assignee.toLowerCase()))\n                .filter(ticket => \n                    this.state.lastUpdate === '' || \n                    GlobalFunction.toShortDateString(ticket.lastUpdate)\n                        .toLowerCase()\n                        .includes(this.state.lastUpdate.toLowerCase()))\n        );\n    }\n\n    sortTickets(attrName: string, isAsc: boolean): void {\n        this.tickets.sort((a: PartialTicketData, b: PartialTicketData) => \n            (a[attrName].toString().toLowerCase() > b[attrName].toString().toLowerCase()) ? \n                (isAsc ? 1 : -1) : (isAsc ? -1 : 1)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Review Tickets</div>\n                <div className='sub-section'>\n                    {this.state.ticketListUpdated ? (\n                        <CustomTable\n                            className='custom-table-selectable'\n                            rows={this.getFilteredTicketData()}\n                            renderHeader={() => this.renderTableHeader()}\n                            renderRow={(rowData: any, index: number) => \n                                this.renderTableRow(rowData, index)}\n                            onChangeInfo={(info: LabelDisplayedRowsArgs) => \n                                `${info.from}-${info.to} out of ${info.count} tickets`}\n                            labelRowsPerPage='Show'\n                            rowsPerPageOptions={[10, 25, 50]} />\n                    ) : (\n                        <Loading height='10rem'/>\n                    )}\n                </div>\n\n                {/* Modals */}\n                {this.state.selectedTicketId ? (\n                    <TicketInfoModal \n                        ticketId={this.state.selectedTicketId}\n                        onCloseButtonClicked={() => {\n                            this.setState({selectedTicketId: undefined});\n                        }} />\n                ) : null}\n                <div className='section' />\n            </div>\n        );\n    }\n\n\n\n\n\n    renderTableHeader(): JSX.Element {\n        return (\n            <>\n            {this.renderHeaderColumn('urgency', 'Urgency')}\n            {this.renderHeaderColumn('status', 'Status')}\n            {this.renderHeaderColumn('ticketNo', 'Ticket ID')}\n            {this.renderHeaderColumn('channel', 'Channel')}\n            {this.renderHeaderColumn('type', 'Type')}\n            {this.renderHeaderColumn('specificType', 'Specific Type')}\n            {this.renderHeaderColumn('source', 'Source')}\n            {this.renderHeaderColumn('assignee', 'Assigned')}\n            {this.renderHeaderColumn('lastUpdate', 'Last Update')}\n            </>\n        );\n    }\n\n\n\n\n\n    renderTableRow = (ticket: PartialTicketData, index: number) => {\n        const backgroundColor = (index % 2 === 0 ? (\n                ticket.urgency === 1 ? '#FFF2F2' : '#FFFFFF'\n            ) : (\n                ticket.urgency === 1 ? '#F7ECEC' : '#F6F7FA'\n            ));\n\n        const urgencyColor = (\n            ticket.urgency === 3 ? '#3AB77D' :\n            ticket.urgency === 2 ? '#FAB435' :\n            ticket.urgency === 1 ? '#FD5451' : '')\n        \n        return (\n            <TableRow \n                style={{backgroundColor: backgroundColor}} \n                onClick={() => {\n                    this.setState({selectedTicketId: ticket.id});\n                }}>\n                <TableCell style={{textAlign: 'center', paddingLeft: 0}}>\n                    <div \n                        className='number-item' \n                        style={{display: 'inline-block', backgroundColor: urgencyColor}}>\n                        {ticket.urgency}\n                    </div>\n                </TableCell>\n                <TableCell>{ticket.status}</TableCell>\n                <TableCell>{ticket.ticketNo}</TableCell>\n                <TableCell>{ticket.channel}</TableCell>\n                <TableCell>{ticket.type}</TableCell>\n                <TableCell>{ticket.specificType}</TableCell>\n                <TableCell>\n                    <div className='text'>{ticket.source.label}</div>\n                    <div className='light-text' style={{fontSize: '9px'}}>\n                        {ticket.source.value}\n                    </div>\n                </TableCell>\n                <TableCell>{ticket.assignee}</TableCell>\n                <TableCell>{GlobalFunction.toShortDateString(ticket.lastUpdate)}</TableCell>\n            </TableRow>\n        );\n    }\n\n\n\n    renderHeaderColumn(attrName: string, headerText: string): JSX.Element {\n        return (\n            <TableCell>\n                <span className='header-2'>{headerText}</span>\n                <div style={{float: 'right'}}>\n                    <IconButton \n                        icon={faSort} \n                        onClick={() => {\n                            this.sortTickets(attrName, true);\n                            this.setState({ticketListUpdated: true});\n                        }} />\n                </div>\n                <InputField\n                    value={this.state[attrName]}\n                    onChange={(value: string) => {\n                        this.setState(prevState => ({...prevState, [attrName]: value}));\n                    }} />\n            </TableCell>\n        );\n    }\n}\n\n\n","import * as React from 'react';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { TableRow, TableCell, Grid } from '@material-ui/core';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\nimport { faSort } from '@fortawesome/free-solid-svg-icons';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\n\ninterface IStates {\n    loaId: string;\n    approvalCode: string;\n    diagnosis: string;\n    procedure: string;\n    provider: string;\n    amount: string;\n    sessions: string;\n    dateAvailed: string;\n    type: string;\n    status: string;\n}\n\n\nexport class CheckUtilizationSection extends React.Component<{}, IStates> {\n\n    dummyData = [\n        {\n            loa: { id: '9999-99999', swipe: true },\n            approvalCode: '99999999',\n            diagnosis: { code: '999.99', name: 'ICD10 Name', desc: 'Description.' },\n            procedure: { code: '999.99', name: 'CPT Name', desc: 'Description.' },\n            provider: { name: 'General Santos Doctor’s Hospitals.' },\n            amount: 0,\n            sessions: 1,\n            dateAvailed: new Date(),\n            type: 'IBNR',\n            status: 'Approved'\n        }\n    ]\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            loaId: '',\n            approvalCode: '',\n            diagnosis: '',\n            procedure: '',\n            provider: '',\n            amount: '',\n            sessions: '',\n            dateAvailed: '',\n            type: '',\n            status: ''\n        };\n    }\n    \n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Check Utilization</div>\n                <Grid container className='sub-section' spacing={2}>\n                    <Grid item xs={3}>\n                        <div className='light-text'>ANNUAL BENEFIT LIMIT</div>\n                        <div className='header-1'>{'PHP 0.00'}</div>\n                    </Grid>\n                    <Grid item xs={9}>\n                        <Line \n                            items={[\n                                { value: 70, color: '#3FBB7F', label1: 'UTILIZED', label2: 'PHP 38,021.35' },\n                                { value: 5, color: '#1D236F', label1: 'IBNR', label2: 'PHP 11,978.65' },\n                                { value: 25, color: '#FCB53F', label1: 'AVAILABLE', label2: 'PHP 50,001' }\n                            ]}\n                            maxValue={100} />\n                    </Grid>\n                </Grid>\n                <div className='sub-section'>\n                    <CustomTable\n                        className='custom-table-scrollable'\n                        rows={this.dummyData}\n                        renderHeader={() => this.renderTableHeader()}\n                        renderRow={(rowData: any, index: number) => \n                            this.renderTableRow(rowData, index)} \n                        rowsPerPageOptions={[10, 25, 50]} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n        return (\n            <>\n            {this.renderHeaderColumn('loaId', 'LOA ID', '100px')}\n            {this.renderHeaderColumn('approvalCode', 'Approval Code', '120px')}\n            {this.renderHeaderColumn('diagnosis', 'Diagnosis', '200px')}\n            {this.renderHeaderColumn('procedure', 'Procedure', '200px')}\n            {this.renderHeaderColumn('provider', 'Provider', '150px')}\n            {this.renderHeaderColumn('amount', 'Amount', '100px')}\n            {this.renderHeaderColumn('sessions', 'Sessions', '75px')}\n            {this.renderHeaderColumn('dateAvailed', 'Date Availed', '150px')}\n            {this.renderHeaderColumn('type', 'Type', '75px')}\n            {this.renderHeaderColumn('status', 'Status', '75px')}\n            </>\n        );\n    }\n\n    renderTableRow(utilization: any, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                <TableCell>{utilization.loa.id}</TableCell>\n                <TableCell>{utilization.approvalCode}</TableCell>\n                <TableCell>{utilization.diagnosis.name}</TableCell>\n                <TableCell>{utilization.procedure.name}</TableCell>\n                <TableCell>{utilization.provider.name}</TableCell>\n                <TableCell>{utilization.amount}</TableCell>\n                <TableCell>{utilization.sessions}</TableCell>\n                <TableCell>{GlobalFunction.toCommonDateString(utilization.dateAvailed)}</TableCell>\n                <TableCell>{utilization.type}</TableCell>\n                <TableCell>{utilization.status}</TableCell>\n            </TableRow>\n        );\n    }\n\n\n    renderHeaderColumn(attrName: string, headerText: string, width: string): JSX.Element {\n        return (\n            <TableCell style={{minWidth: width, maxWidth: width}}>\n                <span className='header-2'>{headerText}</span>\n                <div style={{float: 'right'}}>\n                    <IconButton \n                        icon={faSort} \n                        onClick={() => {\n                            // this.sortTickets('urgency', true);\n                            // this.setState({ticketListUpdated: true});\n                        }} />\n                </div>\n                <InputField\n                    value={this.state[attrName]}\n                    onChange={(value: string) => {\n                        this.setState(prevState => ({...prevState, [attrName]: value}));\n                    }} />\n            </TableCell>\n        );\n    }\n}\n\n\ninterface LineProps {\n    items: {\n        value: number;\n        color: string;\n        label1: string;\n        label2: string;\n    }[]\n    maxValue: number;\n}\n\nexport class Line extends React.Component<LineProps> {\n\n    render(): JSX.Element {\n        return (\n            <div style={{width: '50%', height: 0}}>\n                {this.props.items.map(item => {\n                    return (\n                        <div \n                            style={{\n                                width: (item.value / this.props.maxValue * 100) + '%', \n                                height: '6px', \n                                display: 'inline-block',\n                                backgroundColor: item.color\n                            }} />\n                    );\n                })}\n                <div style={{padding: '0.5rem 0'}}>\n                {this.props.items.map(item => {\n                    return (\n                        <div \n                            style={{\n                                width: (1 / this.props.items.length * 100) + '%', \n                                height: '6px', \n                                display: 'inline-block'\n                            }}>\n                            <div>\n                                <div \n                                    style={{\n                                        width: '10px', \n                                        height: '10px', \n                                        backgroundColor: item.color,\n                                        display: 'inline-block',\n                                        marginRight: '1rem'\n                                    }}/>\n                                <div \n                                    className='light-text' \n                                    style={{\n                                        display: 'inline-block'\n                                    }}>\n                                    {item.label1}\n                                </div>\n                                <div \n                                    className='header-2' \n                                    style={{\n                                        color: item.color,\n                                    }}>\n                                    {item.label2}\n                                </div>\n                            </div>\n                         </div>\n                    );\n                })}\n                </div>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Grid, TableCell, TableRow, Tabs, Tab } from '@material-ui/core';\nimport { ConfinementDetails } from '../ResolveTicketPage';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { DiagnosisData, ProcedureData, DoctorData } from 'Pages/CustomerCarePage/Models';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { AccommodationData } from 'Pages/CustomerCarePage/UpdateTicketPage/UpdateTicketProps';\nimport { CustomRadio } from 'Pages/CustomerCarePage/Components/CustomRadio';\nimport { ComplexTable } from 'Pages/CustomerCarePage/Components/ComplexTable';\nimport { InputArea } from 'Pages/CustomerCarePage/Components/InputArea';\n\ninterface IProps {\n    confinement: ConfinementDetails;\n    refreshConfinementState: () => void;\n}\n\ninterface IStates {\n    selectedTab: any;\n}\n\n\nexport class ApproveInpatientSection extends React.Component<IProps, IStates> {\n\n    APPROVED = 'Approved';\n    DISAPPROVED = 'Disapproved';\n    PENDING = 'Pending';\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            selectedTab: 0\n        }\n    }\n\n    getTotalAccommodationCost = (diagnosis: DiagnosisData) => {\n        let totalCost = 0;\n        if (diagnosis.isPrimary) {\n            this.props.confinement.accommodations.map(accommodation => {\n                totalCost += accommodation.costPerDay * accommodation.days;\n            });\n        }\n        return totalCost;\n    }\n\n    getProceduresCost = (diagnosis: DiagnosisData) => {\n        let total = 0;\n        diagnosis.procedures.map(procedure => {\n            total += procedure.amount;\n        });\n        return total;\n    }\n\n    getAttendingPhysicianCost = (diagnosis: DiagnosisData) => {\n        let total = 0;\n        diagnosis.doctors\n            .filter(doctor => doctor.type === 'Attending')\n            .map(doctor => {\n                total += doctor.fee;\n            });\n        return total;\n    }\n\n    getAvailmentCost = (diagnosis: DiagnosisData) => {\n        return (\n            this.getProceduresCost(diagnosis) +\n            this.getAttendingPhysicianCost(diagnosis) +\n            this.getTotalAccommodationCost(diagnosis)\n        );\n    }\n\n    getAllAvailmentsCost = () => {\n        let total = 0;\n        this.props.confinement.diagnoses.map(diagnosis => {\n            total += this.getAvailmentCost(diagnosis);\n        });\n        return total;\n    }\n\n    getAllProceduresCount = () => {\n        let total = 0;\n        this.props.confinement.diagnoses.map(diagnosis => {\n            total += diagnosis.procedures.length;\n        });\n        return total;\n    }\n\n    render(): JSX.Element {\n        const confinement = this.props.confinement;\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Approve or Disapprove Inpatient</div>\n                <Grid container spacing={2}>\n                    <Grid item xs={4}>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>PROVIDER</div>\n                            <div className='small-text'>\n                                {`${confinement.provider.value} - ${confinement.provider.label}`}\n                            </div>\n                        </div>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>KIND OF CONFINEMENT</div>\n                            <div className='small-text'>{confinement.confinementKind}</div>\n                        </div>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>DATE ADMITTED</div>\n                            <div className='small-text'>\n                                {GlobalFunction.toCommonDateString(confinement.dateAdmitted)}\n                            </div>\n                        </div>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>PHILHEALTH</div>\n                            <div className='small-text'>{confinement.coverage.label}</div>\n                        </div>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>LINKED TICKETS</div>\n                            <div className='small-text'>{'---*'}</div>\n                        </div>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>GIFT GIVEN</div>\n                            <div className='small-text'>{confinement.giftGiven ? 'Yes' : 'No'}</div>\n                        </div>\n                    </Grid>\n                </Grid>\n                {this.renderTabs()}\n                {this.state.selectedTab === 0 ? (\n                    this.renderSummarySection(confinement)\n                ) : (\n                    this.renderDiagnosisSection(\n                        confinement.diagnoses.filter(diagnosis => \n                            diagnosis.icd10Code.value === this.state.selectedTab\n                        )[0]\n                    )\n                )}\n                \n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderTabs(): JSX.Element {\n        return (\n            <div className='sub-section'>\n                <Tabs\n                    className='custom-tabs' \n                    value={this.state.selectedTab}\n                    variant='scrollable'\n                    scrollButtons='auto'\n                    indicatorColor='primary'\n                    onChange={(_event: React.ChangeEvent<{}>, value: number) => {\n                        this.setState({selectedTab: value});\n                    }}>\n                        <Tab \n                            value={0} \n                            label={\n                                <div>\n                                    <div className='header-2'>SUMMARY OF DIAGNOSIS</div>\n                                    <div className='smaller-text'>\n                                        {`${GlobalFunction.formatNumber(this.getAllAvailmentsCost(), true)} PHP \n                                        (${this.getAllProceduresCount()} Procedures)`}\n                                    </div>\n                                </div>\n                            } />\n                        {this.props.confinement.diagnoses\n                            .filter(diagnosis => diagnosis.isPrimary)\n                            .map(diagnosis => {\n                                const totalCost = this.getAvailmentCost(diagnosis);\n                                const proceduresCount = diagnosis.procedures.length;\n                                return (\n                                    <Tab \n                                        value={diagnosis.icd10Code.value} \n                                        label={\n                                            <div>\n                                                <div className='header-2'>PRIMARY DIAGNOSIS</div>\n                                                <div className='smaller-text'>\n                                                    {`${GlobalFunction.formatNumber(totalCost, true)} PHP \n                                                    (${proceduresCount} Procedure${proceduresCount > 1 ? 's' : ''})`}\n                                                </div>\n                                            </div>\n                                        } />\n                                );\n                            })}\n                        {this.props.confinement.diagnoses\n                            .filter(diagnosis => !diagnosis.isPrimary)\n                            .map((diagnosis, index) => {\n                                const totalCost = this.getAvailmentCost(diagnosis);\n                                const proceduresCount = diagnosis.procedures.length;\n                                return (\n                                    <Tab \n                                        value={diagnosis.icd10Code.value} \n                                        label={\n                                            <div>\n                                            <div className='header-2'>{`DIAGNOSIS ${index + 1}`}</div>\n                                            <div className='smaller-text'>\n                                                {`${GlobalFunction.formatNumber(totalCost, true)} PHP \n                                                (${proceduresCount} Procedure${proceduresCount > 1 ? 's' : ''})`}\n                                            </div>\n                                            </div>\n                                        } />\n                                );\n                            })}\n                </Tabs>\n                <div style={{borderBottom: '2px solid #1E2071'}} />\n            </div>\n        );\n    }\n\n    renderSummarySection(confinement: ConfinementDetails): JSX.Element {\n        return (\n            <div>\n                {confinement.diagnoses\n                    .filter(diagnosis => diagnosis.isPrimary)\n                    .map(diagnosis => {\n                        return this.renderDiagnosisInfo(diagnosis, 0);    \n                    })}\n                {confinement.diagnoses\n                    .filter(diagnosis => !diagnosis.isPrimary)\n                    .map((diagnosis, index)=> {\n                        return this.renderDiagnosisInfo(diagnosis, index + 1);    \n                    })}\n            </div>\n        );\n    }\n\n    renderDiagnosisInfo(diagnosis: DiagnosisData, index: number): JSX.Element {\n        const procedureCost = this.getProceduresCost(diagnosis);\n        const accommodationCost = this.getTotalAccommodationCost(diagnosis);\n        const attendingPhysicianCost = this.getAttendingPhysicianCost(diagnosis);\n        return (\n            <Grid container className='sub-section'>\n                <div style={{width: '2rem'}}>\n                    <div className='number-item'>{index + 1}</div>\n                </div>\n                <div style={{width: 'calc(100% - 2rem)'}}>\n                    <div style={{marginBottom: '1rem'}}>\n                        <div className='text'>\n                            {`${diagnosis.icd10Code.value} — ${diagnosis.icd10Code.label}`}\n                            {diagnosis.isPrimary ? (\n                                <span className='header-2'>{' (PRIMARY)'}</span>\n                            ) : null}\n                        </div>\n                        {diagnosis.doctors.filter(doctor => doctor.type === 'Admitting')\n                            .map(doctor => {\n                                return (\n                                    <>\n                                    <div className='small-text'>{`${doctor.id} - ${doctor.name}`}</div>\n                                    <div className='small-text'>\n                                        {`PHP ${GlobalFunction.formatNumber(doctor.fee, true)}`}\n                                    </div>\n                                    </>\n                                );\n                            })\n                        }\n                        \n                        <div className='small-text'>\n                            {`Remarks: ${diagnosis.remarks ? diagnosis.remarks : 'None'}`}\n                        </div>\n                        <div className='small-text'>\n                            {`PHIC: No*`}\n                        </div>\n                        <div className='header-2'>\n                            {`TOTAL AMOUNT: ${GlobalFunction.formatNumber(\n                                procedureCost + accommodationCost + attendingPhysicianCost, true\n                            )} PHP`}\n                        </div>\n                        <TextButton \n                            label='Approve/Disapprove Diagnosis' \n                            onClick={() => {\n                                window.scroll(0, -window.pageYOffset);\n                                this.setState({selectedTab: diagnosis.icd10Code.value});\n                            }} />\n                    </div>\n\n                    {this.renderTableSection('PROCEDURES',\n                        <CustomTable\n                            className='custom-table'\n                            rows={diagnosis.procedures}\n                            renderHeader={() => {\n                                return (\n                                    <>\n                                    <TableCell>Procedure</TableCell>\n                                    <TableCell style={{textAlign: 'right', width: '150px'}}>Amount</TableCell>\n                                    <TableCell style={{width: '150px'}}>Date</TableCell>\n                                    <TableCell style={{width: '250px'}}>Clause</TableCell>\n                                    <TableCell style={{textAlign: 'right', width: '150px'}}>Remaining Bal.</TableCell>\n                                    </>\n                                );\n                            }}\n                            renderRow={(procedure: ProcedureData, index: number) => {\n                                const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                                return (\n                                    <TableRow style={{backgroundColor: backgroundColor}}>\n                                        <TableCell>{`${procedure.cptCode.value} — ${procedure.cptCode.label}`}</TableCell>\n                                        <TableCell style={{textAlign: 'right'}}>\n                                            {`${GlobalFunction.formatNumber(procedure.amount, true)} PHP`}\n                                        </TableCell>\n                                        <TableCell>{GlobalFunction.toShortDateString(procedure.dateAdded)}</TableCell>\n                                        <TableCell>{`This is the clause*`}</TableCell>\n                                        <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(9999, true)} PHP*`}</TableCell>\n                                    </TableRow>\n                                );\n                            }} />,\n                            procedureCost\n                    )}\n\n                    {diagnosis.isPrimary ? (\n                        this.renderTableSection('ROOM ACCOMMODATIONS',\n                            <CustomTable\n                                className='custom-table'\n                                rows={this.props.confinement.accommodations}\n                                renderHeader={() => {\n                                    return (\n                                        <>\n                                        <TableCell>Room Type</TableCell>\n                                        <TableCell style={{textAlign: 'right', width: '200px'}}>No. of days</TableCell>\n                                        <TableCell style={{textAlign: 'right', width: '200px'}}>Cost per day</TableCell>\n                                        <TableCell style={{textAlign: 'center', width: '200px'}}>HIMS Assessment</TableCell>\n                                        </>\n                                    );\n                                }}\n                                renderRow={(accommodations: AccommodationData, index: number) => {\n                                    const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                                    return (\n                                        <TableRow style={{backgroundColor: backgroundColor}}>\n                                            <TableCell>{accommodations.roomType}</TableCell>\n                                            <TableCell style={{textAlign: 'right'}}>{accommodations.days}</TableCell>\n                                            <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(accommodations.costPerDay, true)} PHP`}</TableCell>\n                                            <TableCell style={{textAlign: 'center'}}>{`Approve*`}</TableCell>\n                                        </TableRow>\n                                    );\n                                }} />,\n                                accommodationCost\n                        )\n                    ) : null}\n\n                    {this.renderTableSection('ATTENDING PHYSICIANS',\n                        <CustomTable\n                            className='custom-table'\n                            rows={diagnosis.doctors.filter(doctor => doctor.type === 'Attending')}\n                            renderHeader={() => {\n                                return (\n                                    <>\n                                    <TableCell>Name of Doctor</TableCell>\n                                    <TableCell style={{width: '200px'}}>Specialization</TableCell>\n                                    <TableCell style={{textAlign: 'right', width: '125px'}}>No. of Visits</TableCell>\n                                    <TableCell style={{textAlign: 'right', width: '200px'}}>Amount</TableCell>\n                                    </>\n                                );\n                            }}\n                            renderRow={(doctor: DoctorData, index: number) => {\n                                const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                                return (\n                                    <TableRow style={{backgroundColor: backgroundColor}}>\n                                        <TableCell>{doctor.name}</TableCell>\n                                        <TableCell>{doctor.specialization}</TableCell>\n                                        <TableCell style={{textAlign: 'right'}}>{doctor.noOfVisits}</TableCell>\n                                        <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(doctor.fee, true)} PHP`}</TableCell>\n                                    </TableRow>\n                                );\n                            }} />,\n                            attendingPhysicianCost\n                    )}\n                </div>\n            </Grid>\n        );\n    }\n\n    renderTableSection(headerName: string, table: JSX.Element, totalValue?: number): JSX.Element {\n        return (\n            <div className='sub-section'>\n                <div className='header-2'>{headerName}</div>\n                {table}\n                {totalValue ? (\n                    <div className='sub-section'>\n                        <div style={{float: 'right'}}>\n                            <span className='small-text'>TOTAL AMOUNT</span>\n                            <span style={{marginLeft: '1rem'}} />\n                            <span className='header-2'>\n                                {GlobalFunction.formatNumber(totalValue, true) + ' PHP'}\n                            </span>\n                        </div>\n                </div>\n                ) : null}\n            </div>\n        );\n    }\n\n    renderDiagnosisSection(diagnosis: DiagnosisData): JSX.Element {\n        console.log(this.props.confinement.diagnoses);  \n        const procedureCost = this.getProceduresCost(diagnosis);\n        const accommodationCost = this.getTotalAccommodationCost(diagnosis);\n        const attendingPhysicianCost = this.getAttendingPhysicianCost(diagnosis);\n        return (\n            <div className='sub-section' style={{marginLeft: '1rem'}}>\n                <Grid container spacing={2}>\n                    <Grid item xs={6}>\n                        <div className='text'>\n                            {`${diagnosis.icd10Code.value} — ${diagnosis.icd10Code.label}`}\n                            {diagnosis.isPrimary ? (\n                                <span className='header-2'>{' (PRIMARY)'}</span>\n                            ) : null}\n                        </div>\n                        {diagnosis.doctors.filter(doctor => doctor.type === 'Admitting')\n                            .map(doctor => {\n                                return (\n                                    <>\n                                    <div className='small-text'>{`${doctor.id} - ${doctor.name}`}</div>\n                                    <div className='small-text'>\n                                        {`PHP ${GlobalFunction.formatNumber(doctor.fee, true)}`}\n                                    </div>\n                                    </>\n                                );\n                            })\n                        }\n                        \n                        <div className='small-text'>\n                            {`Remarks: ${diagnosis.remarks ? diagnosis.remarks : 'None'}`}\n                        </div>\n                        <div className='small-text'>\n                            {`PHIC: No*`}\n                        </div>\n                        <div className='header-2'>\n                            {`TOTAL AMOUNT: ${GlobalFunction.formatNumber(\n                                procedureCost + accommodationCost + attendingPhysicianCost, true\n                            )} PHP`}\n                        </div>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <div className='light-text'>Choose Assessment</div>\n                        <CustomRadio \n                            label='Approve'\n                            checkedCondition={diagnosis.assessmentType === this.APPROVED}\n                            onChange={() => {\n                                diagnosis.assessmentType = this.APPROVED;\n                                this.props.refreshConfinementState();\n                            }} />\n                        <CustomRadio \n                            label='Disapprove'\n                            checkedCondition={diagnosis.assessmentType === this.DISAPPROVED}\n                            onChange={() => {\n                                diagnosis.assessmentType = this.DISAPPROVED;\n                                this.props.refreshConfinementState();\n                            }} />\n                    </Grid>\n                    <Grid item xs={4}>\n                        <div className='light-text'>Remarks</div>\n                        <InputArea\n                            value={diagnosis.assessmentRemarks}\n                            onChange={(value: string) => {\n                                diagnosis.assessmentRemarks = value;\n                                this.props.refreshConfinementState();\n                            }} />\n                    </Grid>\n                    \n                </Grid>\n                <div className='sub-section'>\n                    <ComplexTable \n                        data={diagnosis.procedures}\n                        renderHeader={() => this.renderHeader()}\n                        renderRow={(rowData: any, index: number) => \n                            this.renderRow(rowData, index)} />\n                </div>\n\n                {diagnosis.isPrimary ? (\n                    this.renderTableSection('ROOM ACCOMMODATIONS',\n                        <CustomTable\n                            className='custom-table'\n                            rows={this.props.confinement.accommodations}\n                            renderHeader={() => {\n                                return (\n                                    <>\n                                    <TableCell>Room Type</TableCell>\n                                    <TableCell style={{textAlign: 'right', width: '200px'}}>No. of days</TableCell>\n                                    <TableCell style={{textAlign: 'right', width: '200px'}}>Cost per day</TableCell>\n                                    <TableCell style={{textAlign: 'center', width: '200px'}}>HIMS Assessment</TableCell>\n                                    </>\n                                );\n                            }}\n                            renderRow={(accommodations: AccommodationData, index: number) => {\n                                const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                                return (\n                                    <TableRow style={{backgroundColor: backgroundColor}}>\n                                        <TableCell>{accommodations.roomType}</TableCell>\n                                        <TableCell style={{textAlign: 'right'}}>{accommodations.days}</TableCell>\n                                        <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(accommodations.costPerDay, true)} PHP`}</TableCell>\n                                        <TableCell style={{textAlign: 'center'}}>{`Approve*`}</TableCell>\n                                    </TableRow>\n                                );\n                            }} />,\n                            accommodationCost\n                    )\n                ) : null}\n\n                {this.renderTableSection('ATTENDING PHYSICIANS',\n                    <CustomTable\n                        className='custom-table'\n                        rows={diagnosis.doctors.filter(doctor => doctor.type === 'Attending')}\n                        renderHeader={() => {\n                            return (\n                                <>\n                                <TableCell>Name of Doctor</TableCell>\n                                <TableCell style={{width: '200px'}}>Specialization</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '125px'}}>No. of Visits</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '200px'}}>Amount</TableCell>\n                                </>\n                            );\n                        }}\n                        renderRow={(doctor: DoctorData, index: number) => {\n                            const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                            return (\n                                <TableRow style={{backgroundColor: backgroundColor}}>\n                                    <TableCell>{doctor.name}</TableCell>\n                                    <TableCell>{doctor.specialization}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{doctor.noOfVisits}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(doctor.fee, true)} PHP`}</TableCell>\n                                </TableRow>\n                            );\n                        }} />,\n                        attendingPhysicianCost\n                )}\n                <div className='section' />\n            </div>\n        );\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n    renderHeader(): JSX.Element {\n        const headerNameStyle = {\n            margin: 0,\n            padding: '12px 0 12px 0'\n        };\n\n        return (\n            <>\n                <Grid item xs={4}>\n                    <div className='header-2' style={headerNameStyle}>Procedure Details</div>\n                </Grid>\n                <Grid item xs={4}>\n                    <div className='header-2' style={headerNameStyle}>System Details</div>\n                </Grid>\n                <Grid item xs={4}>\n                    <div className='header-2' style={headerNameStyle}>Assessment</div>\n                </Grid>\n            </>\n        );\n    }\n\n    renderRow(procedure: ProcedureData, index: number): JSX.Element {\n        return (\n            <div className='section' >\n                \n                <Grid container>\n                    <Grid item xs={4}>\n                        <div>\n                            <Grid container>\n                                <Grid item xs={2} style={{padding: '0 0.5rem', marginTop: '-3px'}}>\n                                    <div className='number-item'>{index + 1}</div>\n                                </Grid>\n                                <Grid item xs={10} className='header-2'>\n                                    {procedure.cptCode.value + ' - ' + procedure.cptCode.label}\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Grid>\n                    \n                </Grid>\n                <Grid container>\n                    <Grid item xs={4}>\n                        <div>\n                            <Grid container>\n                                <Grid item xs={2} />\n                                <Grid item xs={10}>\n                                    <div className='sub-section-2'>\n                                        <div className='light-text'>AMOUNT</div>\n                                        <div className='small-text'>{'PHP ' + GlobalFunction.formatNumber(procedure.amount, true)}</div>\n                                    </div>\n                                    <div className='sub-section-2'>\n                                        <div className='light-text'>PHILHEALTH REQUIRED?</div>\n                                        <div className='small-text'>{procedure.isPHIC ? 'Yes' : 'No'}</div>\n                                    </div>\n                                    <div className='sub-section-2'>\n                                        <div className='light-text'>DATE OF AVAILMENT</div>\n                                        <div className='small-text'>{'May 19, 2019 *'}</div>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>SYSTEM ASSESSMENT</div>\n                            <div className='small-text'>{'Approve *'}</div>\n                        </div>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>REMAINING BALANCE</div>\n                            <div className='small-text'>{'PHP ' + 0 + '.00 *'}</div>\n                        </div>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>CLAUSE</div>\n                            <div className='small-text'>{'Laboratory tests, x-rays, and other diagnostic examinations prescribed by the INTELLICARE physician*'}</div>\n                        </div>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>Choose Assessment</div>\n                            <CustomRadio \n                                label='Approve'\n                                checkedCondition={procedure.assessmentType === this.APPROVED}\n                                onChange={() => {\n                                    procedure.assessmentType = this.APPROVED;\n                                    this.props.refreshConfinementState();\n                                }} />\n                            <CustomRadio \n                                label='Disapprove'\n                                checkedCondition={procedure.assessmentType === this.DISAPPROVED}\n                                onChange={() => {\n                                    procedure.assessmentType = this.DISAPPROVED;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </div>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>Remarks</div>\n                            <InputArea\n                                value={procedure.assessmentRemarks}\n                                onChange={(value: string) => {\n                                    procedure.assessmentRemarks = value;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </div>\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { ComplexTable } from 'Pages/CustomerCarePage/Components/ComplexTable';\nimport { Grid, TableCell, TableRow } from '@material-ui/core';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { ProcedureData, DiagnosisData, LOAData } from 'Pages/CustomerCarePage/Models';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { NumberField } from 'Pages/CustomerCarePage/Components/NumberField';\nimport { DatePicker } from 'Pages/CustomerCarePage/Components/DatePicker';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { faPlus, faPen, faMinusCircle, faCheckCircle, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\nimport { ConfinementDetails } from '../ResolveTicketPage';\n\ninterface IProps {\n    confinement: ConfinementDetails;\n    loas: LOAData[];\n    refreshLOAStates: () => void;\n}\n\ninterface IStates {\n    loaNumber: number;\n    amount: number;\n    loaDate: Date;\n    notes: string;\n\n    indexToEdit: number;\n    editLoaNumber: number;\n    editAmount: number;\n    editLoaDate: Date;\n    editNotes: string;\n}\n\nexport class SummaryInpatientSection extends React.Component<IProps, IStates> {\n\n    APPROVED = 'Approved';\n    DISAPPROVED = 'Disapproved';\n    PENDING = 'Pending';\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            loaNumber: 0,\n            amount: 0,\n            loaDate: new Date(),\n            notes: '',\n\n            indexToEdit: -1,\n            editLoaNumber: 0,\n            editAmount: 0,\n            editLoaDate: new Date(),\n            editNotes: ''\n        }\n    }\n\n    getProceduresCost = (diagnosis: DiagnosisData) => {\n        let total = 0;\n        diagnosis.procedures.map(procedure => {\n            total += procedure.amount;\n        })\n        return total;\n    }\n\n    getApprovedAvailments = () => {\n        const approvedAvailments = this.props.confinement.diagnoses.map(diagnosis => {\n            return {\n                ...diagnosis,\n                procedures: diagnosis.procedures\n                    .filter(procedure => procedure.assessmentType === this.APPROVED)\n                    .map(procedure => {\n                        return procedure;\n                    })\n            };\n        });\n        return approvedAvailments.filter(availment => availment.procedures.length > 0);\n    }\n\n    getDisapprovedAvailments = () => {\n        const disapprovedAvailments = this.props.confinement.diagnoses.map(diagnosis => {\n            return {\n                ...diagnosis,\n                procedures: diagnosis.procedures\n                    .filter(procedure => procedure.assessmentType === this.DISAPPROVED)\n                    .map(procedure => {\n                        return procedure;\n                    })\n            };\n        });\n        return disapprovedAvailments.filter(availment => availment.procedures.length > 0);\n    }\n\n    getApprovedAvailmentsCost = () => {\n        let total = 0;\n        this.props.confinement.diagnoses.map(diagnosis => {\n            diagnosis.procedures.map(procedure => {\n                total += (procedure.assessmentType === this.APPROVED ? procedure.amount : 0);\n            });\n        });\n        return total;\n    }\n\n    render(): JSX.Element {\n        const approvedAvailments = this.getApprovedAvailments();\n        const disapprovedAvailments = this.getDisapprovedAvailments();\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Summary of Approved Availments</div>\n                <div className='sub-section'>\n                    <div className='light-text'>PROVIDER</div>\n                    <div className='small-text'>\n                    {this.props.confinement.provider.label}</div>\n                    <div style={{float: 'right'}}>\n                        <span className='small-text'>TOTAL AMOUNT</span>\n                        <span style={{marginLeft: '1rem'}} />\n                        <span className='header-2'>\n                            {'PHP ' + GlobalFunction.formatNumber(this.getApprovedAvailmentsCost(), true)}\n                        </span>\n                    </div>\n                </div>\n                {approvedAvailments.length > 0 ? (\n                    <div className='sub-section'>\n                        <ComplexTable \n                            data={this.getApprovedAvailments()}\n                            renderHeader={() => this.renderHeader()}\n                            renderRow={(rowData: any, index: number) => \n                                this.renderRow(rowData, index)} />\n                    </div>\n                ) : null}\n                <div className='sub-section'>\n                    {/* <ComplexTable \n                        data={this.props.loas}\n                        renderHeader={() => this.renderLOAHeader()}\n                        renderRow={(rowData: any, index: number) => \n                            this.renderLOARow(rowData, index)} /> */}\n                    <CustomTable\n                        rows={this.props.loas}\n                        renderHeader={() => this.renderLOAHeader()}\n                        renderRow={(rowData: any, index: number) => \n                            this.renderLOARow(rowData, index)} />\n                </div>\n                <div className='sub-section' />\n                {disapprovedAvailments.length > 0 ? (\n                    <>\n                    <div className='header-1' style={{color: '#FD5451'}}>Disapproved Availments</div>\n                    <div className='sub-section'>\n                        <ComplexTable \n                            data={this.getDisapprovedAvailments()}\n                            renderHeader={() => this.renderHeader()}\n                            renderRow={(rowData: any, index: number) => \n                                this.renderRow(rowData, index)} />\n                    </div>\n                    </>\n                ) : null}\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderHeader(): JSX.Element {\n        const headerNameStyle = {\n            margin: 0,\n            padding: '12px 0 12px 0'\n        };\n\n        return (\n            <>\n                <Grid item xs={4}>\n                    <div className='header-2' style={headerNameStyle}>Diagnosis</div>\n                </Grid>\n                <Grid item xs={4}>\n                    <div className='header-2' style={headerNameStyle}>Doctor</div>\n                </Grid>\n                <Grid item xs={2}>\n                    <div className='header-2' style={headerNameStyle}>Professional Fee</div>\n                </Grid>\n                <Grid item xs={2}>\n                    <div className='header-2' style={{...headerNameStyle, textAlign: 'right'}}>\n                        Total Amt. of Procedures\n                    </div>\n                </Grid>\n            </>\n        );\n    }\n\n    renderRow(diagnosis: DiagnosisData, _index: number): JSX.Element {\n        return (\n            <>\n                <Grid className='small-section' container>\n                    <Grid item xs={4}>\n                        {diagnosis.icd10Code.value + ' - ' + diagnosis.icd10Code.label}\n                    </Grid>\n                    <Grid item xs={4}>\n                        {diagnosis.doctors[0].id + ' - ' + diagnosis.doctors[0].name}\n                    </Grid>\n                    <Grid item xs={2}>\n                        {'PHP ' + GlobalFunction.formatNumber(diagnosis.doctors[0].fee, true)}\n                    </Grid>\n                    <Grid item xs={2} style={{fontWeight: 'bold', textAlign: 'right'}}>\n                        {'PHP ' + GlobalFunction.formatNumber(this.getProceduresCost(diagnosis), true)}\n                    </Grid>\n                </Grid>\n                <div className='line-border' />\n                {diagnosis.procedures.map((procedure, index) => {\n                    return this.renderProcedure(procedure, index);\n                })}\n            </>\n        );\n    }\n\n    renderProcedure(procedure: ProcedureData, index: number): JSX.Element {\n\n        return (\n            <>\n            <div className='line-border' />\n            <div className='section' >\n                <Grid container>\n                    <Grid item xs={4}>\n                        <div>\n                            <Grid container>\n                                <Grid item xs={2} style={{padding: '0 0.5rem', marginTop: '-3px'}}>\n                                    <div className='number-item'>\n                                    {index + 1}\n                                    </div>\n                                </Grid>\n                                <Grid item xs={10} className='header-2'>\n                                    {procedure.cptCode.value + ' - ' + procedure.cptCode.label}\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Grid>\n                </Grid>\n                <Grid container>\n                    <Grid item xs={4}>\n                        <div>\n                            <Grid container>\n                                <Grid item xs={2} />\n                                <Grid item xs={10}>\n                                    <div className='sub-section'>\n                                        <div className='light-text'>AMOUNT</div>\n                                        <div className='small-text'>{'PHP ' + GlobalFunction.formatNumber(procedure.amount, true)}</div>\n                                    </div>\n                                    <div className='sub-section'>\n                                        <div className='light-text'>PHILHEALTH REQUIRED?</div>\n                                        <div className='small-text'>{procedure.isPHIC ? 'Yes' : 'No'}</div>\n                                    </div>\n                                    <div className='sub-section'>\n                                        <div className='light-text'>DATE OF AVAILMENT</div>\n                                        <div className='small-text'>{'May 19, 2019 *'}</div>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <div className='sub-section'>\n                            <div className='light-text'>SYSTEM ASSESSMENT</div>\n                            <div className='small-text'>{'Approve *'}</div>\n                        </div>\n                        <div className='sub-section'>\n                            <div className='light-text'>REMAINING BALANCE</div>\n                            <div className='small-text'>{'PHP ' + 0 + '.00 *'}</div>\n                        </div>\n                        <div className='sub-section'>\n                            <div className='light-text'>CLAUSE</div>\n                            <div className='small-text'>{'Laboratory tests, x-rays, and other diagnostic examinations prescribed by the INTELLICARE physician*'}</div>\n                        </div>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <div className='sub-section'>\n                            <div className='light-text'>ASSESSMENT</div>\n                            <div className='header-2'>{procedure.assessmentType}</div>\n                        </div>\n                        <div className='sub-section'>\n                            <div className='light-text'>REMARKS</div>\n                            <div className='small-text'>\n                                {procedure.assessmentRemarks ? procedure.assessmentRemarks : 'NONE'}\n                            </div>\n                        </div>\n                    </Grid>\n                </Grid>\n            </div>\n            </>\n        );\n    }\n\n    renderLOAHeader(): JSX.Element {\n        return (\n            <>\n            <TableCell style={{minWidth: '100px', maxWidth: '100px'}}>\n                <div className='header-2'>LOA Number</div>\n                <NumberField\n                    value={this.state.loaNumber}\n                    onChange={(value: number) => this.setState({loaNumber: value})} />\n            </TableCell>\n            <TableCell style={{minWidth: '100px', maxWidth: '100px'}}>\n                <div className='header-2'>Amount</div>\n                <NumberField\n                    value={this.state.amount}\n                    onChange={(value: number) => this.setState({amount: value})} />\n            </TableCell>\n            <TableCell style={{minWidth: '100px', maxWidth: '100px'}}>\n                <div className='header-2'>Date</div>\n                <DatePicker\n                    value={this.state.loaDate}\n                    onChange={(value: Date) => this.setState({loaDate: value})} />\n            </TableCell>\n            <TableCell>\n                <div className='header-2'>Notes</div>\n                <InputField\n                    value={this.state.notes}\n                    onChange={(value: string) => this.setState({notes: value})} />\n            </TableCell>\n            <TableCell style={{minWidth: '75px', maxWidth: '75px', textAlign: 'center'}}>\n                <TextButton \n                    label='Add LOA'\n                    icon={faPlus}\n                    onClick={() => {\n                        this.props.loas.push({\n                            loaNo: this.state.loaNumber,\n                            amount: this.state.amount,\n                            date: this.state.loaDate,\n                            notes: this.state.notes\n                        });\n                        this.props.refreshLOAStates();\n                        this.setState({\n                            loaNumber: 0, \n                            amount: 0,\n                            loaDate: new Date(),\n                            notes: ''\n                        });\n                    }}/>\n            </TableCell>\n            </>\n        );\n    }\n\n    renderLOARow(loa: LOAData, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                {this.state.indexToEdit !== index ? (\n                    <>\n                    <TableCell>{loa.loaNo}</TableCell>\n                    <TableCell>{GlobalFunction.formatNumber(loa.amount)}</TableCell>\n                    <TableCell>{GlobalFunction.toCommonDateString(loa.date)}</TableCell>\n                    <TableCell>{loa.notes}</TableCell>\n                    <TableCell>\n                        <Grid container>\n                            <Grid item xs={6} />\n                            <Grid item xs={3}>\n                                <IconButton\n                                    icon={faPen}\n                                    onClick={() => {\n                                        this.setState({\n                                            indexToEdit: index,\n                                            editAmount: loa.amount,\n                                            editLoaDate: loa.date,\n                                            editLoaNumber: loa.loaNo,\n                                            editNotes: loa.notes\n                                        });\n                                    }}  />\n                            </Grid>\n                            <Grid item xs={3}>\n                                <IconButton\n                                    icon={faMinusCircle}\n                                    onClick={() => {\n                                        this.props.loas.splice(index, 1);\n                                        this.props.refreshLOAStates();\n                                    }}/>\n                            </Grid>\n                        </Grid>\n                    </TableCell>\n                    </>\n                ) : (\n                    <>\n                    <TableCell>\n                        <NumberField\n                            value={this.state.editLoaNumber}\n                            onChange={(value: number) => this.setState({editLoaNumber: value})} />\n                    </TableCell>\n                    <TableCell>\n                        <NumberField\n                            value={this.state.editAmount}\n                            onChange={(value: number) => this.setState({editAmount: value})} />\n                    </TableCell>\n                    <TableCell>\n                        <DatePicker\n                            value={this.state.editLoaDate}\n                            onChange={(value: Date) => this.setState({editLoaDate: value})} />\n                    </TableCell>\n                    <TableCell>\n                        <InputField\n                            value={this.state.editNotes}\n                            onChange={(value: string) => this.setState({editNotes: value})} />\n                    </TableCell>\n                    <TableCell>\n                        <Grid container>\n                            <Grid item xs={6} />\n                            <Grid item xs={3}>\n                                <IconButton\n                                    icon={faCheckCircle}\n                                    onClick={() => {\n                                        this.props.loas[index] = {\n                                            loaNo: this.state.editLoaNumber,\n                                            amount: this.state.editAmount,\n                                            date: this.state.editLoaDate,\n                                            notes: this.state.editNotes\n                                        };\n                                        this.setState({indexToEdit: -1});\n                                    }}  />\n                            </Grid>\n                            <Grid item xs={3}>\n                                <IconButton\n                                    icon={faTimesCircle}\n                                    onClick={() => {\n                                        this.setState({indexToEdit: -1});\n                                    }}/>\n                            </Grid>\n                        </Grid>\n                    </TableCell>\n                    </>\n                )}\n                \n            </TableRow>\n        );\n    }\n}","import * as React from 'react';\nimport {  ConsultationDetails } from 'Pages/CustomerCarePage/Models';\nimport { CustomRadio } from 'Pages/CustomerCarePage/Components/CustomRadio';\nimport { Grid } from '@material-ui/core';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\n\ninterface IProps {\n    consultation: ConsultationDetails;\n    refreshConsultationState: () => void;\n}\n\ninterface IStates {\n    selectedTab: any;\n}\n\nexport class ApproveConsultationSection extends React.Component<IProps, IStates> {\n\n    APPROVED = 'Approved';\n    DISAPPROVED = 'Disapproved';\n    PENDING = 'Pending';\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            selectedTab: 0\n        }\n    }\n\n    render(): JSX.Element {\n        console.log(this.props.consultation)\n        const consultation = this.props.consultation;\n        return (\n            <Grid container className='section'>\n                <Grid item xs={6}>\n                    <div style={{paddingTop: '2.5rem'}} />\n                    <div className='header-1'>Resolve Consultation</div>\n                    <div className='sub-section-2'>\n                        <div className='light-text'>PROVIDER</div>\n                        <div className='small-text'>\n                            {`${consultation.provider.value} - ${consultation.provider.label}`}\n                        </div>\n                    </div>\n                    <div className='sub-section-2'>\n                        <div className='light-text'>DIAGNOSIS</div>\n                        <div className='small-text'>\n                            {`${consultation.diagnosis.value} - ${consultation.diagnosis.label}`}\n                        </div>\n                    </div>\n                    <div className='sub-section-2'>\n                        <div className='light-text'>DOCTOR</div>\n                        <div className='small-text'>\n                            {`${consultation.doctor.value} - ${consultation.doctor.label}`}\n                        </div>\n                    </div>\n                    <div className='sub-section-2'>\n                        <div className='light-text'>NOTES</div>\n                        <div className='small-text'>{consultation.notes ? consultation.notes : 'None'}</div>\n                    </div>\n                    <div className='sub-section'>\n                    <div className='header-2'>ASSESSMENT</div>\n                        <CustomRadio \n                            label='Approve'\n                            checkedCondition={consultation.assessmentType === this.APPROVED}\n                            onChange={() => {\n                                consultation.assessmentType = this.APPROVED;\n                                this.props.refreshConsultationState();\n                            }} />\n                        <CustomRadio \n                            label='Disapprove'\n                            checkedCondition={consultation.assessmentType === this.DISAPPROVED}\n                            onChange={() => {\n                                consultation.assessmentType = this.DISAPPROVED;\n                                this.props.refreshConsultationState();\n                            }} />\n                        <CustomRadio \n                            label='Pending'\n                            checkedCondition={consultation.assessmentType === this.PENDING}\n                            onChange={() => {\n                                consultation.assessmentType = this.PENDING;\n                                this.props.refreshConsultationState();\n                            }} />\n                        <InputField\n                            placeholder='Reason'\n                            value={consultation.assessmentRemarks}\n                            onChange={(value: string) => {\n                                consultation.assessmentRemarks = value;\n                                this.props.refreshConsultationState();\n                            }} />\n                    </div>\n                    <div className='section' />\n                </Grid>\n            </Grid>\n        );\n    }\n}","\nimport * as React from 'react';\nimport { match } from \"react-router-dom\";\nimport { API } from '../API';\nimport { MemberData, TicketData, AvailmentDetails, LOAData, DropdownChoice, DiagnosisData, ConsultationDetails } from '../Models';\nimport { MemberDataSection } from '../MemberDataSection';\nimport { CustomTabs } from '../Components/CustomTab';\nimport { Grid } from '@material-ui/core';\nimport { ApproveAvailmentSection } from './Components/ApproveAvailmentSection';\nimport { CheckBenefitSection } from './Components/CheckBenefitSection';\nimport { ResolveTicketFooter } from './Components/ResolveTicketFooter';\nimport { PartnerNetworkSection } from './Components/PartnerNetworkSection';\nimport { SummaryAvailmentSection } from './Components/SummaryAvailmentSection';\nimport { ReviewTicketsSection } from './Components/ReviewTicketsSection';\nimport { Payloads } from '../Payloads';\nimport { CheckUtilizationSection } from './Components/CheckUtilizationSection';\nimport { CheckContractSection } from './Components/CheckContractSection';\nimport { Processmaker } from '../Processmaker';\nimport { AccommodationData } from '../UpdateTicketPage/UpdateTicketProps';\nimport { ApproveInpatientSection } from './Components/ApproveInpatientSection';\nimport { SummaryInpatientSection } from './Components/SummaryInpatientSection';\nimport { Loading } from '../Components/Loading';\nimport { ApproveConsultationSection } from './Components/ApproveConsultationSection';\n\ninterface IProps {\n    required: string;\n    match: match<MatchParams>;\n    history: any;\n}\n\ninterface MatchParams {\n    id: string;\n}\n\ninterface IStates {\n    tabSelected: number;\n    isSummarizing: boolean;\n    loadedResources: number;\n\n    member?: MemberData;\n    ticket: TicketData;\n\n    availment?: AvailmentDetails;\n    confinement?: ConfinementDetails;\n    consultation?: ConsultationDetails;\n\n    pmId: string;\n    loas: LOAData[];\n}\n\nexport interface ConfinementDetails {\n    provider: DropdownChoice;\n    dateAdmitted: Date;\n    confinementKind: string;\n    giftGiven: boolean;\n    coverage: DropdownChoice;\n    philhealthAmount: number;\n    finalBill: number;\n    dischargeDate: Date | null;\n\n    updates: any;\n    others: any;\n    diagnoses: DiagnosisData[];\n    accommodations: AccommodationData[];\n}\n\nexport class ResolveTicketPage extends React.Component<IProps, IStates> {\n\n    static RESOURCES_TO_LOAD = 3;\n\n    tabList = [\n        { value: 1, label: 'Availments' }, \n        { value: 2, label: 'Benefits' }, \n        { value: 3, label: 'Partner Network' }, \n        { value: 4, label: 'Exclusion' }, \n        { value: 5, label: 'Utilization' }, \n        { value: 6, label: 'Tickets' },  \n        { value: 7, label: 'Contract' }\n    ];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            tabSelected: 1,\n            isSummarizing: false,\n            loadedResources: 0,\n            ticket: {\n                ticketChannel: '',\n                transactionNo: '',\n                ticketSource: '',\n                memberName: '',\n                clientName: '',\n                brokerName: '',\n                facility: { value: '', label: '' },\n                department: '',\n                callerName: '',\n                contactNo: '',\n                ticketType: '',\n                specificType: '',\n                urgency: '',\n                agent: { id: '', name: '' },\n                additionalNotes: '',\n                additionalFiles: [],\n                ticketNo: '',\n                pmCaseId: '',\n                status: 'Open',\n                createdBy: { id: '1', name: 'Jilmer Cariaso - Static' },\n                dateCreated: new Date(),\n                dateUpdated: new Date(),\n                dateEscalated: null\n            },\n            pmId: '',\n            loas: []\n        };\n    }\n\n    componentDidMount() {\n        API.get('customer-care/tickets/' + this.props.match.params['ticketId'],\n            (response) => {\n                console.log(response);\n                this.setState({loadedResources: this.state.loadedResources + 1});\n\n                const ticketCategory = response.ticket_category;\n                const availment = ticketCategory.availment_details;\n                const confinement = ticketCategory.confinement_details;\n                const consultation = ticketCategory.consultation_details;\n                \n                this.setState({ticket: {\n                    ticketChannel: response.received_via,\n                    transactionNo: response.transaction_no,\n                    ticketSource: response.received_from,\n                    memberName: response.member_name,\n                    clientName: response.corporate_client,\n                    brokerName: response.broker,\n                    facility: { value: '', label: response.hospital_name },\n                    department: response.department,\n                    callerName: response.caller_name,\n                    contactNo: response.contact_no,\n                    ticketType: ticketCategory.ticket_type,\n                    specificType: ticketCategory.specific_type,\n                    urgency: ticketCategory.urgency,\n                    agent: { id: '', name: ticketCategory.assign_to },\n                    additionalNotes: response.additional_notes,\n                    additionalFiles: [],\n                    ticketNo: this.props.match.params['appNo'],\n                    pmCaseId: response.pmaker_case_uid,\n                    status: response.status,\n                    createdBy: { id: '1', name: response.create_by },\n                    dateCreated: new Date(response.date_created),\n                    dateUpdated: new Date(response.date_updated),\n                    dateEscalated: new Date(response.date_escalated)\n                }});\n\n                if (availment) {\n                    const providerData = availment.provider.split(' - ');\n                    this.setState({availment: {\n                        provider: { value: providerData[0], label: providerData[1] },\n                        diagnoses: availment.availments_list.map(diagnosis => {\n                            return {\n                                icd10Code: { value: diagnosis.code, label: diagnosis.name },\n                                remarks: diagnosis.remarks,\n                                isPrimary: diagnosis.is_primary,\n                                isFinal: diagnosis.is_final,\n                                doctors: diagnosis.doctors.map(doctor => {\n                                    return {\n                                        id: doctor.id,\n                                        name: doctor.name,\n                                        specialization: doctor.specialization,\n                                        fee: doctor.fee,\n                                        noOfVisits: doctor.no_of_visits,\n                                        remarks: doctor.remarks\n                                    }\n                                }),\n                                procedures: diagnosis.procedures.map(procedure => {\n                                    return {\n                                        cptCode: { value: procedure.code, label: procedure.name },\n                                        isPHIC: procedure.phic,\n                                        amount: parseInt(procedure.amount),\n                                        notes: procedure.notes,\n                                        doctor: { value: '', label: procedure.doctor },\n                                        dateAdded: new Date(procedure.date_added),\n                                        assessmentType: procedure.assessment_type,\n                                        assessmentRemarks: procedure.assessment_remarks\n                                    }\n                                })\n                            }\n                        })\n                    }});\n                }\n\n                if (confinement) {\n                    const providerData = confinement.provider.split(' - ');\n                    this.setState({confinement: {\n                        provider: { value: providerData[0], label: providerData[1] },\n                        dateAdmitted: new Date(confinement.date_admitted),\n                        confinementKind: confinement.confinement_kind,\n                        giftGiven: confinement.gift_given,\n                        coverage: { value: '', label: confinement.coverage },\n                        philhealthAmount: confinement.philhealth_amount,\n                        finalBill: confinement.final_bill,\n                        dischargeDate: new Date(confinement.discharge_date),\n                        diagnoses: confinement.diagnoses.map(diagnosis => {\n                            return {\n                                icd10Code: { value: diagnosis.code, label: diagnosis.name },\n                                remarks: diagnosis.remarks,\n                                isPrimary: diagnosis.is_primary,\n                                isFinal: diagnosis.is_final,\n                                assessmentType: diagnosis.assessment_type,\n                                assessmentRemarks: diagnosis.assessment_remarks,\n                                doctors: diagnosis.doctors.map(doctor => {\n                                    return {\n                                        id: doctor.id,\n                                        name: doctor.name,\n                                        specialization: doctor.specialization,\n                                        type: doctor.type,\n                                        fee: doctor.fee,\n                                        noOfVisits: doctor.no_of_visits,\n                                        remarks: doctor.remarks\n                                    }\n                                }),\n                                procedures: diagnosis.procedures.map(procedure => {\n                                    return {\n                                        cptCode: { value: procedure.code, label: procedure.name },\n                                        isPHIC: procedure.phic,\n                                        amount: parseInt(procedure.amount),\n                                        notes: procedure.notes,\n                                        doctor: { value: '', label: procedure.doctor },\n                                        dateAdded: new Date(procedure.date_added),\n                                        assessmentType: procedure.assessment_type,\n                                        assessmentRemarks: procedure.assessment_remarks\n                                    }\n                                })\n                            }\n                        }),\n                        accommodations: confinement.room_accommodation.map(accommodation => {\n                            return {\n                                roomType: accommodation.room_type,\n                                days: parseInt(accommodation.no_of_days),\n                                costPerDay: accommodation.cost\n                            }\n                        }),\n                        updates: confinement.updates,\n                        others: confinement.others\n                    }});\n\n                    this.tabList[0].label = 'Inpatient';\n                }\n\n                if (consultation) {\n                    const providerData = consultation.provider.split(' - ');\n                    const diagnosisData = consultation.diagnosis.split(' - ');\n                    const doctorData = consultation.doctor.split(' - ');\n                    this.setState({consultation: {\n                        provider: { value: providerData[0], label: providerData[1] },\n                        diagnosis: { value: diagnosisData[0], label: diagnosisData[1] },\n                        doctor: { value: doctorData[0], label: doctorData[1] },\n                        notes: consultation.notes,\n                        assessmentType: consultation.assessment_type,\n                        assessmentRemarks: consultation.assessment_remarks\n                    }});\n                    this.tabList[0].label = 'Consultation Details';\n                }\n\n                this.setState({loas: response.loa.map(loa => {\n                    return {\n                        loaNo: loa.loa_no,\n                        amount: loa.amount,\n                        date: new Date(loa.date),\n                        notes: loa.notes\n                    }\n                })});\n\n                /* Get Member Details */\n                API.get('customer-care/members/' + response.member_id, \n                    (response) => {\n                        console.log(response);\n                        this.setState({loadedResources: this.state.loadedResources + 1});\n                        \n                        this.setState({member: {\n                            cardNo: response.member_card_no,\n                            firstName: response.first_name,\n                            middleName: response.middle_name,\n                            lastName: response.last_name,\n                            clientName: response.client.registered_name,\n                            birthDate: new Date(response.date_of_birth),\n                            gender: response.gender,\n                            civilStatus: response.civil_status,\n                            contractId: response.active_contract._id,\n                            isVip: response.is_vip\n                        }});\n\n                        API.get('customer-care/members/' + response.member_card_no + '/benefits',\n                            (response) => {\n                                console.log(response);\n                                this.setState({loadedResources: this.state.loadedResources + 1});\n                            },\n                            (error) => {\n                                console.log(error);\n                            });\n                    },\n                    (error) => {\n                        console.log(error);\n                    });\n            },\n            (error) => {\n                console.log(error);\n            });\n    }\n\n    render(): JSX.Element {\n        return (\n            <Grid container className='customer-care-main'>\n                {this.state.loadedResources !== ResolveTicketPage.RESOURCES_TO_LOAD ? (\n                    <div \n                        style={{\n                            backgroundColor: '#00000055', \n                            zIndex: 100, \n                            position: 'fixed', \n                            width: '100%', \n                            height: '100%'}}>\n                        <Loading height='10rem'/>\n                    </div>\n                    \n                ) : (null)}\n\n                <MemberDataSection \n                    member={this.state.member}\n                    ticket={this.state.ticket}\n                    ticketStatus='Resolve'\n                    onUpdateMemberStateChange={(_member: MemberData) => null} />\n\n                <CustomTabs \n                    tabList={this.tabList}\n                    selectedTab={this.state.tabSelected}\n                    setSelectedTab={(index: number) => {\n                        this.setState({tabSelected: index});\n                    }} />\n\n                <div className='update-ticket'>\n                    {this.state.tabSelected === 1 ? (\n\n                        this.state.availment ? (\n                            this.renderOutpatientContent(this.state.availment)\n\n                        ) : this.state.confinement ? (\n                            this.renderInpatientContent(this.state.confinement)\n\n                        ) : this.state.consultation ? (\n                            this.renderConsultationContent(this.state.consultation)\n\n                        ) : null\n                        \n                    ) : this.state.tabSelected === 2 && this.state.member ? (\n                        <CheckBenefitSection\n                            cardNo={this.state.member.cardNo} />\n                    ) : this.state.tabSelected === 3 ? (\n                        <PartnerNetworkSection />\n                    ) : this.state.tabSelected === 5 ? (\n                        <CheckUtilizationSection />\n                    ) : this.state.tabSelected === 6 ? (\n                        <ReviewTicketsSection \n                            ticketNo={this.props.match.params['appNo']} />\n                    ) : this.state.tabSelected === 7 && this.state.member ? (\n                        <CheckContractSection cardNo={this.state.member.cardNo} />\n                    ) : null}\n                </div>\n\n                <ResolveTicketFooter \n                    isSummarizing={this.state.consultation ? true : this.state.isSummarizing}\n                    onAssign={() => {\n\n                    }}\n                    onEscalate={() => {\n\n                    }}\n                    onSummarize={() => {\n                        this.setState({isSummarizing: true});\n                    }} \n                    onResolve={() => {\n                        if (this.state.member) {\n                            const payload = Payloads.getPutResolveTicketPayload(\n                                this.state.ticket,\n                                this.state.member.cardNo,\n                                this.state.loas,\n                                this.state.availment,\n                                this.state.confinement,\n                                this.state.consultation\n                            );\n                            \n                            console.log(payload);\n                            API.put('customer-care/tickets/' + this.props.match.params['ticketId'], payload,\n                                (response) => {\n                                    console.log(response);\n                                    //Check which case ticket is at\n                                    Processmaker.get('cases/'+this.props.match.params['caseId'],\n                                        (response) => {                                            \n                                            if (this.state.availment || this.state.confinement) { //means this is an availment\n                                                if (response['current_task'][0]['tas_title'] === 'Approve / Disapprove Availment') {\n                                                    Processmaker.put('cases/'+this.props.match.params['caseId']+'/route-case', {},\n                                                        (response) => {\n                                                            console.log(response);\n                                                            this.props.history.push('#/customer-care/tickets');\n                                                            window.location.reload();\n                                                        },\n                                                        (error) => {\n                                                            console.log(error);\n                                                        }\n                                                    );\n                                                }\n                                                else if (response['current_task'][0]['tas_title'] === 'Modify / Update Ticket') {\n                                                    Processmaker.put('cases/'+this.props.match.params['caseId']+'/route-case', {},\n                                                        (response) => {\n                                                            console.log(response);\n                                                            Processmaker.put('cases/'+this.props.match.params['caseId']+'/route-case', {},\n                                                                (response) => {\n                                                                    console.log(response);\n                                                                    this.props.history.push('#/customer-care/tickets');\n                                                                    window.location.reload();\n                                                                },\n                                                                (error) => {\n                                                                    console.log(error);\n                                                                }\n                                                            );\n                                                        },\n                                                        (error) => {\n                                                            console.log(error);\n                                                        }\n                                                    );\n                                                }\n                                                else if (response['current_task'][0]['tas_title'] === 'Create Ticket') {\n                                                    Processmaker.put('cases/'+this.props.match.params['caseId']+'/route-case', {},\n                                                        (response) => {\n                                                            console.log(response);\n                                                            Processmaker.put('cases/'+this.props.match.params['caseId']+'/route-case', {},\n                                                                (response) => {\n                                                                    console.log(response);\n                                                                    Processmaker.put('cases/'+this.props.match.params['caseId']+'/route-case', {},\n                                                                        (response) => {\n                                                                            console.log(response);\n                                                                            this.props.history.push('#/customer-care/tickets');\n                                                                            window.location.reload();\n                                                                        },\n                                                                        (error) => {\n                                                                            console.log(error);\n                                                                        }\n                                                                    );\n                                                                },\n                                                                (error) => {\n                                                                    console.log(error);\n                                                                }\n                                                            );\n                                                        },\n                                                        (error) => {\n                                                            console.log(error);\n                                                        }\n                                                    );\n                                                }\n                                            } else {\n                                                this.props.history.push('#/customer-care/tickets');\n                                                window.location.reload();\n                                            }\n                                        },\n                                        (error) => {\n                                            console.log(error);\n                                        }\n                                    );\n                                },\n                                (error) => {\n                                    console.log(error);\n                                }\n                            );\n                        }\n                    }} />\n            </Grid>\n        );\n    }\n\n    renderOutpatientContent(availment: AvailmentDetails): JSX.Element {\n        return (\n            !this.state.isSummarizing ? (\n                <ApproveAvailmentSection \n                    availment={availment}\n                    refreshAvailmentState={() => {\n                        this.setState({availment: this.state.availment});\n                    }} />\n            ) : (\n                <SummaryAvailmentSection \n                    availment={availment}\n                    loas={this.state.loas}\n                    refreshLOAStates={() => {\n                        this.setState({loas: this.state.loas});\n                    }} />\n            )\n        );\n    }\n\n    renderInpatientContent(confinement: ConfinementDetails): JSX.Element {\n        return (\n            !this.state.isSummarizing ? (\n                <ApproveInpatientSection\n                    confinement={confinement}\n                    refreshConfinementState={() => {\n                        this.setState({confinement: this.state.confinement});\n                    }} />\n            ) : (\n                <SummaryInpatientSection \n                    confinement={confinement}\n                    loas={this.state.loas}\n                    refreshLOAStates={() => {\n                        this.setState({loas: this.state.loas});\n                    }} />\n            )\n        );\n    }\n\n    renderConsultationContent(consultation: ConsultationDetails): JSX.Element {\n        return (\n            <div>\n                <ApproveConsultationSection \n                    consultation={consultation}\n                    refreshConsultationState={() => {\n                        this.setState({consultation: this.state.consultation});\n                    }} />\n            </div>\n        );\n    }\n}","/**\n * Asynchronously loads the component for FeaturePage\n */\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Components, Utils } from '@hims/core';\nconst { loadable } = Utils;\nconst { LoadingIndicator } = Components.UI;\n\nexport default loadable(\n  async () => {\n    const {\n      TicketListPage,\n      mapStateToProps,\n      mapDispatchToProps,\n    } = await import('./TicketListPage');\n\n    const Component = connect(\n      mapStateToProps,\n      mapDispatchToProps,\n    )(TicketListPage);\n    return { default: Component };\n  },\n  {\n    fallback: <LoadingIndicator />,\n  },\n);\n","import * as React from 'react';\nimport './component-style.scss';\n\ninterface IProps {\n    placeholder: string;\n    value: string;\n    detail: string;\n    onChange: (value: string) => void;\n}\n\nexport class DetailedInputField extends React.Component<IProps> {\n\n    shouldComponentUpdate(props: IProps, _state: any) {\n        return (\n            (this.props.placeholder !== props.placeholder) ||\n            (this.props.value !== props.value) ||\n            (this.props.detail !== props.detail)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='detailed-input-field'>\n                <div className='text'>{this.props.placeholder}</div>\n                <div className='input-field'>\n                    <input \n                        className='text-field' \n                        value={this.props.value}\n                        onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                            this.props.onChange(event.target.value);\n                        }}\n                    />\n                    <div className='detail'>{this.props.detail}</div>\n                </div>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Grid, TableCell, TableRow } from '@material-ui/core';\nimport './../style.scss';\nimport { CustomTable } from '../Components/CustomTable';\nimport { InputField } from '../Components/InputField';\nimport { IconButton } from '../Components/IconButton';\nimport { faSort } from '@fortawesome/free-solid-svg-icons';\nimport { LabelDisplayedRowsArgs } from '@material-ui/core/TablePagination';\nimport { CustomRadio } from '../Components/CustomRadio';\nimport { Dropdown } from '../Components/Dropdown';\nimport { DropdownChoice } from '../Models';\nimport { DetailedDropdown } from '../Components/DetailedDropdown';\nimport { DetailedInputField } from '../Components/DetailedInputField';\n\ninterface IProps {\n\n}\n\ninterface IStates {\n    \n}\n\nexport class AdvanceSearch extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n\n        };\n    }\n    \n    render(): JSX.Element {\n        return (\n            <Grid container className='customer-care-main'>\n                <div className='section'>\n                    <div className='header'>Advanced Search</div>\n\n                    <div className='bordered-section'>\n                        <Grid container spacing={10}>\n                            <Grid item xs={3}>\n                                <div className='header-2'>SEARCH FOR A</div>\n                                <DetailedDropdown\n                                    value={{value:'Testing adjustable width', label: ''}}\n                                    choices={[{value:'', label: ''}]}\n                                    onChange={(_value: DropdownChoice) => {\n\n                                    }} />\n                                <DetailedInputField\n                                    placeholder=''\n                                    value=''\n                                    detail='Testing here'\n                                    onChange={(_value: string) => {\n\n                                    }} />\n\n                                <CustomRadio\n                                    label='Member'\n                                    checkedCondition={true}\n                                    onChange={() => {}} />\n                                <CustomRadio\n                                    label='Corporate Client'\n                                    checkedCondition={false}\n                                    onChange={() => {}} />\n                            </Grid>\n                            <Grid item xs={3}>\n                                <div className='header-2'>SEARCH BY COMPANY</div>\n                                <Dropdown \n                                    placeholder='Member Type'\n                                    value={{value:'', label: ''}}\n                                    choices={[{value:'', label: ''}]}\n                                    onChange={(_value: DropdownChoice) => {\n\n                                    }} />\n                                <Dropdown \n                                    placeholder='Member Status'\n                                    value={{value:'', label: ''}}\n                                    choices={[{value:'', label: ''}]}\n                                    onChange={(_value: DropdownChoice) => {\n\n                                    }} />\n                            </Grid>\n                            <Grid item xs={3}>\n                                <div className='header-2'>SEARCH BY MEMBER DETAILS</div>\n                            </Grid>\n                            <Grid item xs={3}>\n                                \n                            </Grid>\n                        </Grid>\n                    </div>\n\n\n                    <div className='sub-section'>\n                        <div className='header-3'>{`SEARCH RESULTS (${9999})`}</div>\n                        <CustomTable\n                            className='custom-table-selectable'\n                            rows={[[0,0,0,0],[0,0,0,0]]}\n                            renderHeader={() => this.renderTableHeader()}\n                            renderRow={(rowData: any, index: number) => \n                                this.renderTableRow(rowData, index)}\n                            onChangeInfo={(info: LabelDisplayedRowsArgs) => \n                                `${info.from}-${info.to} out of ${info.count} results`}\n                            labelRowsPerPage='Show'\n                            rowsPerPageOptions={[10, 25, 50]} />\n                        {/* <div className='text'>\n                            Add a diagnosis first then add procedures per diagnosis after\n                        </div>\n                        <div className='sub-section'>\n                            <CustomTable\n                                rows={this.props.availment.diagnoses}\n                                renderHeader={() => this.renderTableHeader()}\n                                renderRow={(rowData: any, index: number) => \n                                    this.renderTableRow(rowData, index)} />\n                        </div>\n                        {this.props.createTicketAttemp && this.props.availment.diagnoses.length === 0 ? (\n                            <div className='sub-section' style={{color: '#E53935'}}>\n                                No diagnosis. Need atleast one diagnosis.\n                            </div> \n                        ) : (null)} */}\n                    </div>\n                </div>\n                \n            </Grid>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n        return (\n            <>\n            {this.renderHeaderColumn('cardNo', 'Member ID')}\n            {this.renderHeaderColumn('name', 'Name')}\n            {this.renderHeaderColumn('corporates', 'Corporate/s')}\n            {this.renderHeaderColumn('planType', 'Plan Type')}\n            {this.renderHeaderColumn('', 'Action', '60px')}\n            </>\n        );\n    }\n\n\n\n\n\n    renderTableRow = (_data: any, index: number) => {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                <TableCell>{'ticket.status'}</TableCell>\n                <TableCell>{'ticket.ticketNo'}</TableCell>\n                <TableCell>{'ticket.channel'}</TableCell>\n                <TableCell>{'ticket.type'}</TableCell>\n                <TableCell></TableCell>\n            </TableRow>\n        );\n    }\n\n\n\n    renderHeaderColumn(attrName: string, headerText: string, width?: string): JSX.Element {\n        return (\n            <TableCell style={{width: width}}>\n                <span className='header-2'>{headerText}</span>\n                \n                {attrName !== '' ? (\n                    <>\n                    <div style={{float: 'right'}}>\n                        <IconButton \n                            icon={faSort} \n                            onClick={() => {\n                                // this.sortTickets(attrName, true);\n                                // this.setState({ticketListUpdated: true});\n                            }} />\n                    </div>\n                    <InputField\n                        value={this.state[attrName]}\n                        onChange={(_value: string) => {\n                            // this.setState(prevState => ({...prevState, [attrName]: value}));\n                        }} />\n                    </>\n                ) : null}\n                \n            </TableCell>\n        );\n    }\n    \n}","/**\n *\n * App\n *\n * This component is the skeleton around the actual pages, and should only\n * contain code that should be seen on all pages. (e.g. navigation bar)\n */\n\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { renderRoutes } from 'react-router-config';\n\nimport { Switch, Route } from 'react-router-dom';\n\nimport { Containers, Components } from '@hims/core';\nimport { createBrowserHistory } from 'history';\n// import { HomePage } from 'Pages/Home/HomePage';\n\n\nimport { CreateTicketPage } from 'Pages/CustomerCarePage/CreateTicketPage/CreateTicketPage';\nimport { UpdateTicketPage } from 'Pages/CustomerCarePage/UpdateTicketPage/UpdateTicketPage';\nimport HomePage from 'Pages/Home/Loadable';\nimport { ResolveTicketPage } from 'Pages/CustomerCarePage/ResolveTicketPage/ResolveTicketPage';\nimport TicketListPage from 'Pages/TicketList/Loadable';\nimport { AdvanceSearch } from 'Pages/CustomerCarePage/AdvanceSearch/AdvanceSearch';\n// import LoginPage from 'Pages/Login/LoginPage';\n\nconst history = createBrowserHistory();\nconst NotFoundPage = Containers.NotFoundPage;\n// import ExitToAppIcon from '@material-ui/icons/ExitToApp';\n\nlet routes = [\n  {\n    path: '/home',\n    component: HomePage,\n  },\n  {\n    path: '/tickets',\n    component: TicketListPage,\n  },\n  // {\n  //   path: \"/login\",\n  //   component: LoginPage\n  // },\n  {\n    path: \"/\",\n    component: CreateTicketPage,\n    exact: true\n  },\n  {\n    path: \"/search\",\n    component: AdvanceSearch\n  },\n  {\n    path: \"/update-ticket/:caseId/:appNo/:ticketId\",\n    component: UpdateTicketPage\n  },\n  {\n    path: \"/resolve-ticket/:caseId/:appNo/:ticketId\",\n    component: ResolveTicketPage\n  }\n];\nconst prefix = '/customer-care';\nroutes.map(route => (route.path = `${prefix}${route.path}`));\n\nexport default function App() {\n\n  return (\n    <div>\n      \n      <Helmet\n        titleTemplate=\"NEO - %s\"\n        defaultTitle=\"NEO\"\n      >\n        <meta name=\"description\" content=\"NEO application\" />\n      </Helmet>\n      \n      <div className='side-bar'>\n        <Components.UI.PageLayout history={history} page={\"customer care\"} />\n      </div>\n      <div className='main'>\n        <Switch>\n          {renderRoutes(routes)}\n          <Route path=\"\" component={NotFoundPage} />\n        </Switch>\n      </div>\n      \n        \n      {/* </Components.UI.PageLayout> */}\n    </div>\n  );\n}","/**\n * i18n.js\n *\n * This will setup the i18n language files and locale data for the app.\n *\n *   IMPORTANT: This file is used by the internal build\n *   script `extract-intl`, and must use CommonJS module syntax\n *   You CANNOT use import/export in this file.\n */\n\n// prettier-ignore\nimport { Containers } from '@hims/core';\nconst enTranslationMessages = require('Messages/en.json');\n\nexport const translationMessages = {\n  en: Containers.Message.formatTranslationMessages('en', enTranslationMessages),\n};\n","/**\n * AppConstants\n * Each action has a corresponding type, which the reducer knows and picks up on.\n * To avoid weird typos between the reducer and the actions, we save them as\n * constants here. We prefix them with 'yourproject/YourComponent' so we avoid\n * reducers accidentally picking up actions they shouldn't.\n *\n */\n\nenum ActionTypes {\n    LOAD_REPOS = 'boilerplate/App/LOAD_REPOS',\n    LOAD_REPOS_SUCCESS = 'boilerplate/App/LOAD_REPOS_SUCCESS',\n    LOAD_REPOS_ERROR = 'boilerplate/App/LOAD_REPOS_ERROR',\n}\n  \nexport {};\nexport default ActionTypes;\n  ","import { ContainerState, ContainerActions } from './types';\nimport ActionTypes from './constants';\n\n// The initial state of the App\nexport const initialState: ContainerState = {\n  loading: false,\n  error: false,\n  currentUser: '',\n  userData: {\n    repositories: [],\n  },\n};\n\n// Take this container's state (as a slice of root state), this container's actions and return new state\nfunction appReducer(\n  state: ContainerState = initialState,\n  action: ContainerActions,\n): ContainerState {\n  switch (action.type) {\n    case ActionTypes.LOAD_REPOS:\n      return {\n        currentUser: state.currentUser,\n        loading: true,\n        error: false,\n        userData: {\n          repositories: [],\n        },\n      };\n    case ActionTypes.LOAD_REPOS_SUCCESS:\n      return {\n        currentUser: action.payload.username,\n        loading: false,\n        error: state.error,\n        userData: {\n          repositories: action.payload.repos,\n        },\n      };\n    case ActionTypes.LOAD_REPOS_ERROR:\n      const { error, loading, ...rest } = state;\n      return {\n        error: action.payload,\n        loading: false,\n        ...rest,\n      };\n    default:\n      return state;\n  }\n}\n\nexport default appReducer;\n","/**\n * app.ts\n *\n * This is the entry file for the application, only setup and boilerplate\n * code.\n */\n\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\n// Import all the third party stuff\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport FontFaceObserver from 'fontfaceobserver';\nimport 'sanitize.css/sanitize.css';\n\n\n\n// Import root app\nimport App from 'Containers/App';\n\n// Import Language Provider\n// import MessageProvider from 'Containers/LanguageProvider';\n\n// Load the favicon and the .htaccess file\n// import '!file-loader?name=[name].[ext]!./images/favicon.ico';\n// import 'file-loader?name=.htaccess!./.htaccess';\n\nimport { Components, Containers, Utils } from '@hims/core';\n// import { Containers, Utils } from '@hims/core';\nimport { translationMessages } from 'i18n';\nimport createReducer from './reducers';\n\nconst { configureStore, history } = Utils;\nconst MessageProvider = Containers.Message.Provider;\nconst { ServiceWorker } = Components.Services;\n\n// Import i18n messages\n\n// Observe loading of Open Sans (to remove open sans, remove the <link> tag in\n// the index.html file and this observer)\nconst openSansObserver = new FontFaceObserver('Open Sans', {});\n\n// Create redux store with history\nconst initialState = {};\nconst store = configureStore(createReducer, initialState, history);\nconst MOUNT_NODE = document.getElementById('app') as HTMLElement;\n\nconst render = (messages: any, Component = App) => {\n  const Document: React.ComponentType<Containers.Document.IProps<any, any>> = Containers.Document.Component;\n  ReactDOM.render(\n    // tslint:disable-next-line:jsx-wrap-multiline\n      <Document Component={Component} store={store} componentProps={{}}>\n        <MessageProvider messages={messages}>\n          <Component />\n        </MessageProvider>\n      </Document>\n    ,\n    MOUNT_NODE,\n  );\n};\n\ndeclare const module: any;\n\nexport default ()=>{\n  // When Open Sans is loaded, add a font-family using Open Sans to the body\n  openSansObserver.load(undefined, 60000).then(() => {\n    document.body.classList.add('fontLoaded');\n  });\n\n  if (module.hot) {\n    module.hot.accept(['./i18n', './Containers/App'], () => {\n      ReactDOM.unmountComponentAtNode(MOUNT_NODE);\n      // tslint:disable-next-line:max-line-length\n      const App = require('./Containers/App').default; // https://github.com/webpack/webpack-dev-server/issues/100\n      render(translationMessages, App);\n    });\n    // Make reducers hot reloadable, see http://mxs.is/googmo\n    /* istanbul ignore next */\n    module['hot'].accept('./reducers', () => {\n      store.replaceReducer(createReducer(store.injectedReducers));\n    });\n  }\n  // Chunked polyfill for browsers without Intl support\n  if (!(window as any).Intl) {\n    new Promise(resolve => {\n      resolve(import('intl'));\n    })\n      .then(() =>\n        Promise.all([\n          import('intl/locale-data/jsonp/en.js'),\n          import('intl/locale-data/jsonp/de.js'),\n        ]),\n      )\n      .then(() => render(translationMessages))\n      .catch(err => {\n        throw err;\n      });\n  } else {\n    render(translationMessages);\n  }\n\n  // Install ServiceWorker and AppCache in the end since\n  // it's not most important operation and if main code fails,\n  // we do not want it installed\n  // if (process.env.NODE_ENV === 'production') {\n  //   require('offline-plugin/runtime').install();\n  // }\n\n  // If you want your app to work offline and load faster, you can change\n  // unregister() to register() below. Note this comes with some pitfalls.\n  // Learn more about service workers: https://bit.ly/CRA-PWA\n  ServiceWorker.register();\n}\n","/**\n * Combine all reducers in this file and export the combined reducers.\n */\n\nimport { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\n\nimport { Containers, Utils } from '@hims/core';\nimport globalReducer from 'Containers/App/reducer';\n\n/**\n * Merges the main reducer with the router state and dynamically injected reducers\n */\nexport default function createReducer(injectedReducers = {}) {\n  const { history } = Utils;\n  const rootReducer = combineReducers({\n    global: globalReducer,\n    language: Containers.Message.messageProviderReducer,\n    router: connectRouter(history),\n    ...injectedReducers,\n  });\n\n  return rootReducer;\n}\n"],"sourceRoot":""}