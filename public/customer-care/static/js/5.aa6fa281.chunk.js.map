{"version":3,"sources":["Components/UI/LoadingIndicator/index.tsx","Pages/TicketList/ActionConsts.ts","Pages/TicketList/TicketListActions.ts","Pages/TicketList/TicketListTableData.ts","Pages/TicketList/API.tsx","Pages/TicketList/Processmaker.tsx","Pages/TicketList/TicketListPage.tsx"],"names":["useStyles","makeStyles","root","position","width","height","zIndex","right","bottom","top","left","textAlign","backgroundColor","container","outline","alignItems","justifyContent","display","flexDirection","Loader","classes","className","CircularProgress","size","defaultProps","ActionConsts","ResetReducer","SetReducer","TicketListActions","payload","type","columnNames","name","title","tableData","formattedColumns","required_columns","urgency_columns","text_columns","date_columns","boolean_columns","detaillink_columns","columnExtensions","columns","map","column","push","columnName","wordWrapEnabled","getColumnExtensions","fixedColumns","cellProperties","rows","types","specTypes","statuses","channels","is_vip","index","status","faker","random","arrayElement","urgency","capitalize","app_uid","alphaNumeric","dueDate","date","future","specificType","member","findName","company","companyName","ticketOwner","assignedTo","createdDate","lastUpdate","channel","generateRows","backendUrl","process","API","url","success","fail","fetch","method","headers","localStorage","getItem","then","response","json","data","catch","error","body","JSON","stringify","Processmaker","token","popoverStyles","theme","popoverCheckbox","marginLeft","spacing","marginRight","SelectColumnsPopover","props","selectedColumns","setSelectedColumns","popupState","usePopupState","variant","popupId","Button","fullWidth","bindTrigger","Typography","clsx","align","icon","faThList","Popover","bindPopover","anchorOrigin","vertical","horizontal","transformOrigin","FormGroup","idx","columnObj","checked","findIndex","FormControlLabel","key","control","Checkbox","onChange","event","target","tmpSelectedColumns","remove","value","color","label","TicketListPage","onLogout","window","location","replace","reset","setState","loading","query","ticketStats","ticketList","getTicketStats","tickets","all","open","closed","resolved","pending","length","ticket","lowerCase","filterTickets","ins","state","trim","toLowerCase","filter","item","itemapp_uid","itemStatus","indexOf","loadTicketList","get","promises","app_index","del_index","app_number","Promise","resolve","APPLICATION","ticket_no","console","log","app_uid_map","forEach","t","ticket_category","_id","ticket_type","specific_type","caller_name","corporate_client","assign_to","Date","date_created","date_updated","received_via","transaction_no","app_uid_item","GlobalFunction","generateTicketNumber","stat","cols","getVisibleColumns","generateReport","onSearchTextChange","e","preventDefault","onStatusFilterClick","newStatus","componentWillMount","Object","keys","componentDidMount","this","style","Fab","onClick","Grid","direction","justify","xs","sm","md","TextField","id","placeholder","margin","inputProps","InputProps","startAdornment","faSearch","alignContent","faDownload","Paper","overflow","CustomTable","canOverflow","stickyHeader","renderHeader","renderTableHeader","renderRow","row","renderTableRow","rowsPerPageOptions","dockedColumnsCounter","matchedColumn","col","nextColumnIsFixed","minWidth","maxWidth","borderRight","undefined","TableCell","float","IconButton","faSort","InputField","_value","TableRow","href","Low","Medium","High","toShortDateString","React","mapStateToProps","mapDispatchToProps","dispatch","Map","bindActionCreators"],"mappings":"gaAOMA,EAAYC,YAAW,CAC5BC,KAAM,CACCC,SAAU,QACVC,MAAO,OACPC,OAAQ,OACRC,OAAQ,KACRC,MAAO,MACPC,OAAQ,MACRC,IAAK,MACLC,KAAM,MACNC,UAAW,SACXC,gBAAiB,sBAErBC,UAAU,CACNR,OAAQ,OACRS,QAAS,EACTC,WAAY,SACZC,eAAgB,SAChBC,QAAS,OACTC,cAAe,YAIVC,EAAgC,WAEzC,IAAMC,EAAUpB,IAChB,OACI,uBAAKqB,UAAWD,EAAQlB,MACpB,uBAAKmB,UAAWD,EAAQP,WACpB,gBAACS,EAAA,EAAD,CAAkBC,KAAM,SAMxCJ,EAAOK,aAAe,GC1Cf,IAAMC,EACC,CACVC,aAAc,0BACdC,WAAY,yBCSHC,EACN,SAACC,GAAD,MAAkB,CACrBA,UACAC,KAAML,EAAwBE,a,kBCZ5BI,EAAc,CAClB,CACEC,KAAM,UACNC,MAAO,WAET,CACED,KAAM,SACNC,MAAO,UAET,CACED,KAAM,aACNC,MAAO,aAET,CACED,KAAM,UACNC,MAAO,YAET,CACED,KAAM,OACNC,MAAO,QAET,CACED,KAAM,eACNC,MAAO,iBAET,CACED,KAAM,SACNC,MAAO,UAET,CACED,KAAM,UACNC,MAAO,WAET,CACED,KAAM,cACNC,MAAO,gBAET,CACED,KAAM,aACNC,MAAO,eAET,CACED,KAAM,cACNC,MAAO,gBAET,CACED,KAAM,aACNC,MAAO,eAET,CACED,KAAM,UACNC,MAAO,WAET,CACED,KAAM,SACNC,MAAO,QAgFLC,EAAiB,CACrBC,iBAAkB,CAChBC,iBAAkB,GAClBC,gBAAiB,CAAC,WAClBC,aAAc,CACZ,SACA,UACA,OACA,eACA,SACA,UACA,cACA,aACA,WAEFC,aAAc,CACZ,UACA,cACA,cAEFC,gBAAiB,CACf,UAEFC,mBAAoB,CAClB,YAGJC,iBAvG0B,WAC1B,IAAMC,EAAiB,GA8BvB,OA5BAZ,EAAYa,IAAI,SAAAC,GACd,IAAIzC,EAAQ,IAEZ,OAAQyC,EAAOb,MACb,IAAK,UACL,IAAK,SACL,IAAK,UACH5B,EAAQ,IACR,MACF,IAAK,OACL,IAAK,UACHA,EAAQ,IACR,MACF,IAAK,eACL,IAAK,UACHA,EAAQ,IACR,MACF,QACEA,EAAQ,IAGZuC,EAAQG,KAAK,CACXC,WAAYF,EAAOb,KACnB5B,MAAOA,EACP4C,iBAAiB,MAIdL,EAwEWM,GAClBC,aAAc,CACZ,UACA,SACA,UACA,UACA,OACA,eACA,UAEFC,eAAgB,GAChBR,QAASZ,EACTqB,KAjFmB,WAcnB,IAbA,IAAMA,EAAc,GACdC,EAAQ,CAAC,UAAW,YAAa,UAAW,aAC5CC,EAAY,CAChB,0BACA,qBACA,4BACA,oBACA,kBACA,sBAEIC,EAAW,CAAC,OAAQ,UAAW,WAAY,UAC3CC,EAAW,CAAC,QAAS,MAAO,OAC5BC,EAAS,EAAC,GAAM,GACbC,EAAQ,EAAGA,EAAQ,GAAIA,IAAS,CACvC,IAAMC,EAASC,IAAMC,OAAOC,aAAaP,GACnCQ,EACO,WAAXJ,GAAkC,aAAXA,EACnB,EACAC,IAAMC,OAAOC,aAAa,CAAC,EAAG,IAEpCV,EAAKN,KAAK,CACRiB,QAASA,EACTJ,OAAQK,qBAAWL,GACnBM,QAASL,IAAMC,OAAOK,aAAa,GACnCC,QAASP,IAAMQ,KAAKC,SACpBvC,KAAM8B,IAAMC,OAAOC,aAAaT,GAChCiB,aAAcV,IAAMC,OAAOC,aAAaR,GACxCiB,OAAQX,IAAM5B,KAAKwC,WACnBC,QAASb,IAAMa,QAAQC,cACvBC,YAAaf,IAAM5B,KAAKwC,WACxBI,WAAYhB,IAAM5B,KAAKwC,WACvBK,YAAajB,IAAMQ,KAAKC,SACxBS,WAAYlB,IAAMQ,KAAKC,SACvBU,QAASnB,IAAMC,OAAOC,aAAaN,GACnCC,OAAQG,IAAMC,OAAOC,aAAaL,KAItC,OAAOL,EA0CD4B,I,yBCjLJC,EAAaC,iCAEJC,EAAb,yIAQqBC,EAAaC,EAAmBC,GARrD,gEAUQC,MAAMN,EAAaG,EAAK,CACpBI,OAAQ,MACRC,QAAS,CACL,eAAgB,mBAChB,cAAiB,UAAYC,aAAaC,QAAQ,eAGzDC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAIV,EAAQU,KACrBC,MAAM,SAAAC,GAAK,OAAIX,EAAKW,KAnB7B,uKAsBsBb,EAAac,EAAWb,EAAmBC,GAtBjE,gEAwBQC,MAAMN,EAAaG,EAAK,CACpBI,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChB,cAAiB,UAAYC,aAAaC,QAAQ,aAEtDO,KAAMC,KAAKC,UAAUF,KAExBN,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAIV,EAAQU,KACrBC,MAAM,SAAAC,GAAK,OAAIX,EAAKW,KAlC7B,wKAqCqBb,EAAac,EAAWb,EAAmBC,GArChE,gEAuCQC,MAAMN,EAAaG,EAAK,CACpBI,OAAQ,MACRC,QAAS,CACL,eAAgB,mBAChB,cAAiB,UAAYC,aAAaC,QAAQ,aAEtDO,KAAMC,KAAKC,UAAUF,KAExBN,KAAK,SAAAC,GAAQ,OAAIA,IACjBD,KAAK,SAAAG,GAAI,OAAIV,EAAQU,KACrBC,MAAM,SAAAC,GAAK,OAAIX,EAAKW,KAjD7B,6GCAaI,EAAb,yIAQqBjB,EAAaC,EAAmBC,GARrD,sEAScgB,EAAQZ,aAAaC,QAAQ,aAAe,GAElDJ,MAbSL,yCAaUE,EAAK,CACpBI,OAAQ,MACRC,QAAS,CACL,cAAiB,UAAYa,KAGpCV,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAIV,EAAQU,KACrBC,MAAM,SAAAC,GAAK,OAAIX,EAAKW,KAnB7B,uKAsBsBb,EAAYc,EAAWb,EAAmBC,GAtBhE,gEAwBQC,MA1BSL,yCA0BUE,EAAK,CACpBI,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChB,cAAkB,UAAYC,aAAaC,QAAQ,aAEvDO,KAAMC,KAAKC,UAAUF,KAExBN,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAIV,EAAQU,KACrBC,MAAM,SAAAC,GAAK,OAAIX,EAAKW,KAlC7B,wKAqCqBb,EAAac,EAAWb,EAAmBC,GArChE,gEAuCQC,MAzCSL,yCAyCUE,EAAK,CACpBI,OAAQ,MACRC,QAAS,CACL,eAAgB,mBAChB,cAAkB,UAAYC,aAAaC,QAAQ,aAEvDO,KAAMC,KAAKC,UAAUF,KAExBN,KAAK,SAAAC,GAAQ,OAAIA,IACjBD,KAAK,SAAAG,GAAI,OAAIV,EAAQU,KACrBC,MAAM,SAAAC,GAAK,OAAIX,EAAKW,KAjD7B,6G,wLCuDA,IAAMM,EAAgBtG,YAAW,SAACuG,GAAD,MAAmB,CAClDC,gBAAiB,CACfC,WAAYF,EAAMG,QAAQ,GAC1BC,YAAaJ,EAAMG,QAAQ,OAUzBE,EAA4D,SACjEC,GACkB,IAEfnE,EAGEmE,EAHFnE,QACAoE,EAEED,EAFFC,gBACAC,EACEF,EADFE,mBAEI5F,EAAUmF,EAAcO,GAoBxBG,EAAaC,wBAAc,CAC/BC,QAAS,UACTC,QAAS,sBAGX,OACE,2BACE,gBAACC,EAAA,EAAD,eAAQC,WAAS,GAAKC,sBAAYN,IAChC,gBAACO,EAAA,EAAD,CAAYnG,UAAWoG,kBAAK,eAAgBC,MAAM,SAChD,gBAAC,IAAD,CACEC,KAAMC,IACNvG,UAAWoG,kBAAK,sBAElB,wBAAMpG,UAAWoG,kBAAK,qBAAtB,qBAGJ,gBAACI,EAAA,EAAD,iBACMC,sBAAYb,GADlB,CAEEc,aAAc,CACZC,SAAU,SACVC,WAAY,SAEdC,gBAAiB,CACfF,SAAU,MACVC,WAAY,WAGd,gBAACE,EAAA,EAAD,KACGvF,cAAID,EAAS,SAACE,EAAQuF,GACrB,IA/CaC,EA+CPC,EACJC,oBAAUxB,EAAiB,CAAE/E,KAAMa,EAAOb,QAAW,EAEvD,OACE,gBAACwG,EAAA,EAAD,CACEC,IAAKL,EACLM,QACE,gBAACC,EAAA,EAAD,CACEL,QAASA,EACTM,UAxDKP,EAwDmBxF,EAxDA,SACxCgG,GAEA,GAAIA,EAAMC,OAAOR,QAAS,CACxB,IAAMS,EAAkB,YAAOhC,GAC/BgC,EAAmBjG,KAAKuF,GAExBrB,EAAmB+B,OACd,CACL,IAAMA,EAAkB,YAAOhC,GAC/BiC,iBAAOD,EAAoB,SAAAhG,GACzB,OAAOA,EAAWf,OAASqG,EAAUrG,OAGvCgF,EAAmB+B,MA2CLE,MAAOpG,EAAOb,KACdkH,MAAM,YAGV7H,UAAWD,EAAQqF,gBACnB0C,MAAOtG,EAAOZ,cAUjBmH,EAAb,YAEE,WAAYtC,GAAgC,IAAD,8BAC3C,4CAAMA,KAmBNuC,SAAW,WACTC,OAAOC,SAASC,QAAQ,oBArBiB,EAwB5CC,MAAQ,WACP,EAAKC,SAAS,CACVC,SAAS,EACThG,OAAQ,GACRiG,MAAO,GACPjH,QAAS,GACToE,gBAAiB,GACjB7D,aAAc,GACdf,iBAAkB,GAClBO,iBAAkB,GAClBU,KAAM,GACNyG,YAAa,GACbC,WAAY,MApC2B,EAwC3CC,eAAiB,SAACC,GAChB,IAAIC,EACAC,EAAO,EACPC,EAAS,EACTC,EAAW,EACXC,EAAU,EAEdJ,EAAMD,EAAQM,OAPqB,2BASnC,YAAqBN,EAArB,+CAA8B,CAAC,IAApBO,EAAmB,QAC5B,OAAQC,oBAAUD,EAAO5G,SACvB,IAAK,OACHuG,IACA,MACF,IAAK,UACHG,IACA,MACF,IAAK,WACHD,IACA,MACF,IAAK,SACHD,MArB6B,kFA4BnC,MAAO,CACLF,MACAC,OACAC,SACAC,WACAC,YAzEuC,EA6E3CI,cAAgB,WACd,IAAIC,EAAG,eACDZ,EAAaY,EAAIC,MAAMb,WAAaY,EAAIC,MAAMb,WAAa,GAC3DF,EAAQc,EAAIC,MAAMf,MAAQc,EAAIC,MAAMf,MAAMgB,OAAOC,cAAgB,GACjElH,EAAS+G,EAAIC,MAAMhH,OAAS+G,EAAIC,MAAMhH,OAAOiH,OAAOC,cAAgB,GAG1EH,EAAIhB,SAAS,CACXC,SAAS,GACR,WACD,IAAIvG,EAAO0G,EAAWgB,OAAO,SAACC,GAC5B,IAAIC,EAAcD,EAAK9G,QAAQ4G,cAC3BI,EAAaF,EAAKpH,OAAOkH,cAE7B,OAAsB,IAAlBlH,EAAO2G,QAAkBW,IAAetH,OACvCiG,GAASA,EAAMU,OAAS,IACjBU,EAAYE,QAAQtB,IAAU,KAW5Cc,EAAIhB,SAAS,CACXC,SAAS,EACTvG,KAAMA,OA1G+B,EA+G3C+H,eAAiB,WACf,IAAIT,EAAG,eAEJA,EAAIC,MAAMhB,SAIbe,EAAIhB,SAAS,CACXC,SAAS,GACR,WACDtD,EAAa+E,IAAI,QAAS,SAACvF,GACzB,IAAIwF,EAAWxF,EAASjD,IAAI,SAACmI,GAC3B,IAAI9G,EAAU8G,EAAK9G,QACfqH,EAAYP,EAAKQ,UACjBC,EAAaT,EAAKS,WACtB,OAAO,IAAIC,QAAQ,SAASC,GAC1BrF,EAAa+E,IAAI,SAASnH,EAAQ,wBAAwBqH,EAC1D,SAACzF,GACC6F,EAAQ,CACN,QAAW7F,EAAS8F,YACpB,UAAc9F,EAAS+F,WAAa,KACpC,WAAcJ,KAGlB,SAACvF,GACC4F,QAAQC,IAAI,QAAS7F,GACrByF,EAAQ,YAKdD,QAAQxB,IAAIoB,GAAUzF,KAAK,SAACmG,GAE1B5G,EAAIiG,IACF,wBACA,SAACvF,GAEC,IAAImE,EAAU,GACdnE,EAASmG,QAAQ,SAACC,GAChB,IAAIlG,EAAO,CACT,QAAWkG,EAAEC,gBAAgBnI,QAC7B,OAAUkI,EAAEtI,OACZ,UAAasI,EAAEE,IACf,QAAW,KACX,KAAQF,EAAEC,gBAAgBE,YAC1B,aAAgBH,EAAEC,gBAAgBG,cAClC,OAAUJ,EAAEK,YACZ,QAAWL,EAAEM,iBACb,YAAe,GACf,WAAcN,EAAEC,gBAAgBM,UAChC,YAAe,IAAIC,KAAKR,EAAES,cAC1B,WAAc,IAAID,KAAKR,EAAEU,cACzB,QAAWV,EAAEW,aACb,QAAU,EACV,eAAkBX,EAAEY,eACpB,QAAW,GACX,WAAc,IAGhB7C,EAAQiC,EAAEE,KAAOpG,IAGnB,IAAI+D,EAAaiC,EAAYnJ,IAAI,SAACkK,GAChC,GAA4B,OAAzBA,EAAa7I,SAA+C,OAA3B6I,EAAalB,UAAmB,CAClE,IAAIrB,EAASP,EAAQ8C,EAAalB,YAAc,KAEhD,OAAW,MAARrB,GACDA,EAAM,QAAcuC,EAAa7I,QACjCsG,EAAM,WAAiBwC,IAAeC,qBACpCzC,EAAM,KACNA,EAAM,aACNuC,EAAatB,YAERjB,GAGA,KAIT,OAAO,OAGRO,OAAO,SAACC,GACT,OAAgB,OAATA,IAKHkC,EAAOvC,EAAIX,eAAeD,GAEhCY,EAAIhB,SAAS,CACXC,SAAS,EACTG,WAAYA,EACZ1G,KAAM0G,EACND,YAAaoD,KAGjB,SAAChH,GACC4F,QAAQC,IAAI,QAAS7F,QAI1B,SAACA,GACF4F,QAAQC,IAAI,QAAS7F,GAErB,IAAI6D,EAAa,CACf,CACE,QAAW,OACX,OAAU,OACV,UAAa,MACb,QAAW,IAAI2C,KACf,KAAQ,YACR,aAAgB,aAChB,OAAU,OACV,QAAW,cACX,YAAe,OACf,WAAc,KACd,YAAe,IAAIA,KACnB,WAAc,IAAIA,KAClB,QAAW,OACX,QAAU,EACV,eAAkB,iBAClB,QAAW,UACX,WAAc,eAIZQ,EAAOvC,EAAIX,eAAeD,GAEhCY,EAAIhB,SAAS,CACXC,SAAS,EACTG,WAAYA,EACZ1G,KAAM0G,EACND,YAAaoD,SArPsB,EA2P3CjG,mBAAqB,SAACkG,GACpB,EAAKxD,SAAS,CACZ3C,gBAAiBmG,KA7PsB,EAiQ3CC,kBAAoB,WAClB,OAAOrC,iBAAO,EAAKH,MAAMhI,QAAS,SAAAE,GAChC,OAAO0F,oBAAU,EAAKoC,MAAM5D,gBAAiB,CAAE/E,KAAMa,EAAOb,QAAW,KAnQhC,EAuQ3CoL,eAAiB,WACfvB,QAAQC,IAAI,oBAxQ6B,EA2Q3CuB,mBAAqB,SAACC,GACpBA,EAAEC,iBAD6D,IAEvDtE,EAAUqE,EAAExE,OAAZG,MACR,EAAKS,SAAS,CACVE,MAAOX,GACR,kBAAM,EAAKwB,mBAhR2B,EAmR3C+C,oBAAsB,SAACC,GAClB,EAAK9C,MAAMhH,SAAW8J,GAIzB,EAAK/D,SAAS,CACZ/F,OAAQ8J,GACP,kBAAM,EAAKhD,mBA1R2B,EA6R3CiD,mBAAqB,WAEnB,IAAIR,EAAOhL,EAAUS,QACrB,EAAK+G,SAAS,CACZ/G,QAASuK,EACTnG,gBAAiBmG,EACjBhK,aAAeyK,OAAOC,KAAK1L,GAAWoI,OAAS,EAAIpI,EAAS,aAAmB,GAC/EC,iBAAmBwL,OAAOC,KAAK1L,GAAWoI,OAAS,EAAIpI,EAAS,iBAAuB,GACvFQ,iBAAmBiL,OAAOC,KAAK1L,GAAWoI,OAAS,EAAIpI,EAAS,iBAAuB,MArShD,EAyS3C2L,kBAAoB,WAClB,EAAK1C,kBAvSP,EAAKR,MAAQ,CACThB,SAAS,EACThG,OAAQ,GACRiG,MAAO,GACPjH,QAAS,GACToE,gBAAiB,GACjB7D,aAAc,GACdf,iBAAkB,GAClBO,iBAAkB,GAClBU,KAAM,GACNyG,YAAa,GACbC,WAAY,IAd2B,EAF7C,sEA+SgC,IAAD,SAYvBgE,KAAKnD,MATPhB,EAHyB,EAGzBA,QACAhG,EAJyB,EAIzBA,OACAhB,EALyB,EAKzBA,QACAoE,EANyB,EAMzBA,gBACA7D,EAPyB,EAOzBA,aAGAE,EAVyB,EAUzBA,KACAyG,EAXyB,EAWzBA,YAEF,OACE,2BACIF,EACC,gBAAC,EAAD,MAAa,KAGhB,uBAAKoE,MAAO,CAAC5N,SAAU,WAAYI,MAAO,OAAQE,IAAK,SACrD,gBAACuN,EAAA,EAAD,CAAK9E,MAAM,UAAU6E,MAAO,CAACnN,gBAAiB,YAC9C,gBAAC,IAAD,CAAeqN,QAASH,KAAKzE,aAI/B,uBAAKhI,UAAWoG,kBAAK,mBACnB,gBAACyG,EAAA,EAAD,CACErN,WAAS,EACTsN,UAAU,MACVC,QAAQ,gBACRrN,WAAW,YACX,gBAACmN,EAAA,EAAD,CAAMnD,MAAI,EAACsD,GAAI,GAAIhN,UAAWoG,kBAAK,iBACjC,gBAACD,EAAA,EAAD,CAAYnG,UAAWoG,kBAAK,SAAUyB,MAAM,eAA5C,aAKJ,gBAACgF,EAAA,EAAD,CACErN,WAAS,EACTsN,UAAU,MACVC,QAAQ,gBACRrN,WAAW,SACX4F,QAAS,EACTtF,UAAWoG,kBAAK,WAChB,gBAACyG,EAAA,EAAD,CAAMnD,MAAI,EAACuD,GAAI,GAAIC,GAAI,GACrB,gBAACC,EAAA,EAAD,CACEC,GAAG,uBACHC,YAAY,yDACZrN,UAAWoG,kBAAK,gBAChBkH,OAAO,QACPxH,QAAQ,WACRG,WAAS,EACTsB,SAnDDkF,KAmDeT,mBACdpE,MApDD6E,KAoDYnD,MAAMf,MACjBgF,WAAY,CAAE,aAAc,QAC5BC,WAAY,CACVC,eACE,gBAAC,IAAD,CACEnH,KAAMoH,IACN1N,UAAWoG,kBAAK,yBAM1B,gBAACyG,EAAA,EAAD,CAAMnD,MAAI,EAACuD,GAAI,EAAGC,GAAI,EAAGS,aAAa,WAAWZ,QAAQ,YACvD,gBAAC/G,EAAA,EAAD,CAAQC,WAAS,EAAC2G,QAAS,WAAQ,EAAKb,mBACtC,gBAAC5F,EAAA,EAAD,CAAYnG,UAAWoG,kBAAK,eAAgBC,MAAM,SAChD,gBAAC,IAAD,CACEC,KAAMsH,IACN5N,UAAWoG,kBAAK,sBAElB,wBAAMpG,UAAWoG,kBAAK,qBAAtB,sBAIN,gBAACyG,EAAA,EAAD,CAAMnD,MAAI,EAACuD,GAAI,EAAGC,GAAI,EAAGS,aAAa,YACpC,gBAAC,EAAD,CACEhI,mBAAoB8G,KAAK9G,mBACzBrE,QAASA,EACToE,gBAAiBA,MAGvB,gBAACmH,EAAA,EAAD,CAAMrN,WAAS,EAACsN,UAAU,MAAM9M,UAAWoG,kBAAK,kBAC9C,gBAACyG,EAAA,EAAD,CAAMnD,MAAI,EAACsD,GAAI,IACb,gBAACa,EAAA,EAAD,CAAO7N,UAAWoG,kBAAK,4BACrB,gBAACyG,EAAA,EAAD,CAAMrN,WAAS,EAACwN,GAAI,IAClB,gBAACH,EAAA,EAAD,CAAMnD,MAAI,EAACsD,IAAE,EAAChN,UAAWoG,kBAAK,wBAC5B,gBAACD,EAAA,EAAD,CAAYE,MAAM,SAASuG,QAAS,WAAQ,EAAKT,oBAAoB,MACnE,wBAAMnM,UAAoB,IAARsC,EAAc8D,kBAAK,eAAiBA,kBAAK,oBACxDoC,EAAYI,IAAKJ,EAAYI,IAAM,GAEtC,wBAAM5I,UAAoB,IAARsC,EAAc8D,kBAAK,uBAAyBA,kBAAK,iBAAnE,SAGJ,gBAACyG,EAAA,EAAD,CAAMnD,MAAI,EAACsD,IAAE,EAAChN,UAAWoG,kBAAK,wBAC5B,gBAACD,EAAA,EAAD,CAAYE,MAAM,SAASuG,QAAS,WAAQ,EAAKT,oBAAoB,UACnE,wBAAMnM,UAAoB,QAARsC,EAAkB8D,kBAAK,gBAAkBA,kBAAK,oBAC7DoC,EAAYK,KAAML,EAAYK,KAAO,GAExC,wBAAM7I,UAAoB,QAARsC,EAAkB8D,kBAAK,uBAAyBA,kBAAK,iBAAvE,UAGJ,gBAACyG,EAAA,EAAD,CAAMnD,MAAI,EAACsD,IAAE,EAAChN,UAAWoG,kBAAK,wBAC5B,gBAACD,EAAA,EAAD,CAAYE,MAAM,SAASuG,QAAS,WAAQ,EAAKT,oBAAoB,aACnE,wBAAMnM,UAAoB,WAARsC,EAAqB8D,kBAAK,mBAAqBA,kBAAK,oBACnEoC,EAAYQ,QAASR,EAAYQ,QAAU,GAE9C,wBAAMhJ,UAAoB,WAARsC,EAAqB8D,kBAAK,uBAAyBA,kBAAK,iBAA1E,aAGJ,gBAACyG,EAAA,EAAD,CAAMnD,MAAI,EAACsD,IAAE,EAAChN,UAAWoG,kBAAK,wBAC5B,gBAACD,EAAA,EAAD,CAAYE,MAAM,SAASuG,QAAS,WAAQ,EAAKT,oBAAoB,cACnE,wBAAMnM,UAAoB,YAARsC,EAAsB8D,kBAAK,oBAAsBA,kBAAK,oBACrEoC,EAAYO,SAAUP,EAAYO,SAAW,GAEhD,wBAAM/I,UAAoB,YAARsC,EAAsB8D,kBAAK,uBAAyBA,kBAAK,iBAA3E,cAGJ,gBAACyG,EAAA,EAAD,CAAMnD,MAAI,EAACsD,IAAE,EAAChN,UAAWoG,kBAAK,wBAC5B,gBAACD,EAAA,EAAD,CAAYE,MAAM,SAASuG,QAAS,WAAQ,EAAKT,oBAAoB,YACnE,wBAAMnM,UAAoB,UAARsC,EAAoB8D,kBAAK,kBAAoBA,kBAAK,oBACjEoC,EAAYM,OAAQN,EAAYM,OAAS,GAE5C,wBAAM9I,UAAoB,UAARsC,EAAoB8D,kBAAK,uBAAyBA,kBAAK,iBAAzE,aAIN,gBAACyG,EAAA,EAAD,CAAMnD,MAAI,EAACsD,GAAI,GAAIN,MAAO,CAACoB,SAAU,SAUnC,gBAACC,EAAA,EAAD,CACE/N,UAAU,oBACVgO,aAAW,EACXjM,KAAMA,EACNkM,cAAc,EACdC,aAAc,kBAAM,EAAKC,kBAAkB7M,EAASO,IACpDuM,UAAW,SAACC,EAAUhM,GAAX,OAA6B,EAAKiM,eAAeD,EAAKhM,EAAOf,EAASO,IACjF0M,mBAAoB,CAAC,EAAG,GAAI,cAhchD,wCA0coBjN,EAAcO,GAC9B,IAAI2M,EAAuB,EAC3B,OACE,gCACClN,EAAQC,IAAI,SAACC,EAAQa,GACpB,IAAMoM,EAAgB5M,EAAa4H,OAAO,SAAAiF,GAAG,OAAIA,IAAQlN,EAAOb,OAAM,GAClEgO,GAAoB,EACpBF,GAAiBnN,EAAQe,EAAQ,KACnCsM,IAAoB9M,EAAa4H,OAAO,SAAAiF,GAAG,OAAIA,IAASpN,EAAQe,EAAQ,GAAG1B,OAAM,IAEnF,IAAM+L,EAAQ,CACZrN,KAAMoP,EAAuC,IAAvBD,EAA6B,EACnDvP,OAAQwP,EAAgB,IAAM,EAC9BG,SAAU,QACVC,SAAU,QACVC,YAAcH,OAA0CI,EAAtB,qBAKpC,OAHIN,GACFD,IAGA,gBAACQ,EAAA,EAAD,CAAWtC,MAAOA,GAChB,wBAAM1M,UAAU,YAAYwB,EAAOZ,OACnC,uBAAK8L,MAAO,CAACuC,MAAO,UAChB,gBAACC,EAAA,EAAD,CACI5I,KAAM6I,IACNvC,QAAS,gBAKjB,gBAACwC,EAAA,EAAD,CACIxH,MAAO,GACPL,SAAU,SAAC8H,aA3e3B,qCAqfiBhB,EAAUhM,EAAef,EAAcO,GACpD,IAAI2M,EAAuB,EACrBjP,EAAmB8C,EAAQ,IAAM,EAAI,UAAY,UAEvD,OADAmI,QAAQC,IAAIgC,KAAKnD,MAAMxI,kBAErB,gBAACwO,EAAA,EAAD,CACE5C,MAAO,CAACnN,gBAAiBA,GACzBqN,QAAS,WACU,YAAbyB,EAAI5N,KACNwH,OAAOC,SAASqH,KAAO,iCAAmClB,EAAIzL,QAAU,IAAMyL,EAAIlE,WAAa,IAAMkE,EAAI9D,UAC3E,yBAArB8D,EAAIpL,aACbgF,OAAOC,SAASqH,KAAO,kCAAoClB,EAAIzL,QAAU,IAAMyL,EAAIlE,WAAa,IAAMkE,EAAI9D,UAC5E,cAArB8D,EAAIpL,aACbgF,OAAOC,SAASqH,KAAO,iCAAmClB,EAAIzL,QAAU,IAAMyL,EAAIlE,WAAa,IAAMkE,EAAI9D,UAC3E,iBAArB8D,EAAIpL,eACbgF,OAAOC,SAASqH,KAAO,kCAAoClB,EAAIzL,QAAU,IAAMyL,EAAIlE,WAAa,IAAMkE,EAAI9D,aAG7GjJ,EAAQC,IAAI,SAACC,EAAQa,GACpB,IAAMoM,EAAgB5M,EAAa4H,OAAO,SAAAiF,GAAG,OAAIA,IAAQlN,EAAOb,OAAM,GAClEgO,GAAoB,EACpBF,GAAiBnN,EAAQe,EAAQ,KACnCsM,IAAoB9M,EAAa4H,OAAO,SAAAiF,GAAG,OAAIA,IAASpN,EAAQe,EAAQ,GAAG1B,OAAM,IAEnF,IAAM+L,EAAQ,CACZrN,KAAMoP,EAAuC,IAAvBD,EAA6B,EACnDvP,OAAQwP,EAAgB,IAAM,EAC9B3P,SAAU2P,EAAgB,SAAW,WACrCG,SAAU,QACVC,SAAU,QACVC,YAAcH,OAA0CI,EAAtB,qBAEhCN,GACFD,IAcF,OACE,gBAACQ,EAAA,EAAD,CAAWtC,MAAOA,GACN,GAATrK,EACC,uBAAKqK,MAAO,CAAC3N,MAAO,OAAQO,UAAW,WACrC,uBACEU,UAAU,cACV0M,MAAO,CACL9M,QAAS,eACTL,gBApBS,CACnBiQ,IAAK,UACLC,OAAQ,UACRC,KAAM,WAiBkCrB,EAAI7M,EAAOb,SAd/B,CACpB6O,IAAK,EACLC,OAAQ,EACRC,KAAM,GAYiBrB,EAAI7M,EAAOb,SAGnB,GAAT0B,GAAuB,IAATA,GAAwB,IAATA,EAC/BqJ,IAAeiE,kBAAkBtB,EAAI7M,EAAOb,OACjC,IAAT0B,EACFgM,EAAI7M,EAAOb,MAAQ,MAAQ,KACzB0N,EAAI7M,EAAOb,cApjB7B,GAAoCiP,aA6jB9BC,GAAkB,SAACvG,GAAD,OAAkBA,EAAMb,YAE1CqH,GAAqB,SAACC,GAAD,MAAyB,CACnDC,IAAKC,YAAmB1P,EAAuBwP","file":"static/js/5.aa6fa281.chunk.js","sourcesContent":["import * as React from 'react';\nimport { CircularProgress } from '@material-ui/core/';\nimport { makeStyles } from '@material-ui/core/styles';\n\ninterface LoaderProps {\n}\n\nconst useStyles = makeStyles({\n\troot: {\n        position: 'fixed',\n        width: '100%',\n        height: '100%',\n        zIndex: 9999,\n        right: '0px',\n        bottom: '0px',\n        top: '0px',\n        left: '0px',\n        textAlign: \"center\",\n        backgroundColor: 'rgba(0, 0, 0, 0.5)'\n    },\n    container:{\n        height: '100%',\n        outline: 0,\n        alignItems: 'center',\n        justifyContent: 'center',\n        display: 'flex',\n        flexDirection: 'column'\n    }\n});\n\nexport const Loader: React.FC<LoaderProps> = (): JSX.Element => {\n    // const buttonclasses = ButtonStyle();\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            <div className={classes.container}>\n                <CircularProgress size={150}/>\n            </div>\n        </div>\n    )\n}\n\nLoader.defaultProps = {}","export const ActionConsts = {\n  TicketList: {\n    ResetReducer: 'TicketList_ResetReducer',\n    SetReducer: 'TicketList_SetReducer',\n  },\n};\n","//#region Global Imports\n// import { Dispatch } from 'redux';\n//#endregion Global Imports\n\n//#region Local Imports\nimport { ActionConsts } from './ActionConsts';\n// import { PlanetaryService } from 'Components/Services';\n//#endregion Local Imports\n\n//#region Interface Imports\n//#endregion Interface Imports\n\nexport const TicketListActions = {\n  Map: (payload: {}) => ({\n    payload,\n    type: ActionConsts.TicketList.SetReducer,\n  }),\n\n  Reset: () => ({\n    type: ActionConsts.TicketList.ResetReducer,\n  }),\n};\n","import faker from 'faker';\nimport { capitalize } from 'lodash';\n\nconst columnNames = [\n  {\n    name: 'urgency',\n    title: 'Urgency',\n  },\n  {\n    name: 'status',\n    title: 'Status',\n  },\n  {\n    name: 'app_number',\n    title: 'Ticket ID',\n  },\n  {\n    name: 'dueDate',\n    title: 'Due Date',\n  },\n  {\n    name: 'type',\n    title: 'Type',\n  },\n  {\n    name: 'specificType',\n    title: 'Specific Type',\n  },\n  {\n    name: 'member',\n    title: 'Member',\n  },\n  {\n    name: 'company',\n    title: 'Company',\n  },\n  {\n    name: 'ticketOwner',\n    title: 'Ticket Owner',\n  },\n  {\n    name: 'assignedTo',\n    title: 'Assigned To',\n  },\n  {\n    name: 'createdDate',\n    title: 'Created Date',\n  },\n  {\n    name: 'lastUpdate',\n    title: 'Last Update',\n  },\n  {\n    name: 'channel',\n    title: 'Channel',\n  },\n  {\n    name: 'is_vip',\n    title: 'VIP',\n  },\n];\n\nconst getColumnExtensions = () => {\n  const columns: any[] = [];\n\n  columnNames.map(column => {\n    let width = 200;\n\n    switch (column.name) {\n      case 'urgency':\n      case 'status':\n      case 'app_uid':\n        width = 100;\n        break;\n      case 'type':\n      case 'dueDate':\n        width = 120;\n        break;\n      case 'specificType':\n      case 'company':\n        width = 250;\n        break;\n      default:\n        width = 200;\n    }\n\n    columns.push({\n      columnName: column.name,\n      width: width,\n      wordWrapEnabled: true,\n    });\n  });\n\n  return columns;\n};\n\nconst generateRows = () => {\n  const rows: any[] = [];\n  const types = ['Inquiry', 'Availment', 'Request', 'Complaint'];\n  const specTypes = [\n    'Billing Dispute Inquiry',\n    'Outpatient Consult',\n    'X-Ray Procedure Availment',\n    'Service Complaint',\n    'Dental Coverage',\n    'Premium Adjustment',\n  ];\n  const statuses = ['open', 'pending', 'resolved', 'closed'];\n  const channels = ['email', 'fax', 'sms'];\n  const is_vip = [true, false];\n  for (let index = 0; index < 50; index++) {\n    const status = faker.random.arrayElement(statuses);\n    const urgency =\n      status === 'closed' || status === 'resolved'\n        ? 3\n        : faker.random.arrayElement([1, 2]);\n\n    rows.push({\n      urgency: urgency,\n      status: capitalize(status),\n      app_uid: faker.random.alphaNumeric(8),\n      dueDate: faker.date.future(),\n      type: faker.random.arrayElement(types),\n      specificType: faker.random.arrayElement(specTypes),\n      member: faker.name.findName(),\n      company: faker.company.companyName(),\n      ticketOwner: faker.name.findName(),\n      assignedTo: faker.name.findName(),\n      createdDate: faker.date.future(),\n      lastUpdate: faker.date.future(),\n      channel: faker.random.arrayElement(channels),\n      is_vip: faker.random.arrayElement(is_vip),\n    });\n  }\n\n  return rows;\n};\n\nconst tableData: any = {\n  formattedColumns: {\n    required_columns: [],\n    urgency_columns: ['urgency'],\n    text_columns: [\n      'status',\n      'app_uid',\n      'type',\n      'specificType',\n      'member',\n      'company',\n      'ticketOwner',\n      'assignedTo',\n      'channel',\n    ],\n    date_columns: [\n      'dueDate', \n      'createdDate', \n      'lastUpdate',\n    ],\n    boolean_columns: [\n      'is_vip',\n    ],\n    detaillink_columns: [\n      'app_uid',\n    ]\n  },\n  columnExtensions: getColumnExtensions(),\n  fixedColumns: [\n    'urgency',\n    'status',\n    'dueDate',\n    'app_uid',\n    'type',\n    'specificType',\n    'member',\n  ],\n  cellProperties: [],\n  columns: columnNames,\n  rows: generateRows(),\n};\n\nexport { tableData };\n","let backendUrl = process.env.REACT_APP_BASE_URL;\n\nexport class API {\n\n    // //local\n    // static localUrl = 'https://neo-local.seerlabs.com/api';\n    \n    // //stg\n    // static stgUrl = 'http://18.138.94.224:4101/api';\n    \n    static async get(url: string, success: Function, fail: Function) {\n        // const backendUrl = (process.env.NODE_ENV === 'development' ? this.localUrl : this.stgUrl);\n        fetch(backendUrl + url, {\n            method: 'GET',\n            headers: { \n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + localStorage.getItem('pm_token'),\n            }\n        })\n        .then(response => response.json())\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n    \n    static async post(url: string, body: any, success: Function, fail: Function) {\n        // const backendUrl = (process.env.NODE_ENV === 'development' ? this.localUrl : this.stgUrl);\n        fetch(backendUrl + url, {\n            method: 'POST',\n            headers: { \n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + localStorage.getItem('pm_token'),\n            },\n            body: JSON.stringify(body)\n        })\n        .then(response => response.json())\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n\n    static async put(url: string, body: any, success: Function, fail: Function) {\n        // const backendUrl = (process.env.NODE_ENV === 'development' ? this.localUrl : this.stgUrl);\n        fetch(backendUrl + url, {\n            method: 'PUT',\n            headers: { \n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + localStorage.getItem('pm_token'),\n            },\n            body: JSON.stringify(body)\n        })\n        .then(response => response)\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n}","let backendUrl = process.env.REACT_APP_PMAKER_BASE_URL;\n\nexport class Processmaker {\n\n    // //local\n    // static localUrl = 'localhost:32766/api/1.0/workflow';\n\n    // //stg\n    // static stgUrl = 'http://18.140.39.215/api/1.0/workflow';\n    \n    static async get(url: string, success: Function, fail: Function) {\n        const token = localStorage.getItem('pm_token') || '';\n        // const backendUrl = (process.env.NODE_ENV === 'development' ? this.localUrl : this.stgUrl);\n        fetch(backendUrl + url, {\n            method: 'GET',\n            headers: { \n                'Authorization': 'Bearer ' + token\n            },\n        })\n        .then(response => response.json())\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n\n    static async post(url:string, body: any, success: Function, fail: Function) {\n        // const backendUrl = (process.env.NODE_ENV === 'development' ? this.localUrl : this.stgUrl);\n        fetch(backendUrl + url, {\n            method: 'POST',\n            headers: { \n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + localStorage.getItem('pm_token')\n            },\n            body: JSON.stringify(body)\n        })\n        .then(response => response.json())\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n\n    static async put(url: string, body: any, success: Function, fail: Function) {\n        // const backendUrl = (process.env.NODE_ENV === 'development' ? this.localUrl : this.stgUrl);\n        fetch(backendUrl + url, {\n            method: 'PUT',\n            headers: { \n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + localStorage.getItem('pm_token')\n            },\n            body: JSON.stringify(body)\n        })\n        .then(response => response)\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n}","//#region Global Imports\nimport * as React from 'react';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport {\n  Grid,\n  Typography,\n  Button,\n  TextField,\n  Paper,\n  Popover,\n  Checkbox,\n  FormGroup,\n  FormControlLabel,\n  TableRow,\n  TableCell,\n} from '@material-ui/core';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport {\n  usePopupState,\n  bindTrigger,\n  bindPopover,\n} from 'material-ui-popup-state/hooks';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faDownload,\n  faSearch,\n  faThList,\n  faSort,\n} from '@fortawesome/free-solid-svg-icons';\nimport { map, findIndex, remove, filter, lowerCase } from 'lodash';\nimport clsx from 'clsx';\nimport { Fab } from '@material-ui/core';\n\n//#endregion Global Imports\n\n//#region Interface Imports\nimport { Store } from 'Components/Stores/IStore';\nimport { Loader } from 'Components/UI/LoadingIndicator';\nimport { ITicketListPage } from './ITicketListPage';\nimport { TicketListActions } from './TicketListActions';\n// import { TableComponent } from './TicketListTableFixed';\n// import { TableComponent } from './TicketListTable';\nimport { tableData } from './TicketListTableData';\nimport { API } from './API';\nimport { Processmaker } from './Processmaker';\n\n// import { Components } from '@hims/core';\n\nimport './index.scss';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { PositionProperty } from 'csstype';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\n//#endregion Interface Imports\n\nconst popoverStyles = makeStyles((theme: Theme) => ({\n  popoverCheckbox: {\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n  },\n}));\n\ninterface SelectColumnsPopoverProps {\n  columns: any[];\n  selectedColumns: any[];\n  setSelectedColumns: any;\n}\n\nconst SelectColumnsPopover: React.FC<SelectColumnsPopoverProps> = (\n\tprops: SelectColumnsPopoverProps,\n): JSX.Element => {\n  const { \n    columns,\n    selectedColumns,\n    setSelectedColumns,\n  } = props;\n  const classes = popoverStyles(props);\n\n  const onCheckChange = (columnObj: any) => (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    if (event.target.checked) {\n      const tmpSelectedColumns = [...selectedColumns];\n      tmpSelectedColumns.push(columnObj);\n\n      setSelectedColumns(tmpSelectedColumns);\n    } else {\n      const tmpSelectedColumns = [...selectedColumns];\n      remove(tmpSelectedColumns, columnName => {\n        return columnName.name === columnObj.name;\n      });\n\n      setSelectedColumns(tmpSelectedColumns);\n    }\n  };\n\n  const popupState = usePopupState({\n    variant: 'popover',\n    popupId: 'columnListPopover',\n  });\n\n  return(\n    <div>\n      <Button fullWidth {...bindTrigger(popupState)}>\n        <Typography className={clsx('link-button')} align=\"right\">\n          <FontAwesomeIcon\n            icon={faThList}\n            className={clsx('link-button-icon')}\n          />\n          <span className={clsx('link-button-text')}>Display Columns</span>\n        </Typography>\n      </Button>\n      <Popover\n        {...bindPopover(popupState)}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n      >\n        <FormGroup>\n          {map(columns, (column, idx) => {\n            const checked =\n              findIndex(selectedColumns, { name: column.name }) >= 0;\n\n            return (\n              <FormControlLabel\n                key={idx}\n                control={\n                  <Checkbox\n                    checked={checked}\n                    onChange={onCheckChange(column)}\n                    value={column.name}\n                    color=\"primary\"\n                  />\n                }\n                className={classes.popoverCheckbox}\n                label={column.title}\n              />\n            );\n          })}\n        </FormGroup>\n      </Popover>\n    </div> \n  );\n};\n\nexport class TicketListPage extends React.Component<ITicketListPage.IProps, ITicketListPage.IState> {\n  \n  constructor(props: ITicketListPage.IProps) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n      loading: false,\n      status: '',\n      query: '',\n      columns: [],\n      selectedColumns: [],\n      fixedColumns: [],\n      formattedColumns: {},\n      columnExtensions: [],\n      rows: [],\n      ticketStats: {},\n      ticketList: [],\n    };\n\n    //localStorage.setItem('pm_token', 'e383f1c7647e1632da5ca130d19f3ac1f31a1c47');\n  }\n  \n  onLogout = () => {\n    window.location.replace('../index.html#/');\n  }\n\n\treset = () => {\n\t\tthis.setState({\n      loading: false,\n      status: '',\n      query: '',\n      columns: [],\n      selectedColumns: [],\n      fixedColumns: [],\n      formattedColumns: {},\n      columnExtensions: [],\n      rows: [],\n      ticketStats: {},\n      ticketList: [],\n\t\t});\n  };\n\n  getTicketStats = (tickets: any[]) => {\n    let all = 0;\n    let open = 0;\n    let closed = 0;\n    let resolved = 0;\n    let pending = 0;\n\n    all = tickets.length;\n  \n    for (const ticket of tickets) {\n      switch (lowerCase(ticket.status)) {\n        case 'open':\n          open++;\n          break;\n        case 'pending':\n          pending++;\n          break;\n        case 'resolved':\n          resolved++;\n          break;\n        case 'closed':\n          closed++;\n          break;\n        default:\n          break;\n      }\n    }\n  \n    return {\n      all,\n      open,\n      closed,\n      resolved,\n      pending,\n    };\n  };\n\n  filterTickets = () => {\n    let ins = this;\n    const ticketList = ins.state.ticketList ? ins.state.ticketList : [];\n    const query = ins.state.query ? ins.state.query.trim().toLowerCase() : '';\n    const status = ins.state.status ? ins.state.status.trim().toLowerCase() : ''; \n    //console.log('query: ['+query+'] status: ['+status+']');\n\n    ins.setState({\n      loading: true\n    }, () => {\n      let rows = ticketList.filter((item: any) => {\n        let itemapp_uid = item.app_uid.toLowerCase();\n        let itemStatus = item.status.toLowerCase();\n        \n        if((status.length === 0) || (itemStatus === status)){\n          if(query && query.length > 0){\n            return (itemapp_uid.indexOf(query) > -1);\n          }\n          else{\n            return true;\n          }\n        }\n        else{\n          return false;\n        }\n      });\n\n      ins.setState({\n        loading: false,\n        rows: rows\n      });\n    });\n  }\n\n  loadTicketList = () => {\n    let ins = this;\n\n    if(ins.state.loading){\n      return;\n    }\n\n    ins.setState({\n      loading: true\n    }, () => {\n      Processmaker.get('cases', (response) => {\n        let promises = response.map((item) => {\n          let app_uid = item.app_uid;\n          let app_index = item.del_index;\n          let app_number = item.app_number;\n          return new Promise(function(resolve) {\n            Processmaker.get('cases/'+app_uid+'/variables?app_index='+app_index, \n            (response) => {\n              resolve({\n                'app_uid': response.APPLICATION,\n                'ticket_no': (response.ticket_no || null),\n                'app_number': app_number\n              });\n            },\n            (error) => {\n              console.log('error', error);\n              resolve(null);\n            })\n          });\n        });\n\n        Promise.all(promises).then((app_uid_map) => {\n\n          API.get(\n            'customer-care/tickets', \n            (response) => {\n              \n              let tickets = {};\n              response.forEach((t: any) => {\n                let data = {\n                  'urgency': t.ticket_category.urgency,\n                  'status': t.status,\n                  'ticket_no': t._id,\n                  'dueDate': null,\n                  'type': t.ticket_category.ticket_type,\n                  'specificType': t.ticket_category.specific_type,\n                  'member': t.caller_name,\n                  'company': t.corporate_client,\n                  'ticketOwner': '',\n                  'assignedTo': t.ticket_category.assign_to,\n                  'createdDate': new Date(t.date_created),\n                  'lastUpdate': new Date(t.date_updated),\n                  'channel': t.received_via,\n                  'is_vip': false,\n                  'transaction_no': t.transaction_no,\n                  'app_uid': '',\n                  'app_number': '',\n                }\n                \n                tickets[t._id] = data;\n              });\n\n              let ticketList = app_uid_map.map((app_uid_item: any) => {\n                if(app_uid_item.app_uid !== null && app_uid_item.ticket_no !== null){\n                  let ticket = tickets[app_uid_item.ticket_no] || null;\n\n                  if(ticket!=null){\n                    ticket['app_uid'] = app_uid_item.app_uid;\n                    ticket['app_number'] = GlobalFunction.generateTicketNumber(\n                      ticket['type'],\n                      ticket['specificType'],\n                      app_uid_item.app_number\n                    );\n                    return ticket;\n                  }\n                  else{\n                    return null;\n                  }\n                }\n                else{\n                  return null;\n                }\n                \n              }).filter((item) => {\n                return item !== null;\n              });\n\n              //console.log('ticketList ', ticketList);\n\n              const stat = ins.getTicketStats(ticketList);\n\n              ins.setState({\n                loading: false,\n                ticketList: ticketList,\n                rows: ticketList,\n                ticketStats: stat\n              });\n            },\n            (error) => {\n              console.log('error', error);\n            }\n          );\n        });\n      }, (error) => {\n        console.log('error', error);\n\n        let ticketList = [\n          {\n            'urgency': 'High',\n            'status': 'Open',\n            'ticket_no': '123',\n            'dueDate': new Date(),\n            'type': 'Availment',\n            'specificType': 'Outpatient',\n            'member': 'Juan',\n            'company': 'Square Enix',\n            'ticketOwner': 'Juan',\n            'assignedTo': 'Me',\n            'createdDate': new Date(),\n            'lastUpdate': new Date(),\n            'channel': 'Call',\n            'is_vip': true,\n            'transaction_no': 'transaction_no',\n            'app_uid': 'app_uid',\n            'app_number': 'app_number',\n          }\n        ];\n\n        const stat = ins.getTicketStats(ticketList);\n\n        ins.setState({\n          loading: false,\n          ticketList: ticketList,\n          rows: ticketList,\n          ticketStats: stat\n        });\n      });\n    });\n  }\n\n  setSelectedColumns = (cols) => {\n    this.setState({\n      selectedColumns: cols\n    });\n  }\n\n  getVisibleColumns = () => {\n    return filter(this.state.columns, column => {\n      return findIndex(this.state.selectedColumns, { name: column.name }) >= 0;\n    });\n  }\n\n  generateReport = () => {\n    console.log('generate report');\n  }\n\n  onSearchTextChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    e.preventDefault();\n    const { value } = e.target;\n    this.setState({\n        query: value\n    }, () => this.filterTickets());\n  }\n\n  onStatusFilterClick = (newStatus) => {\n    if(this.state.status === newStatus){\n      return;\n    }\n    //console.log('status: ', newStatus);\n    this.setState({\n      status: newStatus\n    }, () => this.filterTickets());\n  }\n\n  componentWillMount = () => {\n    //localStorage.setItem('pm_token', 'e383f1c7647e1632da5ca130d19f3ac1f31a1c47');\n    let cols = tableData.columns;\n    this.setState({\n      columns: cols,\n      selectedColumns: cols,\n      fixedColumns: (Object.keys(tableData).length > 0 ? tableData['fixedColumns'] : []),\n      formattedColumns: (Object.keys(tableData).length > 0 ? tableData['formattedColumns'] : []),\n      columnExtensions: (Object.keys(tableData).length > 0 ? tableData['columnExtensions'] : []),\n    });\n  }\n\n  componentDidMount = () => {\n    this.loadTicketList();\n  }\n\n  public render(): JSX.Element {\n    let ins  = this;\n    const {\n      loading,\n      status,\n      columns,\n      selectedColumns,\n      fixedColumns,\n      // formattedColumns,\n      // columnExtensions,\n      rows,\n      ticketStats,\n    } = this.state;\n    return (\n      <div>\n        { loading ?\n          (<Loader/>) : null\n        }\n\n        <div style={{position: 'absolute', right: '1rem', top: '1rem'}}>\n          <Fab color='primary' style={{backgroundColor: '#CCCCCC'}}>\n          <ExitToAppIcon onClick={this.onLogout} />\n          </Fab>\n        </div>\n\n        <div className={clsx('TicketListPage')}>\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"space-between\"\n            alignItems=\"baseline\" >\n            <Grid item xs={12} className={clsx('header-label')}>\n              <Typography className={clsx('title')} color=\"textPrimary\">\n                Tickets\n              </Typography>\n            </Grid>\n          </Grid>\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"space-between\"\n            alignItems=\"center\"\n            spacing={1}\n            className={clsx('search')} >\n            <Grid item sm={12} md={8}>\n              <TextField\n                id=\"cc_search_tickets_tf\"\n                placeholder=\"Search ticket ID, approval code, subject, or recipient\"\n                className={clsx('search-field')}\n                margin=\"dense\"\n                variant=\"outlined\"\n                fullWidth\n                onChange={ins.onSearchTextChange}\n                value={ins.state.query}\n                inputProps={{ 'aria-label': 'bare' }}\n                InputProps={{\n                  startAdornment: (\n                    <FontAwesomeIcon\n                      icon={faSearch}\n                      className={clsx('input-adornment')}\n                    />\n                  ),\n                }}\n              />\n            </Grid>\n            <Grid item sm={6} md={2} alignContent=\"flex-end\" justify=\"flex-end\">\n              <Button fullWidth onClick={() => { this.generateReport() }}>\n                <Typography className={clsx('link-button')} align=\"right\">\n                  <FontAwesomeIcon\n                    icon={faDownload}\n                    className={clsx('link-button-icon')}\n                  />\n                  <span className={clsx('link-button-text')}>Generate Report</span>\n                </Typography>\n              </Button>\n            </Grid>\n            <Grid item sm={6} md={2} alignContent=\"flex-end\">\n              <SelectColumnsPopover \n                setSelectedColumns={this.setSelectedColumns} \n                columns={columns} \n                selectedColumns={selectedColumns} />\n            </Grid>\n          </Grid>\n          <Grid container direction=\"row\" className={clsx('tickets-table')}>\n            <Grid item xs={12}>\n              <Paper className={clsx('tickets-table-container')}>\n                <Grid container xs={12}>\n                  <Grid item xs className={clsx('tickets-table-stats')}>\n                    <Typography align=\"center\" onClick={() => { this.onStatusFilterClick('') }}>\n                      <span className={(status=='') ? clsx('tickets-all') : clsx('tickets-default')}>\n                        {ticketStats.all? ticketStats.all : 0}\n                      </span>\n                      <span className={(status=='') ? clsx('ticket-label-active') : clsx('ticket-label')}>ALL</span>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs className={clsx('tickets-table-stats')}>\n                    <Typography align=\"center\" onClick={() => { this.onStatusFilterClick('open') }}>\n                      <span className={(status=='open') ? clsx('tickets-open') : clsx('tickets-default')}>\n                        {ticketStats.open? ticketStats.open : 0}\n                      </span>\n                      <span className={(status=='open') ? clsx('ticket-label-active') : clsx('ticket-label')}>OPEN</span>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs className={clsx('tickets-table-stats')}>\n                    <Typography align=\"center\" onClick={() => { this.onStatusFilterClick('pending') }}>\n                      <span className={(status=='pending') ? clsx('tickets-pending') : clsx('tickets-default')}>\n                        {ticketStats.pending? ticketStats.pending : 0}\n                      </span>\n                      <span className={(status=='pending') ? clsx('ticket-label-active') : clsx('ticket-label')}>PENDING</span>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs className={clsx('tickets-table-stats')}>\n                    <Typography align=\"center\" onClick={() => { this.onStatusFilterClick('resolved') }}>\n                      <span className={(status=='resolved') ? clsx('tickets-resolved') : clsx('tickets-default')}>\n                        {ticketStats.resolved? ticketStats.resolved : 0}\n                      </span>\n                      <span className={(status=='resolved') ? clsx('ticket-label-active') : clsx('ticket-label')}>RESOLVED</span>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs className={clsx('tickets-table-stats')}>\n                    <Typography align=\"center\" onClick={() => { this.onStatusFilterClick('closed') }}>\n                      <span className={(status=='closed') ? clsx('tickets-closed') : clsx('tickets-default')}>\n                        {ticketStats.closed? ticketStats.closed : 0}\n                      </span>\n                      <span className={(status=='closed') ? clsx('ticket-label-active') : clsx('ticket-label')}>CLOSED</span>\n                    </Typography>\n                  </Grid>\n                </Grid>\n                <Grid item xs={12} style={{overflow: 'auto'}}>\n                  {/* <TableComponent\n                    id=\"ticket-list-table\"\n                    rows={rows}\n                    columns={this.getVisibleColumns()}\n                    fixedColumns={fixedColumns}\n                    formattedColumns={formattedColumns}\n                    columnExtensions={columnExtensions}\n                    disableSearch\n                  /> */}\n                  <CustomTable\n                    className='ticket-list-table'\n                    canOverflow\n                    rows={rows}\n                    stickyHeader={true}\n                    renderHeader={() => this.renderTableHeader(columns, fixedColumns)}\n                    renderRow={(row: any, index: number) => this.renderTableRow(row, index, columns, fixedColumns)}\n                    rowsPerPageOptions={[5, 10, 15]} />\n                </Grid>\n              </Paper>\n            </Grid>\n          </Grid>\n        </div>\n      </div>\n    );\n  }\n  \n  renderTableHeader(columns: any, fixedColumns: any): JSX.Element {\n    let dockedColumnsCounter = 0;\n    return (\n      <>\n      {columns.map((column, index) => {\n        const matchedColumn = fixedColumns.filter(col => col === column.name)[0];\n        let nextColumnIsFixed = true;\n        if (matchedColumn && columns[index + 1]) {\n          nextColumnIsFixed = fixedColumns.filter(col => col ===  columns[index + 1].name)[0] ? true : false;\n        }\n        const style = {\n          left: matchedColumn ? dockedColumnsCounter * 125 : 0,\n          zIndex: matchedColumn ? 125 : 0,\n          minWidth: '125px',\n          maxWidth: '125px',\n          borderRight: !nextColumnIsFixed ? '#9EA3AC 2px solid' : undefined\n        };\n        if (matchedColumn) {\n          dockedColumnsCounter++;\n        }\n        return (\n          <TableCell style={style}>\n            <span className='header-2'>{column.title}</span>\n            <div style={{float: 'right'}}>\n                <IconButton \n                    icon={faSort} \n                    onClick={() => {\n                        // this.sortTickets('urgency', true);\n                        // this.setState({ticketListUpdated: true});\n                    }} />\n            </div>\n            <InputField\n                value={''}\n                onChange={(_value: string) => {\n                    // this.setState(prevState => ({...prevState, [attrName]: value}));\n                }} />\n          </TableCell>\n        );\n      })}\n      </>\n    );\n  }\n\n  renderTableRow(row: any, index: number, columns: any, fixedColumns: any): JSX.Element {\n    let dockedColumnsCounter = 0;\n    const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n    console.log(this.state.formattedColumns);\n    return (\n      <TableRow \n        style={{backgroundColor: backgroundColor}}\n        onClick={() => {\n          if (row.type === 'Inquiry') {\n            window.location.href = '#/customer-care/update-ticket/' + row.app_uid + '/' + row.app_number + '/' + row.ticket_no;\n          } else if (row.specificType === 'Outpatient Procedure') {\n            window.location.href = '#/customer-care/resolve-ticket/' + row.app_uid + '/' + row.app_number + '/' + row.ticket_no;\n          } else if (row.specificType === 'Inpatient') {\n            window.location.href = '#/customer-care/update-ticket/' + row.app_uid + '/' + row.app_number + '/' + row.ticket_no;\n          } else if (row.specificType === 'Consultation') {\n            window.location.href = '#/customer-care/resolve-ticket/' + row.app_uid + '/' + row.app_number + '/' + row.ticket_no;\n          }\n        }}>\n        {columns.map((column, index) => {\n          const matchedColumn = fixedColumns.filter(col => col === column.name)[0];\n          let nextColumnIsFixed = true;\n          if (matchedColumn && columns[index + 1]) {\n            nextColumnIsFixed = fixedColumns.filter(col => col ===  columns[index + 1].name)[0] ? true : false;\n          }\n          const style = {\n            left: matchedColumn ? dockedColumnsCounter * 125 : 0,\n            zIndex: matchedColumn ? 125 : 0,\n            position: matchedColumn ? 'sticky' : 'relative' as PositionProperty,\n            minWidth: '125px',\n            maxWidth: '125px',\n            borderRight: !nextColumnIsFixed ? '#9EA3AC 2px solid' : undefined\n          };\n          if (matchedColumn) {\n            dockedColumnsCounter++;\n          }\n          const urgencyColor = {\n            Low: '#3AB77D',\n            Medium: '#FAB435',\n            High: '#FD5451'\n          };\n\n          const urgencyNumber = {\n            Low: 3,\n            Medium: 2,\n            High: 1\n          };\n\n          return (\n            <TableCell style={style}>\n              {index == 0 ? (\n                <div style={{width: '100%', textAlign: 'center'}}>\n                  <div \n                    className='number-item' \n                    style={{\n                      display: 'inline-block', \n                      backgroundColor: urgencyColor[row[column.name]]}}>\n                    {urgencyNumber[row[column.name]]}\n                  </div>\n                </div>\n              ) : index == 3 || index == 10 || index == 11 ? (\n                GlobalFunction.toShortDateString(row[column.name])\n              ) : index == 13 ? (\n                row[column.name] ? 'Yes' : 'No'\n              ) : row[column.name]}\n            </TableCell>\n          );\n        })}\n      </TableRow>\n    );\n  }\n}\n\nconst mapStateToProps = (state: Store) => state.ticketList;\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n\tMap: bindActionCreators(TicketListActions.Map, dispatch),\n});\n\nexport { mapStateToProps, mapDispatchToProps };\n"],"sourceRoot":""}