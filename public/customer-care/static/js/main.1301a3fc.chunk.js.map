{"version":3,"sources":["Pages/CustomerCarePage/GlobalFunction.tsx","Pages/CustomerCarePage/Components/InputField.tsx","Pages/CustomerCarePage/API.tsx","Pages/CustomerCarePage/Components/IconButton.tsx","Pages/CustomerCarePage/Components/CustomTable.tsx","Pages/TicketList/Processmaker.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/CheckContractSection.tsx","../@hims/core/dist/index.es.js","Pages/CustomerCarePage/Components/TextButton.tsx","Pages/CustomerCarePage/CreateTicketPage/Components/SearchedMembersList.tsx","Pages/CustomerCarePage/Components/Loading.tsx","Pages/CustomerCarePage/MemberDataSection.tsx","Pages/CustomerCarePage/Components/Dropdown.tsx","Pages/CustomerCarePage/Components/DetailedDropdown.tsx","Pages/CustomerCarePage/Components/DetailedNumberField.tsx","Pages/CustomerCarePage/Components/DatePicker.tsx","Pages/CustomerCarePage/CreateTicketPage/Components/ConfinementSection.tsx","Pages/CustomerCarePage/Components/NumberField.tsx","Pages/CustomerCarePage/Components/CustomCheckbox.tsx","Pages/CustomerCarePage/CreateTicketPage/Components/AvailmentSection.tsx","Pages/CustomerCarePage/Components/CustomDropzone.tsx","Pages/CustomerCarePage/Components/InputArea.tsx","Pages/CustomerCarePage/Components/CustomChip.tsx","Pages/CustomerCarePage/CreateTicketPage/Components/TicketInfoSection.tsx","Pages/CustomerCarePage/Components/InputChip.tsx","Pages/CustomerCarePage/CreateTicketPage/Components/InquirySection.tsx","Pages/CustomerCarePage/Payloads.tsx","Pages/CustomerCarePage/CreateTicketPage/Components/ConsultationSection.tsx","Pages/CustomerCarePage/Processmaker.tsx","Pages/CustomerCarePage/CreateTicketPage/Components/EmergencyRoomSection.tsx","Pages/CustomerCarePage/TicketFooter.tsx","Pages/CustomerCarePage/CreateTicketPage/CreateTicketPage.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/SummarySection.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/CRUDTable.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/UpdateSection.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/AccommodationsSection.tsx","Pages/CustomerCarePage/Components/CustomRadio.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/DiagnosesSection.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/PhysiciansSection.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/ProceduresSection.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/OtherDetailsSection.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/DischargeDetailsSection.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/UploadedDocumentsSection.tsx","Pages/CustomerCarePage/UpdateTicketPage/Components/UpdateInquirySection.tsx","Pages/CustomerCarePage/Components/CustomTab.tsx","Pages/CustomerCarePage/Components/CustomModal.tsx","Pages/CustomerCarePage/UpdateTicketPage/UpdateTicketPage.tsx","Pages/Home/Loadable.tsx","Pages/CustomerCarePage/Components/ComplexTable.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/ApproveAvailmentSection.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/CheckBenefitSection.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/ResolveTicketFooter.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/PartnerNetworkSection.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/SummaryAvailmentSection.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/TicketInfoModal.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/ReviewTicketsSection.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/CheckUtilizationSection.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/ApproveInpatientSection.tsx","Pages/CustomerCarePage/ResolveTicketPage/Components/ApproveConsultationSection.tsx","Pages/CustomerCarePage/ResolveTicketPage/ResolveTicketPage.tsx","Pages/TicketList/Loadable.tsx","Pages/CustomerCarePage/Components/DetailedInputField.tsx","Pages/CustomerCarePage/AdvanceSearch/AdvanceSearch.tsx","Containers/App/index.tsx","i18n.ts","Containers/App/constants.ts","Containers/App/reducer.ts","app.tsx","reducers.ts"],"names":["GlobalFunction","fname","mname","lname","getIntials","num","isDecimal","toFixed","toString","replace","text","initials","wordArray","split","i","length","substring","toUpperCase","paramDate","date","Date","day","getDate","monthIndex","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","seconds","getSeconds","meridian","newSec","toLocaleString","fromDate","toDate","getTime","valueList","Math","round","index","birthDate","ageInMillis","now","abs","getUTCFullYear","ticketType","specificType","ticketNo","tempString","InputField","props","_state","this","placeholder","value","error","dynamicStyle","borderColor","undefined","className","disabled","type","style","onChange","event","charLimit","target","textAlign","React","backendUrl","process","API","url","success","fail","fetch","method","headers","then","response","json","data","catch","body","customHeader","JSON","stringify","IconButton","onClick","icon","size","CustomTable","handleChangePage","_event","page","setState","handleChangeRowsPerPage","rowsPerPage","parseInt","resetPage","getSlicedData","rowsPerPageOptions","startingItem","state","rows","slice","filterData","overflow","canOverflow","stickyHeader","columns","map","column","label","renderHeader","renderRow","row","j","paginationClass","count","labelDisplayedRows","info","onChangeInfo","from","to","labelRowsPerPage","onChangePage","onChangeRowsPerPage","Processmaker","token","localStorage","getItem","CheckContractSection","contractUrls","contractListUpdated","get","cardNo","console","log","benefit","_id","pdfUrl","execPath","viewerUrl","paddingTop","width","height","src","Object","freeze","index$1","index$2","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","service_worker","URL","href","origin","addEventListener","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","index$3","ServiceWorker","index$4","BaseTheme","createMuiTheme","palette","primary","main","contrastText","secondary","typography","fontFamily","button","fontWeight","fontSize","textTransform","overrides","MuiDialog","root","MuiDialogTitle","color","MuiDialogContentText","MuiFormControlLabel","MuiIconButton","MuiButton","containedPrimary","boxShadow","backgroundColor","containedSecondary","border","outlinedSecondary","_extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","_assign","assign","t","s","n","arguments","call","apply","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","__generator","f","y","g","_","sent","trys","ops","verb","Symbol","iterator","v","op","TypeError","pop","push","__spreadArrays","il","r","k","a","jl","borderCss","borderRadius","useStyles","makeStyles","theme","createStyles","control","borderBottomColor","input","display","select","marginTop","spacing","valueContainer","flexWrap","flex","alignItems","noOptionsMessage","padding","singleValue","position","left","bottom","paper","zIndex","right","inputComponent","_a","inputRef","getOwnPropertySymbols","propertyIsEnumerable","__rest","createElement","ref","components","Control","children","innerProps","innerRef","selectProps","classes","TextFieldProps","TextField","InputProps","inputProps","variant","fullWidth","Menu","Paper","square","Option","MenuItem","selected","isFocused","component","isSelected","NoOptionsMessage","Typography","Placeholder","SingleValue","ValueContainer","useState","single","setSingle","FormControl","NoSsr","inputId","options","suggestions","optionItem","isSearchable","isClearable","defaultProps","index$5","InputAutocomplete","borderCss$1","useStyles$1","textField","currentValue","setcurrentValue","id","defaultValue","chips","multiline","index$6","InputChipTextField","borderCss$2","borderStyles","useStyles$2","formControl","selectEmpty","marginRight","StyledOutlinedInput","withStyles","OutlinedInput","items","defVal","find","item","getDefaultValue","setCurrentValue","inputLabel","useRef","labelWidth","InputLabel","htmlFor","Select","selectedItem","name","IconComponent","selectItem","displaySelectItem","required","key","index$7","InputSelect","borderCss$3","borderStyles$1","useStyles$3","errorIcon","float","StyledOutlinedInput$1","FormHelperText","errorMessage","index$8","InputSelectSetValue","useStyles$4","borderCss$4","StyledTextField","index$9","InputTextField","useStyles$5","inputSelect","marginBottom","dialog","align","justify","dialogContent","container","paddingRight","paddingLeft","dialogTitle","dialogContentTitle","dialogContentText","formControlLabel","checkBox","dialogAction","justifyContent","resolveDialogAction","leftButton","marginLeft","rightButton","StyledCheckbox","checked","Checkbox","notes","notesError","isResolved","_b","setDisabled","handleClose","onClose","setFieldValue","fieldName","setFieldError","toLowerCase","Grid","direction","xs","DialogTitle","disableTypography","DialogContent","DialogContentText","FormControlLabel","checkedIcon","labelPlacement","DialogActions","Button","onSubmit","selectItems","Dialog","open","isModalOpen","index$a","TicketModal","styles","_super","SampleCoreComponent","render","Component","index$b","useStyles$6","appBar","breakpoints","up","menuButton","logo","badge","grow","flexGrow","AppBar","Toolbar","edge","menuOnClick","Link","logoImage","alt","userOnClick","Avatar","userImage","badgeCount","propTypes","number","useStyles$7","sideBar","listItem","flexDirection","listItemIcon","minWidth","avatar","avatarSelected","listItemText","listItemTextSelected","iconSelected","divider","ListItemLink","ListItem","isSelectedSidebar","sidebarItem","selectedSidebar","sidebarChanged","setSidebarChanged","dashboard","members","proposals","clients","tickets","reports","templates","help","sidebarSelected","setSidebarSelected","onStorageChange","useEffect","removeEventListener","handleDashboardOnClick","attr","history","setItem","handleSidebarClick","List","ListItemIcon","ListItemText","Divider","useStyles$8","drawer","flexShrink","drawerPaper","content","toolbar","mixins","useStyles$9","gridContainer","breadCrumbs","headerTitle","linkPrevious","cursor","linkCurrent","index$c","Breadcrumbs","useStyles$a","nameFontSize","valueFontSize","useStyles$b","grid","string","useCirclePrimitive","circlePrimitiveStyle","top","rotate","delay","margin","opacity","animation","animationDelay","useStyles$c","useStyles$d","previous_page","current_page","useStyles$e","minHeight","buttonTitle","buttonSubTitle","rightButtons","leftButtons","useStyles$f","sidebar","maxWidth","contentgrid","flexBasis","index$d","LoadingIndicator","AppHeader","AppSidebar","AuthenticatedLayout","mobileOpen","setMobileOpen","handleDrawerToggle","Hidden","smUp","implementation","Drawer","xsDown","PageHeader","ClientInfoItem","GridHorizontalDivider","BreadcrumbsComponent","FloatingButtons","PageLayout","newPlacement","anchorEl","setAnchorEl","_c","setOpen","_d","placement","setPlacement","logolink","Popper","transition","TransitionProps","Fade","timeout","onLogout","currentTarget","prev","index$e","Actions","Definitions","Reducers","Services","Stores","UI","checkStore","store","shape","dispatch","subscribe","getState","replaceReducer","runSaga","injectedReducers","injectedSagas","DAEMON","ONCE_TILL_UNMOUNT","constants","RESTART_ON_REMOUNT","injectReducerFactory","createReducer","isValid","reducer","Reflect","has","getInjectors","injectReducer","allowedModes","descriptor","saga","mode","_mode","includes","injectSagaFactory","args","newDescriptor","hasSaga","task","ejectSagaFactory","cancel","getInjectors$1","injectSaga","ejectSaga","ResponseError","_this","statusText","Error","parseJSON","checkStatus","ActionTypes","index$f","configureStore","initialState","composeEnhancers","sagaMiddleware","middlewares","enhancers","run","hocWithReducer","WrappedComponent","ReducerInjector","context","displayName","useInjectReducer","hocWithSaga","InjectSaga","injectors","componentWillUnmount","useInjectSaga","loadable","importFunc","fallback","LazyComponent","getReducerInjectors","request","getSagaInjectors","index$g","componentProps","ThemeProvider","basename","ActionTypes$1","locale","selectLanguage","language","enTranslationMessages","formatTranslationMessages","messages","defaultFormattedMessages","keys","reduce","formattedMessages","formattedMessage","stateSelector","languageState","index$h","Provider","Children","only","appLocales","messageProviderReducer","action","CHANGE_LOCALE","payload","header","scope","defaultMessage","index$i","Document","Message","NotFoundPage","TextButton","SearchedMembersList","getExtractedMembers","filter","trim","member","searchText","renderMemberShortDetail","firstName","middleName","lastName","onSelectMember","clientName","Loading","CircularProgress","MemberDataSection","benefits","getMemberData","member_card_no","first_name","middle_name","last_name","client","registered_name","date_of_birth","gender","civilStatus","civil_status","contractId","active_contract","isVip","is_vip","onUpdateMemberStateChange","loadingBenefits","combineNodes","level","category","parent_name","limits","limitType","limit","limitUnit","limit_unit","getRecentTicketsData","loadingMember","parentNodes","childNodes","parent","child","foundChild","childNode","code","loadingRecentTickets","recentTickets","ticket","member_id","cases","matchedCase","caseItem","app_uid","pmaker_case_uid","generateTicketNumber","ticket_category","ticket_type","specific_type","app_number","lastUpdate","date_updated","sliceMemberID","slicedText","getBenefitsLimit","forEach","targetLimitIndex","isMembersLoaded","loadingMembers","ticketStatus","renderSearchArea","renderTopArea","renderMemberInfo","promptChooseMember","renderTicketData","trimmedValue","splitValue","newValue","join","faSearch","disableRecentTickets","toNameFormat","toShortDateString","age","getAge","formatNumber","renderTableHeader","rowData","renderTableRow","TableCell","recentTicket","TableRow","urgency","agent","ticketSource","callerName","contactNo","transactionNo","createdBy","toDateAndTime","dateCreated","dateUpdated","Dropdown","choices","classNamePrefix","isDisabled","onInputChange","filterOption","option","rawInput","hasNoInput","choicesAreShort","inputIsShort","isInputMatch","choice","DetailedDropdown","detail","DetailedNumberField","targetNewValue","charAt","isFloat","onFocus","numberValue","parseFloat","isNaN","newStringValue","DatePicker","utils","MomentUtils","format","minDate","ConfinementSection","confinementTypes","confinement","facilities","provider","createTicketAttemp","refreshConfinementState","dateAdmitted","confinementKind","roomType","costPerDay","doctors","doctor","cptCodes","initialDiagnosis","amount","NumberField","disableDelimiter","CustomCheckbox","AvailmentSection","icd10Code","itemToEditIndex","icd10CodeToEdit","doctorToEdit","filteredICD10","icd10Codes","isSame","availment","diagnoses","concat","procedures","totalCost","procedure","remarks","isPrimary","isFinal","specialization","fee","noOfVisits","cptCode","isPHIC","assessmentType","assessmentRemarks","dateAdded","diagnosisIndex","refreshAvailmentState","getFilteredICD10","faPlus","pushBlankDiagnosis","diagnosis","colSpan","lineHeight","faCheckCircle","faTimesCircle","getProcedureCosts","faPen","faMinusCircle","splice","procedureIndex","renderProcedureDetails","stateProcedure","stateProcedures","pushBlankProcedures","CustomDropzone","multiple","onDrop","acceptedFiles","accept","getRootProps","getInputProps","faFileUpload","InputArea","defaultRows","TextareaAutosize","CustomChip","Chip","onDelete","TicketInfoSection","ticketChannels","ticketSources","ticketTypes","specificTypes","urgencies","agents","ticketChannel","refreshTicketState","memberName","brokerName","facility","department","additionalNotes","files","additionalFiles","file","InputChip","fullWidthInput","onAdd","chip","_chip","InquirySection","inquiries","inquiry","specificDetail","answer","relatedTickets","supportDocs","refreshInquiryState","filteredInquiries","getFilteredInquiries","onAddInquiry","onRemoveInquiry","doc","Payloads","uploadedFiles","consultation","transaction_no","received_via","received_from","member_name","corporate_client","broker","hospital_name","caller_name","contact_no","additional_notes","supporting_documents","path","assign_to","availment_details","availments_list","is_primary","is_final","no_of_visits","phic","date_added","assessment_type","assessment_remarks","confinement_details","date_admitted","confinement_kind","gift_given","updates","room_accommodation","room_type","no_of_days","cost","params","others","coverage","final_bill","philhealth_amount","discharge_date","consultation_details","inquiry_details","inquiry_list","specific_detail","related_tickets","support_docs","date_created","date_escalated","created_by","tmp","user_id","module","timestamp","client_id","loa","field","giftGiven","update","hospital_bill","hospitalBill","accommodations","accommodation","days","primaryDiagnosisIndex","physicians","physician","visits","ticket_no","paid_by","paidBy","philhealthAmount","finalBill","dischargeDate","pmCaseId","approval_code","approvalCode","loas","loa_no","loaNo","ConsultationSection","refreshConsultationState","EmergencyRoomSection","chiefComplaint","editIcon","deleteIcon","TicketFooter","interval","setInterval","time","onSaveForNow","lastSave","getTimeDeffirence","onResolveTicket","forceShowResolveButton","onSubmitTicket","onAssign","onEscalate","onUpdateTicket","onFinalAssessment","CreateTicketPage","uploadFiles","nextAction","hasFiles","FormData","append","isSaving","postFormData","uploadResponse","snackbarMessage","submitTicket","getPostTicketPayload","post","postTicketResponse","submitTicketProcessMaker","ticketId","is_availment","casesResponse","case_id","put","triggerResponse","variableResponse","patch","patchTicketResponse","saveForNow","debug","isIcd10CodesLoaded","loadedResources","dateEscalated","facility_id","tempIcd10Codes","parse","full_code","abbreviated_description","tempCptCodes","RESOURCES_TO_LOAD","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","message","alert","SummarySection","getTotalAccommodationCost","getTotalPhysicianCost","getTotalProcedureCost","getTotalItemCost","renderSection","toCommonDateString","scroll","pageYOffset","setTabSelected","headerName","miniText","tabIndex","table","totalValue","CRUDTable","handleOnChange","attrName","prevState","rowToEdit","editField","onFormat","Table","TableHead","cols","colName","onHeaderFormat","TableBody","index1","index2","renderCell","onDeleteRow","onSaveEditRow","UpdateSection","onFormatTableHeader","colIndex","onFormatCRUDTable","refreshUpdatesState","tempData","unshift","_rowIndex","currentVal","AccommodationsSection","getTotalCost","facilitiesList","_value","refreshAccommodationsState","renderAddRoomAccommodation","renderConfinementDetails","CustomRadio","Radio","checkedCondition","DiagnosesSection","rowIndex","setPrimaryDiagnosisIndex","filteredIcd10","diagnosesList","getFilteredICD10Codes","refreshDiagnosisStateChange","PhysiciansSection","physiciansList","refreshPhysiciansStateChange","ProceduresSection","proceduresList","refreshProceduresStateChange","OtherDetailsSection","itemTypes","refreshItemsStateChange","DischargeDetailsSection","coverageList","onUpdateTicketStateChange","UploadedDocumentsSection","refreshFilesStateChange","docName","UpdateInquirySection","CustomTabs","Tabs","selectedTab","scrollButtons","indicatorColor","setSelectedTab","tabList","tab","Tab","CustomModal","Modal","isOpen","closeAfterTransition","in","faTimes","renderContent","renderFooter","UpdateTicketPage","errors","loadTicketData","ticketCategory","providerData","getErrorList","errorDiagnosis","matched","targets","tabSelected","fileData","isAssessmentModalOpen","updateState","accommodationState","diagnosisState","physicianState","procedureState","otherDetailState","fileState","tab_selected","update_state","accommodation_state","diagnosis_state","physician_state","procedure_state","other_detail_state","file_state","getPutTicketPayload","_member","renderInpatientContent","renderInquiryContent","apiUpdateTicket","Utils","Components","HomePage","mapStateToProps","mapDispatchToProps","connect","default","ComplexTable","backColor","ApproveAvailmentSection","APPROVED","DISAPPROVED","PENDING","getProceduresCost","total","getApprovedAvailmentsCost","headerNameStyle","_index","renderProcedure","CheckBenefitSection","getFilteredBenefitsData","benefitCategory","benefitName","benefitListUpdated","loadBenefitsData","isAsc","sort","renderSideBar","renderBenefitsList","borderRight","renderHeaderColumn","headerText","faSort","sortBenefits","ResolveTicketFooter","isSummarizing","onResolve","onSummarize","PartnerNetworkSection","dummyData","dummyGroups","facilitiesListUpdated","group","faCheck","getFilteredFacilitiesData","sortFacilities","SummaryAvailmentSection","loaTypes","getApprovedAvailments","getDisapprovedAvailments","loaNumber","loaDate","renderAvailment","approvedAvailments","disapprovedAvailments","renderLOAHeader","renderLOARow","refreshLOAStates","loaToDelete","TicketInfoModal","availmentDetails","confinementDetails","onCloseButtonClicked","renderTicketInfo","getTotalAailmentProcedureCost","ReviewTicketsSection","getFilteredTicketData","channel","source","assignee","urgencyColor","selectedTicketId","ticketListUpdated","sortTickets","CheckUtilizationSection","swipe","desc","sessions","dateAvailed","loaId","label1","label2","maxValue","utilization","Line","ApproveInpatientSection","getAttendingPhysicianCost","getAvailmentCost","getAllAvailmentsCost","getAllProceduresCount","renderTabs","renderSummarySection","renderDiagnosisSection","proceduresCount","borderBottom","renderDiagnosisInfo","procedureCost","accommodationCost","attendingPhysicianCost","renderTableSection","ApproveConsultationSection","ResolveTicketPage","getPutResolveTicketPayload","delete","onResolveProcessmaker","pmId","diagnosisData","doctorData","renderOutpatientContent","renderConsultationContent","TicketListPage","DetailedInputField","AdvanceSearch","_data","createBrowserHistory","Containers","routes","exact","App","Helmet","titleTemplate","defaultTitle","renderRoutes","route","require","translationMessages","en","loading","currentUser","userData","repositories","appReducer","LOAD_REPOS","LOAD_REPOS_SUCCESS","username","repos","LOAD_REPOS_ERROR","rest","MessageProvider","openSansObserver","FontFaceObserver","combineReducers","global","globalReducer","router","connectRouter","MOUNT_NODE","document","getElementById","ReactDOM","load","classList","add","Intl","all","err"],"mappings":"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","file":"static/js/main.1301a3fc.chunk.js","sourcesContent":["\n\n\n\nexport class GlobalFunction {\n\n    static toNameFormat(fname: string, mname: string, lname: string) {\n        return `${fname} ${GlobalFunction.getIntials(mname)} ${lname}`;\n    }\n\n    static formatNumber(num: number, isDecimal: boolean = false) {\n        let value = '';\n        if (isDecimal) {\n            value = num.toFixed(2);\n        } else {\n            value = num.toString();\n        }\n        return value.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n    }\n\n\n    static getIntials(text: string) {\n        var initials = '';\n        var wordArray = text.split(' ');\n        for (var i = 0; i < wordArray.length; i++) {\n            initials += wordArray[i].substring(0,1).toUpperCase() + '.';\n        }\n        return initials;\n    }\n\n    static toCommonDateString(paramDate: Date | string) {\n        let date = typeof paramDate === 'string' ? new Date(paramDate) : paramDate;\n        if (date) {\n            const monthNames = [\n                \"January\", \"February\", \"March\",\n                \"April\", \"May\", \"June\", \"July\",\n                \"August\", \"September\", \"October\",\n                \"November\", \"December\"\n            ];\n            const day = date.getDate();\n            const monthIndex = date.getMonth();\n            const year = date.getFullYear();\n            return (monthNames[monthIndex] + \" \" + day + \", \" + year);\n        }\n\n        return '';\n    }\n\n    static toShortDateString(paramDate: Date | string) {\n        let date = typeof paramDate === 'string' ? new Date(paramDate) : paramDate;\n        if (date) {\n            const monthNames = [\n                \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \n                \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n            ];\n            const day = date.getDate();\n            const monthIndex = date.getMonth();\n            const year = date.getFullYear();\n            return (monthNames[monthIndex] + \" \" + day + \", \" + year);\n        }\n\n        return '';\n    }\n\n    static toDateAndTime(paramDate: Date | string) {\n        let date = typeof paramDate === 'string' ? new Date(paramDate) : paramDate;\n        if (date) {\n            const monthNames = [\n                \"January\", \"February\", \"March\",\n                \"April\", \"May\", \"June\", \"July\",\n                \"August\", \"September\", \"October\",\n                \"November\", \"December\"\n            ];\n            const day = date.getDate();\n            const monthIndex = date.getMonth();\n            const year = date.getFullYear();\n            const hours = date.getHours() - (date.getHours() > 12 ? 12 : 0);\n            const minutes = date.getMinutes();\n            const seconds = date.getSeconds();\n            const meridian = (date.getHours() > 12 ? \"PM\" : \"AM\");\n            \n            var newSec = '0' + seconds;\n            if (seconds.toLocaleString().length !== 1) newSec = seconds.toLocaleString()\n\n            return (\n                monthNames[monthIndex] + \" \" + \n                day + \", \" + \n                year + \" - \" + \n                hours + \":\" + \n                minutes + \":\" + \n                newSec + \" \" + \n                meridian);\n        }\n\n        return '';\n    }\n\n    static getTimeDeffirence(fromDate: Date, toDate: Date) {\n        const seconds = (toDate.getTime() - fromDate.getTime()) / 1000;\n        const scaleList = [ \n            ['day', 'days'], \n            ['hour', 'hours'], \n            ['minute', 'minutes'], \n            ['second', 'seconds'] \n        ];\n        const valueList = [\n            Math.round(seconds / 86400),\n            Math.round(seconds / 3600) % 24,\n            Math.round(seconds / 60) % 60,\n            Math.round(seconds) % 60\n        ];\n        \n        let index = 0;\n        for (let i = 0; i < valueList.length; i++) {\n            if (valueList[i] > 0) {\n                index = i;\n                break;\n            }\n        }\n\n        if (index) {\n            return `${valueList[index]} ${scaleList[index][valueList[index] == 1 ? 0 : 1]}`\n        }\n        return '';\n    }\n\n    static getAge(birthDate: any) {\n        if (birthDate) {\n            var ageInMillis = Date.now() - birthDate;\n            return Math.abs(new Date(ageInMillis).getUTCFullYear() - 1970);\n        }\n\n        return null;\n    }\n\n    static generateTicketNumber(ticketType: string, specificType: string, ticketNo: string) {\n        const ticketTypes = {\n            \"Availment\": \"AVL\",\n            \"Inquiry\": \"INQ\"\n        };\n        const specificTypes = {\n            \"Inpatient\": \"INP\",\n            \"Outpatient Procedure\": \"OP\",\n            \"Emergency Room\": \"ER\",\n            \"Maternity\": \"MAT\",\n            \"Consultation\": \"CON\"\n        }\n        const tempString = (ticketType === 'Inquiry' ? '' : `${specificTypes[specificType]}-`);\n        return `${ticketTypes[ticketType]}-${tempString}${ticketNo}`;\n    }\n}","import * as React from 'react';\n// import { InputBase } from '@material-ui/core';\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\nimport './component-style.scss';\n\ninterface IProps {\n    value: string;\n    onChange: (value: string) => void;\n\n    placeholder?: string;\n    error?: boolean;\n    icon?: IconProp;\n    disabled?: boolean;\n    charLimit?: number;\n}\n\nexport class InputField extends React.Component<IProps> {\n\n    \n\n    shouldComponentUpdate(props: IProps, _state: any) {\n        return (\n            (this.props.placeholder !== props.placeholder) ||\n            (this.props.value !== props.value) ||\n            (this.props.error !== props.error)\n        );\n    }\n\n    render(): JSX.Element {\n        const self = this;\n        const dynamicStyle = {\n            borderColor: (self.props.error ? '#E53935' : undefined)\n        };\n\n        return (\n            <div className='input-field-container'>\n                {this.props.placeholder ? (\n                    <div className={this.props.disabled ? 'text-disabled text' : 'text'}>\n                        {this.props.placeholder}\n                    </div>\n                ) : null}\n                <input type='text' \n                    disabled={this.props.disabled}\n                    className={this.props.disabled ? 'text-field-disabled text-field' : 'text-field'}\n                    style={dynamicStyle}\n                    // fullWidth \n                    value={this.props.value}\n                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                        const condition = \n                            this.props.charLimit ? (\n                                event.target.value.length <= this.props.charLimit \n                            ) : (true) ;\n                            \n                        if (condition) {\n                            this.props.onChange(event.target.value);\n                        }\n                    }} />\n                {this.props.charLimit ? (\n                    <>\n                    <div className='text' />\n                    <div \n                        className={this.props.disabled ? 'text-disabled text' : 'text'}\n                        style={{textAlign: 'right'}}>\n                            {`${this.props.value.length}/${this.props.charLimit}`}\n                    </div>\n                    </>\n                ) : null}\n                \n            \n            </div>\n        );\n    }\n}","\nlet backendUrl = process.env.REACT_APP_BASE_URL;\n\nexport class API {\n\n    static getUrl() {\n        return process.env.REACT_APP_BASE_URL;\n    }\n\n    static async get(url: string, success: Function, fail: Function) {\n        fetch(backendUrl + url, {\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json' }\n        })\n        .then(response => response.json())\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n\n    static async post(url: string, \n                      body: any,\n                      success: Function, \n                      fail: Function,\n                      customHeader: any = { 'Content-Type': 'application/json' }) {\n        fetch(backendUrl + url, {\n            method: 'POST',\n            headers: customHeader,\n            body: body\n        })\n        .then(response => response.json())\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n\n    static async postFormData(url: string, body: any, success: Function, fail: Function) {\n        fetch(backendUrl + url, {\n            method: 'POST',\n            body: body\n        })\n        .then(response => response.json())\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n\n    static async put(url: string, body: any, success: Function, fail: Function) {\n        fetch(backendUrl + url, {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(body)\n        })\n        .then(response => response)\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n\n    static async patch(url: string, body: any, success: Function, fail: Function) {\n        fetch(backendUrl + url, {\n            method: 'PATCH',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(body)\n        })\n        .then(response => response)\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n\n    static async delete(url: string, body: any, success: Function, fail: Function) {\n        fetch(backendUrl + url, {\n            method: 'DELETE',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(body)\n        })\n        .then(response => response)\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n}","\n\nimport * as React from 'react';\n// import { Link } from '@material-ui/core';\nimport './component-style.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { IconProp, SizeProp } from '@fortawesome/fontawesome-svg-core';\n\ninterface IProps {\n    icon: IconProp;\n    onClick: () => void;\n    size?: SizeProp;\n}\n\nexport class IconButton extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        return (\n            <div className='icon-button' onClick={() => this.props.onClick()}>\n                {this.props.icon ? <FontAwesomeIcon icon={this.props.icon} size={this.props.size} /> : null}\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Table, TableBody, TableHead, TableRow, TablePagination, TableCell } from '@material-ui/core';\nimport './component-style.scss';\nimport { LabelDisplayedRowsArgs } from '@material-ui/core/TablePagination';\nimport { DropdownChoice } from '../Models';\n\ninterface IProps {\n    className?: string;\n    paginationClass?: string;\n\n    /* Normal Mode */\n    rows: any[];\n    renderHeader: () => JSX.Element;\n    renderRow: (rowData: any, index: number) => JSX.Element;\n\n    /* Simple Mode - Automatically handles styling, so you can focus on data. */\n    columns?: DropdownChoice[]; // value: attribute, label: the title appearing on the header\n    canFilter?: boolean;\n    canSort?: boolean;\n\n    stickyHeader?: boolean;\n    canOverflow?: boolean;\n    rowsPerPageOptions?: number[];\n    labelRowsPerPage?: string;\n    onChangeInfo?: (info: LabelDisplayedRowsArgs) => string;\n}\n\ninterface IStates {\n    page: number;\n    rowsPerPage: number;\n    \n    filterData: any;\n}\n\nexport class CustomTable extends React.PureComponent<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            page: 0,\n            rowsPerPage: 0,\n\n            filterData: {}\n        }\n    }\n\n    componentDidMount() {\n        if (this.props.rowsPerPageOptions) {\n            this.setState({rowsPerPage: this.props.rowsPerPageOptions[0]});\n        }\n    }\n\n    handleChangePage = (_event: unknown, page: number) => {\n        this.setState({page: page});\n    }\n    \n    handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            rowsPerPage: parseInt(event.target.value, 10),\n            page: 0\n        });\n    }\n\n    resetPage = () => {\n        this.setState({page: 1});\n    }\n\n    getSlicedData = () => {\n        if (this.props.rowsPerPageOptions) {\n            const startingItem = this.state.page * this.state.rowsPerPage;\n            return this.props.rows.slice(startingItem, startingItem + this.state.rowsPerPage);\n        } else {\n            return this.props.rows;\n        }\n    }\n\n    render(): JSX.Element {\n        return (\n            <>\n            <div style={{overflow: this.props.canOverflow ? 'auto' : 'none'}}>\n                <Table \n                    className={`${(this.props.className ? this.props.className : '')} table`} \n                    stickyHeader={this.props.stickyHeader ? this.props.stickyHeader : false}>\n                    <TableHead>\n                        {this.props.columns ? (\n                            <TableRow>\n                                {this.props.columns.map(column => {\n                                    return <TableCell>{column.label}</TableCell>\n                                })}\n                            </TableRow>\n                        ) : this.props.renderHeader ? (\n                            <TableRow>\n                                {this.props.renderHeader()}\n                            </TableRow>\n                        ) : null}\n                    </TableHead>\n                    <TableBody>\n                        {this.props.renderRow ? (\n                            this.getSlicedData().map((row, j) => {\n                                return this.props.renderRow(row, j)\n                            })  \n                        ) : null}\n                    </TableBody>\n                </Table>\n            </div>\n            {this.props.rowsPerPageOptions ? (\n                <TablePagination\n                    className={`${(this.props.paginationClass ? this.props.paginationClass : '')} pagination MuiTablePagination-root`}\n                    rowsPerPageOptions={this.props.rowsPerPageOptions}\n                    count={this.props.rows.length}\n                    rowsPerPage={this.state.rowsPerPage}\n                    page={this.state.page}\n                    labelDisplayedRows={(info: LabelDisplayedRowsArgs) => {\n                        return (\n                            this.props.onChangeInfo ? (\n                                this.props.onChangeInfo(info)\n                            ) : (\n                                `${info.from}-${info.to} of ${info.count}`\n                            ));\n                    }}\n                    labelRowsPerPage={\n                        this.props.labelRowsPerPage ? (\n                            this.props.labelRowsPerPage\n                        ) : (\n                            'Rows per page:'\n                        )}\n                    onChangePage={(_event: unknown, page: number) => {\n                        this.setState({page: page});\n                    }}\n                    onChangeRowsPerPage={(event: React.ChangeEvent<HTMLInputElement>) => {\n                        this.setState({\n                            rowsPerPage: parseInt(event.target.value, 10),\n                            page: 0\n                        });\n                    }} />\n            ) : null}\n            </>\n        );\n    }\n}","let backendUrl = process.env.REACT_APP_PMAKER_BASE_URL;\n\nexport class Processmaker {\n\n    // //local\n    // static localUrl = 'localhost:32766/api/1.0/workflow';\n\n    // //stg\n    // static stgUrl = 'http://18.140.39.215/api/1.0/workflow';\n    \n    static async get(url: string, success: Function, fail: Function) {\n        const token = localStorage.getItem('pm_token') || '';\n        // const backendUrl = (process.env.NODE_ENV === 'development' ? this.localUrl : this.stgUrl);\n        fetch(backendUrl + url, {\n            method: 'GET',\n            headers: { \n                'Authorization': 'Bearer ' + token\n            },\n        })\n        .then(response => response.json())\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n\n    static async post(url:string, body: any, success: Function, fail: Function) {\n        // const backendUrl = (process.env.NODE_ENV === 'development' ? this.localUrl : this.stgUrl);\n        fetch(backendUrl + url, {\n            method: 'POST',\n            headers: { \n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + localStorage.getItem('pm_token')\n            },\n            body: JSON.stringify(body)\n        })\n        .then(response => response.json())\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n\n    static async put(url: string, body: any, success: Function, fail: Function) {\n        // const backendUrl = (process.env.NODE_ENV === 'development' ? this.localUrl : this.stgUrl);\n        fetch(backendUrl + url, {\n            method: 'PUT',\n            headers: { \n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + localStorage.getItem('pm_token')\n            },\n            body: JSON.stringify(body)\n        })\n        .then(response => response)\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n}","import * as React from 'react';\nimport { API } from 'Pages/CustomerCarePage/API';\n\ninterface IProps {\n    cardNo: string;\n}\n\ninterface IStates {\n    contractListUpdated: boolean;\n}\n\nexport class CheckContractSection extends React.Component<IProps, IStates> {\n\n    contractUrls: string[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            contractListUpdated: false\n        }\n\n        this.contractUrls = [];\n    }\n\n    componentDidMount() {\n        API.get(`customer-care/members/${this.props.cardNo}/benefits`,\n            (response) => {\n                console.log(response);\n                this.contractUrls = response.map(benefit => {\n                    return `/customer-care/benefits/io/pdf?id=${benefit._id}&type=contract`\n                });\n\n                this.setState({contractListUpdated: true});\n            },\n            (error) => {\n                console.log(error);\n            });\n    }\n    \n    render(): JSX.Element {\n        const pdfUrl = `${process.execPath}/../../../sample.pdf`;\n        // const viewerUrl = `https://mozilla.github.io/pdf.js/web/viewer.html?file=${pdfUrl}`;\n        const viewerUrl = `${process.execPath}/../pdfjs-2.2.228-dist/web/viewer.html?file=${pdfUrl}`;\n\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Check Contract</div>\n                <div className='sub-section'>\n                    {/*this.contractUrls.map((url, index) => {\n                        return (\n                            index === 0 ?\n                            <iframe \n                                style={{width: '100%', height: '1280px'}}\n                                src={API.getUrl() + url}  />\n\n                            : null\n                        );\n                    })*/}\n                            <iframe \n                                style={{width: '100%', height: '1280px'}}\n                                src={viewerUrl}  />\n                </div>\n                \n            </div>\n        );\n    }\n}","import { createMuiTheme, makeStyles, createStyles, withStyles } from '@material-ui/core/styles';\nimport React__default, { useState, createElement, useEffect, Component as Component$2, lazy, Suspense } from 'react';\nimport Select from 'react-select';\nimport Typography from '@material-ui/core/Typography';\nimport NoSsr from '@material-ui/core/NoSsr';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ChipInput from 'material-ui-chip-input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport Select$1 from '@material-ui/core/Select';\nimport ExpandMoreRounded from '@material-ui/icons/ExpandMoreRounded';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Grid from '@material-ui/core/Grid';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheckSquare, faHome, faPlusCircle, faUsers, faFileSignature, faIdCardAlt, faTasks, faTable, faFolderOpen, faUserFriends, faScrewdriver, faBookOpen } from '@fortawesome/free-solid-svg-icons';\nimport { faSquare } from '@fortawesome/free-regular-svg-icons';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Link from '@material-ui/core/Link';\nimport Avatar from '@material-ui/core/Avatar';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport Hidden from '@material-ui/core/Hidden';\nimport Drawer from '@material-ui/core/Drawer';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport Popper from '@material-ui/core/Popper';\nimport { Fade, Paper as Paper$1, List as List$1, ListItem as ListItem$1, ListItemIcon as ListItemIcon$1, ListItemText as ListItemText$1 } from '@material-ui/core';\nimport { useStore, Provider as Provider$1, useSelector } from 'react-redux';\nimport { routerMiddleware, ConnectedRouter } from 'connected-react-router';\nimport { HashRouter } from 'react-router-dom';\nimport { ThemeProvider } from '@material-ui/styles';\nimport invariant from 'invariant';\nimport conformsTo from 'lodash/conformsTo';\nimport isFunction from 'lodash/isFunction';\nimport isObject from 'lodash/isObject';\nimport { applyMiddleware, createStore, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { createBrowserHistory } from 'history';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport isEmpty from 'lodash/isEmpty';\nimport isString from 'lodash/isString';\nimport { createSelector } from 'reselect';\nimport { IntlProvider, defineMessages, FormattedMessage } from 'react-intl';\nvar index =\n/*#__PURE__*/\nObject.freeze({});\nvar index$1 =\n/*#__PURE__*/\nObject.freeze({});\nvar index$2 =\n/*#__PURE__*/\nObject.freeze({}); // This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nvar isLocalhost = Boolean(window.location.hostname === 'localhost' || // [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' || // 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\n\nfunction register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    var publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', function () {\n      var swUrl = process.env.PUBLIC_URL + \"/service-worker.js\";\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config); // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n\n        navigator.serviceWorker.ready.then(function () {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(function (registration) {\n    registration.onupdatefound = function () {\n      var installingWorker = registration.installing;\n\n      if (installingWorker == null) {\n        return;\n      }\n\n      installingWorker.onstatechange = function () {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'); // Execute callback\n\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.'); // Execute callback\n\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(function (error) {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl).then(function (response) {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    var contentType = response.headers.get('content-type');\n\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(function (registration) {\n        registration.unregister().then(function () {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(function () {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nfunction unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      registration.unregister();\n    });\n  }\n}\n\nvar service_worker =\n/*#__PURE__*/\nObject.freeze({\n  register: register,\n  unregister: unregister\n});\nvar index$3 =\n/*#__PURE__*/\nObject.freeze({\n  ServiceWorker: service_worker\n});\nvar index$4 =\n/*#__PURE__*/\nObject.freeze({});\nvar BaseTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#3ab77d',\n      contrastText: '#ffffff'\n    },\n    secondary: {\n      main: '#ffffff',\n      contrastText: '#3ab77d'\n    }\n  },\n  typography: {\n    fontFamily: 'Usual, Roboto, Helvetica, Arial, sans-serif',\n    button: {\n      fontFamily: 'Usual, Roboto, Helvetica, Arial, sans-serif',\n      fontWeight: 700,\n      fontSize: 13,\n      textTransform: 'none'\n    }\n  },\n  overrides: {\n    MuiDialog: {\n      root: {\n        width: '100%'\n      }\n    },\n    MuiDialogTitle: {\n      root: {\n        fontFamily: 'Usual, Roboto, Helvetica, Arial, sans-serif',\n        fontWeight: 550,\n        fontSize: '1em',\n        color: '#272E4C'\n      }\n    },\n    MuiDialogContentText: {\n      root: {\n        fontSize: '.8em',\n        color: '#272E4C'\n      }\n    },\n    MuiFormControlLabel: {\n      label: {\n        fontSize: '.8em',\n        color: '#272E4C'\n      }\n    },\n    MuiIconButton: {\n      root: {\n        fontSize: '.9em'\n      }\n    },\n    MuiButton: {\n      containedPrimary: {\n        boxShadow: '0px 3px 6px #1e207129',\n        '&:hover': {\n          backgroundColor: '#008650'\n        }\n      },\n      containedSecondary: {\n        border: '1px solid #0000001A',\n        boxShadow: '0px 1px 3px #00000033',\n        '&:hover': {\n          backgroundColor: '#3ab77d1a'\n        }\n      },\n      outlinedSecondary: {\n        border: '1px solid #3ab77d',\n        boxShadow: '0px 1px 3px #00000033',\n        '&:hover': {\n          backgroundColor: '#3ab77d1a'\n        }\n      }\n    }\n  }\n});\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return _extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return _assign.apply(this, arguments);\n};\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nfunction __awaiter(thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nfunction __generator(thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n}\n\nfunction __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n}\n\nvar labelColor = 'rgb(21,28,28)';\nvar grayColor = 'rgba(39,52,76,0.3)';\nvar grayColorFocused = 'rgba(39,52,76,0.5)';\nvar borderCss = {\n  borderColor: grayColor,\n  borderRadius: 5\n};\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    root: {\n      width: '100%'\n    },\n    control: {\n      '& label.Mui-focused': {\n        color: labelColor\n      },\n      '& .MuiInput-underline:after': {\n        borderBottomColor: grayColor\n      },\n      '& .MuiOutlinedInput-root': {\n        '& fieldset': borderCss,\n        '&:hover fieldset': borderCss,\n        '&.Mui-focused fieldset': _assign(_assign({}, borderCss), {\n          borderColor: grayColorFocused\n        })\n      }\n    },\n    input: {\n      display: 'flex'\n    },\n    label: {},\n    select: {\n      marginTop: theme.spacing(1),\n      backgroundColor: 'white',\n      width: '100%'\n    },\n    valueContainer: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      flex: 1,\n      alignItems: 'center',\n      overflow: 'hidden'\n    },\n    noOptionsMessage: {\n      padding: theme.spacing(1, 2)\n    },\n    singleValue: {\n      fontSize: 16\n    },\n    placeholder: {\n      position: 'absolute',\n      left: 2,\n      bottom: 6,\n      fontSize: 16\n    },\n    paper: {\n      position: 'absolute',\n      zIndex: 999,\n      left: 0,\n      right: 0\n    }\n  });\n});\n\nfunction NoOptionsMessage(props) {\n  return React__default.createElement(Typography, _assign({\n    color: \"textSecondary\",\n    className: props.selectProps.classes.noOptionsMessage\n  }, props.innerProps), props.children);\n}\n\nfunction inputComponent(_a) {\n  var inputRef = _a.inputRef,\n      props = __rest(_a, [\"inputRef\"]);\n\n  return React__default.createElement(\"div\", _assign({\n    ref: inputRef\n  }, props));\n}\n\nfunction Control(props) {\n  var children = props.children,\n      innerProps = props.innerProps,\n      innerRef = props.innerRef,\n      _a = props.selectProps,\n      classes = _a.classes,\n      TextFieldProps = _a.TextFieldProps;\n  return React__default.createElement(TextField, _assign({\n    className: classes.control,\n    InputProps: {\n      inputComponent: inputComponent,\n      inputProps: _assign({\n        className: classes.input,\n        ref: innerRef,\n        children: children\n      }, innerProps)\n    }\n  }, TextFieldProps, {\n    variant: \"outlined\",\n    fullWidth: true\n  }));\n}\n\nfunction Option(props) {\n  return React__default.createElement(MenuItem, _assign({\n    ref: props.innerRef,\n    selected: props.isFocused,\n    component: \"div\",\n    style: {\n      fontWeight: props.isSelected ? 500 : 400\n    }\n  }, props.innerProps), props.children);\n}\n\nfunction Placeholder(props) {\n  var selectProps = props.selectProps,\n      _a = props.innerProps,\n      innerProps = _a === void 0 ? {} : _a,\n      children = props.children;\n  return React__default.createElement(Typography, _assign({\n    color: \"textSecondary\",\n    className: selectProps.classes.placeholder\n  }, innerProps), children);\n}\n\nfunction SingleValue(props) {\n  return React__default.createElement(Typography, _assign({\n    className: props.selectProps.classes.singleValue\n  }, props.innerProps), props.children);\n}\n\nfunction ValueContainer(props) {\n  return React__default.createElement(\"div\", {\n    className: props.selectProps.classes.valueContainer\n  }, props.children);\n}\n\nfunction Menu(props) {\n  return React__default.createElement(Paper, _assign({\n    square: true,\n    className: props.selectProps.classes.paper\n  }, props.innerProps), props.children);\n}\n\nvar components = {\n  Control: Control,\n  Menu: Menu,\n  Option: Option,\n  NoOptionsMessage: NoOptionsMessage,\n  Placeholder: Placeholder,\n  SingleValue: SingleValue,\n  ValueContainer: ValueContainer\n};\n\nvar InputAutocomplete = function InputAutocomplete(props) {\n  var classes = useStyles();\n\n  var _a = React__default.useState(null),\n      single = _a[0],\n      setSingle = _a[1];\n\n  function handleChange(optionItem) {\n    setSingle(optionItem);\n\n    if (props.onChange) {\n      props.onChange(optionItem);\n    }\n  }\n\n  return React__default.createElement(FormControl, {\n    className: classes.root\n  }, React__default.createElement(Typography, {\n    className: classes.label,\n    color: \"textPrimary\"\n  }, props.label), React__default.createElement(NoSsr, null, React__default.createElement(Select, {\n    className: classes.select,\n    classes: classes,\n    inputId: props.inputId,\n    TextFieldProps: {\n      error: props.error\n    },\n    placeholder: \"\",\n    options: props.suggestions,\n    components: components,\n    value: single,\n    onChange: handleChange,\n    isSearchable: true,\n    isClearable: true\n  })));\n};\n\nInputAutocomplete.defaultProps = {\n  error: false\n};\nvar index$5 =\n/*#__PURE__*/\nObject.freeze({\n  InputAutocomplete: InputAutocomplete\n});\nvar labelColor$1 = 'rgb(21,28,28)';\nvar grayColor$1 = 'rgba(39,52,76,0.3)';\nvar grayColorFocused$1 = 'rgba(39,52,76,0.5)';\nvar borderCss$1 = {\n  borderColor: grayColor$1,\n  borderRadius: 5\n};\nvar useStyles$1 = makeStyles(function (theme) {\n  return {\n    root: {\n      width: '100%'\n    },\n    label: {},\n    textField: {\n      '& label.Mui-focused': {\n        color: labelColor$1\n      },\n      '& .MuiInput-underline:after': {\n        borderBottomColor: grayColor$1\n      },\n      '& .MuiOutlinedInput-root': {\n        '& fieldset': borderCss$1,\n        '&:hover fieldset': borderCss$1,\n        '&.Mui-focused fieldset': _assign(_assign({}, borderCss$1), {\n          borderColor: grayColorFocused$1\n        })\n      },\n      '&': {\n        marginTop: theme.spacing(1),\n        backgroundColor: 'white',\n        width: '100%'\n      }\n    }\n  };\n});\n\nvar InputChipTextField = function InputChipTextField(props) {\n  var classes = useStyles$1();\n\n  var _a = useState(props.value || []),\n      currentValue = _a[0],\n      setcurrentValue = _a[1];\n\n  var onChange = function onChange(chips) {\n    setcurrentValue(chips);\n\n    if (props.onChange) {\n      props.onChange(chips);\n    }\n  };\n\n  return React__default.createElement(FormControl, {\n    className: classes.root\n  }, React__default.createElement(Typography, {\n    className: classes.label,\n    color: \"textPrimary\"\n  }, props.label), React__default.createElement(ChipInput, {\n    id: props.id,\n    className: classes.textField,\n    defaultValue: currentValue,\n    onChange: onChange,\n    error: props.error,\n    variant: \"outlined\"\n  }));\n};\n\nInputChipTextField.defaultProps = {\n  label: '',\n  value: [],\n  error: false,\n  multiline: false,\n  rows: 1,\n  onChange: function onChange(chips) {\n    console.log(chips);\n  }\n};\nvar index$6 =\n/*#__PURE__*/\nObject.freeze({\n  InputChipTextField: InputChipTextField\n});\nvar labelColor$2 = 'rgb(21,28,28)';\nvar grayColor$2 = 'rgba(39,52,76,0.3)';\nvar grayColorFocused$2 = 'rgba(39,52,76,0.5)';\nvar borderCss$2 = {\n  borderColor: grayColor$2,\n  borderRadius: 5\n};\nvar borderStyles = {\n  root: {\n    '& label.Mui-focused': {\n      color: labelColor$2\n    },\n    '& .MuiInput-underline:after': {\n      borderBottomColor: grayColor$2\n    },\n    '& .MuiOutlinedInput-root': {\n      '& fieldset': borderCss$2,\n      '&:hover fieldset': borderCss$2,\n      '&.Mui-focused fieldset': _assign(_assign({}, borderCss$2), {\n        borderColor: grayColorFocused$2\n      })\n    }\n  }\n};\nvar useStyles$2 = makeStyles(function (theme) {\n  return {\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n    formControl: {\n      width: '100%'\n    },\n    label: {\n      fontSize: '.8em'\n    },\n    select: {\n      marginTop: theme.spacing(1),\n      backgroundColor: 'white'\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2)\n    },\n    icon: {\n      marginRight: theme.spacing(2.5),\n      color: grayColor$2\n    }\n  };\n}); // const StyledFormControl = withStyles(borderStyles)(FormControl);\n\nvar StyledOutlinedInput = withStyles(borderStyles)(OutlinedInput);\n\nvar InputSelect = function InputSelect(props) {\n  var defaultValue = {\n    id: -1,\n    value: '',\n    label: ''\n  };\n\n  var items = __spreadArrays([defaultValue], props.data);\n\n  var getDefaultValue = function getDefaultValue() {\n    if (props.value) {\n      var defVal = items.find(function (item) {\n        return item.value === props.value;\n      });\n\n      if (defVal) {\n        return defVal;\n      }\n    }\n\n    return defaultValue;\n  };\n\n  var classes = useStyles$2();\n\n  var _a = useState(getDefaultValue()),\n      currentValue = _a[0],\n      setCurrentValue = _a[1];\n\n  var inputLabel = React__default.useRef(null);\n  var labelWidth = React__default.useState(0)[0]; // React.useEffect(() => {\n  //   setLabelWidth(inputLabel.current!.offsetWidth);\n  // }, []);\n\n  var onChange = function onChange(e) {\n    var selectedItem = items.find(function (item) {\n      return item.value === e.target.value;\n    }) || defaultValue;\n    setCurrentValue(selectedItem);\n\n    if (props.onChange) {\n      props.onChange(selectedItem);\n    }\n  };\n\n  var displaySelectItem = function displaySelectItem(props, selectItem) {\n    if (props.displaySelectItem) {\n      return props.displaySelectItem(selectItem);\n    }\n\n    var disabled = selectItem.id === -1 && props.required;\n    return React__default.createElement(MenuItem, {\n      key: selectItem.id,\n      value: selectItem.value,\n      disabled: disabled\n    }, selectItem.label);\n  };\n\n  return React__default.createElement(\"div\", {\n    className: classes.formControl\n  }, props.label ? React__default.createElement(InputLabel, {\n    color: \"textPrimary\",\n    className: classes.label,\n    ref: inputLabel,\n    htmlFor: props.id,\n    error: props.error\n  }, props.label) : null, React__default.createElement(Select$1, {\n    className: classes.select,\n    value: currentValue.value,\n    onChange: onChange,\n    input: React__default.createElement(StyledOutlinedInput, {\n      id: props.id,\n      name: props.id,\n      error: props.error,\n      labelWidth: labelWidth,\n      fullWidth: true\n    }),\n    IconComponent: function IconComponent() {\n      return React__default.createElement(ExpandMoreRounded, {\n        className: classes.icon\n      });\n    }\n  }, items.map(function (item) {\n    return displaySelectItem(props, item);\n  })));\n};\n\nInputSelect.defaultProps = {\n  value: '',\n  error: false,\n  required: false,\n  onChange: function onChange(value) {\n    console.log(value);\n  }\n};\nvar index$7 =\n/*#__PURE__*/\nObject.freeze({\n  InputSelect: InputSelect\n});\nvar labelColor$3 = 'rgb(21,28,28)';\nvar grayColor$3 = 'rgba(39,52,76,0.3)';\nvar grayColorFocused$3 = 'rgba(39,52,76,0.5)';\nvar borderCss$3 = {\n  borderColor: grayColor$3,\n  borderRadius: 5\n};\nvar borderStyles$1 = {\n  root: {\n    '& label.Mui-focused': {\n      color: labelColor$3\n    },\n    '& .MuiInput-underline:after': {\n      borderBottomColor: grayColor$3\n    },\n    '& .MuiOutlinedInput-root': {\n      '& fieldset': borderCss$3,\n      '&:hover fieldset': borderCss$3,\n      '&.Mui-focused fieldset': _assign(_assign({}, borderCss$3), {\n        borderColor: grayColorFocused$3\n      })\n    }\n  },\n  input: {\n    fontSize: 14 // input: {\n    //   '&:focus': {\n    //     borderRadius: 4,\n    //     borderColor: '#80bdff',\n    //     boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\n    //   }\n    // }\n\n  }\n};\nvar useStyles$3 = makeStyles(function (theme) {\n  return {\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n    formControl: {\n      width: '100%'\n    },\n    label: {\n      fontSize: '.8em'\n    },\n    select: {\n      marginTop: theme.spacing(1),\n      backgroundColor: 'white'\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2)\n    },\n    icon: {\n      marginRight: theme.spacing(2.5),\n      color: grayColor$3\n    },\n    error: {\n      color: '#E53935',\n      fontSize: '12px'\n    },\n    errorIcon: {\n      color: '#E53935',\n      fontSize: 'small',\n      float: 'right'\n    }\n  };\n}); // const StyledFormControl = withStyles(borderStyles)(FormControl);\n\nvar StyledOutlinedInput$1 = withStyles(borderStyles$1)(OutlinedInput);\n\nvar InputSelectSetValue = function InputSelectSetValue(props) {\n  var items = __spreadArrays(props.data);\n\n  var classes = useStyles$3();\n  var inputLabel = React__default.useRef(null);\n  var labelWidth = React__default.useState(0)[0]; // React.useEffect(() => {\n  //   setLabelWidth(inputLabel.current!.offsetWidth);\n  // }, []);\n\n  var onChange = function onChange(e) {\n    var selectedItem = items.find(function (item) {\n      return item.value === e.target.value;\n    });\n\n    if (props.onChange) {\n      props.onChange(selectedItem);\n    }\n  };\n\n  var displaySelectItem = function displaySelectItem(props, selectItem) {\n    if (props.displaySelectItem) {\n      return props.displaySelectItem(selectItem);\n    }\n\n    var disabled = selectItem.id === -1 && props.required;\n    return React__default.createElement(MenuItem, {\n      key: selectItem.id,\n      value: selectItem.value,\n      disabled: disabled\n    }, selectItem.label);\n  };\n\n  return React__default.createElement(\"div\", {\n    className: classes.formControl\n  }, React__default.createElement(InputLabel, {\n    color: \"textPrimary\",\n    className: classes.label,\n    ref: inputLabel,\n    htmlFor: props.id\n  }, props.label), React__default.createElement(Select$1, {\n    className: classes.select,\n    value: props.value,\n    onChange: onChange,\n    disabled: props.disabled,\n    input: React__default.createElement(StyledOutlinedInput$1, {\n      id: props.id,\n      name: props.id,\n      error: props.error,\n      labelWidth: labelWidth,\n      fullWidth: true,\n      disabled: props.disabled\n    }),\n    IconComponent: function IconComponent() {\n      return React__default.createElement(ExpandMoreRounded, {\n        className: classes.icon\n      });\n    }\n  }, items.map(function (item) {\n    return displaySelectItem(props, item);\n  })), props.error && React__default.createElement(\"div\", {\n    className: classes.formControl\n  }, React__default.createElement(FormHelperText, {\n    id: \"component-error-text\",\n    className: classes.error\n  }, props.errorMessage, React__default.createElement(ErrorIcon, {\n    className: classes.errorIcon\n  }))));\n};\n\nInputSelectSetValue.defaultProps = {\n  label: '',\n  value: '',\n  error: false,\n  errorMessage: '',\n  required: false,\n  disabled: false,\n  onChange: function onChange(value) {\n    console.log(value);\n  }\n};\nvar index$8 =\n/*#__PURE__*/\nObject.freeze({\n  InputSelectSetValue: InputSelectSetValue\n});\nvar useStyles$4 = makeStyles(function (theme) {\n  return {\n    root: {\n      width: '100%'\n    },\n    label: {\n      fontSize: '.8em'\n    },\n    textField: {\n      marginTop: theme.spacing(1),\n      backgroundColor: 'white',\n      fontSize: '14px'\n    },\n    error: {\n      color: '#E53935',\n      fontSize: '12px'\n    },\n    errorIcon: {\n      color: '#E53935',\n      fontSize: 'small',\n      float: 'right'\n    }\n  };\n});\nvar labelColor$4 = 'rgb(21,28,28)';\nvar grayColor$4 = 'rgba(39,52,76,0.3)';\nvar grayColorFocused$4 = 'rgba(39,52,76,0.5)';\nvar borderCss$4 = {\n  borderColor: grayColor$4,\n  borderRadius: 5\n};\nvar StyledTextField = withStyles({\n  root: {\n    '& label.Mui-focused': {\n      color: labelColor$4\n    },\n    '& .MuiInput-underline:after': {\n      borderBottomColor: grayColor$4\n    },\n    '& .MuiOutlinedInput-root': {\n      '& fieldset': borderCss$4,\n      '&:hover fieldset': borderCss$4,\n      '&.Mui-focused fieldset': _assign(_assign({}, borderCss$4), {\n        borderColor: grayColorFocused$4\n      })\n    }\n  }\n})(TextField);\n\nvar InputTextField = function InputTextField(props) {\n  var classes = useStyles$4();\n\n  var onChange = function onChange(e) {\n    var value = e.target.value;\n\n    if (props.onChange) {\n      props.onChange(value);\n    }\n  };\n\n  return React__default.createElement(\"div\", {\n    className: classes.root\n  }, props.label ? React__default.createElement(InputLabel, {\n    htmlFor: props.id,\n    className: classes.label,\n    color: \"textPrimary\"\n  }, props.label) : null, React__default.createElement(StyledTextField, {\n    id: props.id,\n    className: classes.textField,\n    value: props.value,\n    onChange: onChange,\n    error: props.error,\n    multiline: props.multiline,\n    rows: props.rows,\n    type: props.type,\n    fullWidth: true,\n    disabled: props.disabled,\n    variant: \"outlined\"\n  }), props.error && React__default.createElement(\"div\", {\n    className: classes.root\n  }, React__default.createElement(FormHelperText, {\n    id: \"component-error-text\",\n    className: classes.error\n  }, props.errorMessage, React__default.createElement(ErrorIcon, {\n    className: classes.errorIcon\n  }))));\n};\n\nInputTextField.defaultProps = {\n  type: 'text',\n  value: '',\n  error: false,\n  errorMessage: '',\n  multiline: false,\n  disabled: false,\n  rows: 1,\n  onChange: function onChange(value) {\n    console.log(\"InputTextField.defaultProps - Value: \" + value);\n  }\n};\nvar index$9 =\n/*#__PURE__*/\nObject.freeze({\n  InputTextField: InputTextField\n}); //declare class to style components\n\nvar useStyles$5 = makeStyles(function (theme) {\n  return {\n    root: {\n      flexWrap: 'wrap'\n    },\n    inputSelect: {\n      marginBottom: theme.spacing(1)\n    },\n    dialog: {\n      align: 'center',\n      justify: 'center',\n      width: '100%'\n    },\n    dialogContent: {\n      paddingTop: '0px'\n    },\n    container: {\n      paddingRight: '15px',\n      paddingLeft: '15px'\n    },\n    dialogTitle: {\n      marginTop: theme.spacing(2)\n    },\n    dialogContentTitle: {},\n    dialogContentText: {},\n    formControlLabel: {},\n    textField: {},\n    checkBox: {\n      paddingLeft: '10px'\n    },\n    dialogAction: {\n      marginBottom: theme.spacing(2),\n      marginTop: theme.spacing(2),\n      justifyContent: 'center'\n    },\n    resolveDialogAction: {\n      marginBottom: theme.spacing(2),\n      marginTop: theme.spacing(4),\n      justifyContent: 'center'\n    },\n    leftButton: {\n      width: 115,\n      marginLeft: 15,\n      marginRight: 10\n    },\n    rightButton: {\n      width: 115,\n      marginLeft: 10,\n      marginRight: 15\n    }\n  };\n});\nvar StyledCheckbox = withStyles({\n  root: {\n    color: '#9EA3AC',\n    '&$checked': {\n      color: '#1E2071'\n    }\n  },\n  checked: {}\n})(Checkbox);\n\nvar TicketModal = function TicketModal(props) {\n  var classes = useStyles$5();\n\n  var _a = React__default.useState({\n    notes: '',\n    notesError: false,\n    isResolved: false\n  }),\n      state = _a[0],\n      setState = _a[1];\n\n  var _b = useState(true),\n      disabled = _b[0],\n      setDisabled = _b[1]; //reset values and close dialog\n\n\n  var handleClose = function handleClose() {\n    setDisabled(true);\n    setState({\n      notes: '',\n      notesError: false,\n      isResolved: false\n    });\n    props.onClose();\n  }; //changes state of the changed values\n\n\n  var setFieldValue = function setFieldValue(fieldName, value) {\n    setState(function (state) {\n      var _a;\n\n      return _assign(_assign({}, state), (_a = {}, _a[fieldName] = value, _a));\n    });\n  };\n\n  var setFieldError = function setFieldError(fieldName, error) {\n    setState(function (state) {\n      var _a;\n\n      return _assign(_assign({}, state), (_a = {}, _a[fieldName] = error, _a));\n    });\n  };\n  /* render ticket management modal in 3 different types (Resolve, Assign, Escalate)\r\n      Sample usage :\r\n      import { Components } from '@hims/core';\r\n      const Modal = Components.UI.TicketModal.TicketModal;\r\n         <Modal\r\n                    type=\"Escalate\" (Resolve/Assign/Escalate) - is not case sensitive but will render title as is\r\n                    onClose={this.onAddDataFieldModalClose}\r\n                    isModalOpen={ticketModal}\r\n                    selectItems={[{\"id\":0,\"value\":'Jae',\"label\":'Jae'},{\"id\":1,\"value\":'Lambert',\"label\":'Lambert'},{\"id\":2,\"value\":'Bau',\"label\":'Bau'}]}\r\n                    onSubmit={this.onAddDataFieldModalClose}\r\n          />\r\n  */\n\n\n  var component = React__default.createElement(\"div\", null);\n\n  switch (props.type.toLowerCase()) {\n    case 'resolve':\n      console.log('in resolve');\n      component = React__default.createElement(\"div\", null, React__default.createElement(Grid, {\n        container: true,\n        className: classes.container,\n        justify: \"flex-start\",\n        alignItems: \"flex-start\",\n        direction: \"column\"\n      }, React__default.createElement(Grid, {\n        item: true,\n        xs: true\n      }, React__default.createElement(DialogTitle, {\n        disableTypography: true,\n        id: \"dialog-title\",\n        className: classes.dialogTitle\n      }, props.type, \" Ticket\")), React__default.createElement(Grid, {\n        item: true,\n        xs: true\n      }, React__default.createElement(DialogContent, {\n        className: classes.dialogContent\n      }, React__default.createElement(DialogContentText, {\n        className: classes.dialogContentText,\n        id: \"alert-dialog-description\"\n      }, \"How was the issue resolved?\"), React__default.createElement(InputTextField, {\n        value: state.notes,\n        error: state.notesError,\n        multiline: true,\n        rows: 4,\n        onChange: function onChange(value) {\n          setFieldValue('notes', value);\n          setFieldError('notesError', value.length === 0);\n        }\n      })), React__default.createElement(Grid, {\n        item: true,\n        xs: true\n      }, React__default.createElement(DialogContent, {\n        className: classes.dialogContent\n      }, React__default.createElement(FormControlLabel, {\n        className: classes.formControlLabel,\n        control: React__default.createElement(StyledCheckbox, {\n          icon: React__default.createElement(FontAwesomeIcon, {\n            icon: faSquare\n          }),\n          checkedIcon: React__default.createElement(FontAwesomeIcon, {\n            icon: faCheckSquare\n          }),\n          color: \"primary\",\n          checked: state.isResolved,\n          onChange: function onChange(value) {\n            setFieldValue('isResolved', value.target.checked);\n            setDisabled(!value.target.checked);\n          },\n          inputProps: {\n            'aria-label': 'primary checkbox'\n          }\n        }),\n        label: \"Mark as resolved\",\n        labelPlacement: \"end\"\n      }))), React__default.createElement(DialogActions, {\n        className: classes.resolveDialogAction\n      }, React__default.createElement(Button, {\n        className: classes.leftButton,\n        variant: \"contained\",\n        onClick: handleClose,\n        color: \"secondary\"\n      }, \"Cancel\"), React__default.createElement(Button, {\n        className: classes.rightButton,\n        variant: \"contained\",\n        disabled: disabled,\n        onClick: props.onSubmit,\n        color: \"primary\"\n      }, \"Resolve\")))));\n      break;\n\n    case 'assign':\n      console.log('in assign');\n      component = React__default.createElement(\"div\", null, React__default.createElement(Grid, {\n        container: true,\n        className: classes.container,\n        justify: \"flex-start\",\n        alignItems: \"flex-start\",\n        direction: \"column\"\n      }, React__default.createElement(Grid, {\n        item: true,\n        xs: true\n      }, React__default.createElement(DialogTitle, {\n        disableTypography: true,\n        id: \"dialog-title\",\n        className: classes.dialogTitle\n      }, props.type, \" Ticket\")), React__default.createElement(Grid, {\n        item: true,\n        xs: true\n      }, React__default.createElement(DialogContent, {\n        className: classes.dialogContent\n      }, React__default.createElement(InputSelect, {\n        id: 'modal-input-select',\n        label: 'Assign To',\n        data: props.selectItems\n      }), React__default.createElement(DialogContentText, null), React__default.createElement(InputTextField, {\n        label: 'Notes',\n        value: state.notes,\n        error: state.notesError,\n        multiline: true,\n        rows: 4,\n        onChange: function onChange(value) {\n          setFieldValue('notes', value);\n          setFieldError('notesError', value.length === 0);\n        }\n      })), React__default.createElement(DialogActions, {\n        className: classes.dialogAction\n      }, React__default.createElement(Button, {\n        className: classes.leftButton,\n        variant: \"contained\",\n        onClick: handleClose,\n        color: \"secondary\"\n      }, \"Cancel\"), React__default.createElement(Button, {\n        className: classes.rightButton,\n        variant: \"contained\",\n        onClick: props.onSubmit,\n        color: \"primary\"\n      }, \"Assign\")))));\n      break;\n\n    case 'escalate':\n      console.log('in escalate');\n      component = React__default.createElement(\"div\", null, React__default.createElement(Grid, {\n        container: true,\n        className: classes.container,\n        justify: \"flex-start\",\n        alignItems: \"flex-start\",\n        direction: \"column\"\n      }, React__default.createElement(Grid, {\n        item: true,\n        xs: true\n      }, React__default.createElement(DialogTitle, {\n        disableTypography: true,\n        id: \"dialog-title\",\n        className: classes.dialogTitle\n      }, props.type, \" Ticket\")), React__default.createElement(Grid, {\n        item: true,\n        xs: true\n      }, React__default.createElement(DialogContent, {\n        className: classes.dialogContent\n      }, React__default.createElement(InputSelect, {\n        id: 'modal-input-select',\n        label: 'Escalate To',\n        data: props.selectItems\n      }), React__default.createElement(DialogContentText, null), React__default.createElement(InputTextField, {\n        label: 'Notes',\n        value: state.notes,\n        error: state.notesError,\n        multiline: true,\n        rows: 4,\n        onChange: function onChange(value) {\n          setFieldValue('notes', value);\n          setFieldError('notesError', value.length === 0);\n        }\n      })), React__default.createElement(DialogActions, {\n        className: classes.dialogAction\n      }, React__default.createElement(Button, {\n        className: classes.leftButton,\n        variant: \"contained\",\n        onClick: handleClose,\n        color: \"secondary\"\n      }, \"Cancel\"), React__default.createElement(Button, {\n        className: classes.rightButton,\n        variant: \"contained\",\n        onClick: props.onSubmit,\n        color: \"primary\"\n      }, \"Escalate\")))));\n      break;\n  }\n\n  return React__default.createElement(Dialog, {\n    className: classes.dialog,\n    open: props.isModalOpen,\n    \"aria-labelledby\": \"simple-dialog-title\"\n  }, component);\n}; //declare defaults\n\n\nTicketModal.defaultProps = {\n  isModalOpen: false,\n  type: 'Resolve',\n  selectItems: [{\n    \"id\": 0,\n    \"value\": '',\n    \"label\": ''\n  }]\n};\nvar index$a =\n/*#__PURE__*/\nObject.freeze({\n  TicketModal: TicketModal\n});\nvar styles = {\n  \"title\": \"index_title__3_oz-\",\n  \"titleBack\": \"index_titleBack__ghwZN\",\n  \"titleFront\": \"index_titleFront__23_8b\",\n  \"titleContact\": \"index_titleContact__2ETaU\",\n  \"titleRecruitmentTitle\": \"index_titleRecruitmentTitle__eDJJH\"\n}; // #endregion Interface Imports\n\nvar SampleCoreComponent =\n/** @class */\nfunction (_super) {\n  __extends(SampleCoreComponent, _super);\n\n  function SampleCoreComponent() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SampleCoreComponent.prototype.render = function () {\n    var text = this.props.text;\n    return React__default.createElement(\"div\", {\n      className: styles.title\n    }, React__default.createElement(\"span\", {\n      className: styles.titleBack\n    }, text), React__default.createElement(\"span\", {\n      className: styles.titleFront\n    }, text));\n  };\n\n  return SampleCoreComponent;\n}(React__default.Component);\n\nvar index$b =\n/*#__PURE__*/\nObject.freeze({\n  SampleCoreComponent: SampleCoreComponent\n});\nvar useStyles$6 = makeStyles(function (theme) {\n  var _a, _b;\n\n  return {\n    appBar: (_a = {\n      backgroundColor: '#ffffff',\n      color: '#808080'\n    }, _a[theme.breakpoints.up('sm')] = {\n      width: 'calc(100% - 85px)'\n    }, _a),\n    menuButton: (_b = {\n      marginRight: theme.spacing(2)\n    }, _b[theme.breakpoints.up('sm')] = {\n      display: 'none'\n    }, _b),\n    logo: {\n      height: '40px'\n    },\n    badge: {\n      backgroundColor: '#ff6969',\n      color: '#ffffff',\n      fontWeight: 700\n    },\n    grow: {\n      flexGrow: 1\n    }\n  };\n});\n\nvar AppHeader = function AppHeader(props) {\n  var classes = useStyles$6();\n\n  var handleMenuOnClick = function handleMenuOnClick() {\n    if (props.menuOnClick) {\n      props.menuOnClick();\n    }\n  }; // const handleNotificationOnClick = () => {\n  //   if (props.notificationOnClick) {\n  //     props.notificationOnClick();\n  //   }\n  // };\n\n\n  var handleUserOnClick = function handleUserOnClick() {\n    if (props.userOnClick) {\n      props.userOnClick();\n    }\n  };\n\n  return React__default.createElement(AppBar, {\n    className: classes.appBar\n  }, React__default.createElement(Toolbar, null, React__default.createElement(IconButton, {\n    edge: \"start\",\n    className: classes.menuButton,\n    onClick: handleMenuOnClick\n  }, React__default.createElement(MenuIcon, null)), React__default.createElement(Link, {\n    href: \"/\"\n  }, React__default.createElement(\"img\", {\n    src: props.logoImage,\n    className: classes.logo,\n    alt: \"logo\"\n  })), React__default.createElement(\"div\", {\n    className: classes.grow\n  }), React__default.createElement(IconButton, {\n    edge: \"end\",\n    onClick: handleUserOnClick\n  }, React__default.createElement(Avatar, {\n    src: props.userImage,\n    alt: \"avatar\"\n  }))));\n};\n\nAppHeader.defaultProps = {\n  badgeCount: 0\n};\nAppHeader.propTypes = {\n  badgeCount: PropTypes.number\n};\nvar useStyles$7 = makeStyles(function () {\n  return {\n    sideBar: {\n      width: '85px'\n    },\n    listItem: {\n      flexDirection: 'column',\n      marginBottom: '10px'\n    },\n    listItemIcon: {\n      minWidth: 0\n    },\n    avatar: {\n      backgroundColor: 'rgba(158, 164, 172, 0.18)'\n    },\n    avatarSelected: {\n      backgroundColor: 'rgba(98, 255, 183, 0.18)'\n    },\n    listItemText: {\n      fontSize: 9,\n      color: '#ffffff'\n    },\n    listItemTextSelected: {\n      fontSize: 9,\n      color: 'rgba(98, 255, 183, 1)'\n    },\n    icon: {\n      color: 'white'\n    },\n    iconSelected: {\n      color: 'rgba(98, 255, 183, 1)'\n    },\n    divider: {\n      backgroundColor: 'transparent',\n      height: '50px'\n    }\n  };\n});\n\nfunction ListItemLink(props) {\n  return React__default.createElement(ListItem, _assign({\n    button: true,\n    component: \"a\"\n  }, props));\n}\n\nvar AppSidebar = function AppSidebar(props) {\n  var classes = useStyles$7(); // const [selectedItem, setSelectedItem] = useState(\"dashboard\");\n\n  var isSelectedSidebar = function isSelectedSidebar(sidebarItem) {\n    var selectedSidebar = localStorage.getItem('sidebar');\n    var isSelected = selectedSidebar && selectedSidebar === sidebarItem || false;\n    return isSelected;\n  };\n\n  var _a = React__default.useState(true),\n      sidebarChanged = _a[0],\n      setSidebarChanged = _a[1];\n\n  var _b = React__default.useState({\n    dashboard: true,\n    members: false,\n    proposals: false,\n    clients: false,\n    tickets: false,\n    reports: false,\n    templates: false,\n    help: false\n  }),\n      sidebarSelected = _b[0],\n      setSidebarSelected = _b[1];\n\n  var getSidebarSelected = function getSidebarSelected() {\n    setSidebarSelected({\n      dashboard: isSelectedSidebar('dashboard'),\n      members: isSelectedSidebar('members'),\n      proposals: isSelectedSidebar('proposals'),\n      clients: isSelectedSidebar('clients'),\n      tickets: isSelectedSidebar('tickets'),\n      reports: isSelectedSidebar('reports'),\n      templates: isSelectedSidebar('templates'),\n      help: isSelectedSidebar('help')\n    });\n  };\n\n  var onStorageChange = function onStorageChange() {\n    setSidebarChanged(true);\n  };\n\n  React__default.useEffect(function () {\n    if (sidebarChanged) {\n      getSidebarSelected();\n      setSidebarChanged(false);\n    }\n  }, [sidebarChanged]);\n  React__default.useEffect(function () {\n    if (typeof window !== 'undefined') {\n      window.addEventListener('storage', onStorageChange);\n      return function () {\n        window.removeEventListener('storage', onStorageChange);\n      };\n    }\n\n    return undefined;\n  }, []);\n\n  var handleDashboardOnClick = function handleDashboardOnClick(event, attr) {\n    console.log('handleDashboardOnClick event', event);\n    console.log('handleDashboardOnClick attr', attr);\n\n    switch (attr) {\n      case 'dashboard':\n        if (props.page === 'membership') {\n          props.history.push('#/membership/', {\n            state: 'dashboard'\n          });\n          window.location.reload();\n        } else if (props.page === 'underwriting') {\n          props.history.push('#/underwriting/', {\n            state: 'dashboard'\n          });\n          window.location.reload();\n        } else if (props.page === 'customer care') {\n          props.history.push('#/customer-care', {\n            state: 'dashboard'\n          });\n          window.location.reload();\n        }\n\n        break;\n\n      case 'members':\n        if (props.page === 'membership') {\n          props.history.push('#/membership/members', {\n            state: 'members'\n          });\n          window.location.reload();\n        }\n\n        break;\n\n      case 'clients':\n        if (props.page === 'underwriting') {\n          props.history.push('#/underwriting/clients', {\n            state: 'clients'\n          });\n          window.location.reload();\n        }\n\n        break;\n\n      case 'proposals':\n        if (props.page === 'underwriting') {\n          props.history.push('#/underwriting/proposals', {\n            state: 'proposals'\n          });\n          window.location.reload();\n        }\n\n        break;\n\n      case 'create ticket':\n        if (props.page === 'customer care') {\n          props.history.push('#/customer-care/create-ticket', {\n            state: 'create ticket'\n          });\n          window.location.reload();\n        }\n\n        break;\n    }\n\n    localStorage.setItem('sidebar', attr);\n    setSidebarChanged(true); // setSelectedItem(attr);\n  };\n\n  var handleSidebarClick = function handleSidebarClick(page) {\n    localStorage.setItem('sidebar', page);\n    setSidebarChanged(true);\n  };\n\n  return React__default.createElement(\"div\", {\n    className: classes.sideBar\n  }, React__default.createElement(List, null, props.page !== 'customer care' ? React__default.createElement(ListItemLink, {\n    className: classes.listItem,\n    href: props.page === 'membership' ? '#/membership/' : '#/underwriting/',\n    onClick: function onClick() {\n      handleSidebarClick('dashboard');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faHome,\n    className: sidebarSelected.dashboard ? classes.iconSelected : classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Dashboard\",\n    disableTypography: true,\n    className: sidebarSelected.dashboard ? classes.listItemTextSelected : classes.listItemText\n  })) : null, props.page === 'customer care' ? React__default.createElement(ListItemLink, {\n    className: classes.listItem,\n    href: '#/customer-care/',\n    onClick: function onClick() {\n      handleSidebarClick('dashboard');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faPlusCircle,\n    className: sidebarSelected.dashboard ? classes.iconSelected : classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Create New\",\n    disableTypography: true,\n    className: sidebarSelected.dashboard ? classes.listItemTextSelected : classes.listItemText\n  })) : null, props.page !== 'customer care' ? React__default.createElement(ListItem, {\n    button: true,\n    className: classes.listItem,\n    onClick: function onClick(e) {\n      return handleDashboardOnClick(e, 'clients');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faUsers,\n    className: sidebarSelected.clients ? classes.iconSelected : classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Clients\",\n    disableTypography: true,\n    className: sidebarSelected.clients ? classes.listItemTextSelected : classes.listItemText\n  })) : null, props.page !== 'customer care' ? React__default.createElement(ListItem, {\n    button: true,\n    className: classes.listItem,\n    onClick: function onClick(e) {\n      return handleDashboardOnClick(e, 'proposals');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faFileSignature,\n    className: sidebarSelected.proposals ? classes.iconSelected : classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Proposals\",\n    disableTypography: true,\n    className: sidebarSelected.proposals ? classes.listItemTextSelected : classes.listItemText\n  })) : null, props.page === 'membership' ? React__default.createElement(ListItemLink, {\n    className: classes.listItem,\n    href: '#/membership/members',\n    onClick: function onClick() {\n      handleSidebarClick('members');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faIdCardAlt,\n    className: sidebarSelected.members ? classes.iconSelected : classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Members\",\n    disableTypography: true,\n    className: sidebarSelected.members ? classes.listItemTextSelected : classes.listItemText\n  })) : null, props.page === 'customer care' ? React__default.createElement(ListItemLink, {\n    className: classes.listItem,\n    href: '#/membership/members',\n    onClick: function onClick() {\n      handleSidebarClick('members');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faIdCardAlt,\n    className: sidebarSelected.members ? classes.iconSelected : classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Members\",\n    disableTypography: true,\n    className: sidebarSelected.members ? classes.listItemTextSelected : classes.listItemText\n  })) : null, props.page === 'customer care' ? React__default.createElement(ListItemLink, {\n    className: classes.listItem,\n    href: '#/customer-care/tickets'\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faTasks,\n    className: classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Tickets\",\n    disableTypography: true,\n    className: classes.listItemText\n  })) : null, props.page !== 'customer care' ? React__default.createElement(ListItem, {\n    button: true,\n    className: classes.listItem,\n    onClick: function onClick(e) {\n      return handleDashboardOnClick(e, 'tickets');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faTasks,\n    className: sidebarSelected.tickets ? classes.iconSelected : classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Tickets\",\n    disableTypography: true,\n    className: sidebarSelected.tickets ? classes.listItemTextSelected : classes.listItemText\n  })) : null, props.page !== 'customer care' ? React__default.createElement(ListItem, {\n    button: true,\n    className: classes.listItem,\n    onClick: function onClick(e) {\n      return handleDashboardOnClick(e, 'reports');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faTable,\n    className: sidebarSelected.reports ? classes.iconSelected : classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Reports\",\n    disableTypography: true,\n    className: sidebarSelected.reports ? classes.listItemTextSelected : classes.listItemText\n  })) : null, props.page === 'underwriting' ? React__default.createElement(ListItem, {\n    button: true,\n    className: classes.listItem,\n    onClick: function onClick(e) {\n      return handleDashboardOnClick(e, 'templates');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faFolderOpen,\n    className: sidebarSelected.templates ? classes.iconSelected : classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Templates\",\n    disableTypography: true,\n    className: sidebarSelected.templates ? classes.listItemTextSelected : classes.listItemText\n  })) : null, props.page === 'membership' ? React__default.createElement(ListItem, {\n    button: true,\n    className: classes.listItem,\n    onClick: function onClick(e) {\n      return handleDashboardOnClick(e, 'users');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faUserFriends,\n    className: classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Users\",\n    disableTypography: true,\n    className: classes.listItemText\n  })) : null, props.page === 'membership' ? React__default.createElement(ListItem, {\n    button: true,\n    className: classes.listItem,\n    onClick: function onClick(e) {\n      return handleDashboardOnClick(e, 'settings');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faScrewdriver,\n    className: classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"settings\",\n    disableTypography: true,\n    className: classes.listItemText\n  })) : null, React__default.createElement(Divider, {\n    className: classes.divider\n  }), React__default.createElement(ListItem, {\n    button: true,\n    className: classes.listItem,\n    onClick: function onClick(e) {\n      return handleDashboardOnClick(e, 'help');\n    }\n  }, React__default.createElement(ListItemIcon, {\n    className: classes.listItemIcon\n  }, React__default.createElement(Avatar, {\n    className: classes.avatar\n  }, React__default.createElement(FontAwesomeIcon, {\n    icon: faBookOpen,\n    className: sidebarSelected.help ? classes.iconSelected : classes.icon\n  }))), React__default.createElement(ListItemText, {\n    primary: \"Help\",\n    disableTypography: true,\n    className: sidebarSelected.help ? classes.listItemTextSelected : classes.listItemText\n  }))));\n};\n\nvar useStyles$8 = makeStyles(function (theme) {\n  var _a;\n\n  return {\n    root: {\n      display: 'flex'\n    },\n    drawer: (_a = {}, _a[theme.breakpoints.up('sm')] = {\n      width: '72px',\n      flexShrink: 0\n    }, _a),\n    drawerPaper: {\n      backgroundColor: '#1e2071'\n    },\n    content: {\n      flexGrow: 1,\n      padding: \"0 \" + theme.spacing(5) + \"px\"\n    },\n    toolbar: theme.mixins.toolbar\n  };\n});\n\nvar AuthenticatedLayout = function AuthenticatedLayout(props) {\n  var classes = useStyles$8();\n\n  var _a = useState(false),\n      mobileOpen = _a[0],\n      setMobileOpen = _a[1];\n\n  var handleDrawerToggle = function handleDrawerToggle() {\n    setMobileOpen(!mobileOpen);\n  };\n\n  return React__default.createElement(\"div\", {\n    className: classes.root\n  }, React__default.createElement(AppHeader, {\n    logoImage: \"intellicare.png\",\n    userImage: \"user.jpg\",\n    badgeCount: 8,\n    menuOnClick: handleDrawerToggle\n  }), React__default.createElement(\"nav\", {\n    className: classes.drawer\n  }, React__default.createElement(Hidden, {\n    smUp: true,\n    implementation: \"css\"\n  }, React__default.createElement(Drawer, {\n    classes: {\n      paper: classes.drawerPaper\n    },\n    variant: \"temporary\",\n    open: mobileOpen,\n    onClose: handleDrawerToggle\n  }, React__default.createElement(AppSidebar, _assign({}, props)))), React__default.createElement(Hidden, {\n    xsDown: true,\n    implementation: \"css\"\n  }, React__default.createElement(Drawer, {\n    classes: {\n      paper: classes.drawerPaper\n    },\n    variant: \"permanent\",\n    open: true\n  }, React__default.createElement(AppSidebar, _assign({}, props))))), React__default.createElement(\"main\", {\n    className: classes.content\n  }, React__default.createElement(\"div\", {\n    className: classes.toolbar\n  }), props.children));\n};\n\nvar useStyles$9 = makeStyles({\n  root: {\n    backgroundColor: '#ffffff',\n    padding: '10px'\n  },\n  gridContainer: {\n    height: '100px'\n  },\n  breadCrumbs: {\n    marginBottom: '10px'\n  },\n  headerTitle: {\n    fontSize: 25\n  },\n  linkPrevious: {\n    fontSize: 12,\n    fontWeight: 300,\n    color: 'black',\n    cursor: 'pointer'\n  },\n  linkCurrent: {\n    fontSize: 12,\n    color: 'black',\n    cursor: 'pointer'\n  }\n});\n\nvar PageHeader = function PageHeader() {\n  var classes = useStyles$9();\n  return createElement(\"div\", {\n    className: classes.root\n  }, createElement(Grid, {\n    container: true,\n    justify: \"space-between\",\n    alignItems: \"center\",\n    className: classes.gridContainer\n  }, createElement(Grid, {\n    item: true\n  }, createElement(Breadcrumbs, {\n    className: classes.breadCrumbs\n  }, createElement(Link, {\n    className: classes.linkPrevious\n  }, \"CLIENTS\"), createElement(Link, {\n    className: classes.linkCurrent\n  }, \"HAPPY INNOVATIVE TECHNOLOGIES, INC.\")), createElement(Typography, {\n    className: classes.headerTitle\n  }, \"Happy Innovative Technologies, Inc.\")), createElement(Grid, {\n    item: true\n  }, createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\"\n  }, \"Edit Client\"))));\n};\n\nvar index$c =\n/*#__PURE__*/\nObject.freeze({\n  'default': PageHeader\n});\nvar useStyles$a = makeStyles({\n  root: {\n    padding: '5px 5px'\n  },\n  name: function name(props) {\n    return {\n      fontSize: props.nameFontSize,\n      color: 'rgba(39, 46, 76, 0.6)'\n    };\n  },\n  value: function value(props) {\n    return {\n      fontSize: props.valueFontSize,\n      color: 'rgb(39, 46, 76)'\n    };\n  }\n});\n\nvar ClientInfoItem = function ClientInfoItem(props) {\n  var classes = useStyles$a(props);\n  return createElement(\"div\", {\n    className: classes.root\n  }, createElement(Typography, {\n    className: classes.name\n  }, props.name), createElement(Typography, {\n    className: classes.value\n  }, props.value));\n};\n\nClientInfoItem.defaultProps = {\n  nameFontSize: 12,\n  valueFontSize: 16\n};\nvar useStyles$b = makeStyles({\n  grid: function grid(props) {\n    return {\n      height: props.height\n    };\n  }\n});\n\nvar GridHorizontalDivider = function GridHorizontalDivider(props) {\n  var classes = useStyles$b(props);\n  return createElement(Grid, {\n    item: true,\n    xs: 12,\n    className: classes.grid\n  });\n};\n\nGridHorizontalDivider.defaultProps = {\n  height: '10px'\n};\nGridHorizontalDivider.propTypes = {\n  height: PropTypes.string\n};\nvar useCirclePrimitive = makeStyles(function (theme) {\n  var circlePrimitiveStyle = {\n    width: '100%',\n    height: '100%',\n    position: 'absolute',\n    left: '0',\n    top: '0'\n  };\n\n  if (theme.rotate) {\n    Object.assign(circlePrimitiveStyle, {\n      'transform': \"rotate(\" + theme.rotate + \"deg)\"\n    });\n  }\n\n  var circlePrimBeforeStyle = {\n    content: '',\n    display: 'block',\n    margin: '0 auto',\n    width: '15%',\n    height: '15%',\n    backgroundColor: '#999',\n    borderRadius: '100%',\n    '@keyframes circleFadeDelay': {\n      '0%,39%,100%': {\n        opacity: 0\n      },\n      '40%': {\n        opacity: 1\n      }\n    },\n    animation: \"$circleFadeDelay 1.2s infinite ease-in-out both\"\n  };\n\n  if (theme.delay) {\n    Object.assign(circlePrimBeforeStyle, {\n      animationDelay: theme.delay + \"s\"\n    });\n  } // Object.assign(circlePrimitiveStyle, {\n  //   '&:before': circlePrimBeforeStyle,\n  // });\n\n\n  return {\n    root: circlePrimitiveStyle\n  };\n});\n\nvar Circle = function Circle(props) {\n  var classes = useCirclePrimitive(props);\n  return createElement(\"div\", {\n    className: classes.root\n  });\n};\n\nvar useStyles$c = makeStyles({\n  root: {\n    margin: '2em auto',\n    width: '40px',\n    height: '40px',\n    position: 'relative'\n  }\n});\n\nvar Wrapper = function Wrapper(props) {\n  var classes = useStyles$c();\n  return React__default.createElement(\"div\", _assign({\n    className: classes.root\n  }, props));\n};\n\nvar LoadingIndicator = function LoadingIndicator() {\n  return createElement(Wrapper, null, createElement(Circle, null), createElement(Circle, {\n    rotate: 30,\n    delay: -1.1\n  }), createElement(Circle, {\n    rotate: 60,\n    delay: -1\n  }), createElement(Circle, {\n    rotate: 90,\n    delay: -0.9\n  }), createElement(Circle, {\n    rotate: 120,\n    delay: -0.8\n  }), createElement(Circle, {\n    rotate: 150,\n    delay: -0.7\n  }), createElement(Circle, {\n    rotate: 180,\n    delay: -0.6\n  }), createElement(Circle, {\n    rotate: 210,\n    delay: -0.5\n  }), createElement(Circle, {\n    rotate: 240,\n    delay: -0.4\n  }), createElement(Circle, {\n    rotate: 270,\n    delay: -0.3\n  }), createElement(Circle, {\n    rotate: 300,\n    delay: -0.2\n  }), createElement(Circle, {\n    rotate: 330,\n    delay: -0.1\n  }));\n};\n\nvar useStyles$d = makeStyles({\n  previous_page: {\n    fontWeight: 300\n  },\n  current_page: {\n    fontWeight: 600\n  }\n});\n\nvar BreadcrumbsComponent = function BreadcrumbsComponent(props) {\n  var items = props.items;\n  var classes = useStyles$d();\n  return createElement(Breadcrumbs, {\n    \"aria-label\": \"breadcrumb\"\n  }, items.map(function (item, i) {\n    if (item['url'] != \"\") {\n      return createElement(Link, {\n        className: classes.previous_page,\n        key: i,\n        color: \"inherit\",\n        href: item.url\n      }, item.label);\n    } else {\n      return createElement(Typography, {\n        className: classes.current_page,\n        key: i,\n        color: \"textPrimary\"\n      }, item.label);\n    }\n  }));\n};\n\nBreadcrumbsComponent.defaultProps = {\n  items: [{\n    label: \"SAMPLE\",\n    url: \"\"\n  }]\n};\nvar useStyles$e = makeStyles(function (theme) {\n  var _a;\n\n  return {\n    appBar: (_a = {\n      top: 'auto',\n      bottom: 0,\n      border: '1px solid #707070',\n      backgroundColor: 'rgba(54, 54, 54, 0.64)'\n    }, _a[theme.breakpoints.up('sm')] = {\n      width: 'calc(100% - 72px)'\n    }, _a),\n    grow: {\n      flexGrow: 1\n    },\n    button: {\n      margin: '0 10px',\n      minHeight: '42px',\n      minWidth: '150px'\n    },\n    buttonTitle: {\n      fontWeight: 700,\n      fontSize: 13\n    },\n    buttonSubTitle: {\n      fontWeight: 400,\n      fontSize: 7\n    }\n  };\n});\n\nvar FloatingButtons = function FloatingButtons(props) {\n  // const buttonclasses = ButtonStyle();\n  var classes = useStyles$e();\n  return createElement(Grid, {\n    container: true\n  }, createElement(Grid, {\n    item: true,\n    xs: 12\n  }, createElement(AppBar, {\n    className: classes.appBar\n  }, createElement(Toolbar, null, props.rightButtons, createElement(\"div\", {\n    className: classes.grow\n  }), props.leftButtons))));\n};\n\nFloatingButtons.defaultProps = {\n  leftButtons: null,\n  rightButtons: null\n};\nvar useStyles$f = makeStyles(function (theme) {\n  var _a, _b;\n\n  return {\n    root: {\n      display: 'flex'\n    },\n    drawer: (_a = {}, _a[theme.breakpoints.up('sm')] = {\n      width: '72px',\n      flexShrink: 0\n    }, _a),\n    drawerPaper: {\n      backgroundColor: '#1e2071'\n    },\n    content: {\n      flexGrow: 1\n    },\n    toolbar: theme.mixins.toolbar,\n    menuButton: (_b = {\n      marginRight: theme.spacing(2)\n    }, _b[theme.breakpoints.up('sm')] = {\n      display: 'none'\n    }, _b),\n    logo: {\n      height: '40px'\n    },\n    badge: {\n      backgroundColor: '#ff6969',\n      color: '#ffffff',\n      fontWeight: 700\n    },\n    grow: {\n      flexGrow: 1\n    },\n    sidebar: {\n      maxWidth: '85px'\n    },\n    contentgrid: {\n      maxWidth: 'calc(100% - 85px)',\n      flexBasis: 'calc(100% - 85px)'\n    }\n  };\n});\n\nvar PageLayout = function PageLayout(props) {\n  var classes = useStyles$f();\n\n  var _a = useState(false),\n      mobileOpen = _a[0],\n      setMobileOpen = _a[1];\n\n  var _b = React__default.useState(null),\n      anchorEl = _b[0],\n      setAnchorEl = _b[1];\n\n  var _c = React__default.useState(false),\n      open = _c[0],\n      setOpen = _c[1];\n\n  var _d = React__default.useState(),\n      placement = _d[0],\n      setPlacement = _d[1];\n\n  var handleDrawerToggle = function handleDrawerToggle() {\n    setMobileOpen(!mobileOpen);\n  };\n\n  var handleClick = function handleClick(newPlacement) {\n    return function (event) {\n      setAnchorEl(event.currentTarget);\n      setOpen(function (prev) {\n        return placement !== newPlacement || !prev;\n      });\n      setPlacement(newPlacement);\n    };\n  };\n\n  var logolink = '/';\n\n  switch (props.page) {\n    case 'membership':\n      logolink = '#/membership';\n      break;\n\n    case 'underwriting':\n      logolink = '#/underwriting';\n      break;\n\n    default:\n      break;\n  }\n\n  return React__default.createElement(\"div\", {\n    className: classes.root\n  }, React__default.createElement(Popper, {\n    open: open,\n    anchorEl: anchorEl,\n    placement: placement,\n    transition: true\n  }, function (_a) {\n    var TransitionProps = _a.TransitionProps;\n    return React__default.createElement(Fade, _assign({}, TransitionProps, {\n      timeout: 350\n    }), React__default.createElement(Paper$1, null, React__default.createElement(List$1, null, React__default.createElement(ListItem$1, {\n      button: true,\n      onClick: props.onLogout\n    }, React__default.createElement(ListItemIcon$1, null, React__default.createElement(ExitToAppIcon, null)), React__default.createElement(ListItemText$1, {\n      primary: \"Logout\"\n    })))));\n  }), React__default.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"flex-start\"\n  }, React__default.createElement(Grid, {\n    item: true,\n    xs: 1,\n    className: classes.sidebar\n  }, React__default.createElement(\"nav\", {\n    className: classes.drawer\n  }, React__default.createElement(Hidden, {\n    smUp: true,\n    implementation: \"css\"\n  }, React__default.createElement(Drawer, {\n    classes: {\n      paper: classes.drawerPaper\n    },\n    variant: \"temporary\",\n    open: mobileOpen,\n    onClose: handleDrawerToggle\n  }, React__default.createElement(AppSidebar, _assign({}, props)))), React__default.createElement(Hidden, {\n    xsDown: true,\n    implementation: \"css\"\n  }, React__default.createElement(Drawer, {\n    classes: {\n      paper: classes.drawerPaper\n    },\n    variant: \"permanent\",\n    open: true\n  }, React__default.createElement(AppSidebar, _assign({}, props)))))), React__default.createElement(Grid, {\n    item: true,\n    xs: 11,\n    className: classes.contentgrid\n  }, React__default.createElement(Grid, {\n    container: true,\n    direction: \"column\"\n  }, props.page !== 'customer care' ? React__default.createElement(Grid, {\n    item: true,\n    xs: 12\n  }, React__default.createElement(Toolbar, null, React__default.createElement(IconButton, {\n    edge: \"start\",\n    className: classes.menuButton\n  }, React__default.createElement(MenuIcon, null)), React__default.createElement(Link, {\n    href: logolink\n  }, React__default.createElement(\"img\", {\n    src: 'intellicare.png',\n    className: classes.logo,\n    alt: \"logo\"\n  })), React__default.createElement(\"div\", {\n    className: classes.grow\n  }), React__default.createElement(IconButton, {\n    edge: \"end\",\n    onClick: handleClick('bottom-end')\n  }, React__default.createElement(Avatar, {\n    src: 'user.jpg',\n    alt: \"avatar\"\n  })))) : null, React__default.createElement(Grid, {\n    item: true,\n    xs: 12\n  }, React__default.createElement(\"main\", {\n    className: classes.content\n  }, props.children))))));\n};\n\nvar index$d =\n/*#__PURE__*/\nObject.freeze({\n  BaseTheme: BaseTheme,\n  SampleCoreComponent: index$b,\n  InputAutocomplete: index$5,\n  InputChipTextField: index$6,\n  InputSelect: index$7,\n  InputSelectSetValue: index$8,\n  InputTextField: index$9,\n  LoadingIndicator: LoadingIndicator,\n  AppHeader: AppHeader,\n  AppSidebar: AppSidebar,\n  AuthenticatedLayout: AuthenticatedLayout,\n  PageHeader: index$c,\n  ClientInfoItem: ClientInfoItem,\n  GridHorizontalDivider: GridHorizontalDivider,\n  TicketModal: index$a,\n  BreadcrumbsComponent: BreadcrumbsComponent,\n  FloatingButtons: FloatingButtons,\n  PageLayout: PageLayout\n});\nvar index$e =\n/*#__PURE__*/\nObject.freeze({\n  Actions: index,\n  Definitions: index$1,\n  Reducers: index$2,\n  Services: index$3,\n  Stores: index$4,\n  UI: index$d\n});\n/**\r\n * Validate the shape of redux store\r\n */\n\nfunction checkStore(store) {\n  var shape = {\n    dispatch: isFunction,\n    subscribe: isFunction,\n    getState: isFunction,\n    replaceReducer: isFunction,\n    runSaga: isFunction,\n    injectedReducers: isObject,\n    injectedSagas: isObject\n  };\n  invariant(conformsTo(store, shape), '(src/Utils...) injectors: Expected a valid redux store');\n}\n/**\r\n * Create the store with dynamic reducers\r\n */\n\n\nfunction configureStore(createReducer, initialState, history) {\n  if (initialState === void 0) {\n    initialState = {};\n  }\n\n  var composeEnhancers = compose;\n  var reduxSagaMonitorOptions = {}; // If Redux Dev Tools and Saga Dev Tools Extensions are installed, enable them\n\n  /* istanbul ignore next */\n\n  if (process.env.NODE_ENV !== 'production' && typeof window === 'object') {\n    if (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) {\n      composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({});\n    } // NOTE: Uncomment the code below to restore support for Redux Saga\n    // Dev Tools once it supports redux-saga version 1.x.x\n    // if (window.__SAGA_MONITOR_EXTENSION__)\n    //   reduxSagaMonitorOptions = {\n    //     sagaMonitor: window.__SAGA_MONITOR_EXTENSION__,\n    //   };\n\n  }\n\n  var sagaMiddleware = createSagaMiddleware(reduxSagaMonitorOptions); // Create the store with two middlewares\n  // 1. sagaMiddleware: Makes redux-sagas work\n  // 2. routerMiddleware: Syncs the location/URL path to the state\n\n  var middlewares = [sagaMiddleware, routerMiddleware(history)];\n  var enhancers = [applyMiddleware.apply(void 0, middlewares)];\n  var store = createStore(createReducer(), initialState, composeEnhancers.apply(void 0, enhancers)); // Extensions\n\n  store.runSaga = sagaMiddleware.run;\n  store.injectedReducers = {}; // Reducer registry\n\n  store.injectedSagas = {}; // Saga registry\n\n  return store;\n}\n\nvar RESTART_ON_REMOUNT = '@@saga-injector/restart-on-remount';\nvar DAEMON = '@@saga-injector/daemon';\nvar ONCE_TILL_UNMOUNT = '@@saga-injector/once-till-unmount';\nvar constants =\n/*#__PURE__*/\nObject.freeze({\n  RESTART_ON_REMOUNT: RESTART_ON_REMOUNT,\n  DAEMON: DAEMON,\n  ONCE_TILL_UNMOUNT: ONCE_TILL_UNMOUNT\n});\nvar history = createBrowserHistory();\n\nfunction injectReducerFactory(createReducer, store, isValid) {\n  if (isValid === void 0) {\n    isValid = false;\n  } // tslint:disable-next-line: only-arrow-functions\n\n\n  return function injectReducer(key, reducer) {\n    if (!isValid) {\n      checkStore(store);\n    }\n\n    invariant(isString(key) && !isEmpty(key) && isFunction(reducer), '(src/Utils...) injectReducer: Expected `reducer` to be a reducer function'); // tslint:disable-next-line:max-line-length\n    // Check `store.injectedReducers[key] === reducer` for hot reloading when a key is the same but a reducer is different\n\n    if (Reflect.has(store.injectedReducers, key) && store.injectedReducers[key] === reducer) {\n      return;\n    }\n\n    store.injectedReducers[key] = reducer;\n    store.replaceReducer(createReducer(store.injectedReducers));\n  };\n}\n\nfunction getInjectors(createReducer, store) {\n  checkStore(store);\n  return {\n    injectReducer: injectReducerFactory(createReducer, store, true)\n  };\n}\n/**\r\n * Dynamically injects a reducer\r\n *\r\n * @param {string} key A key of the reducer\r\n * @param {function} reducer A reducer that will be injected\r\n *\r\n */\n\n\nfunction hocWithReducer(createReducer, _a) {\n  var key = _a.key,\n      reducer = _a.reducer;\n\n  function wrap(WrappedComponent) {\n    // dont wanna give access to HOC. Child only\n    var ReducerInjector =\n    /** @class */\n    function (_super) {\n      __extends(ReducerInjector, _super);\n\n      function ReducerInjector(props, context) {\n        var _this = _super.call(this, props, context) || this;\n\n        getInjectors(createReducer, context.store).injectReducer(\"\" + key, reducer);\n        return _this;\n      }\n\n      ReducerInjector.prototype.render = function () {\n        return createElement(WrappedComponent, _assign({}, this.props));\n      };\n\n      ReducerInjector.WrappedComponent = WrappedComponent;\n      ReducerInjector.displayName = \"withReducer(\" + (WrappedComponent.displayName || WrappedComponent.name || 'Component') + \")\";\n      return ReducerInjector;\n    }(Component$2);\n\n    return hoistNonReactStatics(ReducerInjector, WrappedComponent);\n  }\n\n  return wrap;\n}\n\nvar useInjectReducer = function useInjectReducer(createReducer, _a) {\n  var key = _a.key,\n      reducer = _a.reducer;\n  var store = useStore();\n  useEffect(function () {\n    getInjectors(createReducer, store).injectReducer(\"\" + key, reducer);\n  }, []);\n};\n\nvar allowedModes = [RESTART_ON_REMOUNT, DAEMON, ONCE_TILL_UNMOUNT];\n\nvar checkKey = function checkKey(key) {\n  return invariant(isString(key) && !isEmpty(key), '(src/Utils...) injectSaga: Expected `key` to be a non empty string');\n};\n\nvar checkDescriptor = function checkDescriptor(descriptor) {\n  var shape = {\n    saga: isFunction,\n    mode: function mode(_mode) {\n      return isString(_mode) && allowedModes.includes(_mode || '');\n    }\n  };\n  invariant(conformsTo(descriptor, shape), '(src/Utils...) injectSaga: Expected a valid saga descriptor');\n};\n\nfunction injectSagaFactory(store, isValid) {\n  if (isValid === void 0) {\n    isValid = false;\n  } // tslint:disable-next-line: only-arrow-functions\n\n\n  return function injectSaga(key, descriptor, args) {\n    if (descriptor === void 0) {\n      descriptor = {};\n    }\n\n    if (!isValid) {\n      checkStore(store);\n    }\n\n    var newDescriptor = _assign(_assign({}, descriptor), {\n      mode: descriptor.mode || DAEMON\n    });\n\n    var saga = newDescriptor.saga,\n        mode = newDescriptor.mode;\n    checkKey(key);\n    checkDescriptor(newDescriptor);\n    var hasSaga = Reflect.has(store.injectedSagas, key);\n\n    if (process.env.NODE_ENV !== 'production') {\n      var oldDescriptor = store.injectedSagas[key]; // enable hot reloading of daemon and once-till-unmount sagas\n\n      if (hasSaga && oldDescriptor.saga !== saga) {\n        oldDescriptor.task.cancel();\n        hasSaga = false;\n      }\n    }\n\n    if (!hasSaga || hasSaga && mode !== DAEMON && mode !== ONCE_TILL_UNMOUNT) {\n      store.injectedSagas[key] = _assign(_assign({}, newDescriptor), {\n        task: store.runSaga(saga, args)\n      });\n    }\n  };\n}\n\nfunction ejectSagaFactory(store, isValid) {\n  if (isValid === void 0) {\n    isValid = false;\n  } // tslint:disable-next-line: only-arrow-functions\n\n\n  return function ejectSaga(key) {\n    if (!isValid) {\n      checkStore(store);\n    }\n\n    checkKey(key);\n\n    if (Reflect.has(store.injectedSagas, key)) {\n      var descriptor = store.injectedSagas[key];\n\n      if (descriptor.mode && descriptor.mode !== DAEMON) {\n        descriptor.task.cancel(); // Clean up in production; in development we need `descriptor.saga` for hot reloading\n\n        if (process.env.NODE_ENV === 'production') {\n          // Need some value to be able to detect `ONCE_TILL_UNMOUNT` sagas in `injectSaga`\n          store.injectedSagas[key] = 'done';\n        }\n      }\n    }\n  };\n}\n\nfunction getInjectors$1(store) {\n  checkStore(store);\n  return {\n    injectSaga: injectSagaFactory(store, true),\n    ejectSaga: ejectSagaFactory(store, true)\n  };\n}\n/**\r\n * Dynamically injects a saga, passes component's props as saga arguments\r\n *\r\n * @param {string} key A key of the saga\r\n * @param {function} saga A root saga that will be injected\r\n * @param {string} [mode] By default (constants.RESTART_ON_REMOUNT) the saga will be started on component mount and\r\n * cancelled with `task.cancel()` on component un-mount for improved performance. Another two options:\r\n *   - constants.DAEMON—starts the saga on component mount and never cancels it or starts again,\r\n *   - constants.ONCE_TILL_UNMOUNT—behaves like 'RESTART_ON_REMOUNT' but never runs it again.\r\n *\r\n */\n\n\nfunction hocWithSaga(_a) {\n  var key = _a.key,\n      saga = _a.saga,\n      mode = _a.mode;\n\n  function wrap(WrappedComponent) {\n    // dont wanna give access to HOC. Child only\n    var InjectSaga =\n    /** @class */\n    function (_super) {\n      __extends(InjectSaga, _super);\n\n      function InjectSaga(props, context) {\n        var _this = _super.call(this, props, context) || this;\n\n        _this.injectors = getInjectors$1(context.store);\n\n        _this.injectors.injectSaga(key, {\n          saga: saga,\n          mode: mode\n        }, _this.props);\n\n        return _this;\n      }\n\n      InjectSaga.prototype.componentWillUnmount = function () {\n        this.injectors.ejectSaga(key);\n      };\n\n      InjectSaga.prototype.render = function () {\n        return createElement(WrappedComponent, _assign({}, this.props));\n      };\n\n      InjectSaga.WrappedComponent = WrappedComponent;\n      InjectSaga.displayName = \"withSaga(\" + (WrappedComponent.displayName || WrappedComponent.name || 'Component') + \")\";\n      return InjectSaga;\n    }(Component$2);\n\n    return hoistNonReactStatics(InjectSaga, WrappedComponent);\n  }\n\n  return wrap;\n}\n\nvar useInjectSaga = function useInjectSaga(_a) {\n  var key = _a.key,\n      saga = _a.saga,\n      mode = _a.mode;\n  var store = useStore();\n  useEffect(function () {\n    var injectors = getInjectors$1(store);\n    injectors.injectSaga(\"\" + key, {\n      saga: saga,\n      mode: mode\n    });\n    return function () {\n      injectors.ejectSaga(\"\" + key);\n    };\n  }, []);\n};\n\nvar loadable = function loadable(importFunc, _a) {\n  var _b = (_a === void 0 ? {\n    fallback: null\n  } : _a).fallback,\n      fallback = _b === void 0 ? null : _b;\n  var LazyComponent = lazy(importFunc);\n\n  var Component = function Component(props) {\n    return React__default.createElement(Suspense, {\n      fallback: fallback\n    }, React__default.createElement(LazyComponent, _assign({}, props)));\n  };\n\n  return Component;\n};\n\nvar ResponseError =\n/** @class */\nfunction (_super) {\n  __extends(ResponseError, _super);\n\n  function ResponseError(response) {\n    var _this = _super.call(this, response.statusText) || this;\n\n    _this.response = response;\n    return _this;\n  }\n\n  return ResponseError;\n}(Error);\n/**\r\n * Parses the JSON returned by a network request\r\n *\r\n * @param  {object} response A response from a network request\r\n *\r\n * @return {object}          The parsed JSON from the request\r\n */\n\n\nfunction parseJSON(response) {\n  return __awaiter(this, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      if (response.status === 204 || response.status === 205) {\n        return [2\n        /*return*/\n        , null];\n      }\n\n      return [2\n      /*return*/\n      , response.json()];\n    });\n  });\n}\n/**\r\n * Checks if a network request came back fine, and throws an error if not\r\n *\r\n * @param  {object} response   A response from a network request\r\n *\r\n * @return {object|undefined} Returns either the response, or throws an error\r\n */\n\n\nfunction checkStatus(response) {\n  return __awaiter(this, void 0, void 0, function () {\n    var error;\n    return __generator(this, function (_a) {\n      if (response.status >= 200 && response.status < 300) {\n        return [2\n        /*return*/\n        , response];\n      }\n\n      error = new ResponseError(response);\n      error.response = response;\n      throw error;\n    });\n  });\n}\n/**\r\n * Requests a URL, returning a promise\r\n *\r\n * @param  {string} url       The URL we want to request\r\n * @param  {object} [options] The options we want to pass to \"fetch\"\r\n *\r\n * @return {object}           The response data\r\n */\n\n\nfunction request(url, options) {\n  return __awaiter(this, void 0, void 0, function () {\n    var fetchResponse, response;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , fetch(url, options)];\n\n        case 1:\n          fetchResponse = _a.sent();\n          return [4\n          /*yield*/\n          , checkStatus(fetchResponse)];\n\n        case 2:\n          response = _a.sent();\n          return [2\n          /*return*/\n          , parseJSON(response)];\n      }\n    });\n  });\n}\n\nvar index$f =\n/*#__PURE__*/\nObject.freeze({\n  checkStore: checkStore,\n  configureStore: configureStore,\n  constants: constants,\n  history: history,\n  hocWithReducer: hocWithReducer,\n  useInjectReducer: useInjectReducer,\n  hocWithSaga: hocWithSaga,\n  useInjectSaga: useInjectSaga,\n  loadable: loadable,\n  injectReducerFactory: injectReducerFactory,\n  getReducerInjectors: getInjectors,\n  request: request,\n  ResponseError: ResponseError,\n  injectSagaFactory: injectSagaFactory,\n  ejectSagaFactory: ejectSagaFactory,\n  getSagaInjectors: getInjectors$1\n});\nvar theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#3ab77d',\n      contrastText: '#ffffff'\n    },\n    secondary: {\n      main: '#ffffff',\n      contrastText: '#3ab77d'\n    }\n  },\n  typography: {\n    fontFamily: '\"Usual\", \"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n    button: {\n      fontFamily: 'Usual, Roboto, Helvetica, Arial, sans-serif',\n      fontWeight: 700,\n      fontSize: 13,\n      textTransform: 'none'\n    }\n  },\n  overrides: {\n    MuiButton: {\n      containedPrimary: {\n        boxShadow: '0px 3px 6px #1e207129',\n        '&:hover': {\n          backgroundColor: '#008650'\n        }\n      },\n      containedSecondary: {\n        border: '1px solid #0000001A',\n        boxShadow: '0px 1px 3px #00000033',\n        '&:hover': {\n          backgroundColor: '#3ab77d1a'\n        }\n      }\n    }\n  }\n});\n\nvar Component = function Component(props) {\n  var Component = props.Component,\n      store = props.store,\n      componentProps = props.componentProps;\n  return createElement(ThemeProvider, {\n    theme: theme\n  }, createElement(Provider$1, {\n    store: store\n  }, createElement(ConnectedRouter, {\n    history: history\n  }, createElement(HashRouter, {\n    basename: \"/\"\n  }, createElement(Component, _assign({}, componentProps))))));\n};\n\nvar index$g =\n/*#__PURE__*/\nObject.freeze({\n  Component: Component\n});\n/*\r\n *\r\n * MessageProvider constants\r\n *\r\n */\n\nvar ActionTypes;\n\n(function (ActionTypes) {\n  ActionTypes[\"CHANGE_LOCALE\"] = \"hims/MsgProvider/CHANGE_LOCALE\";\n})(ActionTypes || (ActionTypes = {}));\n\nvar ActionTypes$1 = ActionTypes;\nvar DEFAULT_LOCALE = 'en';\n/*\r\n *\r\n * MessageProvider reducer\r\n *\r\n */\n\nvar initialState = {\n  locale: DEFAULT_LOCALE\n};\n\nfunction messageProviderReducer(state, action) {\n  if (state === void 0) {\n    state = initialState;\n  }\n\n  switch (action.type) {\n    case ActionTypes$1.CHANGE_LOCALE:\n      return {\n        locale: action.payload\n      };\n\n    default:\n      return state;\n  }\n}\n/**\r\n * Direct selector to the languageToggle state domain\r\n */\n\n\nvar selectLanguage = function selectLanguage(state) {\n  return state.language || initialState;\n};\n/**\r\n * Select the language locale\r\n */\n\n\nvar makeSelectLocale = function makeSelectLocale() {\n  return createSelector(selectLanguage, function (languageState) {\n    return languageState.locale;\n  });\n};\n\nvar enTranslationMessages = require('Messages/en.json'); // prettier-ignore\n\n\nvar appLocales = ['en'];\n\nvar formatTranslationMessages = function formatTranslationMessages(locale, messages) {\n  var defaultFormattedMessages = locale !== DEFAULT_LOCALE ? formatTranslationMessages(DEFAULT_LOCALE, enTranslationMessages) : {};\n\n  var flattenFormattedMessages = function flattenFormattedMessages(formattedMessages, key) {\n    var _a;\n\n    var formattedMessage = !messages[key] && locale !== DEFAULT_LOCALE ? defaultFormattedMessages[key] : messages[key];\n    return _assign(_assign({}, formattedMessages), (_a = {}, _a[key] = formattedMessage, _a));\n  };\n\n  return Object.keys(messages).reduce(flattenFormattedMessages, {});\n};\n\nvar translationMessages = {\n  en: formatTranslationMessages('en', enTranslationMessages)\n};\n/*\r\n *\r\n * MessageProvider\r\n *\r\n * this component connects the redux state message locale to the\r\n * IntlProvider component and i18n messages (loaded from `src/Translations`)\r\n */\n\nvar stateSelector = createSelector(makeSelectLocale(), function (locale) {\n  return {\n    locale: locale\n  };\n});\n\nvar Provider = function Provider(props) {\n  var locale = useSelector(stateSelector).locale;\n  return React__default.createElement(IntlProvider, {\n    locale: locale,\n    key: locale,\n    messages: props.messages[locale]\n  }, React__default.Children.only(props.children));\n};\n\nvar index$h =\n/*#__PURE__*/\nObject.freeze({\n  Provider: Provider,\n  appLocales: appLocales,\n  formatTranslationMessages: formatTranslationMessages,\n  messageProviderReducer: messageProviderReducer\n});\nvar scope = 'boilerplate.containers.NotFoundPage';\nvar messages = defineMessages({\n  header: {\n    id: scope + \".header\",\n    defaultMessage: 'Page not found.'\n  }\n});\n/**\r\n * NotFoundPage\r\n *\r\n * This is the page shown when the user visits a url that doesn't have a route\r\n */\n\nvar Component$1 = function Component$1() {\n  return createElement(\"article\", null, createElement(\"h1\", null, createElement(FormattedMessage, _assign({}, messages.header))));\n};\n\nvar index$i =\n/*#__PURE__*/\nObject.freeze({\n  Document: index$g,\n  Message: index$h,\n  NotFoundPage: Component$1\n});\nvar index$j =\n/*#__PURE__*/\nObject.freeze({});\nexport { index$e as Components, index$i as Containers, index$j as Pages, index$f as Utils };","\n\nimport * as React from 'react';\nimport { Link } from '@material-ui/core';\nimport './component-style.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\n\ninterface IProps {\n    icon?: IconProp;\n    label?: string;\n    onClick: () => void;\n}\n\nexport class TextButton extends React.Component<IProps> {\n\n    shouldComponentUpdate(props: IProps, _state: any) {\n        return (\n            (this.props.icon !== props.icon) ||\n            (this.props.label !== props.label)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <Link className='text-button' onClick={() => this.props.onClick()}>\n                {this.props.icon ? <FontAwesomeIcon icon={this.props.icon} /> : null}\n                {this.props.icon ? <span style={{marginLeft: '10px'}}/> : null}\n                {this.props.label}\n            </Link>\n        );\n    }\n}","import * as React from 'react';\nimport { PartialMemberData } from 'Pages/CustomerCarePage/Models';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\n// import { API } from 'Pages/CustomerCarePage/API';\n\ninterface IProps {\n    members: PartialMemberData[];\n    searchText: string;\n    onSelectMember: (cardNo: string) => void;\n}\n\nexport class SearchedMembersList extends React.Component<IProps> {\n\n    // members: PartialMemberData[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        // this.members = [];\n    }\n\n    // componentDidMount() {\n    //     API.get('customer-care/members', \n    //         (response) => {\n    //             console.log(response);\n    //             this.members = response.map(member => {\n    //                 return {\n    //                     cardNo: member.member_card_no,\n    //                     firstName: member.first_name,\n    //                     middleName: member.middle_name,\n    //                     lastName: member.last_name,\n    //                     clientName: member.client.registered_name\n    //                 }\n    //             });\n    //             console.log(this.members);\n    //         },\n    //         (error) => {\n    //             console.log(error);\n    //         });\n    // }\n\n    getExtractedMembers = (filter: string) => {\n        return (filter.trim().length > 0 ? (\n            this.props.members\n                .filter(member => member.cardNo)\n                .filter(member => member.cardNo.includes(filter))\n                // .filter((_member, index) => index < 3)\n        ) : []);\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='mini-ticket-modals'>\n                {this.getExtractedMembers(this.props.searchText).map(member => {\n                    return (\n                        <>\n                        {this.renderMemberShortDetail(member)}\n                        <div className='line-border' />\n                        </>\n                    );\n                })}\n            </div>\n        );\n    }\n\n    renderMemberShortDetail(member: PartialMemberData): JSX.Element {\n        const name = \n            member.firstName + ' ' + \n            GlobalFunction.getIntials(member.middleName) + ' ' +\n            member.lastName;\n\n        return (\n            <div \n                className='small-section mini-ticket-modal'\n                onClick={() => this.props.onSelectMember(member.cardNo)}>\n                <div className='text' />\n                <div className='text'>\n                    <div className='circle' style={{backgroundColor: '#3AB77D'}} />\n                    <div style={{display: 'inline-block'}}>\n                        <div className='header-2'>{member.cardNo}</div>\n                    </div>\n\n                </div>\n                \n                <div className='text'>{name}</div>\n                <div className='text'>{member.clientName}</div>\n                <div className='text'>{'---'}</div>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\nimport { CircularProgress } from \"@material-ui/core\";\n\ninterface IProps {\n    height?: string;\n    color?: string;\n    size?: number;\n}\n\nexport class Loading extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        return (\n            <div \n                style={{\n                    textAlign: 'center', \n                    paddingTop: this.props.height ? this.props.height : undefined}}>\n                <CircularProgress \n                    size={this.props.size}\n                    style={{\n                        color: this.props.color ? this.props.color : undefined}} />\n            </div>\n            \n        );\n    }\n}","import * as React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport Link from '@material-ui/core/Link';\n\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { GlobalFunction } from './GlobalFunction';\nimport { MemberData, TicketData, PartialMemberData, SimpleTicketData, BenefitData } from 'Pages/CustomerCarePage/Models';\nimport { TextButton } from './Components/TextButton';\nimport { SearchedMembersList } from './CreateTicketPage/Components/SearchedMembersList';\nimport { API } from './API';\nimport { TableRow, TableCell } from '@material-ui/core';\nimport { Loading } from './Components/Loading';\nimport { Processmaker } from 'Pages/TicketList/Processmaker';\n\ninterface IProps {\n    member?: MemberData;\n    ticket?: TicketData;\n    ticketStatus: 'Create' | 'Update' | 'Resolve';\n    onUpdateMemberStateChange: (member?: MemberData) => void;\n\n    promptChooseMember?: boolean;\n    disableRecentTickets?: boolean;\n}\n\ninterface IStates {\n    searchText: string;\n    isMembersLoaded: boolean;\n    recentTickets?: SimpleTicketData[];\n    loadingMembers: boolean;\n    loadingMember: boolean;\n    loadingBenefits: boolean;\n    loadingRecentTickets: boolean;\n}\n\nexport class MemberDataSection extends React.Component<IProps, IStates> {\n\n    members: PartialMemberData[];\n    benefits: BenefitData[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            searchText: '',\n            isMembersLoaded: false,\n            loadingMembers: false,\n            loadingMember: false,\n            loadingBenefits: false,\n            loadingRecentTickets: false\n        };\n\n        this.members = [];\n        this.benefits = [];\n    }\n\n    getMemberData = (cardNo: string) => {\n        API.get('customer-care/members/' + cardNo, \n            (response) => {\n                console.log(response);\n                const member = {\n                    cardNo: response.member_card_no,\n                    firstName: response.first_name,\n                    middleName: response.middle_name,\n                    lastName: response.last_name,\n                    clientName: response.client.registered_name,\n                    birthDate: new Date(response.date_of_birth),\n                    gender: response.gender,\n                    civilStatus: response.civil_status,\n                    contractId: response.active_contract._id,\n                    isVip: response.is_vip\n                };\n                this.props.onUpdateMemberStateChange(member);\n                console.log(this.members);\n\n                /* Get member's benefits */\n                this.setState({loadingBenefits: true});\n                API.get(`customer-care/members/${cardNo}/benefits`,\n                    (response) => {\n                        this.benefits = this.combineNodes(\n                            response.filter(benefit => benefit.level == 6),\n                            response.filter(benefit => benefit.level == 7)\n                        ).map(benefit => {\n                            return {\n                                category: benefit.parent_name,\n                                name: benefit.name,\n                                ...(benefit.limits.length > 0 ? \n                                    {\n                                        limitType: benefit.limits[0].type,\n                                        limit: benefit.limits[0].limit,\n                                        limitUnit: benefit.limits[0].limit_unit\n                                    } : undefined)\n                            }\n                        });\n                        console.log('SHOW', this.benefits);\n                        this.setState({loadingBenefits: false});\n                    },\n                    (error) => {\n                        console.log(error);\n                        this.setState({loadingBenefits: false});\n                    });\n\n                /* Get Recent Tickets */\n                this.getRecentTicketsData(cardNo);\n                this.setState({loadingMember: false});\n            },\n            (error) => {\n                console.log(error);\n            });\n    }\n\n    combineNodes = (parentNodes, childNodes) => {\n        const nodes = parentNodes.reduce ((result, parent) => {\n            parent.children.map ((child) => {\n            let foundChild = childNodes.find ((childNode) => child === childNode._id);\n        \n            if (foundChild) {\n                let child = Object.assign({}, foundChild);\n        \n                child['parent_name'] = parent.name;\n                child['parent_code'] = parent.code;\n                child['disabled'] = false;\n                result.push(child);\n            }\n            });\n        \n            return result;\n        }, new Array());\n        \n        return nodes;\n    };\n\n    getRecentTicketsData = (cardNo: string) => {\n        if (!this.state.loadingRecentTickets) {\n            this.setState({loadingRecentTickets: true});\n        }\n        \n        API.get('customer-care/tickets',\n            (tickets) => {\n                const recentTickets = tickets.filter(ticket => ticket.member_id === cardNo);\n                if (recentTickets) {\n                    recentTickets.map(ticket => {\n                        Processmaker.get('cases/participated',\n                            (cases) => {\n                                const matchedCase = cases.filter(caseItem => caseItem.app_uid === ticket.pmaker_case_uid)[0];\n                                if (matchedCase && this.state.recentTickets) {\n                                    this.state.recentTickets.push({\n                                        ticketNo: \n                                            GlobalFunction.generateTicketNumber(\n                                                ticket.ticket_category.ticket_type,\n                                                ticket.ticket_category.specific_type,\n                                                matchedCase.app_number\n                                            ),\n                                        specificType: ticket.ticket_category.specific_type !== 'Not Applicable' ? (\n                                            ticket.ticket_category.specific_type\n                                        ) : (\n                                            ticket.ticket_category.ticket_type\n                                        ),\n                                        lastUpdate: new Date(ticket.date_updated)\n                                    });\n                                    this.setState({\n                                        recentTickets: this.state.recentTickets,\n                                        loadingRecentTickets: false\n                                    });\n                                }\n                            },\n                            (error) => {\n                                console.log(error);\n                                this.setState({loadingRecentTickets: false});\n                            }\n                        );\n                    });\n                }\n            },\n            (error) => {\n                console.log(error);\n                this.setState({loadingRecentTickets: false});\n            }\n        );\n    }\n\n    sliceMemberID = (text: string) => {\n        const slicedText: string[] = [];\n        slicedText.push(text.slice(0, 2));\n        slicedText.push(text.slice(2, 4));\n        slicedText.push(text.slice(4, 9));\n        slicedText.push(text.slice(9, 14));\n        slicedText.push(text.slice(14));\n        return slicedText.filter(text => text !== '');\n    }\n\n    getBenefitsLimit = () => {\n        let limits: BenefitData[] = [];\n\n        this.benefits.forEach(benefit => {\n            let targetLimitIndex = -1;\n            limits.forEach((limit, index) => {\n                if (benefit.limitType && limit.limitType === benefit.limitType) {\n                    targetLimitIndex = index;\n                }\n            })\n            if (targetLimitIndex > -1) {\n                limits[targetLimitIndex].limit += benefit.limit;\n            } else {\n                limits.push({...benefit});\n            }\n        });\n\n        return limits.filter(benefit => benefit.limitType);\n    }\n\n\n\n\n\n\n\n\n    render(): JSX.Element {\n        return (\n            <div className='member-info'>\n                {this.props.ticketStatus === 'Create' ? (\n                    <div>\n                        {this.renderSearchArea()}\n                        <div className='line-border' />\n                    </div>\n                ) : this.props.ticketStatus === 'Update' ||\n                    this.props.ticketStatus === 'Resolve' ? (\n                    this.renderTopArea()\n                ) : (null)}\n                {this.props.member ? (\n                    this.renderMemberInfo(this.props.member)\n                ) : (\n                    <>\n                    {this.state.loadingMember ? (\n                        <Loading height='3rem' />\n                    ) : (null)}\n                    {this.props.promptChooseMember ? (\n                        <div className='section' style={{color: '#E53935'}}>\n                            Choose a member/client first before submitting the ticket.\n                        </div> \n                    ) : (null)}\n                    </>\n                )}\n                    \n                {this.props.ticket ? (\n                    this.renderTicketData(this.props.ticket)\n                ) : (null)}\n                <div className='section' />\n            </div>\n        );\n    }\n\n\n\n    renderSearchArea(): JSX.Element {\n        return (\n            <div className='section'>\n                <Breadcrumbs className='bread-crumbs'>\n                    <Link href='#/customer-care'>TICKETS</Link>\n                    <div className='current-text'>CREATE A TICKET</div>\n                </Breadcrumbs>\n\n                <div className='header-1'>Create Ticket</div>\n\n                <div style={{position: 'relative'}}>\n                    <InputField \n                        placeholder='Search Member/Client ID'\n                        value={this.state.searchText}\n                        onChange={(value: string) => {\n                            const trimmedValue = value.replace(/-/g, '');\n                            const splitValue = this.sliceMemberID(trimmedValue);\n                            const newValue = splitValue ? splitValue.join('-') : '';\n                            this.setState({searchText: newValue});\n\n                            if (trimmedValue.length >= 13) {\n                                this.setState({loadingMembers: true});\n                                API.get(`customer-care/members?` +\n                                    `filter[where][member_card_no][like]=${newValue}&` +\n                                    `filter[where][member_status][inq]=Active&` +\n                                    `filter[where][member_status][inq]=Cancelled&` +\n                                    `filter[where][member_status][inq]=Expired&` + \n                                    `filter[where][member_status][inq]=Suspended&` + \n                                    `filter[where][member_status][inq]=Terminated`,\n                                    (response) => {\n                                        console.log(response);\n                                        this.members = response.map(member => {\n                                            return {\n                                                cardNo: member.member_card_no,\n                                                firstName: member.first_name,\n                                                middleName: member.middle_name,\n                                                lastName: member.last_name,\n                                                clientName: member.client.registered_name,\n                                                isVip: member.is_vip\n                                            }\n                                        });\n                                        this.setState({\n                                            isMembersLoaded: true,\n                                            loadingMembers: false\n                                        });\n                                    },\n                                    (error) => {\n                                        console.log(error);\n                                        this.setState({\n                                            isMembersLoaded: true,\n                                            loadingMembers: false\n                                        });\n                                    });\n                            }\n                        }} />\n\n                    {this.state.loadingMembers ? (\n                        <div style={{position: 'absolute', right: '8px', bottom: '13px'}}>\n                            <Loading height='none' size={16}/>\n                        </div>\n                    ) : null}\n                </div>\n\n                <SearchedMembersList \n                    searchText={this.state.searchText}\n                    members={this.members}\n                    onSelectMember={(cardNo: string) => {\n                        this.getMemberData(cardNo);\n                        this.props.onUpdateMemberStateChange(undefined);\n                        this.setState({\n                            searchText: '',\n                            loadingMember: true,\n                            recentTickets: []\n                        });\n                    }} />\n\n                <TextButton \n                    icon={faSearch}\n                    label='Advanced Search'\n                    onClick={() => {\n\n                    }}\n                    />\n            </div>\n        );\n    }\n\n    renderTopArea(): JSX.Element {\n        return (\n            <div className='section'>\n                <Breadcrumbs className='bread-crumbs'>\n                    <Link href='#/customer-care'>TICKETS</Link>\n                    <Link className='current-text'>{this.props.ticketStatus.toUpperCase() + ' TICKET'}</Link>\n                </Breadcrumbs>\n\n                {this.props.ticket ? (\n                    <span className='header-1'>\n                        {`${this.props.ticketStatus} Ticket ${this.props.ticket.ticketNo}`}\n                    </span>\n                ) : null}\n                \n\n            </div>\n        );\n    }\n\n    renderMemberInfo(member: MemberData): JSX.Element {\n        console.log('benefits', this.benefits/*.filter(benefit => benefit.limitType !== 'None')*/);\n        if (!this.state.recentTickets && !this.props.disableRecentTickets) {\n            this.getRecentTicketsData(member.cardNo);\n            \n        }\n\n        const name = GlobalFunction.toNameFormat(\n            member.firstName,\n            member.middleName,\n            member.lastName\n        );\n        const birthDate = GlobalFunction.toShortDateString(new Date(member.birthDate));\n        const age = GlobalFunction.getAge(new Date(member.birthDate));\n        return (\n            <div className='section'>\n                <div className={member.isVip ? 'tag' : ''}>\n                    {member.isVip ? (\n                        <div className='tag-label'>VIP</div>\n                    ) : null}\n                    <div className='circle' style={{backgroundColor: '#3AB77D'}} />\n                    <div style={{display: 'inline-block'}}>\n                        <div className='header-2'>{member.cardNo}</div>\n                    </div>\n                    <div className='text'>{name}</div>\n                    <div className='text'>{member.clientName}</div>\n                    <div className='text'>{'---'}</div>\n                </div>\n                <Grid container>\n                    {this.state.loadingBenefits ? (\n                        <Grid item className='sub-section' xs={12}>\n                            <Loading height='2rem' />\n                        </Grid>\n                    ) : (\n                        this.getBenefitsLimit().map(benefit => {\n                            return (\n                                <Grid item className='sub-section' xs={6}>\n                                    <div className='light-text'>{`${benefit.limitType.toUpperCase()} LIMIT`}</div>\n                                    <div className='small-text'>{`${GlobalFunction.formatNumber(benefit.limit)} ${benefit.limitUnit}`}</div>\n                                </Grid>\n                            );\n                        })\n                    )}\n                </Grid>\n                <Grid container>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>BIRTHDATE (AGE)</div>\n                        <div className='small-text'>{birthDate + \" (\" + age + \")\"}</div>\n                    </Grid>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>GENDER / STATUS</div>\n                        <div className='small-text'>{member.gender + \" / \" + member.civilStatus}</div>\n                    </Grid>\n                </Grid>\n                <div>\n                    {this.state.loadingRecentTickets ? (\n                        <Loading height='2rem' />\n                    ) : (\n                        this.state.recentTickets && this.state.recentTickets.length > 0 ? (\n                            <>\n                            <div className='header-2'>OPEN/PENDING TICKETS</div>\n                            <CustomTable\n                                paginationClass='custom-pagination-small'\n                                className='custom-table-small'\n                                labelRowsPerPage='Rows:'\n                                rows={this.state.recentTickets}\n                                rowsPerPageOptions={[5, 10, 25]}\n                                renderHeader={() => this.renderTableHeader()}\n                                renderRow={(rowData: SimpleTicketData, index: number) =>\n                                    this.renderTableRow(rowData, index)} />\n                            </>\n                        ) : null\n                    )}\n                    \n                </div>\n            </div>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n        return (\n            <>\n            <TableCell style={{minWidth: '70px', fontSize: '10px'}}>Ticket ID</TableCell>\n            <TableCell style={{fontSize: '10px'}}>Type</TableCell>\n            <TableCell style={{minWidth: '90px', fontSize: '10px'}}>Last Update</TableCell>\n            </>\n        );\n    }\n\n    renderTableRow(recentTicket: SimpleTicketData, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n        return (\n            <TableRow style={{backgroundColor: backgroundColor, fontSize: '10px'}}>\n                <TableCell>{recentTicket.ticketNo}</TableCell>\n                <TableCell>{recentTicket.specificType}</TableCell>\n                <TableCell>{GlobalFunction.toShortDateString(recentTicket.lastUpdate)}</TableCell>\n            </TableRow>\n        );\n    }\n\n    renderTicketData(ticket: TicketData): JSX.Element {\n        return (\n            <div className='section'>\n                <div className='sub-section'>\n                    <div className='light-text'>TICKET TYPE</div>\n                    <div className='small-text'>{ticket.ticketType}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>SPECIFIC TYPE</div>\n                    <div className='small-text'>{ticket.specificType}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>URGENCY</div>\n                    <div className='small-text'>{ticket.urgency}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>ASSIGNED TO</div>\n                    <div className='small-text'>{ticket.agent.name}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>RECEIVED VIA</div>\n                    <div className='small-text'>{ticket.ticketSource}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>RECEIVED FROM</div>\n                    <div className='small-text'>{ticket.callerName}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>NUMBER/EMAIL</div>\n                    <div className='small-text'>{ticket.contactNo}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>CALL TRANSACTION NO.</div>\n                    <div className='small-text'>{ticket.transactionNo}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>CREATED BY</div>\n                    <div className='small-text'>{ticket.createdBy.name}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>DATE AND TIME CREATED</div>\n                    <div className='small-text'>{GlobalFunction.toDateAndTime(ticket.dateCreated)}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>DATE AND TIME LAST UPDATED</div>\n                    <div className='small-text'>{GlobalFunction.toDateAndTime(ticket.dateUpdated)}</div>\n                </div>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\nimport Select from 'react-select';\nimport { DropdownChoice } from '../Models';\nimport { Option } from 'react-select/src/filters';\n\ninterface IProps {\n    placeholder?: string;\n    disabled?: boolean;\n    value: DropdownChoice;\n    choices: DropdownChoice[];\n    error?: boolean;\n    onChange: (value: DropdownChoice) => void;\n}\n\ninterface IStates {\n    value: string;\n}\n\nexport class Dropdown extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            value: ''\n        }\n    }\n\n    shouldComponentUpdate(props: IProps, _state: any) {\n        return (\n            (this.props.placeholder !== props.placeholder) ||\n            (this.props.disabled !== props.disabled) ||\n            (this.props.value !== props.value) ||\n            (this.props.choices !== props.choices) ||\n            (this.props.error !== props.error)\n        );\n    }\n\n    render(): JSX.Element {\n\n        return (\n            <div className='dropdown'>\n                {this.props.placeholder ? (\n                    <div className={this.props.disabled ? 'text-disabled text' : 'text'}>\n                        {this.props.placeholder}\n                    </div>\n                ) : null}\n                \n                <Select\n                    className='actual-dropdown'\n                    classNamePrefix={this.props.error ? 'actual-dropdown-error' : 'actual-dropdown'}\n                    isDisabled={this.props.disabled ? this.props.disabled : false}\n                    value={this.props.value}\n                    options={this.props.choices} \n                    onInputChange={(value: string, _a) => {\n                        this.setState({value: value});\n                    }}\n                    noOptionsMessage={() => {\n                        return (\n                            this.props.choices.length === 0 ? (\n                                'Loading...'\n                            ) : (\n                                this.state.value.length < 3 ? (\n                                    'Enter at least 3 characters to search'\n                                ) : (\n                                    'No options'\n                                )\n                            )\n                        )\n                    }}\n                    filterOption={(option: Option, rawInput: string) => {\n                        const hasNoInput = (rawInput.length === 0);\n                        const choicesAreShort = (this.props.choices.length <= 20);\n                        const inputIsShort = (rawInput.length < 3);\n                        const isInputMatch = (option.label.toLowerCase().includes(rawInput.toLowerCase()));\n                        if (choicesAreShort) {\n                            if (hasNoInput) {\n                                return true;\n                            }\n                            return isInputMatch;\n                        } else {\n                            if (!inputIsShort) {\n                                return isInputMatch;\n                            }\n                            return false;\n                        }\n                    }}\n                    onChange={(choice: DropdownChoice) => {\n                        this.props.onChange(choice);\n                    }} />\n                    \n            </div>\n        );\n    }\n}","import * as React from 'react';\n// import { Select, MenuItem } from '@material-ui/core';\nimport Select from 'react-select';\nimport './component-style.scss';\nimport { DropdownChoice } from '../Models';\nimport { Option } from 'react-select/src/filters';\n\ninterface IProps {\n    placeholder?: string;\n    disabled?: boolean;\n    detail?: string;\n    value: DropdownChoice;\n    choices: DropdownChoice[];\n    error?: boolean;\n    onChange: (value: DropdownChoice) => void;\n}\n\ninterface IStates {\n    value: string;\n}\n\nexport class DetailedDropdown extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            value: ''\n        }\n    }\n\n    shouldComponentUpdate(props: IProps, _state: IStates) {\n        return (\n            this.props.choices.length !== props.choices.length ||\n            this.props.value.value !== props.value.value\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='detailed-dropdown'>\n                {this.props.placeholder ? (\n                    <div className='text'>{this.props.placeholder}</div>\n                ) : null}\n                \n                <div className='autocomplete'>\n                    <div className={\n                        this.props.disabled ? 'detail-disabled' :\n                        this.props.error ? 'detail-error' : 'detail'}>\n                        {this.props.detail ? this.props.detail : this.props.value.value ? this.props.value.value : null}\n                    </div>\n                    <Select\n                        className='actual-dropdown'\n                        classNamePrefix={this.props.error ? 'actual-dropdown-error' : 'actual-dropdown'}\n                        isDisabled={this.props.disabled ? this.props.disabled : false}\n                        value={this.props.value}\n                        options={this.props.choices} \n                        onInputChange={(value: string, _a) => {\n                            this.setState({value: value});\n                        }}\n                        noOptionsMessage={() => {\n                            return (\n                                this.props.choices.length === 0 ? (\n                                    'Loading...'\n                                ) : (\n                                    this.state.value.length < 3 ? (\n                                        'Enter at least 3 characters to search'\n                                    ) : (\n                                        'No options'\n                                    )\n                                )\n                            )\n                        }}\n                        filterOption={(option: Option, rawInput: string) => {\n                            const hasNoInput = (rawInput.length === 0);\n                            const choicesAreShort = (this.props.choices.length <= 20);\n                            const inputIsShort = (rawInput.length < 3);\n                            const isInputMatch = (option.label.toLowerCase().includes(rawInput.toLowerCase()));\n                            if (choicesAreShort) {\n                                if (hasNoInput) {\n                                    return true;\n                                }\n                                return isInputMatch;\n                            } else {\n                                if (!inputIsShort) {\n                                    return isInputMatch;\n                                }\n                            }\n                            return false;                            \n                        }}\n                        onChange={(choice: DropdownChoice) => {\n                            this.props.onChange(choice);\n                        }} />\n                </div>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\n// import { GlobalFunction } from '../GlobalFunction';\n\ninterface IProps {\n    placeholder?: string;\n    value: number;\n    detail: string;\n    error?: boolean;\n    onChange: (value: number) => void;\n\n    isFloat?: boolean;\n}\n\ninterface IStates {\n    // isEditing: boolean;\n    value: string;\n}\n\nexport class DetailedNumberField extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            // isEditing: false\n            value: this.props.value.toString()\n        }\n    }\n\n    componentWillReceiveProps(props: IProps) {\n        let targetNewValue = props.value ? props.value.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,') : '';\n\n        if (targetNewValue.charAt(targetNewValue.length - 4) === '.') {\n            targetNewValue = props.value.toFixed(2).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\n        }\n\n        if (targetNewValue !== this.state.value) {\n            this.setState({value: \n                this.props.isFloat && this.state.value.charAt(this.state.value.length - 1) === '.' ?\n                    `${targetNewValue}.` :\n                    targetNewValue});\n        }\n    }\n\n    render(): JSX.Element {\n        const dynamicStyle = {\n            borderColor: (this.props.error ? '#E53935' : undefined)\n        };\n\n        return (\n            <div className='detailed-input-field'>\n                {this.props.placeholder ? (\n                    <div className='text'>{this.props.placeholder}</div>\n                ) : null}\n                <div className='input-field'>\n                    <input\n                        className='text-field'\n                        style={dynamicStyle}\n                        value={this.state.value}\n                        onFocus={() => {\n                            if (this.props.value == 0) {\n                                this.setState({value: ''});\n                            }\n                        }}\n                        onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                            let value = event.target.value;\n                            let numberValue = parseFloat(value.replace(/,|-/g, ''));\n                            if (!isNaN(numberValue)) {\n                                numberValue = numberValue < 1000000000 ? numberValue : this.props.value;\n                            }\n                            let stringValue = !isNaN(numberValue) ? (\n                                this.props.isFloat && value.charAt(value.length - 1) === '.' ?\n                                    `${numberValue}.` :\n                                    numberValue.toString()\n                            ) : '';\n                            const newStringValue = stringValue.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n                            this.setState({value: newStringValue}, () => {\n                                if (this.props.isFloat) {\n                                    this.props.onChange(!isNaN(numberValue) ? numberValue : 0);\n                                } else {\n                                    this.props.onChange(!isNaN(numberValue) ? numberValue : 0);\n                                }\n                            });\n                        }} />\n                    <div className={this.props.error ? 'detail-error' : 'detail'}>\n                        {this.props.detail}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\nimport MomentUtils from '@date-io/moment';\nimport { KeyboardDatePicker, MuiPickersUtilsProvider, MaterialUiPickersDate } from '@material-ui/pickers';\n\ninterface IProps {\n    placeholder?: string;\n    value: Date | null;\n    minDate?: Date;\n    disabled?: boolean;\n    onChange: (value: Date | null) => void;\n}\n\nexport class DatePicker extends React.Component<IProps> {\n\n    shouldComponentUpdate(props: IProps, _state: any) {\n        return (\n            (this.props.placeholder !== props.placeholder) ||\n            (this.props.value !== props.value)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='date-picker'>\n                {this.props.placeholder ? (\n                    <div className='text'>{this.props.placeholder}</div>\n                ) : null}\n                <MuiPickersUtilsProvider utils={MomentUtils}>\n                    <KeyboardDatePicker\n                        className={this.props.disabled ? 'text-field-disabled text-field' : 'text-field'}\n                        disabled={this.props.disabled}\n                        variant='dialog'\n                        format='MM/DD/YYYY'\n                        minDate={this.props.minDate ? this.props.minDate : new Date(1900, 1, 1)}\n                        value={this.props.value}\n                        onChange={(date: MaterialUiPickersDate | null) => {\n                            this.props.onChange(date ? date.toDate() : null);\n                        }} />\n                </MuiPickersUtilsProvider>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { DetailedDropdown } from 'Pages/CustomerCarePage/Components/DetailedDropdown';\nimport { DetailedNumberField } from 'Pages/CustomerCarePage/Components/DetailedNumberField';\nimport { DatePicker } from 'Pages/CustomerCarePage/Components/DatePicker';\nimport { DropdownChoice, ConfinementDetails } from 'Pages/CustomerCarePage/Models';\n\n\ninterface IProps {\n    confinement: ConfinementDetails;\n    facilities: DropdownChoice[];\n    doctors: DropdownChoice[];\n    cptCodes: DropdownChoice[];\n    createTicketAttemp: boolean;\n    refreshConfinementState: () => void;\n}\n\nexport class ConfinementSection extends React.Component<IProps> {\n\n    confinementTypes: DropdownChoice[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.confinementTypes = [\n            { value: '1', label: 'Elective / Scheduled' },\n            { value: '2', label: 'ER leading to confinement' }\n        ];\n    }\n\n    render(): JSX.Element {\n        const confinement = this.props.confinement;\n        return (\n            <div className='confinement-details'>\n                <div className='sub-section'>\n                    <div className='header-2'>CONFINEMENT DETAILS</div>\n                    <DetailedDropdown \n                        choices={this.props.facilities}\n                        placeholder='Provider'\n                        value={confinement.provider}\n                        error={\n                            this.props.createTicketAttemp && \n                            confinement.provider.value === ''}\n                        onChange={(value: DropdownChoice) => {\n                            this.props.confinement.provider = value;\n                            this.props.refreshConfinementState();\n                        }} />\n                    <Grid container spacing={1}>\n                        <Grid item xs={6}>\n                            <DatePicker \n                                placeholder='Date Admitted' \n                                value={confinement.dateAdmitted}\n                                onChange={(value: Date) => {\n                                    this.props.confinement.dateAdmitted = value;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Dropdown \n                                placeholder='Kind of Confinement' \n                                choices={this.confinementTypes}\n                                value={{ value: '', label: confinement.confinementKind}}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    confinement.confinementKind === ''}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.confinement.confinementKind = value.label;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={3}>\n                            <InputField \n                                placeholder='Room Type' \n                                value={confinement.roomType}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    confinement.roomType === ''}\n                                onChange={(value: string) => {\n                                    this.props.confinement.roomType = value;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={3}>\n                            <DetailedNumberField \n                                placeholder='Cost Per Day' \n                                value={confinement.costPerDay}\n                                detail={'PHP'}\n                                isFloat={true}\n                                onChange={(value: number) => {\n                                    this.props.confinement.costPerDay = value;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Dropdown  \n                                placeholder='Admitting Physician' \n                                choices={this.props.doctors}\n                                value={confinement.doctor}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    confinement.doctor.value === ''}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.confinement.doctor = value;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <DetailedDropdown \n                                placeholder='Initial Diagnosis' \n                                choices={this.props.cptCodes}\n                                value={confinement.initialDiagnosis}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    confinement.initialDiagnosis.value === ''}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.confinement.initialDiagnosis = value;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={3}>\n                            <DetailedNumberField \n                                placeholder='Amount' \n                                value={confinement.amount}\n                                detail={'PHP'}\n                                isFloat={true}\n                                onChange={(value: number) => {\n                                    this.props.confinement.amount = value;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </Grid>\n                    </Grid>\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\n// import { GlobalFunction } from '../GlobalFunction';\n\ninterface IProps {\n    value: number;\n    onChange: (value: number) => void;\n\n    placeholder?: string;\n    error?: boolean;\n    isFloat?: boolean;\n    disableDelimiter?: boolean;\n}\n\ninterface IStates {\n    // isEditing: boolean;\n    value: string;\n}\n\nexport class NumberField extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            // isEditing: false,\n            value: this.props.value.toString()\n        }\n    }\n\n    componentWillReceiveProps(props: IProps) {\n        let targetNewValue = props.value ? (\n            !this.props.disableDelimiter ? \n                props.value.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,') : \n                props.value.toString()) : '';\n\n        if (targetNewValue.charAt(targetNewValue.length - 4) === '.') {\n            targetNewValue = props.value.toFixed(2).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\n        }\n\n        if (targetNewValue !== this.state.value) {\n            this.setState({value: \n                this.props.isFloat && this.state.value.charAt(this.state.value.length - 1) === '.' ?\n                    `${targetNewValue}.` :\n                    targetNewValue});\n        }\n    }\n\n    render(): JSX.Element {\n        console.log(this.props.value);\n        const props = this.props;\n        const dynamicStyle = {\n            borderColor: (props.error ? '#E53935' : undefined)\n        };\n\n        return (\n            <div className='input-field-container'>\n                {this.props.placeholder ? (\n                    <div className='text'>{this.props.placeholder}</div>\n                ) : null}\n                <input\n                    className='text-field'\n                    style={dynamicStyle}\n                    value={this.state.value} \n                    onFocus={() => {\n                        if (this.props.value == 0) {\n                            this.setState({value: ''});\n                        }\n                    }}\n                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                        let value = event.target.value;\n                        let numberValue = parseFloat(value.replace(/,|-/g, ''));\n                        if (!isNaN(numberValue)) {\n                            numberValue = numberValue < 1000000000 ? numberValue : this.props.value;\n                        }\n                        let stringValue = !isNaN(numberValue) ? (\n                            this.props.isFloat && value.charAt(value.length - 1) === '.' ?\n                                `${numberValue}.` :\n                                numberValue.toString()\n                        ) : '';\n                        const newStringValue = stringValue.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n                        this.setState({value: this.props.disableDelimiter ? numberValue.toString() : newStringValue}, () => {\n                            if (this.props.isFloat) {\n                                this.props.onChange(!isNaN(numberValue) ? numberValue : 0);\n                            } else {\n                                this.props.onChange(!isNaN(numberValue) ? numberValue : 0);\n                            }\n                        });\n                    }} />\n                {/* {this.state.isEditing ? (\n                    <input \n                        className='text-field'\n                        style={dynamicStyle}\n                        type='number'\n                        value={this.props.value ? this.props.value : NaN}\n                        onBlur={() => this.setState({isEditing: !this.state.isEditing})}\n                        onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                            const value = this.props.isFloat ? \n                                (parseFloat(event.target.value)) : \n                                (parseInt(event.target.value));\n                            this.props.onChange(value);\n                        }} />\n                ) : (\n                    <input \n                        className='text-field'\n                        style={dynamicStyle}\n                        readOnly \n                        value={\n                            this.props.value && this.props.value !== 0 ? \n                                GlobalFunction.formatNumber(this.props.value) \n                            : ''}\n                        onFocus={() => this.setState({isEditing: !this.state.isEditing})} />\n                )} */}\n                \n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\nimport { Checkbox } from '@material-ui/core';\n\ninterface IProps {\n    placeholder?: string;\n    label?: string;\n    value: boolean;\n    onChange: (value: boolean) => void;\n}\n\nexport class CustomCheckbox extends React.Component<IProps> {\n\n    shouldComponentUpdate(props: IProps, _state: any) {\n        return (\n            (this.props.placeholder !== props.placeholder) ||\n            (this.props.value !== props.value)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='check-box-area'>\n                {this.props.placeholder ? (\n                    <div className='text'>{this.props.placeholder}</div>\n                ) : null}\n                <Checkbox\n                    className='check-box'\n                    checked={this.props.value}\n                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                        this.props.onChange(event.target.checked);\n                    }} />\n                {this.props.label ? (\n                    <span className='text'>{this.props.label}</span>\n                ) : null}\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport {  Grid, TableCell, TableRow } from '@material-ui/core';\nimport { faMinusCircle, faPlus, faPen, faCheckCircle, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport { DetailedDropdown } from 'Pages/CustomerCarePage/Components/DetailedDropdown';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { ProcedureData, DropdownChoice, AvailmentDetails, DiagnosisData } from 'Pages/CustomerCarePage/Models';\nimport { NumberField } from 'Pages/CustomerCarePage/Components/NumberField';\nimport { CustomCheckbox } from 'Pages/CustomerCarePage/Components/CustomCheckbox';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\n\ninterface IProps {\n    availment: AvailmentDetails;\n    facilities: DropdownChoice[];\n    doctors: DropdownChoice[];\n    icd10Codes: DropdownChoice[];\n    cptCodes: DropdownChoice[];\n    createTicketAttemp: boolean;\n    refreshAvailmentState: () => void;\n}\n\ninterface IStates {\n    icd10Code: DropdownChoice;\n    doctor: DropdownChoice;\n\n    itemToEditIndex: number;\n    icd10CodeToEdit: DropdownChoice;\n    doctorToEdit: DropdownChoice;\n}\n\nexport class AvailmentSection extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            icd10Code: { value: '', label: '' },\n            doctor: { value: '', label: '' },\n\n            itemToEditIndex: -1,\n            icd10CodeToEdit: { value: '', label: '' },\n            doctorToEdit: { value: '', label: '' }\n        };\n    }\n\n    getFilteredICD10(): DropdownChoice[] {\n        let filteredICD10: DropdownChoice[] = [];\n        for (var i = 0; i < this.props.icd10Codes.length; i++) {\n            let isSame = false;\n            for (var j = 0; j < this.props.availment.diagnoses.length; j++) {\n                isSame = (\n                    this.props.availment.diagnoses[j].icd10Code.value === \n                    this.props.icd10Codes[i].value ? true : isSame);\n            }\n            if (!isSame) {\n                filteredICD10 = filteredICD10.concat(this.props.icd10Codes[i]);\n            }\n        }\n        return filteredICD10;\n    }\n\n    getProcedureCosts(procedures: ProcedureData[]) {\n        let totalCost = 0;\n        procedures.map(procedure => {\n            totalCost += procedure.amount;\n        });\n        return totalCost;\n    }\n    \n    pushBlankDiagnosis(icd10Code: DropdownChoice, doctor: DropdownChoice) {\n        this.props.availment.diagnoses.push({\n            icd10Code: icd10Code,\n            remarks: '',\n            isPrimary: false,\n            isFinal: false,\n            doctors: [{\n                id: '',\n                name: doctor.label,\n                specialization: '',\n                type: 'Admitting',\n                fee: 0,\n                noOfVisits: 0,\n                remarks: ''\n            }],\n            procedures: [{\n                cptCode: { value: '', label: '' },\n                isPHIC: false,\n                amount: 0,\n                notes: '',\n                assessmentType: 'Pending',\n                assessmentRemarks: '',\n                doctor: '',\n                dateAdded: new Date()\n            }],\n            assessmentType: 'Pending',\n            assessmentRemarks: ''\n        });\n    }\n\n    pushBlankProcedures(diagnosisIndex: number) {\n        this.props.availment.diagnoses[diagnosisIndex].procedures.push({\n            cptCode: { value: '', label: '' },\n            isPHIC: false,\n            amount: 0,\n            notes: '',\n            assessmentType: 'Pending',\n            assessmentRemarks: '',\n            doctor: '',\n            dateAdded: new Date()\n        });\n    }\n\n    render(): JSX.Element {\n        console.log(\"UPDATING\");\n        return (\n            <div className='availment-section'>\n                <div className='sub-section'>\n                    <div className='header-2'>AVAILMENT DETAILS</div>\n                    <DetailedDropdown \n                        choices={this.props.facilities}\n                        placeholder='Provider'\n                        value={this.props.availment.provider}\n                        error={\n                            this.props.createTicketAttemp && \n                            this.props.availment.provider.value === ''}\n                        onChange={(value: DropdownChoice) => {\n                            this.props.availment.provider = value;\n                            this.props.refreshAvailmentState();\n                        }} />\n                </div>\n                <div className='sub-section'>\n                    <div className='header-3'>LIST OF AVAILMENTS</div>\n                    <div className='text'>\n                        Add a diagnosis first then add procedures per diagnosis after\n                    </div>\n                    <div className='sub-section'>\n                        <CustomTable\n                            rows={this.props.availment.diagnoses}\n                            renderHeader={() => this.renderTableHeader()}\n                            renderRow={(rowData: any, index: number) => \n                                this.renderTableRow(rowData, index)} />\n                    </div>\n                    {this.props.createTicketAttemp && this.props.availment.diagnoses.length === 0 ? (\n                        <div className='sub-section' style={{color: '#E53935'}}>\n                            No diagnosis. Need atleast one diagnosis.\n                        </div> \n                    ) : (null)}\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n        return (\n            <>\n            <TableCell style={{minWidth: '300px', maxWidth: '300px'}}>\n                <DetailedDropdown \n                    choices={this.getFilteredICD10()}\n                    value={this.state.icd10Code}\n                    onChange={(value: DropdownChoice) => {\n                        this.setState({icd10Code: value});\n                    }} />\n            </TableCell>\n            <TableCell style={{minWidth: '150px', maxWidth: '150px'}}>\n                <Dropdown \n                    choices={this.props.doctors}\n                    value={this.state.doctor}\n                    onChange={(value: DropdownChoice) => {\n                        this.setState({doctor: value});\n                    }} />\n            </TableCell>\n            <TableCell style={{textAlign: 'center'}}>\n                <TextButton \n                    icon={faPlus} \n                    label=\"Add diagnosis\"\n                    onClick={() => {\n                        if (this.state.doctor.value !== '' && this.state.icd10Code.value !== '') {\n                            this.pushBlankDiagnosis(this.state.icd10Code, this.state.doctor);\n                            this.props.refreshAvailmentState();\n                            this.setState({\n                                icd10Code: { value: '', label: '' },\n                                doctor: { value: '', label: '' }\n                            });\n                        }\n                    }} />\n            </TableCell>\n            </>\n        );\n    }\n\n    renderTableRow(diagnosis: DiagnosisData, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n        const editIcon = { display: 'inline-block', paddingRight: '0.5rem' };\n        const deleteIcon = { display: 'inline-block' };\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                <TableCell colSpan={3}>\n                    <Grid container spacing={1}>\n                        {this.state.itemToEditIndex === index ? (\n                            <>\n                            <Grid item xs={6}>\n                                <DetailedDropdown \n                                    choices={this.getFilteredICD10()}\n                                    value={this.state.icd10CodeToEdit}\n                                    onChange={(value: DropdownChoice) => {\n                                        this.setState({icd10CodeToEdit: value});\n                                    }} />\n                            </Grid>\n                            <Grid item xs={5}>\n                                <Dropdown \n                                    choices={this.props.doctors}\n                                    value={this.state.doctorToEdit}\n                                    onChange={(value: DropdownChoice) => {\n                                        this.setState({doctorToEdit: value});\n                                    }} />\n                            </Grid>\n                            <Grid item xs={1} style={{lineHeight: '2rem'}}>\n                                <div style={editIcon}>\n                                    <IconButton\n                                        icon={faCheckCircle}\n                                        onClick={() => {\n                                            this.props.availment.diagnoses[index].icd10Code = this.state.icd10CodeToEdit;\n                                            this.props.availment.diagnoses[index].doctors[0].name = this.state.doctorToEdit.label;\n                                            this.props.refreshAvailmentState();\n                                            this.setState({itemToEditIndex: -1});\n                                        }}/>\n                                </div>\n                                <div style={deleteIcon}>\n                                    <IconButton\n                                        icon={faTimesCircle}\n                                        onClick={() => {\n                                            this.setState({itemToEditIndex: -1});\n                                        }}/>\n                                </div>\n                            </Grid>\n                            </>\n                        ) : (\n                            <>\n                            <Grid item xs={6} className='header-2'>\n                                {diagnosis.icd10Code.value + ' - ' + diagnosis.icd10Code.label}\n                            </Grid>\n                            <Grid item xs={3} className='header-2'>\n                                {diagnosis.doctors[0].name}\n                            </Grid>\n                            <Grid item xs={2} className='header-2'>\n                                {GlobalFunction.formatNumber(this.getProcedureCosts(diagnosis.procedures), true) + \" PHP\"}\n                            </Grid>\n                            <Grid item xs={1}>\n                                {/* <div style={editIcon}> */}\n                                    <IconButton\n                                        icon={faPen}\n                                        onClick={() => {\n                                            this.setState({\n                                                itemToEditIndex: index,\n                                                icd10CodeToEdit: diagnosis.icd10Code,\n                                                doctorToEdit: {\n                                                    value: diagnosis.doctors[0].id,\n                                                    label: diagnosis.doctors[0].name\n                                                }\n                                            });\n                                        }}/>\n                                {/* </div>\n                                <div style={deleteIcon}> */}\n                                    <IconButton\n                                        icon={faMinusCircle}\n                                        onClick={() => {\n                                            this.props.availment.diagnoses.splice(index, 1);\n                                            this.props.refreshAvailmentState();\n                                        }}/>\n                                {/* </div> */}\n                            </Grid>\n                            </>\n                        )}\n                    </Grid>\n                    {diagnosis.procedures.map((procedure, procedureIndex) => {\n                        return this.renderProcedureDetails(procedure, index, procedureIndex);\n                    })}\n                </TableCell>\n            </TableRow>\n        );\n    }\n    \n    renderProcedureDetails(procedure: ProcedureData, diagnosisIndex: number, index: number): JSX.Element {\n        const stateProcedure = this.props.availment.diagnoses[diagnosisIndex].procedures[index];\n        const stateProcedures = this.props.availment.diagnoses[diagnosisIndex].procedures;\n        return (\n            <div style={{position: 'relative'}}>\n                <div style={{paddingTop: '0.5rem'}} />\n                <div className='line-border' />\n                <div style={{paddingTop: '0.5rem'}} />\n                <Grid container spacing={2}>\n                    <Grid item xs={8}>\n                        <DetailedDropdown \n                            placeholder='Procedure'\n                            choices={this.props.cptCodes}\n                            value={procedure.cptCode}\n                            onChange={(value: DropdownChoice) => {\n                                stateProcedure.cptCode = value;\n                                if (index === (stateProcedures.length - 1)) {\n                                    this.pushBlankProcedures(diagnosisIndex);\n                                }\n                                this.props.refreshAvailmentState();\n                            }} />\n                    </Grid>\n                    <Grid item xs={3}>\n                        <NumberField\n                            placeholder='Amount'\n                            value={procedure.amount}\n                            onChange={(value: number) => {\n                                stateProcedure.amount = value;\n                                this.props.refreshAvailmentState();\n                            }} />\n                    </Grid>\n                    <Grid item xs={1}>\n                        <CustomCheckbox\n                            placeholder='PHIC'\n                            value={procedure.isPHIC}\n                            onChange={(value: boolean) => {\n                                stateProcedure.isPHIC = value;\n                                this.props.refreshAvailmentState();\n                            }} />\n                    </Grid>\n                </Grid>\n                <div style={{position: 'absolute'}}>\n                    <TextButton \n                        label='Add procedure'\n                        icon={faPlus}\n                        onClick={() => {\n                            this.pushBlankProcedures(diagnosisIndex);\n                            this.props.refreshAvailmentState();\n                        }}/>\n                </div>\n                <div style={{paddingTop: '1rem'}} />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport Dropzone from 'react-dropzone';\nimport './component-style.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFileUpload } from '@fortawesome/free-solid-svg-icons';\n\ninterface IProps {\n    placeholder?: string;\n    accept?: string;\n    onDrop: (files: File[]) => void;\n}\n\nexport class CustomDropzone extends React.Component<IProps> {\n\n    shouldComponentUpdate(props: IProps, _state: any) {\n        return (this.props.placeholder !== props.placeholder);\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='custom-uploader'>\n                {this.props.placeholder ? (\n                    <div className='text'>{this.props.placeholder}</div>\n                ) : (null)}\n                <div className='upload-box'>\n                    <Dropzone\n                        multiple={false}\n                        onDrop={acceptedFiles => this.props.onDrop(acceptedFiles)}\n                        accept={this.props.accept}\n                        // accept=\"application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n                        >\n                        {({getRootProps, getInputProps}) => (\n                            <section>\n                                <div className='upload-file' {...getRootProps()}>\n                                    <input {...getInputProps()} />\n                                    <FontAwesomeIcon className='fa-1.5x' icon={faFileUpload} />\n                                    <div>Drag or drop file to upload a <br />supporting document</div>\n                                </div>\n                            </section>\n                        )}\n                    </Dropzone>\n                </div>\n                \n\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { TextareaAutosize } from '@material-ui/core';\nimport './component-style.scss';\n\ninterface IProps {\n    placeholder?: string;\n    value: string;\n    defaultRows?: number;\n    onChange: (value: string) => void;\n}\n\nexport class InputArea extends React.Component<IProps> {\n\n    shouldComponentUpdate(props: IProps, _state: any) {\n        return (\n            (this.props.placeholder !== props.placeholder) ||\n            (this.props.value !== props.value) ||\n            (this.props.defaultRows !== props.defaultRows)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='input-field-container'>\n                {this.props.placeholder ? (\n                    <div className='text'>{this.props.placeholder}</div>\n                ) : null}\n                <TextareaAutosize \n                    className='text-field'\n                    rows={this.props.defaultRows ? this.props.defaultRows : 4}\n                    value={this.props.value}\n                    onChange={(event: React.ChangeEvent<HTMLTextAreaElement>) => {\n                        this.props.onChange(event.target.value);\n                    }}\n                />\n            </div>\n        );\n    }\n}","\nimport * as React from 'react';\nimport './component-style.scss';\nimport { Chip } from '@material-ui/core';\n\ninterface IProps {\n    label: string;\n    value: string;\n    onDelete: (value: string) => void;\n}\n\nexport class CustomChip extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        return (\n            <Chip \n                className='chip'\n                label={this.props.label} \n                onDelete={() => {this.props.onDelete(this.props.value)}} />\n        );\n    }\n}","import * as React from 'react';\nimport {  Grid } from '@material-ui/core';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { TicketData, DropdownChoice } from 'Pages/CustomerCarePage/Models';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { CustomDropzone } from 'Pages/CustomerCarePage/Components/CustomDropzone';\nimport { InputArea } from 'Pages/CustomerCarePage/Components/InputArea';\nimport { CustomChip } from 'Pages/CustomerCarePage/Components/CustomChip';\n\ninterface IProps {\n    ticket: TicketData;\n    facilities: DropdownChoice[];\n    agents: DropdownChoice[];\n    createTicketAttemp: boolean;\n    refreshTicketState: () => void;\n}\nexport class TicketInfoSection extends React.Component<IProps> {\n\n    ticketChannels: DropdownChoice[];\n    ticketSources: DropdownChoice[];\n    ticketTypes: DropdownChoice[];\n    specificTypes: DropdownChoice[];\n    urgencies: DropdownChoice[];\n    agents: DropdownChoice[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.ticketChannels = [\n            { value: '1', label: 'Call' },\n            { value: '2', label: 'SMS' },\n            { value: '3', label: 'Text' },\n            { value: '4', label: 'Email' },\n            { value: '5', label: 'Walk-in' }\n        ];\n\n        this.ticketSources = [\n            { value: '1', label: 'Member' },\n            { value: '2', label: 'Corporate Client' },\n            { value: '3', label: 'Broker' },\n            { value: '4', label: 'Agent' },\n            { value: '5', label: 'Clinic/Hospital' }\n        ];\n\n        this.ticketTypes = [\n            { value: '1', label: 'Availment' },\n            { value: '2', label: 'Inquiry' }\n        ];\n\n        this.specificTypes = [\n            { value: '1', label: 'Outpatient Procedure' },\n            { value: '2', label: 'Inpatient' },\n            { value: '3', label: 'Emergency Room' },\n            { value: '4', label: 'Consultation' }\n        ];\n\n        this.urgencies = [\n            { value: '1', label: 'Low' },\n            { value: '2', label: 'Medium' },\n            { value: '3', label: 'High' }\n        ];\n\n        this.agents = [\n            { value: '', label: 'Me' }\n        ]\n    }\n\n    componentDidMount() {\n        this.agents[0].value = localStorage['user_id'];\n    }\n\n    render(): JSX.Element {\n        console.log(\"TICK INFO\");\n        const ticket = this.props.ticket;\n\n        return (\n            <div className='ticket-info'>\n                <div className='sub-section'>\n                    <div className='header-2'>TICKET INFORMATION</div>\n                    <Grid container spacing={1}>\n                        <Grid item xs={5}>\n                            <Dropdown \n                                placeholder='Received via'\n                                choices={this.ticketChannels}\n                                value={{ value: '', label: ticket.ticketChannel }}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    ticket.ticketChannel === ''}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.ticket.ticketChannel = value.label;\n                                    this.props.refreshTicketState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={7}>\n                            <InputField \n                                placeholder='Transaction No.' \n                                value={ticket.transactionNo}\n                                disabled={true}\n                                onChange={(value: string) => {\n                                    this.props.ticket.transactionNo = value;\n                                    this.props.refreshTicketState();\n                                }} />\n                        </Grid>\n                    </Grid>\n                    <Dropdown \n                        placeholder='Received From'\n                        choices={this.ticketSources}\n                        value={{ value: '', label: ticket.ticketSource}}\n                        error={\n                            this.props.createTicketAttemp && \n                            ticket.ticketSource === ''}\n                        onChange={(value: DropdownChoice) => {\n                            this.props.ticket.ticketSource = value.label;\n                            this.props.refreshTicketState();\n                        }} />\n                    <div>\n                        {ticket.ticketSource === 'Member' ? (\n                            <div>\n                                <InputField \n                                    placeholder='Member Name'\n                                    value={ticket.memberName}\n                                    error={\n                                        this.props.createTicketAttemp && \n                                        ticket.memberName === ''}\n                                    onChange={(value: string) => {\n                                        this.props.ticket.memberName = value;\n                                        this.props.refreshTicketState();\n                                    }} />\n                            </div>\n\n                        ) : ticket.ticketSource === 'Corporate Client' ? (\n                            <div>\n                                <InputField \n                                    placeholder='Corporate Client Name'\n                                    value={ticket.clientName}\n                                    error={\n                                        this.props.createTicketAttemp && \n                                        ticket.clientName === ''}\n                                    onChange={(value: string) => {\n                                        this.props.ticket.clientName = value;\n                                        this.props.refreshTicketState();\n                                    }} />\n                            </div>\n                        \n                        ) : ticket.ticketSource === 'Broker' ? (\n                            <div>\n                                <InputField \n                                    placeholder='Broker Name'\n                                    value={ticket.brokerName}\n                                    error={\n                                        this.props.createTicketAttemp && \n                                        ticket.brokerName.trim() === ''}    \n                                    onChange={(value: string) => {\n                                        this.props.ticket.brokerName = value;\n                                        this.props.refreshTicketState();\n                                    }} />\n                            </div>\n\n                        ) : ticket.ticketSource === 'Clinic/Hospital' ? (\n                            <div>\n                                <Dropdown \n                                    placeholder='Name of Hospital'\n                                    choices={this.props.facilities}\n                                    value={ticket.facility}\n                                    error={\n                                        this.props.createTicketAttemp && \n                                        ticket.facility.value === ''}\n                                    onChange={(value: DropdownChoice) => {\n                                        this.props.ticket.facility = value;\n                                        this.props.refreshTicketState();\n                                    }} />\n                                <InputField \n                                    placeholder='Department/Section' \n                                    value={ticket.department}\n                                    error={\n                                        this.props.createTicketAttemp && \n                                        ticket.department.trim() === ''}\n                                    onChange={(value: string) => {\n                                        this.props.ticket.department = value;\n                                        this.props.refreshTicketState();\n                                    }} />\n                            </div>\n                        ) : null}\n                    </div>\n                    <InputField \n                        placeholder='Name of Caller' \n                        value={ticket.callerName}\n                        error={\n                            this.props.createTicketAttemp && \n                            ticket.callerName.trim() === ''}\n                        onChange={(value: string) => {\n                            this.props.ticket.callerName = value;\n                            this.props.refreshTicketState();\n                        }} />\n                    <InputField \n                        placeholder='Contact No.' \n                        value={ticket.contactNo}\n                        error={\n                            this.props.createTicketAttemp && \n                            ticket.contactNo.trim() === ''}\n                        onChange={(value: string) => {\n                            if (value.match(/^[0-9\\b]+$/) || value.length == 0) {\n                                this.props.ticket.contactNo = value; \n                                this.props.refreshTicketState();\n                            }\n                        }} />\n                </div>\n                \n                <div className='sub-section'>\n                    <div className='header-2'>TICKET CATEGORY</div>\n                    <Grid container spacing={1}>\n                        <Grid item xs={5}>\n                            <Dropdown \n                                placeholder='Ticket Type'\n                                choices={this.ticketTypes}\n                                value={{ value: '', label: ticket.ticketType}}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    ticket.ticketType === ''}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.ticket.ticketType = value.label;\n                                    if (value.label === 'Inquiry') {\n                                        this.props.ticket.specificType = 'Not Applicable';\n                                    }\n                                    else\n                                    {\n                                        this.props.ticket.specificType = '';\n                                    }\n                                    this.props.refreshTicketState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={7}>\n                            <Dropdown \n                                placeholder='Specific Type'\n                                disabled={ticket.ticketType !== 'Availment'}\n                                choices={this.specificTypes}\n                                value={{ value: '', label: ticket.specificType}}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    ticket.specificType === '' && \n                                    ticket.ticketType !== 'Inquiry'}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.ticket.specificType = value.label;\n                                    this.props.refreshTicketState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={5}>\n                            <Dropdown \n                                placeholder='Urgency'\n                                choices={this.urgencies}\n                                value={{ value: '', label: ticket.urgency}}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    ticket.urgency === ''}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.ticket.urgency = value.label;\n                                    this.props.refreshTicketState();\n                                }} />\n                        </Grid>\n                        <Grid item xs={7}>\n                            <Dropdown \n                                placeholder='Assign To'\n                                choices={this.agents} /* Use this.props.agents later */\n                                value={{ value: ticket.agent.id, label: ticket.agent.name}}\n                                error={\n                                    this.props.createTicketAttemp && \n                                    ticket.agent.id === ''}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.ticket.agent = {\n                                        id: value.value,\n                                        name: value.label\n                                    };\n                                    this.props.refreshTicketState();\n                                }} />\n                        </Grid>\n                    </Grid>\n                </div>\n\n                <div className='sub-section'>\n                    <div className='header-2'>ADDITIONAL NOTES AND FILES</div>\n                    <InputArea\n                        placeholder='Additional Notes'\n                        value={ticket.additionalNotes}\n                        onChange={(value: string) => {\n                            this.props.ticket.additionalNotes = value;\n                            this.props.refreshTicketState();\n                        }} />\n                    <CustomDropzone\n                        accept='image/*'\n                        onDrop={(files: File[]) => {\n                            ticket.additionalFiles.push(files[0]);\n                            this.props.refreshTicketState();\n                        }} />\n                        {ticket.additionalFiles.map((file, index) => {\n                            return (\n                                <CustomChip\n                                    label={file.name}\n                                    value={index.toString()}\n                                    onDelete={(value: string) => {\n                                        ticket.additionalFiles.splice(parseInt(value), 1);\n                                        this.props.refreshTicketState();\n                                    }} />\n                            );\n                        })}\n                        \n                    {/* </Grid> */}\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}\n","import * as React from 'react';\nimport './component-style.scss';\nimport ChipInput from 'material-ui-chip-input';\n\ninterface IProps {\n    placeholder: string;\n    value: string[];\n    onAdd: (value: string) => void;\n    onDelete: (index: number) => void;\n}\n\nexport class InputChip extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        \n        return (\n            <div className='input-field-container'>\n                <div className='text'>{this.props.placeholder}</div>\n                <ChipInput \n                    className='text-field'\n                    value={this.props.value} \n                    fullWidthInput={false}\n                    onAdd={(chip: any) => this.props.onAdd(chip)}\n                    onDelete={(_chip: any, index: number) => this.props.onDelete(index)} />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport {  Grid, TableCell, TableRow } from '@material-ui/core';\nimport { faMinusCircle, faPlus, faPen } from '@fortawesome/free-solid-svg-icons';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { DropdownChoice, InquiryData } from 'Pages/CustomerCarePage/Models';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { CustomDropzone } from 'Pages/CustomerCarePage/Components/CustomDropzone';\nimport { CustomChip } from 'Pages/CustomerCarePage/Components/CustomChip';\nimport { InputChip } from 'Pages/CustomerCarePage/Components/InputChip';\n// import { ComplexTable } from 'Pages/CustomerCarePage/Components/ComplexTable';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\n\ninterface IProps {\n    inquiries: InquiryData[];\n    refreshInquiryState: () => void;\n}\n\ninterface IStates {\n    inquiry: DropdownChoice;\n}\n\nexport class InquirySection extends React.PureComponent<IProps, IStates> {\n\n    inquiries: DropdownChoice[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            inquiry: { value: '', label: '' }\n        };\n\n        this.inquiries = [\n            { value: '1', label: 'Member Status / Card Inquiry' },\n            { value: '2', label: 'Member Network Access Inquiry' },\n            { value: '3', label: 'Member Benefit Inquiry - General [Outpatient]' },\n            { value: '4', label: 'Member Benefit Inquiry - General [Inpatient]' },\n            { value: '5', label: 'Member Benefit Inquiry - General [Emergency]' },\n            { value: '6', label: 'Member Benefit Inquiry - General [Dental]' },\n            { value: '7', label: 'Member Benefit Inquiry - General [APE / ECU]' },\n            { value: '8', label: 'Member Benefit Inquiry - General [Riders]' },\n            { value: '9', label: 'Member Coverage Inquiry - Specific Benefit' },\n            { value: '10', label: 'Member Availment Inquiry - CanAvail' },\n            { value: '11', label: 'Member Eligibility Inquiry' },\n            { value: '12', label: 'Reimbursement Status Inquiry' },\n            { value: '13', label: 'General Affiliated Network Inquiry - Facility' },\n            { value: '14', label: 'General Affiliated Network Inquiry - Doctor' },\n            { value: '15', label: 'General Affiliated Network Inquiry - Dentist' },\n            { value: '16', label: 'Procedural Inquiry - Outpatient' },\n            { value: '17', label: 'Procedural Inquiry - Inpatient' },\n            { value: '18', label: 'Procedural Inquiry - Emergency' },\n            { value: '19', label: 'Procedural Inquiry - Dental' },\n            { value: '20', label: 'Procedural Inquiry - APE / ECU' },\n            { value: '21', label: 'Procedural Inquiry - Member Enrolment / Cancellation / Update' },\n            { value: '22', label: 'Procedural Inquiry - Reimbursement' },\n            { value: '23', label: 'Procedural Inquiry - Others' }\n        ];\n    }\n\n    onAddInquiry() {\n        if (this.state.inquiry.value !== '') {\n            this.props.inquiries.push({\n                inquiry: this.state.inquiry,\n                detail: '',\n                specificDetail: [],\n                answer: '',\n                remarks: '',\n                relatedTickets: [],\n                supportDocs: []\n            });\n            \n            this.props.refreshInquiryState();\n            this.setState({inquiry: { value: '', label: '' }});\n        }\n    }\n\n    getFilteredInquiries(): DropdownChoice[] {\n        let filteredInquiries: DropdownChoice[] = [];\n        for (var i = 0; i < this.inquiries.length; i++) {\n            let isSame = false;\n            for (var j = 0; j < this.props.inquiries.length; j++) {\n                isSame = (\n                    this.props.inquiries[j].inquiry.value === \n                    this.inquiries[i].value ? true : isSame);\n            }\n            if (!isSame) {\n                filteredInquiries = filteredInquiries.concat(this.inquiries[i]);\n            }\n        }\n        return filteredInquiries;\n    }\n    \n    onRemoveInquiry(index: number) {\n        this.props.inquiries.splice(index, 1);\n        this.props.refreshInquiryState();\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='availment-section'>\n                <div className='sub-section'>\n                    <div className='header-2'>INQUIRY</div>\n                    <div className='text'>\n                        Add an inquiry type and then add the question and its details after\n                    </div>\n                    <div className='sub-section'>\n                        <CustomTable \n                            rows={this.props.inquiries}\n                            renderHeader={() => this.renderTableHeader()}\n                            renderRow={(rowData: any, index: number) => \n                                this.renderTableRow(rowData, index)} />\n                    </div>\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n        return (\n            <>\n            <TableCell style={{minWidth: '400px', maxWidth: '400px'}}>\n                <Dropdown \n                    choices={this.getFilteredInquiries()}\n                    value={this.state.inquiry}\n                    onChange={(value: DropdownChoice) => {\n                        this.setState({inquiry: value});\n                    }} />\n            </TableCell>\n            <TableCell style={{minWidth: '125px', maxWidth: '125px', textAlign: 'center'}}>\n                <TextButton \n                    icon={faPlus} \n                    label=\"Add inquiry\"\n                    onClick={() => {\n                        this.onAddInquiry();\n                    }} />\n            </TableCell>\n            </>\n        );\n    }\n\n    renderTableRow(inquiry: InquiryData, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                <TableCell colSpan={2}>\n                    <Grid container spacing={1}>\n                        <Grid item xs={10} className='header-2'>\n                            {inquiry.inquiry.label}\n                        </Grid>\n                        <Grid item xs={2} style={{textAlign: 'right'}}>\n                            <IconButton\n                                icon={faPen}\n                                onClick={() => {\n                                    this.onRemoveInquiry(index);\n                                }}/>\n                            <IconButton\n                                icon={faMinusCircle}\n                                onClick={() => {\n                                    this.onRemoveInquiry(index);\n                                }}/>\n                        </Grid>\n                    </Grid>\n                    <div style={{position: 'relative'}}>\n                        <div style={{paddingTop: '0.5rem'}} />\n                        <div className='line-border' />\n                        <div style={{paddingTop: '0.5rem'}} />\n                        <Grid container>\n                            <Grid item xs={1}/>\n                            <Grid item xs={11}>\n                                <div style={{margin: '8px 8px 1.5rem 8px'}}>\n                                    <InputField \n                                        placeholder='Details of inquiry (Question)'\n                                        value={inquiry.detail}\n                                        onChange={(value: string) => {\n                                            inquiry.detail = value;\n                                            this.props.refreshInquiryState();\n                                        }} />\n                                        <InputChip \n                                            placeholder='Specific Details (Type benefit/doctor/facility to describe inquiry, press enter to add)'\n                                            value={inquiry.specificDetail}\n                                            onAdd={(value: string) => {\n                                                inquiry.specificDetail.push(value);\n                                                this.props.refreshInquiryState();\n                                            }}\n                                            onDelete={(index: number) => {\n                                                inquiry.specificDetail.splice(index, 1);\n                                                this.props.refreshInquiryState();\n                                            }} />\n                                    <InputField \n                                        placeholder='Answer'\n                                        value={inquiry.answer}\n                                        onChange={(value: string) => {\n                                            inquiry.answer = value;\n                                            this.props.refreshInquiryState();\n                                        }} />\n                                    <InputField \n                                        placeholder='Remarks (Optional)'\n                                        value={inquiry.remarks}\n                                        onChange={(value: string) => {\n                                            inquiry.remarks = value;\n                                            this.props.refreshInquiryState();\n                                        }} />\n                                    <InputChip \n                                            placeholder='Related Tickets (Optional, press enter to add)'\n                                            value={inquiry.relatedTickets}\n                                            onAdd={(value: string) => {\n                                                inquiry.relatedTickets.push(value);\n                                                this.props.refreshInquiryState();\n                                            }}\n                                            onDelete={(index: number) => {\n                                                inquiry.relatedTickets.splice(index, 1);\n                                                this.props.refreshInquiryState();\n                                            }} />\n                                    <Grid container spacing={2}>\n                                        <Grid item xs={7}>\n                                            <CustomDropzone \n                                                accept='image/*'\n                                                onDrop={(files: File[]) => {\n                                                    inquiry.supportDocs.push(files[0]);\n                                                    this.props.refreshInquiryState();\n                                                }}/>\n                                        </Grid>\n                                        <Grid item xs={5}>\n                                            {inquiry.supportDocs.map((doc, index) => {\n                                                return (\n                                                    <CustomChip\n                                                        label={doc.name}\n                                                        value={index.toString()}\n                                                        onDelete={(value: string) => {\n                                                            inquiry.supportDocs.splice(parseInt(value), 1);\n                                                            this.props.refreshInquiryState();\n                                                        }} />\n                                                );\n                                            })}\n                                        </Grid>\n                                    </Grid>\n                                </div>\n                                \n                            </Grid>\n                        </Grid>\n                    </div>\n                </TableCell>\n            </TableRow>\n        );\n    }\n}","import { TicketData, ConfinementDetails, InquiryData, AvailmentDetails, LOAData, ConsultationDetails, MemberData } from \"./Models\";\nimport { ConfinementDetails as UpdateInpatientDetails } from \"./UpdateTicketPage/UpdateTicketPage\";\nimport { ConfinementDetails as ResolveInpatientDetails } from \"./ResolveTicketPage/ResolveTicketPage\";\n\n\nexport class Payloads {\n\n    \n\n    static getPostTicketPayload(ticket: TicketData,\n                                member: MemberData,\n                                uploadedFiles: any[],\n                                confinement?: ConfinementDetails, \n                                availment?: AvailmentDetails, \n                                inquiries?: InquiryData[],\n                                consultation?: ConsultationDetails): any  {\n        return {\n            transaction_no: ticket.transactionNo,\n            received_via: ticket.ticketChannel,\n            received_from: ticket.ticketSource,\n\n            member_name: (ticket.ticketSource === 'Member' ? ticket.memberName : undefined),\n            corporate_client: (ticket.ticketSource === 'Corporate Client' ? ticket.clientName : undefined),\n            broker: (ticket.ticketSource === 'Broker' ? ticket.brokerName : undefined),\n            hospital_name: (ticket.ticketSource === 'Clinic/Hospital' ? (ticket.facility.value + ' - ' + ticket.facility.label) : undefined),\n            department: (ticket.ticketSource === 'Clinic/Hospital' ? ticket.department : undefined),\n\n            caller_name: ticket.callerName,\n            contact_no: ticket.contactNo,\n            additional_notes: ticket.additionalNotes,\n            supporting_documents: uploadedFiles.map(file => {\n                return {\n                    name: file.name,\n                    type: file.type,\n                    url: file.url ? file.url : file.path ? file.path : '',\n                }\n            }),\n\n            ticket_category: {\n                ticket_type: ticket.ticketType,\n                specific_type: ticket.specificType,\n                urgency: ticket.urgency,\n                assign_to: `${ticket.agent.id} - ${ticket.agent.name}`,\n\n                availment_details: (\n                    availment &&\n                    ticket.ticketType === 'Availment' &&\n                    ticket.specificType === 'Outpatient Procedure' ? {\n                    provider: availment.provider.value + ' - ' + availment.provider.label,\n                    availments_list: availment.diagnoses.map(availment => {\n                        return {\n                            code: availment.icd10Code.value,\n                            name: availment.icd10Code.label,\n                            remarks: '',\n                            is_primary: false,\n                            is_final: false,\n                            \n                            doctors: [\n                                {\n                                    id: '',\n                                    name: availment.doctors[0].name,\n                                    specialization: (availment.doctors[0].specialization ? availment.doctors[0].specialization : null),\n                                    fee: 0,\n                                    no_of_visits: '',\n                                    remarks: ''\n                                }\n                            ],\n\n                            procedures: availment.procedures\n                                .filter(procedure => {\n                                    return procedure.cptCode.value;\n                                })\n                                .map(procedure => {\n                                    return {\n                                        code: procedure.cptCode.value,\n                                        name: procedure.cptCode.label,\n                                        amount: procedure.amount.toString(),\n                                        doctor: '',\n                                        phic: procedure.isPHIC,\n                                        notes: '',\n                                        date_added: new Date(),\n                                        assessment_type: procedure.assessmentType,\n                                        assessment_remarks: procedure.assessmentRemarks\n                                    }\n                                }),\n                            \n                                assessment_type: availment.assessmentType,\n                                assessment_remarks: availment.assessmentRemarks\n                        }\n                    })\n                } : undefined),\n\n                confinement_details: (\n                    confinement &&\n                    ticket.ticketType === 'Availment' &&\n                    ticket.specificType === 'Inpatient' ? {\n                    provider: confinement.provider.value + ' - ' + confinement.provider.label,\n                    date_admitted: confinement.dateAdmitted,\n                    confinement_kind: confinement.confinementKind,\n                    gift_given: false,\n                    updates: [],\n                    room_accommodation: [{\n                        room_type: confinement.roomType,\n                        no_of_days: '1',\n                        cost: confinement.costPerDay\n                    }],\n                    diagnoses: [\n                        {\n                            code: confinement.initialDiagnosis.value,\n                            name: confinement.initialDiagnosis.label,\n                            remarks: '',\n                            is_primary: false,\n                            is_final: false,\n                            \n                            doctors: [\n                                {\n                                    id: '',\n                                    name: confinement.doctor.label,\n                                    specialization: (confinement.doctor.params ? confinement.doctor.params[0] : null),\n                                    fee: confinement.amount,\n                                    no_of_visits: '0',\n                                    remarks: '',\n                                    type: 'Admitting'\n                                }\n                            ],\n\n                            procedures: []\n                        }\n                    ],\n                    others: [],\n                    coverage: 'Filed',\n                    final_bill: 0,\n                    philhealth_amount: 0,\n                    discharge_date: null\n                } : undefined),\n\n                consultation_details: (\n                    consultation &&\n                    ticket.specificType === 'Consultation' ? {\n                    provider: `${consultation.provider.value} - ${consultation.provider.label}`,\n                    diagnosis: `${consultation.diagnosis.value} - ${consultation.diagnosis.label}`,\n                    doctor: `${consultation.doctor.value} - ${consultation.doctor.label}`,\n                    notes: consultation.notes,\n                    assessment_type: consultation.assessmentType,\n                    assessment_remarks: consultation.assessmentRemarks\n                } : undefined),\n\n                inquiry_details: (\n                    inquiries &&\n                    ticket.ticketType === 'Inquiry' ? {\n                    inquiry_list: inquiries.map(inquiry => {\n                        return {\n                            inquiry: inquiry.inquiry.label,\n                            value: inquiry.detail,\n                            specific_detail: inquiry.specificDetail,\n                            answer: inquiry.answer,\n                            remarks: inquiry.remarks, \n                            related_tickets: inquiry.relatedTickets, \n                            support_docs: []\n                        }\n                    })\n                } : undefined)\n            },\n            pmaker_case_uid: '',\n            status: 'Open',\n            date_created: new Date(),\n            date_updated: new Date(),\n            date_escalated: null,\n            created_by: {\n                _id: ticket.createdBy.id,\n                name: ticket.createdBy.name\n            },\n            tmp: {\n                user_id: localStorage['user_id'],\n                module: 'Customer Care',\n                process: 'Create Ticket',\n                timestamp: new Date()\n            },\n            member_id: member.cardNo,\n            member: [{\n                is_vip: member.isVip,\n                last_name: member.lastName,\n                middle_name: member.middleName,\n                first_name: member.firstName,\n                client: member.clientName\n            }],\n\n            client_id: '',\n            \n            loa: []\n        };\n    }\n\n\n\n\n\n\n\n\n\n\n    static getPutTicketPayload(ticket: TicketData, \n                               member: MemberData,\n                               uploadedFiles: any[],\n                               confinement?: UpdateInpatientDetails,\n                               inquiries?: InquiryData[]): any {\n        return {\n            transaction_no: ticket.transactionNo,\n            received_via: ticket.ticketChannel,\n            received_from: ticket.ticketSource,\n\n            member_name: ticket.memberName,\n            corporate_client: ticket.clientName,\n            broker: ticket.brokerName,\n            hospital_name: ticket.facility.label,\n            department: ticket.department,\n\n            caller_name: ticket.callerName,\n            contact_no: ticket.contactNo,\n            additional_notes: ticket.additionalNotes,\n            supporting_documents: uploadedFiles.map(file => {\n                return {\n                    name: file.name,\n                    type: file.type,\n                    url: file.url ? file.url : file.path ? file.path : '',\n                    field: file.field\n                }\n            }),\n\n            ticket_category: {\n                ticket_type: ticket.ticketType,\n                specific_type: ticket.specificType,\n                urgency: ticket.urgency,\n                assign_to: `${ticket.agent.id} - ${ticket.agent.name}`,\n\n                confinement_details: (confinement ? {\n                    provider: `${confinement.provider.value} - ${confinement.provider.label}`,\n                    date_admitted: confinement.dateAdmitted,\n                    confinement_kind: confinement.confinementKind,\n                    gift_given: confinement.giftGiven,\n                    updates: confinement.updates.map(update => {\n                        return {\n                            remarks: update.remarks,\n                            date: update.date,\n                            hospital_bill: update.hospitalBill.toString()\n                        }\n                    }),\n                    room_accommodation: confinement.accommodations.map(accommodation => {\n                        return {\n                            room_type: accommodation.roomType,\n                            no_of_days: accommodation.days.toString(),\n                            cost: accommodation.costPerDay\n                        }\n                    }),\n                    diagnoses: confinement.diagnoses.map((diagnosis, index) => {\n                        return {\n                            code: diagnosis.diagnosis.value,\n                            name: diagnosis.diagnosis.label,\n                            remarks: diagnosis.remarks,\n                            is_primary: (confinement.primaryDiagnosisIndex === index),\n                            is_final: diagnosis.isFinal,\n                            doctors: confinement.physicians\n                                .filter(physician => physician.diagnosis.value === diagnosis.diagnosis.value)\n                                .map(physician => {\n                                    return {\n                                        id: '',\n                                        name: physician.physician.label,\n                                        specialization: physician.physician.params ? physician.physician.params[0] : '',\n                                        fee: physician.amount,\n                                        no_of_visits: physician.visits.toString(),\n                                        remarks: physician.remarks,\n                                        type: physician.physician.params ? physician.physician.params[1] : ''\n                                    }\n                                }),\n                            procedures: confinement.procedures\n                                .filter(procedure => procedure.diagnosis.value === diagnosis.diagnosis.value)\n                                .map(procedure => {\n                                    return {\n                                        code: procedure.procedure.value + '', // Convert to string\n                                        name: procedure.procedure.label,\n                                        amount: procedure.amount.toString(),\n                                        doctor: procedure.physician.label,\n                                        phic: false,\n                                        notes: procedure.remarks,\n                                        date_added: procedure.date,\n                                        assessment_type: 'Pending',\n                                        assessment_remarks: ''\n                                    }\n                                }),\n                            assessment_type: 'Pending',\n                            assessment_remarks: ''\n                        }\n                    }),\n                    others: confinement.items.map(item => {\n                        return {\n                            amount: item.amount,\n                            name: item.name,\n                            type: item.type.label\n                        }\n                    }),\n                    coverage: confinement.coverage.label,\n                    ticket_no: confinement.ticketNo,\n                    paid_by: confinement.paidBy,\n                    philhealth_amount: confinement.philhealthAmount,\n                    final_bill: confinement.finalBill,\n                    discharge_date: confinement.dischargeDate\n                } : undefined),\n\n                inquiry_details: (inquiries ? {\n                    inquiry_list: inquiries.map(inquiry => {\n                        return {\n                            inquiry: inquiry.inquiry.label,\n                            value: inquiry.detail,\n                            specific_detail: inquiry.specificDetail,\n                            answer: inquiry.answer,\n                            remarks: inquiry.remarks, \n                            related_tickets: inquiry.relatedTickets, \n                            support_docs: []\n                        }\n                    })\n                } : undefined)\n            },\n            pmaker_case_uid: ticket.pmCaseId,\n            status: ticket.status,\n            date_created: ticket.dateCreated,\n            date_updated: new Date(),\n            date_escalated: null,\n            created_by: {\n                _id: ticket.createdBy.id,\n                name: ticket.createdBy.name\n            },\n            tmp: {\n                user_id: localStorage['user_id'],\n                module: 'Customer Care',\n                process: 'Update Ticket',\n                timestamp: new Date()\n            },\n            member_id: member.cardNo,\n            member: [{\n                is_vip: member.isVip,\n                last_name: member.lastName,\n                middle_name: member.middleName,\n                first_name: member.firstName,\n                client: member.clientName\n            }],\n\n            client_id: '',\n\n            approval_code: ticket.approvalCode,\n            loa: []\n        };\n    }\n\n\n\n\n\n\n\n\n\n\n    static getPutResolveTicketPayload(ticket: TicketData, \n                                      member: MemberData,\n                                      loas: LOAData[],\n                                      availment?: AvailmentDetails,\n                                      confinement?: ResolveInpatientDetails,\n                                      consultation?: ConsultationDetails): any {\n        return {\n            transaction_no: ticket.transactionNo,\n            received_via: ticket.ticketChannel,\n            received_from: ticket.ticketSource,\n\n            member_name: ticket.memberName,\n            corporate_client: ticket.clientName,\n            broker: ticket.brokerName,\n            hospital_name: ticket.facility.label,\n            department: ticket.department,\n\n            caller_name: ticket.callerName,\n            contact_no: ticket.contactNo,\n            additional_notes: ticket.additionalNotes,\n            supporting_documents: [],\n\n            ticket_category: {\n                ticket_type: ticket.ticketType,\n                specific_type: ticket.specificType,\n                urgency: ticket.urgency,\n                assign_to: `${ticket.agent.id} - ${ticket.agent.name}`,\n\n                availment_details: (availment ? {\n                    provider: availment.provider.value + ' - ' + availment.provider.label,\n                    availments_list: availment.diagnoses.map(availment => {\n                        return {\n                            code: availment.icd10Code.value,\n                            name: availment.icd10Code.label,\n                            remarks: '',\n                            is_primary: false,\n                            is_final: false,\n                            \n                            doctors: [\n                                {\n                                    id: '',\n                                    name: availment.doctors[0].name,\n                                    specialization: '',\n                                    fee: 0,\n                                    no_of_visits: '',\n                                    remarks: ''\n                                }\n                            ],\n\n                            procedures: availment.procedures\n                                .filter(procedure => {\n                                    return procedure.cptCode.value;\n                                })\n                                .map(procedure => {\n                                    return {\n                                        code: procedure.cptCode.value,\n                                        name: procedure.cptCode.label,\n                                        amount: procedure.amount.toString(),\n                                        doctor: '',\n                                        phic: procedure.isPHIC,\n                                        notes: '',\n                                        date_added: new Date(),\n                                        assessment_type: procedure.assessmentType,\n                                        assessment_remarks: procedure.assessmentRemarks\n                                    }\n                                })\n                        }\n                    })\n                } : undefined),\n\n                confinement_details: (confinement ? {\n                    provider: confinement.provider.value + ' - ' + confinement.provider.label,\n                    date_admitted: confinement.dateAdmitted,\n                    confinement_kind: confinement.confinementKind,\n                    gift_given: confinement.giftGiven,\n                    updates: confinement.updates,\n                    room_accommodation: confinement.accommodations.map(accommodation => {\n                        return {\n                            room_type: accommodation.roomType,\n                            no_of_days: accommodation.days.toString(),\n                            cost: accommodation.costPerDay\n                        }\n                    }),\n                    diagnoses: confinement.diagnoses.map(diagnosis => {\n                        return {\n                            code: diagnosis.icd10Code.value,\n                            name: diagnosis.icd10Code.label,\n                            remarks: diagnosis.remarks,\n                            is_primary: diagnosis.isPrimary,\n                            is_final: diagnosis.isFinal,\n                            doctors: diagnosis.doctors.map(doctor => {\n                                return {\n                                    id: doctor.id,\n                                    name: doctor.name,\n                                    specialization: doctor.specialization,\n                                    fee: doctor.fee,\n                                    no_of_visits: doctor.noOfVisits.toString(),\n                                    remarks: doctor.remarks,\n                                    type: doctor.type\n                                }\n                            }),\n                            procedures: diagnosis.procedures.map(procedure => {\n                                return {\n                                    code: procedure.cptCode.value + '', // Convert to string\n                                    name: procedure.cptCode.label,\n                                    amount: procedure.amount.toString(),\n                                    doctor: procedure.doctor,\n                                    phic: procedure.isPHIC,\n                                    notes: procedure.notes,\n                                    date_added: procedure.dateAdded,\n                                    assessment_type: procedure.assessmentType,\n                                    assessment_remarks: procedure.assessmentRemarks\n                                }\n                            }),\n                            assessment_type: diagnosis.assessmentType,\n                            assessment_remarks: diagnosis.assessmentRemarks\n                        }\n                    }),\n                    others: confinement.others,\n                    coverage: confinement.coverage.label,\n                    philhealth_amount: confinement.philhealthAmount,\n                    final_bill: confinement.finalBill,\n                    discharge_date: confinement.dischargeDate\n                } : undefined),\n\n                consultation_details: (consultation ? {\n                    provider: `${consultation.provider.value} - ${consultation.provider.label}`,\n                    diagnosis: `${consultation.diagnosis.value} - ${consultation.diagnosis.label}`,\n                    doctor: `${consultation.doctor.value} - ${consultation.doctor.label}`,\n                    notes: consultation.notes,\n                    assessment_type: consultation.assessmentType,\n                    assessment_remarks: consultation.assessmentRemarks\n                } : undefined)\n            },\n            pmaker_case_uid: ticket.pmCaseId,\n            status: 'Resolved',\n            date_created: ticket.dateCreated,\n            date_updated: ticket.dateUpdated,\n            date_escalated: null,\n            created_by: {\n                _id: ticket.createdBy.id,\n                name: ticket.createdBy.name\n            },\n            tmp: {\n                user_id: localStorage['user_id'],\n                module: 'Customer Care',\n                process: 'Create Ticket',\n                timestamp: new Date()\n            },\n            member_id: member.cardNo,\n            member: [{\n                is_vip: member.isVip,\n                last_name: member.lastName,\n                middle_name: member.middleName,\n                first_name: member.firstName,\n                client: member.clientName\n            }],\n\n            client_id: '',\n\n            approval_code: ticket.approvalCode,\n            loa: loas.map(loa => {\n                return {\n                    _id: loa.id,\n                    loa_no: loa.loaNo,\n                    status: loa.status,\n                    amount: loa.amount,\n                    date: loa.date,\n                    notes: loa.notes\n                }\n            })\n        };\n    }\n}","import * as React from 'react';\nimport { ConsultationDetails, DropdownChoice } from 'Pages/CustomerCarePage/Models';\nimport { DetailedDropdown } from 'Pages/CustomerCarePage/Components/DetailedDropdown';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\n\ninterface IProps {\n    consultation: ConsultationDetails;\n    facilities: DropdownChoice[];\n    doctors: DropdownChoice[];\n    icd10Codes: DropdownChoice[];\n    createTicketAttemp: boolean;\n    refreshConsultationState: () => void;\n}\n\nexport class ConsultationSection extends React.Component<IProps> {\n\n    constructor(props: IProps) {\n        super(props);\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='availment-section'>\n\n                <div className='sub-section'>\n                    <div className='header-2'>AVAILMENT DETAILS</div>\n                    <DetailedDropdown \n                        choices={this.props.facilities}\n                        placeholder='Provider'\n                        value={this.props.consultation.provider}\n                        error={\n                            this.props.createTicketAttemp && \n                            this.props.consultation.provider.value === ''}\n                        onChange={(value: DropdownChoice) => {\n                            this.props.consultation.provider = value;\n                            this.props.refreshConsultationState();\n                        }} />\n\n                    <DetailedDropdown \n                        choices={this.props.icd10Codes}\n                        placeholder='Diagnosis'\n                        value={this.props.consultation.diagnosis}\n                        error={\n                            this.props.createTicketAttemp && \n                            this.props.consultation.diagnosis.value === ''}\n                        onChange={(value: DropdownChoice) => {\n                            this.props.consultation.diagnosis = value;\n                            this.props.refreshConsultationState();\n                        }} />\n                    <Dropdown \n                        choices={this.props.doctors}\n                        placeholder='Doctor'\n                        value={this.props.consultation.doctor}\n                        error={\n                            this.props.createTicketAttemp && \n                            this.props.consultation.doctor.value === ''}\n                        onChange={(value: DropdownChoice) => {\n                            this.props.consultation.doctor = value;\n                            this.props.refreshConsultationState();\n                        }} />\n                    <InputField\n                        placeholder='Notes'\n                        value={this.props.consultation.notes}\n                        onChange={(value: string) => {\n                            this.props.consultation.notes = value;\n                            this.props.refreshConsultationState();\n                        }} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","let backendUrl = process.env.REACT_APP_PMAKER_BASE_URL;\n\nexport class Processmaker {\n\n    // //local\n    // static localUrl = 'http://18.140.39.215/api/1.0/workflow';//'localhost:32766/api/1.0/workflow';\n\n    // //stg\n    // static stgUrl = 'http://18.140.39.215/api/1.0/workflow';\n\n    static async get(url: string, success: Function, fail: Function) {\n        // const backendUrl = (process.env.NODE_ENV === 'development' ? this.localUrl : this.stgUrl);\n        fetch(backendUrl + url, {\n            method: 'GET',\n            headers: { \n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + localStorage.getItem('pm_token')\n            },\n        })\n        .then(response => response.json())\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n\n    static async post(url:string, body: any, success: Function, fail: Function) {\n        // const backendUrl = (process.env.NODE_ENV === 'development' ? this.localUrl : this.stgUrl);\n        fetch(backendUrl + url, {\n            method: 'POST',\n            headers: { \n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + localStorage.getItem('pm_token')\n            },\n            body: JSON.stringify(body)\n        })\n        .then(response => response.json())\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n\n    static async put(url: string, body: any, success: Function, fail: Function) {\n        // const backendUrl = (process.env.NODE_ENV === 'development' ? this.localUrl : this.stgUrl);\n        fetch(backendUrl + url, {\n            method: 'PUT',\n            headers: { \n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + localStorage.getItem('pm_token')\n            },\n            body: JSON.stringify(body)\n        })\n        .then(response => response)\n        .then(data => success(data))\n        .catch(error => fail(error));\n    }\n}","import * as React from 'react';\nimport {  Grid, TableCell, TableRow } from '@material-ui/core';\nimport { faMinusCircle, faPlus, faPen, faCheckCircle, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport { DetailedDropdown } from 'Pages/CustomerCarePage/Components/DetailedDropdown';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { ProcedureData, DropdownChoice, AvailmentDetails, DiagnosisData } from 'Pages/CustomerCarePage/Models';\nimport { NumberField } from 'Pages/CustomerCarePage/Components/NumberField';\nimport { CustomCheckbox } from 'Pages/CustomerCarePage/Components/CustomCheckbox';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\n\ninterface IProps {\n    availment: AvailmentDetails;\n    facilities: DropdownChoice[];\n    doctors: DropdownChoice[];\n    icd10Codes: DropdownChoice[];\n    cptCodes: DropdownChoice[];\n    createTicketAttemp: boolean;\n    refreshAvailmentState: () => void;\n}\n\ninterface IStates {\n    icd10Code: DropdownChoice;\n    doctor: DropdownChoice;\n    chiefComplaint: string;\n    history: string;\n\n    itemToEditIndex: number;\n    icd10CodeToEdit: DropdownChoice;\n    doctorToEdit: DropdownChoice;\n}\n\nexport class EmergencyRoomSection extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            icd10Code: { value: '', label: '' },\n            doctor: { value: '', label: '' },\n            chiefComplaint: '',\n            history: '',\n\n            itemToEditIndex: -1,\n            icd10CodeToEdit: { value: '', label: '' },\n            doctorToEdit: { value: '', label: '' }\n        };\n    }\n\n    getFilteredICD10(): DropdownChoice[] {\n        let filteredICD10: DropdownChoice[] = [];\n        for (var i = 0; i < this.props.icd10Codes.length; i++) {\n            let isSame = false;\n            for (var j = 0; j < this.props.availment.diagnoses.length; j++) {\n                isSame = (\n                    this.props.availment.diagnoses[j].icd10Code.value === \n                    this.props.icd10Codes[i].value ? true : isSame);\n            }\n            if (!isSame) {\n                filteredICD10 = filteredICD10.concat(this.props.icd10Codes[i]);\n            }\n        }\n        return filteredICD10;\n    }\n\n    getProcedureCosts(procedures: ProcedureData[]) {\n        let totalCost = 0;\n        procedures.map(procedure => {\n            totalCost += procedure.amount;\n        });\n        return totalCost;\n    }\n    \n    pushBlankDiagnosis(icd10Code: DropdownChoice, doctor: DropdownChoice) {\n        this.props.availment.diagnoses.push({\n            icd10Code: icd10Code,\n            remarks: '',\n            isPrimary: false,\n            isFinal: false,\n            doctors: [{\n                id: '',\n                name: doctor.label,\n                specialization: '',\n                fee: 0,\n                noOfVisits: 0,\n                remarks: '',\n                type: 'Admitting'\n            }],\n            procedures: [{\n                cptCode: { value: '', label: '' },\n                isPHIC: false,\n                amount: 0,\n                notes: '',\n                assessmentType: 'Pending',\n                assessmentRemarks: '',\n                doctor: '',\n                dateAdded: new Date()\n            }],\n            assessmentType: 'Pending',\n            assessmentRemarks: ''\n        });\n    }\n\n    pushBlankProcedures(diagnosisIndex: number) {\n        this.props.availment.diagnoses[diagnosisIndex].procedures.push({\n            cptCode: { value: '', label: '' },\n            isPHIC: false,\n            amount: 0,\n            notes: '',\n            assessmentType: 'Pending',\n            assessmentRemarks: '',\n            doctor: '',\n            dateAdded: new Date()\n        });\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='availment-section'>\n                <div className='sub-section'>\n                    <div className='header-2'>AVAILMENT DETAILS</div>\n                    <DetailedDropdown \n                        choices={this.props.facilities}\n                        placeholder='Provider'\n                        value={this.props.availment.provider}\n                        error={\n                            this.props.createTicketAttemp && \n                            this.props.availment.provider.value === ''}\n                        onChange={(value: DropdownChoice) => {\n                            this.props.availment.provider = value;\n                            this.props.refreshAvailmentState();\n                        }} />\n                    <InputField\n                        placeholder='Chief Complaint'\n                        value={this.state.chiefComplaint}\n                        onChange={(value: string) => {\n                            this.setState({chiefComplaint: value});\n                        }} />\n                    <InputField\n                        placeholder='History'\n                        value={this.state.history}\n                        onChange={(value: string) => {\n                            this.setState({history: value});\n                        }} />\n                </div>\n                <div className='sub-section'>\n                    <div className='header-3'>LIST OF AVAILMENTS</div>\n                    <div className='text'>\n                        Add a diagnosis first then add procedures per diagnosis after\n                    </div>\n                    <div className='sub-section'>\n                        <CustomTable\n                            rows={this.props.availment.diagnoses}\n                            renderHeader={() => this.renderTableHeader()}\n                            renderRow={(rowData: any, index: number) => \n                                this.renderTableRow(rowData, index)} />\n                    </div>\n                    {this.props.createTicketAttemp && this.props.availment.diagnoses.length === 0 ? (\n                        <div className='sub-section' style={{color: '#E53935'}}>\n                            No diagnosis. Need atleast one diagnosis.\n                        </div> \n                    ) : (null)}\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n        return (\n            <>\n            <TableCell style={{minWidth: '300px', maxWidth: '300px'}}>\n                <DetailedDropdown \n                    choices={this.getFilteredICD10()}\n                    value={this.state.icd10Code}\n                    onChange={(value: DropdownChoice) => {\n                        this.setState({icd10Code: value});\n                    }} />\n            </TableCell>\n            <TableCell style={{minWidth: '150px', maxWidth: '150px'}}>\n                <Dropdown \n                    choices={this.props.doctors}\n                    value={this.state.doctor}\n                    onChange={(value: DropdownChoice) => {\n                        this.setState({doctor: value});\n                    }} />\n            </TableCell>\n            <TableCell style={{textAlign: 'center'}}>\n                <TextButton \n                    icon={faPlus} \n                    label=\"Add diagnosis\"\n                    onClick={() => {\n                        if (this.state.doctor.value !== '' && this.state.icd10Code.value !== '') {\n                            this.pushBlankDiagnosis(this.state.icd10Code, this.state.doctor);\n                            this.props.refreshAvailmentState();\n                            this.setState({\n                                icd10Code: { value: '', label: '' },\n                                doctor: { value: '', label: '' }\n                            });\n                        }\n                    }} />\n            </TableCell>\n            </>\n        );\n    }\n\n    renderTableRow(diagnosis: DiagnosisData, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n        const editIcon = { display: 'inline-block', paddingRight: '0.5rem' };\n        const deleteIcon = { display: 'inline-block' };\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                <TableCell colSpan={3}>\n                    <Grid container spacing={1}>\n                        {this.state.itemToEditIndex === index ? (\n                            <>\n                            <Grid item xs={6}>\n                                <DetailedDropdown \n                                    choices={this.getFilteredICD10()}\n                                    value={this.state.icd10CodeToEdit}\n                                    onChange={(value: DropdownChoice) => {\n                                        this.setState({icd10CodeToEdit: value});\n                                    }} />\n                            </Grid>\n                            <Grid item xs={5}>\n                                <Dropdown \n                                    choices={this.props.doctors}\n                                    value={this.state.doctorToEdit}\n                                    onChange={(value: DropdownChoice) => {\n                                        this.setState({doctorToEdit: value});\n                                    }} />\n                            </Grid>\n                            <Grid item xs={1} style={{lineHeight: '2rem'}}>\n                                <div style={editIcon}>\n                                    <IconButton\n                                        icon={faCheckCircle}\n                                        onClick={() => {\n                                            this.props.availment.diagnoses[index].icd10Code = this.state.icd10CodeToEdit;\n                                            this.props.availment.diagnoses[index].doctors[0].name = this.state.doctorToEdit.label;\n                                            this.props.refreshAvailmentState();\n                                            this.setState({itemToEditIndex: -1});\n                                        }}/>\n                                </div>\n                                <div style={deleteIcon}>\n                                    <IconButton\n                                        icon={faTimesCircle}\n                                        onClick={() => {\n                                            this.setState({itemToEditIndex: -1});\n                                        }}/>\n                                </div>\n                            </Grid>\n                            </>\n                        ) : (\n                            <>\n                            <Grid item xs={6} className='header-2'>\n                                {diagnosis.icd10Code.value + ' - ' + diagnosis.icd10Code.label}\n                            </Grid>\n                            <Grid item xs={3} className='header-2'>\n                                {diagnosis.doctors[0].name}\n                            </Grid>\n                            <Grid item xs={2} className='header-2'>\n                                {GlobalFunction.formatNumber(this.getProcedureCosts(diagnosis.procedures), true) + \" PHP\"}\n                            </Grid>\n                            <Grid item xs={1}>\n                                <div style={editIcon}>\n                                    <IconButton\n                                        icon={faPen}\n                                        onClick={() => {\n                                            this.setState({\n                                                itemToEditIndex: index,\n                                                icd10CodeToEdit: diagnosis.icd10Code,\n                                                doctorToEdit: {\n                                                    value: diagnosis.doctors[0].id,\n                                                    label: diagnosis.doctors[0].name\n                                                }\n                                            });\n                                        }}/>\n                                </div>\n                                <div style={deleteIcon}>\n                                    <IconButton\n                                        icon={faMinusCircle}\n                                        onClick={() => {\n                                            this.props.availment.diagnoses.splice(index, 1);\n                                            this.props.refreshAvailmentState();\n                                        }}/>\n                                </div>\n                            </Grid>\n                            </>\n                        )}\n                    </Grid>\n                    {diagnosis.procedures.map((procedure, procedureIndex) => {\n                        return this.renderProcedureDetails(procedure, index, procedureIndex);\n                    })}\n                </TableCell>\n            </TableRow>\n        );\n    }\n    \n    renderProcedureDetails(procedure: ProcedureData, diagnosisIndex: number, index: number): JSX.Element {\n        const stateProcedure = this.props.availment.diagnoses[diagnosisIndex].procedures[index];\n        const stateProcedures = this.props.availment.diagnoses[diagnosisIndex].procedures;\n        return (\n            <div style={{position: 'relative'}}>\n                <div style={{paddingTop: '0.5rem'}} />\n                <div className='line-border' />\n                <div style={{paddingTop: '0.5rem'}} />\n                <Grid container spacing={2}>\n                    <Grid item xs={8}>\n                        <DetailedDropdown \n                            placeholder='Procedure'\n                            choices={this.props.cptCodes}\n                            value={procedure.cptCode}\n                            onChange={(value: DropdownChoice) => {\n                                stateProcedure.cptCode = value;\n                                if (index === (stateProcedures.length - 1)) {\n                                    this.pushBlankProcedures(diagnosisIndex);\n                                }\n                                this.props.refreshAvailmentState();\n                            }} />\n                    </Grid>\n                    <Grid item xs={3}>\n                        <NumberField\n                            placeholder='Amount'\n                            value={procedure.amount}\n                            onChange={(value: number) => {\n                                stateProcedure.amount = value;\n                                this.props.refreshAvailmentState();\n                            }} />\n                    </Grid>\n                    <Grid item xs={1}>\n                        <CustomCheckbox\n                            placeholder='PHIC'\n                            value={procedure.isPHIC}\n                            onChange={(value: boolean) => {\n                                stateProcedure.isPHIC = value;\n                                this.props.refreshAvailmentState();\n                            }} />\n                    </Grid>\n                </Grid>\n                <div style={{position: 'absolute'}}>\n                    <TextButton \n                        label='Add procedure'\n                        icon={faPlus}\n                        onClick={() => {\n                            this.pushBlankProcedures(diagnosisIndex);\n                            this.props.refreshAvailmentState();\n                        }}/>\n                </div>\n                <div style={{paddingTop: '1rem'}} />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Button } from '@material-ui/core';\nimport { GlobalFunction } from './GlobalFunction';\n\ninterface IProps {\n    lastSave?: Date;\n    forceShowResolveButton?: boolean;\n\n    onSaveForNow?: () => void;\n    onSubmitTicket?: () => void;\n    onResolveTicket?: () => void;\n\n    onAssign?: () => void;\n    onEscalate?: () => void;\n    onUpdateTicket?: () => void;\n    onFinalAssessment?: () => void;\n}\n\nexport class TicketFooter extends React.Component<IProps> {\n\n    interval?: NodeJS.Timeout;\n\n    componentDidMount() {\n        // setInterval()\n        this.interval = setInterval(() => this.setState({ time: Date.now() }), 5000);\n    }\n\n    \n\n    render(): JSX.Element {\n        return (\n            <div className='footer'>\n\n                {this.props.onSaveForNow ? (\n                    <Button \n                        className='button-transparent' \n                        variant='outlined'\n                        onClick={this.props.onSaveForNow}>\n                        <div style={{display: 'block'}}>\n                            <div className='text'>Save For Now</div>\n                            {this.props.lastSave ? (\n                                <div className='small-text'>\n                                    {`Auto-saved ${GlobalFunction.getTimeDeffirence(this.props.lastSave, new Date())} ago`}\n                                </div>\n                            ) : null}\n                        </div>\n                    </Button>\n                ) : null}\n\n                {this.props.onResolveTicket && this.props.forceShowResolveButton ? (\n                    <Button \n                        className='button'\n                        onClick={this.props.onResolveTicket}>\n                        Mark as Resolved\n                    </Button>\n                ) : null}\n                \n                {this.props.onSubmitTicket ? (\n                    <Button \n                        className='button'\n                        onClick={this.props.onSubmitTicket}>\n                        Submit Ticket\n                    </Button>\n                ) : null}\n\n                {this.props.onAssign ? (\n                    <Button \n                        className='button'\n                        color='default'\n                        onClick={this.props.onAssign}>\n                        Assign\n                    </Button>\n                ) : null}\n\n                {this.props.onEscalate ? (\n                    <Button \n                        className='button-error'\n                        onClick={this.props.onEscalate}>\n                        Escalate\n                    </Button>\n                ) : null}\n\n                {this.props.onUpdateTicket ? (\n                    <Button \n                        className='button'\n                        onClick={this.props.onUpdateTicket}>\n                        Update Ticket\n                    </Button>\n                ) : null}\n\n                {this.props.onFinalAssessment ? (\n                    <Button \n                        className='button'\n                        onClick={this.props.onFinalAssessment}>\n                        Proceed with Final Assessment\n                    </Button>\n                ) : null}\n            </div>\n        );\n    }\n}","\nimport * as React from 'react';\nimport Grid from '@material-ui/core/Grid';\n\nimport './../style.scss';\nimport { MemberDataSection } from '../MemberDataSection';\nimport { API } from './../API';\nimport { ConfinementSection } from './Components/ConfinementSection';\nimport { AvailmentSection } from './Components/AvailmentSection';\nimport { TicketInfoSection } from './Components/TicketInfoSection';\nimport { TicketData, MemberData, DropdownChoice, ConfinementDetails, InquiryData, AvailmentDetails, ConsultationDetails } from '../Models';\nimport { InquirySection } from './Components/InquirySection';\nimport { Payloads } from '../Payloads';\nimport { ConsultationSection } from './Components/ConsultationSection';\nimport { Processmaker } from '../Processmaker';\nimport { EmergencyRoomSection } from './Components/EmergencyRoomSection';\nimport { TicketFooter } from '../TicketFooter';\nimport { Loading } from '../Components/Loading';\nimport { Snackbar } from '@material-ui/core';\n\ninterface IProps {\n    history: any;\n}\n\ninterface IStates {\n    createTicketAttemp: boolean;\n    isIcd10CodesLoaded: boolean;\n    isSaving: boolean;\n    loadedResources: number;\n    snackbarMessage: string | null;\n    lastSave?: Date;\n\n    /* Can save to tmp */\n    member?: MemberData;\n    ticket: TicketData;\n    availment: AvailmentDetails;\n    confinement: ConfinementDetails;\n    consultation: ConsultationDetails;\n    inquiries: InquiryData[];\n}\n\nexport class CreateTicketPage extends React.Component<IProps, IStates> {\n\n    static RESOURCES_TO_LOAD = 1;\n\n    icd10Codes: DropdownChoice[];\n    cptCodes: DropdownChoice[];\n    facilities: DropdownChoice[];\n    doctors: DropdownChoice[];\n    agents: DropdownChoice[];\n    \n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            createTicketAttemp: false,\n            isIcd10CodesLoaded: false,\n            isSaving: false,\n            snackbarMessage: null,\n            loadedResources: 0,\n\n            ticket: {\n                ticketChannel: 'Call',\n                transactionNo: '9999-9999',\n                ticketSource: '',\n                memberName: '',\n                clientName: '',\n                brokerName: '',\n                facility: { value: '', label: '' },\n                department: '',\n                callerName: '',\n                contactNo: '',\n                ticketType: '',\n                specificType: '',\n                urgency: 'High',\n                agent: { id: '', name: '' },\n                additionalNotes: '',\n                additionalFiles: [],\n                ticketNo: '',\n                pmCaseId: '',\n                status: 'Open',\n                createdBy: { \n                    id: localStorage['user_id'], \n                    name: `${localStorage['first_name']} ${localStorage['last_name']}` \n                },\n                dateCreated: new Date(),\n                dateUpdated: new Date(),\n                dateEscalated: null\n            },\n            availment: {\n                provider: { value: '', label: '' },\n                diagnoses: []\n            },\n            confinement: {\n                provider: { value: '', label: '' },\n                dateAdmitted: new Date(),\n                confinementKind: '',\n                roomType: '',\n                costPerDay: 0,\n                doctor: { value: '', label: '' },\n                initialDiagnosis: { value: '', label: '' },\n                amount: 0\n            },\n            consultation: {\n                provider: { value: '', label: '' },\n                diagnosis: { value: '', label: '' },\n                doctor: { value: '', label: '' },\n                notes: '',\n                assessmentRemarks: '',\n                assessmentType: ''\n            },\n            inquiries: []\n        };\n\n        this.facilities = [];\n        this.agents = [];\n        this.doctors = [];\n        this.cptCodes = [];\n        this.icd10Codes = [];\n    }\n\n    componentDidMount() {\n        API.get('facilities',\n            (response) => {\n                this.facilities = response.map(facility => {\n                    return { \n                        value: facility.facility_id,\n                        label: facility.name \n                    }\n                });\n            },\n            (error) => {\n                console.log(error);\n            });\n\n\n\n        const tempIcd10Codes = localStorage.getItem('icd10_codes');\n        if (!tempIcd10Codes) {\n            API.get('icd10-codes?filter[limit]=1000',\n                (response) => {\n                    this.icd10Codes = response.map(icd10Code => {\n                        return { \n                            value: icd10Code.full_code,\n                            label: icd10Code.abbreviated_description \n                        };\n                    });\n                    localStorage.setItem('icd10_codes', JSON.stringify(this.icd10Codes));\n                    this.setState({isIcd10CodesLoaded: true});\n                },\n                (error) => {\n                    console.log(error);\n                });\n        } else {\n            this.icd10Codes = JSON.parse(tempIcd10Codes);\n            console.log(\"Using the local copy of ICD10 Codes\");\n        }\n        \n\n\n        const tempCptCodes = localStorage.getItem('cpt_codes');\n        if (!tempCptCodes) {\n            API.get('cpts',\n                (response) => {\n                    this.cptCodes = response.map(cptCode => {\n                        return {\n                            value: cptCode.code.toString(),\n                            label: cptCode.label \n                        };\n                    });\n                    localStorage.setItem('cpt_codes', JSON.stringify(this.cptCodes));\n                }, \n                (error) => {\n                    console.log(error);\n                });\n        } else {\n            this.cptCodes = JSON.parse(tempCptCodes);\n            console.log(\"Using the local copy of CPT Codes\");\n        }\n        \n\n\n        API.get('doctors',\n            (response) => {\n                this.doctors = response.map(doctor => {\n                    return {\n                        value: doctor._id,\n                        label: ('Dr. ' + doctor.first_name +  ' ' + doctor.last_name),\n                        params: [doctor.type]\n                    };\n                });\n            }, \n            (error) => {\n                console.log(error);\n            });\n\n        API.get(`tmp?filter[where][and][0][user_id]=${localStorage['user_id']}&filter[where][and][1][module]=Customer%20Care`,\n            (response) => {\n                console.debug(response);\n                response = response.filter(item => item.process === 'Create Ticket');\n                if (response.length > 0) {\n                    this.setState({\n                        lastSave: new Date(response[0].timestamp),\n                        member: response[0].data.member,\n                        ticket: response[0].data.ticket,\n                        availment: response[0].data.availment,\n                        confinement: response[0].data.confinement,\n                        consultation: response[0].data.confinement,\n                        inquiries: response[0].data.inquiries\n                    });\n                }\n                this.setState({loadedResources: this.state.loadedResources + 1});\n            },\n            (error) => {\n                console.log(error);\n                this.setState({loadedResources: this.state.loadedResources + 1});\n            });\n    }\n\n    uploadFiles = (nextAction: Function) => {\n        let hasFiles = false;\n\n        const files = new FormData();\n        this.state.ticket.additionalFiles.forEach(file => {\n            if (!file['field']) {\n                files.append(`supported_documents`, file);\n                hasFiles = true;\n            }\n        });\n\n        this.setState({isSaving: true});\n\n        if (hasFiles) {\n            API.postFormData('tmp/upload?path=customer-care', files,\n                (uploadResponse) => {\n                    nextAction(uploadResponse);\n                },\n                (error) => {\n                    console.log(error);\n                    this.setState({\n                        isSaving: false,\n                        snackbarMessage: 'Failed to upload files.'\n                    });\n                });\n        } else {\n            nextAction([]);\n        }\n    }\n\n    submitTicket = () => {\n\n        this.setState({createTicketAttemp: true});\n        const ticket = this.state.ticket;\n        const member = this.state.member;\n        const confinement = this.state.confinement;\n        const availment = this.state.availment;\n        const consultation = this.state.consultation;\n        const inquiries = this.state.inquiries;\n        \n        if (!member) return;\n\n        /* Confinement Details must have all contents */\n        if (ticket.ticketType === 'Availment' && ticket.specificType === 'Inpatient') {\n            if (confinement.provider.value === '' ||\n                confinement.confinementKind === '' ||\n                confinement.costPerDay === 0 ||\n                confinement.doctor.value === '' ||\n                confinement.initialDiagnosis.value === '' ||\n                confinement.roomType === '') {\n                return;\n            }\n        }\n\n        this.setState({isSaving: true});\n\n        this.uploadFiles((uploadResponse) => {\n            const payload = Payloads.getPostTicketPayload(\n                ticket, \n                member,\n                !uploadResponse.error && uploadResponse.length > 0 ? (\n                    this.state.ticket.additionalFiles\n                        .filter(file => file['field'])\n                        .concat(uploadResponse)\n                ) : (\n                    this.state.ticket.additionalFiles\n                ),\n                confinement, \n                availment, \n                inquiries, \n                consultation);\n            API.post('customer-care/tickets', JSON.stringify(payload),\n                (postTicketResponse) => { \n                    console.log(postTicketResponse);\n                    if (postTicketResponse['_id']) {\n                        console.log('Ticket No: '+postTicketResponse['id']);\n                        this.submitTicketProcessMaker(postTicketResponse['_id']);\n                    }     \n                },\n                (error) => {\n                    console.log(error);\n                    this.setState({\n                        isSaving: false,\n                        snackbarMessage: 'Failed to create ticket.'\n                    });\n                });\n        });\n    }\n\n    submitTicketProcessMaker = (ticketId: string) => {\n        let is_availment = false;\n        if (this.state.ticket.ticketType === 'Availment'){\n            is_availment=true;\n        }\n        let trigger_id = \"3905447335db2a32daafd33048658514\"; //should refer to redux createtickettrigger_id!!!\n        let body = {\n            \"pro_uid\" : \"1538417025dae8dae9ff7a9016454302\", //should refer to redux createticketproject_id!!!\n            \"tas_uid\":\"6092309955dae8db0a85907021073537\",   //should refer to redux createticketstarttask_id!!!\n            \"ticket_no\": ticketId,\n            \"can_be_resolved_imm\":0,\n            \"is_availment\":is_availment\n        };\n        console.log('Body:');\n        console.log(body);\n        //Start Case\n        Processmaker.post('cases', body,\n            (casesResponse) => {\n                if (casesResponse['app_uid']) {\n                    let case_id = casesResponse['app_uid'];\n                    //Trigger Case\n                    Processmaker.put(`cases/${case_id}/execute-trigger/${trigger_id}`, body,\n                        (triggerResponse) => {\n                            console.log('Trigger Response:');\n                            console.log(triggerResponse);\n\n                            Processmaker.put(`cases/${case_id}/variable`, body,\n                                (variableResponse) => {\n                                    console.log('Set Variable Response:');\n                                    console.log(variableResponse);\n\n                                    API.patch(`customer-care/tickets/${ticketId}`, { pmaker_case_uid: case_id },\n                                        (patchTicketResponse) => {\n                                            console.log('Patch Response:');\n                                            console.log(patchTicketResponse);\n                                            this.props.history.push('#/customer-care/');\n                                            window.location.reload();\n                                            this.setState({isSaving: false});\n                                        },\n                                        (error) => {\n                                            console.log(error);\n                                            this.setState({\n                                                isSaving: false,\n                                                snackbarMessage: 'Failed to create ticket.'\n                                            });\n                                        }\n                                    );\n                                }, \n                                (error) => {\n                                    console.log(error);\n                                    this.setState({\n                                        isSaving: false,\n                                        snackbarMessage: 'Failed to create ticket.'\n                                    });\n                                }\n                            );\n                        }, \n                        (error) => {\n                            console.log(error);\n                            this.setState({\n                                isSaving: false,\n                                snackbarMessage: 'Failed to create ticket.'\n                            });\n                        }\n                    );\n                }\n            }, \n            (error) => {\n                console.log(error);\n                this.setState({\n                    isSaving: false,\n                    snackbarMessage: 'Failed to create ticket.'\n                });\n            }\n        );\n    }\n\n    saveForNow = () => {\n        this.uploadFiles((uploadResponse) => {\n            console.log(uploadResponse);\n            const payload = {\n                user_id: localStorage['user_id'],\n                module: 'Customer Care',\n                process: 'Create Ticket',\n                timestamp: new Date(),\n                data: {\n                    member: this.state.member,\n                    ticket: {\n                        ...this.state.ticket,\n                        additionalFiles: !uploadResponse.error && uploadResponse.length > 0 ? (\n                            this.state.ticket.additionalFiles\n                                .filter(file => file['field'])\n                                .concat(uploadResponse)\n                        ) : (\n                            this.state.ticket.additionalFiles\n                        )\n                    },\n                    availment: this.state.availment,\n                    confinement: this.state.confinement,\n                    consultation: this.state.confinement,\n                    inquiries: this.state.inquiries\n                }\n            };\n            console.debug('Saving this: ', payload);\n            API.post('tmp', JSON.stringify(payload),\n                (response) => {\n                    console.log(response);\n                    if (response._id) {\n                        this.setState({\n                            isSaving: false,\n                            snackbarMessage: 'Progress saved.',\n                            lastSave: new Date()\n                        });\n                    } else {\n                        this.setState({\n                            isSaving: false,\n                            snackbarMessage: 'Failed to save progress.'\n                        });\n                    }\n                },\n                (error) => {\n                    console.log(error);\n                    this.setState({\n                        isSaving: false,\n                        snackbarMessage: 'Failed to save progress.'\n                    });\n                });\n        });\n    }\n\n    render(): JSX.Element {\n\n        return (\n            <>\n            <Grid container className='customer-care-main'>\n\n                {this.state.loadedResources !== CreateTicketPage.RESOURCES_TO_LOAD || this.state.isSaving ? (\n                    <div \n                        style={{\n                            backgroundColor: '#00000055', \n                            zIndex: 100, \n                            position: 'fixed', \n                            width: '100%', \n                            height: '100%'}}>\n                        <Loading height='15rem' size={100}/>\n                    </div>\n                    \n                ) : (null)}\n\n                <Snackbar\n\t\t\t        anchorOrigin={{\n\t\t\t          vertical: 'top',\n\t\t\t          horizontal: 'right',\n\t\t\t        }}\n\t\t\t        open={this.state.snackbarMessage ? true : false}\n\t\t\t        autoHideDuration={6000}\n\t\t\t        onClose={() => {\n                        this.setState({snackbarMessage: null});\n                    }}\n                    message={this.state.snackbarMessage} />\n\n\n                <MemberDataSection \n                    member={this.state.member}\n                    ticketStatus='Create'\n                    promptChooseMember={this.state.createTicketAttemp}\n                    onUpdateMemberStateChange={(member: MemberData) => {\n                        this.setState({member: member});\n                    }} />\n                \n                <TicketInfoSection \n                    ticket={this.state.ticket} \n                    facilities={this.facilities}\n                    agents={this.agents}\n                    createTicketAttemp={this.state.createTicketAttemp}\n                    refreshTicketState={() => {\n                        this.setState({ticket: Object.assign({}, this.state.ticket)});\n                    }} />\n\n                {this.state.ticket.ticketType === 'Availment' ? (\n                \n                    this.state.ticket.specificType === 'Outpatient Procedure' ? (  \n                        <AvailmentSection\n                            availment={this.state.availment}\n                            facilities={this.facilities}\n                            doctors={this.doctors}\n                            icd10Codes={this.icd10Codes}\n                            cptCodes={this.cptCodes}\n                            createTicketAttemp={this.state.createTicketAttemp}\n                            refreshAvailmentState={() => {\n                                this.setState({availment: Object.assign({}, this.state.availment)});\n                            }} />\n\n                    ) : this.state.ticket.specificType === 'Inpatient' ? ( \n                        <ConfinementSection\n                            confinement={this.state.confinement}\n                            facilities={this.facilities}\n                            doctors={this.doctors}\n                            cptCodes={this.icd10Codes}\n                            createTicketAttemp={this.state.createTicketAttemp}\n                            refreshConfinementState={() => {\n                                this.setState({confinement: this.state.confinement});\n                            }} />\n                    ) : this.state.ticket.specificType === 'Emergency Room' ? (\n                        <EmergencyRoomSection\n                            availment={this.state.availment}\n                            facilities={this.facilities}\n                            doctors={this.doctors}\n                            icd10Codes={this.icd10Codes}\n                            cptCodes={this.cptCodes}\n                            createTicketAttemp={this.state.createTicketAttemp}\n                            refreshAvailmentState={() => {\n                                this.setState({availment: this.state.availment});\n                            }} />\n                        \n                    ) : this.state.ticket.specificType === 'Consultation' ? ( \n                        <ConsultationSection\n                            consultation={this.state.consultation}\n                            facilities={this.facilities}\n                            doctors={this.doctors}\n                            icd10Codes={this.icd10Codes}\n                            createTicketAttemp={this.state.createTicketAttemp}\n                            refreshConsultationState={() => {\n                                this.setState({consultation: this.state.consultation});\n                            }} />\n                    ) : (null)\n\n                ) : this.state.ticket.ticketType === 'Inquiry' ? (\n                    <InquirySection\n                        inquiries={this.state.inquiries}\n                        refreshInquiryState={() => {\n                            this.setState({inquiries: this.state.inquiries});\n                        }} />\n                ) : (null)}\n            </Grid>\n\n            <TicketFooter \n                lastSave={this.state.lastSave}\n                forceShowResolveButton={this.state.ticket.ticketType === 'Inquiry' ? true : false}\n                onSaveForNow={() => {\n                    this.saveForNow();\n                }} \n                onSubmitTicket={() => {\n                    this.submitTicket();\n                }}\n                onResolveTicket={() => {\n                    alert('No implementation yet');\n                }} />\n            </>\n        );\n    }\n}","\nimport * as React from 'react';\n\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { Grid, TableCell, TableRow } from '@material-ui/core';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { UpdateData, AccommodationData, DiagnosisData, PhysicianData, ProcedureData, ItemData } from '../UpdateTicketProps';\nimport { DropdownChoice } from 'Pages/CustomerCarePage/Models';\n\ninterface IProps {\n    ticketNo: string;\n    updates: UpdateData[];\n    accommodations: AccommodationData[];\n    diagnoses: DiagnosisData[];\n    physicians: PhysicianData[];\n    procedures: ProcedureData[];\n    items: ItemData[];\n\n    provider: DropdownChoice;\n    dateAdmitted: Date;\n    confinementKind: string;\n\n    coverage: DropdownChoice;\n    philhealthAmount: number;\n    finalBill: number;\n    dischargeDate: Date | null;\n    setTabSelected: (value: number) => void;\n}\n\nexport class SummarySection extends React.Component<IProps> {\n\n    constructor(props: IProps) {\n        super(props);\n    }\n\n    getTotalAccommodationCost = () => {\n        let totalCost = 0;\n        this.props.accommodations.map(accommodation => {\n            totalCost += accommodation.costPerDay * accommodation.days;\n        });\n        return totalCost;\n    }\n\n    getTotalPhysicianCost = () => {\n        let totalCost = 0;\n        this.props.physicians.map(physician => {\n            totalCost += physician.amount;\n        });\n        return totalCost;\n    }\n\n    getTotalProcedureCost = () => {\n        let totalCost = 0;\n        this.props.procedures.map(procedure => {\n            totalCost += procedure.amount;\n        });\n        return totalCost;\n    }\n\n    getTotalItemCost = () => {\n        let totalCost = 0;\n        this.props.items.map(item => {\n            totalCost += item.amount;\n        });\n        return totalCost;\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n                <div className='header-1'>Review Summary</div>\n                {this.renderSection('UPDATES', 'update', 2,\n                    <CustomTable\n                        className='custom-table'\n                        rows={this.props.updates}\n                        renderHeader={() => {\n                            return (\n                                <>\n                                <TableCell>Remarks</TableCell>\n                                <TableCell style={{width: '200px'}}>As of Date</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '200px'}}>Running Hospital Bill</TableCell>\n                                </>\n                            );\n                        }}\n                        renderRow={(update: UpdateData, index: number) => {\n                            const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                            return (\n                                <TableRow style={{backgroundColor: backgroundColor}}>\n                                    <TableCell>{update.remarks}</TableCell>\n                                    <TableCell>{GlobalFunction.toCommonDateString(update.date)}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(update.hospitalBill, true)} PHP`}</TableCell>\n                                </TableRow>\n                            );\n                        }} />\n                )}\n                \n                {this.renderSection('ROOM ACCOMMODATIONS', 'room', 3, \n                    <CustomTable\n                        className='custom-table'\n                        rows={this.props.accommodations}\n                        renderHeader={() => {\n                            return (\n                                <>\n                                <TableCell>Room Type</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '200px'}}>No. of Days</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '300px'}}>Cost Per Day</TableCell>\n                                </>\n                            );\n                        }}\n                        renderRow={(accommodation: AccommodationData, index: number) => {\n                            const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                            return (\n                                <TableRow style={{backgroundColor: backgroundColor}}>\n                                    <TableCell>{accommodation.roomType}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{accommodation.days}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(accommodation.costPerDay, true)} PHP`}</TableCell>\n                                </TableRow>\n                            );\n                        }} />,\n                        this.getTotalAccommodationCost()\n                )}\n\n                {this.renderSection('DIAGNOSES', 'diagnosis', 4, \n                    <CustomTable\n                        className='custom-table'\n                        rows={this.props.diagnoses}\n                        renderHeader={() => {\n                            return (\n                                <>\n                                <TableCell style={{width: '300px'}}>Diagnosis</TableCell>\n                                <TableCell>Remarks</TableCell>\n                                <TableCell style={{textAlign: 'center', width: '100px'}}>Type</TableCell>\n                                <TableCell style={{textAlign: 'center', width: '175px'}}>Primary Diagnosis?</TableCell>\n                                </>\n                            );\n                        }}\n                        renderRow={(diagnosis: DiagnosisData, index: number) => {\n                            const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                            return (\n                                <TableRow style={{backgroundColor: backgroundColor}}>\n                                    <TableCell>{`${diagnosis.diagnosis.value} - ${diagnosis.diagnosis.label}`}</TableCell>\n                                    <TableCell>{diagnosis.remarks}</TableCell>\n                                    <TableCell style={{textAlign: 'center'}}>{diagnosis.isFinal ? 'Final' : 'Initial'}</TableCell>\n                                    <TableCell style={{textAlign: 'center'}}>{diagnosis.isPrimary ? 'Yes' : 'No'}</TableCell>\n                                </TableRow>\n                            );\n                        }} />\n                )}\n                \n                {this.renderSection('PHYSICIANS', 'physicians', 5, \n                    <CustomTable\n                        className='custom-table'\n                        rows={this.props.physicians}\n                        renderHeader={() => {\n                            return (\n                                <>\n                                <TableCell style={{width: '250px'}}>Specialization - Doctor Name</TableCell>\n                                <TableCell style={{width: '100px'}}>Diagnosis</TableCell>\n                                <TableCell>Remarks</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '125px'}}>No. of Visits</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '200px'}}>Amount</TableCell>\n                                </>\n                            );\n                        }}\n                        renderRow={(physician: PhysicianData, index: number) => {\n                            const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                            return (\n                                <TableRow style={{backgroundColor: backgroundColor}}>\n                                    {physician.physician.params? (\n                                        <TableCell>\n                                            <div className='text'>{`${physician.physician.params[0]} - ${physician.physician.label}`}</div>\n                                            <div className='light-text'>{`${physician.physician.params[1]} Physician`}</div>\n                                        </TableCell>\n                                    ) : ''}\n                                    <TableCell>{physician.diagnosis.value}</TableCell>\n                                    <TableCell>{physician.remarks}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{physician.visits}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(physician.amount, true)} PHP`}</TableCell>\n                                </TableRow>\n                            );\n                        }} />,\n                        this.getTotalPhysicianCost()\n                )}\n                \n                {this.renderSection('PROCEDURES', 'procedures', 6,\n                    <CustomTable\n                        className='custom-table'\n                        rows={this.props.procedures}\n                        renderHeader={() => {\n                            return (\n                                <>\n                                <TableCell style={{width: '200px'}}>Procedure</TableCell>\n                                <TableCell style={{width: '100px'}}>Diagnosis</TableCell>\n                                <TableCell style={{width: '175px'}}>Doctor</TableCell>\n                                <TableCell style={{width: '150px'}}>Date</TableCell>\n                                <TableCell style={{minWidth: '100px'}}>Remarks</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '150px'}}>Amount</TableCell>\n                                </>\n                            );\n                        }}\n                        renderRow={(procedure: ProcedureData, index: number) => {\n                            const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                            return (\n                                <TableRow style={{backgroundColor: backgroundColor}}>\n                                    <TableCell>{`${procedure.procedure.value} - ${procedure.procedure.label}`}</TableCell>\n                                    <TableCell>{procedure.diagnosis.value}</TableCell>\n                                    <TableCell>{procedure.physician.label}</TableCell>\n                                    <TableCell>{GlobalFunction.toCommonDateString(procedure.date)}</TableCell>\n                                    <TableCell>{procedure.remarks}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(procedure.amount, true)} PHP`}</TableCell>\n                                </TableRow>\n                            );\n                        }} />,\n                        this.getTotalProcedureCost()\n                )}\n                \n                {this.renderSection('OTHER DETAILS', 'item', 8, \n                    <CustomTable \n                        className='custom-table'\n                        rows={this.props.items}\n                        renderHeader={() => {\n                            return (\n                                <>\n                                <TableCell>Item</TableCell>\n                                <TableCell style={{width: '250px'}}>Type</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '250px'}}>Amount</TableCell>\n                                </>\n                            );\n                        }}\n                        renderRow={(item: ItemData, index: number) => {\n                            const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                            return (\n                                <TableRow style={{backgroundColor: backgroundColor}}>\n                                    <TableCell>{item.name}</TableCell>\n                                    <TableCell>{item.type.label}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(item.amount, true)} PHP`}</TableCell>\n                                </TableRow>\n                            );\n                        }} />,\n                        this.getTotalItemCost()\n                )}\n                \n                <div className='sub-section'>\n                    <Grid container>\n                        <Grid item xs={4}>\n                            <div className='header-2'>PHILHEALTH</div>\n                            <div className='sub-section'>\n                                <div className='light-text'>COVERAGE</div>\n                                <div className='small-text'>{this.props.coverage.label}</div>\n                            </div>\n                            <div className='sub-section'>\n                                <div className='light-text'>AMOUNT</div>\n                                <div className='small-text'>{GlobalFunction.formatNumber(this.props.philhealthAmount, true) + \" PHP\"}</div>\n                            </div>\n                            <div className='sub-section'>\n                                <div className='light-text'>TICKET NUMBER</div>\n                                <div className='small-text'>{this.props.ticketNo}</div>\n                            </div>\n                        </Grid>\n                        <Grid item xs={4}>\n                            <div className='header-2'>CONFINEMENT</div>\n                            <div className='sub-section'>\n                                <div className='light-text'>PROVIDER</div>\n                                <div className='small-text'>{this.props.provider.value + ' - ' + this.props.provider.label}</div>\n                            </div>\n                            <div className='sub-section'>\n                                <div className='light-text'>DATE ADMITTED</div>\n                                <div className='small-text'>{GlobalFunction.toCommonDateString(this.props.dateAdmitted)}</div>\n                            </div>\n                            <div className='sub-section'>\n                                <div className='light-text'>KIND OF CONFINEMENT</div>\n                                <div className='small-text'>{this.props.confinementKind}</div>\n                            </div>\n                        </Grid>\n                        <Grid item xs={4}>\n                            <div className='header-2'>DISCHARGE DETAILS</div>\n                            <div className='sub-section'>\n                                <div className='light-text'>FINAL HOSPITAL BILL AMOUNT</div>\n                                <div className='small-text'>{GlobalFunction.formatNumber(this.props.finalBill, true) + ' PHP'}</div>\n                            </div>\n                            <div className='sub-section'>\n                                <div className='light-text'>DISCHARGE DATE</div>\n                                <div className='small-text'>\n                                    {this.props.dischargeDate ? (\n                                        GlobalFunction.toCommonDateString(this.props.dischargeDate)\n                                    ) : '---'}\n                                </div>\n                            </div>\n                        </Grid>\n                        <Grid item xs={4}>\n                            <TextButton \n                                label='Edit PhilHealth' \n                                onClick={() => {\n                                    window.scroll(0, -window.pageYOffset);\n                                    this.props.setTabSelected(7);\n                                }}/>\n                        </Grid>\n                        <Grid item xs={4}>\n                            <TextButton \n                                label='Edit Confinement Details' \n                                onClick={() => {\n                                    window.scroll(0, -window.pageYOffset);\n                                    this.props.setTabSelected(3);\n                                }}/>\n                        </Grid>\n                        <Grid item xs={4}>\n                            <TextButton\n                                label='Edit Discharge Details' \n                                onClick={() => {\n                                    window.scroll(0, -window.pageYOffset);\n                                    this.props.setTabSelected(7);\n                                }}/>\n                        </Grid>\n                    </Grid>\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderSection(headerName: string, miniText: string, tabIndex: number, table: JSX.Element, totalValue?: number): JSX.Element {\n        return (\n            <div className='sub-section'>\n                <div style={{float: 'right'}}>\n                    <TextButton \n                        label={`Add / Edit ${miniText}`} \n                        onClick={() => {\n                            window.scroll(0, -window.pageYOffset);\n                            this.props.setTabSelected(tabIndex);\n                        }}/>\n                </div>\n                <div className='header-2'>{headerName}</div>\n                {table}\n                {totalValue ? (\n                    <div className='sub-section'>\n                        <div style={{float: 'right'}}>\n                            <span className='small-text'>TOTAL AMOUNT</span>\n                            <span style={{marginLeft: '1rem'}} />\n                            <span className='header-2'>\n                                {GlobalFunction.formatNumber(totalValue, true) + ' PHP'}\n                            </span>\n                        </div>\n                </div>\n                ) : null}\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Table, TableBody, TableCell, TableHead, TableRow } from '@material-ui/core';\nimport './../../Components/component-style.scss';\nimport { faPen, faMinusCircle, faCheckCircle, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport { IconButton } from '../../Components/IconButton';\n\ninterface IProps {\n    className: string;\n    placeholder: string;\n    cols: string[];\n    rows: string[][] | any;\n    defaultRows?: number;\n\n    onSaveEditRow: (rowIndex: number, value: any) => void;\n    onDeleteRow: (rowIndex: number) => void; \n\n    /* \n     * Use this to stylize the column cells.\n     * rowIndex: the row index you want to style.\n     * colIndex: the column index you want to style.\n     * value: give you control to manipulate the value.\n     */\n    onFormat?: (rowIndex: number, colIndex: number, value: any) => JSX.Element;\n\n    /*\n     * Use this to stylize the column headers.\n     * colIndex: the column index you want to style.\n     * name: the header name at will appear.\n     */\n    onHeaderFormat?: (colIndex: number, name: string) => JSX.Element;\n\n    /* \n     * Use this when you want to stylize the column cell edit field\n     * colIndex: the column index you want to style.\n     * value: give you control to manipulate the value.\n     * onChange: a function called when user tried to type/input.\n     * - value: \n     */\n    editField: (colIndex: number, value: any, onChange: (value: any) => void) => JSX.Element;\n}\n\ninterface IStates {\n    rowToEdit: number;\n    data: any;\n}\n\nexport class CRUDTable extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            rowToEdit: -1,\n\n            data: {}\n        }\n    }\n\n    handleOnChange = (attrName: string) => (value: any) => {\n        this.setState(prevState => ({\n            data: {\n                ...prevState.data,\n                [attrName]: value\n            }\n        }));\n    }\n\n    renderCell(row: number, column: number, attrName: string, value: any): JSX.Element {\n        return (\n            <TableCell key={column}>\n                {this.state.rowToEdit === row ? (\n                    this.props.editField ? this.props.editField(column, this.state.data[attrName], this.handleOnChange(attrName)) : value  \n                ) : (\n                    this.props.onFormat ? this.props.onFormat(row, column, value) : value\n                )}\n            </TableCell>\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <>\n            <div className='header-2'>{this.props.placeholder}</div>\n            <Table className={(this.props.className ? this.props.className : '') + ' table'}>\n                <TableHead>\n                    <TableRow>\n                        {this.props.cols.map((colName, index) => {\n                            return (\n                                this.props.onHeaderFormat ? (\n                                    this.props.onHeaderFormat(index, colName)\n                                ) : (\n                                    <TableCell key={index}>{colName}</TableCell>\n                                )\n                            );\n                        })}\n                        <TableCell className='last-column'>\n                        </TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {this.props.rows.map((row, index1) => {\n                        const backgroundColor = (index1 % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                        return (\n                            <TableRow style={{backgroundColor: backgroundColor}} key={index1}>\n                                {Object.keys(row).map((attrName, index2) => {\n                                    return (this.renderCell(index1, index2, attrName, row[attrName]));\n                                })}\n                                <TableCell className='last-column'>\n                                    {this.state.rowToEdit !== index1 ? (\n                                        <>\n                                        <div style={{display: 'inline-block', paddingRight: '0.5rem'}}>\n                                            <IconButton icon={faPen} onClick={() => {\n                                                this.setState({rowToEdit: index1});\n                                                this.setState({data: row});\n                                            }} />\n                                        </div>\n                                        <div style={{display: 'inline-block'}}>\n                                            <IconButton icon={faMinusCircle} onClick={() => {\n                                                this.props.onDeleteRow(index1)\n                                            }} />\n                                        </div>\n                                        </>\n                                    ) : ( \n                                        <>\n                                        <div style={{display: 'inline-block', paddingRight: '0.5rem'}}>\n                                            <IconButton icon={faCheckCircle} onClick={() => {\n                                                this.props.onSaveEditRow(index1, this.state.data);\n                                                this.setState({rowToEdit: -1});\n                                            }} />\n                                        </div>\n                                        <div style={{display: 'inline-block'}}>\n                                            <IconButton icon={faTimesCircle} onClick={() => {\n                                                this.setState({rowToEdit: -1});\n                                            }} />\n                                        </div>\n                                        </>\n                                    )}\n                                </TableCell>\n                            </TableRow>\n                        );\n                    })}\n                </TableBody>\n            </Table>\n            </>\n        );\n    }\n}","import * as React from 'react';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { Grid, TableCell } from '@material-ui/core';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\n\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { DatePicker } from 'Pages/CustomerCarePage/Components/DatePicker';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { DetailedNumberField } from 'Pages/CustomerCarePage/Components/DetailedNumberField';\nimport { UpdateData } from '../UpdateTicketProps';\n\nimport { CRUDTable } from './CRUDTable';\nimport { CustomCheckbox } from 'Pages/CustomerCarePage/Components/CustomCheckbox';\nimport { ConfinementDetails } from '../UpdateTicketPage';\n\ninterface IProps {\n    confinement: ConfinementDetails;\n    updates: UpdateData[];\n    state: UpdateData;\n    refreshUpdatesState: () => void;\n}\n\nexport class UpdateSection extends React.Component<IProps> {\n\n    constructor(props: IProps) {\n        super(props);\n    }\n\n    onFormatTableHeader = (colIndex: number, value: any) => {\n        return (\n            colIndex === 2 ? (\n                <TableCell style={{textAlign: 'right', minWidth: '200px'}}>{value}</TableCell>\n            ) : (\n                <TableCell style={{minWidth: '150px'}}>{value}</TableCell>\n            )\n        );\n    }\n\n    onFormatCRUDTable = (colIndex: number, value: any) => {\n        return (\n            colIndex === 1 ? (\n                <div>{GlobalFunction.toCommonDateString(value)}</div>\n            ) : colIndex === 2 ? (\n                <div style={{textAlign: 'right'}}>\n                    {GlobalFunction.formatNumber(value, true) + ' PHP'}\n                </div>\n            ) : (value)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Add Update</div>\n                <div className='sub-section'>\n                    <Grid container spacing={2}>\n                        <Grid item xs={6}>\n                            <InputField \n                                placeholder='Remarks'\n                                value={this.props.state.remarks}\n                                charLimit={100}\n                                onChange={(value: string) => {\n                                    this.props.state.remarks = value;\n                                    this.props.refreshUpdatesState();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <DatePicker \n                                placeholder='As of Date'\n                                value={this.props.state.date}\n                                onChange={(value: Date) => {\n                                    this.props.state.date = value;\n                                    this.props.refreshUpdatesState();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <DetailedNumberField \n                                placeholder='Running Hospital Bill'\n                                detail='PHP'\n                                isFloat={true}\n                                value={this.props.state.hospitalBill}\n                                onChange={(value: number) => {\n                                    this.props.state.hospitalBill = value;\n                                    this.props.refreshUpdatesState();\n                                }}/>\n                        </Grid>\n                    </Grid>\n                    <div style={{paddingTop: '5px'}} />\n                    <TextButton \n                        label='Add update' \n                        icon={faPlus}\n                        onClick={() => {\n                            var state = this.props.state;\n                            const tempData = {\n                                remarks: state.remarks,\n                                date: state.date,\n                                hospitalBill: state.hospitalBill\n                            }\n                            this.props.updates.unshift(tempData);\n                            this.props.state.remarks = '';\n                            this.props.state.date = new Date();\n                            this.props.state.hospitalBill = 0;\n                            this.props.refreshUpdatesState();\n                        }}/>\n                </div>\n                \n                <div className='sub-section'>\n                    <CRUDTable \n                        className='custom-table'\n                        placeholder='UPDATES'\n                        \n                        cols={['Remarks', 'As of Date', 'Running Hospital Bill']}\n                        rows={this.props.updates} \n                        onSaveEditRow={(index: number, data: any) => {\n                            this.props.updates[index] = data;\n                            this.props.refreshUpdatesState();\n                        }}\n                        onDeleteRow={(index: number) => {\n                            this.props.updates.splice(index, 1);\n                            this.props.refreshUpdatesState();\n                        }}\n                        onHeaderFormat={(colIndex: number, colName: string) => {\n                            return this.onFormatTableHeader(colIndex, colName);\n                        }} \n                        onFormat={(_rowIndex: number, colIndex: number, value: any) => {\n                            return this.onFormatCRUDTable(colIndex, value);\n                        }} \n                        editField={(colIndex: number, currentVal: any, onChange: any) => {\n                            if (colIndex === 0) {\n                                return (\n                                    <InputField\n                                        value={currentVal}\n                                        onChange={(value: string) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 1) {\n                                return (\n                                    <DatePicker\n                                        value={currentVal}\n                                        onChange={(value: Date) => onChange(value)}/>\n                                );\n                            } else {\n                                return (\n                                    <DetailedNumberField\n                                        detail='PHP'\n                                        isFloat={true}\n                                        value={currentVal}\n                                        onChange={(value: number) => onChange(value)}/>\n                                );\n                            }\n                        }} />\n                </div>\n                <div className='sub-section'>\n                    <div className='header-2'>OTHER DETAILS</div>                    \n                    <CustomCheckbox \n                        label='Gift Given?'\n                        value={this.props.confinement.giftGiven}\n                        onChange={(value: boolean) => {\n                            this.props.confinement.giftGiven = value;\n                            this.props.refreshUpdatesState();\n                        }} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { Grid, TableCell } from '@material-ui/core';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\n\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { DetailedDropdown } from 'Pages/CustomerCarePage/Components/DetailedDropdown';\nimport { NumberField } from 'Pages/CustomerCarePage/Components/NumberField';\nimport { DetailedNumberField } from 'Pages/CustomerCarePage/Components/DetailedNumberField';\nimport { CRUDTable } from 'Pages/CustomerCarePage/UpdateTicketPage/Components/CRUDTable';\nimport { DatePicker } from 'Pages/CustomerCarePage/Components/DatePicker';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { DropdownChoice } from 'Pages/CustomerCarePage/Models';\nimport { AccommodationData } from '../UpdateTicketProps';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\n\ninterface IProps {\n    accommodations: AccommodationData[];\n    state: AccommodationData;\n    facilitiesList: DropdownChoice[];\n    provider: DropdownChoice;\n    dateAdmitted: Date;\n    confinementKind: string;\n    refreshAccommodationsState: () => void;\n}\n\nexport class AccommodationsSection extends React.Component<IProps> {\n\n    confinementTypes: DropdownChoice[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.confinementTypes = [\n            { value: '1', label: 'Elective / Scheduled' },\n            { value: '2', label: 'ER leading to confinement' }\n        ];\n    }\n\n    onFormatTableHeader = (colIndex: number, value: any) => {\n        return (\n            colIndex === 1 || colIndex === 2 ? (\n                <TableCell style={{textAlign: 'right', minWidth: '200px'}}>{value}</TableCell>\n            ) : (\n                <TableCell style={{minWidth: '150px'}}>{value}</TableCell>\n            )\n        );\n    }\n\n    onFormatCRUDTable = (colIndex: number, value: any) => {\n        const textAlign = (colIndex !== 0 ? 'right' : 'left');\n        return (\n            <div style={{textAlign: textAlign}}>\n                {colIndex === 2 ? \n                    GlobalFunction.formatNumber(value, true) + ' PHP' : \n                    value}\n            </div>\n        );\n    }\n\n    getTotalCost = () => {\n        let totalCost = 0;\n        this.props.accommodations.map(accommodation => {\n            totalCost += accommodation.costPerDay * accommodation.days;\n        });\n\n        return totalCost;\n    }\n\n    renderConfinementDetails(): JSX.Element {\n        return (\n            <div className='sub-section'>\n                <div className='header-2'>CONFINEMENT DETAILS</div>\n                <Grid container spacing={2}>\n                    <Grid item xs={6}>\n                        <DetailedDropdown \n                            placeholder='Provider'\n                            value={this.props.provider}\n                            choices={this.props.facilitiesList}\n                            disabled={true}\n                            onChange={(_value: DropdownChoice) => null}/>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <DatePicker \n                            placeholder='Date Admitted'\n                            value={this.props.dateAdmitted}\n                            disabled={true}\n                            onChange={(_value: Date) => null}/>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <Dropdown \n                            placeholder='Kind of Confinement'\n                            value={{ value: '', label: this.props.confinementKind }}\n                            choices={this.confinementTypes}\n                            disabled={true}\n                            onChange={(_value: DropdownChoice) => null}/>\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n\n    renderAddRoomAccommodation(): JSX.Element {\n        return (\n            <div className='sub-section'>\n                <Grid container spacing={2}>\n                    <Grid item xs={6}>\n                        <InputField \n                            placeholder='Room Type'\n                            value={this.props.state.roomType}\n                            onChange={(value: string) => {\n                                this.props.state.roomType = value;\n                                this.props.refreshAccommodationsState();\n                            }}/>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <NumberField \n                            placeholder='No. of Days'\n                            value={this.props.state.days}\n                            error={this.props.state.days < 1 || isNaN(this.props.state.days)}\n                            onChange={(value: number) => {\n                                this.props.state.days = value;\n                                this.props.refreshAccommodationsState();\n                            }}/>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <DetailedNumberField \n                            placeholder='Cost Per Day'\n                            detail='PHP'\n                            isFloat={true}\n                            value={this.props.state.costPerDay}\n                            onChange={(value: number) => {\n                                this.props.state.costPerDay = value;\n                                this.props.refreshAccommodationsState();\n                            }}/>\n                    </Grid>\n                </Grid>\n                <div style={{paddingTop: '5px'}} />\n                {this.props.state.days > 0 ? (\n                    <TextButton \n                        label='Add room' \n                        icon={faPlus}\n                        onClick={() => {\n                            var state = this.props.state;\n                            const tempData = {\n                                roomType: state.roomType,\n                                days: state.days,\n                                costPerDay: state.costPerDay\n                            }\n                            this.props.accommodations.unshift(tempData);\n                            this.props.state.roomType = '';\n                            this.props.state.days = 0;\n                            this.props.state.costPerDay = 0;\n                            this.props.refreshAccommodationsState();\n                        }}/>\n                ) : null}\n            </div>\n        );\n    }\n\n    render(): JSX.Element {\n\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Add Room Accommodation</div>\n                {this.renderAddRoomAccommodation()}\n                <div className='sub-section' />\n                {this.renderConfinementDetails()}\n                <div className='sub-section'>\n                    <CRUDTable \n                        className='custom-table'\n                        placeholder='ROOM ACCOMMODATIONS'\n                        cols={['Room Type', 'No. of Days', 'Cost Per Day']} \n                        rows={this.props.accommodations}\n                        onSaveEditRow={(index: number, data: any) => {\n                            this.props.accommodations[index] = data;\n                            this.props.refreshAccommodationsState();\n                        }}\n                        onDeleteRow={(index: number) => {\n                            this.props.accommodations.splice(index, 1);\n                            this.props.refreshAccommodationsState();\n                        }}\n                        onHeaderFormat={(colIndex: number, colName: string) => {\n                            return this.onFormatTableHeader(colIndex, colName);\n                        }} \n                        onFormat={(_rowIndex: number, colIndex: number, value: any) => {\n                            return this.onFormatCRUDTable(colIndex, value);\n                        }}\n                        editField={(colIndex: number, currentVal: any, onChange: any) => {\n                            if (colIndex === 0) {\n                                return (\n                                    <InputField\n                                        value={currentVal}\n                                        onChange={(value: string) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 1) {\n                                return (\n                                    <NumberField\n                                        value={currentVal}\n                                        onChange={(value: number) => onChange(value < 1 ? 1 : value)}/>\n                                );\n                            } else {\n                                return (\n                                    <DetailedNumberField\n                                        detail='PHP'\n                                        isFloat={true}\n                                        value={currentVal}\n                                        onChange={(value: number) => onChange(value)}/>\n                                );\n                            }\n                        }} />\n                    <div className='sub-section'>\n                        <div style={{float: 'right'}}>\n                            <span className='small-text'>TOTAL AMOUNT</span>\n                            <span style={{marginLeft: '1rem'}} />\n                            <span className='header-2'>{GlobalFunction.formatNumber(this.getTotalCost(), true) + ' PHP'}</span>\n                        </div>\n                    </div>\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\nimport { Radio } from '@material-ui/core';\n\ninterface IProps {\n    label?: string;\n    checkedCondition: boolean;\n    disabled?: boolean;\n    onChange: () => void;\n}\n\nexport class CustomRadio extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        return (\n            <div className='check-box-area'>\n                <Radio\n                    disabled={this.props.disabled}\n                    className='check-box'\n                    checked={this.props.checkedCondition}\n                    onChange={(_event: React.ChangeEvent<HTMLInputElement>) => {\n                        this.props.onChange();\n                    }} />\n                {this.props.label ? (\n                    <span className='text' style={{paddingLeft: '10px'}}>{this.props.label}</span>\n                ) : null}\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { Grid, TableCell } from '@material-ui/core';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\n\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { DetailedDropdown } from 'Pages/CustomerCarePage/Components/DetailedDropdown';\nimport { CRUDTable } from 'Pages/CustomerCarePage/UpdateTicketPage/Components/CRUDTable';\nimport { DropdownChoice } from 'Pages/CustomerCarePage/Models';\nimport { CustomCheckbox } from 'Pages/CustomerCarePage/Components/CustomCheckbox';\nimport { DiagnosisData, PhysicianData, ProcedureData } from '../UpdateTicketProps';\nimport { CustomRadio } from 'Pages/CustomerCarePage/Components/CustomRadio';\n\ninterface IProps {\n    diagnoses: DiagnosisData[];\n    state: DiagnosisData;\n    physicians: PhysicianData[];\n    procedures: ProcedureData[];\n    diagnosesList: DropdownChoice[];\n    primaryDiagnosisIndex: number;\n    refreshDiagnosisStateChange: () => void;\n    setPrimaryDiagnosisIndex: (index: number) => void;\n}\n\nexport class DiagnosesSection extends React.Component<IProps> {\n\n    getFilteredICD10Codes(): DropdownChoice[] {\n        let filteredIcd10: DropdownChoice[] = [];\n        for (var i = 0; i < this.props.diagnosesList.length; i++) {\n            let isSame = false;\n            for (var j = 0; j < this.props.diagnoses.length; j++) {\n                isSame = (\n                    this.props.diagnoses[j].diagnosis.value === \n                    this.props.diagnosesList[i].value ? true : isSame);\n            }\n            if (!isSame) {\n                filteredIcd10 = filteredIcd10.concat(this.props.diagnosesList[i]);\n            }\n        }\n        return filteredIcd10;\n    }\n\n    onFormatTableHeader = (colIndex: number, value: any) => {\n        return (\n            colIndex === 0 || colIndex === 1 ? (\n                <TableCell style={{minWidth: '200px', maxWidth: '200px'}}>{value}</TableCell>\n            ) : colIndex === 3 ? (\n                <TableCell style={{minWidth: '200px', maxWidth: '200px', textAlign: 'center'}}>{value}</TableCell>\n            ) : (\n                <TableCell style={{minWidth: '100px', maxWidth: '100px'}}>{value}</TableCell>\n            )\n        );\n    }\n\n    onFormatCRUDTable = (rowIndex: number, colIndex: number, value: any) => {\n        return (\n            colIndex === 0 ? (\n                <div style={{minWidth: '200px', maxWidth: '200px'}}>\n                    {value.value + \" - \" + value.label}\n                </div>\n            ) : colIndex === 2 ? (\n            <div>{value ? 'Final' : 'Initial'}</div>\n            ) : colIndex === 3 ? (\n                <div style={{textAlign: 'center'}}>\n                    <CustomRadio\n                        disabled={!this.props.diagnoses[rowIndex].isFinal}\n                        checkedCondition={this.props.primaryDiagnosisIndex === rowIndex}\n                        onChange={() => {\n                            this.props.setPrimaryDiagnosisIndex(rowIndex);\n                        }} />\n                </div>\n            ) : (value)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Add Diagnosis</div>\n                <div className='sub-section'>\n                    <Grid container spacing={2}>\n                        <Grid item xs={6}>\n                            <DetailedDropdown \n                                placeholder='Diagnosis'\n                                value={this.props.state.diagnosis}\n                                choices={this.getFilteredICD10Codes()}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.state.diagnosis = value;\n                                    this.props.refreshDiagnosisStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <InputField \n                                placeholder='Remarks'\n                                value={this.props.state.remarks}\n                                charLimit={100}\n                                onChange={(value: string) => {\n                                    this.props.state.remarks = value;\n                                    this.props.refreshDiagnosisStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <CustomCheckbox \n                                label='Final Diagnosis?'\n                                value={this.props.state.isFinal}\n                                onChange={(value: boolean) => {\n                                    this.props.state.isFinal = value;\n                                    this.props.refreshDiagnosisStateChange();\n                                }}/>\n                        </Grid>\n                        \n                    </Grid>\n                    <div style={{paddingTop: '5px'}} />\n                        <TextButton \n                            label='Add diagnosis' \n                            icon={faPlus}\n                            onClick={() => {\n                                var data = this.props.state;\n                                const tempData = {\n                                    diagnosis: data.diagnosis,\n                                    remarks: data.remarks,\n                                    isFinal: data.isFinal,\n                                    isPrimary: true\n                                }\n                                this.props.diagnoses.unshift(tempData);\n                                this.props.state.diagnosis = { value: '', label: '' };\n                                this.props.state.remarks = '';\n                                this.props.state.isFinal = false;\n                                this.props.refreshDiagnosisStateChange();\n                                this.props.setPrimaryDiagnosisIndex(this.props.primaryDiagnosisIndex + 1);\n                            }}/>\n                </div>\n                <div className='sub-section'>\n                    <CRUDTable \n                        className='custom-table'\n                        placeholder='DIAGNOSES'\n                        \n                        cols={['Diagnosis', 'Remarks', 'Type', 'Primary Diagnosis?']} \n                        rows={this.props.diagnoses}\n                        onSaveEditRow={(index: number, data: any) => {\n                            this.props.diagnoses[index] = data;\n                            this.props.refreshDiagnosisStateChange();\n                        }}\n                        onDeleteRow={(index: number) => {\n                            this.props.physicians.filter(physician => \n                                physician.diagnosis.label !== \n                                this.props.diagnoses[index].diagnosis.label);\n                            this.props.diagnoses.splice(index, 1);\n                            this.props.refreshDiagnosisStateChange();\n                            this.props.setPrimaryDiagnosisIndex(\n                                this.props.primaryDiagnosisIndex != index ?\n                                this.props.primaryDiagnosisIndex - 1 : -1);\n                        }}\n                        onHeaderFormat={(colIndex: number, colName: string) => {\n                            return this.onFormatTableHeader(colIndex, colName);\n                        }} \n                        onFormat={(rowIndex: number, colIndex: number, value: any) => {\n                            return this.onFormatCRUDTable(rowIndex, colIndex, value);\n                        }}\n                        editField={(colIndex: number, currentVal: any, onChange: any) => {\n                            if (colIndex === 0) {\n                                return (\n                                    <DetailedDropdown\n                                        choices={this.getFilteredICD10Codes()}\n                                        value={currentVal}\n                                        onChange={(value: DropdownChoice) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 1) {\n                                return (\n                                    <InputField\n                                        value={currentVal}\n                                        onChange={(value: string) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 2) {\n                                return (\n                                    <CustomCheckbox \n                                        label='Is Final?'\n                                        value={currentVal}\n                                        onChange={(value: boolean) => onChange(value)}/>\n                                );\n                            } else {\n                                return (\n                                    <div></div>\n                                );\n                            }\n                        }} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Grid, Radio, TableCell } from '@material-ui/core';\nimport { PhysicianData, DiagnosisData } from '../UpdateTicketProps';\nimport { DetailedDropdown } from 'Pages/CustomerCarePage/Components/DetailedDropdown';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { NumberField } from 'Pages/CustomerCarePage/Components/NumberField';\nimport { DetailedNumberField } from 'Pages/CustomerCarePage/Components/DetailedNumberField';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { CRUDTable } from 'Pages/CustomerCarePage/UpdateTicketPage/Components/CRUDTable';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { DropdownChoice } from 'Pages/CustomerCarePage/Models';\n\ninterface IProps {\n    physicians: PhysicianData[];\n    state: PhysicianData;\n    physiciansList: DropdownChoice[];\n    diagnosesList: DiagnosisData[];\n    refreshPhysiciansStateChange: () => void;\n}\n\n// interface IStates {\n//     physician: DropdownChoice;\n//     diagnosis: DropdownChoice;\n//     type: string;\n//     remarks: string;\n//     visits: number;\n//     amount: number;\n// }\n\nexport class PhysiciansSection extends React.Component<IProps> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        // this.state = {\n        //     physician: { value: '', label: '' },\n        //     diagnosis: { value: '', label: '' },\n        //     type: '',\n        //     remarks: '',\n        //     visits: 0,\n        //     amount: 0\n        // }\n    }\n\n    onFormatTableHeader = (colIndex: number, value: any) => {\n        return (\n            colIndex === 0 ? (\n                <TableCell style={{minWidth: '250px'}}>{value}</TableCell>\n            ) : colIndex === 1 ? (\n                <TableCell style={{minWidth: '100px'}}>{value}</TableCell>\n            ) : colIndex === 3 || colIndex === 4 ? (\n                <TableCell style={{minWidth: '150px', textAlign: 'right'}}>{value}</TableCell>\n            ) : (\n                <TableCell style={{minWidth: '150px'}}>{value}</TableCell>\n            )\n        );\n    }\n\n    onFormatCRUDTable = (colIndex: number, value: any) => {\n        return (\n            colIndex === 0 ? (\n                <div>\n                    <div>{value.params[0] + ' - ' + value.label}</div>\n                    <div className='light-text'>{value.params[1] + ' Physician'}</div>\n                </div>\n            ) : colIndex === 1 ? (\n                <div>{value.value}</div>\n            ) : colIndex === 3 || colIndex === 4 ? (\n                <div style={{textAlign: 'right'}}>\n                    {colIndex === 4 ? GlobalFunction.formatNumber(value, true) + ' PHP' : value}\n                </div>\n            ) : (value)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Add Physician</div>\n                <div className='sub-section'>\n                    <Grid container spacing={2}>\n                        <Grid item xs={6}>\n                            <DetailedDropdown \n                                placeholder='Doctor'\n                                detail={this.props.state.physician.params ? this.props.state.physician.params[0] : ''}\n                                value={this.props.state.physician}\n                                choices={this.props.physiciansList}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.state.physician = value;\n                                    this.props.refreshPhysiciansStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <DetailedDropdown \n                                placeholder='Diagnosis'\n                                value={this.props.state.diagnosis}\n                                choices={this.props.diagnosesList.map(value => {\n                                    return value.diagnosis; \n                                })}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.state.diagnosis = value;\n                                    this.props.refreshPhysiciansStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <InputField \n                                placeholder='Remarks'\n                                value={this.props.state.remarks}\n                                charLimit={100}\n                                onChange={(value: string) => {\n                                    this.props.state.remarks = value;\n                                    this.props.refreshPhysiciansStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={1}>\n                            <NumberField\n                                placeholder='Visits'\n                                value={this.props.state.visits}\n                                onChange={(value: number) => {\n                                    this.props.state.visits = value;\n                                    this.props.refreshPhysiciansStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={2}>\n                            <DetailedNumberField\n                                placeholder='Amount'\n                                detail='PHP'\n                                isFloat={true}\n                                value={this.props.state.amount}\n                                onChange={(value: number) => {\n                                    this.props.state.amount = value;\n                                    this.props.refreshPhysiciansStateChange();\n                                }}/>\n                        </Grid>\n                        {this.props.state.physician.params ? (\n                            <Grid item xs={3}>\n                                <div>\n                                <Grid container style={{paddingTop: '1rem'}}>\n                                    <Grid item xs={6}>\n                                        <Radio \n                                            className='check-box'\n                                            style={{height: '100%', width: 0}}\n                                            checked={this.props.state.physician.params[1] === 'Admitting'}\n                                            value={'Admitting'}\n                                            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                                                if (this.props.state.physician.params) {\n                                                    this.props.state.physician.params[1] = event.target.value;\n                                                }\n                                                this.props.refreshPhysiciansStateChange();\n                                            }} /> Admitting\n                                    </Grid>\n                                    <Grid item xs={6}>\n                                        <Radio \n                                            className='check-box'\n                                            style={{height: '100%', width: 0}}\n                                            checked={this.props.state.physician.params[1] === 'Attending'}\n                                            value={'Attending'}\n                                            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                                                if (this.props.state.physician.params) {\n                                                    this.props.state.physician.params[1] = event.target.value;\n                                                }\n                                                this.props.refreshPhysiciansStateChange();\n                                            }} /> Attending\n                                    </Grid>\n                                </Grid>\n                                </div>\n                            </Grid>\n                        ) : null}\n                    </Grid>\n                    <div style={{paddingTop: '5px'}} />\n                    <TextButton \n                        label='Add physician' \n                        icon={faPlus}\n                        onClick={() => {\n                            var data = this.props.state;\n                            const tempData = {\n                                physician: {\n                                    value: data.physician.value,\n                                    label: data.physician.label,\n                                    params: data.physician.params ? data.physician.params : undefined\n                                },\n                                diagnosis: data.diagnosis,\n                                remarks: data.remarks,\n                                visits: data.visits,\n                                amount: data.amount\n                            };\n                            this.props.physicians.unshift(tempData);\n                            this.props.state.physician = { value: '', label: '', params: ['', ''] };\n                            this.props.state.diagnosis = { value: '', label: '' };\n                            this.props.state.remarks = '';\n                            this.props.state.visits = 0;\n                            this.props.state.amount = 0;\n                            this.props.refreshPhysiciansStateChange();\n                        }}/>\n                </div>\n                <div className='sub-section'>\n                    <CRUDTable \n                        className='custom-table'\n                        placeholder='PHYSICIANS'\n                        cols={['Specialization - Doctor Name', 'Diagnosis', 'Remarks', 'No. of Visits', 'Amount']} \n                        rows={this.props.physicians}\n                        onSaveEditRow={(index: number, data: any) => {\n                            // this.props.editPhysician(index, data);\n                            this.props.physicians[index] = data;\n                            this.props.refreshPhysiciansStateChange();\n                        }}\n                        onDeleteRow={(index: number) => {\n                            // this.props.deletePhysician(index);\n                            this.props.physicians.splice(index, 1);\n                            this.props.refreshPhysiciansStateChange();\n                        }}\n                        onHeaderFormat={(colIndex: number, colName: string) => {\n                            return this.onFormatTableHeader(colIndex, colName);\n                        }} \n                        onFormat={(_rowIndex: number, colIndex: number, value: any) => {\n                            return this.onFormatCRUDTable(colIndex, value);\n                        }}\n                        editField={(colIndex: number, currentVal: any, onChange: any) => {\n                            if (colIndex === 0) {\n                                return (\n                                    <DetailedDropdown\n                                        detail={currentVal.params[0]}\n                                        choices={this.props.physiciansList}\n                                        value={currentVal}\n                                        onChange={(value: DropdownChoice) => onChange({\n                                            value: value.value,\n                                            label: value.label,\n                                            params: [value.params ? value.params[0] : '', currentVal.params[1]]\n                                        })}/>\n                                );\n                            } else if (colIndex === 1) {\n                                return (\n                                <div>{currentVal.value}</div>\n                                    // <DetailedDropdown\n                                    //     choices={this.props.diagnosesList.map(value => {\n                                    //         return value.diagnosis; \n                                    //     })}\n                                    //     value={currentVal}\n                                    //     onChange={(value: DropdownChoice) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 2) {\n                                return (\n                                    <InputField\n                                        value={currentVal}\n                                        onChange={(value: string) => onChange(value)}/>\n                                );\n                                \n                            } else if (colIndex === 3) {\n                                return (\n                                    <NumberField\n                                        value={currentVal}\n                                        onChange={(value: number) => onChange(value)}/>\n                                );\n                            \n                            } else {\n                                return (\n                                    <DetailedNumberField\n                                        detail='PHP'\n                                        isFloat={true}\n                                        value={currentVal}\n                                        onChange={(value: number) => onChange(value)}/>\n                                );\n                            }\n                        }} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { CRUDTable } from 'Pages/CustomerCarePage/UpdateTicketPage/Components/CRUDTable';\nimport { Grid, TableCell } from '@material-ui/core';\nimport { DetailedDropdown } from 'Pages/CustomerCarePage/Components/DetailedDropdown';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { DatePicker } from 'Pages/CustomerCarePage/Components/DatePicker';\nimport { DetailedNumberField } from 'Pages/CustomerCarePage/Components/DetailedNumberField';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { DropdownChoice } from 'Pages/CustomerCarePage/Models';\nimport { ProcedureData, DiagnosisData } from '../UpdateTicketProps';\n\ninterface IProps {\n    procedures: ProcedureData[];\n    state: ProcedureData;\n    proceduresList: DropdownChoice[];\n    diagnosesList: DiagnosisData[];\n    physiciansList: DropdownChoice[];\n    refreshProceduresStateChange: () => void;\n}\n\nexport class ProceduresSection extends React.Component<IProps> {\n\n    onFormatTableHeader = (colIndex: number, value: any) => {\n        return (\n            colIndex === 0 ? (\n                <TableCell style={{minWidth: '200px'}}>{value}</TableCell>\n            ) : colIndex === 1 ? (\n                <TableCell style={{minWidth: '100px'}}>{value}</TableCell>\n            ) : colIndex === 2 || colIndex === 3 ? (\n                <TableCell style={{minWidth: '150px'}}>{value}</TableCell>\n            ) : colIndex === 5 ? (\n                <TableCell style={{textAlign: 'right', minWidth: '100px'}}>{value}</TableCell>\n            ) : (\n                <TableCell style={{minWidth: '150px'}}>{value}</TableCell>\n            )\n        );\n    }\n\n    onFormatCRUDTable = (colIndex: number, value: any) => {\n        return (\n            colIndex === 0 ? (\n                <div>{value.value + ' - ' + value.label}</div>\n            ) : colIndex === 1 ? (\n                <div>{value.value}</div>\n            ) : colIndex === 2 ? (\n                <div>{value.label}</div>\n            ) : colIndex === 3 ? (\n                <div>{GlobalFunction.toCommonDateString(value)}</div>\n            ) : colIndex === 5 ? (\n                <div style={{textAlign: 'right'}}>\n                    {GlobalFunction.formatNumber(value, true) + ' PHP'}\n                </div>\n            ) : (value)\n        );\n    }\n\n    render(): JSX.Element {\n\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Add Procedure</div>\n                <div className='sub-section'>\n                    <Grid container spacing={2}>\n                        <Grid item xs={6}>\n                            <DetailedDropdown \n                                placeholder='Procedure'\n                                value={this.props.state.procedure}\n                                choices={this.props.proceduresList}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.state.procedure = value;\n                                    this.props.refreshProceduresStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <DetailedDropdown \n                                placeholder='Diagnosis'\n                                value={this.props.state.diagnosis}\n                                choices={this.props.diagnosesList.map(value => {\n                                    return value.diagnosis; \n                                })}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.state.diagnosis = value;\n                                    this.props.refreshProceduresStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <DetailedDropdown \n                                placeholder='Doctor'\n                                detail={this.props.state.physician.params ? this.props.state.physician.params[0] : undefined}\n                                value={this.props.state.physician}\n                                choices={this.props.physiciansList}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.state.physician = value;\n                                    this.props.refreshProceduresStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <InputField \n                                placeholder='Remarks'\n                                value={this.props.state.remarks}\n                                charLimit={100}\n                                onChange={(value: string) => {\n                                    this.props.state.remarks = value;\n                                    this.props.refreshProceduresStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <DatePicker \n                                placeholder='Date'\n                                value={this.props.state.date}\n                                onChange={(value: Date) => {\n                                    this.props.state.date = value;\n                                    this.props.refreshProceduresStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <DetailedNumberField \n                                placeholder='Amount'\n                                detail='PHP'\n                                isFloat={true}\n                                value={this.props.state.amount}\n                                onChange={(value: number) => {\n                                    this.props.state.amount = value;\n                                    this.props.refreshProceduresStateChange();\n                                }}/>\n                        </Grid>\n                    </Grid>\n                    <div style={{paddingTop: '5px'}} />\n                    <TextButton \n                        label='Add procedure' \n                        icon={faPlus}\n                        onClick={() => {\n                            var data = this.props.state;\n                            const tempData = {\n                                procedure: data.procedure,\n                                diagnosis: data.diagnosis,\n                                physician: data.physician,\n                                date: data.date,\n                                remarks: data.remarks,\n                                amount: data.amount\n                            }\n                            this.props.procedures.unshift(tempData);\n                            this.props.state.procedure = { value: '', label: '' };\n                            this.props.state.diagnosis = { value: '', label: '' };\n                            this.props.state.physician = { value: '', label: '' };\n                            this.props.state.remarks = '';\n                            this.props.state.date = new Date();\n                            this.props.state.amount = 0;\n                            this.props.refreshProceduresStateChange();\n                        }}/>\n                </div>\n                <div className='sub-section'>\n                    <CRUDTable \n                        className='custom-table'\n                        placeholder='PROCEDURES'\n                        \n                        cols={['Procedure', 'Diagnosis', 'Doctor', 'Date', 'Remarks', 'Amount']} \n                        rows={this.props.procedures}\n                        onSaveEditRow={(index: number, data: any) => {\n                            // this.props.editProcedure(index, data);\n                            this.props.procedures[index] = data;\n                            this.props.refreshProceduresStateChange();\n                        }}\n                        onDeleteRow={(index: number) => {\n                            // this.props.deleteProcedure(index);\n                            this.props.procedures.splice(index, 1);\n                            this.props.refreshProceduresStateChange();\n                        }}\n                        onHeaderFormat={(colIndex: number, colName: string) => {\n                            return this.onFormatTableHeader(colIndex, colName);\n                        }}\n                        onFormat={(_rowIndex: number, colIndex: number, value: any) => {\n                            return this.onFormatCRUDTable(colIndex, value);\n                        }}\n                        editField={(colIndex: number, currentVal: any, onChange: any) => {\n                            if (colIndex === 0) {\n                                return (\n                                    <DetailedDropdown\n                                        choices={this.props.proceduresList}\n                                        value={currentVal}\n                                        onChange={(value: DropdownChoice) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 1) {\n                                return (\n                                    <DetailedDropdown\n                                        choices={this.props.diagnosesList.map(value => {\n                                            return value.diagnosis; \n                                        })}\n                                        value={currentVal}\n                                        onChange={(value: DropdownChoice) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 2) {\n                                return (\n                                    <DetailedDropdown\n                                        detail={currentVal.params[0]}\n                                        choices={this.props.physiciansList}\n                                        value={currentVal}\n                                        onChange={(value: DropdownChoice) => onChange(value)}/>\n                                ); \n                            } else if (colIndex === 3) {\n                                return (\n                                    <DatePicker\n                                        value={currentVal}\n                                        onChange={(value: Date) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 4) {\n                                return (\n                                    <InputField\n                                        value={currentVal}\n                                        charLimit={100}\n                                        onChange={(value: string) => onChange(value)}/>\n                                );\n                            \n                            } else {\n                                return (\n                                    <DetailedNumberField\n                                        detail='PHP'\n                                        isFloat={true}\n                                        value={currentVal}\n                                        onChange={(value: number) => onChange(value)}/>\n                                );\n                            }\n                        }} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { CRUDTable } from 'Pages/CustomerCarePage/UpdateTicketPage/Components/CRUDTable';\nimport { Grid, TableCell } from '@material-ui/core';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { DetailedNumberField } from 'Pages/CustomerCarePage/Components/DetailedNumberField';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { DropdownChoice } from 'Pages/CustomerCarePage/Models';\nimport { ItemData } from '../UpdateTicketProps';\n\ninterface IProps {\n    items: ItemData[];\n    state: ItemData;\n    refreshItemsStateChange: () => void;\n}\n\nexport class OtherDetailsSection extends React.Component<IProps> {\n\n    itemTypes: DropdownChoice[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.itemTypes = [\n            { value: '1', label: 'Medicine' },\n            { value: '2', label: 'Non-coverable' },\n            { value: '3', label: 'Rooms' },\n            { value: '4', label: 'Miscellaneous' }\n        ]\n    }\n\n    onFormatTableHeader = (colIndex: number, value: any) => {\n        return (\n            colIndex === 2 ? (\n                <TableCell style={{textAlign: 'right', minWidth: '200px'}}>{value}</TableCell>\n            ) : (\n                <TableCell style={{minWidth: '300px'}}>{value}</TableCell>\n            )\n        );\n    }\n\n    onFormatCRUDTable = (colIndex: number, value: any) => {\n        return (\n            colIndex === 1 ? (\n                value.label\n            ) : colIndex === 2 ? (\n                <div style={{textAlign: 'right'}}>\n                    {GlobalFunction.formatNumber(value, true) + ' PHP'}\n                </div>\n            ) : (value)\n        );\n    }\n\n    render(): JSX.Element {\n        console.log(this.props.items);\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Add Other Details</div>\n                <div className='sub-section'>\n                    <Grid container spacing={2}>\n                        <Grid item xs={6}>\n                            <InputField \n                                placeholder='Item'\n                                value={this.props.state.name}\n                                error={this.props.state.name.trim().length == 0}\n                                onChange={(value: string) => {\n                                    this.props.state.name = value;\n                                    this.props.refreshItemsStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <Dropdown \n                                placeholder='Type'\n                                value={this.props.state.type}\n                                choices={this.itemTypes}\n                                error={this.props.state.type.value === ''}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.state.type = value;\n                                    this.props.refreshItemsStateChange();\n                                }}/>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <DetailedNumberField \n                                placeholder='Amount'\n                                detail='PHP'\n                                isFloat={true}\n                                value={this.props.state.amount}\n                                error={this.props.state.amount == 0}\n                                onChange={(value: number) => {\n                                    this.props.state.amount = value;\n                                    this.props.refreshItemsStateChange();\n                                }}/>\n                        </Grid>\n                    </Grid>\n                    <div style={{paddingTop: '5px'}} />\n                    {this.props.state.name.trim().length != 0 &&\n                     this.props.state.type.value !== '' &&\n                     this.props.state.amount != 0 ? (\n                        <TextButton \n                            label='Add item' \n                            icon={faPlus}\n                            onClick={() => {\n                                var state = this.props.state;\n                                const tempData = {\n                                    name: state.name,\n                                    type: { value: state.type.value, label: state.type.label },\n                                    amount: state.amount\n                                }\n                                this.props.items.unshift(tempData);\n                                this.props.state.name = '';\n                                this.props.state.type = { value: '', label: '' };\n                                this.props.state.amount = 0;\n                                this.props.refreshItemsStateChange();\n                            }}/>\n                    ) : null}\n                </div>\n                <div className='sub-section'>\n                    <CRUDTable \n                        className='custom-table'\n                        placeholder='OTHER DETAILS'\n                        \n                        cols={['Item', 'Type', 'Amount']} \n                        rows={this.props.items}\n                        onSaveEditRow={(index: number, data: any) => {\n                            // this.props.editItem(index, data);\n                            this.props.items[index] = data;\n                            this.props.refreshItemsStateChange();\n                        }}\n                        onDeleteRow={(index: number) => {\n                            // this.props.deleteItem(index);\n                            this.props.items.splice(index, 1);\n                            this.props.refreshItemsStateChange();\n                        }}\n                        onHeaderFormat={(colIndex: number, colName: string) => {\n                            return this.onFormatTableHeader(colIndex, colName);\n                        }}\n                        onFormat={(_rowIndex: number, colIndex: number, value: any) => {\n                            return this.onFormatCRUDTable(colIndex, value);\n                        }}\n                        editField={(colIndex: number, currentVal: any, onChange: any) => {\n                            if (colIndex === 0) {\n                                return (\n                                    <InputField\n                                        value={currentVal}\n                                        onChange={(value: string) => onChange(value)}/>\n                                );\n                            } else if (colIndex === 1) {\n                                return (\n                                    <Dropdown\n                                        choices={this.itemTypes}\n                                        value={currentVal}\n                                        onChange={(value: DropdownChoice) => onChange(value)}/>\n                                );\n                            } else {\n                                return (\n                                    <DetailedNumberField\n                                        detail='PHP'\n                                        isFloat={true}\n                                        value={currentVal}\n                                        onChange={(value: number) => onChange(value)}/>\n                                );\n                            }\n                        }} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { Grid } from '@material-ui/core';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { DetailedNumberField } from 'Pages/CustomerCarePage/Components/DetailedNumberField';\nimport { DatePicker } from 'Pages/CustomerCarePage/Components/DatePicker';\nimport { DropdownChoice } from 'Pages/CustomerCarePage/Models';\n\ninterface IProps {\n    dateAdmitted: Date;\n    coverage: DropdownChoice;\n    ticketNo: string;\n    paidBy: string;\n    philhealthAmount: number;\n    finalBill: number;\n    dischargeDate: Date | null;\n    onUpdateTicketStateChange: (attrName: string, value: any) => void;\n}\n\nexport class DischargeDetailsSection extends React.Component<IProps> {\n\n    coverageList: DropdownChoice[];\n\n    constructor(props: any) {\n        super(props);\n\n        this.coverageList = [\n            { value: '1', label: 'Filed' },\n            { value: '2', label: 'Corporate Guarantee' },\n            { value: '3', label: 'Not Compensable' },\n            { value: '4', label: 'Less than 24 hours' },\n            { value: '5', label: 'Paid' },\n            { value: '6', label: 'PH Rider' },\n            { value: '7', label: 'Non-PNDF' }\n        ]\n    }\n\n\n    render(): JSX.Element {\n\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Set PhilHealth</div>\n                <div className='sub-section'>\n                    <Grid container spacing={2}>\n                        <Grid item xs={6}>\n                            <Dropdown \n                                placeholder='Coverage'\n                                choices={this.coverageList}\n                                value={this.props.coverage}\n                                onChange={(value: DropdownChoice) => {\n                                    this.props.onUpdateTicketStateChange('coverage', value);\n                                }} />\n                        </Grid>\n                        {this.props.coverage.label === 'Corporate Guarantee' ? (\n                            <Grid item xs={3}>\n                                <InputField \n                                    placeholder='Ticket Number'\n                                    value={this.props.ticketNo}\n                                    onChange={(value: string) => {\n                                        this.props.onUpdateTicketStateChange('ticketNo', value);\n                                    }} />\n                            </Grid>\n                        ) : null}\n                        {this.props.coverage.label === 'Paid' ? (\n                        <Grid item xs={3}>\n                            <InputField \n                                placeholder='Paid by'\n                                value={this.props.paidBy}\n                                onChange={(value: string) => {\n                                    this.props.onUpdateTicketStateChange('paidBy', value);\n                                }} />\n                        </Grid>\n                        ) : null}\n                        {this.props.coverage.label === 'Filed' ||\n                            this.props.coverage.label === 'Corporate Guarantee' ||\n                            this.props.coverage.label === 'Paid' ? (\n                            <Grid item xs={3}>\n                                <DetailedNumberField \n                                    placeholder='Amount'\n                                    detail='PHP'\n                                    isFloat={true}\n                                    value={this.props.philhealthAmount}\n                                    onChange={(value: number) => {\n                                        this.props.onUpdateTicketStateChange('philhealthAmount', value);\n                                    }} />\n                            </Grid>\n                        ) : null}\n\n                        \n                        \n                    </Grid>\n                </div>\n                <div className='header-1'>Add Discharge Details</div>\n                <div className='sub-section'>\n                    <Grid container spacing={2}>\n                        <Grid item xs={3}>\n                            <DetailedNumberField \n                                placeholder='Final Hospital Bill Amount'\n                                detail='PHP'\n                                isFloat={true}\n                                value={this.props.finalBill}\n                                onChange={(value: number) => {\n                                    this.props.onUpdateTicketStateChange('finalBill', value);\n                                }} />\n                        </Grid>\n                        <Grid item xs={3}>\n                            <DatePicker \n                                placeholder='Discharge Date'\n                                value={this.props.dischargeDate}\n                                minDate={this.props.dateAdmitted}\n                                onChange={(value: Date) => {\n                                    this.props.onUpdateTicketStateChange('dischargeDate', value);\n                                }} />\n                        </Grid>\n                    </Grid>\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { CRUDTable } from 'Pages/CustomerCarePage/UpdateTicketPage/Components/CRUDTable';\nimport { Grid } from '@material-ui/core';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { CustomDropzone } from 'Pages/CustomerCarePage/Components/CustomDropzone';\nimport { FileData } from '../UpdateTicketProps';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\n\ninterface IProps {\n    files: FileData[];\n    state: FileData;\n    refreshFilesStateChange: () => void;\n}\n\nexport class UploadedDocumentsSection extends React.Component<IProps> {\n\n    render(): JSX.Element {console.log(this.props.files);\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Upload Documents</div>\n                <div className='sub-section'>\n                    <Grid container>\n                        <Grid item xs={6}>\n                            <CustomDropzone\n                                accept='image/*'\n                                onDrop={(files: File[]) => {\n                                    this.props.state.file = files[0];\n                                    this.props.refreshFilesStateChange();\n                                }} />\n                            <div>{this.props.state.file ? this.props.state.file.name : null}</div>\n                            <div className='sub-section' />\n                            <InputField \n                                placeholder='Document Name' \n                                value={this.props.state.docName}\n                                onChange={(value: string) => {\n                                    this.props.state.docName = value;\n                                    this.props.refreshFilesStateChange();\n                                }} />\n                        </Grid>\n                        <Grid item xs={6} />\n                    </Grid>\n                    <div style={{paddingTop: '5px'}} />\n                    <TextButton \n                        label='Add document' \n                        icon={faPlus}\n                        onClick={() => {\n                            var state = this.props.state;\n                            if (state.file !== null) {\n                                const tempData = {\n                                    docName: state.docName,\n                                    file: state.file\n                                }\n                                this.props.files.unshift(tempData);\n                                this.props.state.docName = '';\n                                this.props.state.file = null;\n                                this.props.refreshFilesStateChange();\n                            }\n                        }}/>\n                </div>\n                \n                <div className='sub-section'>\n                    <CRUDTable \n                        className='custom-table'\n                        placeholder='UPLOADED DOCUMENTS'\n                        \n                        cols={['Document Name', 'Filename']} \n                        rows={this.props.files}\n                        onSaveEditRow={(index: number, data: any) => {\n                            // this.props.editFile(index, data);\n                            \n                            this.props.files[index] = data;\n                            this.props.refreshFilesStateChange();\n                        }}\n                        onDeleteRow={(index: number) => {\n                            // this.props.deleteFile(index);\n                            this.props.files.splice(index, 1);\n                            this.props.refreshFilesStateChange();\n                        }}\n                        onFormat={(_rowIndex: number, colIndex: number, value: any) => {\n                            return (colIndex === 1 ? (value.name) : (value));\n                        }}\n                        editField={(colIndex: number, currentVal: any, onChange: any) => {\n                            if (colIndex === 0) {\n                                return (\n                                    <InputField\n                                        value={currentVal}\n                                        onChange={(value: string) => onChange(value)}/>\n                                );\n                            }\n                            return currentVal.name;\n                        }} />\n                </div>\n\n                <div className='section' />\n            </div>\n        );\n    }\n}","\nimport * as React from 'react';\nimport { Grid, TableCell, TableRow } from '@material-ui/core';\nimport { InquiryData, DropdownChoice } from 'Pages/CustomerCarePage/Models';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { faMinusCircle, faPlus, faPen } from '@fortawesome/free-solid-svg-icons';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { InputChip } from 'Pages/CustomerCarePage/Components/InputChip';\nimport { CustomChip } from 'Pages/CustomerCarePage/Components/CustomChip';\nimport { CustomDropzone } from 'Pages/CustomerCarePage/Components/CustomDropzone';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\n\ninterface IProps {\n    inquiries: InquiryData[];\n    refreshInquiryState: () => void;\n}\n\ninterface IStates {\n    inquiry: DropdownChoice;\n}\n\nexport class UpdateInquirySection extends React.Component<IProps, IStates> {\n\n    inquiries: DropdownChoice[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            inquiry: { value: '', label: '' }\n        };\n\n        this.inquiries = [\n            { value: '1', label: 'Member Status / Card Inquiry' },\n            { value: '2', label: 'Member Network Access Inquiry' },\n            { value: '3', label: 'Member Benefit Inquiry - General [Outpatient]' },\n            { value: '4', label: 'Member Benefit Inquiry - General [Inpatient]' },\n            { value: '5', label: 'Member Benefit Inquiry - General [Emergency]' },\n            { value: '6', label: 'Member Benefit Inquiry - General [Dental]' },\n            { value: '7', label: 'Member Benefit Inquiry - General [APE / ECU]' },\n            { value: '8', label: 'Member Benefit Inquiry - General [Riders]' },\n            { value: '9', label: 'Member Coverage Inquiry - Specific Benefit' },\n            { value: '10', label: 'Member Availment Inquiry - CanAvail' },\n            { value: '11', label: 'Member Eligibility Inquiry' },\n            { value: '12', label: 'Reimbursement Status Inquiry' },\n            { value: '13', label: 'General Affiliated Network Inquiry - Facility' },\n            { value: '14', label: 'General Affiliated Network Inquiry - Doctor' },\n            { value: '15', label: 'General Affiliated Network Inquiry - Dentist' },\n            { value: '16', label: 'Procedural Inquiry - Outpatient' },\n            { value: '17', label: 'Procedural Inquiry - Inpatient' },\n            { value: '18', label: 'Procedural Inquiry - Emergency' },\n            { value: '19', label: 'Procedural Inquiry - Dental' },\n            { value: '20', label: 'Procedural Inquiry - APE / ECU' },\n            { value: '21', label: 'Procedural Inquiry - Member Enrolment / Cancellation / Update' },\n            { value: '22', label: 'Procedural Inquiry - Reimbursement' },\n            { value: '23', label: 'Procedural Inquiry - Others' }\n        ];\n    }\n\n    getFilteredInquiries(): DropdownChoice[] {\n        let filteredInquiries: DropdownChoice[] = [];\n        for (var i = 0; i < this.inquiries.length; i++) {\n            let isSame = false;\n            for (var j = 0; j < this.props.inquiries.length; j++) {\n                isSame = (\n                    this.props.inquiries[j].inquiry.value === \n                    this.inquiries[i].value ? true : isSame);\n            }\n            if (!isSame) {\n                filteredInquiries = filteredInquiries.concat(this.inquiries[i]);\n            }\n        }\n        return filteredInquiries;\n    }\n\n    onAddInquiry() {\n        if (this.state.inquiry.value !== '') {\n            this.props.inquiries.push({\n                inquiry: this.state.inquiry,\n                detail: '',\n                specificDetail: [],\n                answer: '',\n                remarks: '',\n                relatedTickets: [],\n                supportDocs: []\n            });\n            \n            this.props.refreshInquiryState();\n            this.setState({inquiry: { value: '', label: '' }});\n        }\n    }\n\n    onRemoveInquiry(index: number) {\n        this.props.inquiries.splice(index, 1);\n        this.props.refreshInquiryState();\n    }\n\n\n    render(): JSX.Element {\n        return (\n            <div className='update-ticket'>\n                <div className='section' style={{paddingRight: '2.5rem'}}>\n                    <div className='header-1'>Update Inquiry</div>\n                    <div className='text'>\n                        Add an inquiry type and then add the question and its details after\n                    </div>\n                    <div className='sub-section'>\n                        {true ? (\n                            <CustomTable \n                                rows={this.props.inquiries}\n                                renderHeader={() => this.renderTableHeader()}\n                                renderRow={(rowData: any, index: number) => \n                                    this.renderTableRow(rowData, index)} />\n                        ) : (null)}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n        return (\n            <>\n            <TableCell>\n                <Dropdown \n                    choices={this.getFilteredInquiries()}\n                    value={this.state.inquiry}\n                    onChange={(value: DropdownChoice) => {\n                        this.setState({inquiry: value});\n                    }} />\n            </TableCell>\n            <TableCell style={{width: '200px', textAlign: 'center'}}>\n                <TextButton \n                    icon={faPlus} \n                    label=\"Add inquiry\"\n                    onClick={() => {\n                        this.onAddInquiry();\n                    }} />\n            </TableCell>\n            </>\n        );\n    }\n\n    renderTableRow(inquiry: InquiryData, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                <TableCell colSpan={2}>\n                    <Grid container spacing={1}>\n                        <Grid item xs={11} className='header-2'>\n                            {inquiry.inquiry.label}\n                        </Grid>\n                        <Grid item xs={1} style={{textAlign: 'right'}}>\n                            <IconButton\n                                icon={faPen}\n                                onClick={() => {\n                                    this.onRemoveInquiry(index);\n                                }}/>\n                            <IconButton\n                                icon={faMinusCircle}\n                                onClick={() => {\n                                    this.onRemoveInquiry(index);\n                                }}/>\n                        </Grid>\n                    </Grid>\n                    <div style={{position: 'relative'}}>\n                        <div style={{paddingTop: '0.5rem'}} />\n                        <div className='line-border' />\n                        <div style={{paddingTop: '0.5rem'}} />\n                        <Grid container spacing={2}>\n                            <Grid item xs={6}>\n                                <InputField \n                                    placeholder='Details of inquiry (Question)'\n                                    value={inquiry.detail}\n                                    onChange={(value: string) => {\n                                        inquiry.detail = value;\n                                        this.props.refreshInquiryState();\n                                    }} />\n                            </Grid>\n                            <Grid item xs={6}>\n                                <InputChip \n                                    placeholder='Specific Details (Type benefit/doctor/facility to describe inquiry, press enter to add)'\n                                    value={inquiry.specificDetail}\n                                    onAdd={(value: string) => {\n                                        inquiry.specificDetail.push(value);\n                                        this.props.refreshInquiryState();\n                                    }}\n                                    onDelete={(index: number) => {\n                                        inquiry.specificDetail.splice(index, 1);\n                                        this.props.refreshInquiryState();\n                                    }} />\n                            </Grid>\n                        </Grid>\n                        <InputField \n                            placeholder='Answer'\n                            value={inquiry.answer}\n                            onChange={(value: string) => {\n                                inquiry.answer = value;\n                                this.props.refreshInquiryState();\n                            }} />\n                        <InputField \n                            placeholder='Remarks (Optional)'\n                            value={inquiry.remarks}\n                            onChange={(value: string) => {\n                                inquiry.remarks = value;\n                                this.props.refreshInquiryState();\n                            }} />\n                        <Grid container spacing={2}>\n                            <Grid item xs={6}>\n                                <InputChip \n                                    placeholder='Related Tickets (Optional, press enter to add)'\n                                    value={inquiry.relatedTickets}\n                                    onAdd={(value: string) => {\n                                        inquiry.relatedTickets.push(value);\n                                        this.props.refreshInquiryState();\n                                    }}\n                                    onDelete={(index: number) => {\n                                        inquiry.relatedTickets.splice(index, 1);\n                                        this.props.refreshInquiryState();\n                                    }} />\n                            </Grid>\n                            <Grid item xs={4}>\n                                <CustomDropzone \n                                    accept='image/*'\n                                    onDrop={(files: File[]) => {\n                                        inquiry.supportDocs.push(files[0]);\n                                        this.props.refreshInquiryState();\n                                    }}/>\n                            </Grid>\n                            <Grid item xs={2}>\n                                {inquiry.supportDocs.map((doc, index) => {\n                                    return (\n                                        <CustomChip\n                                            label={doc.name}\n                                            value={index.toString()}\n                                            onDelete={(value: string) => {\n                                                inquiry.supportDocs.splice(parseInt(value), 1);\n                                                this.props.refreshInquiryState();\n                                            }} />\n                                    );\n                                })}\n                            </Grid>\n                        </Grid>\n                    </div>\n                </TableCell>\n            </TableRow>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\nimport { Tabs, Tab } from '@material-ui/core';\n\ninterface IProps {\n    tabList: { value: number, label: string }[];\n    selectedTab: number;\n    setSelectedTab: (index: number) => void;\n}\n\nexport class CustomTabs extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        return (\n            <Tabs\n                className='tabs' \n                value={this.props.selectedTab}\n                variant='scrollable'\n                scrollButtons='auto'\n                indicatorColor='primary'\n                onChange={(_event: React.ChangeEvent<{}>, value: number) => {\n                    this.props.setSelectedTab(value );\n                }}>\n                {this.props.tabList.map(tab => {\n                    return <Tab value={tab.value} label={tab.label} />\n                })}\n            </Tabs>\n        );\n    }\n}","import * as React from 'react';\nimport './component-style.scss';\nimport { Modal, Fade } from '@material-ui/core';\nimport { IconButton } from './IconButton';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\n\ninterface IProps {\n    className?: string;\n    isOpen: boolean;\n    renderHeader: () => JSX.Element;\n    renderContent: () => JSX.Element;\n    renderFooter: () => JSX.Element;\n    handleClose?: () => void;\n}\n\nexport class CustomModal extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        return (\n            <div>\n                <Modal\n                    className={`${this.props.className ? this.props.className : ''} custom-modal`}\n                    open={this.props.isOpen}\n                    onClose={this.props.handleClose}\n                    closeAfterTransition>\n                    <Fade in={this.props.isOpen}>\n                        <div className='modal'>\n                            {this.props.handleClose ? (\n                                <div style={{textAlign: 'right'}}>\n                                    <IconButton\n                                        icon={faTimes} \n                                        size='1x' \n                                        onClick={this.props.handleClose} />\n                                </div>\n                                \n                            ) : null}\n                            <div className='header'>\n                                {this.props.renderHeader()}\n                            </div>\n                            <div className='content'>\n                                {this.props.renderContent()}\n                            </div>\n                            <div className='bottom'>\n                                {this.props.renderFooter()}\n                            </div>\n                        </div>\n                    </Fade>\n                </Modal>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { match } from \"react-router-dom\";\nimport {\n    UpdateData, \n    AccommodationData, \n    DiagnosisData, \n    PhysicianData, \n    ProcedureData,\n    ItemData,\n    FileData\n} from './UpdateTicketProps';\nimport { Grid, Button, Snackbar } from '@material-ui/core';\nimport { SummarySection } from './Components/SummarySection';\nimport { UpdateSection } from './Components/UpdateSection';\nimport { API } from '../API';\nimport { AccommodationsSection } from './Components/AccommodationsSection';\nimport { DiagnosesSection } from './Components/DiagnosesSection';\nimport { PhysiciansSection } from './Components/PhysiciansSection';\nimport { ProceduresSection } from './Components/ProceduresSection';\nimport { OtherDetailsSection } from './Components/OtherDetailsSection';\nimport { DischargeDetailsSection } from './Components/DischargeDetailsSection';\nimport { UploadedDocumentsSection } from './Components/UploadedDocumentsSection';\nimport { MemberDataSection } from '../MemberDataSection';\nimport { DropdownChoice, TicketData, MemberData, InquiryData } from '../Models';\nimport { UpdateInquirySection } from './Components/UpdateInquirySection';\nimport { CustomTabs } from '../Components/CustomTab';\nimport { Payloads } from '../Payloads';\nimport { Processmaker } from '../Processmaker';\nimport { Loading } from '../Components/Loading';\nimport { CustomModal } from '../Components/CustomModal';\nimport { TicketFooter } from '../TicketFooter';\n\ninterface IProps {\n    required: string;\n    match: match<MatchParams>;\n    history: any;\n}\n\ninterface MatchParams {\n    id: string;\n}\n\ninterface IStates {\n    loadedResources: number;\n    isAssessmentModalOpen: boolean;\n    isSaving: boolean;\n    snackbarMessage: string | null;\n    lastSave?: Date;\n\n    /* Can save to tmp */\n    tabSelected: number;\n    member?: MemberData;\n    ticket: TicketData;\n    confinement?: ConfinementDetails;\n    inquiries?: InquiryData[];\n\n    updateState: UpdateData;\n    accommodationState: AccommodationData;\n    diagnosisState: DiagnosisData;\n    physicianState: PhysicianData;\n    procedureState: ProcedureData;\n    otherDetailState: ItemData;\n    fileState: FileData;\n}\n\nexport interface ConfinementDetails {\n    provider: DropdownChoice;\n    dateAdmitted: Date;\n    confinementKind: string;\n    giftGiven: boolean;\n    coverage: DropdownChoice;\n    ticketNo: string;\n    paidBy: string;\n    philhealthAmount: number;\n    finalBill: number;\n    dischargeDate: Date | null;\n    primaryDiagnosisIndex: number;\n\n    updates: UpdateData[];\n    accommodations: AccommodationData[];\n    diagnoses: DiagnosisData[];\n    physicians: PhysicianData[];\n    procedures: ProcedureData[];\n    items: ItemData[];\n    files: FileData[];\n}\n\ninterface ErrorMessageFormat {\n    message: string;\n    targets: string[];\n}\n\nexport class UpdateTicketPage extends React.Component<IProps, IStates> {\n\n    static RESOURCES_TO_LOAD = 5;\n\n    tabList: { value: number, label: string }[];\n    icd10Codes: DropdownChoice[];\n    cptCodes: DropdownChoice[];\n    facilities: DropdownChoice[];\n    doctors: DropdownChoice[];\n    agents: DropdownChoice[];\n\n    errors: ErrorMessageFormat[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            tabSelected: 1,\n            loadedResources: 0,\n            isAssessmentModalOpen: false,\n            isSaving: false,\n            snackbarMessage: null,\n            ticket: {\n                ticketChannel: '',\n                transactionNo: '',\n                ticketSource: '',\n                memberName: '',\n                clientName: '',\n                brokerName: '',\n                facility: { value: '', label: '' },\n                department: '',\n                callerName: '',\n                contactNo: '',\n                ticketType: '',\n                specificType: '',\n                urgency: '',\n                agent: { id: '', name: '' },\n                additionalNotes: '',\n                additionalFiles: [],\n                ticketNo: '',\n                pmCaseId: '',\n                status: 'Open',\n                createdBy: { id: '1', name: 'Jilmer Cariaso - Static' },\n                dateCreated: new Date(),\n                dateUpdated: new Date(),\n                dateEscalated: null\n            },\n            updateState: {\n                remarks: '',\n                date: new Date(),\n                hospitalBill: 0\n            },\n            accommodationState: {\n                roomType: '',\n                days: 0,\n                costPerDay: 0\n            },\n            diagnosisState: {\n                diagnosis: { value: '', label: '' },\n                remarks: '',\n                isFinal: false,\n                isPrimary: false\n            },\n            physicianState: {\n                physician: { value: '', label: '', params: [''] },\n                diagnosis: { value: '', label: '' },\n                remarks: '',\n                visits: 0,\n                amount: 0\n            },\n            procedureState: {\n                procedure: { value: '', label: '' },\n                diagnosis: { value: '', label: '' },\n                physician: { value: '', label: '' },\n                remarks: '',\n                date: new Date(),\n                amount: 0\n            },\n            otherDetailState: {\n                name: '',\n                type: { value: '', label: '' },\n                amount: 0\n            },\n            fileState: {\n                docName: '',\n                file: null\n            }\n        };\n\n        this.tabList = [\n            { value: 1, label: 'Summary' }, \n            { value: 2, label: 'Updates' }, \n            { value: 3, label: 'Room Accommodations' }, \n            { value: 4, label: 'Diagnoses' }, \n            { value: 5, label: 'Physicians' }, \n            { value: 6, label: 'Procedures' },  \n            { value: 7, label: 'PhilHealth & Discharge Details' }, \n            { value: 8, label: 'Other Details' }, \n            { value: 9, label: 'Uploaded Documents' }\n        ];\n\n        this.facilities = [];\n        this.agents = [];\n        this.doctors = [];\n        this.cptCodes = [];\n        this.icd10Codes = [];\n        this.errors = [];\n    }\n\n    componentDidMount() {\n        // this.loadTicketData(`customer-care/tickets/${this.props.match.params['ticketId']}`);\n        API.get(`tmp?` +\n            `filter[where][and][0][user_id]=${localStorage['user_id']}&` +\n            `filter[where][and][1][module]=Customer%20Care&` + \n            `filter[where][and][2][ticket_no]=${this.props.match.params['ticketId']}`,\n            (response) => {\n                console.debug(response[0]);\n                if (response[0].ticket_no) {\n                    this.setState({\n                        lastSave: new Date(response[0].timestamp),\n                        loadedResources: this.state.loadedResources + 1,\n                        tabSelected: response[0].data.tab_selected,\n                        member: response[0].data.member,\n                        ticket: response[0].data.ticket,\n                        confinement: response[0].data.confinement,\n                        inquiries: response[0].data.inquiries,\n                        updateState: response[0].data.update_state,\n                        accommodationState: response[0].data.accommodation_state,\n                        diagnosisState: response[0].data.diagnosis_state,\n                        physicianState: response[0].data.physician_state,\n                        procedureState: response[0].data.procedure_state,\n                        otherDetailState: response[0].data.other_detail_state,\n                        fileState: response[0].data.file_state\n                    });\n                } else {\n                    this.loadTicketData(`customer-care/tickets/${this.props.match.params['ticketId']}`);\n                }\n            },\n            (error) => {\n                console.log(error);\n                this.loadTicketData(`customer-care/tickets/${this.props.match.params['ticketId']}`);\n            });\n\n        API.get('facilities',\n            (response) => {\n                this.setState({loadedResources: this.state.loadedResources + 1});\n                this.facilities = response.map(facility => {\n                    return { \n                        value: facility.facility_id,\n                        label: facility.name \n                    }\n                });\n            },\n            (error) => {\n                console.log(error);\n            });\n\n        API.get('icd10-codes?filter[limit]=1000',\n            (response) => {\n                console.log(response);  \n                this.setState({loadedResources: this.state.loadedResources + 1});\n                this.icd10Codes = response.map(icd10Code => {\n                    return { \n                        value: icd10Code.full_code,\n                        label: icd10Code.abbreviated_description \n                    };\n                });\n            },\n            (error) => {\n                console.log(error);\n            });\n\n        API.get('cpts?filter[limit]=1000',\n            (response) => {\n                this.setState({loadedResources: this.state.loadedResources + 1});\n                this.cptCodes = response.map(cptCode => {\n                    return {\n                        value: cptCode.code,\n                        label: cptCode.label \n                    };\n                });\n            }, \n            (error) => {\n                console.log(error);\n            });\n\n        API.get('doctors',\n            (response) => {\n                this.setState({loadedResources: this.state.loadedResources + 1});\n                this.doctors = response.map(doctor => {\n                    return {\n                        value: doctor._id,\n                        label: ('Dr. ' + doctor.first_name +  ' ' + doctor.last_name),\n                        params: [doctor.type]\n                    };\n                });\n            }, \n            (error) => {\n                console.log(error);\n            });\n    }\n\n    loadTicketData = (url: string) => {\n        API.get(url, \n            (response) => {\n                console.log(response);\n                this.setState({loadedResources: this.state.loadedResources + 1});\n                const ticketCategory = response.ticket_category;\n                const confinement = ticketCategory.confinement_details;\n                const inquiry = ticketCategory.inquiry_details;\n\n                this.setState({\n                    ticket: {\n                        id: response._id,\n                        ticketChannel: response.received_via,\n                        transactionNo: response.transaction_no,\n                        ticketSource: response.received_from,\n                        memberName: response.member_name,\n                        clientName: response.corporate_client,\n                        brokerName: response.broker,\n                        facility: { value: '', label: response.hospital_name },\n                        department: response.department,\n                        callerName: response.caller_name,\n                        contactNo: response.contact_no,\n                        ticketType: ticketCategory.ticket_type,\n                        specificType: ticketCategory.specific_type,\n                        urgency: ticketCategory.urgency,\n                        agent: { id: '', name: ticketCategory.assign_to },\n                        additionalNotes: response.additional_notes,\n                        additionalFiles: [],\n                        ticketNo: this.props.match.params['appNo'],\n                        pmCaseId: response.pmaker_case_uid,\n                        status: response.status,\n                        createdBy: { id: response.created_by.id, name: response.created_by.name },\n                        dateCreated: new Date(response.date_created),\n                        dateUpdated: new Date(response.date_updated),\n                        dateEscalated: new Date(response.date_escalated),\n                        approvalCode: response.approval_code\n                    }\n                });\n\n                if (confinement) {\n                    const providerData = confinement.provider.split(' - ');\n                    this.setState({confinement: {\n                        provider: { value: providerData[0], label: providerData[1] },\n                        dateAdmitted: new Date(confinement.date_admitted),\n                        confinementKind: confinement.confinement_kind,\n                        giftGiven: confinement.gift_given,\n                        coverage: { value: '', label: confinement.coverage },\n                        ticketNo: confinement.ticket_no,\n                        paidBy: confinement.paid_by,\n                        philhealthAmount: confinement.philhealth_amount,\n                        finalBill: confinement.final_bill,\n                        dischargeDate: confinement.discharge_date ? new Date(confinement.discharge_date) : null,\n\n                        primaryDiagnosisIndex: confinement.diagnoses\n                            .map((value, index) => {\n                                if (value.is_primary) {\n                                    return index;\n                                }\n                                return -1;\n                            })\n                            .filter(value => value != -1)[0],\n\n                        updates: confinement.updates.map(value => {\n                            return {\n                                remarks: value.remarks,\n                                date: new Date(value.date),\n                                hospitalBill: parseFloat(value.hospital_bill)\n                            };\n                        }),\n                        accommodations: confinement.room_accommodation.map(value => {\n                            return {\n                                roomType: value.room_type,\n                                days: value.no_of_days,\n                                costPerDay: value.cost\n                            };\n                        }),\n                        diagnoses: confinement.diagnoses.map(value => {\n                            return {\n                                diagnosis: { value: value.code, label: value.name },\n                                remarks: value.remarks,\n                                isFinal: value.is_final,\n                                isPrimary: value.is_primary\n                            };\n                        }),\n                        physicians: [].concat(...confinement.diagnoses.map(diagnosis => {\n                            return diagnosis.doctors.map(doctor => {\n                                return {\n                                    physician: {\n                                        value: '',\n                                        label: doctor.name,\n                                        params: [doctor.specialization, doctor.type]\n                                    },\n                                    diagnosis: { value: diagnosis.code, label: diagnosis.name },\n                                    remarks: doctor.remarks,\n                                    visits: doctor.no_of_visits,\n                                    amount: doctor.fee\n                                };\n                            });\n                        })),\n                        procedures: [].concat(...confinement.diagnoses.map(diagnosis => {\n                            return diagnosis.procedures.map(procedure => {\n                                return {\n                                    procedure: { value: procedure.code, label: procedure.name },\n                                    diagnosis: { value: diagnosis.code, label: diagnosis.name },\n                                    physician: { value: '', label: procedure.doctor },\n                                    date: new Date(procedure.date_added),\n                                    remarks: procedure.notes,\n                                    amount: parseInt(procedure.amount)\n                                };\n                            });\n                        })),\n                        items: confinement.others.map(value => {\n                            return {\n                                name: value.name,\n                                type: { value: '', label: value.type },\n                                amount: value.amount\n                            };\n                        }),\n                        files: response.supporting_documents.map(value => {\n                            return {\n                                docName: value.name,\n                                file: value\n                            };\n                        })\n                    }});\n                }\n                \n                if (inquiry) {\n                    this.setState({inquiries: inquiry.inquiry_list.map(value => {\n                        return {\n                            inquiry: { value: '', label: value.inquiry },\n                            detail: value.value,\n                            specificDetail: value.specific_detail,\n                            answer: value.answer,\n                            remarks: value.remarks,\n                            relatedTickets: value.related_tickets,\n                            supportDocs: value.support_docs\n                        };\n                    })});\n                }\n\n                /* Get Member Details */\n                API.get('customer-care/members/' + response.member_id, \n                    (response) => {\n                        console.log(response);\n                        this.setState({member: {\n                            cardNo: response.member_card_no,\n                            firstName: response.first_name,\n                            middleName: response.middle_name,\n                            lastName: response.last_name,\n                            clientName: response.client.registered_name,\n                            birthDate: new Date(response.date_of_birth),\n                            gender: response.gender,\n                            civilStatus: response.civil_status,\n                            contractId: response.active_contract._id,\n                            isVip: response.is_vip\n                        }});\n\n                        API.get('customer-care/members/' + response.member_card_no + '/benefits',\n                            (response) => {\n                                console.log(response);\n                            },\n                            (error) => {\n                                console.log(error);\n                            });\n                    },\n                    (error) => {\n                        console.log(error);\n                    });\n            },\n            (error) => {\n                console.log(error);\n            });\n    }\n\n    getErrorList = () => {\n        let errors: ErrorMessageFormat[] = [];\n\n        const confinement = this.state.confinement;\n        \n        if (confinement) {\n\n            /* Check if there's a physician assigned to each diagnosis */\n            let errorDiagnosis = confinement.diagnoses.filter(diagnosis => {\n                let matched = false;\n                confinement.physicians.map(physician => {\n                    matched = physician.diagnosis.value === diagnosis.diagnosis.value ? true : matched;\n                });\n                return !matched;\n            });\n\n            if (errorDiagnosis.length > 0) {\n                errors.push({\n                    message: 'Please assign a physician for the following diagnoses before proceding:',\n                    targets: errorDiagnosis.map(diagnosis => {\n                        return `${diagnosis.diagnosis.value} ${diagnosis.diagnosis.label}`\n                    })\n                });\n                this.setState({tabSelected: 5});\n            }\n        }\n        return errors;\n    }\n\n    uploadFiles = (fileData: FileData[], nextAction: Function) => {\n        let hasFiles = false;\n\n        const files = new FormData();\n        fileData.forEach(file => {\n            if (file.file && file.file['path'] && !file.file['field']) {\n                files.append(`supported_documents`, file.file);\n                hasFiles = true;\n            }\n        });\n\n        this.setState({isSaving: true});\n\n        if (hasFiles) {\n            API.postFormData('tmp/upload?path=customer-care', files,\n                (uploadResponse) => {\n                    nextAction(uploadResponse);\n                },\n                (error) => {\n                    console.log(error);\n                    this.setState({\n                        isSaving: false,\n                        snackbarMessage: 'Failed to upload files.'\n                    });\n                });\n        } else {\n            nextAction([]);\n        }\n    }\n\n    apiUpdateTicket(onSuccess: Function): void {\n        const member = this.state.member;\n        const confinement = this.state.confinement;\n\n        if (!member || !confinement) return;\n\n        const fileData = this.state.confinement ? this.state.confinement.files : [];\n        \n        this.uploadFiles(fileData, (uploadResponse) => {\n           \n            const payload = Payloads.getPutTicketPayload(\n                this.state.ticket,\n                member, \n                !uploadResponse.error && uploadResponse.length > 0 ? (\n                    confinement.files\n                        .map(file => file.file)\n                        .filter(file => file ? file['field'] : false)\n                        .concat(uploadResponse)\n                ) : (\n                    confinement.files.map(file => file.file)\n                ),\n                this.state.confinement,\n                this.state.inquiries\n            );\n\n            console.log(payload);\n            API.put('customer-care/tickets/' + this.props.match.params['ticketId'], payload,\n                (response) => {\n                    console.log(response);\n                    //Check which task case is at\n                    Processmaker.get('cases/'+this.props.match.params['caseId'],\n                        (response) => {\n                            console.log(response);\n                            if (response['current_task'][0]['tas_title'] === 'Create Ticket') {\n                                //Route Case to Modify/Update Ticket\n                                Processmaker.put('cases/'+this.props.match.params['caseId']+'/route-case', {},\n                                    (response) => {\n                                        console.log(response);\n                                        onSuccess();\n                                        // this.props.history.push('#/customer-care/tickets');\n                                        // window.location.reload();\n                                    },\n                                    (error) => {\n                                        console.log(error);\n                                        this.setState({\n                                            isSaving: false,\n                                            snackbarMessage: 'Failed to update ticket.'\n                                        });\n                                    }\n                                );\n                            } else {\n                                onSuccess();\n                            }\n                        },\n                        (error) => {\n                            console.log(error);\n                            this.setState({\n                                isSaving: false,\n                                snackbarMessage: 'Failed to update ticket.'\n                            });\n                        }\n                    );\n                },\n                (error) => {\n                    console.log(error);\n                    this.setState({\n                        isSaving: false,\n                        snackbarMessage: 'Failed to update ticket.'\n                    });\n                });\n        });\n    }\n\n    saveForNow(): void {\n        const member = this.state.member;\n        const confinement = this.state.confinement;\n\n        if (!member || !confinement) return;\n\n        const fileData = this.state.confinement ? this.state.confinement.files : [];\n\n        this.uploadFiles(fileData, (uploadResponse) => {\n            if (!this.state.member) {\n                return;\n            }\n\n            const payload = {\n                user_id: localStorage['user_id'],\n                ticket_no: this.state.ticket.id,\n                module: 'Customer Care',\n                process: 'Update Ticket',\n                timestamp: new Date(),\n                data: {\n                    tab_selected: this.state.tabSelected,\n                    member: this.state.member,\n                    ticket: this.state.ticket,\n                    confinement: {\n                        ...confinement,\n                        files: confinement.files\n                            .filter(file => file.file ? file.file['field'] : [])\n                            .concat(\n                                uploadResponse.map(file => {\n                                    return {\n                                        docName: file.name,\n                                        file: file\n                                    }\n                                })\n                            )\n                    },\n                    inquiries: this.state.inquiries,\n                    update_state: this.state.updateState,\n                    accommodation_state: this.state.accommodationState,\n                    diagnosis_state: this.state.diagnosisState,\n                    physician_state: this.state.physicianState,\n                    procedure_state: this.state.procedureState,\n                    other_detail_state: this.state.otherDetailState,\n                    file_state: this.state.fileState\n                }\n            };\n            console.log(payload);\n            console.log('files', \n                confinement.files\n                    .filter(file => file.file ? file.file['field'] : [])\n                    .concat(\n                        uploadResponse.map(file => {\n                            return {\n                                docName: file.name,\n                                file: file\n                            }\n                        })\n                    )\n            );\n            API.post('tmp', JSON.stringify(payload),\n                (response) => {\n                    console.log(response);\n                    if (response._id) {\n                        this.setState({\n                            isSaving: false,\n                            snackbarMessage: 'Progress saved.',\n                            lastSave: new Date()\n                        });\n                    } else {\n                        this.setState({\n                            isSaving: false,\n                            snackbarMessage: 'Failed to save progress.'\n                        });\n                    }\n                },\n                (error) => {\n                    console.log(error);\n                    this.setState({\n                        isSaving: false,\n                        snackbarMessage: 'Failed to save progress.'\n                    });\n                });\n        });\n    }\n\n    render(): JSX.Element {\n        return (\n            <Grid container className='customer-care-main'>\n                {this.state.loadedResources !== UpdateTicketPage.RESOURCES_TO_LOAD || this.state.isSaving ? (\n                    <div \n                        style={{\n                            backgroundColor: '#00000055', \n                            zIndex: 100, \n                            position: 'fixed', \n                            width: '100%', \n                            height: '100%'}}>\n                        <Loading height='10rem'/>\n                    </div>\n                    \n                ) : (null)}\n\n                <Snackbar\n\t\t\t        anchorOrigin={{\n\t\t\t          vertical: 'top',\n\t\t\t          horizontal: 'right',\n\t\t\t        }}\n\t\t\t        open={this.state.snackbarMessage ? true : false}\n\t\t\t        autoHideDuration={6000}\n\t\t\t        onClose={() => {\n                        this.setState({snackbarMessage: null});\n                    }}\n                    message={this.state.snackbarMessage} />\n\n                <CustomModal\n                    className='modal'\n                    isOpen={this.state.isAssessmentModalOpen}\n                    handleClose={() => this.setState({isAssessmentModalOpen: false})}\n                    renderHeader={() => {\n                        return <>Missing Information</>\n                    }}\n                    renderContent={() => {\n                        return (\n                            <div className='header-2'>\n                                {this.errors.map(error => {\n                                    return (\n                                        <>\n                                        <p>{error.message}</p>\n                                        <p>\n                                            {error.targets.map(target => {\n                                                return <div>{`- ${target}`}</div>\n                                            })}\n                                        </p>\n                                        </>\n                                    );\n                                })}\n                            </div>\n                        );\n                    }}\n                    renderFooter={() => {\n                        return (\n                            <Button \n                                variant='outlined' \n                                color='primary'\n                                onClick={() => {this.setState({isAssessmentModalOpen: false})}}>\n                                Okay\n                            </Button>\n                        );\n                    }} />\n                \n                <MemberDataSection \n                    member={this.state.member}\n                    ticket={this.state.ticket}\n                    ticketStatus='Update'\n                    disableRecentTickets\n                    onUpdateMemberStateChange={(_member: MemberData) => null} />\n                {this.state.confinement ? (\n                    this.renderInpatientContent(this.state.confinement)\n                ) : this.state.inquiries ? (\n                    this.renderInquiryContent(this.state.inquiries)\n                ) : null}\n\n                <TicketFooter\n                    lastSave={this.state.lastSave}\n                    onSaveForNow={() => {\n                        this.saveForNow();\n                    }} \n                    onAssign={() => null}\n                    onEscalate={() => null}\n                    onFinalAssessment={() => {\n                        this.errors = this.getErrorList();\n                        console.log(this.errors.length);\n                        if (this.errors.length == 0) {\n                            this.apiUpdateTicket(() => {\n                                this.props.history.push(\n                                    '#/customer-care/resolve-ticket/' +\n                                    this.props.match.params['caseId'] + '/' +\n                                    this.props.match.params['appNo'] + '/' +\n                                    this.props.match.params['ticketId']);\n                                window.location.reload();\n                            });\n                        } else {\n                            this.setState({isAssessmentModalOpen: true});\n                        }\n                    }}\n                    onUpdateTicket={() => {\n                        this.apiUpdateTicket(() => {\n                            this.props.history.push('#/customer-care/tickets');\n                            window.location.reload();\n                        });\n                    }} />\n            </Grid>\n        );\n    }\n\n    renderInpatientContent(confinement: ConfinementDetails): JSX.Element {\n        return (\n            <div className='update-ticket'>\n                <CustomTabs \n                    tabList={this.tabList}\n                    selectedTab={this.state.tabSelected}\n                    setSelectedTab={(index: number) => {\n                        this.setState({tabSelected: index});\n                    }} />\n                    \n                {this.state.tabSelected === 1 ? (\n                    <SummarySection \n                        ticketNo={this.state.ticket.ticketNo} \n                        updates={confinement.updates}\n                        accommodations={confinement.accommodations}\n                        diagnoses={confinement.diagnoses}\n                        physicians={confinement.physicians}\n                        procedures={confinement.procedures}\n                        items={confinement.items}\n                        provider={confinement.provider}\n                        dateAdmitted={confinement.dateAdmitted}\n                        confinementKind={confinement.confinementKind}\n                        coverage={confinement.coverage}\n                        philhealthAmount={confinement.philhealthAmount}\n                        finalBill={confinement.finalBill}\n                        dischargeDate={confinement.dischargeDate}\n                        setTabSelected={(value: number) => this.setState({tabSelected: value})}/>\n                    \n\n                ) : this.state.tabSelected === 2 ? (\n                    <UpdateSection \n                        confinement={confinement}\n                        updates={confinement.updates}\n                        state={this.state.updateState}\n                        refreshUpdatesState={() => {\n                            this.setState({confinement: confinement});\n                        }} /> \n\n                ) : this.state.tabSelected === 3 ? (\n                    this.state.ticket ? (\n                        <AccommodationsSection\n                            accommodations={confinement.accommodations}\n                            state={this.state.accommodationState}\n                            facilitiesList={this.facilities}\n                            provider={confinement.provider}\n                            dateAdmitted={confinement.dateAdmitted}\n                            confinementKind={confinement.confinementKind}\n                            refreshAccommodationsState={() => {\n                                this.setState({confinement: confinement});\n                            }} />\n                    ) : null\n\n                ) : this.state.tabSelected === 4 ? (\n                    this.state.ticket ? (\n                        <DiagnosesSection \n                            diagnoses={confinement.diagnoses}\n                            state={this.state.diagnosisState}\n                            physicians={confinement.physicians}\n                            procedures={confinement.procedures}\n                            diagnosesList={this.icd10Codes}\n                            primaryDiagnosisIndex={confinement.primaryDiagnosisIndex}\n                            refreshDiagnosisStateChange={() => {\n                                this.setState({confinement: confinement});\n                            }}\n                            setPrimaryDiagnosisIndex={(index: number) => {\n                                this.setState(prevState => ({\n                                    ...prevState,\n                                    confinement: {\n                                        ...confinement,\n                                        primaryDiagnosisIndex: index\n                                    }\n                                }));\n                            }} />\n                    ) : null\n\n                ) : this.state.tabSelected === 5 ? (\n                    <PhysiciansSection \n                        physicians={confinement.physicians}\n                        state={this.state.physicianState}\n                        physiciansList={this.doctors}\n                        diagnosesList={confinement.diagnoses}\n                        refreshPhysiciansStateChange={() => {\n                            this.setState({confinement: confinement});\n                        }} />\n\n                ) : this.state.tabSelected === 6 ? (\n                    <ProceduresSection\n                        procedures={confinement.procedures}\n                        state={this.state.procedureState}\n                        proceduresList={this.cptCodes}\n                        diagnosesList={confinement.diagnoses}\n                        physiciansList={this.doctors}\n                        refreshProceduresStateChange={() => {\n                            this.setState({confinement: confinement});\n                        }} />\n\n                ) : this.state.tabSelected === 7 ? (\n                    <DischargeDetailsSection \n                        dateAdmitted={confinement.dateAdmitted}\n                        coverage={confinement.coverage} \n                        ticketNo={confinement.ticketNo} \n                        paidBy={confinement.paidBy} \n                        philhealthAmount={confinement.philhealthAmount}\n                        finalBill={confinement.finalBill} \n                        dischargeDate={confinement.dischargeDate}\n                        onUpdateTicketStateChange={(attrName: string, value: any) => {\n                            this.setState(prevState => ({\n                                ...prevState,\n                                confinement: {\n                                    ...confinement,\n                                    [attrName]: value\n                                }\n                            }));\n                        }} />\n                    \n                ) : this.state.tabSelected === 8 ? (\n                    <OtherDetailsSection \n                        items={confinement.items}\n                        state={this.state.otherDetailState}\n                        refreshItemsStateChange={() => {\n                            this.setState({confinement: confinement});\n                        }} />\n                    \n                ) : this.state.tabSelected === 9 ? (\n                    <UploadedDocumentsSection \n                        files={confinement.files}\n                        state={this.state.fileState}\n                        refreshFilesStateChange={() => {\n                            this.setState({confinement: confinement});\n                        }} />\n                    \n                    \n                    \n                ) : null}\n            </div>\n        );\n    }\n\n    renderInquiryContent(inquiries: InquiryData[]): JSX.Element {\n        return (\n            <UpdateInquirySection \n                inquiries={inquiries}\n                refreshInquiryState={() => {\n                    this.setState({inquiries: inquiries});\n                }} />\n        );\n    }\n}\n\n","/**\n * Asynchronously loads the component for FeaturePage\n */\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Components, Utils } from '@hims/core';\nconst { loadable } = Utils;\nconst { LoadingIndicator } = Components.UI;\n\n\nexport default loadable(async () => {\n  let {HomePage,  mapStateToProps, mapDispatchToProps} = await import('./HomePage');\n  const Component = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  )(HomePage);\n  return {default: Component};\n}, {\n  fallback: <LoadingIndicator />,\n});\n","import * as React from 'react';\nimport { Grid } from '@material-ui/core';\n\ninterface IProps {\n    data: any[];\n    renderHeader: () => JSX.Element;\n    renderRow: (rowData: any, index: number) => JSX.Element;\n}\n\nexport class ComplexTable extends React.Component<IProps> {\n\n    render(): JSX.Element {\n        return (\n            <div className='complex-table'>\n                <Grid className='header' container spacing={1}>\n                    {this.props.renderHeader()}\n                </Grid>\n                \n                {this.props.data.map((rowData, index) => {\n                    const backColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                    return (\n                        <div className='item' style={{backgroundColor: backColor}}>\n                            {this.props.renderRow(rowData, index)}\n                        </div>\n                    );\n                })}\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { ComplexTable } from 'Pages/CustomerCarePage/Components/ComplexTable';\nimport { Grid } from '@material-ui/core';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { ProcedureData, AvailmentDetails, DiagnosisData } from 'Pages/CustomerCarePage/Models';\nimport { InputArea } from 'Pages/CustomerCarePage/Components/InputArea';\nimport { CustomRadio } from 'Pages/CustomerCarePage/Components/CustomRadio';\n\ninterface IProps {\n    availment: AvailmentDetails;\n    refreshAvailmentState: () => void;\n}\n\n\nexport class ApproveAvailmentSection extends React.Component<IProps> {\n\n    APPROVED = 'Approved';\n    DISAPPROVED = 'Disapproved';\n    PENDING = 'Pending';\n\n    constructor(props: IProps) {\n        super(props);\n    }\n\n    getProceduresCost = (diagnosis: DiagnosisData) => {\n        let total = 0;\n        diagnosis.procedures.map(procedure => {\n            total += procedure.amount;\n        });\n        return total;\n    }\n\n    getApprovedAvailmentsCost = () => {\n        let total = 0;\n        this.props.availment.diagnoses.map(diagnosis => {\n            diagnosis.procedures.map(procedure => {\n                total += (procedure.assessmentType === this.APPROVED ? procedure.amount : 0);\n            });\n        });\n        return total;\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Approve or Disapprove Availments</div>\n                <div className='sub-section'>\n                    <div className='light-text'>PROVIDER</div>\n                    <div className='small-text'>\n                    {this.props.availment.provider.value + ' - ' + this.props.availment.provider.label}</div>\n                    <div style={{float: 'right'}}>\n                        <span className='small-text'>TOTAL AMOUNT</span>\n                        <span style={{marginLeft: '1rem'}} />\n                        <span className='header-2'>\n                            {'PHP ' + GlobalFunction.formatNumber(this.getApprovedAvailmentsCost(), true)}\n                        </span>\n                    </div>\n                </div>\n                <div className='sub-section'>\n                    <ComplexTable \n                        data={this.props.availment.diagnoses}\n                        renderHeader={() => this.renderHeader()}\n                        renderRow={(rowData: any, index: number) => \n                            this.renderRow(rowData, index)} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderHeader(): JSX.Element {\n        const headerNameStyle = {\n            margin: 0,\n            padding: '12px 0 12px 0'\n        };\n\n        return (\n            <>\n                <Grid item xs={4}>\n                    <div className='header-2' style={headerNameStyle}>Diagnosis</div>\n                </Grid>\n                <Grid item xs={4}>\n                    <div className='header-2' style={headerNameStyle}>Doctor</div>\n                </Grid>\n                <Grid item xs={2}>\n                    <div className='header-2' style={headerNameStyle}>Professional Fee</div>\n                </Grid>\n                <Grid item xs={2}>\n                    <div className='header-2' style={{...headerNameStyle, textAlign: 'right'}}>\n                        Total Amt. of Procedures\n                    </div>\n                </Grid>\n            </>\n        );\n    }\n\n    renderRow(diagnosis: DiagnosisData, _index: number): JSX.Element {\n        return (\n            <>\n                <Grid className='small-section' container>\n                    <Grid item xs={4}>\n                        {diagnosis.icd10Code.value + ' - ' + diagnosis.icd10Code.label}\n                    </Grid>\n                    <Grid item xs={4}>\n                        {diagnosis.doctors[0].id + ' - ' + diagnosis.doctors[0].name}\n                    </Grid>\n                    <Grid item xs={2}>\n                        {'PHP ' + GlobalFunction.formatNumber(diagnosis.doctors[0].fee, true)}\n                    </Grid>\n                    <Grid item xs={2} style={{fontWeight: 'bold', textAlign: 'right'}}>\n                        {'PHP ' + GlobalFunction.formatNumber(this.getProceduresCost(diagnosis), true)}\n                    </Grid>\n                </Grid>\n                <div className='line-border' />\n                {diagnosis.procedures.map((procedure, index) => {\n                    return this.renderProcedure(procedure, index);\n                })}\n            </>\n        );\n    }\n\n    renderProcedure(procedure: ProcedureData, index: number): JSX.Element {\n        return (\n            <>\n            <div className='line-border' />\n            <div className='section' >\n                \n                <Grid container>\n                    <Grid item xs={4}>\n                        <div>\n                            <Grid container>\n                                <Grid item xs={2} style={{padding: '0 0.5rem', marginTop: '-3px'}}>\n                                    <div className='number-item'>{index + 1}</div>\n                                </Grid>\n                                <Grid item xs={10} className='header-2'>\n                                    {procedure.cptCode.value + ' - ' + procedure.cptCode.label}\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Grid>\n                    \n                </Grid>\n                <Grid container>\n                    <Grid item xs={4}>\n                        <div>\n                            <Grid container>\n                                <Grid item xs={2} />\n                                <Grid item xs={10}>\n                                    <div className='sub-section'>\n                                        <div className='light-text'>AMOUNT</div>\n                                        <div className='small-text'>{'PHP ' + GlobalFunction.formatNumber(procedure.amount, true)}</div>\n                                    </div>\n                                    <div className='sub-section'>\n                                        <div className='light-text'>PHILHEALTH REQUIRED?</div>\n                                        <div className='small-text'>{procedure.isPHIC ? 'Yes' : 'No'}</div>\n                                    </div>\n                                    <div className='sub-section'>\n                                        <div className='light-text'>DATE OF AVAILMENT</div>\n                                        <div className='small-text'>{GlobalFunction.toCommonDateString(procedure.dateAdded)}</div>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <div className='sub-section'>\n                            <div className='light-text'>SYSTEM ASSESSMENT</div>\n                            <div className='small-text'>{'Approve *'}</div>\n                        </div>\n                        <div className='sub-section'>\n                            <div className='light-text'>REMAINING BALANCE</div>\n                            <div className='small-text'>{'PHP ' + 0 + '.00 *'}</div>\n                        </div>\n                        <div className='sub-section'>\n                            <div className='light-text'>CLAUSE</div>\n                            <div className='small-text'>{'Laboratory tests, x-rays, and other diagnostic examinations prescribed by the INTELLICARE physician*'}</div>\n                        </div>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <div className='sub-section'>\n                            <div className='light-text'>Choose Assessment</div>\n                            <CustomRadio \n                                label='Approve'\n                                checkedCondition={procedure.assessmentType === this.APPROVED}\n                                onChange={() => {\n                                    procedure.assessmentType = this.APPROVED;\n                                    this.props.refreshAvailmentState();\n                                }} />\n                            <CustomRadio \n                                label='Disapprove'\n                                checkedCondition={procedure.assessmentType === this.DISAPPROVED}\n                                onChange={() => {\n                                    procedure.assessmentType = this.DISAPPROVED;\n                                    this.props.refreshAvailmentState();\n                                }} />\n                            <CustomRadio \n                                label='Pending'\n                                checkedCondition={procedure.assessmentType === this.PENDING}\n                                onChange={() => {\n                                    procedure.assessmentType = this.PENDING;\n                                    this.props.refreshAvailmentState();\n                                }} />\n                        </div>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <div className='sub-section'>\n                            <div className='light-text'>Remarks</div>\n                            <InputArea\n                                value={procedure.assessmentRemarks}\n                                onChange={(value: string) => {\n                                    procedure.assessmentRemarks = value;\n                                    this.props.refreshAvailmentState();\n                                }} />\n                        </div>\n                    </Grid>\n                </Grid>\n            </div>\n            </>\n        );\n    }\n}","import * as React from 'react';\nimport { Grid, TableCell, TableRow } from '@material-ui/core';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { API } from 'Pages/CustomerCarePage/API';\nimport { PartialBenefitData } from 'Pages/CustomerCarePage/Models';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\nimport { faSort } from '@fortawesome/free-solid-svg-icons';\nimport { LabelDisplayedRowsArgs } from '@material-ui/core/TablePagination';\nimport { Loading } from 'Pages/CustomerCarePage/Components/Loading';\n\ninterface IProps {\n    cardNo: string;\n}\n\ninterface IStates {\n    benefitCategory: string;\n    benefitName: string;\n    limitType: string;\n    limit: string;\n\n    benefitListUpdated: boolean;\n}\n\n\nexport class CheckBenefitSection extends React.Component<IProps, IStates> {\n\n    benefits: PartialBenefitData[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            benefitCategory: '',\n            benefitName: '',\n            limitType: '',\n            limit: '',\n            benefitListUpdated: false\n        }\n\n        this.benefits = [];\n    }\n\n    componentDidMount() {\n        this.loadBenefitsData();\n    }\n\n    loadBenefitsData(): void {\n        API.get(`customer-care/members/${this.props.cardNo}/benefits`, \n            (response) => {\n                console.log(response);\n                this.benefits = this.combineNodes(\n                        response.filter(benefit => benefit.level == 6),\n                        response.filter(benefit => benefit.level == 7)\n                    ).map(benefit => {\n                        return {\n                            category: benefit.parent_name,\n                            name: benefit.name,\n                            limitType: (benefit.limits.length > 0 ? benefit.limits[0].type : 'None'),\n                            limit: (benefit.limits.length > 0 ? (\n                                benefit.limits[0].limit + ' ' + benefit.limits[0].limit_unit\n                            ) : '---')\n                        }\n                    });\n                this.setState({benefitListUpdated: true});\n\n                /* Testing only */\n                console.log(\n                    this.combineNodes(\n                        response.filter(benefit => benefit.level == 6),\n                        response.filter(benefit => benefit.level == 7)\n                    )\n                );\n            },\n            (error) => {\n                console.log(error);\n            });\n    }\n\n    combineNodes = (parentNodes, childNodes) => {\n        const nodes = parentNodes.reduce ((result, parent) => {\n            parent.children.map ((child) => {\n            let foundChild = childNodes.find ((childNode) => child === childNode._id);\n        \n            if (foundChild) {\n                let child = Object.assign({}, foundChild);\n        \n                child['parent_name'] = parent.name;\n                child['parent_code'] = parent.code;\n                child['disabled'] = false;\n                result.push(child);\n            }\n            });\n        \n            return result;\n        }, new Array());\n        \n        return nodes;\n    };\n\n    getFilteredBenefitsData = () => {\n        return (\n            this.benefits\n                .filter(benefit => \n                    this.state.benefitCategory === '' || \n                    benefit.category.toLowerCase().includes(this.state.benefitCategory.toLowerCase()))\n                .filter(benefit => \n                    this.state.benefitName === '' || \n                    benefit.name.toLowerCase().includes(this.state.benefitName.toLowerCase()))\n                .filter(benefit => \n                    this.state.limitType === '' || \n                    benefit.limitType.toLowerCase().includes(this.state.limitType.toLowerCase()))\n                .filter(benefit => \n                    this.state.limit === '' || \n                    benefit.limit.toLowerCase().includes(this.state.limit.toLowerCase()))\n        );\n    }\n    \n    sortBenefits(attrName: string, isAsc: boolean): void {\n        this.benefits.sort((a: PartialBenefitData, b: PartialBenefitData) => \n            (a[attrName] && b[attrName] && a[attrName].toString().toLowerCase() > b[attrName].toString().toLowerCase()) ? \n                (isAsc ? 1 : -1) : (isAsc ? -1 : 1)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Check Benefits</div>\n                <div className='sub-section' />\n                <Grid container className='sub-section' spacing={5}>\n                    {this.renderSideBar()}\n\n                    {this.state.benefitListUpdated ? (\n                        this.renderBenefitsList()\n                    ) : (\n                        <Grid item xs={10}>\n                            <Loading height='10rem'/>\n                        </Grid>\n                    )}\n                    \n                </Grid>\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderSideBar(): JSX.Element {\n        const rightBorderStyle = {\n            borderRight: '#3C394A22 solid 1px'\n        }\n        return (\n            <Grid item xs={2} style={rightBorderStyle}>\n                    <div className='small-text'>Contract ID</div>\n                    <div className='header-1'>{'2019-0928*'}</div>\n                <div className='sub-section'>\n                    <div className='small-text'>Room and Board</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>COVERAGE</div>\n                    <div className='sub-section'>\n                        <TextButton \n                            label='APE' \n                            onClick={() => {\n                                this.setState({benefitListUpdated: false});\n                                this.loadBenefitsData();\n                            }} />\n                    </div>\n                    <div className='sub-section'>\n                        <TextButton \n                            label='PPE' \n                            onClick={() => {\n                                this.setState({benefitListUpdated: false});\n                                this.loadBenefitsData();\n                            }} />\n                    </div>\n                    <div className='sub-section'>\n                        <TextButton \n                            label='Inpatient' \n                            onClick={() => {\n                                this.setState({benefitListUpdated: false});\n                                this.loadBenefitsData();\n                            }} />\n                    </div>\n                    <div className='sub-section'>\n                        <TextButton \n                            label='Outpatient' \n                            onClick={() => {\n                                this.setState({benefitListUpdated: false});\n                                this.loadBenefitsData();\n                            }} />\n                    </div>\n                    <div className='sub-section'>\n                        <TextButton \n                            label='Emergency' \n                            onClick={() => {\n                                this.setState({benefitListUpdated: false});\n                                this.loadBenefitsData();\n                            }} />\n                    </div>\n                </div>\n\n                <div className='sub-section'>\n                    <div className='header-1 light-text'>RIDERS</div>\n                </div>\n\n            </Grid>\n        );\n    }\n\n    renderBenefitsList(): JSX.Element {\n\n        return (\n            <Grid item xs={10}>\n                <div className='sub-section'>\n                    <CustomTable\n                        rows={this.getFilteredBenefitsData()}\n                        renderHeader={() => this.renderTableHeader()}\n                        renderRow={(rowData: any, index: number) => \n                            this.renderTableRow(rowData, index)}\n                        onChangeInfo={(info: LabelDisplayedRowsArgs) => \n                            `${info.from}-${info.to} out of ${info.count} benefits`}\n                        labelRowsPerPage='Show'\n                        rowsPerPageOptions={[10, 25, 50]} />\n                </div>\n\n            </Grid>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n\n        return (\n            <>\n            {this.renderHeaderColumn('benefitCategory', 'Benefit Category', '150px')}\n            {this.renderHeaderColumn('benefitName', 'Benefit', '250px')}\n            {this.renderHeaderColumn('limitType', 'Limit Type', '100px')}\n            {this.renderHeaderColumn('limit', 'Limit', '100px')}\n            </>\n        );\n    }\n\n    renderTableRow(benefit: PartialBenefitData, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                <TableCell>{benefit.category}</TableCell>\n                <TableCell>{benefit.name}</TableCell>\n                <TableCell>{benefit.limitType}</TableCell>\n                <TableCell>{benefit.limit}</TableCell>\n            </TableRow>\n        );\n    }\n\n    renderHeaderColumn(attrName: string, headerText: string, width: string): JSX.Element {\n        return (\n            <TableCell style={{width: width}}>\n                <span className='header-2'>{headerText}</span>\n                <div style={{float: 'right'}}>\n                    <IconButton \n                        icon={faSort} \n                        onClick={() => {\n                            this.sortBenefits(attrName, true);\n                            this.setState({benefitListUpdated: true});\n                        }} />\n                </div>\n                <InputField\n                    value={this.state[attrName]}\n                    onChange={(value: string) => {\n                        this.setState(prevState => ({...prevState, [attrName]: value}));\n                    }} />\n            </TableCell>\n        );\n    }\n}","import * as React from 'react';\nimport { Button } from '@material-ui/core';\n\ninterface IProps {\n    isSummarizing: boolean;\n    onAssign: () => void;\n    onEscalate: () => void;\n    onSummarize: () => void;\n    onResolve: () => void;\n}\n\nexport class ResolveTicketFooter extends React.Component<IProps> {\n    \n    constructor(props: IProps) {\n        super(props);\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='footer'>\n                <Button \n                    className='button-neutral'\n                    onClick={this.props.onAssign}>\n                    Assign\n                </Button>\n                <Button \n                    className='button-error'\n                    onClick={this.props.onEscalate}>\n                    Escalate\n                </Button>\n                {this.props.isSummarizing ? (\n                    <Button \n                        className='button'\n                        onClick={this.props.onResolve}>\n                        Mark as Resolved\n                    </Button>\n                ) : (\n                    <Button \n                        className='button'\n                        onClick={this.props.onSummarize}>\n                        Summarize Assessment\n                    </Button>\n                )}\n                \n                \n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Grid, TableRow, TableCell } from '@material-ui/core';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\nimport { faSort, faCheck, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\ninterface IStates {\n    code: string;\n    name: string;\n    location: string;\n\n    facilitiesListUpdated: boolean;\n}\n\nexport class PartnerNetworkSection extends React.Component<{}, IStates> {\n    \n    dummyData = [\n        { code: '87854', name: 'St. Mary’s Hospital Calamba', location: 'CMC Ave, Real, Calamba, Laguna' },\n        { code: '40092', name: 'Evangelista Medical Specialty Hospital', location: 'Macaria Drive, San Pedro, Laguna' },\n        { code: '14659', name: 'Los Banos Doctors Hospital and Medical Center', location: 'Lopez Ave, Los Baños, Laguna' }\n    ];\n\n    dummyGroups = [\n        { checked: true, label: 'Top 5 Hospitals' },\n        { checked: false, label: 'Top 6 Hospitals' },\n        { checked: true, label: 'Healthway Clinics' },\n        { checked: false, label: 'Medical City Network' }\n    ]\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            code: '',\n            name: '',\n            location: '',\n            facilitiesListUpdated: false\n        }\n    }\n\n    getFilteredFacilitiesData(): any {\n        return (\n            this.dummyData\n                .filter(facility => \n                    this.state.code === '' || \n                    facility.code.toLowerCase().includes(this.state.code.toLowerCase()))\n                .filter(facility => \n                    this.state.name === '' || \n                    facility.name.toLowerCase().includes(this.state.name.toLowerCase()))\n                .filter(facility => \n                    this.state.location === '' || \n                    facility.location.toLowerCase().includes(this.state.location.toLowerCase()))\n        );\n    }\n\n    sortFacilities(attrName: string, isAsc: boolean): void {\n        this.dummyData.sort((a: any, b: any) => \n            (a[attrName].toString().toLowerCase() > b[attrName].toString().toLowerCase()) ? (isAsc ? 1 : -1) : (isAsc ? -1 : 1)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Check Partner Network</div>\n                <div className='sub-section'>\n                    <div className='header-2'>TYPE</div>\n                    <div className='small-text'>Open Door</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='header-2'>GROUP</div>\n                    <Grid className='sub-section' container spacing={2} style={{width: '50%'}}>\n                        {this.dummyGroups.map(group => {\n                            return (\n                                <Grid item xs={6}>\n                                    <span>\n                                        {group.checked ? (\n                                            <FontAwesomeIcon icon={faCheck} style={{color: '#3AB77D'}} />\n                                        ) : (\n                                            <FontAwesomeIcon icon={faTimes} style={{color: '#FD5451'}} />\n                                        )}\n                                    </span>\n                                    <span style={{paddingLeft: '1rem'}}>{group.label}</span>\n                                </Grid>\n                            );\n                        })}\n                    </Grid>\n                </div>\n                <div className='sub-section'>\n                    <Grid className='sub-section' container spacing={2}>\n                        <Grid item xs={2}>\n                            <TextButton label='Excluded Hospitals' onClick={() => {}} />\n                        </Grid>\n                        <Grid item xs={2}>\n                            <TextButton label='Included Hospitals' onClick={() => {}} />   \n                        </Grid>\n                    </Grid>\n                    <CustomTable\n                        rows={this.getFilteredFacilitiesData()}\n                        renderHeader={() => this.renderTableHeader()}\n                        renderRow={(rowData: any, index: number) => \n                            this.renderTableRow(rowData, index)} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n        \n        return (\n            <>\n            {this.renderHeaderColumn('code', 'Facility Code')}\n            {this.renderHeaderColumn('name', 'Name')}\n            {this.renderHeaderColumn('location', 'Location')}\n            </>\n        );\n    }\n\n    renderTableRow(facility: any, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                <TableCell>{facility.code}</TableCell>\n                <TableCell>{facility.name}</TableCell>\n                <TableCell>{facility.location}</TableCell>\n            </TableRow>\n        );\n    }\n\n    renderHeaderColumn(attrName: string, headerText: string): JSX.Element {\n        return (\n            <TableCell>\n                <span className='header-2'>{headerText}</span>\n                <div style={{float: 'right'}}>\n                    <IconButton \n                        icon={faSort} \n                        onClick={() => {\n                            this.sortFacilities(attrName, true);\n                            this.setState({facilitiesListUpdated: true});\n                        }} />\n                </div>\n                <InputField\n                    value={this.state[attrName]}\n                    onChange={(value: string) => {\n                        this.setState(prevState => ({...prevState, [attrName]: value}));\n                    }} />\n            </TableCell>\n        );\n    }\n}","import * as React from 'react';\nimport { ComplexTable } from 'Pages/CustomerCarePage/Components/ComplexTable';\nimport { Grid, TableCell, TableRow } from '@material-ui/core';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { ProcedureData, AvailmentDetails, DiagnosisData, LOAData, DropdownChoice } from 'Pages/CustomerCarePage/Models';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { NumberField } from 'Pages/CustomerCarePage/Components/NumberField';\nimport { DatePicker } from 'Pages/CustomerCarePage/Components/DatePicker';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { faPlus, faMinusCircle } from '@fortawesome/free-solid-svg-icons';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\nimport { Dropdown } from 'Pages/CustomerCarePage/Components/Dropdown';\nimport { ConfinementDetails } from '../ResolveTicketPage';\n\ninterface IProps {\n    availment?: AvailmentDetails;\n    loas: LOAData[];\n    loaToDelete: string[];\n    refreshLOAStates: () => void;\n}\n\ninterface IStates {\n    loaNumber: number;\n    status: DropdownChoice;\n    amount: number;\n    loaDate: Date;\n    notes: string;\n}\n\nexport class SummaryAvailmentSection extends React.Component<IProps, IStates> {\n\n    APPROVED = 'Approved';\n    DISAPPROVED = 'Disapproved';\n    PENDING = 'Pending';\n\n    loaTypes: DropdownChoice[];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            loaNumber: 0,\n            status: { value: '', label: '' },\n            amount: 0,\n            loaDate: new Date(),\n            notes: ''\n        }\n\n        this.loaTypes = [\n            { value: '1', label: 'Pending' },\n            { value: '2', label: 'Claimed' },\n            { value: '3', label: 'Disapproved' }\n        ]\n    }\n\n    getProceduresCost = (diagnosis: DiagnosisData) => {\n        let total = 0;\n        diagnosis.procedures.map(procedure => {\n            total += procedure.amount;\n        })\n        return total;\n    }\n\n    getApprovedAvailments = (availment: AvailmentDetails | ConfinementDetails) => {\n        const approvedAvailments = availment.diagnoses.map(diagnosis => {\n            return {\n                ...diagnosis,\n                procedures: diagnosis.procedures\n                    .filter(procedure => procedure.assessmentType === this.APPROVED)\n                    .map(procedure => {return procedure;})\n            };\n        });\n        return approvedAvailments.filter(availment => availment.procedures.length > 0);\n    }\n\n    getDisapprovedAvailments = (availment: AvailmentDetails | ConfinementDetails) => {\n        const disapprovedAvailments = availment.diagnoses.map(diagnosis => {\n            return {\n                ...diagnosis,\n                procedures: diagnosis.procedures\n                    .filter(procedure => procedure.assessmentType === this.DISAPPROVED)\n                    .map(procedure => {return procedure;})\n            };\n        });\n        return disapprovedAvailments.filter(availment => availment.procedures.length > 0);\n    }\n\n    getApprovedAvailmentsCost = (availment: AvailmentDetails | ConfinementDetails) => {\n        let total = 0;\n        availment.diagnoses.map(diagnosis => {\n            diagnosis.procedures.map(procedure => {\n                total += (procedure.assessmentType === this.APPROVED ? procedure.amount : 0);\n            });\n        });\n        return total;\n    }\n\n    render(): JSX.Element {\n        if (this.props.availment) {\n            return this.renderAvailment(this.props.availment);\n        } else {\n            return <div>WALANG AVAILMENT</div>\n        }\n    }\n\n    renderAvailment(availment: AvailmentDetails | ConfinementDetails): JSX.Element {\n        const approvedAvailments = this.getApprovedAvailments(availment);\n        const disapprovedAvailments = this.getDisapprovedAvailments(availment);\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Summary of Approved Availments</div>\n                <div className='sub-section'>\n                    <div className='light-text'>PROVIDER</div>\n                    <div className='small-text'>\n                    {availment.provider.label}</div>\n                    <div style={{float: 'right'}}>\n                        <span className='small-text'>TOTAL AMOUNT</span>\n                        <span style={{marginLeft: '1rem'}} />\n                        <span className='header-2'>\n                            {'PHP ' + GlobalFunction.formatNumber(this.getApprovedAvailmentsCost(availment), true)}\n                        </span>\n                    </div>\n                </div>\n                {approvedAvailments.length > 0 ? (\n                    <div className='sub-section'>\n                        <ComplexTable \n                            data={this.getApprovedAvailments(availment)}\n                            renderHeader={() => this.renderHeader()}\n                            renderRow={(rowData: any, index: number) => \n                                this.renderRow(rowData, index)} />\n                    </div>\n                ) : null}\n                <div className='sub-section'>\n                    <CustomTable\n                        rows={this.props.loas}\n                        renderHeader={() => this.renderLOAHeader()}\n                        renderRow={(rowData: any, index: number) => \n                            this.renderLOARow(rowData, index)} />\n                </div>\n                <div className='sub-section' />\n                {disapprovedAvailments.length > 0 ? (\n                    <>\n                    <div className='header-1' style={{color: '#FD5451'}}>Disapproved Availments</div>\n                    <div className='sub-section'>\n                        <ComplexTable \n                            data={this.getDisapprovedAvailments(availment)}\n                            renderHeader={() => this.renderHeader()}\n                            renderRow={(rowData: any, index: number) => \n                                this.renderRow(rowData, index)} />\n                    </div>\n                    </>\n                ) : null}\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderHeader(): JSX.Element {\n        const headerNameStyle = {\n            margin: 0,\n            padding: '12px 0 12px 0'\n        };\n\n        return (\n            <>\n                <Grid item xs={4}>\n                    <div className='header-2' style={headerNameStyle}>Diagnosis</div>\n                </Grid>\n                <Grid item xs={4}>\n                    <div className='header-2' style={headerNameStyle}>Doctor</div>\n                </Grid>\n                <Grid item xs={2}>\n                    <div className='header-2' style={headerNameStyle}>Professional Fee</div>\n                </Grid>\n                <Grid item xs={2}>\n                    <div className='header-2' style={{...headerNameStyle, textAlign: 'right'}}>\n                        Total Amt. of Procedures\n                    </div>\n                </Grid>\n            </>\n        );\n    }\n\n    renderRow(diagnosis: DiagnosisData, _index: number): JSX.Element {\n        return (\n            <>\n                <Grid className='small-section' container>\n                    <Grid item xs={4}>\n                        {diagnosis.icd10Code.value + ' - ' + diagnosis.icd10Code.label}\n                    </Grid>\n                    <Grid item xs={4}>\n                        {diagnosis.doctors[0].id + ' - ' + diagnosis.doctors[0].name}\n                    </Grid>\n                    <Grid item xs={2}>\n                        {'PHP ' + GlobalFunction.formatNumber(diagnosis.doctors[0].fee, true)}\n                    </Grid>\n                    <Grid item xs={2} style={{fontWeight: 'bold', textAlign: 'right'}}>\n                        {'PHP ' + GlobalFunction.formatNumber(this.getProceduresCost(diagnosis), true)}\n                    </Grid>\n                </Grid>\n                <div className='line-border' />\n                {diagnosis.procedures.map((procedure, index) => {\n                    return this.renderProcedure(procedure, index);\n                })}\n            </>\n        );\n    }\n\n    renderProcedure(procedure: ProcedureData, index: number): JSX.Element {\n\n        return (\n            <>\n            <div className='line-border' />\n            <div className='section' >\n                <Grid container>\n                    <Grid item xs={4}>\n                        <div>\n                            <Grid container>\n                                <Grid item xs={2} style={{padding: '0 0.5rem', marginTop: '-3px'}}>\n                                    <div className='number-item'>\n                                    {index + 1}\n                                    </div>\n                                </Grid>\n                                <Grid item xs={10} className='header-2'>\n                                    {procedure.cptCode.value + ' - ' + procedure.cptCode.label}\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Grid>\n                </Grid>\n                <Grid container>\n                    <Grid item xs={4}>\n                        <div>\n                            <Grid container>\n                                <Grid item xs={2} />\n                                <Grid item xs={10}>\n                                    <div className='sub-section'>\n                                        <div className='light-text'>AMOUNT</div>\n                                        <div className='small-text'>{'PHP ' + GlobalFunction.formatNumber(procedure.amount, true)}</div>\n                                    </div>\n                                    <div className='sub-section'>\n                                        <div className='light-text'>PHILHEALTH REQUIRED?</div>\n                                        <div className='small-text'>{procedure.isPHIC ? 'Yes' : 'No'}</div>\n                                    </div>\n                                    <div className='sub-section'>\n                                        <div className='light-text'>DATE OF AVAILMENT</div>\n                                        <div className='small-text'>{GlobalFunction.toCommonDateString(procedure.dateAdded)}</div>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <div className='sub-section'>\n                            <div className='light-text'>SYSTEM ASSESSMENT</div>\n                            <div className='small-text'>{'Approve *'}</div>\n                        </div>\n                        <div className='sub-section'>\n                            <div className='light-text'>REMAINING BALANCE</div>\n                            <div className='small-text'>{'PHP ' + 0 + '.00 *'}</div>\n                        </div>\n                        <div className='sub-section'>\n                            <div className='light-text'>CLAUSE</div>\n                            <div className='small-text'>{'Laboratory tests, x-rays, and other diagnostic examinations prescribed by the INTELLICARE physician*'}</div>\n                        </div>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <div className='sub-section'>\n                            <div className='light-text'>ASSESSMENT</div>\n                            <div className='header-2'>{procedure.assessmentType}</div>\n                        </div>\n                        <div className='sub-section'>\n                            <div className='light-text'>REMARKS</div>\n                            <div className='small-text'>\n                                {procedure.assessmentRemarks ? procedure.assessmentRemarks : 'NONE'}\n                            </div>\n                        </div>\n                    </Grid>\n                </Grid>\n            </div>\n            </>\n        );\n    }\n\n    renderLOAHeader(): JSX.Element {\n        return (\n            <>\n            <TableCell style={{minWidth: '100px', maxWidth: '100px'}}>\n                <div className='header-2'>LOA Number</div>\n                    <NumberField\n                        value={this.state.loaNumber}\n                        disableDelimiter={true}\n                        onChange={(value: number) => this.setState({loaNumber: value})} />\n                    \n            </TableCell>\n            <TableCell style={{minWidth: '100px', maxWidth: '100px'}}>\n                <div className='header-2'>Status</div>\n                <Dropdown\n                    choices={this.loaTypes}\n                    value={this.state.status}\n                    onChange={(value: DropdownChoice) => this.setState({status: value})} />\n            </TableCell>\n            <TableCell style={{minWidth: '100px', maxWidth: '100px'}}>\n                <div className='header-2'>Amount</div>\n                <NumberField\n                    value={this.state.amount}\n                    onChange={(value: number) => this.setState({amount: value})} />\n            </TableCell>\n            <TableCell style={{minWidth: '100px', maxWidth: '100px'}}>\n                <div className='header-2'>Date</div>\n                <DatePicker\n                    value={this.state.loaDate}\n                    onChange={(value: Date) => this.setState({loaDate: value})} />\n            </TableCell>\n            <TableCell>\n                <div className='header-2'>Notes</div>\n                <InputField\n                    value={this.state.notes}\n                    onChange={(value: string) => this.setState({notes: value})} />\n            </TableCell>\n            <TableCell style={{width: '100px', textAlign: 'center'}}>\n                <TextButton \n                    label='Add LOA'\n                    icon={faPlus}\n                    onClick={() => {\n                        this.props.loas.push({\n                            loaNo: this.state.loaNumber,\n                            status: this.state.status.label,\n                            amount: this.state.amount,\n                            date: this.state.loaDate,\n                            notes: this.state.notes\n                        });\n                        this.props.refreshLOAStates();\n                        this.setState({\n                            loaNumber: 0, \n                            status: { value: '', label: '' },\n                            amount: 0,\n                            loaDate: new Date(),\n                            notes: ''\n                        });\n                    }}/>\n            </TableCell>\n            </>\n        );\n    }\n\n    renderLOARow(loa: LOAData, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                <TableCell>{loa.loaNo}</TableCell>\n                <TableCell>{loa.status}</TableCell>\n                <TableCell>{`${GlobalFunction.formatNumber(loa.amount)} PHP`}</TableCell>\n                <TableCell>{GlobalFunction.toShortDateString(loa.date)}</TableCell>\n                <TableCell>{loa.notes}</TableCell>\n                <TableCell>\n                    <Grid container>\n                        <Grid item xs={6} />\n                        <Grid item xs={6}>\n                            <IconButton\n                                icon={faMinusCircle}\n                                onClick={() => {\n                                    if (loa.id) {\n                                        this.props.loaToDelete.push(loa.id);\n                                    }\n                                    this.props.loas.splice(index, 1);\n                                    this.props.refreshLOAStates();\n                                }}/>\n                        </Grid>\n                    </Grid>\n                </TableCell>\n            </TableRow>\n        );\n    }\n}","import * as React from 'react';\n// import { TicketData } from 'Pages/CustomerCarePage/Models';\nimport { API } from 'Pages/CustomerCarePage/API';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\nimport { Grid } from '@material-ui/core';\nimport { TicketData, AvailmentDetails, ConfinementDetails } from 'Pages/CustomerCarePage/Models';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\n\ninterface IProps {\n    ticketId: string;\n    onCloseButtonClicked: () => void;\n}\n\ninterface IStates {\n    ticket?: TicketData;\n    availment?: AvailmentDetails;\n    confinement?: ConfinementDetails;\n}\n\nexport class TicketInfoModal extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            \n        };\n    }\n\n    componentDidMount() {\n        console.log(this.props.ticketId);\n\n        API.get('customer-care/tickets/' + this.props.ticketId, \n            (response) => {\n                const ticketCategory = response.ticket_category;\n                const availmentDetails = ticketCategory.availment_details;\n                const confinementDetails = ticketCategory.confinement_details;\n                this.setState({ticket: {\n                    ticketChannel: response.received_via,\n                    transactionNo: response.transaction_no,\n                    ticketSource: response.received_from,\n                    memberName: response.member_name,\n                    clientName: response.corporate_client,\n                    brokerName: response.broker,\n                    facility: { value: '', label: response.hospital_name },\n                    department: response.department,\n                    callerName: response.caller_name,\n                    contactNo: response.contact_no,\n                    ticketType: ticketCategory.ticket_type,\n                    specificType: ticketCategory.specific_type,\n                    urgency: ticketCategory.urgency,\n                    agent: { id: '', name: ticketCategory.assign_to },\n                    additionalNotes: response.additional_notes,\n                    additionalFiles: [],\n                    ticketNo: response.ticket_no,\n                    pmCaseId: response.pmaker_case_uid,\n                    status: response.status,\n                    createdBy: { id: response.created_by.id, name: response.created_by.name },\n                    dateCreated: new Date(response.date_created),\n                    dateUpdated: new Date(response.date_updated),\n                    dateEscalated: new Date(response.date_escalated)\n                }});\n                \n                if (availmentDetails) {\n                    const providerData = availmentDetails.provider.split(' - ');\n                    this.setState({availment: {\n                        provider: { value: providerData[0], label: providerData[1] },\n                        diagnoses: availmentDetails.availments_list.map(diagnosis => {\n                            return {\n                                icd10Code: { value: diagnosis.code, label: diagnosis.name },\n                                remarks: diagnosis.remarks,\n                                isPrimary: diagnosis.is_primary,\n                                isFinal: diagnosis.is_final,\n                                doctors: diagnosis.doctors.map(doctor => {\n                                    return {\n                                        id: doctor.id,\n                                        name: doctor.name,\n                                        specialization: doctor.specialization,\n                                        fee: doctor.fee,\n                                        noOfVisits: doctor.no_of_visits,\n                                        remarks: doctor.remarks\n                                    }\n                                }),\n                                procedures: diagnosis.procedures.map(procedure => {\n                                    return {\n                                        cptCode: { value: procedure.code, label: procedure.name },\n                                        isPHIC: procedure.phic,\n                                        amount: parseInt(procedure.amount),\n                                        notes: procedure.notes,\n                                        assessmentType: procedure.assessment_type,\n                                        assessmentRemarks: procedure.assessment_remarks\n                                    }\n                                })\n                            }\n                        })\n                    }});\n                }\n\n                if (confinementDetails) {\n                    const providerData = availmentDetails.provider.split(' - ');\n                    this.setState({availment: {\n                        provider: { value: providerData[0], label: providerData[1] },\n                        diagnoses: availmentDetails.availments_list.map(diagnosis => {\n                            return {\n                                icd10Code: { value: diagnosis.code, label: diagnosis.name },\n                                remarks: diagnosis.remarks,\n                                isPrimary: diagnosis.is_primary,\n                                isFinal: diagnosis.is_final,\n                                doctors: diagnosis.doctors.map(doctor => {\n                                    return {\n                                        id: doctor.id,\n                                        name: doctor.name,\n                                        specialization: doctor.specialization,\n                                        fee: doctor.fee,\n                                        noOfVisits: doctor.no_of_visits,\n                                        remarks: doctor.remarks\n                                    }\n                                }),\n                                procedures: diagnosis.procedures.map(procedure => {\n                                    return {\n                                        cptCode: { value: procedure.code, label: procedure.name },\n                                        isPHIC: procedure.phic,\n                                        amount: parseInt(procedure.amount),\n                                        notes: procedure.notes,\n                                        assessmentType: procedure.assessment_type,\n                                        assessmentRemarks: procedure.assessment_remarks\n                                    }\n                                })\n                            }\n                        })\n                    }});\n                }\n            },\n            (error) => {\n                console.log(error);\n            });\n    }\n\n    getTotalAailmentProcedureCost(): number {\n        let total = 0;\n\n        if (this.state.availment) {\n            this.state.availment.diagnoses.map(diagnosis => \n                diagnosis.procedures.map(procedure => \n                    total += procedure.amount\n                )\n            )\n        }\n        \n        return total;\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='ticket-modal section'>\n                <div style={{float: 'right', marginTop: '-1rem', fontSize: '1rem'}}>\n                    <IconButton \n                        icon={faTimes} \n                        onClick={() => {\n                            this.props.onCloseButtonClicked();\n                        }} />\n                </div>\n                {this.state.ticket ? (\n                    this.renderTicketInfo(this.state.ticket)\n                ) : null}\n            </div>\n        )\n    }\n\n    renderTicketInfo(ticket: TicketData): JSX.Element {\n        return (\n            <>\n            <div className='sub-sections'>\n                <div className='header-1'>{'Ticket 0000823'}</div>\n                <div className='text'>{ticket.status + ' - ' + ticket.urgency + ', Due on May 23, 2019*'}</div>\n            </div>\n            <div className='sub-section'>\n                {/* <div className='text'>{name}</div>\n                <div className='text'>{\"Happytime Technology Inc.\"}</div>\n                <div className='text'>{'Rank and File - Principal'}</div> */}\n                <Grid container>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>TICKET TYPE</div>\n                        <div className='small-text'>{ticket.ticketType}</div>\n                    </Grid>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>SPECIFIC TYPE</div>\n                        <div className='small-text'>{ticket.specificType}</div>\n                    </Grid>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>RECEIVED VIA</div>\n                        <div className='small-text'>{ticket.ticketChannel}</div>\n                    </Grid>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>CALL TRANSACTION NO.</div>\n                        <div className='small-text'>{ticket.transactionNo}</div>\n                    </Grid>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>RECEIVED FROM</div>\n                        <div className='small-text'>{'??? ' + '(' + ticket.ticketSource + ')'}</div>\n                    </Grid>\n                    <Grid item className='sub-section' xs={6}>\n                        <div className='light-text'>NUMBER / EMAIL</div>\n                        <div className='small-text'>{ticket.contactNo}</div>\n                    </Grid>\n                </Grid>\n                <div className='sub-section'>\n                    <div className='light-text'>ASSIGNED TO</div>\n                    <div className='small-text'>{ticket.agent.name}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>DIAGNOSIS — PROCEDURES</div>\n                    {this.state.availment ? (\n                        <Grid container spacing={2} className='sub-section'>\n                            {this.state.availment.diagnoses.map((diagnosis, index) => {\n                                return (\n                                    <>\n                                    <Grid item xs={12} className='header-2'>\n                                        {(index + 1) + '. ' +\n                                         diagnosis.icd10Code.value + ' - ' + \n                                         diagnosis.icd10Code.label}\n                                    </Grid>\n                                    {diagnosis.procedures.map((procedure, index2) => {\n                                        return (\n                                            <>\n                                            <Grid item xs={1} />\n                                            <Grid item xs={11} className='small-text'>\n                                                {(index2 + 10).toString(36) + '. ' + procedure.cptCode.label}\n                                            </Grid>\n                                            </>\n                                        );\n                                    })}\n                                    </>\n                                );\n                            })}\n                        </Grid>\n                    ) : null}\n                    {/* <div className='sub-section'> */}\n                    <div style={{paddingTop: '0.5rem'}} />\n                    <div className='header-2'>{'TOTAL: PHP ' + GlobalFunction.formatNumber(this.getTotalAailmentProcedureCost(), true)}</div>\n                {/* </div> */}\n                </div>\n                \n                <div className='sub-section'>\n                    <div className='light-text'>CREATED BY</div>\n                    <div className='small-text'>{ticket.createdBy.name}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>DATE AND TIME CREATED</div>\n                    <div className='small-text'>{GlobalFunction.toDateAndTime(ticket.dateCreated)}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>DATE AND TIME LAST UPDATED</div>\n                    <div className='small-text'>{GlobalFunction.toDateAndTime(ticket.dateUpdated)}</div>\n                </div>\n                <div className='sub-section'>\n                    <div className='light-text'>DATE AND TIME LAST ESCALATED</div>\n                    <div className='small-text'>{\"May 14, 2019 — 09:33:00 AM*\"}</div>\n                </div>\n                {/* <div className='sub-section'> */}\n                    \n                {/* </div> */}\n            </div>\n            <TextButton\n                        label='View More'\n                        onClick={() => {\n\n                        }} />\n            </>\n        )\n    }\n}","import * as React from 'react';\nimport { TableCell, TableRow } from '@material-ui/core';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\n\nimport { DropdownChoice, PartialTicketData } from 'Pages/CustomerCarePage/Models';\nimport { API } from 'Pages/CustomerCarePage/API';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\nimport { faSort } from '@fortawesome/free-solid-svg-icons';\nimport { TicketInfoModal } from './TicketInfoModal';\nimport { LabelDisplayedRowsArgs } from '@material-ui/core/TablePagination';\nimport { Loading } from 'Pages/CustomerCarePage/Components/Loading';\n\ninterface IProps {\n    ticketNo: string;\n}\n\ninterface IStates {\n    urgency: number;\n    status: string;\n    ticketNo: string;\n    channel: string;\n    type: string;\n    specificType: string;\n    source: string;\n    assignee: string;\n    lastUpdate: string;\n    ticketListUpdated: boolean;\n    selectedTicketId?: string;\n}\n\nexport class ReviewTicketsSection extends React.Component<IProps, IStates> {\n\n    ticketChannels: DropdownChoice[];\n    ticketTypes: DropdownChoice[];\n    specificTypes: DropdownChoice[];\n    tickets: PartialTicketData[];\n\n    constructor(props: any) {\n        super(props);\n\n        this.ticketChannels = [\n            { value: '0', label: '' },\n            { value: '1', label: 'Call' },\n            { value: '2', label: 'SMS' },\n            { value: '3', label: 'Text' },\n            { value: '4', label: 'Email' }\n        ];\n\n        this.ticketTypes = [\n            { value: '0', label: '' },\n            { value: '1', label: 'Availment' },\n            { value: '2', label: 'Inquiry' }\n        ];\n\n        this.specificTypes = [\n            { value: '0', label: '' },\n            { value: '1', label: 'Outpatient Procedure' },\n            { value: '2', label: 'Inpatient' },\n            { value: '3', label: 'Emergency Room' },\n            { value: '4', label: 'Consultation' }\n        ];\n\n        this.state = {\n            urgency: 0,\n            status: '',\n            ticketNo: '',\n            channel: '',\n            type: '',\n            specificType: '',\n            source: '',\n            assignee: '',\n            lastUpdate: '',\n            ticketListUpdated: false,\n            selectedTicketId: undefined\n        }\n\n        this.tickets = [];\n    }\n\n    componentDidMount() {\n        API.get('customer-care/tickets',\n            (response) => {\n                this.tickets = response.map(ticket => {\n                    return {\n                        id: ticket._id,\n                        ticketNo: this.props.ticketNo,\n                        urgency: (\n                            ticket.ticket_category.urgency === 'Low' ? 3 :\n                            ticket.ticket_category.urgency === 'Medium' ? 2 : \n                            ticket.ticket_category.urgency === 'High' ? 1 : 0),\n                        status: ticket.status,\n                        channel: ticket.received_via,\n                        type: ticket.ticket_category.ticket_type,\n                        specificType: ticket.ticket_category.specific_type,\n                        source: {\n                            value: ticket.received_from.toUpperCase(), \n                            label: (\n                                ticket.member_name ? ticket.member_name :\n                                ticket.corporate_client ? ticket.corporate_client :\n                                ticket.broker ? ticket.broker :\n                                ticket.hospital_name ? ticket.hospital_name : ''\n                            )\n                        },\n                        assignee: ticket.ticket_category.assign_to,\n                        lastUpdate: new Date(ticket.date_updated),\n                    }\n                });\n                this.setState({ticketListUpdated: true});\n            },\n            (error) => {\n                console.log(error);\n            });\n    }\n\n    getFilteredTicketData = () => {\n        return (\n            this.tickets\n                .filter(ticket => \n                    this.state.urgency === 0 || \n                    isNaN(this.state.urgency) ||\n                    ticket.urgency === this.state.urgency)\n                .filter(ticket => \n                    this.state.status === '' || \n                    ticket.status\n                        .toLowerCase()\n                        .includes(this.state.status.toLowerCase()))\n                .filter(ticket => \n                    this.state.ticketNo === '' || \n                    ticket.ticketNo\n                        .toLowerCase()\n                        .includes(this.state.ticketNo.toLowerCase()))\n                .filter(ticket => \n                    this.state.channel === '' || \n                    ticket.channel\n                        .toLowerCase()\n                        .includes(this.state.channel.toLowerCase()))\n                .filter(ticket => \n                    this.state.type === '' || \n                    ticket.type\n                        .toLowerCase()\n                        .includes(this.state.type.toLowerCase()))\n                .filter(ticket => \n                    this.state.specificType === '' || \n                    ticket.specificType\n                        .toLowerCase()\n                        .includes(this.state.specificType.toLowerCase()))\n                .filter(ticket => \n                    this.state.source === '' || \n                    ticket.source.label\n                        .toLowerCase()\n                        .includes(this.state.source.toLowerCase()) ||\n                    ticket.source.value\n                        .toLowerCase()\n                        .includes(this.state.source.toLowerCase()))\n                .filter(ticket => \n                    this.state.assignee === '' || \n                    ticket.assignee\n                        .toLowerCase()\n                        .includes(this.state.assignee.toLowerCase()))\n                .filter(ticket => \n                    this.state.lastUpdate === '' || \n                    GlobalFunction.toShortDateString(ticket.lastUpdate)\n                        .toLowerCase()\n                        .includes(this.state.lastUpdate.toLowerCase()))\n        );\n    }\n\n    sortTickets(attrName: string, isAsc: boolean): void {\n        this.tickets.sort((a: PartialTicketData, b: PartialTicketData) => \n            (a[attrName].toString().toLowerCase() > b[attrName].toString().toLowerCase()) ? \n                (isAsc ? 1 : -1) : (isAsc ? -1 : 1)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Review Tickets</div>\n                <div className='sub-section'>\n                    {this.state.ticketListUpdated ? (\n                        <CustomTable\n                            className='custom-table-selectable'\n                            rows={this.getFilteredTicketData()}\n                            renderHeader={() => this.renderTableHeader()}\n                            renderRow={(rowData: any, index: number) => \n                                this.renderTableRow(rowData, index)}\n                            onChangeInfo={(info: LabelDisplayedRowsArgs) => \n                                `${info.from}-${info.to} out of ${info.count} tickets`}\n                            labelRowsPerPage='Show'\n                            rowsPerPageOptions={[10, 25, 50]} />\n                    ) : (\n                        <Loading height='10rem'/>\n                    )}\n                </div>\n\n                {/* Modals */}\n                {this.state.selectedTicketId ? (\n                    <TicketInfoModal \n                        ticketId={this.state.selectedTicketId}\n                        onCloseButtonClicked={() => {\n                            this.setState({selectedTicketId: undefined});\n                        }} />\n                ) : null}\n                <div className='section' />\n            </div>\n        );\n    }\n\n\n\n\n\n    renderTableHeader(): JSX.Element {\n        return (\n            <>\n            {this.renderHeaderColumn('urgency', 'Urgency')}\n            {this.renderHeaderColumn('status', 'Status')}\n            {this.renderHeaderColumn('ticketNo', 'Ticket ID')}\n            {this.renderHeaderColumn('channel', 'Channel')}\n            {this.renderHeaderColumn('type', 'Type')}\n            {this.renderHeaderColumn('specificType', 'Specific Type')}\n            {this.renderHeaderColumn('source', 'Source')}\n            {this.renderHeaderColumn('assignee', 'Assigned')}\n            {this.renderHeaderColumn('lastUpdate', 'Last Update')}\n            </>\n        );\n    }\n\n\n\n\n\n    renderTableRow = (ticket: PartialTicketData, index: number) => {\n        const backgroundColor = (index % 2 === 0 ? (\n                ticket.urgency === 1 ? '#FFF2F2' : '#FFFFFF'\n            ) : (\n                ticket.urgency === 1 ? '#F7ECEC' : '#F6F7FA'\n            ));\n\n        const urgencyColor = (\n            ticket.urgency === 3 ? '#3AB77D' :\n            ticket.urgency === 2 ? '#FAB435' :\n            ticket.urgency === 1 ? '#FD5451' : '')\n        \n        return (\n            <TableRow \n                style={{backgroundColor: backgroundColor}} \n                onClick={() => {\n                    this.setState({selectedTicketId: ticket.id});\n                }}>\n                <TableCell style={{textAlign: 'center', paddingLeft: 0}}>\n                    <div \n                        className='number-item' \n                        style={{display: 'inline-block', backgroundColor: urgencyColor}}>\n                        {ticket.urgency}\n                    </div>\n                </TableCell>\n                <TableCell>{ticket.status}</TableCell>\n                <TableCell>{ticket.ticketNo}</TableCell>\n                <TableCell>{ticket.channel}</TableCell>\n                <TableCell>{ticket.type}</TableCell>\n                <TableCell>{ticket.specificType}</TableCell>\n                <TableCell>\n                    <div className='text'>{ticket.source.label}</div>\n                    <div className='light-text' style={{fontSize: '9px'}}>\n                        {ticket.source.value}\n                    </div>\n                </TableCell>\n                <TableCell>{ticket.assignee}</TableCell>\n                <TableCell>{GlobalFunction.toDateAndTime(ticket.lastUpdate)}</TableCell>\n            </TableRow>\n        );\n    }\n\n\n\n    renderHeaderColumn(attrName: string, headerText: string): JSX.Element {\n        return (\n            <TableCell>\n                <span className='header-2'>{headerText}</span>\n                <div style={{float: 'right'}}>\n                    <IconButton \n                        icon={faSort} \n                        onClick={() => {\n                            this.sortTickets(attrName, true);\n                            this.setState({ticketListUpdated: true});\n                        }} />\n                </div>\n                <InputField\n                    value={this.state[attrName]}\n                    onChange={(value: string) => {\n                        this.setState(prevState => ({...prevState, [attrName]: value}));\n                    }} />\n            </TableCell>\n        );\n    }\n}\n\n\n","import * as React from 'react';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { TableRow, TableCell, Grid } from '@material-ui/core';\nimport { IconButton } from 'Pages/CustomerCarePage/Components/IconButton';\nimport { faSort } from '@fortawesome/free-solid-svg-icons';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\n\ninterface IStates {\n    loaId: string;\n    approvalCode: string;\n    diagnosis: string;\n    procedure: string;\n    provider: string;\n    amount: string;\n    sessions: string;\n    dateAvailed: string;\n    type: string;\n    status: string;\n}\n\n\nexport class CheckUtilizationSection extends React.Component<{}, IStates> {\n\n    dummyData = [\n        {\n            loa: { id: '9999-99999', swipe: true },\n            approvalCode: '99999999',\n            diagnosis: { code: '999.99', name: 'ICD10 Name', desc: 'Description.' },\n            procedure: { code: '999.99', name: 'CPT Name', desc: 'Description.' },\n            provider: { name: 'General Santos Doctor’s Hospitals.' },\n            amount: 0,\n            sessions: 1,\n            dateAvailed: new Date(),\n            type: 'IBNR',\n            status: 'Approved'\n        }\n    ]\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            loaId: '',\n            approvalCode: '',\n            diagnosis: '',\n            procedure: '',\n            provider: '',\n            amount: '',\n            sessions: '',\n            dateAvailed: '',\n            type: '',\n            status: ''\n        };\n    }\n    \n\n    render(): JSX.Element {\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Check Utilization</div>\n                <Grid container className='sub-section' spacing={2}>\n                    <Grid item xs={3}>\n                        <div className='light-text'>ANNUAL BENEFIT LIMIT</div>\n                        <div className='header-1'>{'PHP 0.00'}</div>\n                    </Grid>\n                    <Grid item xs={9}>\n                        <Line \n                            items={[\n                                { value: 70, color: '#3FBB7F', label1: 'UTILIZED', label2: 'PHP 38,021.35' },\n                                { value: 5, color: '#1D236F', label1: 'IBNR', label2: 'PHP 11,978.65' },\n                                { value: 25, color: '#FCB53F', label1: 'AVAILABLE', label2: 'PHP 50,001' }\n                            ]}\n                            maxValue={100} />\n                    </Grid>\n                </Grid>\n                <div className='sub-section'>\n                    <CustomTable\n                        className='custom-table-scrollable'\n                        rows={this.dummyData}\n                        renderHeader={() => this.renderTableHeader()}\n                        renderRow={(rowData: any, index: number) => \n                            this.renderTableRow(rowData, index)} \n                        rowsPerPageOptions={[10, 25, 50]} />\n                </div>\n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n        return (\n            <>\n            {this.renderHeaderColumn('loaId', 'LOA ID', '100px')}\n            {this.renderHeaderColumn('approvalCode', 'Approval Code', '120px')}\n            {this.renderHeaderColumn('diagnosis', 'Diagnosis', '200px')}\n            {this.renderHeaderColumn('procedure', 'Procedure', '200px')}\n            {this.renderHeaderColumn('provider', 'Provider', '150px')}\n            {this.renderHeaderColumn('amount', 'Amount', '100px')}\n            {this.renderHeaderColumn('sessions', 'Sessions', '75px')}\n            {this.renderHeaderColumn('dateAvailed', 'Date Availed', '150px')}\n            {this.renderHeaderColumn('type', 'Type', '75px')}\n            {this.renderHeaderColumn('status', 'Status', '75px')}\n            </>\n        );\n    }\n\n    renderTableRow(utilization: any, index: number): JSX.Element {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                <TableCell>{utilization.loa.id}</TableCell>\n                <TableCell>{utilization.approvalCode}</TableCell>\n                <TableCell>{utilization.diagnosis.name}</TableCell>\n                <TableCell>{utilization.procedure.name}</TableCell>\n                <TableCell>{utilization.provider.name}</TableCell>\n                <TableCell>{utilization.amount}</TableCell>\n                <TableCell>{utilization.sessions}</TableCell>\n                <TableCell>{GlobalFunction.toCommonDateString(utilization.dateAvailed)}</TableCell>\n                <TableCell>{utilization.type}</TableCell>\n                <TableCell>{utilization.status}</TableCell>\n            </TableRow>\n        );\n    }\n\n\n    renderHeaderColumn(attrName: string, headerText: string, width: string): JSX.Element {\n        return (\n            <TableCell style={{minWidth: width, maxWidth: width}}>\n                <span className='header-2'>{headerText}</span>\n                <div style={{float: 'right'}}>\n                    <IconButton \n                        icon={faSort} \n                        onClick={() => {\n                            // this.sortTickets('urgency', true);\n                            // this.setState({ticketListUpdated: true});\n                        }} />\n                </div>\n                <InputField\n                    value={this.state[attrName]}\n                    onChange={(value: string) => {\n                        this.setState(prevState => ({...prevState, [attrName]: value}));\n                    }} />\n            </TableCell>\n        );\n    }\n}\n\n\ninterface LineProps {\n    items: {\n        value: number;\n        color: string;\n        label1: string;\n        label2: string;\n    }[]\n    maxValue: number;\n}\n\nexport class Line extends React.Component<LineProps> {\n\n    render(): JSX.Element {\n        return (\n            <div style={{width: '50%', height: 0}}>\n                {this.props.items.map(item => {\n                    return (\n                        <div \n                            style={{\n                                width: (item.value / this.props.maxValue * 100) + '%', \n                                height: '6px', \n                                display: 'inline-block',\n                                backgroundColor: item.color\n                            }} />\n                    );\n                })}\n                <div style={{padding: '0.5rem 0'}}>\n                {this.props.items.map(item => {\n                    return (\n                        <div \n                            style={{\n                                width: (1 / this.props.items.length * 100) + '%', \n                                height: '6px', \n                                display: 'inline-block'\n                            }}>\n                            <div>\n                                <div \n                                    style={{\n                                        width: '10px', \n                                        height: '10px', \n                                        backgroundColor: item.color,\n                                        display: 'inline-block',\n                                        marginRight: '1rem'\n                                    }}/>\n                                <div \n                                    className='light-text' \n                                    style={{\n                                        display: 'inline-block'\n                                    }}>\n                                    {item.label1}\n                                </div>\n                                <div \n                                    className='header-2' \n                                    style={{\n                                        color: item.color,\n                                    }}>\n                                    {item.label2}\n                                </div>\n                            </div>\n                         </div>\n                    );\n                })}\n                </div>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Grid, TableCell, TableRow, Tabs, Tab } from '@material-ui/core';\nimport { ConfinementDetails } from '../ResolveTicketPage';\nimport { GlobalFunction } from 'Pages/CustomerCarePage/GlobalFunction';\nimport { DiagnosisData, ProcedureData, DoctorData } from 'Pages/CustomerCarePage/Models';\nimport { TextButton } from 'Pages/CustomerCarePage/Components/TextButton';\nimport { CustomTable } from 'Pages/CustomerCarePage/Components/CustomTable';\nimport { AccommodationData } from 'Pages/CustomerCarePage/UpdateTicketPage/UpdateTicketProps';\nimport { CustomRadio } from 'Pages/CustomerCarePage/Components/CustomRadio';\nimport { ComplexTable } from 'Pages/CustomerCarePage/Components/ComplexTable';\nimport { InputArea } from 'Pages/CustomerCarePage/Components/InputArea';\n\ninterface IProps {\n    confinement: ConfinementDetails;\n    refreshConfinementState: () => void;\n}\n\ninterface IStates {\n    selectedTab: any;\n}\n\n\nexport class ApproveInpatientSection extends React.Component<IProps, IStates> {\n\n    APPROVED = 'Approved';\n    DISAPPROVED = 'Disapproved';\n    PENDING = 'Pending';\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            selectedTab: 0\n        }\n    }\n\n    getTotalAccommodationCost = (diagnosis: DiagnosisData) => {\n        let totalCost = 0;\n        if (diagnosis.isPrimary) {\n            this.props.confinement.accommodations.map(accommodation => {\n                totalCost += accommodation.costPerDay * accommodation.days;\n            });\n        }\n        return totalCost;\n    }\n\n    getProceduresCost = (diagnosis: DiagnosisData) => {\n        let total = 0;\n        diagnosis.procedures.map(procedure => {\n            total += procedure.amount;\n        });\n        return total;\n    }\n\n    getAttendingPhysicianCost = (diagnosis: DiagnosisData) => {\n        let total = 0;\n        diagnosis.doctors\n            .filter(doctor => doctor.type === 'Attending')\n            .map(doctor => {\n                total += doctor.fee;\n            });\n        return total;\n    }\n\n    getAvailmentCost = (diagnosis: DiagnosisData) => {\n        return (\n            this.getProceduresCost(diagnosis) +\n            this.getAttendingPhysicianCost(diagnosis) +\n            this.getTotalAccommodationCost(diagnosis)\n        );\n    }\n\n    getAllAvailmentsCost = () => {\n        let total = 0;\n        this.props.confinement.diagnoses.map(diagnosis => {\n            total += this.getAvailmentCost(diagnosis);\n        });\n        return total;\n    }\n\n    getAllProceduresCount = () => {\n        let total = 0;\n        this.props.confinement.diagnoses.map(diagnosis => {\n            total += diagnosis.procedures.length;\n        });\n        return total;\n    }\n\n    render(): JSX.Element {\n        const confinement = this.props.confinement;\n        return (\n            <div className='section'>\n                <div style={{paddingTop: '2.5rem'}} />\n                <div className='header-1'>Approve or Disapprove Inpatient</div>\n                <Grid container spacing={2}>\n                    <Grid item xs={4}>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>PROVIDER</div>\n                            <div className='small-text'>\n                                {`${confinement.provider.value} - ${confinement.provider.label}`}\n                            </div>\n                        </div>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>KIND OF CONFINEMENT</div>\n                            <div className='small-text'>{confinement.confinementKind}</div>\n                        </div>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>DATE ADMITTED</div>\n                            <div className='small-text'>\n                                {GlobalFunction.toCommonDateString(confinement.dateAdmitted)}\n                            </div>\n                        </div>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>PHILHEALTH</div>\n                            <div className='small-text'>{confinement.coverage.label}</div>\n                        </div>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>LINKED TICKETS</div>\n                            <div className='small-text'>{'---*'}</div>\n                        </div>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>GIFT GIVEN</div>\n                            <div className='small-text'>{confinement.giftGiven ? 'Yes' : 'No'}</div>\n                        </div>\n                    </Grid>\n                </Grid>\n                {this.renderTabs()}\n                {this.state.selectedTab === 0 ? (\n                    this.renderSummarySection(confinement)\n                ) : (\n                    this.renderDiagnosisSection(\n                        confinement.diagnoses.filter(diagnosis => \n                            diagnosis.icd10Code.value === this.state.selectedTab\n                        )[0]\n                    )\n                )}\n                \n                <div className='section' />\n            </div>\n        );\n    }\n\n    renderTabs(): JSX.Element {\n        return (\n            <div className='sub-section'>\n                <Tabs\n                    className='custom-tabs' \n                    value={this.state.selectedTab}\n                    variant='scrollable'\n                    scrollButtons='auto'\n                    indicatorColor='primary'\n                    onChange={(_event: React.ChangeEvent<{}>, value: number) => {\n                        this.setState({selectedTab: value});\n                    }}>\n                        <Tab \n                            value={0} \n                            label={\n                                <div>\n                                    <div className='header-2'>SUMMARY OF DIAGNOSIS</div>\n                                    <div className='smaller-text'>\n                                        {`${GlobalFunction.formatNumber(this.getAllAvailmentsCost(), true)} PHP \n                                        (${this.getAllProceduresCount()} Procedures)`}\n                                    </div>\n                                </div>\n                            } />\n                        {this.props.confinement.diagnoses\n                            .filter(diagnosis => diagnosis.isPrimary)\n                            .map(diagnosis => {\n                                const totalCost = this.getAvailmentCost(diagnosis);\n                                const proceduresCount = diagnosis.procedures.length;\n                                return (\n                                    <Tab \n                                        value={diagnosis.icd10Code.value} \n                                        label={\n                                            <div>\n                                                <div className='header-2'>PRIMARY DIAGNOSIS</div>\n                                                <div className='smaller-text'>\n                                                    {`${GlobalFunction.formatNumber(totalCost, true)} PHP \n                                                    (${proceduresCount} Procedure${proceduresCount > 1 ? 's' : ''})`}\n                                                </div>\n                                            </div>\n                                        } />\n                                );\n                            })}\n                        {this.props.confinement.diagnoses\n                            .filter(diagnosis => !diagnosis.isPrimary)\n                            .map((diagnosis, index) => {\n                                const totalCost = this.getAvailmentCost(diagnosis);\n                                const proceduresCount = diagnosis.procedures.length;\n                                return (\n                                    <Tab \n                                        value={diagnosis.icd10Code.value} \n                                        label={\n                                            <div>\n                                            <div className='header-2'>{`DIAGNOSIS ${index + 1}`}</div>\n                                            <div className='smaller-text'>\n                                                {`${GlobalFunction.formatNumber(totalCost, true)} PHP \n                                                (${proceduresCount} Procedure${proceduresCount > 1 ? 's' : ''})`}\n                                            </div>\n                                            </div>\n                                        } />\n                                );\n                            })}\n                </Tabs>\n                <div style={{borderBottom: '2px solid #1E2071'}} />\n            </div>\n        );\n    }\n\n    renderSummarySection(confinement: ConfinementDetails): JSX.Element {\n        return (\n            <div>\n                {confinement.diagnoses\n                    .filter(diagnosis => diagnosis.isPrimary)\n                    .map(diagnosis => {\n                        return this.renderDiagnosisInfo(diagnosis, 0);    \n                    })}\n                {confinement.diagnoses\n                    .filter(diagnosis => !diagnosis.isPrimary)\n                    .map((diagnosis, index)=> {\n                        return this.renderDiagnosisInfo(diagnosis, index + 1);    \n                    })}\n            </div>\n        );\n    }\n\n    renderDiagnosisInfo(diagnosis: DiagnosisData, index: number): JSX.Element {\n        const procedureCost = this.getProceduresCost(diagnosis);\n        const accommodationCost = this.getTotalAccommodationCost(diagnosis);\n        const attendingPhysicianCost = this.getAttendingPhysicianCost(diagnosis);\n        return (\n            <Grid container className='sub-section'>\n                <div style={{width: '2rem'}}>\n                    <div className='number-item'>{index + 1}</div>\n                </div>\n                <div style={{width: 'calc(100% - 2rem)'}}>\n                    <div style={{marginBottom: '1rem'}}>\n                        <div className='text'>\n                            {`${diagnosis.icd10Code.value} — ${diagnosis.icd10Code.label}`}\n                            {diagnosis.isPrimary ? (\n                                <span className='header-2'>{' (PRIMARY)'}</span>\n                            ) : null}\n                        </div>\n                        {diagnosis.doctors.filter(doctor => doctor.type === 'Admitting')\n                            .map(doctor => {\n                                return (\n                                    <>\n                                    <div className='small-text'>{`${doctor.id} - ${doctor.name}`}</div>\n                                    <div className='small-text'>\n                                        {`PHP ${GlobalFunction.formatNumber(doctor.fee, true)}`}\n                                    </div>\n                                    </>\n                                );\n                            })\n                        }\n                        \n                        <div className='small-text'>\n                            {`Remarks: ${diagnosis.remarks ? diagnosis.remarks : 'None'}`}\n                        </div>\n                        <div className='small-text'>\n                            {`PHIC: No*`}\n                        </div>\n                        <div className='header-2'>\n                            {`TOTAL AMOUNT: ${GlobalFunction.formatNumber(\n                                procedureCost + accommodationCost + attendingPhysicianCost, true\n                            )} PHP`}\n                        </div>\n                        <TextButton \n                            label='Approve/Disapprove Diagnosis' \n                            onClick={() => {\n                                window.scroll(0, -window.pageYOffset);\n                                this.setState({selectedTab: diagnosis.icd10Code.value});\n                            }} />\n                    </div>\n\n                    {this.renderTableSection('PROCEDURES',\n                        <CustomTable\n                            className='custom-table'\n                            rows={diagnosis.procedures}\n                            renderHeader={() => {\n                                return (\n                                    <>\n                                    <TableCell>Procedure</TableCell>\n                                    <TableCell style={{textAlign: 'right', width: '150px'}}>Amount</TableCell>\n                                    <TableCell style={{width: '150px'}}>Date</TableCell>\n                                    <TableCell style={{width: '250px'}}>Clause</TableCell>\n                                    <TableCell style={{textAlign: 'right', width: '150px'}}>Remaining Bal.</TableCell>\n                                    </>\n                                );\n                            }}\n                            renderRow={(procedure: ProcedureData, index: number) => {\n                                const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                                return (\n                                    <TableRow style={{backgroundColor: backgroundColor}}>\n                                        <TableCell>{`${procedure.cptCode.value} — ${procedure.cptCode.label}`}</TableCell>\n                                        <TableCell style={{textAlign: 'right'}}>\n                                            {`${GlobalFunction.formatNumber(procedure.amount, true)} PHP`}\n                                        </TableCell>\n                                        <TableCell>{GlobalFunction.toShortDateString(procedure.dateAdded)}</TableCell>\n                                        <TableCell>{`This is the clause*`}</TableCell>\n                                        <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(9999, true)} PHP*`}</TableCell>\n                                    </TableRow>\n                                );\n                            }} />,\n                            procedureCost\n                    )}\n\n                    {diagnosis.isPrimary ? (\n                        this.renderTableSection('ROOM ACCOMMODATIONS',\n                            <CustomTable\n                                className='custom-table'\n                                rows={this.props.confinement.accommodations}\n                                renderHeader={() => {\n                                    return (\n                                        <>\n                                        <TableCell>Room Type</TableCell>\n                                        <TableCell style={{textAlign: 'right', width: '200px'}}>No. of days</TableCell>\n                                        <TableCell style={{textAlign: 'right', width: '200px'}}>Cost per day</TableCell>\n                                        <TableCell style={{textAlign: 'center', width: '200px'}}>HIMS Assessment</TableCell>\n                                        </>\n                                    );\n                                }}\n                                renderRow={(accommodations: AccommodationData, index: number) => {\n                                    const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                                    return (\n                                        <TableRow style={{backgroundColor: backgroundColor}}>\n                                            <TableCell>{accommodations.roomType}</TableCell>\n                                            <TableCell style={{textAlign: 'right'}}>{accommodations.days}</TableCell>\n                                            <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(accommodations.costPerDay, true)} PHP`}</TableCell>\n                                            <TableCell style={{textAlign: 'center'}}>{`Approve*`}</TableCell>\n                                        </TableRow>\n                                    );\n                                }} />,\n                                accommodationCost\n                        )\n                    ) : null}\n\n                    {this.renderTableSection('ATTENDING PHYSICIANS',\n                        <CustomTable\n                            className='custom-table'\n                            rows={diagnosis.doctors.filter(doctor => doctor.type === 'Attending')}\n                            renderHeader={() => {\n                                return (\n                                    <>\n                                    <TableCell>Name of Doctor</TableCell>\n                                    <TableCell style={{width: '200px'}}>Specialization</TableCell>\n                                    <TableCell style={{textAlign: 'right', width: '125px'}}>No. of Visits</TableCell>\n                                    <TableCell style={{textAlign: 'right', width: '200px'}}>Amount</TableCell>\n                                    </>\n                                );\n                            }}\n                            renderRow={(doctor: DoctorData, index: number) => {\n                                const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                                return (\n                                    <TableRow style={{backgroundColor: backgroundColor}}>\n                                        <TableCell>{doctor.name}</TableCell>\n                                        <TableCell>{doctor.specialization}</TableCell>\n                                        <TableCell style={{textAlign: 'right'}}>{doctor.noOfVisits}</TableCell>\n                                        <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(doctor.fee, true)} PHP`}</TableCell>\n                                    </TableRow>\n                                );\n                            }} />,\n                            attendingPhysicianCost\n                    )}\n                </div>\n            </Grid>\n        );\n    }\n\n    renderTableSection(headerName: string, table: JSX.Element, totalValue?: number): JSX.Element {\n        return (\n            <div className='sub-section'>\n                <div className='header-2'>{headerName}</div>\n                {table}\n                {totalValue ? (\n                    <div className='sub-section'>\n                        <div style={{float: 'right'}}>\n                            <span className='small-text'>TOTAL AMOUNT</span>\n                            <span style={{marginLeft: '1rem'}} />\n                            <span className='header-2'>\n                                {GlobalFunction.formatNumber(totalValue, true) + ' PHP'}\n                            </span>\n                        </div>\n                </div>\n                ) : null}\n            </div>\n        );\n    }\n\n    renderDiagnosisSection(diagnosis: DiagnosisData): JSX.Element {\n        console.log(this.props.confinement.diagnoses);  \n        const procedureCost = this.getProceduresCost(diagnosis);\n        const accommodationCost = this.getTotalAccommodationCost(diagnosis);\n        const attendingPhysicianCost = this.getAttendingPhysicianCost(diagnosis);\n        return (\n            <div className='sub-section' style={{marginLeft: '1rem'}}>\n                <Grid container spacing={2}>\n                    <Grid item xs={6}>\n                        <div className='text'>\n                            {`${diagnosis.icd10Code.value} — ${diagnosis.icd10Code.label}`}\n                            {diagnosis.isPrimary ? (\n                                <span className='header-2'>{' (PRIMARY)'}</span>\n                            ) : null}\n                        </div>\n                        {diagnosis.doctors.filter(doctor => doctor.type === 'Admitting')\n                            .map(doctor => {\n                                return (\n                                    <>\n                                    <div className='small-text'>{`${doctor.id} - ${doctor.name}`}</div>\n                                    <div className='small-text'>\n                                        {`PHP ${GlobalFunction.formatNumber(doctor.fee, true)}`}\n                                    </div>\n                                    </>\n                                );\n                            })\n                        }\n                        \n                        <div className='small-text'>\n                            {`Remarks: ${diagnosis.remarks ? diagnosis.remarks : 'None'}`}\n                        </div>\n                        <div className='small-text'>\n                            {`PHIC: No*`}\n                        </div>\n                        <div className='header-2'>\n                            {`TOTAL AMOUNT: ${GlobalFunction.formatNumber(\n                                procedureCost + accommodationCost + attendingPhysicianCost, true\n                            )} PHP`}\n                        </div>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <div className='light-text'>Choose Assessment</div>\n                        <CustomRadio \n                            label='Approve'\n                            checkedCondition={diagnosis.assessmentType === this.APPROVED}\n                            onChange={() => {\n                                diagnosis.assessmentType = this.APPROVED;\n                                this.props.refreshConfinementState();\n                            }} />\n                        <CustomRadio \n                            label='Disapprove'\n                            checkedCondition={diagnosis.assessmentType === this.DISAPPROVED}\n                            onChange={() => {\n                                diagnosis.assessmentType = this.DISAPPROVED;\n                                this.props.refreshConfinementState();\n                            }} />\n                    </Grid>\n                    <Grid item xs={4}>\n                        <div className='light-text'>Remarks</div>\n                        <InputArea\n                            value={diagnosis.assessmentRemarks}\n                            onChange={(value: string) => {\n                                diagnosis.assessmentRemarks = value;\n                                this.props.refreshConfinementState();\n                            }} />\n                    </Grid>\n                    \n                </Grid>\n                <div className='sub-section'>\n                    <ComplexTable \n                        data={diagnosis.procedures}\n                        renderHeader={() => this.renderHeader()}\n                        renderRow={(rowData: any, index: number) => \n                            this.renderRow(rowData, index)} />\n                </div>\n\n                {diagnosis.isPrimary ? (\n                    this.renderTableSection('ROOM ACCOMMODATIONS',\n                        <CustomTable\n                            className='custom-table'\n                            rows={this.props.confinement.accommodations}\n                            renderHeader={() => {\n                                return (\n                                    <>\n                                    <TableCell>Room Type</TableCell>\n                                    <TableCell style={{textAlign: 'right', width: '200px'}}>No. of days</TableCell>\n                                    <TableCell style={{textAlign: 'right', width: '200px'}}>Cost per day</TableCell>\n                                    <TableCell style={{textAlign: 'center', width: '200px'}}>HIMS Assessment</TableCell>\n                                    </>\n                                );\n                            }}\n                            renderRow={(accommodations: AccommodationData, index: number) => {\n                                const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                                return (\n                                    <TableRow style={{backgroundColor: backgroundColor}}>\n                                        <TableCell>{accommodations.roomType}</TableCell>\n                                        <TableCell style={{textAlign: 'right'}}>{accommodations.days}</TableCell>\n                                        <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(accommodations.costPerDay, true)} PHP`}</TableCell>\n                                        <TableCell style={{textAlign: 'center'}}>{`Approve*`}</TableCell>\n                                    </TableRow>\n                                );\n                            }} />,\n                            accommodationCost\n                    )\n                ) : null}\n\n                {this.renderTableSection('ATTENDING PHYSICIANS',\n                    <CustomTable\n                        className='custom-table'\n                        rows={diagnosis.doctors.filter(doctor => doctor.type === 'Attending')}\n                        renderHeader={() => {\n                            return (\n                                <>\n                                <TableCell>Name of Doctor</TableCell>\n                                <TableCell style={{width: '200px'}}>Specialization</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '125px'}}>No. of Visits</TableCell>\n                                <TableCell style={{textAlign: 'right', width: '200px'}}>Amount</TableCell>\n                                </>\n                            );\n                        }}\n                        renderRow={(doctor: DoctorData, index: number) => {\n                            const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n                            return (\n                                <TableRow style={{backgroundColor: backgroundColor}}>\n                                    <TableCell>{doctor.name}</TableCell>\n                                    <TableCell>{doctor.specialization}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{doctor.noOfVisits}</TableCell>\n                                    <TableCell style={{textAlign: 'right'}}>{`${GlobalFunction.formatNumber(doctor.fee, true)} PHP`}</TableCell>\n                                </TableRow>\n                            );\n                        }} />,\n                        attendingPhysicianCost\n                )}\n                <div className='section' />\n            </div>\n        );\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n    renderHeader(): JSX.Element {\n        const headerNameStyle = {\n            margin: 0,\n            padding: '12px 0 12px 0'\n        };\n\n        return (\n            <>\n                <Grid item xs={4}>\n                    <div className='header-2' style={headerNameStyle}>Procedure Details</div>\n                </Grid>\n                <Grid item xs={4}>\n                    <div className='header-2' style={headerNameStyle}>System Details</div>\n                </Grid>\n                <Grid item xs={4}>\n                    <div className='header-2' style={headerNameStyle}>Assessment</div>\n                </Grid>\n            </>\n        );\n    }\n\n    renderRow(procedure: ProcedureData, index: number): JSX.Element {\n        return (\n            <div className='section' >\n                \n                <Grid container>\n                    <Grid item xs={4}>\n                        <div>\n                            <Grid container>\n                                <Grid item xs={2} style={{padding: '0 0.5rem', marginTop: '-3px'}}>\n                                    <div className='number-item'>{index + 1}</div>\n                                </Grid>\n                                <Grid item xs={10} className='header-2'>\n                                    {procedure.cptCode.value + ' - ' + procedure.cptCode.label}\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Grid>\n                    \n                </Grid>\n                <Grid container>\n                    <Grid item xs={4}>\n                        <div>\n                            <Grid container>\n                                <Grid item xs={2} />\n                                <Grid item xs={10}>\n                                    <div className='sub-section-2'>\n                                        <div className='light-text'>AMOUNT</div>\n                                        <div className='small-text'>{'PHP ' + GlobalFunction.formatNumber(procedure.amount, true)}</div>\n                                    </div>\n                                    <div className='sub-section-2'>\n                                        <div className='light-text'>PHILHEALTH REQUIRED?</div>\n                                        <div className='small-text'>{procedure.isPHIC ? 'Yes' : 'No'}</div>\n                                    </div>\n                                    <div className='sub-section-2'>\n                                        <div className='light-text'>DATE OF AVAILMENT</div>\n                                        <div className='small-text'>{GlobalFunction.toCommonDateString(procedure.dateAdded)}</div>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>SYSTEM ASSESSMENT</div>\n                            <div className='small-text'>{'Approve *'}</div>\n                        </div>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>REMAINING BALANCE</div>\n                            <div className='small-text'>{'PHP ' + 0 + '.00 *'}</div>\n                        </div>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>CLAUSE</div>\n                            <div className='small-text'>{'Laboratory tests, x-rays, and other diagnostic examinations prescribed by the INTELLICARE physician*'}</div>\n                        </div>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>Choose Assessment</div>\n                            <CustomRadio \n                                label='Approve'\n                                checkedCondition={procedure.assessmentType === this.APPROVED}\n                                onChange={() => {\n                                    procedure.assessmentType = this.APPROVED;\n                                    this.props.refreshConfinementState();\n                                }} />\n                            <CustomRadio \n                                label='Disapprove'\n                                checkedCondition={procedure.assessmentType === this.DISAPPROVED}\n                                onChange={() => {\n                                    procedure.assessmentType = this.DISAPPROVED;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </div>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <div className='sub-section-2'>\n                            <div className='light-text'>Remarks</div>\n                            <InputArea\n                                value={procedure.assessmentRemarks}\n                                onChange={(value: string) => {\n                                    procedure.assessmentRemarks = value;\n                                    this.props.refreshConfinementState();\n                                }} />\n                        </div>\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport {  ConsultationDetails } from 'Pages/CustomerCarePage/Models';\nimport { CustomRadio } from 'Pages/CustomerCarePage/Components/CustomRadio';\nimport { Grid } from '@material-ui/core';\nimport { InputField } from 'Pages/CustomerCarePage/Components/InputField';\n\ninterface IProps {\n    consultation: ConsultationDetails;\n    refreshConsultationState: () => void;\n}\n\ninterface IStates {\n    selectedTab: any;\n}\n\nexport class ApproveConsultationSection extends React.Component<IProps, IStates> {\n\n    APPROVED = 'Approved';\n    DISAPPROVED = 'Disapproved';\n    PENDING = 'Pending';\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            selectedTab: 0\n        }\n    }\n\n    render(): JSX.Element {\n        console.log(this.props.consultation)\n        const consultation = this.props.consultation;\n        return (\n            <Grid container className='section'>\n                <Grid item xs={6}>\n                    <div style={{paddingTop: '2.5rem'}} />\n                    <div className='header-1'>Resolve Consultation</div>\n                    <div className='sub-section-2'>\n                        <div className='light-text'>PROVIDER</div>\n                        <div className='small-text'>\n                            {`${consultation.provider.value} - ${consultation.provider.label}`}\n                        </div>\n                    </div>\n                    <div className='sub-section-2'>\n                        <div className='light-text'>DIAGNOSIS</div>\n                        <div className='small-text'>\n                            {`${consultation.diagnosis.value} - ${consultation.diagnosis.label}`}\n                        </div>\n                    </div>\n                    <div className='sub-section-2'>\n                        <div className='light-text'>DOCTOR</div>\n                        <div className='small-text'>\n                            {`${consultation.doctor.value} - ${consultation.doctor.label}`}\n                        </div>\n                    </div>\n                    <div className='sub-section-2'>\n                        <div className='light-text'>NOTES</div>\n                        <div className='small-text'>{consultation.notes ? consultation.notes : 'None'}</div>\n                    </div>\n                    <div className='sub-section'>\n                    <div className='header-2'>ASSESSMENT</div>\n                        <CustomRadio \n                            label='Approve'\n                            checkedCondition={consultation.assessmentType === this.APPROVED}\n                            onChange={() => {\n                                consultation.assessmentType = this.APPROVED;\n                                this.props.refreshConsultationState();\n                            }} />\n                        <CustomRadio \n                            label='Disapprove'\n                            checkedCondition={consultation.assessmentType === this.DISAPPROVED}\n                            onChange={() => {\n                                consultation.assessmentType = this.DISAPPROVED;\n                                this.props.refreshConsultationState();\n                            }} />\n                        <CustomRadio \n                            label='Pending'\n                            checkedCondition={consultation.assessmentType === this.PENDING}\n                            onChange={() => {\n                                consultation.assessmentType = this.PENDING;\n                                this.props.refreshConsultationState();\n                            }} />\n                        <InputField\n                            placeholder='Reason'\n                            value={consultation.assessmentRemarks}\n                            onChange={(value: string) => {\n                                consultation.assessmentRemarks = value;\n                                this.props.refreshConsultationState();\n                            }} />\n                    </div>\n                    <div className='section' />\n                </Grid>\n            </Grid>\n        );\n    }\n}","\nimport * as React from 'react';\nimport { match } from \"react-router-dom\";\nimport { API } from '../API';\nimport { MemberData, TicketData, AvailmentDetails, LOAData, DropdownChoice, DiagnosisData, ConsultationDetails } from '../Models';\nimport { MemberDataSection } from '../MemberDataSection';\nimport { CustomTabs } from '../Components/CustomTab';\nimport { Grid } from '@material-ui/core';\nimport { ApproveAvailmentSection } from './Components/ApproveAvailmentSection';\nimport { CheckBenefitSection } from './Components/CheckBenefitSection';\nimport { ResolveTicketFooter } from './Components/ResolveTicketFooter';\nimport { PartnerNetworkSection } from './Components/PartnerNetworkSection';\nimport { SummaryAvailmentSection } from './Components/SummaryAvailmentSection';\nimport { ReviewTicketsSection } from './Components/ReviewTicketsSection';\nimport { Payloads } from '../Payloads';\nimport { CheckUtilizationSection } from './Components/CheckUtilizationSection';\nimport { CheckContractSection } from './Components/CheckContractSection';\nimport { Processmaker } from '../Processmaker';\nimport { AccommodationData } from '../UpdateTicketPage/UpdateTicketProps';\nimport { ApproveInpatientSection } from './Components/ApproveInpatientSection';\nimport { Loading } from '../Components/Loading';\nimport { ApproveConsultationSection } from './Components/ApproveConsultationSection';\n\ninterface IProps {\n    required: string;\n    match: match<MatchParams>;\n    history: any;\n}\n\ninterface MatchParams {\n    id: string;\n}\n\ninterface IStates {\n    tabSelected: number;\n    isSummarizing: boolean;\n    loadedResources: number;\n\n    member?: MemberData;\n    ticket: TicketData;\n\n    availment?: AvailmentDetails;\n    confinement?: ConfinementDetails;\n    consultation?: ConsultationDetails;\n\n    pmId: string;\n    loas: LOAData[];\n    loaToDelete: string[];\n}\n\nexport interface ConfinementDetails {\n    provider: DropdownChoice;\n    dateAdmitted: Date;\n    confinementKind: string;\n    giftGiven: boolean;\n    coverage: DropdownChoice;\n    philhealthAmount: number;\n    finalBill: number;\n    dischargeDate: Date | null;\n\n    updates: any;\n    others: any;\n    diagnoses: DiagnosisData[];\n    accommodations: AccommodationData[];\n}\n\nexport class ResolveTicketPage extends React.Component<IProps, IStates> {\n\n    static RESOURCES_TO_LOAD = 3;\n\n    tabList = [\n        { value: 1, label: 'Availments' }, \n        { value: 2, label: 'Benefits' }, \n        { value: 3, label: 'Partner Network' }, \n        { value: 4, label: 'Exclusion' }, \n        { value: 5, label: 'Utilization' }, \n        { value: 6, label: 'Tickets' },  \n        { value: 7, label: 'Contract' }\n    ];\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            tabSelected: 1,\n            isSummarizing: false,\n            loadedResources: 0,\n            ticket: {\n                ticketChannel: '',\n                transactionNo: '',\n                ticketSource: '',\n                memberName: '',\n                clientName: '',\n                brokerName: '',\n                facility: { value: '', label: '' },\n                department: '',\n                callerName: '',\n                contactNo: '',\n                ticketType: '',\n                specificType: '',\n                urgency: '',\n                agent: { id: '', name: '' },\n                additionalNotes: '',\n                additionalFiles: [],\n                ticketNo: '',\n                pmCaseId: '',\n                status: 'Open',\n                createdBy: { id: '1', name: 'Jilmer Cariaso - Static' },\n                dateCreated: new Date(),\n                dateUpdated: new Date(),\n                dateEscalated: null\n            },\n            pmId: '',\n            loas: [],\n            loaToDelete: []\n        };\n    }\n\n    componentDidMount() {\n        API.get('customer-care/tickets/' + this.props.match.params['ticketId'],\n            (response) => {\n                //console.log('resp: '+JSON.stringify(response,null,2));\n                this.setState({loadedResources: this.state.loadedResources + 1});\n\n                const ticketCategory = response.ticket_category;\n                const availment = ticketCategory.availment_details;\n                const confinement = ticketCategory.confinement_details;\n                const consultation = ticketCategory.consultation_details;\n                \n                this.setState({ticket: {\n                    ticketChannel: response.received_via,\n                    transactionNo: response.transaction_no,\n                    ticketSource: response.received_from,\n                    memberName: response.member_name,\n                    clientName: response.corporate_client,\n                    brokerName: response.broker,\n                    facility: { value: '', label: response.hospital_name },\n                    department: response.department,\n                    callerName: response.caller_name,\n                    contactNo: response.contact_no,\n                    ticketType: ticketCategory.ticket_type,\n                    specificType: ticketCategory.specific_type,\n                    urgency: ticketCategory.urgency,\n                    agent: { id: '', name: ticketCategory.assign_to },\n                    additionalNotes: response.additional_notes,\n                    additionalFiles: [],\n                    ticketNo: this.props.match.params['appNo'],\n                    pmCaseId: response.pmaker_case_uid,\n                    status: response.status,\n                    createdBy: response.created_by,\n                    dateCreated: new Date(response.date_created),\n                    dateUpdated: new Date(response.date_updated),\n                    dateEscalated: new Date(response.date_escalated),\n                    approvalCode: response.approval_code\n                }});\n\n                if (availment) {\n                    const providerData = availment.provider.split(' - ');\n                    this.setState({availment: {\n                        provider: { value: providerData[0], label: providerData[1] },\n                        diagnoses: availment.availments_list.map(diagnosis => {\n                            return {\n                                icd10Code: { value: diagnosis.code, label: diagnosis.name },\n                                remarks: diagnosis.remarks,\n                                isPrimary: diagnosis.is_primary,\n                                isFinal: diagnosis.is_final,\n                                doctors: diagnosis.doctors.map(doctor => {\n                                    return {\n                                        id: doctor.id,\n                                        name: doctor.name,\n                                        specialization: doctor.specialization,\n                                        fee: doctor.fee,\n                                        noOfVisits: doctor.no_of_visits,\n                                        remarks: doctor.remarks\n                                    }\n                                }),\n                                procedures: diagnosis.procedures.map(procedure => {\n                                    return {\n                                        cptCode: { value: procedure.code, label: procedure.name },\n                                        isPHIC: procedure.phic,\n                                        amount: parseInt(procedure.amount),\n                                        notes: procedure.notes,\n                                        doctor: { value: '', label: procedure.doctor },\n                                        dateAdded: new Date(procedure.date_added),\n                                        assessmentType: procedure.assessment_type,\n                                        assessmentRemarks: procedure.assessment_remarks\n                                    }\n                                })\n                            }\n                        })\n                    }});\n                }\n\n                if (confinement) {\n                    const providerData = confinement.provider.split(' - ');\n                    this.setState({confinement: {\n                        provider: { value: providerData[0], label: providerData[1] },\n                        dateAdmitted: new Date(confinement.date_admitted),\n                        confinementKind: confinement.confinement_kind,\n                        giftGiven: confinement.gift_given,\n                        coverage: { value: '', label: confinement.coverage },\n                        philhealthAmount: confinement.philhealth_amount,\n                        finalBill: confinement.final_bill,\n                        dischargeDate: new Date(confinement.discharge_date),\n                        diagnoses: confinement.diagnoses.map(diagnosis => {\n                            return {\n                                icd10Code: { value: diagnosis.code, label: diagnosis.name },\n                                remarks: diagnosis.remarks,\n                                isPrimary: diagnosis.is_primary,\n                                isFinal: diagnosis.is_final,\n                                assessmentType: diagnosis.assessment_type,\n                                assessmentRemarks: diagnosis.assessment_remarks,\n                                doctors: diagnosis.doctors.map(doctor => {\n                                    return {\n                                        id: doctor.id,\n                                        name: doctor.name,\n                                        specialization: doctor.specialization,\n                                        type: doctor.type,\n                                        fee: doctor.fee,\n                                        noOfVisits: doctor.no_of_visits,\n                                        remarks: doctor.remarks\n                                    }\n                                }),\n                                procedures: diagnosis.procedures.map(procedure => {\n                                    return {\n                                        cptCode: { value: procedure.code, label: procedure.name },\n                                        isPHIC: procedure.phic,\n                                        amount: parseInt(procedure.amount),\n                                        notes: procedure.notes,\n                                        doctor: { value: '', label: procedure.doctor },\n                                        dateAdded: new Date(procedure.date_added),\n                                        assessmentType: procedure.assessment_type,\n                                        assessmentRemarks: procedure.assessment_remarks\n                                    }\n                                })\n                            }\n                        }),\n                        accommodations: confinement.room_accommodation.map(accommodation => {\n                            return {\n                                roomType: accommodation.room_type,\n                                days: parseInt(accommodation.no_of_days),\n                                costPerDay: accommodation.cost\n                            }\n                        }),\n                        updates: confinement.updates,\n                        others: confinement.others\n                    }});\n\n                    this.tabList[0].label = 'Inpatient';\n                }\n\n                if (consultation) {\n                    const providerData = consultation.provider.split(' - ');\n                    const diagnosisData = consultation.diagnosis.split(' - ');\n                    const doctorData = consultation.doctor.split(' - ');\n                    this.setState({consultation: {\n                        provider: { value: providerData[0], label: providerData[1] },\n                        diagnosis: { value: diagnosisData[0], label: diagnosisData[1] },\n                        doctor: { value: doctorData[0], label: doctorData[1] },\n                        notes: consultation.notes,\n                        assessmentType: consultation.assessment_type,\n                        assessmentRemarks: consultation.assessment_remarks\n                    }});\n                    this.tabList[0].label = 'Consultation Details';\n                }\n\n                this.setState({loas: response.loa.map(loa => {\n                    return {\n                        id: loa._id,\n                        loaNo: loa.loa_no,\n                        status: loa.status,\n                        amount: loa.amount,\n                        date: new Date(loa.date),\n                        notes: loa.notes\n                    }\n                })});\n\n                /* Get Member Details */\n                API.get('customer-care/members/' + response.member_id, \n                    (response) => {\n                        console.log(response);\n                        this.setState({loadedResources: this.state.loadedResources + 1});\n                        \n                        this.setState({member: {\n                            cardNo: response.member_card_no,\n                            firstName: response.first_name,\n                            middleName: response.middle_name,\n                            lastName: response.last_name,\n                            clientName: response.client.registered_name,\n                            birthDate: new Date(response.date_of_birth),\n                            gender: response.gender,\n                            civilStatus: response.civil_status,\n                            contractId: response.active_contract._id,\n                            isVip: response.is_vip\n                        }});\n\n                        API.get('customer-care/members/' + response.member_card_no + '/benefits',\n                            (response) => {\n                                console.log(response);\n                                this.setState({loadedResources: this.state.loadedResources + 1});\n                            },\n                            (error) => {\n                                console.log(error);\n                            });\n                    },\n                    (error) => {\n                        console.log(error);\n                    });\n            },\n            (error) => {\n                console.log(error);\n            });\n    }\n\n    onResolve = () => {\n\n        if (!this.state.member) {\n            return;\n        }\n\n        const payload = Payloads.getPutResolveTicketPayload(\n            this.state.ticket,\n            this.state.member,\n            this.state.loas,\n            this.state.availment,\n            this.state.confinement,\n            this.state.consultation\n        );\n        \n        console.log(payload);\n        API.delete('/customer-care/tickets/loa', this.state.loaToDelete,\n            (response) => {\n                console.log(response);\n                API.put(`customer-care/tickets/${this.props.match.params['ticketId']}`, payload,\n                    (response) => {\n                        console.log(response);\n                        this.onResolveProcessmaker();\n                    },\n                    (error) => {\n                        console.log(error);\n                    });\n            },\n            (error) => {\n                console.log(error);\n            });\n        // window.location.href=\"#/customer-care/tickets\" Still redirect even when error\n    }\n\n    onResolveProcessmaker = () => {\n        Processmaker.get(`cases/${this.props.match.params['caseId']}`,\n            (response) => {                                            \n                if (this.state.availment || this.state.confinement || this.state.consultation) { //means this is an availment\n                    if (response['current_task'][0]['tas_title'] === 'Approve / Disapprove Availment') {\n                        Processmaker.put('cases/'+this.props.match.params['caseId']+'/route-case', {},\n                            (response) => {\n                                console.log(response);\n                                this.props.history.push('#/customer-care/tickets');\n                                window.location.reload();\n                            },\n                            (error) => {\n                                console.log(error);\n                            }\n                        );\n                    }\n                    else if (response['current_task'][0]['tas_title'] === 'Modify / Update Ticket') {\n                        Processmaker.put('cases/'+this.props.match.params['caseId']+'/route-case', {},\n                            (response) => {\n                                console.log(response);\n                                Processmaker.put('cases/'+this.props.match.params['caseId']+'/route-case', {},\n                                    (response) => {\n                                        console.log(response);\n                                        // this.props.history.push('#/customer-care/tickets');\n                                        // window.location.reload();\n                                    },\n                                    (error) => {\n                                        console.log(error);\n                                    }\n                                );\n                            },\n                            (error) => {\n                                console.log(error);\n                            }\n                        );\n                    }\n                    else if (response['current_task'][0]['tas_title'] === 'Create Ticket') {\n                        Processmaker.put('cases/'+this.props.match.params['caseId']+'/route-case', {},\n                            (response) => {\n                                console.log(response);\n                                Processmaker.put('cases/'+this.props.match.params['caseId']+'/route-case', {},\n                                    (response) => {\n                                        console.log(response);\n                                        Processmaker.put('cases/'+this.props.match.params['caseId']+'/route-case', {},\n                                            (response) => {\n                                                console.log(response);\n                                                this.props.history.push('#/customer-care/tickets');\n                                                window.location.reload();\n                                            },\n                                            (error) => {\n                                                console.log(error);\n                                            }\n                                        );\n                                    },\n                                    (error) => {\n                                        console.log(error);\n                                    }\n                                );\n                            },\n                            (error) => {\n                                console.log(error);\n                            }\n                        );\n                    }\n                } else {\n                    this.props.history.push('#/customer-care/tickets');\n                    window.location.reload();\n                }\n            },\n            (error) => {\n                console.log(error);\n            }\n        );\n    }\n\n    render(): JSX.Element {console.log(this.state.loaToDelete);\n        return (\n            <Grid container className='customer-care-main'>\n                {this.state.loadedResources !== ResolveTicketPage.RESOURCES_TO_LOAD ? (\n                    <div \n                        style={{\n                            backgroundColor: '#00000055', \n                            zIndex: 100, \n                            position: 'fixed', \n                            width: '100%', \n                            height: '100%'}}>\n                        <Loading height='10rem'/>\n                    </div>\n                    \n                ) : (null)}\n\n                <MemberDataSection \n                    member={this.state.member}\n                    ticket={this.state.ticket}\n                    ticketStatus='Resolve'\n                    onUpdateMemberStateChange={(_member: MemberData) => null} />\n\n                <CustomTabs \n                    tabList={this.tabList}\n                    selectedTab={this.state.tabSelected}\n                    setSelectedTab={(index: number) => {\n                        this.setState({tabSelected: index});\n                    }} />\n\n                <div className='update-ticket'>\n                    {this.state.tabSelected === 1 ? (\n\n                        this.state.availment ? (\n                            this.renderOutpatientContent(this.state.availment)\n\n                        ) : this.state.confinement ? (\n                            this.renderInpatientContent(this.state.confinement)\n\n                        ) : this.state.consultation ? (\n                            this.renderConsultationContent(this.state.consultation)\n\n                        ) : null\n                        \n                    ) : this.state.tabSelected === 2 && this.state.member ? (\n                        <CheckBenefitSection\n                            cardNo={this.state.member.cardNo} />\n                    ) : this.state.tabSelected === 3 ? (\n                        <PartnerNetworkSection />\n                    ) : this.state.tabSelected === 5 ? (\n                        <CheckUtilizationSection />\n                    ) : this.state.tabSelected === 6 ? (\n                        <ReviewTicketsSection \n                            ticketNo={this.props.match.params['appNo']} />\n                    ) : this.state.tabSelected === 7 && this.state.member ? (\n                        <CheckContractSection cardNo={this.state.member.cardNo} />\n                    ) : null}\n                </div>\n\n                <ResolveTicketFooter \n                    isSummarizing={this.state.consultation ? true : this.state.isSummarizing}\n                    onAssign={() => {\n\n                    }}\n                    onEscalate={() => {\n\n                    }}\n                    onSummarize={() => {\n                        this.setState({isSummarizing: true});\n                    }} \n                    onResolve={() => {\n                        this.onResolve();\n                    }} />\n            </Grid>\n        );\n    }\n\n    renderOutpatientContent(availment: AvailmentDetails): JSX.Element {\n        return (\n            !this.state.isSummarizing ? (\n                <ApproveAvailmentSection \n                    availment={availment}\n                    refreshAvailmentState={() => {\n                        this.setState({availment: this.state.availment});\n                    }} />\n            ) : (\n                <SummaryAvailmentSection \n                    availment={availment}\n                    loas={this.state.loas}\n                    loaToDelete={this.state.loaToDelete}\n                    refreshLOAStates={() => {\n                        this.setState({\n                            loas: this.state.loas,\n                            loaToDelete: this.state.loaToDelete\n                        });\n                    }} />\n            )\n        );\n    }\n\n    renderInpatientContent(confinement: ConfinementDetails): JSX.Element {\n        return (\n            !this.state.isSummarizing ? (\n                <ApproveInpatientSection\n                    confinement={confinement}\n                    refreshConfinementState={() => {\n                        this.setState({confinement: this.state.confinement});\n                    }} />\n            ) : (\n                <SummaryAvailmentSection \n                    availment={confinement}\n                    loas={this.state.loas}\n                    loaToDelete={this.state.loaToDelete}\n                    refreshLOAStates={() => {\n                        this.setState({\n                            loas: this.state.loas,\n                            loaToDelete: this.state.loaToDelete\n                        });\n                    }} />\n            )\n        );\n    }\n\n    renderConsultationContent(consultation: ConsultationDetails): JSX.Element {\n        return (\n            <div>\n                <ApproveConsultationSection \n                    consultation={consultation}\n                    refreshConsultationState={() => {\n                        this.setState({consultation: this.state.consultation});\n                    }} />\n            </div>\n        );\n    }\n}","/**\n * Asynchronously loads the component for FeaturePage\n */\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Components, Utils } from '@hims/core';\nconst { loadable } = Utils;\nconst { LoadingIndicator } = Components.UI;\n\nexport default loadable(\n  async () => {\n    const {\n      TicketListPage,\n      mapStateToProps,\n      mapDispatchToProps,\n    } = await import('./TicketListPage');\n\n    const Component = connect(\n      mapStateToProps,\n      mapDispatchToProps,\n    )(TicketListPage);\n    return { default: Component };\n  },\n  {\n    fallback: <LoadingIndicator />,\n  },\n);\n","import * as React from 'react';\nimport './component-style.scss';\n\ninterface IProps {\n    placeholder: string;\n    value: string;\n    detail: string;\n    onChange: (value: string) => void;\n}\n\nexport class DetailedInputField extends React.Component<IProps> {\n\n    shouldComponentUpdate(props: IProps, _state: any) {\n        return (\n            (this.props.placeholder !== props.placeholder) ||\n            (this.props.value !== props.value) ||\n            (this.props.detail !== props.detail)\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <div className='detailed-input-field'>\n                <div className='text'>{this.props.placeholder}</div>\n                <div className='input-field'>\n                    <input \n                        className='text-field' \n                        value={this.props.value}\n                        onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                            this.props.onChange(event.target.value);\n                        }}\n                    />\n                    <div className='detail'>{this.props.detail}</div>\n                </div>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Grid, TableCell, TableRow } from '@material-ui/core';\nimport './../style.scss';\nimport { CustomTable } from '../Components/CustomTable';\nimport { InputField } from '../Components/InputField';\nimport { IconButton } from '../Components/IconButton';\nimport { faSort } from '@fortawesome/free-solid-svg-icons';\nimport { LabelDisplayedRowsArgs } from '@material-ui/core/TablePagination';\nimport { CustomRadio } from '../Components/CustomRadio';\nimport { Dropdown } from '../Components/Dropdown';\nimport { DropdownChoice } from '../Models';\nimport { DetailedDropdown } from '../Components/DetailedDropdown';\nimport { DetailedInputField } from '../Components/DetailedInputField';\n\ninterface IProps {\n\n}\n\ninterface IStates {\n    \n}\n\nexport class AdvanceSearch extends React.Component<IProps, IStates> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n\n        };\n    }\n    \n    render(): JSX.Element {\n        return (\n            <Grid container className='customer-care-main'>\n                <div className='section'>\n                    <div className='header'>Advanced Search</div>\n\n                    <div className='bordered-section'>\n                        <Grid container spacing={10}>\n                            <Grid item xs={3}>\n                                <div className='header-2'>SEARCH FOR A</div>\n                                <DetailedDropdown\n                                    value={{value:'Testing adjustable width', label: ''}}\n                                    choices={[{value:'', label: ''}]}\n                                    onChange={(_value: DropdownChoice) => {\n\n                                    }} />\n                                <DetailedInputField\n                                    placeholder=''\n                                    value=''\n                                    detail='Testing here'\n                                    onChange={(_value: string) => {\n\n                                    }} />\n\n                                <CustomRadio\n                                    label='Member'\n                                    checkedCondition={true}\n                                    onChange={() => {}} />\n                                <CustomRadio\n                                    label='Corporate Client'\n                                    checkedCondition={false}\n                                    onChange={() => {}} />\n                            </Grid>\n                            <Grid item xs={3}>\n                                <div className='header-2'>SEARCH BY COMPANY</div>\n                                <Dropdown \n                                    placeholder='Member Type'\n                                    value={{value:'', label: ''}}\n                                    choices={[{value:'', label: ''}]}\n                                    onChange={(_value: DropdownChoice) => {\n\n                                    }} />\n                                <Dropdown \n                                    placeholder='Member Status'\n                                    value={{value:'', label: ''}}\n                                    choices={[{value:'', label: ''}]}\n                                    onChange={(_value: DropdownChoice) => {\n\n                                    }} />\n                            </Grid>\n                            <Grid item xs={3}>\n                                <div className='header-2'>SEARCH BY MEMBER DETAILS</div>\n                            </Grid>\n                            <Grid item xs={3}>\n                                \n                            </Grid>\n                        </Grid>\n                    </div>\n\n\n                    <div className='sub-section'>\n                        <div className='header-3'>{`SEARCH RESULTS (${9999})`}</div>\n                        <CustomTable\n                            className='custom-table-selectable'\n                            rows={[[0,0,0,0],[0,0,0,0]]}\n                            renderHeader={() => this.renderTableHeader()}\n                            renderRow={(rowData: any, index: number) => \n                                this.renderTableRow(rowData, index)}\n                            onChangeInfo={(info: LabelDisplayedRowsArgs) => \n                                `${info.from}-${info.to} out of ${info.count} results`}\n                            labelRowsPerPage='Show'\n                            rowsPerPageOptions={[10, 25, 50]} />\n                        {/* <div className='text'>\n                            Add a diagnosis first then add procedures per diagnosis after\n                        </div>\n                        <div className='sub-section'>\n                            <CustomTable\n                                rows={this.props.availment.diagnoses}\n                                renderHeader={() => this.renderTableHeader()}\n                                renderRow={(rowData: any, index: number) => \n                                    this.renderTableRow(rowData, index)} />\n                        </div>\n                        {this.props.createTicketAttemp && this.props.availment.diagnoses.length === 0 ? (\n                            <div className='sub-section' style={{color: '#E53935'}}>\n                                No diagnosis. Need atleast one diagnosis.\n                            </div> \n                        ) : (null)} */}\n                    </div>\n                </div>\n                \n            </Grid>\n        );\n    }\n\n    renderTableHeader(): JSX.Element {\n        return (\n            <>\n            {this.renderHeaderColumn('cardNo', 'Member ID')}\n            {this.renderHeaderColumn('name', 'Name')}\n            {this.renderHeaderColumn('corporates', 'Corporate/s')}\n            {this.renderHeaderColumn('planType', 'Plan Type')}\n            {this.renderHeaderColumn('', 'Action', '60px')}\n            </>\n        );\n    }\n\n\n\n\n\n    renderTableRow = (_data: any, index: number) => {\n        const backgroundColor = (index % 2 === 0 ? '#FFFFFF' : '#F6F7FA');\n\n        return (\n            <TableRow style={{backgroundColor: backgroundColor}}>\n                <TableCell>{'ticket.status'}</TableCell>\n                <TableCell>{'ticket.ticketNo'}</TableCell>\n                <TableCell>{'ticket.channel'}</TableCell>\n                <TableCell>{'ticket.type'}</TableCell>\n                <TableCell></TableCell>\n            </TableRow>\n        );\n    }\n\n\n\n    renderHeaderColumn(attrName: string, headerText: string, width?: string): JSX.Element {\n        return (\n            <TableCell style={{width: width}}>\n                <span className='header-2'>{headerText}</span>\n                \n                {attrName !== '' ? (\n                    <>\n                    <div style={{float: 'right'}}>\n                        <IconButton \n                            icon={faSort} \n                            onClick={() => {\n                                // this.sortTickets(attrName, true);\n                                // this.setState({ticketListUpdated: true});\n                            }} />\n                    </div>\n                    <InputField\n                        value={this.state[attrName]}\n                        onChange={(_value: string) => {\n                            // this.setState(prevState => ({...prevState, [attrName]: value}));\n                        }} />\n                    </>\n                ) : null}\n                \n            </TableCell>\n        );\n    }\n    \n}","/**\n *\n * App\n *\n * This component is the skeleton around the actual pages, and should only\n * contain code that should be seen on all pages. (e.g. navigation bar)\n */\n\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { renderRoutes } from 'react-router-config';\n\nimport { Switch, Route } from 'react-router-dom';\n\nimport { Containers, Components } from '@hims/core';\nimport { createBrowserHistory } from 'history';\n// import { HomePage } from 'Pages/Home/HomePage';\n\n\nimport { CreateTicketPage } from 'Pages/CustomerCarePage/CreateTicketPage/CreateTicketPage';\nimport { UpdateTicketPage } from 'Pages/CustomerCarePage/UpdateTicketPage/UpdateTicketPage';\nimport HomePage from 'Pages/Home/Loadable';\nimport { ResolveTicketPage } from 'Pages/CustomerCarePage/ResolveTicketPage/ResolveTicketPage';\nimport TicketListPage from 'Pages/TicketList/Loadable';\nimport { AdvanceSearch } from 'Pages/CustomerCarePage/AdvanceSearch/AdvanceSearch';\n// import LoginPage from 'Pages/Login/LoginPage';\n\nconst history = createBrowserHistory();\nconst NotFoundPage = Containers.NotFoundPage;\n// import ExitToAppIcon from '@material-ui/icons/ExitToApp';\n\nlet routes = [\n  {\n    path: '/home',\n    component: HomePage,\n  },\n  {\n    path: '/tickets',\n    component: TicketListPage,\n  },\n  // {\n  //   path: \"/login\",\n  //   component: LoginPage\n  // },\n  {\n    path: \"/\",\n    component: CreateTicketPage,\n    exact: true\n  },\n  {\n    path: \"/search\",\n    component: AdvanceSearch\n  },\n  {\n    path: \"/update-ticket/:caseId/:appNo/:ticketId\",\n    component: UpdateTicketPage\n  },\n  {\n    path: \"/resolve-ticket/:caseId/:appNo/:ticketId\",\n    component: ResolveTicketPage\n  }\n];\nconst prefix = '/customer-care';\nroutes.map(route => (route.path = `${prefix}${route.path}`));\n\nexport default function App() {\n\n  return (\n    <div>\n      \n      <Helmet\n        titleTemplate=\"NEO - %s\"\n        defaultTitle=\"NEO\"\n      >\n        <meta name=\"description\" content=\"NEO application\" />\n      </Helmet>\n      \n      <div className='side-bar'>\n        <Components.UI.PageLayout history={history} page={\"customer care\"} />\n      </div>\n      <div className='main'>\n        <Switch>\n          {renderRoutes(routes)}\n          <Route path=\"\" component={NotFoundPage} />\n        </Switch>\n      </div>\n      \n        \n      {/* </Components.UI.PageLayout> */}\n    </div>\n  );\n}","/**\n * i18n.js\n *\n * This will setup the i18n language files and locale data for the app.\n *\n *   IMPORTANT: This file is used by the internal build\n *   script `extract-intl`, and must use CommonJS module syntax\n *   You CANNOT use import/export in this file.\n */\n\n// prettier-ignore\nimport { Containers } from '@hims/core';\nconst enTranslationMessages = require('Messages/en.json');\n\nexport const translationMessages = {\n  en: Containers.Message.formatTranslationMessages('en', enTranslationMessages),\n};\n","/**\n * AppConstants\n * Each action has a corresponding type, which the reducer knows and picks up on.\n * To avoid weird typos between the reducer and the actions, we save them as\n * constants here. We prefix them with 'yourproject/YourComponent' so we avoid\n * reducers accidentally picking up actions they shouldn't.\n *\n */\n\nenum ActionTypes {\n    LOAD_REPOS = 'boilerplate/App/LOAD_REPOS',\n    LOAD_REPOS_SUCCESS = 'boilerplate/App/LOAD_REPOS_SUCCESS',\n    LOAD_REPOS_ERROR = 'boilerplate/App/LOAD_REPOS_ERROR',\n}\n  \nexport {};\nexport default ActionTypes;\n  ","import { ContainerState, ContainerActions } from './types';\nimport ActionTypes from './constants';\n\n// The initial state of the App\nexport const initialState: ContainerState = {\n  loading: false,\n  error: false,\n  currentUser: '',\n  userData: {\n    repositories: [],\n  },\n};\n\n// Take this container's state (as a slice of root state), this container's actions and return new state\nfunction appReducer(\n  state: ContainerState = initialState,\n  action: ContainerActions,\n): ContainerState {\n  switch (action.type) {\n    case ActionTypes.LOAD_REPOS:\n      return {\n        currentUser: state.currentUser,\n        loading: true,\n        error: false,\n        userData: {\n          repositories: [],\n        },\n      };\n    case ActionTypes.LOAD_REPOS_SUCCESS:\n      return {\n        currentUser: action.payload.username,\n        loading: false,\n        error: state.error,\n        userData: {\n          repositories: action.payload.repos,\n        },\n      };\n    case ActionTypes.LOAD_REPOS_ERROR:\n      const { error, loading, ...rest } = state;\n      return {\n        error: action.payload,\n        loading: false,\n        ...rest,\n      };\n    default:\n      return state;\n  }\n}\n\nexport default appReducer;\n","/**\n * app.ts\n *\n * This is the entry file for the application, only setup and boilerplate\n * code.\n */\n\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\n// Import all the third party stuff\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport FontFaceObserver from 'fontfaceobserver';\nimport 'sanitize.css/sanitize.css';\n\n\n\n// Import root app\nimport App from 'Containers/App';\n\n// Import Language Provider\n// import MessageProvider from 'Containers/LanguageProvider';\n\n// Load the favicon and the .htaccess file\n// import '!file-loader?name=[name].[ext]!./images/favicon.ico';\n// import 'file-loader?name=.htaccess!./.htaccess';\n\nimport { Components, Containers, Utils } from '@hims/core';\n// import { Containers, Utils } from '@hims/core';\nimport { translationMessages } from 'i18n';\nimport createReducer from './reducers';\n\nconst { configureStore, history } = Utils;\nconst MessageProvider = Containers.Message.Provider;\nconst { ServiceWorker } = Components.Services;\n\n// Import i18n messages\n\n// Observe loading of Open Sans (to remove open sans, remove the <link> tag in\n// the index.html file and this observer)\nconst openSansObserver = new FontFaceObserver('Open Sans', {});\n\n// Create redux store with history\nconst initialState = {};\nconst store = configureStore(createReducer, initialState, history);\nconst MOUNT_NODE = document.getElementById('app') as HTMLElement;\n\nconst render = (messages: any, Component = App) => {\n  const Document: React.ComponentType<Containers.Document.IProps<any, any>> = Containers.Document.Component;\n  ReactDOM.render(\n    // tslint:disable-next-line:jsx-wrap-multiline\n      <Document Component={Component} store={store} componentProps={{}}>\n        <MessageProvider messages={messages}>\n          <Component />\n        </MessageProvider>\n      </Document>\n    ,\n    MOUNT_NODE,\n  );\n};\n\ndeclare const module: any;\n\nexport default ()=>{\n  // When Open Sans is loaded, add a font-family using Open Sans to the body\n  openSansObserver.load(undefined, 60000).then(() => {\n    document.body.classList.add('fontLoaded');\n  });\n\n  if (module.hot) {\n    module.hot.accept(['./i18n', './Containers/App'], () => {\n      ReactDOM.unmountComponentAtNode(MOUNT_NODE);\n      // tslint:disable-next-line:max-line-length\n      const App = require('./Containers/App').default; // https://github.com/webpack/webpack-dev-server/issues/100\n      render(translationMessages, App);\n    });\n    // Make reducers hot reloadable, see http://mxs.is/googmo\n    /* istanbul ignore next */\n    module['hot'].accept('./reducers', () => {\n      store.replaceReducer(createReducer(store.injectedReducers));\n    });\n  }\n  // Chunked polyfill for browsers without Intl support\n  if (!(window as any).Intl) {\n    new Promise(resolve => {\n      resolve(import('intl'));\n    })\n      .then(() =>\n        Promise.all([\n          import('intl/locale-data/jsonp/en.js'),\n          import('intl/locale-data/jsonp/de.js'),\n        ]),\n      )\n      .then(() => render(translationMessages))\n      .catch(err => {\n        throw err;\n      });\n  } else {\n    render(translationMessages);\n  }\n\n  // Install ServiceWorker and AppCache in the end since\n  // it's not most important operation and if main code fails,\n  // we do not want it installed\n  // if (process.env.NODE_ENV === 'production') {\n  //   require('offline-plugin/runtime').install();\n  // }\n\n  // If you want your app to work offline and load faster, you can change\n  // unregister() to register() below. Note this comes with some pitfalls.\n  // Learn more about service workers: https://bit.ly/CRA-PWA\n  ServiceWorker.register();\n}\n","/**\n * Combine all reducers in this file and export the combined reducers.\n */\n\nimport { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\n\nimport { Containers, Utils } from '@hims/core';\nimport globalReducer from 'Containers/App/reducer';\n\n/**\n * Merges the main reducer with the router state and dynamically injected reducers\n */\nexport default function createReducer(injectedReducers = {}) {\n  const { history } = Utils;\n  const rootReducer = combineReducers({\n    global: globalReducer,\n    language: Containers.Message.messageProviderReducer,\n    router: connectRouter(history),\n    ...injectedReducers,\n  });\n\n  return rootReducer;\n}\n"],"sourceRoot":""}