{"version":3,"sources":["Pages/Protected/Partner/AffiliationFormEncoder/Pages/DentalClinicAffiliation/DentalClinicInformation/dentalClinicService.js"],"names":["affilConstValue","stageName","status","affiliationStatus","createDentalClinicForm","clinicForm","affiliationType","dentistForm","setIsSuccess","a","dentistId","clinicId","dentalClinicForm","affilType","newDentistForm","type","PartnerDoctorService","createdPartnerDoctor","id","data","AffiliationEncoderService","createFacilities","cId","console","log","updateDentalClinicAndDentist","affil","dentistData","clinicData","dentalClinicAffil","dentistAffil","updateFacilities","dentalClinicRes","updatePartnerDoctor","dentistRes","Promise","all","res","fetchData","setIsloading","getDentalClinicById","mapDentalClinicData","dentalClinicData","form","dentalAssociates","remarks","fetchDentistData","dentistProfile","tinStatus","dateReceived","mno","unitFlrBldg","bldgName","street","subdivision","region","district","barangay","city","zipCode","email","affiliationInfos","remarksData","internalRemarks","externalRemarks","stage","name","address","treasury","roomNumber","clinicSchedule","natureOfPractice","payee","contactPerson","contactPersonNo","stage_name","dateSubmitted","date_submitted","dentist_id","getPartnerDoctorById","mapData","firstName","middleName","lastName","suffix","birthDate","civilStatus","gender","emailAddress","contactNumber","mainSpecialization","majorSpecialization","otherSpecialization","subSpecialization","pda","prcNumber","prcExpiration","philhealthNumber","philhealthExpiration","tinNumber","philhealth","specialization","birthdate","license","toString","dateFormat","vatTaxRate","nonVatable"],"mappings":"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","file":"static/js/3.1b851188.chunk.js","sourcesContent":["import PartnerDoctorService from 'Services/Api/Partner/PartnerDoctorService'\nimport AffiliationEncoderService from 'Services/Api/Partner/affiliationEncoderService'\nimport { dateFormat } from 'Pages/Protected/Partner/Components/Utils/utils'\n\n\nlet affilConstValue = {\n  stageName: 'ENCODING',\n  status: 'Active',\n  affiliationStatus: 'In-Progress'\n}\n\nexport async function createDentalClinicForm (clinicForm, affiliationType, dentistForm, setIsSuccess) {\n  let dentistId = ''\n  let clinicId = ''\n  try {\n    const dentalClinicForm = {...clinicForm}\n    const affilType = {...affiliationType, ...affilConstValue}\n    const newDentistForm = {...dentistForm}\n    try {\n      affilType.type = 'DENTIST'\n      delete affilType.stageName\n      const { data: { data: { id } } } = await PartnerDoctorService.createdPartnerDoctor({...affilType, ...newDentistForm})\n      if (id) {\n        dentalClinicForm.dentistId = id\n        dentistId = id\n        affilType.type = 'DENTAL_CLINIC'\n        const { data: { data: { id: cId } } } = await AffiliationEncoderService.createFacilities({...affilType, ...dentalClinicForm})\n        clinicId = cId\n        setIsSuccess(true)\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n\n    affilType.type = 'DENTAL_CLINIC'\n    affilType.id = clinicId\n    affilType.stageName = 'ENCODING'\n    return { clinicId, dentistId, affilType, dentalClinicForm }\n  } catch (error) {\n    console.log('error', error)\n  }\n}\n\nexport async function updateDentalClinicAndDentist (clinicId, dentistId, affil, dentistData, clinicData, setIsSuccess) {\n  const dentalClinicAffil = {...affil}\n  const dentistAffil = {...affil}\n\n  clinicData.dentistId = dentistId\n  dentalClinicAffil.type = 'DENTAL_CLINIC'\n  dentalClinicAffil.id = clinicId\n\n  const dentalClinicRes = await AffiliationEncoderService.updateFacilities(clinicId, {\n    ...dentalClinicAffil,\n    ...clinicData\n  })\n\n  dentistAffil.type = 'DENTIST'\n  dentistAffil.id = dentistId\n  delete dentistAffil.stageName\n  const dentistRes = await PartnerDoctorService.updatePartnerDoctor(dentistId, {\n    ...dentistAffil,\n    ...dentistData\n  })\n\n  try {\n    dentalClinicAffil.stageName = 'ENCODING'\n    const res = await Promise.all([dentalClinicRes, dentistRes])\n    console.log('ressssss', res)\n    setIsSuccess(true)\n    return {dentalClinicAffil, dentistAffil}\n  } catch (error) {\n    console.log('update errorr', error)\n  }\n}\n\nexport async function fetchData (id, setIsloading) {\n  setIsloading(true)\n  try {\n    const { data: { data } } = await AffiliationEncoderService.getDentalClinicById(id)\n    const { affilType, form: dentalClinicData, dentistId, dentalAssociates, remarks } = mapDentalClinicData(data)\n    if (dentistId) {\n      const { dentistProfile: dentistData, tinStatus } = await fetchDentistData(dentistId)\n      setIsloading(false)\n      return {dentalClinicData, dentistData, dentalAssociates, remarks, tinStatus, dentistId, affilType}\n    }\n  } catch (error) {\n    setIsloading(false)\n    console.log('errors sa fetch', error)\n  }\n}\n\nfunction mapDentalClinicData (res) {\n  const affilType = { stageName: '', status: '', affiliationStatus: '', affiliationType: '', dateReceived: '', mno: '', type: '', id: '' }\n  const form = {\n    unitFlrBldg: '', // required\n    bldgName: '', // required\n    street: '', // required\n    subdivision: '', // required\n    region: '', // required\n    district: '', // required\n    barangay: '', // required\n    city: '', // required\n    zipCode: '',\n    email: '',\n  }\n  const dentalAssociates = {\n    dentalAssociates: [],\n    affiliationInfos: []\n  }\n  const remarksData = {\n    internalRemarks: '',\n    externalRemarks: ''\n  }\n  if (res) {\n    const { email, stage, status, id, type, name, mno, address, remarks, treasury } = res\n    form.name = name\n    form.roomNumber = res['room_number']\n    form.clinicSchedule = res['clinic_schedule']\n    form.natureOfPractice = res['nature_of_practice']\n\n    form.payee = treasury['payee']\n    // address\n    form.district = address['district']\n    form.region = address['region']\n    form.street = address['street']\n    form.unitFlrBldg = address['unit_flr_bldg']\n    form.bldgName = address['building_name']\n    form.city = address['city']\n    form.barangay = address['barangay']\n    form.subdivision = address['subdivision']\n    form.zipCode = address['zip_code']\n    dentalAssociates.affiliationInfos = res['affiliation_infos'] ? [...res['affiliation_infos']] : []\n    dentalAssociates.dentalAssociates = res['dental_associates'] ? [...res['dental_associates']] : []\n    form.dentistId = res['dentist_id']\n\n    // contact\n    form.email = email || ''\n    form.contactPerson = res['contact_person'] || ''\n    form.contactPersonNo = res['contact_person_no'] || ''\n    remarksData.internalRemarks = remarks['internal_remarks']\n    remarksData.externalRemarks = remarks['external_remarks']\n\n    // affiliation type\n    affilType.status = status\n    affilType.mno = mno\n    affilType.type = type\n    affilType.id = id\n    affilType.affiliationStatus = res['affiliation_status'] ? res['affiliation_status']['name'] : ''\n    affilType.stageName = stage.stage_name\n    affilType.status = status\n    affilType.dateSubmitted = stage.date_submitted\n  }\n\n  return {\n    affilType,\n    form,\n    dentistId: res.dentist_id ? res.dentist_id : null,\n    remarks: remarksData,\n    dentalAssociates\n  }\n}\n\nasync function fetchDentistData (id) {\n  try {\n    const { data: { data } } = await PartnerDoctorService.getPartnerDoctorById(id)\n    return mapData(data)\n  } catch (error) {\n    console.log('error dentist', error)\n  }\n}\n\nfunction mapData (res) {\n  let dentistProfile = {\n    firstName: '', // required\n    middleName: '', // done\n    lastName: '', // done\n    suffix: '', // done\n    birthDate: '',\n    civilStatus: '', // done\n    gender: '', // done\n    emailAddress: '',\n    contactNumber: '',\n    mainSpecialization: '', // required done\n    majorSpecialization: '', // required done\n    otherSpecialization: '', // required done\n    subSpecialization: '', // required done\n    pda: '',\n    prcNumber: '',\n    prcExpiration: '', // required\n    philhealthNumber: '', // done\n    philhealthExpiration: '', // done\n    tinNumber: '', // done\n    id: ''\n  }\n  const { philhealth, gender, name, specialization, birthdate, license, treasury, id } = res\n  const tinStatus = {}\n  dentistProfile.philhealthNumber = philhealth['accreditation_number'] ? philhealth['accreditation_number'].toString() : ''\n  dentistProfile.philhealthExpiration = philhealth['expiration_date'] ? dateFormat(philhealth['expiration_date'], '') : ''\n  dentistProfile.mainSpecialization = specialization['main'] ? specialization['main'] : ''\n  dentistProfile.majorSpecialization = specialization['major'] ? specialization['major'] : ''\n  dentistProfile.otherSpecialization = specialization['other'] ? specialization['other'] : ''\n  dentistProfile.subSpecialization = specialization['sub'] ? specialization['sub'] : ''\n  dentistProfile.firstName = name['first'] ? name['first'] : ''\n  dentistProfile.lastName = name['last'] ? name['last'] : ''\n  dentistProfile.middleName = name['middle'] ? name['middle'] : ''\n  dentistProfile.suffix = name['suffix'] ? name['suffix'] : ''\n  dentistProfile.gender = gender\n  dentistProfile.civilStatus = res['civil_status']\n  dentistProfile.prcNumber = license['prc'] ? license['prc']['number'] : ''\n  dentistProfile.id = id\n  dentistProfile.pda = license['pda'] ? license['pda'] : ''\n  dentistProfile.prcExpiration = license['prc'] ? dateFormat(license['prc']['expiration_date'], '') : ''\n  dentistProfile.tinNumber = treasury['tin'] ? treasury['tin'] : ''\n  dentistProfile.emailAddress = res['email_address']\n  dentistProfile.contactNumber = res['contact_number']\n  dentistProfile.birthDate = birthdate ? dateFormat(birthdate, '') : ''\n  tinStatus.tinStatus = treasury['tin_status'] ? treasury['tin_status'] : ''\n  tinStatus.vatTaxRate = treasury['vat'] ? treasury['vat']['tax_rate'] : ''\n  tinStatus.nonVatable = treasury['non_vatable'] ? treasury['non_vatable'] : ''\n\n  return {\n    dentistProfile,\n    tinStatus\n  }\n}\n"],"sourceRoot":""}