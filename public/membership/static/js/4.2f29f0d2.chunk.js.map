{"version":3,"sources":["Pages/ViewMember/TicketList/ActionConsts.ts","Pages/ViewMember/TicketList/TicketListActions.ts","Pages/ViewMember/TicketList/TicketListTableData.ts","Pages/ViewMember/TicketList/GlobalFunction.tsx","Pages/ViewMember/TicketList/TicketListPage.tsx"],"names":["ActionConsts","ResetReducer","SetReducer","TicketListActions","payload","type","columnNames","name","title","tableData","formattedColumns","required_columns","urgency_columns","text_columns","date_columns","boolean_columns","detaillink_columns","columnExtensions","columns","map","column","width","push","columnName","wordWrapEnabled","getColumnExtensions","fixedColumns","cellProperties","rows","types","specTypes","statuses","channels","is_vip","index","status","faker","random","arrayElement","urgency","capitalize","app_uid","alphaNumeric","dueDate","date","future","specificType","member","findName","company","companyName","ticketOwner","assignedTo","createdDate","lastUpdate","channel","generateRows","GlobalFunction","sentence","splitStr","toLowerCase","split","i","length","charAt","toUpperCase","substring","join","fname","mname","lname","getIntials","num","isDecimal","toFixed","toString","replace","text","initials","wordArray","paramDate","Date","day","getDate","monthIndex","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","seconds","getSeconds","meridian","newSec","toLocaleString","fromDate","toDate","getTime","valueList","Math","round","birthDate","ageInMillis","now","abs","getUTCFullYear","ticketType","appNo","tempString","Inpatient","Maternity","Consultation","Availment","Inquiry","PriorityOptions","label","value","FilterSelect","items","restProps","Select","variant","style","renderValue","selected","find","item","MenuItem","key","popoverStyles","makeStyles","theme","popoverCheckbox","marginLeft","spacing","marginRight","SelectColumnsPopover","props","selectedColumns","setSelectedColumns","classes","popupState","usePopupState","popupId","Button","fullWidth","bindTrigger","Typography","className","clsx","align","icon","faThList","Popover","bindPopover","anchorOrigin","vertical","horizontal","transformOrigin","FormGroup","idx","columnObj","checked","findIndex","FormControlLabel","control","Checkbox","onChange","event","target","tmpSelectedColumns","remove","color","TicketListPage","tickets","tableListRef","onLogout","window","location","reset","setState","loading","query","getTicketStats","ticketStats","all","open","filter","ticket","closed","resolved","pending","loadTicketList","ins","tempTickets","API","getMemberTickets","memberNumber","then","response","undefined","error","ticket_category","ticket_no","_id","ticket_type","specific_type","member_data","toNameFormat","last_name","middle_name","first_name","client","client_data","registered_name","created_by","assign_to","toDateAndTime","date_created","date_updated","received_via","transaction_no","pmaker_case_uid","app_number","ticket_id","sort","console","log","catch","cols","getVisibleColumns","state","generateReport","onSearchTextChange","e","preventDefault","onStatusFilterClick","newStatus","current","resetPage","componentWillMount","Object","keys","componentDidMount","getFilteredTickets","filteredTickets","filters","includes","ticketList","React","attrName","isAsc","this","a","b","position","right","top","Fab","backgroundColor","onClick","Grid","container","direction","justify","alignItems","xs","sm","md","TextField","id","placeholder","margin","inputProps","InputProps","startAdornment","faSearch","alignContent","disabled","faDownload","Paper","overflow","CustomTable","ref","canOverflow","stickyHeader","renderHeader","renderTableHeader","renderRow","row","renderTableRow","rowsPerPageOptions","dockedColumnsCounter","matchedColumn","col","nextColumnIsFixed","left","zIndex","minWidth","maxWidth","padding","borderRight","TableCell","float","IconButton","faSort","sortTickets","utils","MomentUtils","format","dateVal","d","isNaN","isValidDate","toISOString","InputField","priorityRowStyles","highlight0","highlight1","normal0","normal1","TableRow","fontWeight","textAlign","display","Low","Medium","High","borderRadius","mapStateToProps","mapDispatchToProps","dispatch","Map","bindActionCreators"],"mappings":"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","file":"static/js/4.2f29f0d2.chunk.js","sourcesContent":["export const ActionConsts = {\n  TicketList: {\n    ResetReducer: 'TicketList_ResetReducer',\n    SetReducer: 'TicketList_SetReducer',\n  },\n};\n","//#region Global Imports\n// import { Dispatch } from 'redux';\n//#endregion Global Imports\n\n//#region Local Imports\nimport { ActionConsts } from './ActionConsts';\n// import { PlanetaryService } from 'Components/Services';\n//#endregion Local Imports\n\n//#region Interface Imports\n//#endregion Interface Imports\n\nexport const TicketListActions = {\n  Map: (payload: {}) => ({\n    payload,\n    type: ActionConsts.TicketList.SetReducer,\n  }),\n\n  Reset: () => ({\n    type: ActionConsts.TicketList.ResetReducer,\n  }),\n};\n","import faker from 'faker';\nimport { capitalize } from 'lodash';\n\nconst columnNames = [\n  {\n    name: 'urgency',\n    title: 'Urgency',\n  },\n  {\n    name: 'status',\n    title: 'Status',\n  },\n  {\n    name: 'app_number',\n    title: 'Ticket ID',\n  },\n  {\n    name: 'dueDate',\n    title: 'Due Date',\n  },\n  {\n    name: 'type',\n    title: 'Type',\n  },\n  {\n    name: 'specificType',\n    title: 'Specific Type',\n  },\n  {\n    name: 'member',\n    title: 'Member',\n  },\n  {\n    name: 'company',\n    title: 'Company',\n  },\n  {\n    name: 'ticketOwner',\n    title: 'Ticket Owner',\n  },\n  {\n    name: 'assignedTo',\n    title: 'Assigned To',\n  },\n  {\n    name: 'createdDate',\n    title: 'Created Date',\n  },\n  {\n    name: 'lastUpdate',\n    title: 'Last Update',\n  },\n  {\n    name: 'channel',\n    title: 'Channel',\n  },\n  {\n    name: 'is_vip',\n    title: 'VIP',\n  },\n];\n\nconst getColumnExtensions = () => {\n  const columns: any[] = [];\n\n  columnNames.map(column => {\n    let width = 200;\n\n    switch (column.name) {\n      case 'urgency':\n      case 'status':\n      case 'app_uid':\n        width = 100;\n        break;\n      case 'type':\n      case 'dueDate':\n        width = 120;\n        break;\n      case 'specificType':\n      case 'company':\n        width = 250;\n        break;\n      default:\n        width = 200;\n    }\n\n    columns.push({\n      columnName: column.name,\n      width: width,\n      wordWrapEnabled: true,\n    });\n  });\n\n  return columns;\n};\n\nconst generateRows = () => {\n  const rows: any[] = [];\n  const types = ['Inquiry', 'Availment', 'Request', 'Complaint'];\n  const specTypes = [\n    'Billing Dispute Inquiry',\n    'Outpatient Consult',\n    'X-Ray Procedure Availment',\n    'Service Complaint',\n    'Dental Coverage',\n    'Premium Adjustment',\n  ];\n  const statuses = ['open', 'pending', 'resolved', 'closed'];\n  const channels = ['email', 'fax', 'sms'];\n  const is_vip = [true, false];\n  for (let index = 0; index < 50; index++) {\n    const status = faker.random.arrayElement(statuses);\n    const urgency =\n      status === 'closed' || status === 'resolved'\n        ? 3\n        : faker.random.arrayElement([1, 2]);\n\n    rows.push({\n      urgency: urgency,\n      status: capitalize(status),\n      app_uid: faker.random.alphaNumeric(8),\n      dueDate: faker.date.future(),\n      type: faker.random.arrayElement(types),\n      specificType: faker.random.arrayElement(specTypes),\n      member: faker.name.findName(),\n      company: faker.company.companyName(),\n      ticketOwner: faker.name.findName(),\n      assignedTo: faker.name.findName(),\n      createdDate: faker.date.future(),\n      lastUpdate: faker.date.future(),\n      channel: faker.random.arrayElement(channels),\n      is_vip: faker.random.arrayElement(is_vip),\n    });\n  }\n\n  return rows;\n};\n\nconst tableData: any = {\n  formattedColumns: {\n    required_columns: [],\n    urgency_columns: ['urgency'],\n    text_columns: [\n      'status',\n      'app_uid',\n      'type',\n      'specificType',\n      'member',\n      'company',\n      'ticketOwner',\n      'assignedTo',\n      'channel',\n    ],\n    date_columns: ['dueDate', 'createdDate', 'lastUpdate'],\n    boolean_columns: ['is_vip'],\n    detaillink_columns: ['app_uid'],\n  },\n  columnExtensions: getColumnExtensions(),\n  fixedColumns: [\n    'urgency',\n    'status',\n    'dueDate',\n    'app_uid',\n    'type',\n    'specificType',\n    'member',\n  ],\n  cellProperties: [],\n  columns: columnNames,\n  rows: generateRows(),\n};\n\nexport { tableData };\n","export class GlobalFunction {\n  static capitalizeEachWord(sentence: string) {\n    var splitStr = sentence.toLowerCase().split(' ');\n    for (var i = 0; i < splitStr.length; i++) {\n      splitStr[i] =\n        splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);\n    }\n    return splitStr.join(' ');\n  }\n\n  static toNameFormat(fname: string, mname: string, lname: string) {\n    return `${fname} ${GlobalFunction.getIntials(mname)} ${lname}`;\n  }\n\n  static formatNumber(num: number, isDecimal: boolean = false) {\n    let value = '';\n    if (isDecimal) {\n      value = num.toFixed(2);\n    } else {\n      value = num.toString();\n    }\n    return value.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n  }\n\n  static getIntials(text: string) {\n    var initials = '';\n    var wordArray = text.split(' ');\n    for (var i = 0; i < wordArray.length; i++) {\n      initials += wordArray[i].substring(0, 1).toUpperCase() + '.';\n    }\n    return initials;\n  }\n\n  static toCommonDateString(paramDate: Date | string) {\n    let date = typeof paramDate === 'string' ? new Date(paramDate) : paramDate;\n    if (date) {\n      const monthNames = [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December',\n      ];\n      const day = date.getDate();\n      const monthIndex = date.getMonth();\n      const year = date.getFullYear();\n      return monthNames[monthIndex] + ' ' + day + ', ' + year;\n    }\n\n    return '';\n  }\n\n  static toShortDateString(paramDate: Date | string) {\n    let date = typeof paramDate === 'string' ? new Date(paramDate) : paramDate;\n    if (date) {\n      const monthNames = [\n        'Jan',\n        'Feb',\n        'Mar',\n        'Apr',\n        'May',\n        'Jun',\n        'Jul',\n        'Aug',\n        'Sep',\n        'Oct',\n        'Nov',\n        'Dec',\n      ];\n      const day = date.getDate();\n      const monthIndex = date.getMonth();\n      const year = date.getFullYear();\n      return monthNames[monthIndex] + ' ' + day + ', ' + year;\n    }\n\n    return '';\n  }\n\n  static toDateAndTime(paramDate: Date | string) {\n    let date = typeof paramDate === 'string' ? new Date(paramDate) : paramDate;\n    if (date) {\n      const monthNames = [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December',\n      ];\n      const day = date.getDate();\n      const monthIndex = date.getMonth();\n      const year = date.getFullYear();\n      const hours = date.getHours() - (date.getHours() > 12 ? 12 : 0);\n      const minutes = date.getMinutes();\n      const seconds = date.getSeconds();\n      const meridian = date.getHours() > 12 ? 'PM' : 'AM';\n\n      var newSec = '0' + seconds;\n      if (seconds.toLocaleString().length !== 1)\n        newSec = seconds.toLocaleString();\n\n      return (\n        monthNames[monthIndex] +\n        ' ' +\n        day +\n        ', ' +\n        year +\n        ' - ' +\n        hours +\n        ':' +\n        minutes +\n        ':' +\n        newSec +\n        ' ' +\n        meridian\n      );\n    }\n\n    return '';\n  }\n\n  static getTimeDeffirence(fromDate: Date, toDate: Date) {\n    const seconds = (toDate.getTime() - fromDate.getTime()) / 1000;\n    const scaleList = [\n      ['day', 'days'],\n      ['hour', 'hours'],\n      ['minute', 'minutes'],\n      ['second', 'seconds'],\n    ];\n    const valueList = [\n      Math.round(seconds / 86400),\n      Math.round(seconds / 3600) % 24,\n      Math.round(seconds / 60) % 60,\n      Math.round(seconds) % 60,\n    ];\n\n    let index = 0;\n    for (let i = 0; i < valueList.length; i++) {\n      if (valueList[i] > 0) {\n        index = i;\n        break;\n      }\n    }\n\n    if (index) {\n      return `${valueList[index]} ${\n        scaleList[index][valueList[index] == 1 ? 0 : 1]\n      }`;\n    }\n    return '';\n  }\n\n  static getAge(birthDate: any) {\n    if (birthDate) {\n      var ageInMillis = Date.now() - birthDate;\n      return Math.abs(new Date(ageInMillis).getUTCFullYear() - 1970);\n    }\n\n    return null;\n  }\n\n  static generateTicketNumber(\n    ticketType: string,\n    specificType: string,\n    appNo: string,\n  ) {\n    const ticketTypes = {\n      Availment: 'AVL',\n      Inquiry: 'INQ',\n    };\n    const specificTypes = {\n      Inpatient: 'INP',\n      'Outpatient Procedure': 'OP',\n      'Emergency Room': 'ER',\n      Maternity: 'MAT',\n      Consultation: 'CON',\n    };\n    const tempString =\n      ticketType === 'Inquiry' ? '' : `${specificTypes[specificType]}-`;\n    return `${ticketTypes[ticketType]}-${tempString}${appNo}`;\n  }\n}\n","//#region Global Imports\nimport * as React from 'react';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport {\n  Button,\n  Checkbox,\n  Fab,\n  FormControlLabel,\n  FormGroup,\n  Grid,\n  Paper,\n  Popover,\n  TableCell,\n  TableRow,\n  TextField,\n  Typography,\n  Select,\n  MenuItem,\n} from '@material-ui/core';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport {\n  usePopupState,\n  bindTrigger,\n  bindPopover,\n} from 'material-ui-popup-state/hooks';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faDownload,\n  faSearch,\n  faThList,\n  faSort,\n} from '@fortawesome/free-solid-svg-icons';\nimport { map, findIndex, remove, filter } from 'lodash';\nimport clsx from 'clsx';\nimport MomentUtils from '@date-io/moment';\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider,\n  MaterialUiPickersDate,\n} from '@material-ui/pickers';\n//#endregion Global Imports\n\n//#region Interface Imports\nimport { Store } from 'Components/Stores/IStore';\nimport { Loader } from 'Components/UI/LoadingIndicator';\nimport { ITicketListPage } from './ITicketListPage';\nimport { TicketListActions } from './TicketListActions';\nimport { tableData } from './TicketListTableData';\nimport { API } from '../../API';\n//import { Processmaker } from './Processmaker';\n\nimport './index.scss';\nimport { GlobalFunction } from './GlobalFunction';\nimport { CustomTable } from './CustomTable';\nimport { IconButton } from './IconButton';\nimport { InputField } from './InputField';\nimport { PositionProperty } from 'csstype';\n//#endregion Interface Imports\n\nconst isValidDate = (date: string) => {\n  const d = new Date(date);\n  return d instanceof Date && !isNaN(d.getTime());\n}\n\nconst PriorityOptions = [\n\t{ label: 'High', value: 'High' },\n\t{ label: 'Medium', value: 'Medium' },\n\t{ label: 'Low', value: 'Low' },\n];\n\nconst FilterSelect = ({ items, ...restProps  }: any) => {\n\treturn (\n\t\t<Select\n\t\t\tvariant='outlined'\n\t\t\tstyle={{ width: '100%' }}\n\t\t\trenderValue={(selected: any) => {\n\t\t\t\tif (selected != null) {\n\t\t\t\t\tconst value: any = items.find((item: any) => {\n\t\t\t\t\t\treturn item.value === selected;\n\t\t\t\t\t});\n\t\t\t\t\tif (value) {\n\t\t\t\t\t\treturn value.label;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '——';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn '——';\n\t\t\t}}\n\t\t\t{...restProps}\n\t\t>\n\t\t\t{items.map((item: any, i: number) => (\n\t\t\t\t<MenuItem key={i} value={item.value}>\n\t\t\t\t\t{item.label}\n\t\t\t\t</MenuItem>\n\t\t\t))}\n\t\t</Select>\n\t);\n};\n\nconst popoverStyles = makeStyles((theme: Theme) => ({\n  popoverCheckbox: {\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n  },\n}));\n\ninterface SelectColumnsPopoverProps {\n  columns: any[];\n  selectedColumns: any[];\n  setSelectedColumns: any;\n}\n\nconst SelectColumnsPopover: React.FC<SelectColumnsPopoverProps> = (\n  props: SelectColumnsPopoverProps,\n): JSX.Element => {\n  const { columns, selectedColumns, setSelectedColumns } = props;\n  const classes = popoverStyles(props);\n\n  const onCheckChange = (columnObj: any) => (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    if (event.target.checked) {\n      const tmpSelectedColumns = [...selectedColumns];\n      tmpSelectedColumns.push(columnObj);\n\n      setSelectedColumns(tmpSelectedColumns);\n    } else {\n      const tmpSelectedColumns = [...selectedColumns];\n      remove(tmpSelectedColumns, columnName => {\n        return columnName.name === columnObj.name;\n      });\n\n      setSelectedColumns(tmpSelectedColumns);\n    }\n  };\n\n  const popupState = usePopupState({\n    variant: 'popover',\n    popupId: 'columnListPopover',\n  });\n\n  return (\n    <div>\n      <Button fullWidth {...bindTrigger(popupState)}>\n        <Typography className={clsx('link-button')} align=\"right\">\n          <FontAwesomeIcon\n            icon={faThList}\n            className={clsx('link-button-icon')}\n          />\n          <span className={clsx('link-button-text')}>Display Columns</span>\n        </Typography>\n      </Button>\n      <Popover\n        {...bindPopover(popupState)}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n      >\n        <FormGroup>\n          {map(columns, (column, idx) => {\n            const checked =\n              findIndex(selectedColumns, { name: column.name }) >= 0;\n\n            return (\n              <FormControlLabel\n                key={idx}\n                control={\n                  <Checkbox\n                    checked={checked}\n                    onChange={onCheckChange(column)}\n                    value={column.name}\n                    color=\"primary\"\n                  />\n                }\n                className={classes.popoverCheckbox}\n                label={column.title}\n              />\n            );\n          })}\n        </FormGroup>\n      </Popover>\n    </div>\n  );\n};\n\nexport class TicketListPage extends React.Component<\n  ITicketListPage.IProps,\n  ITicketListPage.IState\n> {\n  tickets: any[];\n  tableListRef: any;\n\n  constructor(props: ITicketListPage.IProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      status: '',\n      query: '',\n      columns: [],\n      selectedColumns: [],\n      fixedColumns: [],\n      formattedColumns: {},\n      columnExtensions: [],\n      rows: [],\n      ticketStats: {},\n      ticketList: [],\n\n      filters: {},\n    };\n\n    this.tickets = [];\n    this.tableListRef = React.createRef();\n  }\n\n  onLogout = () => {\n    window.location.replace('../index.html#/');\n  };\n\n  reset = () => {\n    this.setState({\n      loading: false,\n      // status: '',\n      query: '',\n      // columns: [],\n      // selectedColumns: [],\n      // fixedColumns: [],\n      // formattedColumns: {},\n      // columnExtensions: [],\n      // rows: [],\n      // ticketStats: {},\n      // ticketList: [],\n    });\n  };\n\n  getTicketStats = (tickets: any[]) => {\n    this.setState({\n      ticketStats: {\n        all: tickets.length,\n        open: tickets.filter(ticket => ticket.status.toLowerCase() === 'open')\n          .length,\n        closed: tickets.filter(\n          ticket => ticket.status.toLowerCase() === 'closed',\n        ).length,\n        resolved: tickets.filter(\n          ticket => ticket.status.toLowerCase() === 'resolved',\n        ).length,\n        pending: tickets.filter(\n          ticket => ticket.status.toLowerCase() === 'pending',\n        ).length,\n      },\n    });\n  };\n  \n  loadTicketList = () => {\n    let ins = this;\n\n    let tempTickets: any = [];\n\n    ins.setState({\n      loading: true,\n    }, () => {\n      API.getMemberTickets(ins.props.memberNumber)\n      .then(response => {\n        if (response && response.error === undefined){\n          if(response.length > 0){\n            response.map(ticket => {\n              tempTickets.push({\n                urgency: ticket.ticket_category.urgency,\n                status: ticket.status,\n                ticket_no: ticket._id,\n                dueDate: '',\n                type: ticket.ticket_category.ticket_type,\n                specificType: ticket.ticket_category.specific_type,\n                member: ticket.member_data\n                  ? GlobalFunction.toNameFormat(\n                      ticket.member_data.last_name,\n                      ticket.member_data.middle_name,\n                      ticket.member_data.first_name,\n                    )\n                  : 'N/A',\n                company: ticket.member_data\n                  ? ticket.member_data.client\n                  : ticket.client_data\n                  ? ticket.client_data.registered_name\n                  : 'N/A',\n                is_vip: ticket.member_data\n                  ? ticket.member_data.is_vip\n                    ? 'Yes'\n                    : 'No'\n                  : 'N/A',\n                ticketOwner: ticket.created_by.name,\n                assignedTo: ticket.ticket_category.assign_to,\n                createdDate: GlobalFunction.toDateAndTime(\n                  new Date(ticket.date_created),\n                ),\n                lastUpdate: GlobalFunction.toDateAndTime(\n                  new Date(ticket.date_updated),\n                ),\n                channel: ticket.received_via,\n                transaction_no: ticket.transaction_no,\n  \n                pmaker_case_uid: ticket.pmaker_case_uid,\n                app_uid: '',\n                app_number: ticket.ticket_id ? ticket.ticket_id : 'N/A',\n              });\n            });\n\n            ins.tickets = [...tempTickets];\n            ins.tickets.sort(() => {\n              return -1;\n            });\n            ins.getTicketStats(this.tickets);\n            ins.setState({\n              loading: false \n            });\n\n            /*\n            Processmaker.get(\n              'cases/participated',\n              cases => {\n                tempTickets.map(ticket => {\n                  const matchedCase = cases.filter(\n                    caseItem => caseItem.app_uid === ticket.pmaker_case_uid,\n                  )[0];\n                  if (matchedCase) {\n                    ticket.app_uid = matchedCase.app_uid;\n                    ticket.app_number = GlobalFunction.generateTicketNumber(\n                      ticket.type,\n                      ticket.specificType,\n                      matchedCase.app_number,\n                    );\n                    this.tickets.push(ticket);\n                  }\n                });\n                this.tickets.sort(() => {\n                  return -1;\n                });\n                this.getTicketStats(this.tickets);\n                this.setState({ loading: false });\n              },\n              error => {\n                console.log(error);\n                this.setState({ loading: false });\n              },\n            );\n            */\n\n          }\n\n        }\n        else{\n          console.log('get member tickets error ', response.error);\n          ins.setState({\n            loading: false\n          });\n        }\n      })\n      .catch(error => {\n        console.log('get member tickets error ', error);\n        ins.setState({\n          loading: false\n        });\n      });\n    });\n  }\n\n  setSelectedColumns = cols => {\n    this.setState({\n      selectedColumns: cols,\n    });\n  };\n\n  getVisibleColumns = () => {\n    return filter(this.state.columns, column => {\n      return findIndex(this.state.selectedColumns, { name: column.name }) >= 0;\n    });\n  };\n\n  generateReport = () => {\n    console.log('generate report');\n  };\n\n  onSearchTextChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    e.preventDefault();\n    const { value } = e.target;\n    this.setState({ query: value });\n  };\n\n  onStatusFilterClick = newStatus => {\n    if (this.state.status === newStatus) {\n      return;\n    }\n    this.setState({ status: newStatus });\n\n    this.tableListRef.current.resetPage();\n  };\n\n  componentWillMount = () => {\n    let cols = tableData.columns;\n    this.setState({\n      columns: cols,\n      selectedColumns: cols,\n      fixedColumns:\n        Object.keys(tableData).length > 0 ? tableData['fixedColumns'] : [],\n      formattedColumns:\n        Object.keys(tableData).length > 0 ? tableData['formattedColumns'] : [],\n      columnExtensions:\n        Object.keys(tableData).length > 0 ? tableData['columnExtensions'] : [],\n    });\n  };\n\n  componentDidMount = () => {\n    this.loadTicketList();\n  };\n\n  getFilteredTickets = (columns: any) => {\n    let filteredTickets = this.tickets;\n\n    columns.map(column => {\n      filteredTickets = filteredTickets\n        .filter(ticket =>\n          this.state.filters[column.name]\n            ? this.state.filters[column.name] === '' ||\n              (ticket[column.name] &&\n                ticket[column.name]\n                  .toString()\n                  .toLowerCase()\n                  .includes(this.state.filters[column.name].toLowerCase()))\n            : true,\n        )\n        .filter(\n          ticket =>\n            this.state.status === '' ||\n            ticket.status.toLowerCase() === this.state.status.toLowerCase(),\n        )\n        .filter(\n          ticket =>\n            this.state.query === '' ||\n            ticket['app_number']\n              .toLowerCase()\n              .includes(this.state.query.toLowerCase()),\n        );\n    });\n\n    if (this.tableListRef.current) {\n      this.tableListRef.current.resetPage();\n    }\n\n    return filteredTickets;\n  };\n\n  sortTickets(attrName: string, isAsc: boolean): void {\n    this.tickets.sort((a: any, b: any) =>\n      a[attrName] &&\n      b[attrName] &&\n      a[attrName].toString().toLowerCase() >\n        b[attrName].toString().toLowerCase()\n        ? isAsc\n          ? 1\n          : -1\n        : isAsc\n        ? -1\n        : 1,\n    );\n  }\n\n  public render(): JSX.Element {\n    let ins = this;\n\n    return (\n      <div>\n        {this.state.loading ? <Loader /> : null}\n\n        <div style={{ position: 'absolute', right: '1rem', top: '1rem' }}>\n          <Fab color=\"primary\" style={{ backgroundColor: '#CCCCCC' }}>\n            <ExitToAppIcon onClick={this.onLogout} />\n          </Fab>\n        </div>\n\n        <div className={clsx('TicketListPage')}>\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"space-between\"\n            alignItems=\"baseline\"\n          >\n            <Grid item xs={12} className={clsx('header-label')}>\n              <Typography className={clsx('title')} color=\"textPrimary\">\n                Tickets\n              </Typography>\n            </Grid>\n          </Grid>\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"space-between\"\n            alignItems=\"center\"\n            spacing={1}\n            className={clsx('search')}\n          >\n            <Grid item sm={12} md={8}>\n              <TextField\n                id=\"cc_search_tickets_tf\"\n                placeholder=\"Search ticket ID\"\n                className={clsx('search-field')}\n                margin=\"dense\"\n                variant=\"outlined\"\n                fullWidth\n                onChange={ins.onSearchTextChange}\n                value={ins.state.query}\n                inputProps={{ 'aria-label': 'bare' }}\n                InputProps={{\n                  startAdornment: (\n                    <FontAwesomeIcon\n                      icon={faSearch}\n                      className={clsx('input-adornment')}\n                    />\n                  ),\n                }}\n              />\n            </Grid>\n            <Grid item sm={6} md={2} alignContent=\"flex-end\" justify=\"flex-end\">\n              <Button\n                fullWidth\n                onClick={() => {\n                  this.generateReport();\n                }}\n                disabled\n              >\n                <Typography\n                  className={clsx('link-button disabled')}\n                  align=\"right\"\n                >\n                  <FontAwesomeIcon\n                    icon={faDownload}\n                    className={clsx('link-button-icon disabled')}\n                  />\n                  <span className={clsx('link-button-text')}>\n                    Generate Report\n                  </span>\n                </Typography>\n              </Button>\n            </Grid>\n            <Grid item sm={6} md={2} alignContent=\"flex-end\">\n              <SelectColumnsPopover\n                setSelectedColumns={this.setSelectedColumns}\n                columns={this.state.columns}\n                selectedColumns={this.state.selectedColumns}\n              />\n            </Grid>\n          </Grid>\n          <Grid container direction=\"row\" className={clsx('tickets-table')}>\n            <Grid item xs={12}>\n              <Paper className={clsx('tickets-table-container')}>\n                <Grid container xs={12}>\n                  <Grid item xs className={clsx('tickets-table-stats')}>\n                    <Typography\n                      align=\"center\"\n                      onClick={() => {\n                        this.onStatusFilterClick('');\n                      }}\n                    >\n                      <span\n                        className={\n                          this.state.status == ''\n                            ? clsx('tickets-all')\n                            : clsx('tickets-default')\n                        }\n                      >\n                        {this.state.ticketStats.all\n                          ? this.state.ticketStats.all\n                          : 0}\n                      </span>\n                      <span\n                        className={\n                          this.state.status == ''\n                            ? clsx('ticket-label-active')\n                            : clsx('ticket-label')\n                        }\n                      >\n                        ALL\n                      </span>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs className={clsx('tickets-table-stats')}>\n                    <Typography\n                      align=\"center\"\n                      onClick={() => {\n                        this.onStatusFilterClick('open');\n                      }}\n                    >\n                      <span\n                        className={\n                          this.state.status == 'open'\n                            ? clsx('tickets-open')\n                            : clsx('tickets-default')\n                        }\n                      >\n                        {this.state.ticketStats.open\n                          ? this.state.ticketStats.open\n                          : 0}\n                      </span>\n                      <span\n                        className={\n                          this.state.status == 'open'\n                            ? clsx('ticket-label-active')\n                            : clsx('ticket-label')\n                        }\n                      >\n                        OPEN\n                      </span>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs className={clsx('tickets-table-stats')}>\n                    <Typography\n                      align=\"center\"\n                      onClick={() => {\n                        this.onStatusFilterClick('pending');\n                      }}\n                    >\n                      <span\n                        className={\n                          this.state.status == 'pending'\n                            ? clsx('tickets-pending')\n                            : clsx('tickets-default')\n                        }\n                      >\n                        {this.state.ticketStats.pending\n                          ? this.state.ticketStats.pending\n                          : 0}\n                      </span>\n                      <span\n                        className={\n                          this.state.status == 'pending'\n                            ? clsx('ticket-label-active')\n                            : clsx('ticket-label')\n                        }\n                      >\n                        PENDING\n                      </span>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs className={clsx('tickets-table-stats')}>\n                    <Typography\n                      align=\"center\"\n                      onClick={() => {\n                        this.onStatusFilterClick('resolved');\n                      }}\n                    >\n                      <span\n                        className={\n                          this.state.status == 'resolved'\n                            ? clsx('tickets-resolved')\n                            : clsx('tickets-default')\n                        }\n                      >\n                        {this.state.ticketStats.resolved\n                          ? this.state.ticketStats.resolved\n                          : 0}\n                      </span>\n                      <span\n                        className={\n                          this.state.status == 'resolved'\n                            ? clsx('ticket-label-active')\n                            : clsx('ticket-label')\n                        }\n                      >\n                        RESOLVED\n                      </span>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs className={clsx('tickets-table-stats')}>\n                    <Typography\n                      align=\"center\"\n                      onClick={() => {\n                        this.onStatusFilterClick('closed');\n                      }}\n                    >\n                      <span\n                        className={\n                          this.state.status == 'closed'\n                            ? clsx('tickets-closed')\n                            : clsx('tickets-default')\n                        }\n                      >\n                        {this.state.ticketStats.closed\n                          ? this.state.ticketStats.closed\n                          : 0}\n                      </span>\n                      <span\n                        className={\n                          this.state.status == 'closed'\n                            ? clsx('ticket-label-active')\n                            : clsx('ticket-label')\n                        }\n                      >\n                        CLOSED\n                      </span>\n                    </Typography>\n                  </Grid>\n                </Grid>\n                <Grid item xs={12} style={{ overflow: 'auto' }}>\n                  <CustomTable\n                    ref={this.tableListRef}\n                    className=\"ticket-list-table\"\n                    canOverflow\n                    rows={this.getFilteredTickets(this.state.columns)}\n                    stickyHeader={true}\n                    renderHeader={() =>\n                      this.renderTableHeader(\n                        this.state.columns,\n                        this.state.fixedColumns,\n                      )\n                    }\n                    renderRow={(row: any, index: number) =>\n                      this.renderTableRow(\n                        row,\n                        index,\n                        this.state.columns,\n                        this.state.fixedColumns,\n                      )\n                    }\n                    rowsPerPageOptions={[5, 10, 15]}\n                  />\n                </Grid>\n              </Paper>\n            </Grid>\n          </Grid>\n        </div>\n      </div>\n    );\n  }\n\n  renderTableHeader(columns: any, fixedColumns: any): JSX.Element {\n    let dockedColumnsCounter = 0;\n    return (\n      <>\n        {columns\n          .filter(column => {\n            for (var i = 0; i < this.state.selectedColumns.length; i++) {\n              if (this.state.selectedColumns[i].name === column.name) {\n                return true;\n              }\n            }\n            return false;\n          })\n          .map((column, index) => {\n            const matchedColumn = fixedColumns.filter(\n              col => col === column.name,\n            )[0];\n            let nextColumnIsFixed = true;\n            if (matchedColumn && columns[index + 1]) {\n              nextColumnIsFixed = fixedColumns.filter(\n                col => col === columns[index + 1].name,\n              )[0]\n                ? true\n                : false;\n            }\n            const style = {\n              left: matchedColumn ? dockedColumnsCounter * 125 : 0,\n              zIndex: matchedColumn ? 125 : 0,\n              minWidth: '125px',\n              maxWidth: '125px',\n              padding: '4px 8px',\n              borderRight: !nextColumnIsFixed ? '#9EA3AC 2px solid' : undefined,\n            };\n            if (matchedColumn) {\n              dockedColumnsCounter++;\n            }\n            switch(column.name){\n              case 'urgency':\n                return (\n                  <TableCell style={style}>\n                    <span className=\"header-2\">{column.title}</span>\n                    <div style={{ float: 'right' }}>\n                      <IconButton\n                        icon={faSort}\n                        onClick={() => {\n                          this.sortTickets(column.name, true);\n                          this.setState({ loading: false });\n                        }}\n                      />\n                    </div>\n                    <FilterSelect\n                      onChange={e => {\n                        this.state.filters[column.name] = e.target.value ? e.target.value : '';\n                        this.setState({ filters: this.state.filters });\n                      }}\n                      name={'urgency'}\n                      items={PriorityOptions}\n                      id={'urgency'}\n                      value={this.state.filters[column.name]}\n                    />\n                  </TableCell>\n                );\n                break;\n              case 'dueDate':\n              case 'createdDate':\n              case 'lastUpdate':\n                return (\n                  <TableCell style={style}>\n                    <span className=\"header-2\">{column.title}</span>\n                    <div style={{ float: 'right' }}>\n                      <IconButton\n                        icon={faSort}\n                        onClick={() => {\n                          this.sortTickets(column.name, true);\n                          this.setState({ loading: false });\n                        }}\n                      />\n                    </div>\n                    <MuiPickersUtilsProvider utils={MomentUtils}>\n                      <KeyboardDatePicker\n                          id={'filter-'+column.name}\n                          style={{\n                            width: '100%',\n                          }}\n                          variant=\"dialog\"\n                          format=\"MM/DD/YYYY\"\n                          value={this.state.filters[column.name]}\n                          onChange={(date: MaterialUiPickersDate | null) => {\n                              //console.log(column.name, ': ', (date ? date.toString() : '')); \n                              let dateVal = date && isValidDate(date.toString()) ? date.toDate().toISOString() : null;\n                              this.state.filters[column.name] = dateVal;\n                              this.setState({ filters: this.state.filters });\n                          }}\n                      />\n                    </MuiPickersUtilsProvider>\n                  </TableCell>\n                );\n                break;\n              default:\n                return (\n                  <TableCell style={style}>\n                    <span className=\"header-2\">{column.title}</span>\n                    <div style={{ float: 'right' }}>\n                      <IconButton\n                        icon={faSort}\n                        onClick={() => {\n                          this.sortTickets(column.name, true);\n                          this.setState({ loading: false });\n                        }}\n                      />\n                    </div>\n                    <InputField\n                      value={this.state.filters[column.name]}\n                      onChange={(value: string) => {\n                        this.state.filters[column.name] = value;\n                        this.setState({ filters: this.state.filters });\n                        // this.setState(prevState => ({...prevState, [attrName]: value}));\n                      }}\n                    />\n                  </TableCell>\n                );\n                break;\n            }\n            if(column === 'due'){\n\n            }\n            else{\n              \n            }\n          })}\n      </>\n    );\n  }\n\n  renderTableRow(\n    row: any,\n    index: number,\n    columns: any,\n    fixedColumns: any,\n  ): JSX.Element {\n    let dockedColumnsCounter = 0;\n    const priorityRowStyles = {\n      highlight0: '#FFF1F1',\n      highlight1: '#F7EAEC',\n      normal0: '#FFFFFF',\n      normal1: '#FAFCFE',\n    };\n    //const backgroundColor = index % 2 === 0 ? '#FFFFFF' : '#F6F7FA';\n    console.log('ugency: ', row['urgency']);\n    const backgroundColor = row['urgency'] === 'High' ? priorityRowStyles[('highlight'+(index % 2))] : priorityRowStyles[('normal'+(index % 2))];\n    return (\n      <TableRow\n        style={{ backgroundColor: backgroundColor }}\n        onClick={() => {\n          // const route =\n          //   row.status === 'Resolved' ||\n          //   row.specificType === 'Outpatient Procedure' ||\n          //   row.specificType === 'Consultation'\n          //     ? 'resolve-ticket'\n          //     : 'update-ticket';\n          // window.location.href = `#/customer-care/${route}/${row.app_uid}/${row.app_number}/${row.ticket_no}`;\n        }}\n      >\n        {columns\n          .filter(column => {\n            for (var i = 0; i < this.state.selectedColumns.length; i++) {\n              if (this.state.selectedColumns[i].name === column.name) {\n                return true;\n              }\n            }\n            return false;\n          })\n          .map((column, index) => {\n            const matchedColumn = fixedColumns.filter(\n              col => col === column.name,\n            )[0];\n            let nextColumnIsFixed = true;\n            if (matchedColumn && columns[index + 1]) {\n              nextColumnIsFixed = fixedColumns.filter(\n                col => col === columns[index + 1].name,\n              )[0]\n                ? true\n                : false;\n            }\n            const style = {\n              left: matchedColumn ? dockedColumnsCounter * 125 : 0,\n              zIndex: matchedColumn ? 125 : 0,\n              position: matchedColumn\n                ? 'sticky'\n                : ('relative' as PositionProperty),\n              minWidth: '125px',\n              maxWidth: '125px',\n              padding: '4px 8px',\n              fontWeight: 400,\n              borderRight: !nextColumnIsFixed ? '#9EA3AC 2px solid' : undefined,\n            };\n            if (matchedColumn) {\n              dockedColumnsCounter++;\n            }\n            const urgencyColor = {\n              Low: 'rgb(65, 182, 127)',\n              Medium: 'rgb(248, 179, 68)',\n              High: 'rgb(250, 86, 86)',\n            };\n            const urgencyNumber = {\n              Low: 3,\n              Medium: 2,\n              High: 1,\n            };\n            return (\n              <TableCell style={style}>\n                {column.name === 'urgency' ? (\n                  <div style={{ width: '100%', textAlign: 'center' }}>\n                    <div\n                      className=\"number-item\"\n                      style={{\n                        display: 'inline-block',\n                        backgroundColor: urgencyColor[row[column.name]],\n                        color: '#FFFFFF', \n                        padding: '2px 4px',\n                        fontWeight: 400,\n                        borderRadius: 4 \n                      }}\n                    >\n                      {urgencyNumber[row[column.name]]}\n                    </div>\n                  </div> /*: index == 3 || index == 10 || index == 11 ? (\n                  row[column.name]\n                ) : column.name === 'urgency' ? (\n                  row[column.name] ? 'Yes' : 'No'\n                )*/\n                ) : (\n                  row[column.name]\n                )}\n              </TableCell>\n            );\n          })}\n      </TableRow>\n    );\n  }\n}\n\nconst mapStateToProps = (state: Store) => state.ticketList;\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  Map: bindActionCreators(TicketListActions.Map, dispatch),\n});\n\nexport { mapStateToProps, mapDispatchToProps };\n"],"sourceRoot":""}