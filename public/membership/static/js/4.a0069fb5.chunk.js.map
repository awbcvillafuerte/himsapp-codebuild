{"version":3,"sources":["Pages/ViewMember/TicketList/ActionConsts.ts","Pages/ViewMember/TicketList/TicketListActions.ts","Pages/ViewMember/TicketList/TicketListTableData.ts","Pages/ViewMember/TicketList/GlobalFunction.tsx","Pages/ViewMember/TicketList/TicketListPage.tsx"],"names":["ActionConsts","ResetReducer","SetReducer","TicketListActions","payload","type","columnNames","name","title","tableData","formattedColumns","required_columns","urgency_columns","text_columns","date_columns","boolean_columns","detaillink_columns","columnExtensions","columns","map","column","width","push","columnName","wordWrapEnabled","getColumnExtensions","fixedColumns","cellProperties","rows","types","specTypes","statuses","channels","is_vip","index","status","faker","random","arrayElement","urgency","capitalize","app_uid","alphaNumeric","dueDate","date","future","specificType","member","findName","company","companyName","ticketOwner","assignedTo","createdDate","lastUpdate","channel","generateRows","GlobalFunction","sentence","splitStr","toLowerCase","split","i","length","charAt","toUpperCase","substring","join","fname","mname","lname","getIntials","num","isDecimal","toFixed","toString","replace","text","initials","wordArray","paramDate","Date","day","getDate","monthIndex","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","seconds","getSeconds","meridian","newSec","toLocaleString","fromDate","toDate","getTime","valueList","Math","round","birthDate","ageInMillis","now","abs","getUTCFullYear","ticketType","appNo","tempString","Inpatient","Maternity","Consultation","Availment","Inquiry","PriorityOptions","label","value","StatusOptions","IsVipOptions","FilterSelect","items","restProps","Select","variant","style","renderValue","selected","find","item","MenuItem","key","popoverStyles","makeStyles","theme","popoverCheckbox","marginLeft","spacing","marginRight","SelectColumnsPopover","props","selectedColumns","setSelectedColumns","classes","popupState","usePopupState","popupId","Button","fullWidth","bindTrigger","Typography","className","clsx","align","icon","faThList","Popover","bindPopover","anchorOrigin","vertical","horizontal","transformOrigin","FormGroup","idx","columnObj","checked","findIndex","FormControlLabel","control","Checkbox","onChange","event","target","tmpSelectedColumns","remove","color","TicketListPage","tickets","tableListRef","onLogout","window","location","reset","setState","loading","query","getTicketStats","state","ticketStats","all","open","filter","ticket","closed","resolved","pending","loadTicketList","isNil","memberId","filters","API","getMemberTickets","then","response","undefined","error","tempTickets","forEach","ticket_no","_id","trim","toDateAndTime","transaction_no","pmaker_case_uid","app_number","current","resetPage","modalProps","isOpen","message","catch","onFilterChanged","clearTimeout","typingTimeoutId","setTimeout","cols","getVisibleColumns","generateReport","generateMemberTicketsReport","next","filename","moment","format","file","File","saveAs","onSearchTextChange","e","preventDefault","onStatusFilterClick","newStatus","componentWillMount","Object","keys","componentDidMount","getFilteredTickets","filteredTickets","includes","ticketList","React","attrName","isAsc","cloneDeep","this","sort","a","b","position","right","top","Fab","backgroundColor","onClick","Grid","container","direction","justify","alignItems","xs","sm","lg","TextField","id","placeholder","margin","inputProps","InputProps","startAdornment","faSearch","alignContent","disabled","faPlus","faDownload","Paper","overflow","CustomTable","ref","canOverflow","stickyHeader","renderHeader","renderTableHeader","renderRow","row","renderTableRow","rowsPerPageOptions","ModalComponent","isModalOpen","onClose","closeModal","dockedColumnsCounter","some","selectedColumn","matchedColumn","col","nextColumnIsFixed","left","zIndex","minWidth","maxWidth","padding","borderRight","TableCell","float","IconButton","faSort","sortTickets","utils","MomentUtils","parsedDate","isValid","dateVal","startOf","InputField","priorityRowStyles","highlight0","highlight1","normal0","normal1","TableRow","fontWeight","textAlign","display","Low","Medium","High","borderRadius","mapStateToProps","mapDispatchToProps","dispatch","Map","bindActionCreators"],"mappings":"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","file":"static/js/4.a0069fb5.chunk.js","sourcesContent":["export const ActionConsts = {\n  TicketList: {\n    ResetReducer: 'TicketList_ResetReducer',\n    SetReducer: 'TicketList_SetReducer',\n  },\n};\n","//#region Global Imports\n// import { Dispatch } from 'redux';\n//#endregion Global Imports\n\n//#region Local Imports\nimport { ActionConsts } from './ActionConsts';\n// import { PlanetaryService } from 'Components/Services';\n//#endregion Local Imports\n\n//#region Interface Imports\n//#endregion Interface Imports\n\nexport const TicketListActions = {\n  Map: (payload: {}) => ({\n    payload,\n    type: ActionConsts.TicketList.SetReducer,\n  }),\n\n  Reset: () => ({\n    type: ActionConsts.TicketList.ResetReducer,\n  }),\n};\n","import faker from 'faker';\nimport { capitalize } from 'lodash';\n\nconst columnNames = [\n  {\n    name: 'urgency',\n    title: 'Urgency',\n  },\n  {\n    name: 'status',\n    title: 'Status',\n  },\n  {\n    name: 'app_number',\n    title: 'Ticket ID',\n  },\n  {\n    name: 'dueDate',\n    title: 'Due Date',\n  },\n  {\n    name: 'type',\n    title: 'Type',\n  },\n  {\n    name: 'specificType',\n    title: 'Specific Type',\n  },\n  {\n    name: 'member',\n    title: 'Member',\n  },\n  {\n    name: 'company',\n    title: 'Company',\n  },\n  {\n    name: 'ticketOwner',\n    title: 'Ticket Owner',\n  },\n  {\n    name: 'assignedTo',\n    title: 'Assigned To',\n  },\n  {\n    name: 'createdDate',\n    title: 'Created Date',\n  },\n  {\n    name: 'lastUpdate',\n    title: 'Last Update',\n  },\n  {\n    name: 'channel',\n    title: 'Channel',\n  },\n  {\n    name: 'is_vip',\n    title: 'VIP',\n  },\n];\n\nconst getColumnExtensions = () => {\n  const columns: any[] = [];\n\n  columnNames.map(column => {\n    let width = 200;\n\n    switch (column.name) {\n      case 'urgency':\n      case 'status':\n      case 'app_uid':\n        width = 100;\n        break;\n      case 'type':\n      case 'dueDate':\n        width = 120;\n        break;\n      case 'specificType':\n      case 'company':\n        width = 250;\n        break;\n      default:\n        width = 200;\n    }\n\n    columns.push({\n      columnName: column.name,\n      width: width,\n      wordWrapEnabled: true,\n    });\n  });\n\n  return columns;\n};\n\nconst generateRows = () => {\n  const rows: any[] = [];\n  const types = ['Inquiry', 'Availment', 'Request', 'Complaint'];\n  const specTypes = [\n    'Billing Dispute Inquiry',\n    'Outpatient Consult',\n    'X-Ray Procedure Availment',\n    'Service Complaint',\n    'Dental Coverage',\n    'Premium Adjustment',\n  ];\n  const statuses = ['open', 'pending', 'resolved', 'closed'];\n  const channels = ['email', 'fax', 'sms'];\n  const is_vip = [true, false];\n  for (let index = 0; index < 50; index++) {\n    const status = faker.random.arrayElement(statuses);\n    const urgency =\n      status === 'closed' || status === 'resolved'\n        ? 3\n        : faker.random.arrayElement([1, 2]);\n\n    rows.push({\n      urgency: urgency,\n      status: capitalize(status),\n      app_uid: faker.random.alphaNumeric(8),\n      dueDate: faker.date.future(),\n      type: faker.random.arrayElement(types),\n      specificType: faker.random.arrayElement(specTypes),\n      member: faker.name.findName(),\n      company: faker.company.companyName(),\n      ticketOwner: faker.name.findName(),\n      assignedTo: faker.name.findName(),\n      createdDate: faker.date.future(),\n      lastUpdate: faker.date.future(),\n      channel: faker.random.arrayElement(channels),\n      is_vip: faker.random.arrayElement(is_vip),\n    });\n  }\n\n  return rows;\n};\n\nconst tableData: any = {\n  formattedColumns: {\n    required_columns: [],\n    urgency_columns: ['urgency'],\n    text_columns: [\n      'status',\n      'app_uid',\n      'type',\n      'specificType',\n      'member',\n      'company',\n      'ticketOwner',\n      'assignedTo',\n      'channel',\n    ],\n    date_columns: ['dueDate', 'createdDate', 'lastUpdate'],\n    boolean_columns: ['is_vip'],\n    detaillink_columns: ['app_uid'],\n  },\n  columnExtensions: getColumnExtensions(),\n  fixedColumns: [\n    'urgency',\n    'status',\n    'dueDate',\n    'app_uid',\n    'type',\n    'specificType',\n    'member',\n  ],\n  cellProperties: [],\n  columns: columnNames,\n  rows: generateRows(),\n};\n\nexport { tableData };\n","export class GlobalFunction {\n  static capitalizeEachWord(sentence: string) {\n    var splitStr = sentence.toLowerCase().split(' ');\n    for (var i = 0; i < splitStr.length; i++) {\n      splitStr[i] =\n        splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);\n    }\n    return splitStr.join(' ');\n  }\n\n  static toNameFormat(fname: string, mname: string, lname: string) {\n    return `${fname} ${GlobalFunction.getIntials(mname)} ${lname}`;\n  }\n\n  static formatNumber(num: number, isDecimal: boolean = false) {\n    let value = '';\n    if (isDecimal) {\n      value = num.toFixed(2);\n    } else {\n      value = num.toString();\n    }\n    return value.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n  }\n\n  static getIntials(text: string) {\n    var initials = '';\n    var wordArray = text.split(' ');\n    for (var i = 0; i < wordArray.length; i++) {\n      initials += wordArray[i].substring(0, 1).toUpperCase() + '.';\n    }\n    return initials;\n  }\n\n  static toCommonDateString(paramDate: Date | string) {\n    let date = typeof paramDate === 'string' ? new Date(paramDate) : paramDate;\n    if (date) {\n      const monthNames = [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December',\n      ];\n      const day = date.getDate();\n      const monthIndex = date.getMonth();\n      const year = date.getFullYear();\n      return monthNames[monthIndex] + ' ' + day + ', ' + year;\n    }\n\n    return '';\n  }\n\n  static toShortDateString(paramDate: Date | string) {\n    let date = typeof paramDate === 'string' ? new Date(paramDate) : paramDate;\n    if (date) {\n      const monthNames = [\n        'Jan',\n        'Feb',\n        'Mar',\n        'Apr',\n        'May',\n        'Jun',\n        'Jul',\n        'Aug',\n        'Sep',\n        'Oct',\n        'Nov',\n        'Dec',\n      ];\n      const day = date.getDate();\n      const monthIndex = date.getMonth();\n      const year = date.getFullYear();\n      return monthNames[monthIndex] + ' ' + day + ', ' + year;\n    }\n\n    return '';\n  }\n\n  static toDateAndTime(paramDate: Date | string) {\n    let date = typeof paramDate === 'string' ? new Date(paramDate) : paramDate;\n    if (date) {\n      const monthNames = [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December',\n      ];\n      const day = date.getDate();\n      const monthIndex = date.getMonth();\n      const year = date.getFullYear();\n      const hours = date.getHours() - (date.getHours() > 12 ? 12 : 0);\n      const minutes = date.getMinutes();\n      const seconds = date.getSeconds();\n      const meridian = date.getHours() > 12 ? 'PM' : 'AM';\n\n      var newSec = '0' + seconds;\n      if (seconds.toLocaleString().length !== 1)\n        newSec = seconds.toLocaleString();\n\n      return (\n        monthNames[monthIndex] +\n        ' ' +\n        day +\n        ', ' +\n        year +\n        ' - ' +\n        hours +\n        ':' +\n        minutes +\n        ':' +\n        newSec +\n        ' ' +\n        meridian\n      );\n    }\n\n    return '';\n  }\n\n  static getTimeDeffirence(fromDate: Date, toDate: Date) {\n    const seconds = (toDate.getTime() - fromDate.getTime()) / 1000;\n    const scaleList = [\n      ['day', 'days'],\n      ['hour', 'hours'],\n      ['minute', 'minutes'],\n      ['second', 'seconds'],\n    ];\n    const valueList = [\n      Math.round(seconds / 86400),\n      Math.round(seconds / 3600) % 24,\n      Math.round(seconds / 60) % 60,\n      Math.round(seconds) % 60,\n    ];\n\n    let index = 0;\n    for (let i = 0; i < valueList.length; i++) {\n      if (valueList[i] > 0) {\n        index = i;\n        break;\n      }\n    }\n\n    if (index) {\n      return `${valueList[index]} ${\n        scaleList[index][valueList[index] == 1 ? 0 : 1]\n      }`;\n    }\n    return '';\n  }\n\n  static getAge(birthDate: any) {\n    if (birthDate) {\n      var ageInMillis = Date.now() - birthDate;\n      return Math.abs(new Date(ageInMillis).getUTCFullYear() - 1970);\n    }\n\n    return null;\n  }\n\n  static generateTicketNumber(\n    ticketType: string,\n    specificType: string,\n    appNo: string,\n  ) {\n    const ticketTypes = {\n      Availment: 'AVL',\n      Inquiry: 'INQ',\n    };\n    const specificTypes = {\n      Inpatient: 'INP',\n      'Outpatient Procedure': 'OP',\n      'Emergency Room': 'ER',\n      Maternity: 'MAT',\n      Consultation: 'CON',\n    };\n    const tempString =\n      ticketType === 'Inquiry' ? '' : `${specificTypes[specificType]}-`;\n    return `${ticketTypes[ticketType]}-${tempString}${appNo}`;\n  }\n}\n","//#region Global Imports\nimport * as React from 'react';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport {\n  Button,\n  Checkbox,\n  Fab,\n  FormControlLabel,\n  FormGroup,\n  Grid,\n  Paper,\n  Popover,\n  TableCell,\n  TableRow,\n  TextField,\n  Typography,\n  Select,\n  MenuItem,\n} from '@material-ui/core';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport {\n  usePopupState,\n  bindTrigger,\n  bindPopover,\n} from 'material-ui-popup-state/hooks';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faDownload,\n  faPlus,\n  faSearch,\n  faThList,\n  faSort,\n} from '@fortawesome/free-solid-svg-icons';\nimport {\n  cloneDeep,\n  isNil,\n  forEach,\n  some,\n  map,\n  findIndex,\n  remove,\n  filter,\n  trim,\n} from 'lodash';\nimport { saveAs } from 'file-saver';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport MomentUtils from '@date-io/moment';\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider,\n  MaterialUiPickersDate,\n} from '@material-ui/pickers';\n//#endregion Global Imports\n\n//#region Interface Imports\nimport { Store } from 'Components/Stores/IStore';\nimport { Loader } from 'Components/UI/LoadingIndicator';\nimport { ModalComponent } from 'Components/UI/ModalComponent';\nimport { ITicketListPage } from './ITicketListPage';\nimport { TicketListActions } from './TicketListActions';\nimport { tableData } from './TicketListTableData';\nimport { API } from '../../API';\n//import { Processmaker } from './Processmaker';\n\nimport './index.scss';\nimport { GlobalFunction } from './GlobalFunction';\nimport { CustomTable } from './CustomTable';\nimport { IconButton } from './IconButton';\nimport { InputField } from './InputField';\nimport { PositionProperty } from 'csstype';\n//#endregion Interface Imports\n\n// const isValidDate = (date: string) => {\n//   const d = new Date(date);\n//   return d instanceof Date && !isNaN(d.getTime());\n// };\n\nconst PriorityOptions = [\n  { label: '', value: '' },\n  { label: 'High', value: 'High' },\n  { label: 'Medium', value: 'Medium' },\n  { label: 'Low', value: 'Low' },\n];\n\nconst StatusOptions = [\n  { label: '', value: '' },\n  { label: 'Open', value: 'open' },\n  { label: 'Pending', value: 'pending' },\n  { label: 'Resolved', value: 'resolved' },\n  { label: 'Closed', value: 'closed' }\n];\n\nconst IsVipOptions = [\n  { label: '', value: '' },\n  { label: 'Yes', value: 'true' },\n  { label: 'No', value: 'false' }\n];\n\nconst FilterSelect = ({ items, ...restProps }: any) => {\n  return (\n    <Select\n      variant=\"outlined\"\n      style={{ width: '100%' }}\n      renderValue={(selected: any) => {\n        if (selected != null) {\n          const value: any = items.find((item: any) => {\n            return item.value === selected;\n          });\n          if (value) {\n            return value.label;\n          } else {\n            return '——';\n          }\n        }\n        return '——';\n      }}\n      {...restProps}\n    >\n      {items.map((item: any, i: number) => (\n        <MenuItem key={i} value={item.value}>\n          {item.label}\n        </MenuItem>\n      ))}\n    </Select>\n  );\n};\n\nconst popoverStyles = makeStyles((theme: Theme) => ({\n  popoverCheckbox: {\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n  },\n}));\n\ninterface SelectColumnsPopoverProps {\n  columns: any[];\n  selectedColumns: any[];\n  setSelectedColumns: any;\n}\n\nconst SelectColumnsPopover: React.FC<SelectColumnsPopoverProps> = (\n  props: SelectColumnsPopoverProps,\n): JSX.Element => {\n  const { columns, selectedColumns, setSelectedColumns } = props;\n  const classes = popoverStyles(props);\n\n  const onCheckChange = (columnObj: any) => (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    if (event.target.checked) {\n      const tmpSelectedColumns = [...selectedColumns];\n      tmpSelectedColumns.push(columnObj);\n\n      setSelectedColumns(tmpSelectedColumns);\n    } else {\n      const tmpSelectedColumns = [...selectedColumns];\n      remove(tmpSelectedColumns, columnName => {\n        return columnName.name === columnObj.name;\n      });\n\n      setSelectedColumns(tmpSelectedColumns);\n    }\n  };\n\n  const popupState = usePopupState({\n    variant: 'popover',\n    popupId: 'columnListPopover',\n  });\n\n  return (\n    <div>\n      <Button fullWidth {...bindTrigger(popupState)}>\n        <Typography className={clsx('link-button')} align=\"right\">\n          <FontAwesomeIcon\n            icon={faThList}\n            className={clsx('link-button-icon')}\n          />\n          <span className={clsx('link-button-text')}>Display Columns</span>\n        </Typography>\n      </Button>\n      <Popover\n        {...bindPopover(popupState)}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n      >\n        <FormGroup>\n          {map(columns, (column, idx) => {\n            const checked =\n              findIndex(selectedColumns, { name: column.name }) >= 0;\n\n            return (\n              <FormControlLabel\n                key={idx}\n                control={\n                  <Checkbox\n                    checked={checked}\n                    onChange={onCheckChange(column)}\n                    value={column.name}\n                    color=\"primary\"\n                  />\n                }\n                className={classes.popoverCheckbox}\n                label={column.title}\n              />\n            );\n          })}\n        </FormGroup>\n      </Popover>\n    </div>\n  );\n};\n\nexport class TicketListPage extends React.Component<\n  ITicketListPage.IProps,\n  ITicketListPage.IState\n> {\n  tickets: any[];\n  tableListRef: any;\n\n  constructor(props: ITicketListPage.IProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      status: '',\n      query: '',\n      columns: [],\n      selectedColumns: [],\n      fixedColumns: [],\n      formattedColumns: {},\n      columnExtensions: [],\n      rows: [],\n      ticketStats: {},\n      ticketList: [],\n      filters: {},\n      typingTimeoutId: null,\n      modalProps: {\n        isOpen: false,\n        title: '',\n        message: '',\n        next: null,\n      },\n    };\n\n    this.tickets = [];\n    this.tableListRef = React.createRef();\n  }\n\n  onLogout = () => {\n    window.location.replace('../index.html#/');\n  };\n\n  reset = () => {\n    this.setState({\n      loading: false,\n      query: '',\n    });\n  };\n\n  getTicketStats = () => {\n    const tickets = this.state.rows;\n    this.setState({\n      ticketStats: {\n        all: tickets.length,\n        open: tickets.filter(ticket => ticket.status.toLowerCase() === 'open')\n          .length,\n        closed: tickets.filter(\n          ticket => ticket.status.toLowerCase() === 'closed',\n        ).length,\n        resolved: tickets.filter(\n          ticket => ticket.status.toLowerCase() === 'resolved',\n        ).length,\n        pending: tickets.filter(\n          ticket => ticket.status.toLowerCase() === 'pending',\n        ).length,\n      },\n    });\n  };\n\n  loadTicketList = () => {\n    if (isNil(this.props.memberId)) {\n      return;\n    }\n\n    this.setState(\n      {\n        loading: true,\n      },\n      () => {\n        const query = this.state.query;\n        const filters = map(this.state.filters, (value, column) => {\n          return {\n            columnName: column,\n            value: value,\n          };\n        });\n\n        API.getMemberTickets(this.props.memberId, query, filters)\n          .then(response => {\n            if (response && response.error === undefined) {\n              const tempTickets: any[] = [];\n              forEach(response, ticket => {\n                tempTickets.push({\n                  urgency: ticket.urgency,\n                  status: ticket.status,\n                  ticket_no: ticket._id,\n                  dueDate: '',\n                  type: ticket.type,\n                  specificType: ticket.specificType,\n                  member:\n                    trim(ticket.member) !== '' ? trim(ticket.member) : 'N/A',\n                  company:\n                    trim(ticket.company) !== '' ? trim(ticket.company) : 'N/A',\n                  is_vip: ticket.is_vip ? 'Yes' : 'No',\n                  ticketOwner: ticket.ticketOwner,\n                  assignedTo: ticket.assignedTo,\n                  createdDate: GlobalFunction.toDateAndTime(\n                    new Date(ticket.createdDate),\n                  ),\n                  lastUpdate: GlobalFunction.toDateAndTime(\n                    new Date(ticket.lastUpdate),\n                  ),\n                  channel: ticket.channel,\n                  transaction_no: ticket.transaction_no,\n                  pmaker_case_uid: ticket.pmaker_case_uid,\n                  app_uid: '',\n                  app_number: ticket.app_number ? ticket.app_number : 'N/A',\n                });\n              });\n\n              this.setState(\n                {\n                  loading: false,\n                  rows: tempTickets,\n                },\n                () => {\n                  this.getTicketStats();\n                  if (this.tableListRef.current) {\n                    this.tableListRef.current.resetPage();\n                  }\n                },\n              );\n\n              /*\n            Processmaker.get(\n              'cases/participated',\n              cases => {\n                tempTickets.map(ticket => {\n                  const matchedCase = cases.filter(\n                    caseItem => caseItem.app_uid === ticket.pmaker_case_uid,\n                  )[0];\n                  if (matchedCase) {\n                    ticket.app_uid = matchedCase.app_uid;\n                    ticket.app_number = GlobalFunction.generateTicketNumber(\n                      ticket.type,\n                      ticket.specificType,\n                      matchedCase.app_number,\n                    );\n                    this.tickets.push(ticket);\n                  }\n                });\n                this.tickets.sort(() => {\n                  return -1;\n                });\n                this.getTicketStats(this.tickets);\n                this.setState({ loading: false });\n              },\n              error => {\n                console.log(error);\n                this.setState({ loading: false });\n              },\n            );\n            */\n            } else {\n              this.setState({\n                loading: false,\n                modalProps: {\n                  isOpen: true,\n                  title: 'Loading failed',\n                  message:\n                    'An error occured while loading the list of tickets.',\n                },\n              });\n            }\n          })\n          .catch(() => {\n            this.setState({\n              loading: false,\n              modalProps: {\n                isOpen: true,\n                title: 'Loading failed',\n                message: 'An error occured while loading the list of tickets.',\n              },\n            });\n          });\n      },\n    );\n  };\n\n  onFilterChanged = (column, value) => {\n    clearTimeout(this.state.typingTimeoutId);\n    this.state.filters[column] = value;\n    this.setState({\n      filters: this.state.filters,\n      typingTimeoutId: setTimeout(() => {\n        this.loadTicketList();\n      }, 3000),\n    });\n  };\n\n  setSelectedColumns = cols => {\n    this.setState({\n      selectedColumns: cols,\n    });\n  };\n\n  getVisibleColumns = () => {\n    return filter(this.state.columns, column => {\n      return findIndex(this.state.selectedColumns, { name: column.name }) >= 0;\n    });\n  };\n\n  generateReport = () => {\n    if (isNil(this.props.memberId)) {\n      return;\n    }\n\n    this.setState(\n      {\n        loading: true,\n      },\n      () => {\n        const query = this.state.query;\n        const filters = map(this.state.filters, (value, column) => {\n          return {\n            columnName: column,\n            value: value,\n          };\n        });\n\n        API.generateMemberTicketsReport(this.props.memberId, query, filters)\n          .then(response => {\n            this.setState(\n              {\n                loading: false,\n              },\n              () => {\n                if (response !== undefined) {\n                  if (response.type === 'application/json') {\n                    this.setState({\n                      modalProps: {\n                        isOpen: true,\n                        title: 'Generate Report Error',\n                        message: 'Failed to generate list of tickets report.',\n                        next: null,\n                      },\n                    });\n                  } else {\n                    const filename = `MEMBER_TICKETS_${moment().format(\n                      'MMM-DD-YYYY',\n                    )}.csv`;\n                    const file = new File([response], filename, {\n                      type: 'text/csv;charset=utf-8',\n                    });\n                    saveAs(file);\n                  }\n                } else {\n                  this.setState({\n                    modalProps: {\n                      isOpen: true,\n                      title: 'Generate Report Error',\n                      message: 'Failed to generate list of tickets report.',\n                      next: null,\n                    },\n                  });\n                }\n              },\n            );\n          })\n          .catch(() => {\n            this.setState({\n              loading: false,\n            });\n          });\n      },\n    );\n  };\n\n  onSearchTextChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    e.preventDefault();\n\n    clearTimeout(this.state.typingTimeoutId);\n\n    const { value } = e.target;\n    this.setState({\n      query: value,\n      typingTimeoutId: setTimeout(() => {\n        this.loadTicketList();\n      }, 3000),\n    });\n  };\n\n  onStatusFilterClick = newStatus => {\n    if (this.state.status === newStatus) {\n      return;\n    }\n    this.setState({ status: newStatus });\n\n    this.tableListRef.current.resetPage();\n  };\n\n  componentWillMount = () => {\n    let cols = tableData.columns;\n    this.setState({\n      columns: cols,\n      selectedColumns: cols,\n      fixedColumns:\n        Object.keys(tableData).length > 0 ? tableData['fixedColumns'] : [],\n      formattedColumns:\n        Object.keys(tableData).length > 0 ? tableData['formattedColumns'] : [],\n      columnExtensions:\n        Object.keys(tableData).length > 0 ? tableData['columnExtensions'] : [],\n    });\n  };\n\n  componentDidMount = () => {\n    this.loadTicketList();\n  };\n\n  getFilteredTickets = (columns: any) => {\n    let filteredTickets = this.tickets;\n\n    columns.map(column => {\n      filteredTickets = filteredTickets\n        .filter(ticket =>\n          this.state.filters[column.name]\n            ? this.state.filters[column.name] === '' ||\n              (ticket[column.name] &&\n                ticket[column.name]\n                  .toString()\n                  .toLowerCase()\n                  .includes(this.state.filters[column.name].toLowerCase()))\n            : true,\n        )\n        .filter(\n          ticket =>\n            this.state.status === '' ||\n            ticket.status.toLowerCase() === this.state.status.toLowerCase(),\n        )\n        .filter(\n          ticket =>\n            this.state.query === '' ||\n            ticket['app_number']\n              .toLowerCase()\n              .includes(this.state.query.toLowerCase()),\n        );\n    });\n\n    if (this.tableListRef.current) {\n      this.tableListRef.current.resetPage();\n    }\n\n    return filteredTickets;\n  };\n\n  sortTickets(attrName: string, isAsc: boolean): void {\n    const rows = cloneDeep(this.state.rows);\n    rows.sort((a: any, b: any) =>\n      a[attrName] &&\n      b[attrName] &&\n      a[attrName].toString().toLowerCase() >\n        b[attrName].toString().toLowerCase()\n        ? isAsc\n          ? 1\n          : -1\n        : isAsc\n        ? -1\n        : 1,\n    );\n    this.setState({\n      rows: rows,\n    });\n  }\n\n  closeModal() {\n    const { modalProps } = this.state;\n    const { next } = modalProps;\n\n    this.setState(\n      {\n        modalProps: {\n          isOpen: false,\n          title: '',\n          message: '',\n          next: null,\n        },\n      },\n      () => {\n        if (!isNil(next)) {\n          next();\n        }\n      },\n    );\n  }\n\n  public render(): JSX.Element {\n    const { modalProps } = this.state;\n\n    return (\n      <div>\n        {this.state.loading ? <Loader /> : null}\n        <div style={{ position: 'absolute', right: '1rem', top: '1rem' }}>\n          <Fab color=\"primary\" style={{ backgroundColor: '#CCCCCC' }}>\n            <ExitToAppIcon onClick={this.onLogout} />\n          </Fab>\n        </div>\n        <div className={clsx('TicketListPage')}>\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"space-between\"\n            alignItems=\"baseline\"\n          >\n            <Grid item xs={12} className={clsx('header-label')}>\n              <Typography className={clsx('title')} color=\"textPrimary\">\n                Tickets\n              </Typography>\n            </Grid>\n          </Grid>\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"space-between\"\n            alignItems=\"center\"\n            spacing={1}\n            className={clsx('search')}\n          >\n            <Grid item sm={12} lg={7}>\n              <TextField\n                id=\"cc_search_tickets_tf\"\n                placeholder=\"Search ticket ID\"\n                className={clsx('search-field')}\n                margin=\"dense\"\n                variant=\"outlined\"\n                fullWidth\n                onChange={this.onSearchTextChange}\n                value={this.state.query}\n                inputProps={{ 'aria-label': 'bare' }}\n                InputProps={{\n                  startAdornment: (\n                    <FontAwesomeIcon\n                      icon={faSearch}\n                      className={clsx('input-adornment')}\n                    />\n                  ),\n                }}\n              />\n            </Grid>\n            <Grid\n              item\n              sm={12}\n              lg={5}\n              container\n              direction=\"row\"\n              justify=\"space-between\"\n              alignItems=\"center\"\n            >\n              <Grid\n                item\n                sm={4}\n                lg={4}\n                alignContent=\"flex-end\"\n                justify=\"flex-end\"\n              >\n                <Button fullWidth onClick={() => {}} disabled>\n                  <Typography\n                    className={clsx('link-button disabled')}\n                    align=\"right\"\n                  >\n                    <FontAwesomeIcon\n                      icon={faPlus}\n                      className={clsx('link-button-icon disabled')}\n                    />\n                    <span className={clsx('link-button-text')}>\n                      Create Ticket\n                    </span>\n                  </Typography>\n                </Button>\n              </Grid>\n              <Grid\n                item\n                sm={4}\n                lg={4}\n                alignContent=\"flex-end\"\n                justify=\"flex-end\"\n              >\n                <Button\n                  fullWidth\n                  onClick={() => {\n                    this.generateReport();\n                  }}\n                >\n                  <Typography className={clsx('link-button')} align=\"right\">\n                    <FontAwesomeIcon\n                      icon={faDownload}\n                      className={clsx('link-button-icon')}\n                    />\n                    <span className={clsx('link-button-text')}>\n                      Generate Report\n                    </span>\n                  </Typography>\n                </Button>\n              </Grid>\n              <Grid item sm={4} lg={4} alignContent=\"flex-end\">\n                <SelectColumnsPopover\n                  setSelectedColumns={this.setSelectedColumns}\n                  columns={this.state.columns}\n                  selectedColumns={this.state.selectedColumns}\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid container direction=\"row\" className={clsx('tickets-table')}>\n            <Grid item xs={12}>\n              <Paper className={clsx('tickets-table-container')}>\n                <Grid container xs={12}>\n                  <Grid item xs className={clsx('tickets-table-stats')}>\n                    <Typography\n                      align=\"center\"\n                      onClick={() => {\n                        this.onStatusFilterClick('');\n                      }}\n                    >\n                      <span\n                        className={\n                          this.state.status == ''\n                            ? clsx('tickets-all')\n                            : clsx('tickets-default')\n                        }\n                      >\n                        {this.state.ticketStats.all\n                          ? this.state.ticketStats.all\n                          : 0}\n                      </span>\n                      <span\n                        className={\n                          this.state.status == ''\n                            ? clsx('ticket-label-active')\n                            : clsx('ticket-label')\n                        }\n                      >\n                        ALL\n                      </span>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs className={clsx('tickets-table-stats')}>\n                    <Typography\n                      align=\"center\"\n                      onClick={() => {\n                        this.onStatusFilterClick('open');\n                      }}\n                    >\n                      <span\n                        className={\n                          this.state.status == 'open'\n                            ? clsx('tickets-open')\n                            : clsx('tickets-default')\n                        }\n                      >\n                        {this.state.ticketStats.open\n                          ? this.state.ticketStats.open\n                          : 0}\n                      </span>\n                      <span\n                        className={\n                          this.state.status == 'open'\n                            ? clsx('ticket-label-active')\n                            : clsx('ticket-label')\n                        }\n                      >\n                        OPEN\n                      </span>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs className={clsx('tickets-table-stats')}>\n                    <Typography\n                      align=\"center\"\n                      onClick={() => {\n                        this.onStatusFilterClick('pending');\n                      }}\n                    >\n                      <span\n                        className={\n                          this.state.status == 'pending'\n                            ? clsx('tickets-pending')\n                            : clsx('tickets-default')\n                        }\n                      >\n                        {this.state.ticketStats.pending\n                          ? this.state.ticketStats.pending\n                          : 0}\n                      </span>\n                      <span\n                        className={\n                          this.state.status == 'pending'\n                            ? clsx('ticket-label-active')\n                            : clsx('ticket-label')\n                        }\n                      >\n                        PENDING\n                      </span>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs className={clsx('tickets-table-stats')}>\n                    <Typography\n                      align=\"center\"\n                      onClick={() => {\n                        this.onStatusFilterClick('resolved');\n                      }}\n                    >\n                      <span\n                        className={\n                          this.state.status == 'resolved'\n                            ? clsx('tickets-resolved')\n                            : clsx('tickets-default')\n                        }\n                      >\n                        {this.state.ticketStats.resolved\n                          ? this.state.ticketStats.resolved\n                          : 0}\n                      </span>\n                      <span\n                        className={\n                          this.state.status == 'resolved'\n                            ? clsx('ticket-label-active')\n                            : clsx('ticket-label')\n                        }\n                      >\n                        RESOLVED\n                      </span>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs className={clsx('tickets-table-stats')}>\n                    <Typography\n                      align=\"center\"\n                      onClick={() => {\n                        this.onStatusFilterClick('closed');\n                      }}\n                    >\n                      <span\n                        className={\n                          this.state.status == 'closed'\n                            ? clsx('tickets-closed')\n                            : clsx('tickets-default')\n                        }\n                      >\n                        {this.state.ticketStats.closed\n                          ? this.state.ticketStats.closed\n                          : 0}\n                      </span>\n                      <span\n                        className={\n                          this.state.status == 'closed'\n                            ? clsx('ticket-label-active')\n                            : clsx('ticket-label')\n                        }\n                      >\n                        CLOSED\n                      </span>\n                    </Typography>\n                  </Grid>\n                </Grid>\n                <Grid item xs={12} style={{ overflow: 'auto' }}>\n                  <CustomTable\n                    ref={this.tableListRef}\n                    className=\"ticket-list-table\"\n                    canOverflow\n                    rows={this.state.rows}\n                    stickyHeader={true}\n                    renderHeader={() =>\n                      this.renderTableHeader(\n                        this.state.columns,\n                        this.state.fixedColumns,\n                      )\n                    }\n                    renderRow={(row: any, index: number) =>\n                      this.renderTableRow(\n                        row,\n                        index,\n                        this.state.columns,\n                        this.state.fixedColumns,\n                      )\n                    }\n                    rowsPerPageOptions={[5, 10, 15]}\n                  />\n                </Grid>\n              </Paper>\n            </Grid>\n          </Grid>\n        </div>\n        <ModalComponent\n          id=\"ticket-list-page-modal\"\n          isModalOpen={modalProps.isOpen}\n          title={modalProps.title}\n          message={modalProps.message}\n          onClose={this.closeModal}\n        />\n      </div>\n    );\n  }\n\n  renderTableHeader(columns: any, fixedColumns: any): JSX.Element {\n    let dockedColumnsCounter = 0;\n    return (\n      <>\n        {columns\n          .filter(column => {\n            return some(\n              this.state.selectedColumns,\n              selectedColumn => selectedColumn.name === column.name,\n            );\n          })\n          .map((column, index) => {\n            const matchedColumn = fixedColumns.filter(\n              col => col === column.name,\n            )[0];\n            let nextColumnIsFixed = true;\n            if (matchedColumn && columns[index + 1]) {\n              nextColumnIsFixed = fixedColumns.filter(\n                col => col === columns[index + 1].name,\n              )[0]\n                ? true\n                : false;\n            }\n            const style = {\n              left: matchedColumn ? dockedColumnsCounter * 125 : 0,\n              zIndex: matchedColumn ? 125 : 0,\n              minWidth: '125px',\n              maxWidth: '125px',\n              padding: '4px 8px',\n              borderRight: !nextColumnIsFixed ? '#9EA3AC 2px solid' : undefined,\n            };\n            if (matchedColumn) {\n              dockedColumnsCounter++;\n            }\n            switch (column.name) {\n              case 'urgency':\n                return (\n                  <TableCell style={style}>\n                    <span className=\"header-2\">{column.title}</span>\n                    <div style={{ float: 'right' }}>\n                      <IconButton\n                        icon={faSort}\n                        onClick={() => {\n                          this.sortTickets(column.name, true);\n                          this.setState({ loading: false });\n                        }}\n                      />\n                    </div>\n                    <FilterSelect\n                      onChange={e => {\n                        this.onFilterChanged(\n                          column.name,\n                          e.target.value ? e.target.value : '',\n                        );\n                      }}\n                      name={'urgency'}\n                      items={PriorityOptions}\n                      id={'urgency'}\n                      value={this.state.filters[column.name]}\n                    />\n                  </TableCell>\n                );\n              case 'status':\n                return (\n                  <TableCell style={style}>\n                    <span className=\"header-2\">{column.title}</span>\n                    <div style={{ float: 'right' }}>\n                      <IconButton\n                        icon={faSort}\n                        onClick={() => {\n                          this.sortTickets(column.name, true);\n                          this.setState({ loading: false });\n                        }}\n                      />\n                    </div>\n                    <FilterSelect\n                      onChange={e => {\n                        this.onFilterChanged(\n                          column.name,\n                          e.target.value ? e.target.value : '',\n                        );\n                      }}\n                      name={'urgency'}\n                      items={StatusOptions}\n                      id={'urgency'}\n                      value={this.state.filters[column.name]}\n                    />\n                  </TableCell>\n                );\n              case 'is_vip':\n                return (\n                  <TableCell style={style}>\n                    <span className=\"header-2\">{column.title}</span>\n                    <div style={{ float: 'right' }}>\n                      <IconButton\n                        icon={faSort}\n                        onClick={() => {\n                          this.sortTickets(column.name, true);\n                          this.setState({ loading: false });\n                        }}\n                      />\n                    </div>\n                    <FilterSelect\n                      onChange={e => {\n                        this.onFilterChanged(\n                          column.name,\n                          e.target.value ? e.target.value : '',\n                        );\n                      }}\n                      name={'urgency'}\n                      items={IsVipOptions}\n                      id={'urgency'}\n                      value={this.state.filters[column.name]}\n                    />\n                  </TableCell>\n                );\n              case 'dueDate':\n              case 'createdDate':\n              case 'lastUpdate':\n                return (\n                  <TableCell style={style}>\n                    <span className=\"header-2\">{column.title}</span>\n                    <div style={{ float: 'right' }}>\n                      <IconButton\n                        icon={faSort}\n                        onClick={() => {\n                          this.sortTickets(column.name, true);\n                          this.setState({ loading: false });\n                        }}\n                      />\n                    </div>\n                    <MuiPickersUtilsProvider utils={MomentUtils}>\n                      <KeyboardDatePicker\n                        id={'filter-' + column.name}\n                        style={{\n                          width: '100%',\n                        }}\n                        variant=\"dialog\"\n                        format=\"MM/DD/YYYY\"\n                        value={this.state.filters[column.name]}\n                        onChange={(date: MaterialUiPickersDate | null) => {\n                          if (date !== null) {\n                            const parsedDate = moment(date.toDate());\n                            if (parsedDate.isValid()) {\n                              const dateVal = parsedDate\n                                .startOf('day')\n                                .format('YYYY-MM-DD 00:00:00');\n                              this.onFilterChanged(column.name, dateVal);\n                            }\n                          } else {\n                            this.onFilterChanged(column.name, '');\n                          }\n                        }}\n                      />\n                    </MuiPickersUtilsProvider>\n                  </TableCell>\n                );\n\n              default:\n                return (\n                  <TableCell style={style}>\n                    <span className=\"header-2\">{column.title}</span>\n                    <div style={{ float: 'right' }}>\n                      <IconButton\n                        icon={faSort}\n                        onClick={() => {\n                          this.sortTickets(column.name, true);\n                          this.setState({ loading: false });\n                        }}\n                      />\n                    </div>\n                    <InputField\n                      value={this.state.filters[column.name]}\n                      onChange={(value: string) => {\n                        this.onFilterChanged(column.name, value);\n                      }}\n                    />\n                  </TableCell>\n                );\n            }\n          })}\n      </>\n    );\n  }\n\n  renderTableRow(\n    row: any,\n    index: number,\n    columns: any,\n    fixedColumns: any,\n  ): JSX.Element {\n    let dockedColumnsCounter = 0;\n    const priorityRowStyles = {\n      highlight0: '#FFF1F1',\n      highlight1: '#F7EAEC',\n      normal0: '#FFFFFF',\n      normal1: '#FAFCFE',\n    };\n    const backgroundColor =\n      row['urgency'] === 'High'\n        ? priorityRowStyles['highlight' + (index % 2)]\n        : priorityRowStyles['normal' + (index % 2)];\n    return (\n      <TableRow\n        style={{ backgroundColor: backgroundColor }}\n        onClick={() => {\n          // const route =\n          //   row.status === 'Resolved' ||\n          //   row.specificType === 'Outpatient Procedure' ||\n          //   row.specificType === 'Consultation'\n          //     ? 'resolve-ticket'\n          //     : 'update-ticket';\n          // window.location.href = `#/customer-care/${route}/${row.app_uid}/${row.app_number}/${row.ticket_no}`;\n        }}\n      >\n        {columns\n          .filter(column => {\n            for (var i = 0; i < this.state.selectedColumns.length; i++) {\n              if (this.state.selectedColumns[i].name === column.name) {\n                return true;\n              }\n            }\n            return false;\n          })\n          .map((column, index) => {\n            const matchedColumn = fixedColumns.filter(\n              col => col === column.name,\n            )[0];\n            let nextColumnIsFixed = true;\n            if (matchedColumn && columns[index + 1]) {\n              nextColumnIsFixed = fixedColumns.filter(\n                col => col === columns[index + 1].name,\n              )[0]\n                ? true\n                : false;\n            }\n            const style = {\n              left: matchedColumn ? dockedColumnsCounter * 125 : 0,\n              zIndex: matchedColumn ? 125 : 0,\n              position: matchedColumn\n                ? 'sticky'\n                : ('relative' as PositionProperty),\n              minWidth: '125px',\n              maxWidth: '125px',\n              padding: '4px 8px',\n              fontWeight: 400,\n              borderRight: !nextColumnIsFixed ? '#9EA3AC 2px solid' : undefined,\n            };\n            if (matchedColumn) {\n              dockedColumnsCounter++;\n            }\n            const urgencyColor = {\n              Low: 'rgb(65, 182, 127)',\n              Medium: 'rgb(248, 179, 68)',\n              High: 'rgb(250, 86, 86)',\n            };\n            const urgencyNumber = {\n              Low: 3,\n              Medium: 2,\n              High: 1,\n            };\n            return (\n              <TableCell key={index} style={style}>\n                {column.name === 'urgency' ? (\n                  <div style={{ width: '100%', textAlign: 'center' }}>\n                    <div\n                      className=\"number-item\"\n                      style={{\n                        display: 'inline-block',\n                        backgroundColor: urgencyColor[row[column.name]],\n                        color: '#FFFFFF',\n                        padding: '2px 4px',\n                        fontWeight: 400,\n                        borderRadius: 4,\n                      }}\n                    >\n                      {urgencyNumber[row[column.name]]}\n                    </div>\n                  </div>\n                ) : (\n                  row[column.name]\n                )}\n              </TableCell>\n            );\n          })}\n      </TableRow>\n    );\n  }\n}\n\nconst mapStateToProps = (state: Store) => state.ticketList;\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  Map: bindActionCreators(TicketListActions.Map, dispatch),\n});\n\nexport { mapStateToProps, mapDispatchToProps };\n"],"sourceRoot":""}