{"version":3,"sources":["Pages/Lookup/Components/Loader/index.tsx","Components/UI/TableComponent/ReactTable.tsx","Pages/AddRoles/ActionConsts.ts","Pages/AddRoles/RolesActions.ts","Pages/AddRoles/Components/Policies.tsx","Pages/AddRoles/AddRolesPage.tsx"],"names":["useStyles","makeStyles","root","position","width","height","zIndex","right","bottom","top","left","textAlign","backgroundColor","container","outline","alignItems","justifyContent","display","flexDirection","Loader","classes","className","size","defaultProps","statusOption","value","label","Select","items","restProps","variant","style","renderValue","selected","find","item","map","i","key","FilterCell","filter","onFilter","filteringEnabled","column","name","padding","utils","MomentUtils","format","inputVariant","invalidDateMessage","onChange","date","toISOString","paddingTop","e","target","id","labelWidth","placeholder","SortingIcon","direction","marginLeft","icon","faSortUp","faSortDown","SortLabel","onSort","children","hideSortIcon","onClick","textOverflow","overflow","faSort","groupIconContentCell","expanded","verticalAlign","faAngleUp","faAngleDown","color","ReactTable","props","rows","columns","disableSort","disableFilter","enableGrouping","groupColumnName","viewOnly","message","columnExtensions","sortingStateColumnExtensions","defaultSorting","onDeleteRow","enableSelection","enableSelectAll","onRowClick","totalCount","onPageChange","currentPage","pageSize","onSetPageSize","onCheckRow","onSelectGroup","loading","onSortingChange","enableIntegratedSorting","enableOpenGroupTotalChecked","React","selection","setSelection","pageSizes","sorting","setSorting","selectCell","row","onToggle","faMinusSquare","checkedIcon","faCheckSquare","checked","stopPropagation","onCurrentPageChange","onPageSizeChange","onSelectionChange","grouping","columnName","onFiltersChange","onFilterChange","messages","noData","cellComponent","faMinusCircle","showSortingControls","sortLabelComponent","highlightRow","selectByRowClick","showSelectAll","undefined","showSelectionColumn","contentComponent","isChecked","countChecked","countItems","data","iconComponent","groupNameChecked","ActionConsts","ResetReducer","SetReducer","RolesActions","payload","type","Policies","moduleName","rbacList","onChangeModuleName","roleId","onUpdateChange","onSortChange","onSearch","rbacState","inputtedData","isAddedModalRole","setIsAddedModalRole","moduleValue","setModuleValue","isModuleModalOpen","setIsModuleModalOpen","moduleLabel","setModuleLabel","isModalConfirmChangeModule","setIsModalConfirmChangeModule","newRbacList","setNewRbacList","setLoading","defaultFilters","setDefaultFilters","isModalDeleteSuccessOpen","setIsModalDeleteSuccessOpen","isModalCannotEditOpen","setIsModalCannotEditOpen","checkedList","setCheckedList","description","roleName","isProcessMaker","effectivityDate","Date","expiryDate","addData","setAddData","required","isError","minDate","errorFields","setErrorFields","moduleItems","handleUpdateCheck","_data","isValid","rbac","length","console","log","module","role_id","effectivity_date","moment","status","date_last_update","is_processmaker","isValidData","_errorFields","expiry_date","Grid","xs","spacing","InputLabel","inputLabel","htmlFor","Typography","Link","error","errorMessageContainer","errorMessage","errorMessageIcon","faExclamationCircle","Checkbox","inputProps","disabled","marginTop","marginBottom","maxDate","add","minDateMessage","clearable","ReactSearch","title","checklist","_id","push","list","handleOnCheckRow","limit","count","group","setTimeout","handleOnCheckGroup","ModalComponent","isModalOpen","onClose","buttons","justify","Button","button","margin","menuItems","Number","handleContinueRole","theme","mainContainer","main","headMain","gridContainer","paddingBottom","gridContainerNoPadding","sectionTitle","fontSize","fontWeight","subSectionTitle","editBtn","alignRight","sideBarContainer","borderRight","paddingRight","contentContainer","paddingLeft","sideBarLists","listStyle","sideBarLink","fieldGroupTitle","listItemTextRoot","flex","listItemTextPrimarySelected","cursor","listItemTextPrimaryNotSelected","dropzone","border","borderRadius","keyboardDatePicker","checkbox","radio","appBar","breakpoints","up","grow","flexGrow","minHeight","minWidth","buttonTitle","buttonSubTitle","menuList","menuLink","LinkActive","textDecoration","AddRolesPage","useState","activeItem","setActiveItem","isModalConfirmExitOpen","setIsModalConfirmExitOpen","isModalConfirmSaveOpen","setIsModalConfirmSaveOpen","isModalSaveSuccessOpen","setIsmodalSaveSuccessOpen","setModuleName","setRbacList","breadCrumbs","setBreadCrumbs","rbacCount","setRbacCount","setRoleId","policyData","setPolicyData","isRedirect","setIsRedirect","redirectPath","setRedirectPath","isSaveDisabled","setIsSaveDisabled","order","skip","setRbacState","typingTimeout","setTypingTimeout","location","state","from","handleGetRbacCount","link","handGetRbacList","getRbacCount","then","generateRoleId","catch","err","alert","sort","resParam","search","moduleNameNew","clearTimeout","_filter","_order","like","options","params","where","getRbacList","response","res","body","policy","activeSideBarItem","handleModalConfirmationClose","handleChangeModuleName","a","to","pathname","SubHeader","headingTitle","breadCrumbsArray","layoutType","SideMenu","activeItems","page","onNavigateSideMenu","handleUpdateChange","createRoleRbac","handleOnSave","mapStateToProps","roles","mapDispatchToProps","dispatch","Map","bindActionCreators"],"mappings":"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","file":"static/js/3.2c622aa8.chunk.js","sourcesContent":["import * as React from 'react';\nimport { CircularProgress } from '@material-ui/core/';\nimport { makeStyles } from '@material-ui/core/styles';\n\ninterface LoaderProps {\n}\n\nconst useStyles = makeStyles({\n\troot: {\n        position: 'fixed',\n        width: '100%',\n        height: '100%',\n        zIndex: 9999,\n        right: '0px',\n        bottom: '0px',\n        top: '0px',\n        left: '0px',\n        textAlign: \"center\",\n        backgroundColor: 'rgba(0, 0, 0, 0.5)'\n    },\n    container:{\n        height: '100%',\n        outline: 0,\n        alignItems: 'center',\n        justifyContent: 'center',\n        display: 'flex',\n        flexDirection: 'column'\n    }\n});\n\nexport const Loader: React.FC<LoaderProps> = (): JSX.Element => {\n    // const buttonclasses = ButtonStyle();\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            <div className={classes.container}>\n                <CircularProgress size={150}/>\n            </div>\n        </div>\n    )\n}\n\nLoader.defaultProps = {}","import * as React from 'react';\n// import { useState } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport {\n    FilteringState,\n    SortingState,\n    IntegratedSorting,\n    IntegratedGrouping,\n    GroupingState,\n    SelectionState,\n    // IntegratedPaging,\n    PagingState,\n    CustomPaging,\n} from '@devexpress/dx-react-grid';\nimport {\n    Grid,\n    Table,\n    //   Toolbar,\n    TableHeaderRow,\n    TableFilterRow,\n    TableGroupRow,\n    TableSelection,\n    PagingPanel,\n    // TableFixedColumns,\n} from '@devexpress/dx-react-grid-material-ui';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n    // faSearch,\n    faCheckSquare,\n    faMinusSquare,\n    faSort,\n    faSortUp,\n    faSortDown,\n    faMinusCircle,\n    faAngleDown,\n    faAngleUp,\n    // faPlus,\n    // faCheck, \n    // faTimes\n} from '@fortawesome/free-solid-svg-icons';\nimport * as MaterialUI from '@material-ui/core';\nimport { Loader } from 'Pages/Lookup/Components/Loader';\nimport './ReactTable.scss';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers'\nimport MomentUtils from '@date-io/moment'\n\n// import { ReactSearch } from '../SearchBar/ReactSearch';\n\nexport interface IReactTableProps {\n    rows: any,\n    columns: any,\n    disableSort?: boolean,\n    disableFilter?: boolean,\n    enableIntegratedSorting?: boolean,\n    enableGrouping?: boolean,\n    enableSelection?: boolean,\n    enableSelectAll?: boolean,\n    enableOpenGroupTotalChecked?: boolean,\n    groupColumnName?: string,\n    viewOnly?: boolean,\n    columnExtensions?: any[],\n    message?: string,\n    sortingStateColumnExtensions?: any[],\n    defaultSorting?: any[],\n    totalCount?: number,\n    currentPage?: number,\n    pageSize?: number,\n    groupNameChecked?: any,\n    loading?: boolean,\n    defaultFilters?: any,\n    onDeleteRow?: (row) => void,\n    onRowClick?: (row) => void,\n    onPageChange?: (page) => void,\n    onSetPageSize?: (size) => void,\n    onCheckRow?: (row) => void,\n    onSelectGroup?: (group) => void,\n    onFilterChange?: (filter) => void,\n    onSortingChange?: (sort) => void,\n\n}\n\nconst defaultProps: IReactTableProps = {\n    rows: [],\n    columns: [],\n    enableIntegratedSorting: false,\n    disableSort: false,\n    disableFilter: false,\n    enableGrouping: false,\n    enableSelection: false,\n    enableSelectAll: false,\n    enableOpenGroupTotalChecked: false,\n    groupColumnName: '',\n    viewOnly: true,\n    columnExtensions: [],\n    message: '',\n    sortingStateColumnExtensions: [],\n    defaultSorting: [],\n    totalCount: 0,\n    currentPage: 0,\n    pageSize: 0,\n    groupNameChecked: [],\n    loading: false,\n}\n\nconst statusOption = [\n    {\n        value: 'all',\n        label: 'All',\n    },\n    {\n        value: 'active',\n        label: 'Active'\n    },\n    {\n        value: 'deactivated',\n        label: 'Deactivated'\n    },\n    {\n        value: 'awaiting activation',\n        label: 'Awaiting activation'\n    }\n]\n\nconst Select = ({ items, ...restProps }: any) => {\n    return (\n        <MaterialUI.Select\n            variant='outlined'\n            style={{ width: '100%' }}\n            renderValue={(selected: any) => {\n                if (selected != null) {\n                    const value: any = items.find((item: any) => {\n                        return item.value === selected;\n                    });\n                    if (value) {\n                        return value.label;\n                    } else {\n                        return '——';\n                    }\n                }\n                return '——';\n            }}\n            {...restProps}\n        >\n            {items.map((item: any, i: number) => (\n                <MaterialUI.MenuItem key={i} value={item.value}>\n                    {item.label}\n                </MaterialUI.MenuItem>\n            ))}\n        </MaterialUI.Select>\n    );\n};\n\nconst FilterCell = ({ filter, onFilter, filteringEnabled, classes, column }: any) => {\n    if (filteringEnabled) {\n        if (column.name === 'action_delete') {\n            return (\n                <MaterialUI.TableCell style={{ padding: '0px 10px 8px 10px' }} classes={classes}>\n                </MaterialUI.TableCell>\n            )\n        } else if (column.name === 'last_login') {\n            return (\n                <MaterialUI.TableCell style={{ padding: '0px 10px 8px 10px' }} classes={classes}>\n                    <MuiPickersUtilsProvider utils={MomentUtils}>\n                        <KeyboardDatePicker\n                            variant=\"dialog\"\n                            format=\"MMMM DD, YYYY\"\n                            inputVariant=\"outlined\"\n                            value={filter ? filter.value : ''}\n                            invalidDateMessage=\"\"\n                            onChange={date => { onFilter(date ? { value: date.toISOString() } : null) }}\n                        />\n                    </MuiPickersUtilsProvider>\n                </MaterialUI.TableCell>\n            )\n        } else if (column.name === 'status') {\n            return (\n                <MaterialUI.TableCell classes={classes} style={{ paddingTop: '5px' }}>\n                    <Select\n                        onChange={e => onFilter(e.target.value ? { value: e.target.value } : null)}\n                        name={'status'}\n                        items={statusOption}\n                        id={'status'}\n                        value={filter ? filter.value : ''}\n                    />\n                </MaterialUI.TableCell>\n            )\n        } else {\n            return (\n                <MaterialUI.TableCell style={{ padding: '0px 10px 8px 10px' }} classes={classes}>\n                    <MaterialUI.OutlinedInput\n                        classes={classes}\n                        style={{ width: '100%' }}\n                        value={filter ? filter.value : ''}\n                        labelWidth={0}\n                        onChange={e => onFilter(e.target.value ? { value: e.target.value } : null)}\n                        placeholder=\"\"\n                    />\n                </MaterialUI.TableCell>\n            );\n        }\n    }\n    return null;\n}\n\nconst SortingIcon = ({ direction }: any) =>\n    direction === 'asc' ? (\n        <FontAwesomeIcon style={{ marginLeft: '10px' }} icon={faSortUp} />\n    ) : (\n            <FontAwesomeIcon style={{ marginLeft: '10px' }} icon={faSortDown} />\n        );\n\nconst SortLabel = ({ column, onSort, children, direction }: any) => {\n    if (column.name === 'action_delete') {\n        return null;\n    } else {\n        return (\n            <MaterialUI.TableSortLabel hideSortIcon={true} onClick={onSort} style={{ textOverflow: \"ellipsis\", overflow: \"hidden\" }}>\n                {children}\n                {direction ? (\n                    <SortingIcon direction={direction} />\n                ) : (\n                        <FontAwesomeIcon style={{ marginLeft: '10px' }} icon={faSort} />\n                    )}\n            </MaterialUI.TableSortLabel>\n        );\n    }\n};\n\n\nconst groupIconContentCell = ({ expanded }: any) => {\n    return (\n        <>\n            <div style={{ padding: '8.5px 12px', display: 'table-cell', verticalAlign: 'middle' }} >\n                <FontAwesomeIcon\n                    icon={expanded ? faAngleUp : faAngleDown}\n                    size={'2x'}\n                    color={\"rgba(0, 0, 0, 0.54)\"}\n                />\n            </div>\n        </>\n    )\n}\n\n\n\nexport const ReactTable: React.FC<IReactTableProps> = (props: IReactTableProps): JSX.Element => {\n    const {\n        rows,\n        columns,\n        disableSort,\n        disableFilter,\n        enableGrouping,\n        groupColumnName,\n        viewOnly,\n        message,\n        columnExtensions,\n        sortingStateColumnExtensions,\n        defaultSorting,\n        onDeleteRow,\n        enableSelection,\n        enableSelectAll,\n        onRowClick,\n        totalCount,\n        onPageChange,\n        currentPage,\n        pageSize,\n        onSetPageSize,\n        onCheckRow,\n        onSelectGroup,\n        // groupNameChecked,\n        loading,\n        onSortingChange,\n        enableIntegratedSorting,\n        enableOpenGroupTotalChecked\n    } = props;\n\n    const [selection, setSelection] = React.useState<any>([])\n    const [pageSizes] = React.useState([5, 10, 15]);\n    const [sorting, setSorting] = React.useState([])\n    // const [pageSize, setPageSize] = React.useState(10);\n    // console.log(onCheckRow, onSelectGroup)\n\n    const setSortingMethod = (e: any) => {\n        onSortingChange && onSortingChange(e)\n        setSorting(e);\n    }\n    const handleSelectionChange = (row: any[]) => {\n        if (onRowClick) {\n            if (!enableSelection) {\n                onRowClick(row[0]);\n            }\n        } else {\n            setSelection(row);\n        }\n    }\n\n    const selectCell = ({ row, onToggle }: any) => {\n        return (\n            <MaterialUI.TableCell>\n                <MaterialUI.Checkbox\n                    icon={<FontAwesomeIcon icon={faMinusSquare} />}\n                    checkedIcon={<FontAwesomeIcon icon={faCheckSquare} />}\n                    checked={row.checked}\n                    onClick={(e: any) => {\n                        e.stopPropagation();\n                        onToggle();\n                        onCheckRow && onCheckRow(row);\n                    }}\n                />\n            </MaterialUI.TableCell>\n        )\n    }\n\n\n    const groupContentCell = ({ row }: any) => {\n\n        let isChecked = false;\n        let countChecked = 0;\n        let countItems = 0;\n        rows.map(data => {\n            if (data.name === row.value) {\n                countItems++;\n                if (data.checked) {\n                    isChecked = true;\n                    countChecked++;\n                }\n            }\n        })\n\n        if (!viewOnly) {\n            return (\n                <>\n                    <div style={{ padding: '8.5px 15.5px', display: 'table-cell', verticalAlign: 'middle' }} >\n                        <MaterialUI.Checkbox\n                            icon={<FontAwesomeIcon icon={faMinusSquare} />}\n                            checkedIcon={<FontAwesomeIcon icon={faCheckSquare} />}\n                            checked={isChecked}\n                            onClick={e => {\n                                e.stopPropagation();\n                                onSelectGroup && onSelectGroup(row.value)\n                            }}\n                        />\n                    </div>\n                    <div style={{ padding: '8.5px 2px', display: 'table-cell', verticalAlign: 'middle' }} >\n                        <span>{row.value}</span>\n                    </div>\n                    <div style={{ padding: '8.5px 30px', display: 'table-cell', verticalAlign: 'middle' }} >\n                        <span>{countChecked}/{countItems}</span>\n                    </div>\n                </>\n            )\n        } else if (viewOnly && enableOpenGroupTotalChecked) {\n            return (\n                <>\n                    <div style={{ padding: '8.5px 2px', display: 'table-cell', verticalAlign: 'middle' }} >\n                        <span>{row.value}</span>\n                    </div>\n                    <div style={{ padding: '8.5px 30px', display: 'table-cell', verticalAlign: 'middle' }} >\n                        <span>{countChecked}/{countItems}</span>\n                    </div>\n                </>\n            )\n        } else {\n            return (\n                <div style={{ padding: '8.5px 2px', display: 'table-cell', verticalAlign: 'middle' }} >\n                    <span>{row.value}</span>\n                </div>\n            )\n        }\n\n    }\n\n    const tableCell = ({ value, row, column }: any) => {\n        if (column.name === 'action_delete') {\n            return (\n                <MaterialUI.TableCell style={{ padding: '0px 30px 8px 10px', textAlign: 'right' }}>\n\n                    <span\n                        onClick={() => {\n                            onDeleteRow && onDeleteRow(row)\n                        }}>\n\n                        <FontAwesomeIcon\n                            icon={faMinusCircle}\n                        />\n                    </span>\n\n                </MaterialUI.TableCell>\n            )\n        } else {\n            return (\n                <MaterialUI.TableCell>\n                    {value}\n                </MaterialUI.TableCell>\n            )\n        }\n    }\n\n\n    return (\n        <div style={{ padding: '10px 0' }}>\n            <Paper>\n                <Grid\n                    rows={rows}\n                    columns={columns}\n                >\n                    <PagingState\n                        currentPage={currentPage}\n                        onCurrentPageChange={onPageChange}\n                        pageSize={pageSize}\n                        onPageSizeChange={onSetPageSize}\n                    />\n                    <CustomPaging\n                        totalCount={totalCount}\n                    />\n                    {!disableSort && onSortingChange ? (\n                        <SortingState\n                            defaultSorting={defaultSorting}\n                            columnExtensions={sortingStateColumnExtensions}\n                            sorting={sorting}\n                            onSortingChange={setSortingMethod}\n                        />\n                    ) : !disableSort ? (\n                        <SortingState\n                            defaultSorting={[]}\n                        />\n                    ) : null}\n                    {!viewOnly ? <SelectionState\n                        selection={selection}\n                        onSelectionChange={handleSelectionChange}\n                    /> : null}\n                    {enableGrouping && groupColumnName ? <GroupingState grouping={[{ columnName: groupColumnName }]} /> : null}\n                    {!disableFilter ?\n                        <FilteringState\n                            onFiltersChange={props.onFilterChange}\n                        /> : null}\n                    {/* <IntegratedPaging /> */}\n                    {enableIntegratedSorting ? <IntegratedSorting /> : null}\n                    {enableGrouping ? <IntegratedGrouping /> : null}\n                    <Table\n                        columnExtensions={columnExtensions}\n                        messages={{ noData: message }}\n                        cellComponent={tableCell}\n                    />\n                    <TableHeaderRow\n                        showSortingControls={!disableSort}\n                        sortLabelComponent={SortLabel}\n                    />\n                    {/* <TableFixedColumns /> */}\n                    <PagingPanel\n                        pageSizes={enableGrouping ? [30, 40, 50] : pageSizes}\n                    />\n                    {!viewOnly ?\n                        <TableSelection\n                            highlightRow\n                            selectByRowClick\n                            showSelectAll={enableSelectAll ? true : undefined}\n                            cellComponent={!loading ? selectCell : selectCell}\n                            showSelectionColumn={enableSelection}\n                        /> : null}\n\n                    {enableGrouping ?\n                        <TableGroupRow\n                            contentComponent={groupContentCell}\n                            iconComponent={groupIconContentCell}\n                        ></TableGroupRow> : null}\n                    {!disableFilter ? <TableFilterRow cellComponent={FilterCell} /> : null}\n                </Grid>\n                {\n                    loading &&\n                    <Loader />\n                }\n            </Paper>\n        </div>\n    )\n}\n\nReactTable.defaultProps = defaultProps;","export const ActionConsts = {\n\tRoles: {\n\t\tResetReducer: 'Roles_ResetReducer',\n\t\tSetReducer: 'Roles_SetReducer',\n\t},\n};\n","//#region Global Imports\n// import { Dispatch } from 'redux';\n//#endregion Global Imports\n\n//#region Local Imports\nimport { ActionConsts } from './ActionConsts';\n// import { PlanetaryService } from 'Components/Services';\n//#endregion Local Imports\n\n//#region Interface Imports\n//#endregion Interface Imports\n\nexport const RolesActions = {\n\tMap: (payload: []) => ({\n\t\tpayload,\n\t\ttype: ActionConsts.Roles.SetReducer,\n\t}),\n\n\tReset: () => ({\n\t\ttype: ActionConsts.Roles.ResetReducer,\n\t}),\n\n\t// GetApod: (payload) => async (dispatch: Dispatch) => {\n\n\t// },\n};\n","import * as React from 'react';\nimport {\n    Grid,\n    // FormControl, \n    InputLabel,\n    Typography,\n    Link,\n    Button,\n    Checkbox\n    // TextareaAutosize,\n} from '@material-ui/core';\nimport { ReactTable } from 'Components/UI/TableComponent/ReactTable';\nimport { ReactSearch } from 'Components/UI/SearchBar/ReactSearch';\nimport { BasicTextField, BasicSelect } from 'Components/UI';\nimport { KeyboardDatePicker } from '@material-ui/pickers';\nimport { ModalComponent } from 'Components/UI/ModalComponent/ModalComponent';\nimport moment from 'moment';\nimport { RolesRbacData } from '../IRolesPage';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faExclamationCircle } from '@fortawesome/free-solid-svg-icons';\nexport interface IPoliciesProps {\n    classes: any,\n    moduleName?: string,\n    rbacList: any,\n    rbacState: any,\n    roleId: string,\n    onPageChange: (page) => void,\n    onFilterChange: (filter) => void,\n    onSortChange: (sort) => void,\n    onPageSizeChange: (size) => void,\n    onSearch: (search) => void,\n    onChangeModuleName: (name) => void,\n    onUpdateChange: (data, isValid) => void,\n    onNavigateSideMenu?: (name) => void,\n    inputtedData: any\n}\n\nexport const Policies: React.FC<IPoliciesProps> = (props: IPoliciesProps): JSX.Element => {\n    const {\n        classes,\n        moduleName,\n        rbacList,\n        onChangeModuleName,\n        roleId,\n        onUpdateChange,\n        onPageChange,\n        onFilterChange,\n        onSortChange,\n        onPageSizeChange,\n        onSearch,\n        rbacState,\n        inputtedData\n    } = props;\n\n    const [isAddedModalRole, setIsAddedModalRole] = React.useState(false)\n    const [moduleValue, setModuleValue] = React.useState(0);\n    const [isModuleModalOpen, setIsModuleModalOpen] = React.useState(false);\n    const [moduleLabel, setModuleLabel] = React.useState<any>(null);\n    const [isModalConfirmChangeModule, setIsModalConfirmChangeModule] = React.useState(false)\n    const [newRbacList, setNewRbacList] = React.useState([]);\n    const [loading, setLoading] = React.useState(false);\n    const [defaultFilters, setDefaultFilters] = React.useState([]);\n    const [isModalDeleteSuccessOpen, setIsModalDeleteSuccessOpen] = React.useState(false)\n    const [isModalCannotEditOpen, setIsModalCannotEditOpen] = React.useState(false)\n    const [checkedList, setCheckedList] = React.useState<any[]>(rbacList);\n\n    const [addData, setAddData] = React.useState<any>({\n        description: '',\n        roleName: '',\n        isProcessMaker: false,\n        effectivityDate: new Date(),\n        expiryDate: '',\n    })\n\n    const [errorFields, setErrorFields] = React.useState<any>({\n        description: {\n            required: 'Description is a required field.',\n            isError: false,\n        },\n        roleName: {\n            required: 'Role name is a required field.',\n            isError: false\n        },\n        effectivityDate: {\n            required: 'Effectivity date is a required field.',\n            minDate: 'Effectivity date cannot be higher or equal than expiry date.',\n            isError: false,\n        },\n        expiryDate: {\n            minDate: 'Expiry date cannot be lower than effectivity date.',\n            isError: false,\n        }\n    })\n\n    const moduleItems = [\n        {\n            name: 'User Management',\n            value: '0'\n        },\n        {\n            name: 'Membership',\n            value: '1'\n        },\n        {\n            name: 'Underwriting',\n            value: '2'\n        },\n        {\n            name: 'Customer Care',\n            value: '3'\n        },\n        {\n            name: 'Claims',\n            value: '4',\n        },\n        {\n            name: 'Franchising',\n            value: '5',\n        },\n        {\n            name: 'Billing and Collections',\n            value: '6',\n        },\n        {\n            name: 'Partner Network',\n            value: '7',\n        }\n    ]\n\n    const columns: any = [\n        {\n            name: 'operation',\n            title: 'Object and Operations',\n        },\n        {\n            name: 'policy',\n            title: 'Policies',\n        },\n        {\n            name: 'policy_id',\n            title: 'Policy ID',\n        },\n        {\n            name: 'name',\n            title: 'Name'\n        }\n    ]\n\n    const handleCannotEditRoleModalClose = () => {\n        setIsModalCannotEditOpen(false)\n    }\n\n    const handleDeleteSuccessRoleModalClose = () => {\n        setIsModalDeleteSuccessOpen(false)\n    }\n\n    const handleRemoveRoleModalClose = () => {\n\n    }\n\n    const handleContinueRole = () => {\n        let moduleName = moduleItems[Number(moduleValue)].name;\n        setIsModalConfirmChangeModule(false);\n        setModuleLabel(moduleName);\n        onChangeModuleName(moduleName);\n    }\n\n    const handleOnCheckRow = (row) => {\n        setLoading(true);\n\n        let rbac = rbacList;\n        let checklist = checkedList;\n\n        if (newRbacList.length === 0) {\n            setNewRbacList(rbacList);\n        } else {\n            rbac = newRbacList;\n        }\n        if (rbac.length > 0) {\n            rbac.map((data: any) => {\n                if (data._id === row._id) {\n\n                    if (data.checked) {\n                        checklist.push(data);\n                    } else {\n                        checklist.filter(list => {\n                            return row._id !== list._id\n                        })\n                    }\n\n                    data['checked'] = !data['checked'];\n                }\n            })\n\n            setCheckedList(checklist)\n            setNewRbacList(rbac);\n        }\n\n        isValidData(addData, errorFields)\n        setLoading(false)\n    }\n\n    const handleOnCheckGroup = (group) => {\n        setLoading(true);\n        let rbac = rbacList;\n        let countChecked = 0;\n        let checklist = checkedList;\n\n        if (newRbacList.length === 0) {\n            setNewRbacList(rbacList)\n        }\n\n        if (rbac.length > 0) {\n            rbac.map((data: any) => {\n                if (data.name == group && data.checked === true) {\n                    countChecked++;\n                }\n            })\n        }\n        if (countChecked > 0) {\n            rbac.map((data: any) => {\n                if (data.name == group) {\n                    data['checked'] = false;\n                }\n            })\n        } else {\n            rbac.map((data: any) => {\n                if (data.name == group) {\n                    data['checked'] = true;\n                    checklist.push(data)\n                }\n            })\n        }\n\n        setCheckedList(checklist)\n        setNewRbacList(rbac);\n        setTimeout(() => {\n            setLoading(false);\n            isValidData(addData, errorFields)\n        }, 500)\n    }\n\n    const handleUpdateCheck = (_data: any, isValid: boolean) => {\n        var rbac: any[] = [];\n        const _rbacList = checkedList.length > 0 ? checkedList : rbacList;\n\n        rbac = _rbacList.filter((data: any) => {\n            return data.checked;\n        })\n        console.log(rbac)\n\n        var data: RolesRbacData = {\n            module: moduleLabel !== null ? moduleLabel : moduleName,\n            name: _data.roleName,\n            role_id: roleId,\n            effectivity_date: moment(_data.effectivityDate !== '' ? _data.effectivityDate : new Date()).toISOString(),\n            description: _data.description,\n            status: 'active',\n            date_last_update: moment().toISOString(),\n            is_processmaker: _data.isProcessMaker,\n            rbac: rbac,\n        }\n\n        if (_data.expiryDate !== '') {\n            data['expiry_date'] = moment(_data.expiryDate).toISOString();\n        }\n\n        console.log(rbac.length > 0, isValid, 'rbac');\n\n        if (isValid && rbac.length > 0) {\n            onUpdateChange(data, true);\n        } else {\n            onUpdateChange(data, false);\n        }\n    }\n\n    const isValidData = (data: any, _errorFields: any) => {\n        let isValid = false;\n        setErrorFields(_errorFields);\n        for (var key in _errorFields) {\n            if (_errorFields[key].isError !== true) {\n                isValid = true\n            } else {\n                handleUpdateCheck(data, false)\n                return false\n            }\n        }\n\n        for (var key in data) {\n            console.log(data[key])\n            if (data[key] === '' && key !== 'isProcessMaker' && key !== 'expiryDate') {\n                handleUpdateCheck(data, false)\n                return false\n            } else {\n                isValid = true\n            }\n        }\n        handleUpdateCheck(data, true)\n        return isValid;\n    }\n\n    const handleOnFilterChange = (filter) => {\n        setDefaultFilters(filter);\n        onFilterChange(filter)\n    }\n\n    console.log(`added expiry date = ${addData.expiryDate}`)\n    console.log(`inputted expiry date = ${inputtedData.expiry_date}`)\n\n\n    return (\n        <>\n            <Grid container xs={12} spacing={4}>\n                <Grid item xs={4}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">MODULE</InputLabel>\n                    <Typography><b>{moduleLabel !== null ? moduleLabel : moduleName}</b></Typography>\n                    <Link onClick={() => { setIsModuleModalOpen(true) }}>Change Module</Link>\n                </Grid>\n                <Grid item xs={4}>\n                    <InputLabel className={classes.inputLabel}>ROLE ID</InputLabel>\n                    <Typography><b>{roleId}</b></Typography>\n                </Grid>\n                <Grid item xs={4}>\n                    <InputLabel className={classes.inputLabel}>DESCRIPTION *</InputLabel>\n                    <BasicTextField\n                        value={addData.description !== '' ? addData.description : inputtedData.description}\n                        error={errorFields.description.isError}\n                        onChange={(e: any) => {\n                            setAddData({\n                                ...addData,\n                                description: e.target.value\n                            })\n                            if (e.target.value === '' || e.target.value === null) {\n                                isValidData({\n                                    ...addData,\n                                    description: e.target.value\n                                }, {\n                                    ...errorFields,\n                                    description: {\n                                        required: errorFields.description.required,\n                                        isError: true\n                                    }\n                                })\n                            } else {\n                                isValidData({\n                                    ...addData,\n                                    description: e.target.value\n                                }, {\n                                    ...errorFields,\n                                    description: {\n                                        required: errorFields.description.required,\n                                        isError: false\n                                    }\n                                })\n                            }\n\n                        }}\n                    />\n                    {\n                        errorFields.description.isError ?\n                            <div className={classes.errorMessageContainer}>\n                                <span className={classes.errorMessage}>{errorFields.description.required}</span>\n                                <FontAwesomeIcon\n                                    className={classes.errorMessageIcon}\n                                    icon={faExclamationCircle}\n                                />\n                            </div>\n                            : null\n                    }\n                </Grid>\n                <Grid item xs={6}>\n                    <InputLabel className={classes.inputLabel}>ROLE NAME *</InputLabel>\n                    <BasicTextField\n                        value={addData.roleName ? addData.roleName : inputtedData.name}\n                        error={errorFields.roleName.isError}\n                        onChange={(e: any) => {\n                            setAddData({\n                                ...addData,\n                                roleName: e.target.value\n                            })\n                            if (e.target.value === '' || e.target.value === null) {\n                                isValidData({\n                                    ...addData,\n                                    roleName: e.target.value\n                                }, {\n                                    ...errorFields,\n                                    roleName: {\n                                        required: errorFields.roleName.required,\n                                        isError: true\n                                    }\n                                })\n                            } else {\n                                isValidData({\n                                    ...addData,\n                                    roleName: e.target.value\n                                }, {\n                                    ...errorFields,\n                                    roleName: {\n                                        required: errorFields.roleName.required,\n                                        isError: false\n                                    }\n                                })\n                            }\n\n                        }}\n                    />\n                    {\n                        errorFields.roleName.isError ?\n                            <div className={classes.errorMessageContainer}>\n                                <span className={classes.errorMessage}>{errorFields.roleName.required}</span>\n                                <FontAwesomeIcon\n                                    className={classes.errorMessageIcon}\n                                    icon={faExclamationCircle}\n                                />\n                            </div>\n                            : null\n                    }\n                </Grid>\n                <Grid item xs={6}>\n                    <InputLabel className={classes.inputLabel}>IS A PROCESSMAKER PROCESS MAKER ROLE</InputLabel>\n                    <Checkbox\n                        checked={addData.isProcessMaker ? addData.isProcessMaker : inputtedData.is_processmaker}\n                        onChange={(e: any) => {\n                            setAddData({\n                                ...addData,\n                                isProcessMaker: e.target.checked\n                            })\n                            isValidData({\n                                ...addData,\n                                isProcessMaker: e.target.checked\n                            }, errorFields)\n                        }}\n                    />\n                </Grid>\n                <Grid item xs={6}>\n                    <InputLabel className={classes.inputLabel}>EFFECTIVITY DATE *</InputLabel>\n                    <KeyboardDatePicker\n                        error={errorFields.effectivityDate.isError}\n                        value={addData.effectivityDate !== '' ? addData.effectivityDate : new Date()}\n                        format={'MMMM DD, YYYY'}\n                        variant='dialog'\n                        inputProps={{\n                            disabled: true\n                        }}\n                        invalidDateMessage=\" \"\n                        style={{\n                            width: \"100%\",\n                            marginTop: 10,\n                            marginBottom: 5\n                        }}\n                        onChange={(e: any) => {\n                            setAddData({\n                                ...addData,\n                                effectivityDate: e\n                            })\n                            if ((e === null || '') || !moment(e).isValid()) {\n                                setErrorFields({\n                                    ...errorFields,\n                                    effectivityDate: {\n                                        required: errorFields.effectivityDate.required,\n                                        isError: true,\n                                    }\n                                })\n                            } else if (moment(e) >= moment(addData.expiryDate)) {\n                                isValidData({\n                                    ...addData,\n                                    effectivityDate: e\n                                }, {\n                                    ...errorFields,\n                                    effectivityDate: {\n                                        minDate: errorFields.effectivityDate.minDate,\n                                        isError: true,\n                                    }\n                                })\n                            } else {\n                                isValidData({\n                                    ...addData,\n                                    effectivityDate: e\n                                }, {\n                                    ...errorFields,\n                                    effectivityDate: {\n                                        minDate: errorFields.effectivityDate.minDate,\n                                        required: errorFields.effectivityDate.required,\n                                        isError: false,\n                                    }\n                                })\n                            }\n\n                        }}\n                        inputVariant={'outlined'}\n                        maxDate={moment(addData.expiryDate)}\n                    />\n                    {\n                        errorFields.effectivityDate.isError ?\n                            <div className={classes.errorMessageContainer}>\n                                <span className={classes.errorMessage}>{errorFields.effectivityDate.required ? errorFields.effectivityDate.required : errorFields.effectivityDate.minDate}</span>\n                                <FontAwesomeIcon\n                                    className={classes.errorMessageIcon}\n                                    icon={faExclamationCircle}\n                                />\n                            </div>\n                            : null\n                    }\n                </Grid>\n                <Grid item xs={6}>\n                    <InputLabel className={classes.inputLabel}>EXPIRY DATE (If applicable)</InputLabel>\n                    <KeyboardDatePicker\n                        minDate={moment(addData.effectivityDate).add(1, 'days')}\n                        minDateMessage={\"\"}\n                        value={(addData.expiryDate && addData.expiryDate !== \"\") ? addData.expiryDate\n                            : (inputtedData.expiry_date && inputtedData.expiry_date !== null) ? inputtedData.expiry_date\n                                : (addData.expiryDate !== \"\" && inputtedData.expiry_date !== \"\") ? inputtedData.expiry_date\n                                    : null}\n\n                        style={{ width: \"100%\", marginTop: 10 }}\n                        format={'MMMM DD, YYYY'}\n                        invalidDateMessage=\"\"\n                        variant='dialog'\n                        onChange={(e: any) => {\n                            setAddData({\n                                ...addData,\n                                expiryDate: e\n                            })\n                            if (moment(addData.effectivityDate) > moment(e)) {\n                                isValidData({\n                                    ...addData,\n                                    expiryDate: e\n                                }, {\n                                    expiryDate: {\n                                        minDate: errorFields.expiryDate.minDate,\n                                        isError: true\n                                    }\n                                })\n                            } else {\n                                isValidData({\n                                    ...addData,\n                                    expiryDate: e\n                                }, {\n                                    ...errorFields,\n                                    expiryDate: {\n                                        minDate: errorFields.expiryDate.minDate,\n                                        isError: false,\n                                    }\n                                })\n                            }\n                        }}\n                        inputVariant={'outlined'}\n                        inputProps={{\n                            disabled: true\n                        }}\n                        clearable\n                    />\n                    {\n                        errorFields.expiryDate.isError ?\n                            <div className={classes.errorMessageContainer}>\n                                <span className={classes.errorMessage}>{errorFields.expiryDate.minDate}</span>\n                                <FontAwesomeIcon\n                                    className={classes.errorMessageIcon}\n                                    icon={faExclamationCircle}\n                                />\n                            </div>\n                            : null\n                    }\n                </Grid>\n                <Grid item xs={12}>\n\n                    <ReactSearch\n                        onSearch={onSearch}\n                        onChange={onSearch}\n                        placeholder={'Search policies'}\n                    />\n                    {\n                        <ReactTable\n                            rows={rbacList}\n                            columns={columns}\n                            enableGrouping={true}\n                            groupColumnName={'name'}\n                            viewOnly={false}\n                            enableOpenGroupTotalChecked={false}\n                            message={'There are no policies to show yet.'}\n                            enableSelection={true}\n                            loading={loading}\n                            onCheckRow={(row) => {\n                                handleOnCheckRow(row)\n                            }}\n                            currentPage={rbacState.currentPage}\n                            pageSize={rbacState.limit}\n                            defaultFilters={defaultFilters}\n                            onFilterChange={handleOnFilterChange}\n                            onSortingChange={onSortChange}\n                            onSetPageSize={onPageSizeChange}\n                            onPageChange={onPageChange}\n                            totalCount={rbacState.count ? rbacState.count : 0}\n                            onSelectGroup={(group) => {\n                                handleOnCheckGroup(group)\n                            }}\n                        />\n                    }\n                </Grid>\n            </Grid>\n            <ModalComponent\n                isModalOpen={isAddedModalRole}\n                onClose={handleRemoveRoleModalClose}\n                message={'New Role has been added successfully.'}\n                title={'Added New Role'}\n                buttons={\n                    <Grid container justify=\"center\" alignItems=\"center\">\n                        <Grid item xs={6}>\n                            <Button onClick={() => { setIsAddedModalRole(false) }} className={classes.button} variant={'contained'} color={'primary'}>Okay</Button>\n                        </Grid>\n                    </Grid>\n                }\n            />\n            <ModalComponent\n                isModalOpen={isModuleModalOpen}\n                onClose={() => {\n                    setIsModuleModalOpen(false)\n                }}\n                message={'Select a module for the role you will create:'}\n                title={'Choose a Module'}\n                buttons={\n                    <Grid container justify=\"center\" alignItems=\"center\" style={{ textAlign: 'center' }}>\n                        <Grid item xs={6}>\n                            <Button\n                                onClick={() => {\n                                    setIsModuleModalOpen(false)\n                                }}\n                                variant={'outlined'}\n                                color={'secondary'}\n                                className={classes.button}\n                            >Cancel</Button>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Button variant={'contained'} color={'primary'}\n                                className={classes.button}\n                                onClick={() => {\n                                    setIsModalConfirmChangeModule(true)\n                                    setIsModuleModalOpen(false)\n                                }}>Continue</Button>\n                        </Grid>\n                    </Grid>\n                }\n            >\n                <div style={{ width: '90%', margin: 'auto' }}>\n                    <BasicSelect\n                        menuItems={moduleItems}\n                        width={'100%'}\n                        value={moduleValue}\n                        onChange={(e: any) => {\n                            setModuleValue(e.target.value)\n                        }}\n                    />\n                </div>\n            </ModalComponent>\n            <ModalComponent\n                isModalOpen={isModalConfirmChangeModule}\n                onClose={() => {\n                    setIsModalConfirmChangeModule(false);\n                }}\n                message={'All progress made will be lost. Continue to change the module?'}\n                title={'Confirm Change Module'}\n                buttons={\n                    <Grid container justify=\"center\" alignItems=\"center\">\n                        <Grid item xs={6}>\n                            <Button onClick={() => { setIsModalConfirmChangeModule(false) }} className={classes.button} variant={'outlined'} color={'secondary'}>Cancel</Button>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Button className={classes.button} variant={'contained'} color={'primary'} onClick={() => handleContinueRole()}>Continue</Button>\n                        </Grid>\n                    </Grid>\n                }\n            />\n\n            <ModalComponent\n                isModalOpen={isModalDeleteSuccessOpen}\n                onClose={handleDeleteSuccessRoleModalClose}\n                message={'New role has been deleted.'}\n                title={'Delete Success'}\n                buttons={\n                    <Grid container justify=\"center\" alignItems=\"center\">\n                        <Grid item >\n                            <Button\n                                onClick={() => {\n                                    setIsModalDeleteSuccessOpen(false)\n                                }}\n                                className={classes.button}\n                                variant={'contained'}\n                                color={'primary'}>\n                                Okay\n                            </Button>\n                        </Grid>\n                    </Grid>\n                }\n            />\n\n\n            <ModalComponent\n                isModalOpen={isModalCannotEditOpen}\n                onClose={handleCannotEditRoleModalClose}\n                message={'You do not have an assigned role to your account to perform this action.'}\n                title={'Cannot Edit Role'}\n                buttons={\n                    <Grid container justify=\"center\" alignItems=\"center\">\n                        <Grid item>\n                            <Button\n                                onClick={() => {\n                                    setIsModalCannotEditOpen(false)\n                                }}\n                                className={classes.button}\n                                variant={'contained'}\n                                color={'primary'}>\n                                Okay\n                            </Button>\n                        </Grid>\n                    </Grid>\n                }\n            />\n        </>\n    )\n}","//#region Global Imports\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { bindActionCreators, Dispatch } from 'redux';\n// import NEOLink from 'next/link';\n//#endregion Global Imports\n\n//#region Interface Imports\n// import { Heading } from 'Components/UI/Heading';\nimport { Store } from 'Components/Stores/IStore';\nimport { RolesActions } from './RolesActions';\nimport { IRolesPage } from './IRolesPage';\nimport { Grid, Button } from '@material-ui/core';\n// import Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { LoadingIndicator, FloatingFooter } from 'Components/UI';\nimport { Policies } from './Components/Policies';\nimport { SubHeader } from 'Components/UI/SubHeader';\nimport { SideMenu } from 'Components/UI/SideMenu';\nimport { ModalComponent } from 'Components/UI/ModalComponent/ModalComponent';\nimport { getRbacList, getRbacCount, createRoleRbac } from 'Pages/API/Calls/Roles';\nimport { Redirect } from 'react-router-dom';\n\n// import { LoadingIndicator } from 'Components/UI';\n//#endregion Interface Imports\n\nconst useStyles = makeStyles(theme => ({\n\tmainContainer: {\n\t\tpadding: '32px 24px 25px'\n\t},\n\tmain: {\n\t\tbackgroundColor: '#F5F7FB',\n\t\tpadding: '32px 24px',\n\t\tposition: 'relative'\n\t},\n\theadMain: {\n\t\t// backgroundColor: '#F5F7FB',\n\t},\n\tgridContainer: {\n\t\tpadding: theme.spacing(1),\n\t\tpaddingBottom: '75px'\n\t},\n\tgridContainerNoPadding: {\n\t\tpadding: theme.spacing(1),\n\t},\n\tsectionTitle: {\n\t\tfontSize: 24,\n\t\tfontWeight: 700,\n\t\tcolor: '#272e4c',\n\t},\n\tsubSectionTitle: {\n\t\tfontSize: 14,\n\t\tfontWeight: 400,\n\t\tcolor: '#272e4c',\n\t},\n\teditBtn: {\n\t\twidth: '135px',\n\t\tfontSize: '14px',\n\t\tcolor: '#fff',\n\t},\n\talignRight: {\n\t\ttextAlign: 'right',\n\t},\n\tsideBarContainer: {\n\t\tborderRight: \"1px solid #ccc\",\n\t\tpaddingRight: \"25px\",\n\t},\n\tcontentContainer: {\n\t\tpaddingLeft: \"25px\",\n\t},\n\tsideBarLists: {\n\t\tpadding: 0,\n\t\tmargin: 0,\n\t\tlistStyle: 'none'\n\t},\n\tsideBarLink: {\n\t\tcolor: \"#272e4c\",\n\t\tmargin: \"0 0 10px\",\n\t\tdisplay: \"block\"\n\t},\n\tfieldGroupTitle: {\n\t\tfontSize: 13,\n\t\tfontWeight: 700,\n\t\tcolor: '#272e4c',\n\t},\n\tlistItemTextRoot: {\n\t\tflex: 'none',\n\t},\n\tlistItemTextPrimarySelected: {\n\t\tfontSize: 14,\n\t\tfontWeight: 700,\n\t\tcolor: 'rgba(39, 46, 76, 1)',\n\t\tcursor: 'pointer',\n\t},\n\tlistItemTextPrimaryNotSelected: {\n\t\tfontSize: 14,\n\t\tfontWeight: 700,\n\t\tcolor: 'rgba(39, 46, 76, 0.3)',\n\t\tcursor: 'pointer',\n\t},\n\tdropzone: {\n\t\twidth: '460px',\n\t\theight: '88px',\n\t\tmarginTop: '10px',\n\t\tmarginBottom: '20px',\n\t\tborder: '2px dashed rgba(30, 32, 113, 0.3)',\n\t\tborderRadius: '5px',\n\t\tbackgroundColor: '#e6e8ee',\n\t\tcolor: '#7b8094',\n\t\tdisplay: 'flex',\n\t\tjustifyContent: 'center',\n\t\talignItems: 'center',\n\t\tflexDirection: 'column',\n\t},\n\tinputLabel: {\n\t\tcolor: '#272e4c',\n\t\tfontSize: '12px',\n\t\tmarginBottom: '5px'\n\t},\n\tkeyboardDatePicker: {\n\t\tmarginTop: '10px',\n\t\tmarginBottom: '20px',\n\t\twidth: '212px',\n\t},\n\tcheckbox: {\n\t\t'&.Mui-checked': {\n\t\t\tcolor: '#1e2071',\n\t\t},\n\t},\n\tradio: {\n\t\t'&.Mui-checked': {\n\t\t\tcolor: '#1e2071',\n\t\t},\n\t},\n\tappBar: {\n\t\ttop: 'auto',\n\t\tbottom: 0,\n\t\tborder: '1px solid #707070',\n\t\tbackgroundColor: 'rgba(54, 54, 54, 0.64)',\n\t\t[theme.breakpoints.up('sm')]: {\n\t\t\twidth: 'calc(100% - 72px)',\n\t\t},\n\t},\n\tgrow: {\n\t\tflexGrow: 1,\n\t},\n\tbutton: {\n\t\tmargin: '0 10px',\n\t\tminHeight: '42px',\n\t\tminWidth: '150px',\n\t\tfontSize: 14\n\t},\n\tbuttonTitle: {\n\t\tfontWeight: 700,\n\t\tfontSize: 13,\n\t},\n\tbuttonSubTitle: {\n\t\tfontWeight: 400,\n\t\tfontSize: 7,\n\t},\n\tmenuList: {\n\t\tdisplay: \"inline-block\",\n\t\tpadding: \"10px 45px 10px 0\"\n\t},\n\tmenuLink: {\n\t\tcolor: \"#929292\",\n\t\tdisplay: \"block\",\n\t\tfontSize: \"1.10em\",\n\t\t'&:hover': {\n\t\t\tcolor: \"#3ab77d\",\n\t\t}\n\t},\n\tLinkActive: {\n\t\tcolor: \"#3ab77d\",\n\t\tfontWeight: \"bold\",\n\t\ttextDecoration: \"underline\"\n\t},\n\terrorMessage: {\n\t\tcolor: \"#f44336\",\n\t\tfontSize: 13\n\t},\n\terrorMessageContainer: {\n\t\tdisplay: 'flex',\n\t\talignItems: 'center'\n\t},\n\terrorMessageIcon: {\n\t\tcolor: \"#f44336\",\n\t\tmarginLeft: 'auto'\n\t}\n}));\n\n\nexport const AddRolesPage: React.FC<IRolesPage.IProps> = (props: IRolesPage.IProps): JSX.Element => {\n\tconst classes = useStyles();\n\tconst [loading, setLoading] = useState(false);\n\tconst [activeItem, setActiveItem] = useState('Policies');\n\tconst [isModalConfirmExitOpen, setIsModalConfirmExitOpen] = useState(false);\n\tconst [isModalConfirmSaveOpen, setIsModalConfirmSaveOpen] = useState(false);\n\tconst [isModalSaveSuccessOpen, setIsmodalSaveSuccessOpen] = useState(false);\n\tconst [moduleName, setModuleName] = useState('User Management');\n\tconst [rbacList, setRbacList] = useState([]);\n\tconst [breadCrumbs, setBreadCrumbs] = useState<any[]>([]);\n\tconst [rbacCount, setRbacCount] = useState(0);\n\tconst [roleId, setRoleId] = useState('');\n\tconst [policyData, setPolicyData] = useState<any>({})\n\tconst [isRedirect, setIsRedirect] = useState<boolean>(false);\n\tconst [redirectPath, setRedirectPath] = useState<string>('')\n\tconst [isSaveDisabled, setIsSaveDisabled] = useState<boolean>(true);\n\tconst [rbacState, setRbacState] = useState<any>({\n\t\tfilter: [],\n\t\torder: '',\n\t\tlimit: 40,\n\t\tskip: 0,\n\t\tcount: 0,\n\t\tcurrentPage: 0\n\t})\n\tconst [typingTimeout, setTypingTimeout] = useState<any>(0);\n\n\tconst sideBarItems = [\n\t\t{\n\t\t\tname: 'Policies',\n\t\t},\n\t];\n\n\tReact.useEffect(() => {\n\t\tconsole.log(props)\n\t\tif (props) {\n\t\t\tif (props.location) {\n\t\t\t\tif (props.location.state) {\n\t\t\t\t\tif (props.location.state.from) {\n\t\t\t\t\t\tsetModuleName(props.location.state.from)\n\t\t\t\t\t\thandleGetRbacCount(props.location.state.from)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\thandleGetRbacCount(moduleName)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvar _crumbs: any[] = [\n\t\t\t{\n\t\t\t\tname: \"ROLES\",\n\t\t\t\tlink: \"/system-admin/users/roles\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: \"ADD A ROLE\",\n\t\t\t}\n\t\t];\n\t\tsetBreadCrumbs(_crumbs);\n\t\thandGetRbacList(\n\t\t\trbacState.filter,\n\t\t\trbacState.order,\n\t\t\trbacState.limit,\n\t\t\trbacState.skip,\n\t\t\trbacState.currentPage,\n\t\t);\n\t}, []);\n\n\tconst handleGetRbacCount = (name: string) => {\n\t\tgetRbacCount(name).then(data => {\n\t\t\tsetRoleId(generateRoleId(name, data.count + 1));\n\t\t\tsetRbacCount(data.count + 1);\n\t\t}).catch(err => {\n\t\t\tconsole.log(err);\n\t\t\talert(err);\n\t\t})\n\t}\n\n\n\t// value={addData.expiryDate !== '' ? addData.expiryDate : inputtedData.expiry_date}\n\t// value={(addData.effectivityDate && addData.effectivityDate !== \"\" && inputtedData.effectivityDate === null) ? addData.effectivityDate\n\t//     : (inputtedData.effectivityDate) ? inputtedData.effectivityDate\n\t//         : null}\n\tconst handGetRbacList = (\n\t\tfilter: any,\n\t\tsort: any,\n\t\tlimit: number,\n\t\tskip: number,\n\t\tcurrentPage: number,\n\t\tresParam?: any,\n\t\tsearch?: string,\n\t\tmoduleNameNew?: string\n\t) => {\n\t\tconsole.log(moduleNameNew)\n\t\tif (typingTimeout) {\n\t\t\tclearTimeout(typingTimeout)\n\t\t}\n\n\t\tlet _filter: any = {};\n\t\tlet _order = sort ? `${sort[0].columnName} ${sort[0].direction}` : '';\n\n\t\tif (filter.length > 0) {\n\t\t\tfilter.map((item: any) => {\n\t\t\t\t_filter[item.columnName] = {\n\t\t\t\t\tlike: `^${item.value}.*`,\n\t\t\t\t\toptions: \"i\"\n\t\t\t\t}\n\t\t\t})\n\t\t\t_filter['module'] = {\n\t\t\t\tlike: `^${moduleName}.*`,\n\t\t\t\toptions: \"i\"\n\t\t\t}\n\t\t} else {\n\t\t\tif (moduleNameNew && moduleNameNew !== undefined) {\n\t\t\t\t_filter = {\n\t\t\t\t\tmodule: {\n\t\t\t\t\t\tlike: `^${moduleNameNew}.*`,\n\t\t\t\t\t\toptions: \"i\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t_filter = {\n\t\t\t\t\tmodule: {\n\t\t\t\t\t\tlike: `^${props.location.state && props.location.state.from ? props.location.state.from : moduleName}.*`,\n\t\t\t\t\t\toptions: \"i\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet params = {\n\t\t\tlimit: limit,\n\t\t\tskip: skip,\n\t\t\torder: _order,\n\t\t\twhere: _filter\n\t\t}\n\n\t\tsetTypingTimeout(setTimeout(() => {\n\t\t\tsetLoading(true)\n\t\t\tgetRbacList(params, search ? search : '').then(response => {\n\t\t\t\tlet res = response.body;\n\t\t\t\tsetRbacState({\n\t\t\t\t\tcurrentPage: currentPage,\n\t\t\t\t\tfilter: filter,\n\t\t\t\t\torder: sort,\n\t\t\t\t\tlimit: limit,\n\t\t\t\t\tskip: skip,\n\t\t\t\t\tcount: response.count\n\t\t\t\t})\n\n\t\t\t\tresParam && res.length > 0 && res.map((item: any) => {\n\t\t\t\t\tresParam.rbac && resParam.rbac.length > 0 && resParam.rbac.map((policy: any) => {\n\t\t\t\t\t\tif (item._id === policy._id) {\n\t\t\t\t\t\t\titem['checked'] = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t})\n\n\t\t\t\tsetRbacList(res)\n\t\t\t\tsetLoading(false)\n\t\t\t}).catch(err => {\n\t\t\t\tconsole.log(err)\n\t\t\t\tsetLoading(false)\n\t\t\t\talert(err);\n\t\t\t})\n\t\t}, filter.length > 0 || search ? 2000 : 0))\n\t}\n\n\t// const handleGetGroupsAndUsers = () => {\n\n\t// }\n\n\tconst activeSideBarItem = (item) => {\n\t\tconsole.log(item)\n\t\tsetActiveItem(item);\n\t}\n\n\tconst handleModalConfirmationClose = () => {\n\t\tsetIsModalConfirmSaveOpen(false);\n\t\tsetIsModalConfirmExitOpen(false);\n\t}\n\n\tconst generateRoleId = (moduleName: string, count: number) => {\n\t\tlet roleId = '';\n\n\t\tswitch (moduleName) {\n\t\t\tcase 'User Management':\n\t\t\t\troleId = `UM${count}`\n\t\t\t\tbreak;\n\t\t\tcase 'Membership':\n\t\t\t\troleId = `MS${count}`\n\t\t\t\tbreak;\n\t\t\tcase 'Underwriting':\n\t\t\t\troleId = `U${count}`\n\t\t\t\tbreak;\n\t\t\tcase 'Customer Care':\n\t\t\t\troleId = `C${count}`\n\t\t\t\tbreak;\n\t\t\tcase 'Claims':\n\t\t\t\troleId = `CL${count}`\n\t\t\t\tbreak;\n\t\t\tcase 'Franchising':\n\t\t\t\troleId = `FR${count}`\n\t\t\t\tbreak;\n\t\t\tcase 'Billing and Collections':\n\t\t\t\troleId = `BC${count}`\n\t\t\t\tbreak;\n\t\t\tcase 'Partner Network':\n\t\t\t\troleId = `PN${count}`\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\troleId = `UM${count}`\n\t\t\t\tbreak;\n\t\t}\n\t\treturn roleId;\n\t}\n\n\tconst handleChangeModuleName = async (moduleName) => {\n\t\tawait handleGetRbacCount(moduleName);\n\t\tsetRoleId(generateRoleId(moduleName, rbacCount));\n\t\thandGetRbacList(\n\t\t\t[],\n\t\t\t'',\n\t\t\trbacState.limit,\n\t\t\t0,\n\t\t\t0,\n\t\t\t'',\n\t\t\t'',\n\t\t\tmoduleName\n\t\t);\n\t}\n\n\n\tconst handleOnSave = () => {\n\t\tlet data = policyData;\n\t\tdata.rbac && data.rbac.map((rbac: any) => {\n\t\t\tif (rbac.checked) {\n\t\t\t\tdelete rbac.checked\n\t\t\t}\n\t\t})\n\t\tsetLoading(true)\n\t\tcreateRoleRbac(data).then((response: any) => {\n\t\t\tsetIsmodalSaveSuccessOpen(true);\n\t\t\tsetIsModalConfirmSaveOpen(false);\n\t\t\tsetRedirectPath('/system-admin/roles/' + response._id);\n\t\t\tsetIsRedirect(true)\n\t\t\tsetLoading(false);\n\t\t}).catch(err => {\n\t\t\tsetLoading(false)\n\t\t\talert(err);\n\t\t})\n\t}\n\n\tconst handleRemoveAllChanges = () => {\n\t\tsetIsModalConfirmExitOpen(false)\n\t\tsetRedirectPath('/system-admin/users')\n\t\tsetIsRedirect(true);\n\t}\n\n\tconst handleUpdateChange = (data: any, isValid: boolean) => {\n\t\tsetPolicyData(data);\n\t\tsetIsSaveDisabled(!isValid)\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t{\n\t\t\t\tisRedirect &&\n\t\t\t\t<Redirect\n\t\t\t\t\tto={{\n\t\t\t\t\t\tpathname: redirectPath,\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t}\n\t\t\t<SubHeader\n\t\t\t\theadingTitle={breadCrumbs[1] ? breadCrumbs[1].name : ''}\n\t\t\t\tbreadCrumbsArray={breadCrumbs}\n\t\t\t\tlayoutType={'layout_1'}\n\t\t\t></SubHeader>\n\t\t\t<div className={classes.main}>\n\t\t\t\t{loading ?\n\t\t\t\t\t(<LoadingIndicator />) : null\n\t\t\t\t}\n\t\t\t\t<Grid container xs={12}>\n\t\t\t\t\t<Grid item xs={3} className={classes.sideBarContainer}>\n\t\t\t\t\t\t<SideMenu\n\t\t\t\t\t\t\titems={sideBarItems}\n\t\t\t\t\t\t\tactiveItems={activeSideBarItem}\n\t\t\t\t\t\t></SideMenu>\n\t\t\t\t\t</Grid>\n\t\t\t\t\t<Grid item xs={9} className={classes.contentContainer}>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tactiveItem == 'Policies' &&\n\t\t\t\t\t\t\t<Policies\n\t\t\t\t\t\t\t\trbacList={rbacList}\n\t\t\t\t\t\t\t\tmoduleName={moduleName}\n\t\t\t\t\t\t\t\troleId={roleId}\n\t\t\t\t\t\t\t\tclasses={classes}\n\t\t\t\t\t\t\t\trbacState={rbacState}\n\t\t\t\t\t\t\t\tinputtedData={policyData}\n\t\t\t\t\t\t\t\tonSearch={(search: string) => {\n\t\t\t\t\t\t\t\t\thandGetRbacList(\n\t\t\t\t\t\t\t\t\t\trbacState.filter,\n\t\t\t\t\t\t\t\t\t\trbacState.order,\n\t\t\t\t\t\t\t\t\t\trbacState.limit,\n\t\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\t\trbacState.page,\n\t\t\t\t\t\t\t\t\t\tpolicyData,\n\t\t\t\t\t\t\t\t\t\tsearch\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonNavigateSideMenu={(name: string) => {\n\t\t\t\t\t\t\t\t\tactiveSideBarItem(name)\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonChangeModuleName={(name: string) => {\n\t\t\t\t\t\t\t\t\thandleChangeModuleName(name)\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonUpdateChange={(data: any, isValid: boolean) => {\n\t\t\t\t\t\t\t\t\thandleUpdateChange(data, isValid);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonPageChange={(page: number) => {\n\t\t\t\t\t\t\t\t\tlet skip = page * rbacState.limit\n\t\t\t\t\t\t\t\t\thandGetRbacList(\n\t\t\t\t\t\t\t\t\t\trbacState.filter,\n\t\t\t\t\t\t\t\t\t\trbacState.order,\n\t\t\t\t\t\t\t\t\t\trbacState.limit,\n\t\t\t\t\t\t\t\t\t\tskip,\n\t\t\t\t\t\t\t\t\t\tpage,\n\t\t\t\t\t\t\t\t\t\tpolicyData\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonPageSizeChange={(size: number) => {\n\t\t\t\t\t\t\t\t\thandGetRbacList(\n\t\t\t\t\t\t\t\t\t\trbacState.filter,\n\t\t\t\t\t\t\t\t\t\trbacState.order,\n\t\t\t\t\t\t\t\t\t\tsize,\n\t\t\t\t\t\t\t\t\t\trbacState.skip,\n\t\t\t\t\t\t\t\t\t\trbacState.currentPage,\n\t\t\t\t\t\t\t\t\t\tpolicyData\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonFilterChange={(filter: any) => {\n\t\t\t\t\t\t\t\t\thandGetRbacList(\n\t\t\t\t\t\t\t\t\t\tfilter,\n\t\t\t\t\t\t\t\t\t\trbacState.order,\n\t\t\t\t\t\t\t\t\t\trbacState.limit,\n\t\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\t\tpolicyData\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonSortChange={(sort: any) => {\n\t\t\t\t\t\t\t\t\thandGetRbacList(\n\t\t\t\t\t\t\t\t\t\trbacState.filter,\n\t\t\t\t\t\t\t\t\t\tsort,\n\t\t\t\t\t\t\t\t\t\trbacState.limit,\n\t\t\t\t\t\t\t\t\t\trbacState.skip,\n\t\t\t\t\t\t\t\t\t\trbacState.currentPage,\n\t\t\t\t\t\t\t\t\t\tpolicyData\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t></Policies>\n\t\t\t\t\t\t}\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</div>\n\t\t\t<ModalComponent\n\t\t\t\tisModalOpen={isModalConfirmSaveOpen}\n\t\t\t\tonClose={handleModalConfirmationClose}\n\t\t\t\tmessage={'Save all changes made?'}\n\t\t\t\ttitle={'Confirmation'}\n\t\t\t\tbuttons={\n\t\t\t\t\t<Grid container justify=\"center\" alignItems=\"center\">\n\t\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t\t<Button onClick={() => { setIsModalConfirmSaveOpen(false) }} className={classes.button} variant={'outlined'} color={'secondary'}>Cancel</Button>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t\t\t\tvariant={'contained'}\n\t\t\t\t\t\t\t\tcolor={'primary'}\n\t\t\t\t\t\t\t\tonClick={() => handleOnSave()}\n\t\t\t\t\t\t\t>Save</Button>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n\t\t\t\t}\n\t\t\t/>\n\t\t\t<ModalComponent\n\t\t\t\tisModalOpen={isModalConfirmExitOpen}\n\t\t\t\tonClose={handleModalConfirmationClose}\n\t\t\t\tmessage={'Exit and remove all changes made?'}\n\t\t\t\ttitle={'Confirmation'}\n\t\t\t\tbuttons={\n\t\t\t\t\t<Grid container justify=\"center\" alignItems=\"center\">\n\t\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t\t<Button onClick={() => { setIsModalConfirmExitOpen(false) }} className={classes.button} variant={'outlined'} color={'secondary'}>Cancel</Button>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t\t\t\tvariant={'contained'}\n\t\t\t\t\t\t\t\tcolor={'primary'}\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\thandleRemoveAllChanges()\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>Continue</Button>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n\t\t\t\t}\n\t\t\t/>\n\t\t\t<ModalComponent\n\t\t\t\tisModalOpen={isModalSaveSuccessOpen}\n\t\t\t\tonClose={() => { setIsmodalSaveSuccessOpen(false) }}\n\t\t\t\tmessage={'Changes has been saved.'}\n\t\t\t\ttitle={'Save Success'}\n\t\t\t\tbuttons={\n\t\t\t\t\t<Grid container justify=\"center\" alignItems=\"center\">\n\t\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t\t\t\tvariant={'contained'}\n\t\t\t\t\t\t\t\tcolor={'primary'}\n\t\t\t\t\t\t\t\tonClick={() => { setIsmodalSaveSuccessOpen(false) }}\n\t\t\t\t\t\t\t>Okay</Button>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n\t\t\t\t}\n\t\t\t/>\n\t\t\t{\n\t\t\t\tactiveItem === 'Policies' ?\n\t\t\t\t\t<FloatingFooter>\n\t\t\t\t\t\t<Grid container spacing={1} justify={'flex-end'} style={{ textAlign: 'right' }}>\n\t\t\t\t\t\t\t<Grid item>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t\t\t\t\tvariant={'contained'}\n\t\t\t\t\t\t\t\t\tcolor={'primary'}\n\t\t\t\t\t\t\t\t\tstyle={{ backgroundColor: '#3C394A' }}\n\t\t\t\t\t\t\t\t\tonClick={() => setIsModalConfirmExitOpen(true)}\n\t\t\t\t\t\t\t\t>Cancel</Button>\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t<Grid item>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t\t\t\t\tvariant={'contained'}\n\t\t\t\t\t\t\t\t\tcolor={'primary'}\n\t\t\t\t\t\t\t\t\tonClick={() => setIsModalConfirmSaveOpen(true)}\n\t\t\t\t\t\t\t\t\tdisabled={isSaveDisabled}\n\t\t\t\t\t\t\t\t>Save Changes</Button>\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</FloatingFooter>\n\t\t\t\t\t: \"\"\n\t\t\t}\n\t\t</>\n\t);\n}\n\nconst mapStateToProps = (state: Store) => state.roles;\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n\tMap: bindActionCreators(RolesActions.Map, dispatch),\n});\n\nexport { mapStateToProps, mapDispatchToProps };\n"],"sourceRoot":""}