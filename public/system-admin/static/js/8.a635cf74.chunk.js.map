{"version":3,"sources":["Pages/API/Calls/Roles.ts","Pages/Roles/ActionConsts.ts","Pages/Roles/RolesActions.ts","Pages/Roles/Components/Policies.tsx","Pages/Roles/Components/AddRoleBody.tsx","Pages/Roles/Components/GroupsAndUsers.tsx","Pages/Roles/RolesPage.tsx"],"names":["fetch","Fetch","getRolesList","limit","offset","skip","call","method","getRoleData","id","ActionConsts","ResetReducer","SetReducer","RolesActions","payload","type","Policies","props","rows","viewOnly","classes","mode","moduleName","React","isAddedModalRole","setIsAddedModalRole","moduleValue","setModuleValue","isModuleModalOpen","setIsModuleModalOpen","moduleLabel","setModuleLabel","effectivityDate","setEffectivityDate","expiryDate","setExpiryDate","roleName","setRoleName","isModalConfirmChangeModule","setIsModalConfirmChangeModule","console","log","moduleItems","name","value","handleContinueRole","Number","Grid","container","xs","spacing","item","InputLabel","className","inputLabel","htmlFor","Typography","role_id","status","associate_groups","length","map","groups","module","Link","onClick","onChange","e","target","views","moment","format","style","width","marginTop","inputVariant","ReactSearch","onSearch","placeholder","ReactTable","rbac","columns","title","enableGrouping","groupColumnName","message","ModalComponent","isModalOpen","onClose","buttons","justify","alignItems","Button","button","variant","color","textAlign","margin","menuItems","useStyles","makeStyles","selectedItems","borderRadius","fontSize","backgroundColor","padding","xIcon","AddRoleBody","handleOnSearch","list","arr","state","push","setState","handleRemoveItem","index","splice","handleOnSaveItems","onSave","comboArray","this","buttonsContainer","selectedContainer","display","selectedText","paddingRight","saveButton","cancelButton","searchLabel","comboBoxMode","comboListsArray","icon","faTimesCircle","disabled","GroupsAndUsers","useState","activeItem","setActiveItem","activeClass","setActiveClass","showBlock","setShowBlock","isModalRemoveOpen","setIsModalRemoveOpen","i","menuList","classNames","menuLink","LinkActive","handleMenuClick","alignRight","group_id","group","users_in_group","columnExtensions","columnName","wordWrapEnabled","align","sortingStateColumnExtensions","sortingEnabled","onDeleteRow","row","username","user_account","last_activity_date","handleClose","items","theme","mainContainer","main","position","headMain","gridContainer","paddingBottom","gridContainerNoPadding","sectionTitle","fontWeight","subSectionTitle","editBtn","sideBarContainer","borderRight","contentContainer","paddingLeft","sideBarLists","listStyle","sideBarLink","fieldGroupTitle","listItemTextRoot","flex","listItemTextPrimarySelected","cursor","listItemTextPrimaryNotSelected","dropzone","height","marginBottom","border","justifyContent","flexDirection","keyboardDatePicker","checkbox","radio","appBar","top","bottom","breakpoints","up","grow","flexGrow","minHeight","minWidth","buttonTitle","buttonSubTitle","textDecoration","RolesPage","setViewOnly","loading","setLoading","isModalConfirmExitOpen","setIsModalConfirmExitOpen","isModalConfirmSaveOpen","setIsModalConfirmSaveOpen","setMode","dataResponse","setDataResponse","setModuleName","match","params","handleGetRoleData","location","from","then","response","catch","err","handleModalConfirmationClose","SubHeader","headingTitle","breadCrumbsArray","buttonFunc","buttonName","layoutType","enableButton","SideMenu","activeItems","mapStateToProps","roles","mapDispatchToProps","dispatch","Map","bindActionCreators"],"mappings":"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","file":"static/js/8.a635cf74.chunk.js","sourcesContent":["import Fetch, { requestOption } from '../index'\n\nconst fetch = new Fetch();\n\nexport const getRolesList = (limit: number, offset?: number, skip?: number) => {\n\n    let option: requestOption = {\n        method: 'GET'\n    }\n\n    return fetch.call(option, `account-roles?filter[offset]=${offset}&filter[limit]=${limit}&filter[skip]=${skip}`)\n}\n\n\nexport const getRoleData = (id: any) => {\n    let option: requestOption = {\n        method: 'GET'\n    }\n\n    return fetch.call(option, `account-roles?filter={\"where\":{\"_id\":\"${id}\"}}`)\n}","export const ActionConsts = {\n\tRoles: {\n\t\tResetReducer: 'Roles_ResetReducer',\n\t\tSetReducer: 'Roles_SetReducer',\n\t},\n};\n","//#region Global Imports\n// import { Dispatch } from 'redux';\n//#endregion Global Imports\n\n//#region Local Imports\nimport { ActionConsts } from './ActionConsts';\n// import { PlanetaryService } from 'Components/Services';\n//#endregion Local Imports\n\n//#region Interface Imports\n//#endregion Interface Imports\n\nexport const RolesActions = {\n\tMap: (payload: []) => ({\n\t\tpayload,\n\t\ttype: ActionConsts.Roles.SetReducer,\n\t}),\n\n\tReset: () => ({\n\t\ttype: ActionConsts.Roles.ResetReducer,\n\t}),\n\n\t// GetApod: (payload) => async (dispatch: Dispatch) => {\n\n\t// },\n};\n","import * as React from 'react';\nimport {\n    Grid,\n    // FormControl, \n    InputLabel,\n    Typography,\n    Link,\n    Button\n    // TextareaAutosize,\n} from '@material-ui/core';\nimport { ReactTable } from 'Components/UI/TableComponent/ReactTable';\nimport { ReactSearch } from 'Components/UI/SearchBar/ReactSearch';\nimport { BasicTextField, BasicSelect } from 'Components/UI';\nimport { KeyboardDatePicker } from '@material-ui/pickers';\nimport { ModalComponent } from 'Components/UI/ModalComponent/ModalComponent';\n// import BasicSelect from 'Components/UI/BasicSelect'\nimport moment from 'moment';\n\nexport interface IPoliciesProps {\n    rows?: any,\n    viewOnly: boolean,\n    classes: any,\n    mode?: 'edit' | 'view' | 'add' | string,\n    moduleName?: string\n}\n\nexport const Policies: React.FC<IPoliciesProps> = (props: IPoliciesProps): JSX.Element => {\n    const { rows, viewOnly, classes, mode, moduleName } = props;\n    const [isAddedModalRole, setIsAddedModalRole] = React.useState(false)\n    const [moduleValue, setModuleValue] = React.useState(0);\n    const [isModuleModalOpen, setIsModuleModalOpen] = React.useState(false);\n    const [moduleLabel, setModuleLabel] = React.useState<any>(null);\n    const [effectivityDate, setEffectivityDate] = React.useState(null);\n    const [expiryDate, setExpiryDate] = React.useState(null);\n    const [roleName, setRoleName] = React.useState(null);\n    const [isModalConfirmChangeModule, setIsModalConfirmChangeModule] = React.useState(false)\n    console.log(viewOnly)\n    console.log(moduleName, 'moduleName dog')\n    console.log(rows)\n    const moduleItems = [\n        {\n            name: 'User Management',\n            value: '0'\n        },\n        {\n            name: 'Membership',\n            value: '1'\n        },\n        {\n            name: 'Underwriting',\n            value: '2'\n        },\n        {\n            name: 'Customer Care',\n            value: '3'\n        },\n        {\n            name: 'Claims',\n            value: '4',\n        },\n        {\n            name: 'Billing',\n            value: '5',\n        },\n    ] \n\n    const columns: any = [\n        {\n            name: 'operation',\n            title: 'Object and Operations',\n        },\n        {\n            name: 'policy',\n            title: 'Policies',\n        },\n        {\n            name: 'policy_id',\n            title: 'Policy ID',\n        },\n        {\n            name: 'name',\n            title: 'Name'\n        }\n    ]\n\n    const viewRoleBody = () => {\n        return (\n            <>\n                <Grid item xs={4}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">ROLE ID</InputLabel>\n                    <Typography><b>{rows && rows.role_id}</b></Typography>\n                </Grid>\n                <Grid item xs={4}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"description\">DESCRIPTION</InputLabel>\n                    <Typography><b>Manages and Configures technicals settings of the system</b></Typography>\n                </Grid>\n                <Grid item xs={4}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"status\">STATUS</InputLabel>\n                    <Typography><b>{rows && rows.status}</b></Typography>\n                </Grid>\n                <Grid item xs={4}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">ROLE NAME</InputLabel>\n                    <Typography><b>{rows && rows.name}</b></Typography>\n                </Grid>\n                <Grid item xs={4}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"description\">ATTACHED GROUP/S</InputLabel>\n                    <Typography>\n                        {\n                          rows && rows.associate_groups && rows.associate_groups.length > 0 && rows.associate_groups.map((groups) => (\n                                <b>{groups} </b>   \n                            ))\n                        }\n                    </Typography>\n                </Grid>\n                <Grid item xs={4}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"primary_module\">PRIMARY MODULE</InputLabel>\n                    <Typography><b>User Management</b></Typography>\n                </Grid>\n                <Grid item xs={4}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"primary_module\">LAST UPDATE</InputLabel>\n                    <Typography><b>July 29, 2019</b></Typography>\n                </Grid> \n            </>\n        )\n    }\n\n    const addRoleBody = () => {\n        return (\n            <>\n                <Grid item xs={4}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">MODULE</InputLabel>\n                    <Typography><b>{moduleLabel !== null ? moduleLabel : moduleName}</b></Typography>\n                    <Link onClick={() => {setIsModuleModalOpen(true)}}>Change Module</Link>\n                </Grid> \n                <Grid item xs={4}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">ROLE ID</InputLabel>\n                    <Typography><b>RID2</b></Typography>\n                </Grid>\n                <Grid item xs={4}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">DESCRIPTION</InputLabel>\n                    {/* <TextareaAutosize></TextareaAutosize> */}\n                    <BasicTextField></BasicTextField>\n                </Grid>\n                <Grid item xs={6}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">ROLE NAME</InputLabel>\n                    <BasicTextField\n                        value={roleName}\n                        onChange={(e: any) => {\n                            setRoleName(e.target.value);\n                        }}\n                    ></BasicTextField>\n                </Grid>\n                <Grid item xs={6}>\n                </Grid>\n                <Grid item xs={6}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">EFFECTIVITY DATE</InputLabel>\n                    <KeyboardDatePicker\n                        views={[\"year\", \"date\", \"month\"]}\n                        value={effectivityDate}\n                        format={'MMM DD, YYYY'}\n                        style={{ width: \"100%\", marginTop: 10 }}\n                        onChange={(e: any) => {\n                            setEffectivityDate(e)\n                        }}\n                        inputVariant={'outlined'}\n                    // disableFuture\n                    />\n                </Grid>\n                <Grid item xs={6}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">EXPIRY DATE (If applicable)</InputLabel>\n                    <KeyboardDatePicker\n                        views={[\"year\", \"date\", \"month\"]}\n                        value={expiryDate}\n                        style={{ width: \"100%\", marginTop: 10 }}\n                        format={'MMM DD, YYYY'}\n                        onChange={(e : any) => {\n                            setExpiryDate(e)\n                        }}\n                        inputVariant={'outlined'}\n                    // disableFuture\n                    />\n                </Grid>\n            </>\n        )\n    }\n\n    const editRoleBody = () => {\n        return (\n            <>\n                <Grid item xs={4}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">MODULE</InputLabel>\n                    <Typography><b>{moduleLabel !== null ? moduleLabel : rows.module}</b></Typography>\n                    <Link onClick={() => {setIsModuleModalOpen(true)}}>Change Module</Link>\n                </Grid>\n                <Grid item xs={4}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">ROLE ID</InputLabel>\n                    <Typography><b>{rows.role_id}</b></Typography>\n                </Grid>\n                <Grid item xs={4}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">DESCRIPTION</InputLabel>\n                    {/* <TextareaAutosize></TextareaAutosize> */}\n                    <BasicTextField></BasicTextField>\n                </Grid>\n                <Grid item xs={6}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">ROLE NAME</InputLabel>\n                    <BasicTextField\n                        value={roleName !== null ? roleName : rows.name}\n                        onChange={(e: any) => {\n                            setRoleName(e.target.value);\n                        }}\n                    ></BasicTextField>\n                </Grid>\n                <Grid item xs={6}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">STATUS</InputLabel>\n                    <Typography><b>{rows && rows.status}</b></Typography>\n                </Grid>\n                <Grid item xs={6}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">EFFECTIVITY DATE</InputLabel>\n                    <KeyboardDatePicker\n                        views={[\"year\", \"date\", \"month\"]}\n                        value={effectivityDate !== null ? effectivityDate : moment(rows.effectivityDate)}\n                        format={'MMM DD, YYYY'}\n                        style={{ width: \"100%\", marginTop: 10 }}\n                        onChange={(e: any) => {\n                            setEffectivityDate(e)\n                        }}\n                        inputVariant={'outlined'}\n                    // disableFuture\n                    />\n                </Grid>\n                <Grid item xs={6}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">EXPIRY DATE (If applicable)</InputLabel>\n                    <KeyboardDatePicker\n                        views={[\"year\", \"date\", \"month\"]}\n                        value={expiryDate}\n                        style={{ width: \"100%\", marginTop: 10 }}\n                        format={'MMM DD, YYYY'}\n                        onChange={(e : any) => {\n                            setExpiryDate(e)\n                        }}\n                        inputVariant={'outlined'}\n                    // disableFuture\n                    />\n                </Grid>\n            </>\n        )\n    }\n\n    const handleRemoveRoleModalClose = () => {\n\n    }\n\n    const handleContinueRole = () => {\n        setIsModalConfirmChangeModule(false);\n        setModuleLabel(moduleItems[Number(moduleValue)].name);\n    }\n\n    return (\n        <>\n            <Grid container xs={12} spacing={3}>\n                {\n                    mode === 'view' ? (\n                        viewRoleBody()\n                    ) : mode === 'edit' ? (\n                        editRoleBody()\n                    ) : mode === 'add' ? (\n                        addRoleBody()\n                    ) : null               \n                }\n                <Grid item xs={12}>\n                    <ReactSearch\n                        onSearch={() => console.log('on search')}\n                        placeholder={'Search policies'}\n                    />\n                    {\n                        rows ? \n                        <ReactTable \n                            rows={rows.rbac}\n                            columns={columns}\n                            enableGrouping={true}\n                            groupColumnName={'name'}\n                            viewOnly={false}\n                            message={'There are no user accounts to show yet.'}\n                        /> : null\n                    }\n                </Grid>\n            </Grid>\n            <ModalComponent\n                isModalOpen={isAddedModalRole}\n                onClose={handleRemoveRoleModalClose}\n                message={'New Role has been added successfully.'}\n                title={'Added New Role'}\n                buttons={\n                    <Grid container justify=\"center\" alignItems=\"center\">\n                        <Grid item xs={6}>\n                            <Button onClick={() => { setIsAddedModalRole(false) }} className={classes.button} variant={'contained'} color={'primary'}>Okay</Button>\n                        </Grid>\n                    </Grid>\n                }\n            />\n             <ModalComponent\n                    isModalOpen={isModuleModalOpen}\n                    onClose={() => { \n                        handleContinueRole() \n                     }}\n                    message={'Select a module for the role you will create:'}\n                    title={'Choose a Module'}\n                    buttons={\n                        <Grid container justify=\"center\" alignItems=\"center\" style={{textAlign: 'center'}}>\n                            <Grid item xs={6}>\n                                <Button \n                                    onClick={() => { \n                                        setIsModuleModalOpen(false)\n                                    }}\n                                    variant={'outlined'}\n                                    color={'secondary'}  \n                                    className={classes.button}\n                                >Cancel</Button>\n                            </Grid>\n                            <Grid item xs={6}>\n                                <Button variant={'contained'} color={'primary'}\n                                    className={classes.button}\n                                    onClick={() => {\n                                        setIsModalConfirmChangeModule(true)\n                                        setIsModuleModalOpen(false)\n                                }}>Continue</Button>\n                            </Grid>\n                        </Grid>\n                    }\n                >\n                <div style={{width: '90%', margin: 'auto'}}>\n                    <BasicSelect\n                        menuItems={moduleItems}\n                        width={'100%'}\n                        value={moduleValue}\n                        onChange={(e : any) => {\n                            setModuleValue(e.target.value)\n                        }}\n                    />\n                </div>\n            </ModalComponent>\n            <ModalComponent\n\t\t\t\tisModalOpen={isModalConfirmChangeModule}\n\t\t\t\tonClose={() => {\n                    setIsModalConfirmChangeModule(false);\n                }}\n\t\t\t\tmessage={'All progress made will be lost. Continue to change the module?'}\n\t\t\t\ttitle={'Confirm Change Module'}\n\t\t\t\tbuttons={\n\t\t\t\t\t<Grid container justify=\"center\" alignItems=\"center\">\n\t\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t\t<Button onClick={() => { setIsModalConfirmChangeModule(false) }} className={classes.button} variant={'outlined'} color={'secondary'}>Cancel</Button>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t\t<Button className={classes.button} variant={'contained'} color={'primary'} onClick={() => handleContinueRole()}>Continue</Button>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n\t\t\t\t}\n\t\t\t/>\n        </>\n    )\n}","import * as React from 'react';\nimport { ReactSearch } from 'Components/UI/SearchBar/ReactSearch';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons';\n// import { InputLabel } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button, Grid } from '@material-ui/core';\n\nconst useStyles = makeStyles(() => ({\n    selectedItems: {\n        borderRadius: 20,\n        fontSize: 13,\n        backgroundColor: '#d1d4db',\n        padding: '5px 10px'\n    },\n    xIcon: {\n        fontSize: 16\n    }\n}));\nconsole.log(useStyles);\n\ninterface IAddRoleBodyProps {\n    onClose: () => void;\n    onSave: (items) => void;\n}\n\ninterface IAddRoleBodyState {\n    selectedItems: any;\n    comboArray: any;\n}\n\nexport class AddRoleBody extends React.Component<IAddRoleBodyProps, IAddRoleBodyState> {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedItems: [],\n            comboArray: [],\n        }\n    }\n    // const {} = props;\n    // const classes = useStyles();\n    // const [selectedItems, setSelectedItems] = React.useState<any>([]);\n    componentDidMount() {\n        this.setState({\n            comboArray: [\n                {\n                    name: 'John Ernest Seraspi',\n                    value: 'test',\n                },\n                {\n                    name: 'Teqpwoe',\n                    value: 'test2',\n                },\n            ]\n        })\n    }\n\n    handleOnSearch = (list) => {\n        let arr = this.state.selectedItems;\n        arr.push(list);\n        this.setState({\n            selectedItems: arr\n        })\n        console.log(arr);\n    }\n\n    handleRemoveItem = (index) => {\n        let arr = this.state.selectedItems;\n        arr.splice(index, 1);\n        this.setState({\n            selectedItems: arr\n        })\n    }\n\n    handleOnSaveItems = () => {\n        this.props.onSave(this.state.selectedItems);\n    }\n\n    public render(): JSX.Element {\n        const classes = {\n            buttonsContainer: {\n                padding: '1em',\n            },\n            selectedContainer: {\n                padding: '3em 0 2em'\n            },\n            selectedItems: {\n                borderRadius: 20,\n                fontSize: 13,\n                backgroundColor: '#d1d4db',\n                padding: '5px 10px',\n                margin: '5px',\n                display: 'inline-block',\n            },\n            selectedText: {\n                paddingRight: '5px'\n            },\n            saveButton: {\n                width: '135px',\n                fontSize: '14px',\n                color: '#fff',\n            },\n            cancelButton: {\n                width: '135px',\n                fontSize: '14px',\n            }\n        };\n\n        return (\n            <>\n                <ReactSearch\n                    searchLabel={'Search user account'}\n                    onSearch={this.handleOnSearch}\n                    comboBoxMode={true}\n                    comboListsArray={this.state.comboArray}\n                />\n                <div style={classes.selectedContainer}>\n                    <div>\n                        <label>Selected Users</label>\n                    </div>\n                    {this.state.selectedItems.map((item, index) =>\n                        <div style={classes.selectedItems}>\n                            <span style={classes.selectedText}>{item}</span>\n                            <span onClick={() => this.handleRemoveItem(index)}>\n                                <FontAwesomeIcon icon={faTimesCircle} />\n                            </span>\n                        </div>\n                    )\n                    }\n                </div>\n                <Grid container spacing={1}>\n                    <Grid item xs={6}>\n                        <Button style={classes.cancelButton} variant=\"outlined\" color=\"secondary\" onClick={() => this.props.onClose()}>Cancel</Button>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <Button disabled={this.state.selectedItems.length < 1 ? true : false} style={classes.saveButton} variant=\"contained\" color=\"primary\" onClick={() => this.handleOnSaveItems()}>Save</Button>\n                    </Grid>\n                </Grid>\n            </>\n        )\n    }\n\n}\n// export const AddRoleBody : React.FC<IAddRoleBodyProps> = (props: IAddRoleBodyProps): JSX.Element => {\n\n// }","import * as React from 'react';\nimport { Typography, Grid, Link, Button } from '@material-ui/core';\nimport { ReactSearch } from 'Components/UI/SearchBar/ReactSearch';\nimport { ReactTable } from 'Components/UI/TableComponent/ReactTable';\nimport { useState } from 'react';\nimport classNames from 'classnames';\nimport { SideModalBlock } from 'Components/UI';\nimport { AddRoleBody } from './AddRoleBody';\nimport { ModalComponent } from 'Components/UI/ModalComponent/ModalComponent';\n\nexport interface IGroupsAndUsersProps {\n    rows?: any,\n    viewOnly: boolean,\n    classes: any\n}\n\nexport const GroupsAndUsers: React.FC<IGroupsAndUsersProps> = (props: IGroupsAndUsersProps): JSX.Element => {\n    const {\n        rows,\n        viewOnly,\n        classes\n    } = props;\n    const [activeItem, setActiveItem] = useState('Groups');\n    const [activeClass, setActiveClass] = useState(0);\n    const [showBlock, setShowBlock] = useState('none');\n    const [isModalRemoveOpen, setIsModalRemoveOpen] = useState(false);\n    console.log(rows, viewOnly);\n\n    const userRows: any = [\n        {\n            username: 'Imstaana',\n            user_account: 'Louise Marianne Sta. Ana',\n            last_activity_date: 'Nov 12, 2019',\n            status: 'Active',\n        },\n        {\n            username: 'psbarrios',\n            user_account: 'Philip Salvador Q. Barrios',\n            last_activity_date: 'Nov 12, 2019',\n            status: 'Active',\n        },\n    ]\n\n    const userColumns: any = [\n        {\n            name: 'username',\n            title: 'Username',\n        },\n        {\n            name: 'user_account',\n            title: 'User Account',\n        },\n        {\n            name: 'last_activity_date',\n            title: 'Last Activity Date',\n        },\n        {\n            name: 'status',\n            title: 'Status',\n        },\n        {\n            name: 'action_delete',\n            title: ' ',\n        },\n    ]\n\n    const groupsRows: any = [\n        {\n            group_id: '0122-93282-0012',\n            group: \"APD Encoding\",\n            users_in_group: 10,\n            status: 'Active',\n        },\n        {\n            group_id: '0132-232-0012',\n            group: \"APD Decoding\",\n            users_in_group: 34,\n            status: 'Active',\n        },\n    ];\n\n    const groupsColumns: any = [\n        {\n            name: 'group_id',\n            title: 'Group ID',\n        },\n        {\n            name: 'group',\n            title: 'Group',\n        },\n        {\n            name: 'users_in_group',\n            title: 'Users in the Group',\n        },\n        {\n            name: 'status',\n            title: 'Status',\n        },\n        {\n            name: 'action_delete',\n            title: ' ',\n        },\n    ];\n\n    const menuItems = [\n        'Groups',\n        'Users'\n    ]\n\n    const handleMenuClick = (item, index) => {\n        setActiveItem(item);\n        setActiveClass(index)\n    }\n\n    const onSaveAddRole = (items) => {\n        console.log(items, 'onsaveaddrole')\n    }\n\n    const handleRemoveRoleModalClose = () => {\n        setIsModalRemoveOpen(true)\n    }\n\n    return (\n        <>\n            <Grid container xs={12}>\n                <Grid item xs={12}>\n                    <Typography><b>Attached Groups and Users</b></Typography>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container xs={12} alignItems={'center'}>\n                        <Grid item xs={6}>\n                            <ul style={{ padding: '0', margin: '0' }}>\n                                {\n                                    menuItems.map((item, i) => (\n                                        <li className={classes.menuList}>\n                                            <Link className={classNames(classes.menuLink, activeClass === i ? classes.LinkActive : null)} onClick={() => handleMenuClick(item, i)}>{item}</Link>\n                                        </li>\n                                    ))\n                                }\n                            </ul>\n                        </Grid>\n                        <Grid item xs={6} className={classes.alignRight}>\n                            <Link onClick={() => { setShowBlock('block') }}> Add to this role</Link>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    {\n                        activeItem == 'Groups' ?\n                            <>\n                                <ReactSearch onSearch={() => console.log('search')} placeholder={'Search a user group'}></ReactSearch>\n                                <ReactTable\n                                    rows={groupsRows}\n                                    columns={groupsColumns}\n                                    columnExtensions={\n                                        [{\n                                            columnName: 'action_delete',\n                                            width: 75,\n                                            wordWrapEnabled: true,\n                                            align: 'center'\n                                        }]\n                                    }\n                                    message={'There are no user accounts to show yet.'}\n                                    sortingStateColumnExtensions={[\n                                        { columnName: 'action_delete', sortingEnabled: false }\n                                    ]}\n                                    onDeleteRow={(row) => {\n                                        console.log(row, 'rowdeleted')\n                                    }}\n                                />\n                            </>\n                            : null\n                    }\n                    {\n                        activeItem == 'Users' ?\n                            <>\n                                <ReactSearch onSearch={() => console.log('search')} placeholder={'Search a user account'} />\n                                <ReactTable\n                                    rows={userRows}\n                                    columns={userColumns}\n                                    columnExtensions={\n                                        [{\n                                            columnName: 'action_delete',\n                                            width: 75,\n                                            wordWrapEnabled: true,\n                                            align: 'center'\n                                        }]\n                                    }\n                                    message={'There are no user accounts to show yet.'}\n                                    sortingStateColumnExtensions={[\n                                        { columnName: 'action_delete', sortingEnabled: false }\n                                    ]}\n                                    onDeleteRow={(row) => {\n                                        console.log(row, 'rowdeleted')\n                                    }}\n                                />\n                            </>\n                            : null\n                    }\n                </Grid>\n            </Grid>\n            <SideModalBlock\n                handleClose={() => { setShowBlock('none') }}\n                showBlock={showBlock}\n                title={'Add to this Role'}>\n                <AddRoleBody\n                    onClose={() => {\n                        setShowBlock('none')\n                    }}\n                    onSave={onSaveAddRole}\n                />\n            </SideModalBlock>\n            <ModalComponent\n                isModalOpen={isModalRemoveOpen}\n                onClose={handleRemoveRoleModalClose}\n                message={'Remove APD screening from this role?'}\n                title={'Remove from Role'}\n                buttons={\n                    <Grid container justify=\"center\" alignItems=\"center\">\n                        <Grid item xs={6}>\n                            <Button onClick={() => { setIsModalRemoveOpen(false) }} className={classes.button} variant={'outlined'} color={'secondary'}>Cancel</Button>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Button className={classes.button} variant={'contained'} color={'primary'}>Remove</Button>\n                        </Grid>\n                    </Grid>\n                }\n            />\n        </>\n    )\n}\n","//#region Global Imports\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { bindActionCreators, Dispatch } from 'redux';\n// import NEOLink from 'next/link';\n//#endregion Global Imports\n\n//#region Interface Imports\n// import { Heading } from 'Components/UI/Heading';\nimport { Store } from 'Components/Stores/IStore';\nimport { RolesActions } from './RolesActions';\nimport { IRolesPage } from './IRolesPage';\nimport { Grid, Button } from '@material-ui/core';\n// import Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { LoadingIndicator } from 'Components/UI';\nimport { Policies } from './Components/Policies';\nimport { GroupsAndUsers } from './Components/GroupsAndUsers';\nimport { SubHeader } from 'Components/UI/SubHeader';\nimport { SideMenu } from 'Components/UI/SideMenu';\nimport { ModalComponent } from 'Components/UI/ModalComponent/ModalComponent';\nimport { getRoleData } from 'Pages/API/Calls/Roles';\n// import { LoadingIndicator } from 'Components/UI';\n\n//#endregion Interface Imports\n\nconst useStyles = makeStyles(theme => ({\n\tmainContainer: {\n\t\tpadding: '32px 24px 25px'\n\t},\n\tmain: {\n\t\tbackgroundColor: '#F5F7FB',\n\t\tpadding: '32px 24px',\n\t\tposition: 'relative'\n\t},\n\theadMain: {\n\t\t// backgroundColor: '#F5F7FB',\n\t},\n\tgridContainer: {\n\t\tpadding: theme.spacing(1),\n\t\tpaddingBottom: '75px'\n\t},\n\tgridContainerNoPadding: {\n\t\tpadding: theme.spacing(1),\n\t},\n\tsectionTitle: {\n\t\tfontSize: 24,\n\t\tfontWeight: 700,\n\t\tcolor: '#272e4c',\n\t},\n\tsubSectionTitle: {\n\t\tfontSize: 14,\n\t\tfontWeight: 400,\n\t\tcolor: '#272e4c',\n\t},\n\teditBtn: {\n\t\twidth: '135px',\n\t\tfontSize: '14px',\n\t\tcolor: '#fff',\n\t},\n\talignRight: {\n\t\ttextAlign: 'right',\n\t},\n\tsideBarContainer: {\n\t\tborderRight: \"1px solid #ccc\",\n\t\tpaddingRight: \"25px\",\n\t},\n\tcontentContainer: {\n\t\tpaddingLeft: \"25px\",\n\t},\n\tsideBarLists: {\n\t\tpadding: 0,\n\t\tmargin: 0,\n\t\tlistStyle: 'none'\n\t},\n\tsideBarLink: {\n\t\tcolor: \"#272e4c\",\n\t\tmargin: \"0 0 10px\",\n\t\tdisplay: \"block\"\n\t},\n\tfieldGroupTitle: {\n\t\tfontSize: 13,\n\t\tfontWeight: 700,\n\t\tcolor: '#272e4c',\n\t},\n\tlistItemTextRoot: {\n\t\tflex: 'none',\n\t},\n\tlistItemTextPrimarySelected: {\n\t\tfontSize: 14,\n\t\tfontWeight: 700,\n\t\tcolor: 'rgba(39, 46, 76, 1)',\n\t\tcursor: 'pointer',\n\t},\n\tlistItemTextPrimaryNotSelected: {\n\t\tfontSize: 14,\n\t\tfontWeight: 700,\n\t\tcolor: 'rgba(39, 46, 76, 0.3)',\n\t\tcursor: 'pointer',\n\t},\n\tdropzone: {\n\t\twidth: '460px',\n\t\theight: '88px',\n\t\tmarginTop: '10px',\n\t\tmarginBottom: '20px',\n\t\tborder: '2px dashed rgba(30, 32, 113, 0.3)',\n\t\tborderRadius: '5px',\n\t\tbackgroundColor: '#e6e8ee',\n\t\tcolor: '#7b8094',\n\t\tdisplay: 'flex',\n\t\tjustifyContent: 'center',\n\t\talignItems: 'center',\n\t\tflexDirection: 'column',\n\t},\n\tinputLabel: {\n\t\tcolor: '#272e4c',\n\t\tfontSize: '12px',\n\t\tmarginBottom: '5px'\n\t},\n\tkeyboardDatePicker: {\n\t\tmarginTop: '10px',\n\t\tmarginBottom: '20px',\n\t\twidth: '212px',\n\t},\n\tcheckbox: {\n\t\t'&.Mui-checked': {\n\t\t\tcolor: '#1e2071',\n\t\t},\n\t},\n\tradio: {\n\t\t'&.Mui-checked': {\n\t\t\tcolor: '#1e2071',\n\t\t},\n\t},\n\tappBar: {\n\t\ttop: 'auto',\n\t\tbottom: 0,\n\t\tborder: '1px solid #707070',\n\t\tbackgroundColor: 'rgba(54, 54, 54, 0.64)',\n\t\t[theme.breakpoints.up('sm')]: {\n\t\t\twidth: 'calc(100% - 72px)',\n\t\t},\n\t},\n\tgrow: {\n\t\tflexGrow: 1,\n\t},\n\tbutton: {\n\t\tmargin: '0 10px',\n\t\tminHeight: '42px',\n\t\tminWidth: '150px',\n\t},\n\tbuttonTitle: {\n\t\tfontWeight: 700,\n\t\tfontSize: 13,\n\t},\n\tbuttonSubTitle: {\n\t\tfontWeight: 400,\n\t\tfontSize: 7,\n\t},\n\tmenuList: {\n\t\tdisplay: \"inline-block\",\n\t\tpadding: \"10px 45px 10px 0\"\n\t},\n\tmenuLink: {\n\t\tcolor: \"#929292\",\n\t\tdisplay: \"block\",\n\t\tfontSize: \"1.10em\",\n\t\t'&:hover': {\n\t\t\tcolor: \"#3ab77d\",\n\t\t}\n\t},\n\tLinkActive: {\n\t\tcolor: \"#3ab77d\",\n\t\tfontWeight: \"bold\",\n\t\ttextDecoration: \"underline\"\n\t}\n}));\n\n\nexport const RolesPage: React.FC<IRolesPage.IProps> = (props: IRolesPage.IProps): JSX.Element => {\n\tconst classes = useStyles();\n\tconst [viewOnly, setViewOnly] = useState(true);\n\tconst [loading, setLoading] = useState(false);\n\tconst [activeItem, setActiveItem] = useState('Policies');\n\tconst [isModalConfirmExitOpen, setIsModalConfirmExitOpen] = useState(false);\n\tconst [isModalConfirmSaveOpen, setIsModalConfirmSaveOpen] = useState(false);\n\tconst [mode, setMode] = useState('add');\n\tconst [dataResponse, setDataResponse ] = useState([]);\n\tconst [moduleName, setModuleName] = useState('')\n\tconsole.log(setLoading, props);\n\tconst sideBarItems = [\n\t\t{\n\t\t\tname: 'Policies',\n\t\t\t// label: 'POLICY'\n\t\t},\n\t\t{\n\t\t\tname: 'Groups And Users',\n\t\t\t// label: 'GROUPIE'\n\t\t},\n\t];\n\n\tReact.useEffect(() => {\n\t\tif (props.match.params.id && props.match.params.id !== 'add-role') {\n\t\t\thandleGetRoleData();\n\t\t}\n\t\tif (props) {\n\t\t\tif (props.location) {\n\t\t\t\tif (props.location.state) {\n\t\t\t\t\tif (props.location.state.from) {\n\t\t\t\t\t\tsetModuleName(props.location.state.from)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},[]);\n\n\tconst handleGetRoleData = () => {\n\t\tgetRoleData(props.match.params.id).then(response => {\n\t\t\tsetDataResponse(response[0]);\n\t\t\tsetMode('view');\n\t\t\tsetLoading(false)\n\t\t}).catch(err => {\n\t\t\tconsole.log(err);\n\t\t\tsetLoading(false)\n\t\t})\n\t}\n\n\tconst handleGetGroupsAndUsers = () => {\n\t\t\n\t}\n\n\tconst breadCrumbs = [\n\t\t'ROLES',\n\t\t'TECHNICAL ADMIN'\n\t];\n\n\tconst editRole = () => {\n\t\tsetViewOnly(false);\n\t\tsetMode('edit');\n\t\tconsole.log(setActiveItem, 'yes edit');\n\t}\n\n\tconst activeSideBarItem = (item) => {\n\t\tsetActiveItem(item);\n\t\tsetViewOnly(true);\n\t\tif (item === 'Policies') {\n\t\t\tif (props.match.params.id && props.match.params.id !== 'add-role') {\n\t\t\t\thandleGetRoleData();\n\t\t\t}\n\t\t} else if (item === 'Groups And Users'){\n\t\t\thandleGetGroupsAndUsers();\n\t\t}\n\n\t}\n\n\tconst handleModalConfirmationClose = () => {\n\t\tsetIsModalConfirmSaveOpen(false);\n\t\tsetIsModalConfirmExitOpen(false);\n\t}\n\n\n\n\treturn (\n\t\t<>\n\t\t\t<SubHeader\n\t\t\t\theadingTitle={'Technical Admin'}\n\t\t\t\tbreadCrumbsArray={breadCrumbs}\n\t\t\t\tbuttonFunc={editRole}\n\t\t\t\tbuttonName={'Edit Role'}\n\t\t\t\tlayoutType={'layout_1'}\n\t\t\t\tenableButton={mode !== 'add' ? true : false}\n\t\t\t></SubHeader>\n\t\t\t<div className={classes.main}>\n\t\t\t\t{loading ?\n\t\t\t\t\t(<LoadingIndicator />) : null\n\t\t\t\t}\n\t\t\t\t<Grid container xs={12}>\n\t\t\t\t\t<Grid item xs={3} className={classes.sideBarContainer}>\n\t\t\t\t\t\t<SideMenu\n\t\t\t\t\t\t\titems={sideBarItems}\n\t\t\t\t\t\t\tactiveItems={activeSideBarItem}\n\t\t\t\t\t\t></SideMenu>\n\t\t\t\t\t</Grid>\n\t\t\t\t\t<Grid item xs={9} className={classes.contentContainer}>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tactiveItem == 'Policies' && <Policies moduleName={moduleName} rows={dataResponse} mode={mode} classes={classes} viewOnly={viewOnly}></Policies>\n\t\t\t\t\t\t}\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tactiveItem == 'Groups And Users' && <GroupsAndUsers rows={dataResponse} classes={classes} viewOnly={viewOnly}></GroupsAndUsers>\n\t\t\t\t\t\t}\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</div>\n\t\t\t<ModalComponent\n\t\t\t\tisModalOpen={isModalConfirmSaveOpen}\n\t\t\t\tonClose={handleModalConfirmationClose}\n\t\t\t\tmessage={'Save all changes made?'}\n\t\t\t\ttitle={'Confirmation'}\n\t\t\t\tbuttons={\n\t\t\t\t\t<Grid container justify=\"center\" alignItems=\"center\">\n\t\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t\t<Button onClick={() => { setIsModalConfirmSaveOpen(false) }} className={classes.button} variant={'outlined'} color={'secondary'}>Cancel</Button>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t\t<Button className={classes.button} variant={'contained'} color={'primary'}>Save</Button>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n\t\t\t\t}\n\t\t\t/>\n\t\t\t<ModalComponent\n\t\t\t\tisModalOpen={isModalConfirmExitOpen}\n\t\t\t\tonClose={handleModalConfirmationClose}\n\t\t\t\tmessage={'Exit and remove all changes made?'}\n\t\t\t\ttitle={'Confirmation'}\n\t\t\t\tbuttons={\n\t\t\t\t\t<Grid container justify=\"center\" alignItems=\"center\">\n\t\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t\t<Button onClick={() => { setIsModalConfirmExitOpen(false) }} className={classes.button} variant={'outlined'} color={'secondary'}>Cancel</Button>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t\t<Button className={classes.button} variant={'contained'} color={'primary'}>Continue</Button>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n\t\t\t\t}\n\t\t\t/>\n\t\t</>\n\t);\n}\n\nconst mapStateToProps = (state: Store) => state.roles;\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n\tMap: bindActionCreators(RolesActions.Map, dispatch),\n});\n\nexport { mapStateToProps, mapDispatchToProps };\n"],"sourceRoot":""}