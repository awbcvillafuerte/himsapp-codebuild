{"version":3,"sources":["Pages/Lookup/Components/Loader/index.tsx","Components/UI/TableComponent/ReactTable.tsx","Pages/Users/ActionConsts.ts","Pages/Users/UsersActions.ts","Pages/Users/Sections/UsersTable/RolesTableList.tsx","Pages/Users/Tabs/Account/TableComponent.tsx","Pages/Users/Tabs/Account/Accounts.const.ts","Pages/Users/Tabs/Account/AccountsTab.tsx","Pages/Users/Tabs/Account/Groups/Components/SideModalBody.tsx","Pages/Users/Tabs/Account/Groups/ConstructPayloads.ts","Pages/Users/Tabs/Account/Groups/index.tsx","Pages/Users/UsersPage.tsx"],"names":["useStyles","makeStyles","root","position","width","height","zIndex","right","bottom","top","left","textAlign","backgroundColor","container","outline","alignItems","justifyContent","display","flexDirection","Loader","classes","className","size","defaultProps","statusOption","value","label","Select","items","restProps","variant","style","renderValue","selected","find","item","map","i","key","FilterCell","filter","onFilter","filteringEnabled","column","name","padding","utils","MomentUtils","format","inputVariant","invalidDateMessage","onChange","date","toISOString","paddingTop","e","target","id","labelWidth","placeholder","SortingIcon","direction","marginLeft","icon","faSortUp","faSortDown","SortLabel","onSort","children","hideSortIcon","onClick","textOverflow","overflow","faSort","groupIconContentCell","expanded","verticalAlign","faAngleUp","faAngleDown","color","ReactTable","props","rows","columns","disableSort","disableFilter","enableGrouping","groupColumnName","viewOnly","message","columnExtensions","sortingStateColumnExtensions","defaultSorting","onDeleteRow","enableSelection","enableSelectAll","onRowClick","totalCount","onPageChange","currentPage","pageSize","onSetPageSize","onCheckRow","onSelectGroup","loading","onSortingChange","enableIntegratedSorting","enableOpenGroupTotalChecked","React","selection","setSelection","pageSizes","sorting","setSorting","selectCell","row","onToggle","faMinusSquare","checkedIcon","faCheckSquare","checked","stopPropagation","onCurrentPageChange","onPageSizeChange","onSelectionChange","grouping","columnName","onFiltersChange","onFilterChange","messages","noData","cellComponent","faMinusCircle","showSortingControls","sortLabelComponent","highlightRow","selectByRowClick","showSelectAll","undefined","showSelectionColumn","contentComponent","isChecked","countChecked","countItems","data","iconComponent","groupNameChecked","ActionConsts","ResetReducer","SetReducer","UsersActions","payload","type","RolesTableList","APIGetRolesList","page","limit","query","setState","skip","getRoles","state","default_filter","order","then","res","console","log","Math","ceil","count","body","catch","handleTimeOutSearchTableRoles","typingTimeout","clearTimeout","setTimeout","onSearchTableRoles","handleOnFilterChange","_filter","w","like","options","handleSortChange","sort","toUpperCase","handleRowClick","redirect_to_role","redirect_data","handleAddRole","isModuleModalOpen","handleContinueRole","moduleItems","Number","moduleValue","redirect_to_addrole","rowDataFixer","array","newEntry","length","forEach","newRow","hasOwnProperty","group","role_id","associate_groups","associated_groups","x","module","status","textTransform","push","title","_self","this","to","pathname","_id","from","Grid","spacing","xs","md","ReactSearch","onSearch","faDownload","addFieldIcon","Link","linkStyleSelected","faPlus","defaultFilters","ModalComponent","isModalOpen","onClose","buttons","justify","Button","button","margin","BasicSelect","menuItems","COLUMN_EXTENSIONS","wordWrapEnabled","disabled","renderSortable","sortingEnabled","TableComponent","useState","getRowId","userTableColumn","tableConst","cursor","fontSize","marginRight","searchSection","marginBottom","fontWeight","tableTop","searchTabAction","AccountTabPage","useEffect","getUsers","offset","newState","saveSummary","setLoading","getUserList","where","error","updateTableState","setSummary","summary","setStatuses","statuses","prop","setTableState","tableStates","isLoading","isRowClicked","setIsRowClicked","userIdSelected","setUserIdSelected","setTypingTimeout","LoadingIndicator","GenerateReport","boxShadow","Object","entries","total_users","active_users","deactivated_users","first_name","full_name","roles","expiry_date","moment","last_login","statusOptions","or","middle_name","last_name","a","values","join","theme","input","formControl","minWidth","maxWidth","chips","flexWrap","chip","selectedItems","borderRadius","selectedText","paddingRight","noLabel","marginTop","inputLabel","errorLabel","saveButton","cancelAdd","closeButton","modal","paper","palette","background","border","cancelButton","userAlignRight","inputLabel1","errorIcon","keyboardDatePicker","SideModalBody","refreshData","selectedDate","setSelectedDate","selectedDate2","setSelectedDate2","isFetching","setIsFetching","selectedDepartment","setSelectedDepartment","buttonLeft","method","buttonRight","open","mode","confirmModalProps","setConfirmModalProps","selectedSuperVisor","setSelectedSuperVisor","userOption","setUserOption","description","department","effectivity_date","errorMessages","setErrorMessages","modalProps","setModalProps","reports_to","amount_limit","groupData","setGroupData","fieldValidation","setFieldValidation","departments","setDepartments","getDepartments","choices","handleCloseSideAndSuccess","d","beauty","err","userOptionBeautifier","handleAll","event","handleCloseConfirmationModal","handleClose","confirmCancel","handleClose2","fetchUserOption","cb","searchResult","handlePrimaries","users","user","option","o","handleSubmit","addNewGroup","resp","handleCloseSide","JSON","stringify","validationAlgorithm","bodyRequest","optionalFields","valid","invalid","payloadObject","includes","preValid","assign","fromEntries","f","InputLabel","TextField","fullWidth","required","lg","labelFontSize","Dropdown","isMulti","closeOnSelect","isCreatable","__isNew__","allowKeyboardControl","inputProps","newDate","handleEffectivityDateChange","Typography","minDate","clearable","handleExpireDateChange","async","fetchOption","test","Modal","aria-labelledby","aria-describedby","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","List","ListItemText","faTimes","EmptyAddGroup","GroupsTabPage","APIGetGroupList","getGroups","handleTimeOutSearchTableGroups","onSearchTableGroups","group_id","redirect_to_group","handleAddGroup","handleCloseSideModalBlock","show_side_modal_block","side_modal_block_mode","add_group","handleOpenBlock","passDataToSideModalBlockBody","handleInvalidFieldsPrompts","modalTitle","modalMessage","handleSaveGroup","handleChangeSideModalBlockMode","redirect_to_addgroup","invalid_fields","disableSaveButton","clickSaveButton","confirm_modal_message","confirm_modal_open","confirm_modal_title","action_after_confirm","department_dropdown_choices","departmentDropdown","reports_to_dropdown_choices","reportsToDropdown","blockPosition","editIconDescription","showBlock","sideModalBlockMode","addFieldIcone","renderSideModalBlock","Component","page_tab_titles","UsersTabs","withStyles","indicator","Tabs","UsersTab","paddingLeft","textDecoration","Tab","gridContainerNoPadding","sectionTitle","subSectionTitle","fieldGroupTitle","dropzone","checkbox","radio","appBar","breakpoints","up","grow","flexGrow","minHeight","buttonTitle","buttonSubTitle","gridContainer","breadCrumbs","headerTitle","paddingBottom","linkPrevious","sideBar","borderRight","selectedpage","linkCurrent","main","gridItemLayout","avatar","sideNavHeader","listItemTextRoot","flex","listItemTextPrimarySelected","listItemTextPrimaryNotSelected","addACode","codeHeader","opacity","letterSpacing","textAlignLast","codeItems","codeListItems","UsersPage","selectedTab","setSelectedTab","getLastSegment","_event","tab","aria-label","index","aria-controls","mapStateToProps","mapDispatchToProps","dispatch","Map","bindActionCreators"],"mappings":"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","file":"static/js/5.7a281c22.chunk.js","sourcesContent":["import * as React from 'react';\nimport { CircularProgress } from '@material-ui/core/';\nimport { makeStyles } from '@material-ui/core/styles';\n\ninterface LoaderProps {\n}\n\nconst useStyles = makeStyles({\n\troot: {\n        position: 'fixed',\n        width: '100%',\n        height: '100%',\n        zIndex: 9999,\n        right: '0px',\n        bottom: '0px',\n        top: '0px',\n        left: '0px',\n        textAlign: \"center\",\n        backgroundColor: 'rgba(0, 0, 0, 0.5)'\n    },\n    container:{\n        height: '100%',\n        outline: 0,\n        alignItems: 'center',\n        justifyContent: 'center',\n        display: 'flex',\n        flexDirection: 'column'\n    }\n});\n\nexport const Loader: React.FC<LoaderProps> = (): JSX.Element => {\n    // const buttonclasses = ButtonStyle();\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            <div className={classes.container}>\n                <CircularProgress size={150}/>\n            </div>\n        </div>\n    )\n}\n\nLoader.defaultProps = {}","import * as React from 'react';\n// import { useState } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport {\n    FilteringState,\n    SortingState,\n    IntegratedSorting,\n    IntegratedGrouping,\n    GroupingState,\n    SelectionState,\n    // IntegratedPaging,\n    PagingState,\n    CustomPaging,\n} from '@devexpress/dx-react-grid';\nimport {\n    Grid,\n    Table,\n    //   Toolbar,\n    TableHeaderRow,\n    TableFilterRow,\n    TableGroupRow,\n    TableSelection,\n    PagingPanel,\n    // TableFixedColumns,\n} from '@devexpress/dx-react-grid-material-ui';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n    // faSearch,\n    faCheckSquare,\n    faMinusSquare,\n    faSort,\n    faSortUp,\n    faSortDown,\n    faMinusCircle,\n    faAngleDown,\n    faAngleUp,\n    // faPlus,\n    // faCheck, \n    // faTimes\n} from '@fortawesome/free-solid-svg-icons';\nimport * as MaterialUI from '@material-ui/core';\nimport { Loader } from 'Pages/Lookup/Components/Loader';\nimport './ReactTable.scss';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers'\nimport MomentUtils from '@date-io/moment'\n\n// import { ReactSearch } from '../SearchBar/ReactSearch';\n\nexport interface IReactTableProps {\n    rows: any,\n    columns: any,\n    disableSort?: boolean,\n    disableFilter?: boolean,\n    enableIntegratedSorting?: boolean,\n    enableGrouping?: boolean,\n    enableSelection?: boolean,\n    enableSelectAll?: boolean,\n    enableOpenGroupTotalChecked?: boolean,\n    groupColumnName?: string,\n    viewOnly?: boolean,\n    columnExtensions?: any[],\n    message?: string,\n    sortingStateColumnExtensions?: any[],\n    defaultSorting?: any[],\n    totalCount?: number,\n    currentPage?: number,\n    pageSize?: number,\n    groupNameChecked?: any,\n    loading?: boolean,\n    defaultFilters?: any,\n    onDeleteRow?: (row) => void,\n    onRowClick?: (row) => void,\n    onPageChange?: (page) => void,\n    onSetPageSize?: (size) => void,\n    onCheckRow?: (row) => void,\n    onSelectGroup?: (group) => void,\n    onFilterChange?: (filter) => void,\n    onSortingChange?: (sort) => void,\n\n}\n\nconst defaultProps: IReactTableProps = {\n    rows: [],\n    columns: [],\n    enableIntegratedSorting: false,\n    disableSort: false,\n    disableFilter: false,\n    enableGrouping: false,\n    enableSelection: false,\n    enableSelectAll: false,\n    enableOpenGroupTotalChecked: false,\n    groupColumnName: '',\n    viewOnly: true,\n    columnExtensions: [],\n    message: '',\n    sortingStateColumnExtensions: [],\n    defaultSorting: [],\n    totalCount: 0,\n    currentPage: 0,\n    pageSize: 0,\n    groupNameChecked: [],\n    loading: false,\n}\n\nconst statusOption = [\n    {\n        value: 'all',\n        label: 'All',\n    },\n    {\n        value: 'active',\n        label: 'Active'\n    },\n    {\n        value: 'deactivated',\n        label: 'Deactivated'\n    },\n    {\n        value: 'awaiting activation',\n        label: 'Awaiting activation'\n    }\n]\n\nconst Select = ({ items, ...restProps }: any) => {\n    return (\n        <MaterialUI.Select\n            variant='outlined'\n            style={{ width: '100%' }}\n            renderValue={(selected: any) => {\n                if (selected != null) {\n                    const value: any = items.find((item: any) => {\n                        return item.value === selected;\n                    });\n                    if (value) {\n                        return value.label;\n                    } else {\n                        return '——';\n                    }\n                }\n                return '——';\n            }}\n            {...restProps}\n        >\n            {items.map((item: any, i: number) => (\n                <MaterialUI.MenuItem key={i} value={item.value}>\n                    {item.label}\n                </MaterialUI.MenuItem>\n            ))}\n        </MaterialUI.Select>\n    );\n};\n\nconst FilterCell = ({ filter, onFilter, filteringEnabled, classes, column }: any) => {\n    if (filteringEnabled) {\n        if (column.name === 'action_delete') {\n            return (\n                <MaterialUI.TableCell style={{ padding: '0px 10px 8px 10px' }} classes={classes}>\n                </MaterialUI.TableCell>\n            )\n        } else if (column.name === 'last_login') {\n            return (\n                <MaterialUI.TableCell style={{ padding: '0px 10px 8px 10px' }} classes={classes}>\n                    <MuiPickersUtilsProvider utils={MomentUtils}>\n                        <KeyboardDatePicker\n                            variant=\"dialog\"\n                            format=\"MMMM DD, YYYY\"\n                            inputVariant=\"outlined\"\n                            value={filter ? filter.value : ''}\n                            invalidDateMessage=\"\"\n                            onChange={date => { onFilter(date ? { value: date.toISOString() } : null) }}\n                        />\n                    </MuiPickersUtilsProvider>\n                </MaterialUI.TableCell>\n            )\n        } else if (column.name === 'status') {\n            return (\n                <MaterialUI.TableCell classes={classes} style={{ paddingTop: '5px' }}>\n                    <Select\n                        onChange={e => onFilter(e.target.value ? { value: e.target.value } : null)}\n                        name={'status'}\n                        items={statusOption}\n                        id={'status'}\n                        value={filter ? filter.value : ''}\n                    />\n                </MaterialUI.TableCell>\n            )\n        } else {\n            return (\n                <MaterialUI.TableCell style={{ padding: '0px 10px 8px 10px' }} classes={classes}>\n                    <MaterialUI.OutlinedInput\n                        classes={classes}\n                        style={{ width: '100%' }}\n                        value={filter ? filter.value : ''}\n                        labelWidth={0}\n                        onChange={e => onFilter(e.target.value ? { value: e.target.value } : null)}\n                        placeholder=\"\"\n                    />\n                </MaterialUI.TableCell>\n            );\n        }\n    }\n    return null;\n}\n\nconst SortingIcon = ({ direction }: any) =>\n    direction === 'asc' ? (\n        <FontAwesomeIcon style={{ marginLeft: '10px' }} icon={faSortUp} />\n    ) : (\n            <FontAwesomeIcon style={{ marginLeft: '10px' }} icon={faSortDown} />\n        );\n\nconst SortLabel = ({ column, onSort, children, direction }: any) => {\n    if (column.name === 'action_delete') {\n        return null;\n    } else {\n        return (\n            <MaterialUI.TableSortLabel hideSortIcon={true} onClick={onSort} style={{ textOverflow: \"ellipsis\", overflow: \"hidden\" }}>\n                {children}\n                {direction ? (\n                    <SortingIcon direction={direction} />\n                ) : (\n                        <FontAwesomeIcon style={{ marginLeft: '10px' }} icon={faSort} />\n                    )}\n            </MaterialUI.TableSortLabel>\n        );\n    }\n};\n\n\nconst groupIconContentCell = ({ expanded }: any) => {\n    return (\n        <>\n            <div style={{ padding: '8.5px 12px', display: 'table-cell', verticalAlign: 'middle' }} >\n                <FontAwesomeIcon\n                    icon={expanded ? faAngleUp : faAngleDown}\n                    size={'2x'}\n                    color={\"rgba(0, 0, 0, 0.54)\"}\n                />\n            </div>\n        </>\n    )\n}\n\n\n\nexport const ReactTable: React.FC<IReactTableProps> = (props: IReactTableProps): JSX.Element => {\n    const {\n        rows,\n        columns,\n        disableSort,\n        disableFilter,\n        enableGrouping,\n        groupColumnName,\n        viewOnly,\n        message,\n        columnExtensions,\n        sortingStateColumnExtensions,\n        defaultSorting,\n        onDeleteRow,\n        enableSelection,\n        enableSelectAll,\n        onRowClick,\n        totalCount,\n        onPageChange,\n        currentPage,\n        pageSize,\n        onSetPageSize,\n        onCheckRow,\n        onSelectGroup,\n        // groupNameChecked,\n        loading,\n        onSortingChange,\n        enableIntegratedSorting,\n        enableOpenGroupTotalChecked\n    } = props;\n\n    const [selection, setSelection] = React.useState<any>([])\n    const [pageSizes] = React.useState([5, 10, 15]);\n    const [sorting, setSorting] = React.useState([])\n    // const [pageSize, setPageSize] = React.useState(10);\n    // console.log(onCheckRow, onSelectGroup)\n\n    const setSortingMethod = (e: any) => {\n        onSortingChange && onSortingChange(e)\n        setSorting(e);\n    }\n    const handleSelectionChange = (row: any[]) => {\n        if (onRowClick) {\n            if (!enableSelection) {\n                onRowClick(row[0]);\n            }\n        } else {\n            setSelection(row);\n        }\n    }\n\n    const selectCell = ({ row, onToggle }: any) => {\n        return (\n            <MaterialUI.TableCell>\n                <MaterialUI.Checkbox\n                    icon={<FontAwesomeIcon icon={faMinusSquare} />}\n                    checkedIcon={<FontAwesomeIcon icon={faCheckSquare} />}\n                    checked={row.checked}\n                    onClick={(e: any) => {\n                        e.stopPropagation();\n                        onToggle();\n                        onCheckRow && onCheckRow(row);\n                    }}\n                />\n            </MaterialUI.TableCell>\n        )\n    }\n\n\n    const groupContentCell = ({ row }: any) => {\n\n        let isChecked = false;\n        let countChecked = 0;\n        let countItems = 0;\n        rows.map(data => {\n            if (data.name === row.value) {\n                countItems++;\n                if (data.checked) {\n                    isChecked = true;\n                    countChecked++;\n                }\n            }\n        })\n\n        if (!viewOnly) {\n            return (\n                <>\n                    <div style={{ padding: '8.5px 15.5px', display: 'table-cell', verticalAlign: 'middle' }} >\n                        <MaterialUI.Checkbox\n                            icon={<FontAwesomeIcon icon={faMinusSquare} />}\n                            checkedIcon={<FontAwesomeIcon icon={faCheckSquare} />}\n                            checked={isChecked}\n                            onClick={e => {\n                                e.stopPropagation();\n                                onSelectGroup && onSelectGroup(row.value)\n                            }}\n                        />\n                    </div>\n                    <div style={{ padding: '8.5px 2px', display: 'table-cell', verticalAlign: 'middle' }} >\n                        <span>{row.value}</span>\n                    </div>\n                    <div style={{ padding: '8.5px 30px', display: 'table-cell', verticalAlign: 'middle' }} >\n                        <span>{countChecked}/{countItems}</span>\n                    </div>\n                </>\n            )\n        } else if (viewOnly && enableOpenGroupTotalChecked) {\n            return (\n                <>\n                    <div style={{ padding: '8.5px 2px', display: 'table-cell', verticalAlign: 'middle' }} >\n                        <span>{row.value}</span>\n                    </div>\n                    <div style={{ padding: '8.5px 30px', display: 'table-cell', verticalAlign: 'middle' }} >\n                        <span>{countChecked}/{countItems}</span>\n                    </div>\n                </>\n            )\n        } else {\n            return (\n                <div style={{ padding: '8.5px 2px', display: 'table-cell', verticalAlign: 'middle' }} >\n                    <span>{row.value}</span>\n                </div>\n            )\n        }\n\n    }\n\n    const tableCell = ({ value, row, column }: any) => {\n        if (column.name === 'action_delete') {\n            return (\n                <MaterialUI.TableCell style={{ padding: '0px 30px 8px 10px', textAlign: 'right' }}>\n\n                    <span\n                        onClick={() => {\n                            onDeleteRow && onDeleteRow(row)\n                        }}>\n\n                        <FontAwesomeIcon\n                            icon={faMinusCircle}\n                        />\n                    </span>\n\n                </MaterialUI.TableCell>\n            )\n        } else {\n            return (\n                <MaterialUI.TableCell>\n                    {value}\n                </MaterialUI.TableCell>\n            )\n        }\n    }\n\n\n    return (\n        <div style={{ padding: '10px 0' }}>\n            <Paper>\n                <Grid\n                    rows={rows}\n                    columns={columns}\n                >\n                    <PagingState\n                        currentPage={currentPage}\n                        onCurrentPageChange={onPageChange}\n                        pageSize={pageSize}\n                        onPageSizeChange={onSetPageSize}\n                    />\n                    <CustomPaging\n                        totalCount={totalCount}\n                    />\n                    {!disableSort && onSortingChange ? (\n                        <SortingState\n                            defaultSorting={defaultSorting}\n                            columnExtensions={sortingStateColumnExtensions}\n                            sorting={sorting}\n                            onSortingChange={setSortingMethod}\n                        />\n                    ) : !disableSort ? (\n                        <SortingState\n                            defaultSorting={[]}\n                        />\n                    ) : null}\n                    {!viewOnly ? <SelectionState\n                        selection={selection}\n                        onSelectionChange={handleSelectionChange}\n                    /> : null}\n                    {enableGrouping && groupColumnName ? <GroupingState grouping={[{ columnName: groupColumnName }]} /> : null}\n                    {!disableFilter ?\n                        <FilteringState\n                            onFiltersChange={props.onFilterChange}\n                        /> : null}\n                    {/* <IntegratedPaging /> */}\n                    {enableIntegratedSorting ? <IntegratedSorting /> : null}\n                    {enableGrouping ? <IntegratedGrouping /> : null}\n                    <Table\n                        columnExtensions={columnExtensions}\n                        messages={{ noData: message }}\n                        cellComponent={tableCell}\n                    />\n                    <TableHeaderRow\n                        showSortingControls={!disableSort}\n                        sortLabelComponent={SortLabel}\n                    />\n                    {/* <TableFixedColumns /> */}\n                    <PagingPanel\n                        pageSizes={enableGrouping ? [30, 40, 50] : pageSizes}\n                    />\n                    {!viewOnly ?\n                        <TableSelection\n                            highlightRow\n                            selectByRowClick\n                            showSelectAll={enableSelectAll ? true : undefined}\n                            cellComponent={!loading ? selectCell : selectCell}\n                            showSelectionColumn={enableSelection}\n                        /> : null}\n\n                    {enableGrouping ?\n                        <TableGroupRow\n                            contentComponent={groupContentCell}\n                            iconComponent={groupIconContentCell}\n                        ></TableGroupRow> : null}\n                    {!disableFilter ? <TableFilterRow cellComponent={FilterCell} /> : null}\n                </Grid>\n                {\n                    loading &&\n                    <Loader />\n                }\n            </Paper>\n        </div>\n    )\n}\n\nReactTable.defaultProps = defaultProps;","export const ActionConsts = {\n\tUsers: {\n\t\tResetReducer: 'Users_ResetReducer',\n\t\tSetReducer: 'Users_SetReducer',\n\t},\n};\n","//#region Global Imports\n// import { Dispatch } from 'redux';\n//#endregion Global Imports\n\n//#region Local Imports\nimport { ActionConsts } from './ActionConsts';\n// import { PlanetaryService } from 'Components/Services';\n//#endregion Local Imports\n\n//#region Interface Imports\n//#endregion Interface Imports\n\nexport const UsersActions = {\n\tMap: (payload: []) => ({\n\t\tpayload,\n\t\ttype: ActionConsts.Users.SetReducer,\n\t}),\n\n\tReset: () => ({\n\t\ttype: ActionConsts.Users.ResetReducer,\n\t}),\n\n\t// GetApod: (payload) => async (dispatch: Dispatch) => {\n\n\t// },\n};\n","import * as React from 'react';\nimport {\n    Grid,\n    // InputLabel, \n    // Typography,\n    Link,\n    Button\n} from '@material-ui/core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faDownload } from '@fortawesome/free-solid-svg-icons';\nimport { ReactTable } from 'Components/UI/TableComponent/ReactTable';\nimport { ReactSearch } from 'Components/UI/SearchBar/ReactSearch';\nimport { getRoles } from 'Pages/API/Calls/Roles';\nimport { Redirect } from 'react-router-dom';\nimport { Loader } from 'Pages/Lookup/Components/Loader';\nimport { ModalComponent } from 'Components/UI/ModalComponent/ModalComponent';\nimport BasicSelect from 'Components/UI/BasicSelect'\n\ninterface IProps {\n    classes: any;\n}\n\ninterface IState {\n    rows: any;\n    columns: any;\n    loading: boolean;\n    redirect_to_role: boolean;\n    redirect_to_addrole: boolean;\n    redirect_data: any;\n    isModuleModalOpen: boolean;\n    moduleItems: any[];\n    moduleValue: number;\n    totalCount: number;\n    currentPage: number;\n    limit: number;\n    order: string;\n    typingTimeout: any;\n    default_filter: any;\n    query: string;\n    skip: number;\n}\n\nexport class RolesTableList extends React.Component<IProps, IState> {\n    constructor(props) {\n        super(props);\n        const moduleItems = [\n            {\n                name: 'User Management',\n                value: 0\n            },\n            {\n                name: 'Membership',\n                value: 1\n            },\n            {\n                name: 'Underwriting',\n                value: 2\n            },\n            {\n                name: 'Customer Care',\n                value: 3\n            },\n            {\n                name: 'Claims',\n                value: 4,\n            },\n            {\n                name: 'Franchising',\n                value: 5,\n            },\n            {\n                name: 'Billing and Collections',\n                value: 6,\n            },\n            {\n                name: 'Partner Network',\n                value: 7,\n            }\n        ]\n        const columns = [\n            {\n                name: 'name',\n                title: 'Role Name',\n            },\n            {\n                name: 'role_id',\n                title: 'Role ID',\n            },\n            {\n                name: 'associate_groups',\n                title: 'Associated Groups',\n            },\n            {\n                name: 'module',\n                title: 'Module',\n            },\n            {\n                name: 'status',\n                title: 'Status',\n            },\n        ];\n\n        this.state = {\n            loading: true,\n            columns: columns,\n            rows: [],\n            redirect_to_role: false,\n            redirect_to_addrole: false,\n            redirect_data: [],\n            isModuleModalOpen: false,\n            moduleItems: moduleItems,\n            moduleValue: 0,\n            totalCount: 0,\n            currentPage: 0,\n            typingTimeout: 0,\n            limit: 10,\n            order: '',\n            default_filter: [],\n            query: '',\n            skip: 0\n        }\n    }\n\n\n\n    componentDidMount() {\n        let _self = this;\n        this.setState({\n            loading: true,\n        }, () => {\n            _self.APIGetRolesList(this.state.currentPage, this.state.limit, this.state.query);\n        });\n    }\n\n    APIGetRolesList = (page: number, limit: number, query: string) => {\n        this.setState({\n            loading: true,\n        })\n\n        let skip = page * limit\n\n        this.setState({\n            currentPage: page\n        }, () => {\n            this.setState({\n                skip: skip\n            })\n        })\n\n\n        let filter = {\n            limit: limit,\n            skip: skip\n        }\n\n        getRoles(filter, this.state.default_filter, this.state.order, query).then(res => {\n            console.log((Math.ceil(res.count / limit) - 1))\n            console.log(res.body)\n            this.setState({\n                rows: res.body,\n                loading: false,\n                totalCount: res.count,\n                currentPage: this.state.currentPage > (Math.ceil(res.count / limit) - 1) ? (Math.ceil(res.count / limit) - 1) : page,\n                limit: limit\n            });\n\n            // console.log(this.state.rows)\n\n        }).catch(() => {\n            this.setState({\n                rows: [],\n                loading: false,\n                totalCount: 0,\n            });\n        })\n    }\n\n\n    handleTimeOutSearchTableRoles = (data) => {\n        if (this.state.typingTimeout) {\n            clearTimeout(this.state.typingTimeout);\n        }\n        this.setState({\n            currentPage: 0\n        }, () => {\n            this.setState({\n                query: data,\n                typingTimeout: setTimeout(() => {\n                    this.setState({\n                        loading: true,\n                    })\n                    this.APIGetRolesList(this.state.currentPage, this.state.limit, this.state.query);\n                }, 3000)\n            })\n        })\n    }\n\n    onSearchTableRoles = () => {\n\n        if (this.state.typingTimeout) {\n            clearTimeout(this.state.typingTimeout)\n        }\n\n        this.setState({\n            loading: true,\n            currentPage: 0\n        }, () => {\n            this.APIGetRolesList(0, this.state.limit, this.state.query);\n        })\n\n\n    }\n\n    handleOnFilterChange = (filter) => {\n\n        let _filter: any = {};\n\n        if (this.state.typingTimeout) {\n            clearTimeout(this.state.typingTimeout)\n        }\n\n        filter.map(w =>\n\n            w.columnName === 'status' ?\n                w.value !== 'all' ?\n                    _filter[w.columnName] = `${w.value}` : ''\n                : w.columnName === 'associate_groups' ?\n                    _filter['associated_groups.name'] = {\n                        like: `${w.value}.*`,\n                        options: 'i'\n                    }\n                    : _filter[w.columnName] = {\n                        like: `${w.value}.*`,\n                        options: 'i'\n                    }\n        )\n\n        this.setState({\n            default_filter: _filter,\n            currentPage: 0,\n            typingTimeout: setTimeout(() => {\n                this.setState({\n                    loading: true,\n                })\n                this.APIGetRolesList(this.state.currentPage, this.state.limit, this.state.query);\n            }, 1500)\n        })\n    }\n\n    handleSortChange = (sort) => {\n        this.setState({\n            order: `${sort[0].columnName} ${sort[0].direction.toUpperCase()}`,\n            loading: true,\n        },\n            () => {\n                this.APIGetRolesList(this.state.currentPage, this.state.limit, this.state.query)\n            }\n        )\n    }\n\n    handleRowClick = (row) => {\n        var data = this.state.rows;\n        this.setState({\n            redirect_to_role: true,\n            redirect_data: data[row]\n        })\n    }\n\n    handleAddRole = () => {\n        console.log('handleAddRole');\n        this.setState({\n            isModuleModalOpen: true,\n        })\n    }\n\n    handleContinueRole = () => {\n        var data = this.state.moduleItems[Number(this.state.moduleValue)].name;\n        console.log(data, 'datawew');\n        this.setState({\n            redirect_to_addrole: true,\n            redirect_data: data\n        })\n    }\n\n\n    rowDataFixer = (array: any) => {\n        let newEntry: any = [];\n        if (array.length > 0) {\n            array.forEach(data => {\n                let newRow = {\n                    ...data,\n                    name: data.hasOwnProperty('name') ? data.name : 'N/A',\n                    group: data.hasOwnProperty('role_id') ? data.role_id : 'N/A',\n                    associate_groups: data.hasOwnProperty('associated_groups') && data.associated_groups.length > 0 ?\n                        data.associated_groups.map((x, i) => `${x.name}${i !== (data.associated_groups.length - 1) ? ', ' : ''}`) : 'N/A',\n                    module: data.hasOwnProperty('module') ? data.module : 'N/A',\n                    status: data.hasOwnProperty('status') ? <span style={{ textTransform: 'capitalize' }}>{data.status}</span> : 'N/A',\n                }\n\n                newEntry.push(newRow)\n            })\n\n            return newEntry\n        }\n\n        return []\n    }\n\n\n\n\n\n    render(): JSX.Element {\n\n        if (this.state.redirect_to_role) {\n            return (\n                <>\n                    <Redirect\n                        to={{\n                            pathname: '/system-admin/roles/' + this.state.redirect_data._id,\n                        }}\n                    />\n                </>\n            );\n        }\n        if (this.state.redirect_to_addrole) {\n            return (\n                <Redirect\n                    to={{\n                        pathname: '/system-admin/add-roles',\n                        state: { from: this.state.redirect_data },\n                    }}\n                />\n            );\n        }\n\n        return (\n\n            <div>\n\n                {this.state.loading ? <Loader /> : null}\n                <Grid container alignItems={'center'} style={{ textAlign: 'center' }} spacing={4}>\n                    <Grid item xs={8} md={9}>\n                        <ReactSearch\n                            placeholder={'Search a role'}\n                            onSearch={this.onSearchTableRoles}\n                            onChange={this.handleTimeOutSearchTableRoles}\n                        />\n                    </Grid>\n                    <Grid item xs={4} md={3}>\n                        <Grid container>\n                            <Grid item xs={6}>\n                                <FontAwesomeIcon icon={faDownload} className={this.props.classes.addFieldIcon} />\n                                <Link className={this.props.classes.linkStyleSelected}>Generate Report</Link>\n                            </Grid>\n                            <Grid item xs={6}>\n                                <FontAwesomeIcon icon={faPlus} className={this.props.classes.addFieldIcon} />\n                                <Link className={this.props.classes.linkStyleSelected} onClick={() => this.handleAddRole()}>Add Role</Link>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <ReactTable\n                    rows={this.rowDataFixer(this.state.rows)}\n                    columns={this.state.columns}\n                    message={'There are no user roles to show yet.'}\n                    viewOnly={false}\n                    enableSelection={false}\n                    onRowClick={this.handleRowClick}\n                    totalCount={this.state.totalCount}\n                    currentPage={this.state.currentPage}\n                    pageSize={this.state.limit}\n                    defaultFilters={this.state.default_filter}\n                    onFilterChange={this.handleOnFilterChange}\n                    onSortingChange={this.handleSortChange}\n                    onSetPageSize={(size: any) => {\n                        this.APIGetRolesList(this.state.currentPage, size, this.state.query);\n                    }}\n                    onPageChange={(page: any) => {\n                        this.APIGetRolesList(page, this.state.limit, this.state.query);\n                    }}\n                />\n\n                <ModalComponent\n                    isModalOpen={this.state.isModuleModalOpen}\n                    onClose={() => {\n                        this.setState({\n                            isModuleModalOpen: false\n                        })\n                    }}\n                    message={'Select a module for the role you will create:'}\n                    title={'Choose a Module'}\n                    buttons={\n                        <Grid container justify=\"center\" alignItems=\"center\" style={{ textAlign: 'center' }}>\n                            <Grid item xs={6}>\n                                <Button\n                                    onClick={() => {\n                                        this.setState({\n                                            isModuleModalOpen: false\n                                        })\n                                    }}\n                                    variant={'outlined'}\n                                    color={'secondary'}\n                                    className={this.props.classes.button}\n                                >Cancel</Button>\n                            </Grid>\n                            <Grid item xs={6}>\n                                <Button className={this.props.classes.button} variant={'contained'} color={'primary'} onClick={() => this.handleContinueRole()}>Continue</Button>\n                            </Grid>\n                        </Grid>\n                    }\n                >\n                    <div style={{ width: '90%', margin: 'auto' }}>\n                        <BasicSelect\n                            menuItems={this.state.moduleItems}\n                            width={'100%'}\n                            value={this.state.moduleValue}\n                            onChange={(e: any) => {\n                                this.setState({\n                                    moduleValue: e.target.value\n                                })\n                            }}\n                        />\n                    </div>\n                </ModalComponent>\n            </div>\n        )\n    }\n}","import React from 'react'\n\nimport {\n    Grid,\n    VirtualTable,\n    TableHeaderRow,\n    TableSelection,\n    PagingPanel,\n    TableFilterRow\n} from '@devexpress/dx-react-grid-material-ui'\n\nimport {\n    PagingState,\n    CustomPaging,\n    SortingState,\n    SelectionState,\n    FilteringState,\n    // IntegratedFiltering\n  } from '@devexpress/dx-react-grid'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers'\nimport MomentUtils from '@date-io/moment'\nimport {\n    faSort,\n    faSortUp,\n    faSortDown\n} from '@fortawesome/free-solid-svg-icons'\nimport * as MaterialUI from '@material-ui/core'\n\ninterface IProps {\n    rows: any[]\n    columns: any[]\n    totalCount: number\n    currentPage: number\n    pageSize: number\n    pageSizes: number[]\n    statusOptions?: any[]\n    // Evemts\n    onCurrentPageChange: (value) => void\n    onFilterChange: (value) => void\n    onPageSizeChange: (value) => void\n    onSortingChange: (value) => void\n    onRowClick: (value) => void\n}\n\nconst COLUMN_EXTENSIONS = [\n  {\n    columnName: 'username',\n    wordWrapEnabled: true,\n  },\n  {\n    columnName: 'first_name',\n    wordWrapEnabled: true,\n  },\n  {\n    columnName: 'group',\n    wordWrapEnabled: true,\n  },\n  {\n    columnName: 'roles',\n    wordWrapEnabled: true,\n  },\n];\n\nconst statusOption = [\n  {\n    value: 'all',\n    label: 'All',\n  },\n  {\n    value: 'active',\n    label: 'Active'\n  },\n  {\n    value: 'deactivated',\n    label: 'Deactivated'\n  },\n  {\n    value: 'locked',\n    label: 'Locked'\n  },\n  {\n    value: 'awaiting activation',\n    label: 'Awaiting activation'\n  }\n]\n\nconst Select = ({ items, ...restProps  }: any) => {\n  return (\n      <MaterialUI.Select\n          variant='outlined'\n          style={{ width: '100%' }}\n          renderValue={(selected: any) => {\n              if (selected != null) {\n                  const value: any = items.find((item: any) => {\n                      return item.value === selected;\n                  });\n                  if (value) {\n                      return value.label;\n                  } else {\n                      return '——';\n                  }\n              }\n              return '——';\n          }}\n          {...restProps}\n      >\n          {items.map((item: any, i: number) => (\n              <MaterialUI.MenuItem key={i} value={item.value}>\n                  {item.label}\n              </MaterialUI.MenuItem>\n          ))}\n      </MaterialUI.Select>\n  );\n};\n\nconst FilterCell = ({ filter, onFilter, filteringEnabled, classes, column }: any) => {\n  // let statuses: any[] = [];\n\n  // statusOptions && statusOptions.map((status: any) => {\n  //   statuses.push({\n  //     value: status,\n  //     label: status.charAt(0).toUpperCase() + status.substring(1)\n  //   })\n  // })\n\n  if (filteringEnabled) {\n      if (column.name === 'last_login' || column.name === 'expiry_date') {\n          return (\n            <MaterialUI.TableCell style={{ padding: '0px 10px 8px 10px' }} classes={classes}>\n              <MuiPickersUtilsProvider utils={MomentUtils}>\n                <KeyboardDatePicker\n                    disabled\n                    variant=\"dialog\"\n                    format=\"MMMM DD, YYYY\"\n                    inputVariant=\"outlined\"\n                    // className={datePickerClasses.keyboardDatePicker}\n                    value={filter ? filter.value : ''}\n                    invalidDateMessage=\"\"\n                    onChange={date => {console.log(date); onFilter(date ? { value: date.toISOString() } : null)}}\n                />\n              </MuiPickersUtilsProvider>\n            </MaterialUI.TableCell>\n          )\n      } else if (column.name === 'status') {\n        return (\n          <MaterialUI.TableCell classes={classes} style={{paddingTop: '5px'}}>\n            <Select\n                onChange={e => onFilter(e.target.value ? { value: e.target.value } : null)}\n                name={'status'}\n                items={statusOption}\n                id={'status'}\n                value={filter ? filter.value : ''}\n            />\n          </MaterialUI.TableCell>\n        )\n      } else {\n          return (\n              <MaterialUI.TableCell style={{ padding: '0px 10px 8px 10px' }} classes={classes}>\n                  <MaterialUI.OutlinedInput\n                      classes={classes}\n                      style={{ width: '100%' }}\n                      value={filter ? filter.value : ''}\n                      labelWidth={0}\n                      onChange={e => onFilter(e.target.value ? { value: e.target.value } : null)}\n                      placeholder=\"\"\n                  />\n              </MaterialUI.TableCell>\n          );\n      }\n  }\n  return null;\n}\n\nconst SortingIcon = ({ direction }: any) =>\n  direction === 'asc' ? (\n    <FontAwesomeIcon style={{ marginLeft: '10px' }} icon={faSortUp} />\n  ) : (\n    <FontAwesomeIcon style={{ marginLeft: '10px' }} icon={faSortDown} />\n  );\n\nconst renderSortable = ({ column, onSort, children, direction }: any) => {\n  if (\n      column.sortingEnabled !== undefined &&\n      column.sortingEnabled !== null &&\n      column.sortingEnabled === false\n    ) {\n      return <span>{column.title}</span>;\n    } else {\n      return (\n        <MaterialUI.TableSortLabel hideSortIcon={true} onClick={onSort}>\n          {children}\n          {direction ? (\n            <SortingIcon direction={direction} />\n          ) : (\n            <FontAwesomeIcon style={{ marginLeft: '10px' }} icon={faSort} />\n          )}\n        </MaterialUI.TableSortLabel>\n      );\n  }\n}\n\nexport const TableComponent: React.FC<IProps> = (props: IProps): JSX.Element => {\n    const {\n        rows,\n        columns,\n        totalCount,\n        currentPage,\n        pageSize,\n        pageSizes,\n        // events\n        onFilterChange,\n        onCurrentPageChange,\n        onPageSizeChange,\n        onSortingChange,\n        onRowClick,\n    } = props;\n\n    const getRowId = row => row._id;\n\n    const [selection, setSelection] = React.useState([]);\n\n    const handleSelection = (e) => {\n      setSelection(e);\n      onRowClick(e);\n    }\n\n    return (\n        <>\n            <Grid\n              getRowId={getRowId}\n              rows={rows}\n              columns={columns}>\n\n              <FilteringState\n                onFiltersChange={onFilterChange} />\n              {/* <IntegratedFiltering /> */}\n\n              <SelectionState\n                selection={selection}\n                onSelectionChange={handleSelection}\n              />\n\n              <SortingState onSortingChange={onSortingChange} />\n\n              <PagingState\n                  currentPage = {currentPage}\n                  pageSize = {pageSize}\n                  // Events\n                  onCurrentPageChange = {onCurrentPageChange}\n                  onPageSizeChange = {onPageSizeChange}\n              />\n\n              <CustomPaging totalCount = {totalCount}/>\n\n              <VirtualTable\n                columnExtensions={COLUMN_EXTENSIONS} />\n              <TableHeaderRow showSortingControls sortLabelComponent={renderSortable}/>\n              <TableFilterRow cellComponent={FilterCell} />\n\n              <TableSelection\n                selectByRowClick\n                highlightRow\n                showSelectionColumn={false}\n              />\n\n              <PagingPanel pageSizes = {pageSizes} />\n            </Grid>\n        </>\n    )\n}","export const userTableColumn = [\n    { name: 'username', title: 'Username' },\n    { name: 'first_name', title: 'Name' },\n    { name: 'group', title: 'User Group' },\n    { name: 'roles', title: 'User Role/s' },\n    { name: 'last_login', title: 'Last Login Date' },\n    { name: 'expiry_date', title: 'Expiry Date' },\n    { name: 'status', title: 'Status' }\n]\n\nexport const tableConst = [10, 15, 20]","import React from 'react'\nimport { TableComponent } from './TableComponent'\n\nimport { userTableColumn, tableConst } from './Accounts.const'\nimport { getUserList } from 'Pages/API/Calls/User'\nimport { UI } from 'Components'\nimport {\n    Grid,\n} from '@material-ui/core';\nimport { ReactSearch } from 'Components/UI/SearchBar/ReactSearch';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport Link from '@material-ui/core/Link';\nimport { Link as RouteTo } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Redirect } from 'react-router-dom'\nimport moment from 'moment';\n\nconst useStyles = makeStyles({\n    addFieldIcon: {\n        color: '#3AB77D',\n        cursor: 'pointer',\n        fontSize: '13px',\n        marginRight: '8px',\n        marginLeft: '20px'\n    },\n    searchSection: {\n        marginBottom: '21px'\n    },\n    label: {\n        color: '#272E4C',\n        fontSize: 13\n    },\n    value: {\n        color: '#3AB77D',\n        fontSize: 13,\n        fontWeight: 800,\n        marginRight: '10px'\n    },\n    tableTop: {\n        padding: '20px'\n    },\n    searchTabAction: {\n        display: 'flex',\n        justifyContent: 'flex-end'\n    },\n    linkStyleSelected: {\n        '&:hover': {\n          fontWeight: 'normal'\n        }\n    }\n})\n\nexport const AccountTabPage: React.FC = (): JSX.Element => {\n    const classes = useStyles();\n    React.useEffect(() => {\n        getUsers({ pageSize: 10, offset: 0 }, true)\n    }, [])\n\n    // Fetch\n    const getUsers = (newState?: any, saveSummary?: boolean) => {\n        setLoading(true)\n        getUserList(\n            newState.pageSize,\n            newState.offset,\n            newState.where,\n            newState.order,\n            newState.query).then((data: any) => {\n                console.log(data)\n                if (!data.error) {\n                    const state = {\n                        ...newState,\n                        rows: data.body,\n                        totalCount: data.count\n                    }\n\n                    if (saveSummary && saveSummary === true) {\n                        setSummary(data.summary)\n                        setStatuses(data.statuses)\n                    }\n\n                    updateTableState(state)\n\n                } else {\n                    const state = {\n                        ...newState,\n                        rows: [],\n                        totalCount: 0\n                    }\n\n                    updateTableState(state)\n                }\n\n                setLoading(false)\n            }).catch(() => {\n                console.log(\"catch\")\n                setLoading(false)\n                const state = {\n                    ...newState,\n                    rows: [],\n                    totalCount: 0\n                }\n\n                updateTableState(state)\n            })\n    }\n\n    // Fetch\n    // const getSearchUser = (newState?: any) => {\n    //     setLoading(true)\n    //     searchUser(\n    //         newState.pageSize,\n    //         newState.offset,\n    //         newState.query,\n    //         newState.where,\n    //         newState.order).then((data: any) => {\n\n    //             if (!data.error) {\n    //                 const state = {\n    //                     ...newState,\n    //                     rows: data.body,\n    //                     totalCount: data.count\n    //                 }\n\n    //                 updateTableState(state)\n    //             } else {\n    //                 const state = {\n    //                     ...newState,\n    //                     rows: [],\n    //                     totalCount: 0\n    //                 }\n\n    //                 updateTableState(state)\n    //             }\n\n    //             setLoading(false)\n    //         }).catch(() => {\n    //             setLoading(false)\n    //         })\n    // }\n\n    // Table event handlers\n    const onCurrentPageChange = (value) => {\n        const state = {\n            pageSize: tableStates.pageSize,\n            currentPage: value,\n            offset: tableStates.pageSize * value,\n            order: tableStates.order,\n            where: tableStates.where,\n            query: tableStates.query\n        }\n\n        getUsers(state)\n    }\n\n    const onPageSizeChange = (value) => {\n        const state = {\n            pageSize: value,\n            offset: tableStates.offset,\n            order: tableStates.order,\n            where: tableStates.where,\n            query: tableStates.query\n        }\n\n        if (tableStates.currentPage > (Math.ceil(tableStates.totalCount / value) - 1)) {\n            state['currentPage'] = ((Math.ceil(tableStates.totalCount / value) - 1))\n            state['offset'] = ((Math.ceil(tableStates.totalCount / value) - 1)) * value\n        }\n\n        getUsers(state)\n    }\n\n    const handleTimeOutSearch = (value) => {\n        if (typingTimeout) {\n            clearTimeout(typingTimeout);\n        }\n\n        setTypingTimeout(setTimeout(function () {\n            const state = {\n                currentPage: 0,\n                pageSize: tableStates.pageSize,\n                offset: 0,\n                order: tableStates.order,\n                where: tableStates.where,\n                query: value\n            }\n\n            getUsers(state)\n\n        }, 3000));\n    }\n\n    const onFilterChange = (value) => {\n        if (typingTimeout) {\n            clearTimeout(typingTimeout);\n        }\n\n        setTypingTimeout(setTimeout(function () {\n            const state = {\n                currentPage: 0,\n                pageSize: tableStates.pageSize,\n                offset: 0,\n                order: tableStates.order,\n                where: {},\n                query: tableStates.query\n            }\n\n            value.map(w =>\n                w.columnName === 'first_name' ?\n                    state.where = {\n                        ...state.where,\n                        or: [\n                            {\n                                first_name: {\n                                    like: `${w.value}.*`,\n                                    options: 'i'\n                                }\n                            }, {\n                                middle_name: {\n                                    like: `${w.value}.*`,\n                                    options: 'i'\n                                }\n                            }, {\n                                last_name: {\n                                    like: `${w.value}.*`,\n                                    options: 'i'\n                                }\n                            }\n                        ]\n                    }\n                    : w.columnName === 'group' ?\n                        state.where['group_name'] = {\n                            like: `${w.value}.*`,\n                            options: 'i'\n                        }\n                        : w.columnName === 'roles' ?\n                            state.where[\"main_role.name\"] = {\n                                like: `${w.value}.*`,\n                                options: 'i'\n                            }\n                            : w.columnName === 'status' ?\n                                state.where[\"status\"] = w.value\n                                : state.where[w.columnName] = {\n                                    like: `${w.value}.*`,\n                                    options: 'i'\n                                }\n            )\n\n            console.log(state)\n\n            getUsers(state)\n        }, 3000));\n    }\n\n    const onSortingChange = (value) => {\n\n        let filter = {\n            ...value[0],\n            direction: value[0].direction.toUpperCase()\n        }\n\n        if (filter.columnName === 'roles') {\n            filter = {\n                ...value[0],\n                columnName: 'main_role.name'\n            }\n        }\n\n        let a = Object.values(filter).join(' ')\n\n        const state = {\n            pageSize: tableStates.pageSize,\n            offset: tableStates.offset,\n            order: [a],\n            where: tableStates.where,\n            query: tableStates.query\n        }\n\n        getUsers(state)\n    }\n\n    const onRowClick = (value) => {\n        setUserIdSelected(value)\n        setIsRowClicked(true)\n    }\n\n    // const handleSearchChange = ({target}) => {\n    //     setSearchValue(target.value)\n    // }\n\n    const updateTableState = (prop) => {\n        setTableState({\n            ...tableStates,\n            ...prop\n        })\n    }\n\n    const rowDataFixer = (array: any) => {\n        let newEntry: any = [];\n        if (array.length > 0) {\n            array.forEach(data => {\n                let newRow = {\n                    ...data,\n                    first_name: `${data.full_name}`,\n                    group: data.hasOwnProperty('group') ? data.group.name : 'N/A',\n                    roles: data.hasOwnProperty('roles') && data.roles.length > 0 ? data.roles.map((x, i) => `${x.name}${i !== (data.roles.length - 1) ? ', ' : ''}`) : 'N/A',\n                    expiry_date: data.hasOwnProperty('expiry_date') ? moment(data.expiry_date).format('MMM DD, YYYY') : 'N/A',\n                    last_login: data.hasOwnProperty('last_login') ? moment(data.last_login).format('MMM DD, YYYY') : 'N/A',\n                    status: data.hasOwnProperty('status') ? <span style={{ textTransform: 'capitalize' }}>{data.status}</span> : 'N/A',\n                }\n\n                newEntry.push(newRow)\n            })\n\n            return newEntry\n        }\n\n        return []\n    }\n\n    const handleSearchUser = (e) => {\n        if (typingTimeout) {\n            clearTimeout(typingTimeout);\n        }\n        const state = {\n            currentPage: 0,\n            pageSize: tableStates.pageSize,\n            offset: 0,\n            order: tableStates.order,\n            where: tableStates.where,\n            query: e\n        }\n\n        getUsers(state)\n\n    }\n\n    // States\n    const [tableStates, setTableState] = React.useState<any>({\n        rows: [],\n        currentPage: 0,\n        totalCount: 0,\n        pageSize: 10,\n        offset: 0,\n        order: '',\n        where: {},\n        query: ''\n    })\n\n    // const [searchValue, setSearchValue] = React.useState<string>('')\n    const [isLoading, setLoading] = React.useState<boolean>(true)\n    const [isRowClicked, setIsRowClicked] = React.useState<boolean>(false)\n    const [userIdSelected, setUserIdSelected] = React.useState<string>('')\n    const [typingTimeout, setTypingTimeout] = React.useState<any>(0)\n    // const [query, setQuery] = React.useState<string>('')\n    const [summary, setSummary] = React.useState<any>()\n    const [statuses, setStatuses] = React.useState<any>()\n\n    if (isRowClicked === true) {\n        return <Redirect to={`account/${userIdSelected}`} />\n    }\n\n    return (\n        <>\n            {isLoading && <UI.LoadingIndicator />}\n            <Grid\n                container xs={12}\n                spacing={2}\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n                className={classes.searchSection}>\n                <Grid item xs={9}>\n                    {/* <OutlinedInput\n                        fullWidth={true}\n                        id=\"outlined-adornment-amount\"\n                        value={query}\n                        onChange={handleSearchUser}\n                        placeholder=\"Search user\"\n                        startAdornment={\n                        <InputAdornment position=\"start\">\n                            <SearchIcon style={{color: '#363636', opacity: 0.4}} />\n                        </InputAdornment>}\n                        labelWidth={0} /> */}\n                    <ReactSearch\n                        onChange={handleTimeOutSearch}\n                        placeholder={'Search user'}\n                        onSearch={handleSearchUser} />\n                </Grid>\n                <Grid\n                    xs={3}\n                    md={3}>\n                    <div className={classes.searchTabAction}>\n                        <UI.GenerateReport></UI.GenerateReport>\n                        <FontAwesomeIcon icon={faPlus} className={classes.addFieldIcon} />\n                        <RouteTo to='/system-admin/adduser'>\n                            <Link className={classes.linkStyleSelected}>Add User</Link>\n                        </RouteTo>\n                    </div>\n                </Grid>\n            </Grid>\n            <div style={{ boxShadow: '0px 3px 6px #00000029' }}>\n                <Grid container className={classes.tableTop}>\n                    {\n                        summary && Object.entries(summary).length > 0 ?\n                            <>\n                                <Grid\n                                    style={{ textAlign: 'center' }}\n                                    item xs={4}>\n                                    <span className={classes.value}>{summary.total_users}</span>\n                                    <span className={classes.label}>TOTAL</span>\n                                </Grid>\n                                {/* <Grid\n                                    style={{ textAlign: 'center' }}\n                                    item xs={3}>\n                                    <span className={classes.value}>{summary.onlineUsers}</span>\n                                    <span className={classes.label}>ONLINE NOW</span>\n                                </Grid> */}\n                                <Grid\n                                    style={{ textAlign: 'center' }}\n                                    item xs={4}>\n                                    <span className={classes.value}>{summary.active_users}</span>\n                                    <span className={classes.label}>ACTIVE</span>\n                                </Grid>\n                                <Grid\n                                    style={{ textAlign: 'center' }}\n                                    item xs={4}>\n                                    <span className={classes.value}>{summary.deactivated_users}</span>\n                                    <span className={classes.label}>INACTIVE</span>\n                                </Grid>\n                            </>\n                            : 'Loading...'\n                    }\n                </Grid>\n                <TableComponent\n                    rows={rowDataFixer(tableStates.rows)}\n                    columns={userTableColumn}\n                    pageSize={tableStates.pageSize}\n                    pageSizes={tableConst}\n                    currentPage={tableStates.currentPage}\n                    totalCount={tableStates.totalCount}\n                    statusOptions={statuses}\n                    // Events\n                    onRowClick={onRowClick}\n                    onFilterChange={onFilterChange}\n                    onCurrentPageChange={onCurrentPageChange}\n                    onPageSizeChange={onPageSizeChange}\n                    onSortingChange={onSortingChange} />\n            </div>\n        </>\n    )\n} ","import * as React from 'react';\nimport { Grid, Typography } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  InputLabel,\n  Button,\n  Link,\n  List,\n  ListItemText,\n} from '@material-ui/core';\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { BasicTextField, GridHorizontalDivider } from 'Components/UI';\nimport MomentUtils from '@date-io/moment';\nimport { UI } from 'Components';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport { addNewGroup } from 'Pages/API/Calls/Group';\nimport { getDepartments, getUserList } from 'Pages/API/Calls/User';\n \nconst useStyles = makeStyles(theme => ({\n\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n      width: 200,\n    },\n  },\n  item: {\n    padding: '10px, 24px 25px',\n  },\n  label: {\n    marginBottom: \"10px\"\n  },\n  input: {\n    marginBottom: \"2px\"\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n    maxWidth: 300,\n  },\n  chips: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  chip: {\n    margin: 2,\n  },\n  selectedItems: {\n    borderRadius: 20,\n    fontSize: 13,\n    backgroundColor: '#d1d4db',\n    padding: '5px 10px',\n    margin: '5px',\n    display: 'inline-block',\n  },\n  selectedText: {\n    paddingRight: '5px'\n  },\n  noLabel: {\n    marginTop: theme.spacing(3),\n  },\n  inputLabel: {\n    color: '#272e4c',\n    fontSize: '12px',\n    marginBottom: '5px',\n    marginTop: '20px'\n  },\n  errorLabel: {\n    color: '#E53935',\n    fontSize: '12px'\n  },\n  saveButton: {\n    width: '135px',\n    fontSize: '14px',\n    color: '#fff',\n  },\n  cancelAdd: {\n    width: '135px',\n    fontSize: '14px',\n    color: '#ffffff',\n    marginRight: '20px',\n    backgroundColor: '#3C394A',\n    '&:hover': {\n      backgroundColor: '#302e3c'\n    }\n  },\n  closeButton: {\n    color: '#272E4C',\n    position: 'absolute',\n    right: 0,\n    top: 0,\n    '&hover': {\n      fontSize: '0.875rem',\n    }\n  },\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: '2rem',\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: '1px solid #000',\n    padding: theme.spacing(2, 4, 3),\n    '&:focus': {\n      outline: 0\n    }\n  },\n  cancelButton: {\n    width: '135px',\n    fontSize: '14px',\n  },\n  userAlignRight: {\n    textAlign: 'right',\n  },\n  inputLabel1: {\n    color: '#272e4c',\n    fontSize: '15px',\n    marginBottom: '20px',\n    marginTop: '35px'\n  },\n  errorIcon: {\n    color: '#E53935'\n  },\n  keyboardDatePicker: {\n    marginTop: '10px',\n    marginBottom: '12px',\n    width: '90%',\n  }\n}));\n\ninterface SideModalBodyProps {\n  invalidFields?: any[];\n  refreshData?: (data: any) => void;\n  classes?: any;\n  disableSaveButton?: boolean;\n\n  handleClose: () => void;\n  // handleSave?: (groupData?: any) => void;\n\n}\n\ninterface groupData {\n  name: string;\n  description: string;\n  department: string;\n  effectivity_date: any;\n  expiry_date: any;\n  reports_to: any;\n  amount_limit: number;\n}\n\ndeclare global {\n  interface ObjectConstructor {\n    fromEntries(xs: [string | number | symbol, any][]): object\n  }\n}\n\nexport const SideModalBody = (props: SideModalBodyProps) => {\n\n  console.log(props.refreshData)\n  const classes = useStyles();\n\n  const [selectedDate, setSelectedDate] = React.useState<any>(null);\n  const [selectedDate2, setSelectedDate2] = React.useState<any>(null);\n  const [isFetching, setIsFetching] = React.useState(false)\n  // Reload list\n  const [selectedDepartment, setSelectedDepartment] = React.useState<any>()\n  const [confirmModalProps, setConfirmModalProps] = React.useState({\n    title: '',\n    message: () => { return (<p></p>) },\n    buttonLeft: {\n      method: () => { },\n      label: ''\n    },\n    buttonRight: {\n      method: () => { },\n      label: ''\n    },\n    open: false,\n    mode: ''\n  })\n  const [selectedSuperVisor, setSelectedSuperVisor] = React.useState('')\n  const [userOption, setUserOption] = React.useState<any>([]);\n  const [errorMessages, setErrorMessages] = React.useState<any>({\n    name: '',\n    description: '',\n    department: '',\n    effectivity_date: '',\n\n  })\n  const [modalProps, setModalProps] = React.useState({\n    title: '',\n    message: '',\n    open: false,\n    method: () => { }\n  });\n  const [groupData, setGroupData] = React.useState<groupData>({\n    name: '',\n    description: '',\n    department: '',\n    effectivity_date: '',\n    expiry_date: '',\n    reports_to: '',\n    amount_limit: 0,\n  });\n  const [fieldValidation, setFieldValidation] = React.useState<any>({\n    name: null,\n    description: null,\n    department: null,\n    effectivity_date: null,\n  })\n  const [departments, setDepartments] = React.useState<any>([\n    {\n      label: '',\n      value: ''\n    }\n  ])\n  // const [disableSave, setDisableSave] = React.useState<any>(true)\n  React.useEffect(() => {\n    getDepartments().then((res: any) => {\n      let choices: any = [];\n      if (!res.error) {\n        res.forEach(d => {\n          let beauty = {\n            label: d.name,\n            value: d\n          }\n          choices.push(beauty)\n        })\n        setDepartments(choices)\n      } else {\n        setModalProps({\n          ...modalProps,\n          open: true,\n          title: 'Error',\n          message: res.error.message,\n          method: handleCloseSideAndSuccess\n        })\n      }\n    }).catch((err) => {\n      setModalProps({\n        ...modalProps,\n        open: true,\n        title: 'Error',\n        message: err.message,\n        method: handleCloseSideAndSuccess\n      })\n    })\n\n    getUserList(100, 0).then((res) => {\n      setUserOption(userOptionBeautifier(res.body))\n    })\n\n    console.log(departments)\n\n  }, [])\n\n  // const choicesBeautifier = (data: any) => {\n  //     let newChoices: any = [];\n\n  //     if(data.body && data.body.length > 0) {\n  //         data.body.map(c => {\n  //             let beauty ={\n  //                 value: c,\n  //                 label: c[data.label]\n  //             }\n\n  //             newChoices.push(beauty)\n  //         })\n\n  //         return newChoices\n  //     }\n\n  //     return []\n  // }\n\n  const handleAll = (event, prop) => {\n    setGroupData({\n      ...groupData,\n      [prop]: event.target.value\n    })\n  }\n\n  const numberChange = (e) => {\n    const re = /^[0-9\\b]+$/;\n\n    if (e.target.value === '' || re.test(e.target.value)) {\n      setGroupData({\n        ...groupData,\n        amount_limit: e.target.value\n      })\n   }\n    \n  }\n\n  const handleEffectivityDateChange = (event, prop) => {\n    const newDate = event;\n    if (\n      event !== null\n    ) {\n      newDate.toISOString()\n    }\n    setSelectedDate(event);\n    setGroupData({\n      ...groupData,\n      [prop]: newDate\n    })\n  }\n  const handleExpireDateChange = (event, prop) => {\n    const newDate = event\n    if (event !== null) {\n      newDate.toISOString()\n    }\n    setSelectedDate2(event);\n    setGroupData({\n      ...groupData,\n      [prop]: newDate\n    })\n  }\n  const handleCloseConfirmationModal = () => {\n    props.handleClose()\n    setConfirmModalProps({\n      ...confirmModalProps,\n      open: false\n    })\n    setGroupData({\n      ...groupData,\n      name: '',\n      description: '',\n      amount_limit: 0,\n    })\n  }\n\n  const openConfirmationModal = (mode) => {\n    console.log(`this is the group data: `, groupData)\n    if (mode === 'add') {\n      console.log(\"Add button was clicked\")\n      if (validationAlgorithm(groupData)) {\n        setConfirmModalProps({\n          ...confirmModalProps,\n          open: true,\n          mode,\n          title: 'Confirm New Group',\n          message: () => {\n            return (\n              <>\n                <p\n                  id=\"confirm_modal\">\n                  Are you sure you want to add group\n                  <br/> <b>{`${groupData.name}'s`}</b>?\n                                 </p>\n              </>\n            )\n          },\n          buttonLeft: {\n            method: confirmCancel, \n            label: 'Cancel'\n          },\n          buttonRight: {\n            method: handleSubmit,\n            label: 'Add Group'\n          }\n        })\n      }\n    } else {\n      setConfirmModalProps({\n        ...confirmModalProps,\n        open: true,\n        title: 'Cancel New Group',\n        mode,\n        message: () => {\n          return (\n            <p>\n              Do you wish to cancel creation of this new group?\n                            </p>\n          )\n        },\n        buttonLeft: {\n          method: () => {\n            setConfirmModalProps({\n              ...confirmModalProps,\n              open: false\n            })\n          },\n          label: 'Cancel'\n        },\n        buttonRight: {\n          method: confirmCancel,\n          label: 'Confirm'\n        }\n      })\n    }\n\n  }\n  const confirmCancel = () => {\n    handleCloseConfirmationModal();\n    setModalProps({\n      ...modalProps,\n      method: handleCloseSideAndSuccess\n    })\n  }\n\n\n\n  const handleClose2 = () => {\n    setModalProps({\n      ...modalProps,\n      open: false\n    })\n  }\n\n\n\n  const fetchUserOption = async (input, cb) => {\n    let where = {\n      first_name: {\n        like: `${input}.*`,\n        options: 'i'\n      }\n    }\n    let searchResult = await getUserList(100, 0, where).catch(() => cb([]));\n\n    if (searchResult) {\n      cb(userOptionBeautifier(searchResult.body));\n    }\n\n    // console.log(userOption)\n  }\n  const handlePrimaries = () => {\n    setGroupData({\n      ...groupData,\n      reports_to: ''\n    });\n    getUserList(100, 0).then((users) => {\n      setUserOption(\n        users.body.map(user => {\n          return {\n            value: user,\n            label: user.first_name\n          }\n        })\n      )\n    }).catch(err => console.log(err))\n  }\n  const userOptionBeautifier = (option: any) => {\n    let options = option.map((o: any) => {\n      return {\n        value: o,\n        label: `${o.hasOwnProperty('first_name') ? o.first_name : ''}\n                    ${o.hasOwnProperty('middle_name') ? o.middle_name : ''}\n                    ${o.hasOwnProperty('last_name') ? o.last_name : ''}`\n      }\n    })\n    return options\n  }\n  const onSelectSuperVisor = (selected: any) => {\n    setSelectedSuperVisor(selected)\n    setGroupData({\n      ...groupData,\n      reports_to: selected.value\n    })\n  }\n  const handleSubmit = () => {\n    let payload = groupData\n    setIsFetching(true)\n    handleCloseConfirmationModal();\n\n    if (payload.expiry_date === '') {\n      delete payload.expiry_date\n    }\n    if (payload.reports_to === '') {\n      delete payload.reports_to\n    }\n\n    addNewGroup(payload).then((resp: any) => {\n      setIsFetching(false)\n      if (!resp.error) {\n        setModalProps({\n          ...modalProps,\n          open: true,\n          title: 'New group added',\n          message: 'New group has been successfully added.',\n          method: handleCloseSide\n        })\n      } else {\n        setModalProps({\n          ...modalProps,\n          open: true,\n          title: 'Add New Group Failed',\n          message: 'Something went wrong. New group was not added.',\n          method: handleCloseSideAndSuccess\n        })\n      }\n    }).catch((err) => {\n      setIsFetching(false)\n      setModalProps({\n        ...modalProps,\n        open: true,\n        title: 'Add New Group Failed',\n        message: err.message,\n        method: handleCloseSideAndSuccess\n      })\n    })\n\n    console.log(payload);\n    console.log(JSON.stringify(payload));\n  }\n  const handleDepartment = (selected: any) => {\n    console.log(selected);\n    console.log(selected.__isNew__)\n\n    if (selected.__isNew__) {\n      setSelectedDepartment({\n        value: selected.value,\n        label: selected.label\n      })\n      setGroupData({\n        ...groupData,\n        department: selected.value\n      })\n    } else {\n      setSelectedDepartment({\n        value: selected.value,\n        label: selected.label\n      })\n      setGroupData({\n        ...groupData,\n        department: selected.value.name\n      })\n    }\n  }\n\n    const handleCloseSide = () => {\n      props.handleClose()\n      handleClose2()\n\n      setGroupData({\n        ...groupData,\n        name: '',\n        description: '',\n        amount_limit: 0,\n      })\n    }\n\n    const handleCloseSideAndSuccess = () => {\n      props.handleClose()\n      handleClose2()\n      setConfirmModalProps({\n        ...confirmModalProps,\n        open: false\n     })\n\n      setGroupData({\n        ...groupData,\n        name: '',\n        description: '',\n        amount_limit: 0,\n      })\n    }\n\n    const onSaveHandler = () => {\n      console.log(\"Save button is clicked!\", groupData)\n\n    // if(props.handleSave){\n    //   props.handleSave(groupData)\n    // }\n\n    setConfirmModalProps({\n      ...confirmModalProps,\n      open: true,\n      title: 'Confirm New Group',\n      message: () => {\n        return (\n          <>\n            <p\n              id=\"confirm_modal\">\n              Are you sure you want to add group <b>\n                <br />\n                {`${groupData.name}'s`}</b>?\n                 </p>\n          </>\n        )\n      },\n      buttonLeft: {\n        method: handleCloseSideAndSuccess,\n        label: 'Cancel'\n      },\n      buttonRight: {\n        method: handleSubmit,\n        label: 'Add Group'\n      }\n    })\n  };\n\n\n  const validationAlgorithm = (bodyRequest) => {\n    let optionalFields = ['expiry_date', 'reports_to'];\n    let valid: any = [];\n    let invalid: any = [];\n\n    let payloadArray = Object.entries(bodyRequest);\n\n    payloadArray.forEach((payloadObject: any) => {\n      if (!optionalFields.includes(payloadObject[0])) {\n        if (payloadObject[1]) {\n          valid.push(payloadObject);\n        } else {\n          invalid.push(payloadObject)\n        }\n      } else {\n        payloadObject[1] = false\n        invalid.push(payloadObject);\n      }\n    })\n\n    let preValid: any = Object.assign(Object.fromEntries(valid), Object.fromEntries(invalid));\n\n    setFieldValidation(preValid);\n    setErrorMessages({\n      name: !preValid.name ? 'Invalid Input' : '',\n      description: !preValid.description ? 'Invalid Input' : '',\n      department: !preValid.department ? 'Invalid Input' : '',\n      effectivity_date: !preValid.effectivity_date ? 'Invalid Input' : '',\n    })\n    console.log(handlePrimaries)\n\n    console.log(preValid)\n    console.log(groupData)\n\n    for (var f in preValid)\n      if (!preValid[f]) return false;\n\n    return true;\n  }\n\n\n  return (\n    <>\n      {isFetching && <UI.LoadingIndicator />}\n      <div >\n        <Grid container>\n          <Grid item xs={12}>\n            <InputLabel className={classes.inputLabel}> * Group Name </InputLabel>\n            <TextField\n              type=\"text\"\n              error={fieldValidation.name !== null ? !fieldValidation.name : fieldValidation.name}\n              value={groupData.name}\n              onChange={(event) => handleAll(event, 'name')}\n              className={classes.input}\n              fullWidth\n              required\n              id=\"outline-groupname\"\n              variant=\"outlined\"\n            />\n            <Grid container>\n              {\n                fieldValidation.name !== null && fieldValidation.name === false ?\n                  <>\n                    <Grid item xs={10} md={10} lg={10}>\n                      <span className={classes.errorLabel}>\n                        {errorMessages.name}\n                      </span>\n                    </Grid>\n                    <Grid item xs={2} md={2} lg={2} style={{ textAlign: 'right' }}>\n                      <ErrorIcon fontSize='small' className={classes.errorIcon} />\n                    </Grid>\n                  </>\n                  : ''\n              }\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <InputLabel className={classes.inputLabel}> * Description </InputLabel>\n            <BasicTextField\n              labelFontSize=\"12px\"\n              rows=\"2\"\n              value={groupData.description}\n              error={fieldValidation.description !== null ? !fieldValidation.description : fieldValidation.description}\n              onChange={(event) => handleAll(event, \"description\")}\n            />\n            <Grid container>\n              {\n                fieldValidation.description !== null && fieldValidation.description === false ?\n                  <>\n                    <Grid item xs={10} md={10} lg={10}>\n                      <span className={classes.errorLabel}>{errorMessages.description}</span>\n                    </Grid>\n                    <Grid item xs={2} md={2} lg={2} style={{ textAlign: 'right' }}>\n                      <ErrorIcon fontSize='small' className={classes.errorIcon} />\n                    </Grid>\n                  </>\n                  : ''\n              }\n            </Grid>\n          </Grid>\n          <Grid item xs={12} md={12} lg={12}>\n            <InputLabel className={classes.inputLabel}>* Department</InputLabel>\n            <UI.Dropdown\n              error={fieldValidation.department !== null && fieldValidation.department !== null ? !fieldValidation.department : fieldValidation.department}\n              placeholder=\"Select One\"\n              icon={true}\n              isMulti={false}\n              closeOnSelect={true}\n              isCreatable={true}\n              value={selectedDepartment}\n              onChange={handleDepartment}\n              choices={departments} />\n            <Grid container>\n              {\n                fieldValidation.department !== null && fieldValidation.department === false ?\n                  <>\n                    <Grid item xs={10} md={10} lg={10}>\n                      <span className={classes.errorLabel}>{errorMessages.department}</span>\n                    </Grid>\n                    <Grid item xs={2} md={2} lg={2} style={{ textAlign: 'right' }}>\n                      <ErrorIcon fontSize='small' className={classes.errorIcon} />\n                    </Grid>\n                  </>\n                  : ''\n              }\n            </Grid>\n          </Grid>\n          \n          <Grid container >\n            <Grid>\n            <InputLabel\n              className={classes.inputLabel}>\n              * Effectivity Date\n                </InputLabel>\n            <MuiPickersUtilsProvider utils={MomentUtils}>\n              <KeyboardDatePicker\n                className={classes.keyboardDatePicker}\n                allowKeyboardControl={false}\n                error={fieldValidation.effectivity_date !== null && fieldValidation.effectivity_date !== null ? !fieldValidation.effectivity_date : fieldValidation.effectivity_date}\n                variant=\"dialog\"\n                format=\"MMMM DD, YYYY\"\n                inputVariant=\"outlined\"\n                inputProps={{\n                  disabled: true\n                }}\n                value={selectedDate}\n                invalidDateMessage=\"\"\n                onChange={(event) => handleEffectivityDateChange(event, 'effectivity_date')}\n                style={{ width: \"100%\" }}\n              />\n            </MuiPickersUtilsProvider>\n            <Grid container>\n              {\n                fieldValidation.effectivity_date !== null && fieldValidation.effectivity_date === false ?\n                  <>\n                    <Grid item xs={10} md={10} lg={10}>\n                      <span className={classes.errorLabel}>{errorMessages.effectivity_date}</span>\n                    </Grid>\n                    <Grid item xs={2} md={2} lg={2} style={{ textAlign: 'right' }}>\n                      <ErrorIcon fontSize='small' className={classes.errorIcon} />\n                    </Grid>\n                  </>\n                  : ''\n              }\n            </Grid> \n            </Grid>\n            <Typography display=\"inline\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</Typography>\n            <Grid>\n            <InputLabel\n              className={classes.inputLabel}>\n              Expiry Date\n              </InputLabel>\n            <MuiPickersUtilsProvider utils={MomentUtils}>\n              <KeyboardDatePicker\n                className={classes.keyboardDatePicker}\n                allowKeyboardControl={false}\n                disabled={selectedDate !== null ? false : true}\n                minDate={selectedDate !== null ? selectedDate : ''}\n                variant=\"dialog\"\n                clearable\n                inputProps={{\n                  disabled: true\n                }}\n                format=\"MMMM DD, YYYY\"\n                inputVariant=\"outlined\"\n                value={selectedDate2}\n                invalidDateMessage=\"\"\n                onChange={(event) => handleExpireDateChange(event, \"expiry_date\")}\n                style={{ width: \"100%\" }}\n              />\n            </MuiPickersUtilsProvider>\n            </Grid>\n          </Grid>\n            \n          \n\n            \n            \n          <Grid container spacing={3}>\n            <Grid item xs={12} md={12} lg={12}>\n              <InputLabel className={classes.inputLabel}>Reports To</InputLabel>\n              <UI.Dropdown\n                async={true}\n                onChange={onSelectSuperVisor}\n                fetchOption={fetchUserOption}\n                placeholder=\"\"\n                icon={false}\n                isMulti={false}\n                closeOnSelect={true}\n                value={selectedSuperVisor}\n                choices={userOption}\n              />\n            </Grid>\n          </Grid>\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={12} lg={12}>\n                <InputLabel className={classes.inputLabel}>Amount Limit:</InputLabel>\n                <TextField\n                  type=\"number\"\n                  value={groupData.amount_limit}\n                  className={classes.input}\n                  onChange={numberChange}\n                  fullWidth\n                  required\n                  id=\"outline-amountlimit\"\n                  variant=\"outlined\"\n                />\n            </Grid>\n          </Grid>\n          <GridHorizontalDivider height=\"10px\" />\n          <Grid container spacing={2} justify=\"center\" alignItems=\"flex-start\">\n            <Grid item xs={4}>\n              <Button \n                className={classes.cancelAdd}\n                onClick={\n                  () => openConfirmationModal('cancel')\n                }\n                variant=\"outlined\" color=\"default\" fullWidth>Cancel</Button>\n            </Grid>\n            <Grid item xs={4}>\n              <Button onClick={onSaveHandler}\n                className={classes.saveButton}\n                variant=\"contained\"\n                color=\"primary\"\n                fullWidth\n                disabled={\n                  groupData.name !== '' && groupData.description !== '' && groupData.effectivity_date !== '' && groupData.department !== '' ? false : true\n                }\n              >Save</Button>\n            </Grid>\n          </Grid>\n          <Modal\n            aria-labelledby=\"transition-modal-title\"\n            aria-describedby=\"transition-modal-description\"\n            className={classes.modal}\n            open={confirmModalProps.open}\n            onClose={handleCloseConfirmationModal}\n            closeAfterTransition\n            BackdropComponent={Backdrop}\n            BackdropProps={{\n              timeout: 0,\n            }}\n          >\n            <div className={classes.paper}>\n              <List>\n                <ListItemText>\n                  <Link\n                    className={classes.closeButton}\n                    onClick={handleCloseConfirmationModal}\n                  >\n                    <FontAwesomeIcon icon={faTimes} />\n                  </Link>\n                </ListItemText>\n              </List>\n              <p id=\"transition-modal-title\"\n                style={{ fontSize: \"20px\" }}>\n                <b>{confirmModalProps.title}</b>\n              </p>\n\n              {confirmModalProps.message()}\n\n              <Grid container spacing={1}>\n                <Grid item xs={6}>\n                  <Button\n                    className={classes.cancelButton}\n                    variant=\"outlined\"\n                    color=\"secondary\"\n                    onClick={confirmModalProps.buttonLeft.method}>\n                    {confirmModalProps.buttonLeft.label}\n                  </Button>\n                </Grid>\n                <Grid item xs={6}>\n                  <Button\n                    // onClick={handleOpen2}\n                    onClick={confirmModalProps.buttonRight.method}\n                    className={classes.saveButton}\n                    variant=\"contained\"\n                    color=\"primary\">\n                    {confirmModalProps.buttonRight.label}\n                  </Button>\n                </Grid>\n              </Grid>\n            </div>\n          </Modal>\n          <Modal\n            aria-labelledby=\"transition-modal-title\"\n            aria-describedby=\"transition-modal-description\"\n            className={classes.modal}\n            open={modalProps.open}\n            onClose={modalProps.method}\n            closeAfterTransition\n            BackdropComponent={Backdrop}\n            BackdropProps={{\n              timeout: 500,\n            }}\n          >\n            <div className={classes.paper}>\n              <List>\n                <ListItemText>\n                  <Link\n                    className={classes.closeButton}\n                    onClick={modalProps.method}\n                  >\n                    <FontAwesomeIcon icon={faTimes} />\n                  </Link>\n                </ListItemText>\n              </List>\n              <p id=\"transition-modal-title\" style={{ fontSize: \"20px\" }}><b>{modalProps.title}</b></p>\n              <p id=\"transition-modal-description\">\n                {modalProps.message}\n              </p><br />\n              <Grid container spacing={1}>\n                <Grid item xs={12}>\n                  <Button onClick={modalProps.method} className={classes.saveButton} variant=\"contained\" color=\"primary\" style={{ marginLeft: \"70px\" }}>Okay</Button>\n                </Grid>\n              </Grid>\n            </div>\n          </Modal>\n        </Grid>\n      </div>\n    </>\n  )\n}","import { AddGroup } from './GroupModels';\n// import moment from 'moment';\n\nexport const AddGroupData = (data: AddGroup) => {\n\tconst today = new Date() \n\tconst eff_date = data['effectivity_date'] ?\n\t\tnew Date(new Date(data['effectivity_date']).setHours(0, 0, 0, 0)) :\n\t\tundefined\n\tconst exp_date = data['expiry_date'] ?\n\t\tnew Date(new Date(data['expiry_date']).setHours(0, 0, 0, 0)) :\n\t\tundefined\n\n    console.log('DATES : ', today, eff_date, exp_date);\n    if (exp_date && eff_date)\n\t\tconsole.log('BOOLS', eff_date <= today, exp_date <= today);\n\n\n        \n    const payload: AddGroup = {\n        _id: data['_id'],\n        name: data['name'],\n        description: data['description'],\n        department: data['department'],\n        effectivity_date: data['effectivity_date'],\n        expiry_date: data['expiry_date'],\n        reports_to: data['reports_to']\n    }\n\n    return payload;\n}\n\nexport const EmptyAddGroup = () => {\n    const payload: AddGroup = {\n        _id: '',\n        name: '',\n        description: '',\n        department: '',\n        effectivity_date: '',\n        expiry_date: '',\n        reports_to: ''\n    }\n\n    return payload;\n}","import React from 'react';\nimport { getGroups } from 'Pages/API/Calls/Group';\nimport {\n    Grid,\n    // InputLabel, \n    // Typography,\n    Link,\n    // Button\n} from '@material-ui/core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { SideModalBody } from './Components/SideModalBody';\n// import { SideModal } from './Comopnents/SideModal';\nimport {\n    faPlus,\n    faDownload,\n    // faLandmark\n} from '@fortawesome/free-solid-svg-icons';\nimport { ReactTable } from 'Components/UI/TableComponent/ReactTable';\nimport { ReactSearch } from 'Components/UI/SearchBar/ReactSearch';\nimport { Redirect } from 'react-router-dom';\nimport { Loader } from 'Pages/Lookup/Components/Loader';\n\n// Imports for Add Group\nimport { SideModalBlock } from 'Components/UI';\nimport { EmptyAddGroup } from './ConstructPayloads';\nimport { AddGroup } from './GroupModels';\n\ninterface IProps {\n    classes: any;\n}\n\ninterface IState {\n    rows: any;\n    columns: any;\n    loading: boolean;\n    redirect_to_group: boolean;\n    redirect_to_addgroup: boolean;\n    redirect_data: any;\n    add_group?: AddGroup;\n    invalid_fields: string[];\n    show_side_modal_block?: string;\n    disableSaveButton: boolean;\n    clickSaveButton: boolean;\n    side_modal_block_mode: string;\n    totalCount: number;\n    currentPage: number;\n    limit: number;\n    order: string;\n    typingTimeout: any;\n    default_filter: any;\n    query: string;\n    skip: number;\n    modalTitle: string;\n    modalMessage: string;\n    isModalOpen: boolean;\n    confirm_modal_message: string;\n    confirm_modal_open: boolean;\n    confirm_modal_title: string;\n    action_after_confirm: () => void;\n    department_dropdown_choices: any[];\n    reports_to_dropdown_choices: any[];\n}\n\nexport class GroupsTabPage extends React.Component<IProps, IState> {\n\n    constructor(props) {\n        super(props);\n\n        const columns = [\n            {\n                name: 'group_id',\n                title: 'Group ID'\n            },\n            {\n                name: 'name',\n                title: 'Name'\n            },\n            {\n                name: 'roles',\n                title: 'Attached Roles'\n            },\n            {\n                name: 'department',\n                title: 'Department'\n            },\n            {\n                name: 'status',\n                title: 'Status'\n            },\n        ];\n\n        this.state = {\n            loading: true,\n            columns: columns,\n            rows: [],\n            redirect_to_group: false,\n            redirect_to_addgroup: false,\n            redirect_data: [],\n            totalCount: 0,\n            currentPage: 0,\n            typingTimeout: 0,\n            limit: 10,\n            order: '',\n            default_filter: [],\n            query: '',\n            skip: 0,\n            add_group: EmptyAddGroup(),\n            invalid_fields: [],\n            show_side_modal_block: 'none',\n            disableSaveButton: false,\n            clickSaveButton: false,\n            side_modal_block_mode: 'add',\n            modalTitle: '',\n            modalMessage: '',\n            isModalOpen: false,\n            confirm_modal_message: '',\n            confirm_modal_open: false,\n            confirm_modal_title: '',\n            action_after_confirm: () => { },\n            department_dropdown_choices: props.departmentDropdown,\n            reports_to_dropdown_choices: props.reportsToDropdown\n        }\n    }\n\n    componentDidMount() {\n        let group = this;\n        this.setState({\n            loading: true,\n        }, () => {\n            group.APIGetGroupList(this.state.currentPage, this.state.limit, this.state.query);\n        });\n    }\n\n    APIGetGroupList = (page: number, limit: number, query: string) => {\n        this.setState({\n            loading: true,\n        })\n\n        let skip = page * limit\n\n        this.setState({\n            currentPage: page\n        }, () => {\n            this.setState({\n                skip: skip\n            })\n        })\n\n        let filter = {\n            limit: limit,\n            skip: skip\n        }\n\n        getGroups(filter, this.state.default_filter, this.state.order, query).then(res => {\n            console.log((Math.ceil(res.count / limit) - 1))\n            console.log('this is the response: ', res.body)\n            this.setState({\n                rows: res.body,\n                loading: false,\n                totalCount: res.count,\n                currentPage: this.state.currentPage > (Math.ceil(res.count / limit) - 1) ? (Math.ceil(res.count / limit) - 1) : page,\n                limit: limit\n            })\n        }).catch(() => {\n            this.setState({\n                rows: [],\n                loading: false,\n                totalCount: 0,\n            });\n        })\n    }\n\n    handleTimeOutSearchTableGroups = (data) => {\n        if (this.state.typingTimeout) {\n            clearTimeout(this.state.typingTimeout);\n        }\n        this.setState({\n            currentPage: 0\n        }, () => {\n            this.setState({\n                query: data,\n                typingTimeout: setTimeout(() => {\n                    this.setState({\n                        loading: true\n                    })\n                    this.APIGetGroupList(\n                        this.state.currentPage,\n                        this.state.limit,\n                        this.state.query);\n                }, 3000)\n            })\n        })\n    }\n\n    onSearchTableGroups = () => {\n        if (this.state.typingTimeout) {\n            clearTimeout(this.state.typingTimeout)\n        }\n\n        this.setState({\n            loading: true,\n            currentPage: 0\n        }, () => {\n            this.APIGetGroupList(0, this.state.limit, this.state.query);\n        })\n    }\n\n    handleOnFilterChange = (filter) => { \n        let _filter: any = {};\n\n        if (this.state.typingTimeout) {\n            clearTimeout(this.state.typingTimeout)\n        }\n\n        filter.map(w =>\n\n            w.columnName === 'status' ?\n                w.value !== 'all' ?\n                    _filter[w.columnName] = `${w.value}` : ''\n                : w.columnName === 'group_id' ?\n                    _filter['group_id'] = `${w.value}`\n                :w.columnName === 'roles' ?\n                    _filter['roles.name'] = {\n                        like: `${w.value}`,\n                        options: 'i'\n                    }\n                : _filter[w.columnName] = {\n                    like: `${w.value}.*`,\n                    options: 'i'\n                }\n            \n\n        )\n\n        this.setState({\n            default_filter: _filter,\n            currentPage: 0,\n            typingTimeout: setTimeout(() => {\n                this.setState({\n                    loading: true\n                })\n                this.APIGetGroupList(\n                    this.state.currentPage,\n                    this.state.limit,\n                    this.state.query\n                );\n            }, 1500)\n        })\n    }\n\n    handleSortChange = (sort) => {\n        this.setState({\n            order: `${sort[0].columnName} ${sort[0].direction.toUpperCase()}`,\n            loading: true,\n        },\n            () => {\n                this.APIGetGroupList(\n                    this.state.currentPage,\n                    this.state.limit,\n                    this.state.query\n                )\n            })\n    }\n\n    handleRowClick = (value) => {\n        const data = this.state.rows\n        console.log(`this is the data `, data[value].group_id)\n        this.setState({\n            redirect_to_group: true,\n            redirect_data: data[value].group_id\n        })\n        console.log(`this is the data: `, this.state.redirect_data)\n    }\n\n    handleAddGroup = () => {\n        console.log('Loading: Add Group Handler');\n    }\n \n    rowDataFixer = (array: any) => {\n        let newEntry: any = [];\n        if (array.length > 0) {\n            array.forEach(data => {\n                let newRow = {\n                    ...data,\n                    name: data.hasOwnProperty('name') ? data.name : 'N/A',\n                    group: data.hasOwnProperty('group_id') ? data.group_id : 'N/A',\n                    department: data.hasOwnProperty('department') ? data.department : 'N/A',\n                    roles: data.hasOwnProperty('roles') && data.roles.length > 0 ?\n                        data.roles.map((x, i) => `${x.name}${i !== (data.roles.length - 1) ? ', ' : ''}`) : 'N/A',\n                    status: data.hasOwnProperty('status') ? <span style={{ textTransform: 'capitalize' }}>{data.status}</span> : 'N/A',\n                }\n\n                newEntry.push(newRow)\n            })\n            return newEntry\n        }\n        return []\n    }\n\n    /**** SIDE MODAL FUNCTIONS ****/\n    handleCloseSideModalBlock = () => {\n        if(this.state.typingTimeout) {\n            clearTimeout(this.state.typingTimeout);\n        }\n        this.setState({\n            show_side_modal_block: 'none',\n            side_modal_block_mode: '',\n            add_group: EmptyAddGroup(),\n            currentPage: 0\n        }, () => {\n            this.setState({\n                typingTimeout: setTimeout(() => {\n                    this.setState({\n                        loading: true\n                    })\n                    this.APIGetGroupList(\n                        this.state.currentPage,\n                        this.state.limit,\n                        this.state.query);\n                }, 3000)\n            })\n        })\n    };\n\n\n    handleOpenBlock = () => {\n        this.setState({\n            show_side_modal_block: 'block',\n        }, () => this.passDataToSideModalBlockBody());\n    }\n\n    handleInvalidFieldsPrompts = () => {\n        this.setState({\n            isModalOpen: true,\n            modalTitle: 'Incomplete/Invalid Fields',\n            modalMessage: 'Please complete the form before proceeding.'\n        })\n    }\n\n    handleSaveGroup = (groupData: any) => {\n        console.log(`this is the group data from the modal: `, groupData)\n\n\n    }\n\n    passDataToSideModalBlockBody = () => {\n        if (this.state.add_group) {\n            this.setState({\n                add_group: this.state.add_group\n            })\n        }\n    }\n\n\n\n    handleChangeSideModalBlockMode = () => {\n        this.setState({\n            side_modal_block_mode: 'add'\n        }, () => this.handleOpenBlock());\n    }\n\n\n\n    /****  RENDER ADD MODAL ****/\n\n    renderSideModalBlock(): JSX.Element {\n        const { classes } = this.props;\n\n        return (\n            <SideModalBlock\n                blockPosition={'fixed'}\n                title={'Add Group'}\n                editIconDescription={'Add Group'}\n                showBlock={this.state.show_side_modal_block}\n                handleClose={this.handleCloseSideModalBlock}\n                sideModalBlockMode={'add'}\n            >\n                {/* <SideModal\n                    formFields={this.state.add_group}\n                    invalidFields={this.state.invalid_fields}\n                    classes={this.props.classes}\n                    handleCLose={this.handleCloseSideModalBlock}\n                    refreshData={(data: any) => {\n                        this.setState({add_group: data},\n                            () => this.checkFields(data, true))\n                    }}\n                    handleSave={(formFields?: any) => {\n                        if(this.state.side_modal_block_mode) {\n                            this.setState({ clickSaveButton: true }, () => this.checkFields(formFields))\n                        }\n                    }}\n                    formName={'Add Group'}\n                    mode={this.state.side_modal_block_mode ? this.state.side_modal_block_mode : ''}\n                    checkBoxWithDropDownFieldsInitState={false}\n                    dynamicDropdownChoices={this.state.department_dropdown_choices}\n                    disableSaveButton={this.state.disableSaveButton}\n                    datePairField1MaxDate={\n                        this.state.add_group &&\n                          this.state.add_group['expiry_date'] &&\n                          moment(this.state.add_group['expiry_date']).isValid() ?\n                          moment(this.state.add_group['expiry_date']).format('MM-DD-YY').toString() : undefined\n                      }\n                      datePairField2MinDate={\n                        this.state.add_group &&\n                          this.state.add_group['effectivity_date'] &&\n                          moment(this.state.add_group['effectivity_date']).isValid() ?\n                          moment(this.state.add_group['effectivity_date']).format('MM-DD-YY').toString() : undefined\n                      }\n                /> */}\n                <SideModalBody\n                    classes={classes}\n                    handleClose={this.handleCloseSideModalBlock}\n                />\n            </SideModalBlock>\n        )\n    }\n\n\n    render(): JSX.Element {\n        if (this.state.redirect_to_group) {\n            return (\n                <>\n                    <Redirect to={{\n                        pathname: '/system-admin/group/' + this.state.redirect_data,\n                    }}\n                    />\n                </>\n            )\n        }\n\n\n        return (\n            <div>\n                {this.state.loading ? <Loader /> : null}\n                <Grid container alignItems={'center'} style={{ textAlign: 'center' }} spacing={4}>\n                    <Grid item xs={8} md={9}>\n                        <ReactSearch\n                            placeholder={'Search a group'}\n                            onSearch={this.onSearchTableGroups}\n                            onChange={this.handleTimeOutSearchTableGroups}\n                        />\n                    </Grid>\n                    <Grid item xs={4} md={3}>\n                        <Grid container>\n                            <Grid item xs={6}>\n                                <FontAwesomeIcon\n                                    icon={faDownload}\n                                    className={this.props.classes.addFieldIcone}\n                                />\n                                <Link className={this.props.classes.linkStyleSelected}>Generate Report\n                                </Link>\n                            </Grid>\n                            <Grid item xs={6}>\n                                <FontAwesomeIcon icon={faPlus}\n                                    className={this.props.classes.addFieldIcon} />\n                                <Link\n                                    className={this.props.classes.linkStyleSelected}\n                                    onClick={() => {\n                                        this.setState(\n                                            {\n                                                add_group: EmptyAddGroup(),\n                                                disableSaveButton: true\n                                            }, () => this.handleChangeSideModalBlockMode()\n                                        );\n                                    }}>\n                                    Add Group\n                                </Link>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <ReactTable\n                    rows={this.rowDataFixer(this.state.rows)}\n                    columns={this.state.columns}\n                    message={'There are no user groups to show yet.'}\n                    viewOnly={false}\n                    enableSelection={false}\n                    onRowClick={this.handleRowClick}\n                    totalCount={this.state.totalCount}\n                    currentPage={this.state.currentPage}\n                    pageSize={this.state.limit}\n                    defaultFilters={this.state.default_filter}\n                    onFilterChange={this.handleOnFilterChange}\n                    onSortingChange={this.handleSortChange}\n                    onSetPageSize={(size: any) => {\n                        this.APIGetGroupList(\n                            this.state.currentPage,\n                            size,\n                            this.state.query)\n                    }}\n                    onPageChange={(page: any) => {\n                        this.APIGetGroupList(\n                            page,\n                            this.state.limit,\n                            this.state.query\n                        )\n                    }}\n                />\n                {this.renderSideModalBlock()}\n            </div>\n        )\n    }\n\n\n\n}","//#region Global Imports\nimport * as React from 'react';\nimport { bindActionCreators, Dispatch } from 'redux';\n// import NEOLink from 'next/link';\n//#endregion Global Imports\n\n//#region Interface Imports\n// import { Heading } from 'Components/UI/Heading';\n// import { Grid } from '@material-ui/core';\nimport { Store } from 'Components/Stores/IStore';\nimport { UsersActions } from './UsersActions';\n// import { IUsersPage } from './IUsersPage';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport {\n  Grid,\n  Tab,\n  Tabs,\n  Typography, \n} from '@material-ui/core';\nimport { useState } from \"react\";\n// import { UsersTable } from './Sections/UsersTable';\nimport { RolesTableList } from './Sections/UsersTable/RolesTableList';\n// import {UsersTable} from './Sections/UsersTable';\nimport { AccountTabPage } from './Tabs/Account/AccountsTab';\nimport { GroupsTabPage } from './Tabs/Account/Groups';\nimport { getLastSegment } from 'Components/app.const'\n// import {GridHorizontalDivider} from \"../../Components/UI\";\n\n//#endregion Interface Imports\nconst page_tab_titles: any = ['Accounts', 'Roles', 'Groups'];\nconst UsersTabs = withStyles({\n  root: {},\n  indicator: {\n    display: 'none',\n  },\n})(Tabs);\n\nconst UsersTab = withStyles({\n  root: {\n    color: 'rgba(39, 46, 76, 0.5)',\n    minWidth: 80,\n    paddingLeft: 24,\n    paddingRight: 24,\n    fontSize: '0.875rem',\n    fontWeight: 400,\n    '&:hover': {\n      color: 'rgba(39, 46, 76, 1)',\n      fontWeight: 400,\n    },\n    '&$selected': {\n      textDecoration: 'underline',\n      color: '#3AB77D',\n      fontWeight: 600,\n    },\n  },\n  selected: {},\n})(Tab);\n\nconst useStyles = makeStyles(theme => ({\n  gridContainerNoPadding: {\n    padding: theme.spacing(1),\n  },\n  sectionTitle: {\n    fontSize: 24,\n    fontWeight: 700,\n    color: '#272e4c',\n  },\n  subSectionTitle: {\n    fontSize: 16,\n    fontWeight: 400,\n    color: '#272e4c',\n  },\n  fieldGroupTitle: {\n    fontSize: 13,\n    fontWeight: 700,\n    color: '#272e4c',\n  },\n  // listItemTextRoot: {\n  // \tflex: 'none',\n  // },\n  // listItemTextPrimarySelected: {\n  // \tfontSize: 14,\n  // \tfontWeight: 700,\n  // \tcolor: 'rgba(39, 46, 76, 1)',\n  // \tcursor: 'pointer',\n  // },\n  // listItemTextPrimaryNotSelected: {\n  // \tfontSize: 14,\n  // \tfontWeight: 700,\n  // \tcolor: 'rgba(39, 46, 76, 0.3)',\n  // \tcursor: 'pointer',\n  // },\n  dropzone: {\n    width: '460px',\n    height: '88px',\n    marginTop: '10px',\n    marginBottom: '20px',\n    border: '2px dashed rgba(30, 32, 113, 0.3)',\n    borderRadius: '5px',\n    backgroundColor: '#e6e8ee',\n    color: '#7b8094',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'column',\n  },\n  inputLabel: {\n    color: '#272e4c',\n  },\n  keyboardDatePicker: {\n    marginTop: '10px',\n    marginBottom: '20px',\n    width: '212px',\n  },\n  checkbox: {\n    '&.Mui-checked': {\n      color: '#1e2071',\n    },\n  },\n  radio: {\n    '&.Mui-checked': {\n      color: '#1e2071',\n    },\n  },\n  appBar: {\n    top: 'auto',\n    bottom: 0,\n    border: '1px solid #707070',\n    backgroundColor: 'rgba(54, 54, 54, 0.64)',\n    [theme.breakpoints.up('sm')]: {\n      width: 'calc(100% - 72px)',\n    },\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  button: {\n    margin: '0 10px',\n    minHeight: '42px',\n    minWidth: '150px',\n  },\n  buttonTitle: {\n    fontWeight: 700,\n    fontSize: 13,\n  },\n  buttonSubTitle: {\n    fontWeight: 400,\n    fontSize: 7,\n  },\n  gridContainer: {\n    backgroundColor: '',\n    minHeight: '100px',\n  },\n  breadCrumbs: {\n    marginBottom: '20px',\n  },\n  headerTitle: {\n    fontSize: '1.5rem',\n    alignItems: 'flex-start',\n    fontWeight: 600,\n    paddingBottom: '20px',\n  },\n  linkPrevious: {\n    fontSize: 12,\n    fontWeight: 300,\n    color: 'black',\n    cursor: 'pointer',\n    textDecoration: 'underline',\n  },\n  sideBar: {\n    borderRight: '1px solid #C3C3C3',\n  },\n  selectedpage: {\n    paddingLeft: '37px',\n  },\n  linkCurrent: {\n    fontSize: 12,\n    fontWeight: 600,\n    color: 'black',\n    cursor: 'pointer',\n  },\n  main: {\n    backgroundColor: '#F5F7FB',\n    padding: '32px 24px',\n  },\n  gridItemLayout: {\n    padding: theme.spacing(1),\n  },\n  avatar: {\n    width: '130px',\n    height: '130px',\n  },\n  linkStyleSelected: {\n    '&:hover': {\n      fontWeight: 'normal'\n    }\n  },\n  sideNavHeader: {\n    fontSize: 13,\n    fontWeight: 700,\n    color: 'rgba(39, 46, 76, 0.3)',\n  },\n  listItemTextRoot: {\n    flex: 'none',\n  },\n  listItemTextPrimarySelected: {\n    fontSize: 14,\n    fontWeight: 700,\n    color: '#2c2e8e',\n    cursor: 'pointer',\n    textDecoration: 'underline',\n  },\n  listItemTextPrimaryNotSelected: {\n    fontSize: 14,\n    color: '#272e4c',\n    cursor: 'pointer',\n  },\n  addFieldIcon: {\n    color: '#3AB77D',\n    cursor: 'pointer',\n    fontSize: '13px',\n    marginRight: '8px',\n  },\n  addACode: {\n    paddingRight: '15px',\n    marginTop: 15,\n    textAlign: 'center',\n  },\n  codeHeader: {\n    color: '#272E4C',\n    textAlign: 'left',\n    // font: 'Medium 16px/22px Usual',\n    opacity: 1,\n    letterSpacing: 0,\n    textAlignLast: 'left',\n    fontSize: '16px',\n  },\n  codeItems: {\n    color: '#272E4C',\n    textAlign: 'left',\n    // font: 'Regular 12px/14px Usual',\n    opacity: 0.6,\n    letterSpacing: 0,\n    textAlignLast: 'left',\n    fontSize: '12px',\n  },\n  codeListItems: {\n    color: '#272E4C',\n    textAlign: 'left',\n    // font: 'Regular 12px/14px Usual',\n    opacity: 1,\n    letterSpacing: 0,\n    textAlignLast: 'left',\n    fontSize: '12px',\n    // width: '230px',\n    // height: '22px',\n    '&:hover': {\n      textDecoration: 'underline',\n      color: '#3AB77D',\n      fontWeight: 600,\n    },\n    '&$selected': {\n      textDecoration: 'underline',\n      color: '#3AB77D',\n      fontWeight: 600,\n    },\n  }\n}));\n\nexport const UsersPage = () => {\n  const [selectedTab, setSelectedTab] = useState(0);\n  // const [sideNav, setSideNav] = useState('information');\n  const classes = useStyles();\n\n  const handleTabChange = (\n    _event: React.ChangeEvent<HTMLDivElement>,\n    tab: number,\n  ) => {\n    setSelectedTab(tab);\n  };\n\n  React.useEffect(() => {\n    if (getLastSegment() === 'roles') {\n      setSelectedTab(1);\n    }\n    if (getLastSegment() === 'groups') {\n      setSelectedTab(2);\n    }\n  }, [])\n\n  return (\n    <div className={classes.main}>\n      <Grid\n        container\n        justify=\"space-between\"\n        alignItems=\"center\"\n        className={classes.gridContainer}\n      >\n        <Grid item>\n          <Typography className={classes.headerTitle}>Users\n        <UsersTabs\n              value={selectedTab}\n              onChange={handleTabChange}\n              aria-label=\"page tab\"\n            >\n              {page_tab_titles.map((title: string, index: number) => (\n                <UsersTab\n                  label={title}\n                  id={'users_tab_' + index}\n                  aria-controls={'users-tabpanel-' + index}\n                  key={index}\n                />\n              ))}\n            </UsersTabs>\n          </Typography>\n        </Grid>\n      </Grid>\n\n      {/* Headers */}\n\n\n      {/* Body */}\n      <Grid container>\n        <Grid item xs={12} md={12} className={classes.selectedpage}>\n          {\n            selectedTab === 0 ?\n              (<AccountTabPage />)\n              : selectedTab === 1 ?\n                (<RolesTableList classes={classes} />)\n                : selectedTab === 2 ?\n                (<GroupsTabPage classes={classes} />)\n                  : null\n          }\n          {/* <UsersTable classes={classes} /> */}\n        </Grid>\n      </Grid>\n\n\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: Store) => state.users;\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  Map: bindActionCreators(UsersActions.Map, dispatch),\n});\n\nexport { mapStateToProps, mapDispatchToProps };\n"],"sourceRoot":""}