{"version":3,"sources":["Pages/Roles/ActionConsts.ts","Pages/Roles/RolesActions.ts","Pages/Roles/Components/Policies.tsx","Pages/Roles/Components/AddRoleBody.tsx","Pages/Roles/Components/GroupsAndUsers.tsx","Pages/Roles/RolesPage.tsx"],"names":["ActionConsts","ResetReducer","SetReducer","RolesActions","payload","type","Policies","props","rows","classes","mode","moduleName","rbacList","onChangeModuleName","roleId","onUpdateChange","React","isAddedModalRole","setIsAddedModalRole","moduleValue","setModuleValue","isModuleModalOpen","setIsModuleModalOpen","moduleLabel","setModuleLabel","effectivityDate","setEffectivityDate","expiryDate","setExpiryDate","description","setDescription","roleName","setRoleName","isModalConfirmChangeModule","setIsModalConfirmChangeModule","newRbacList","setNewRbacList","loading","setLoading","defaultFilters","setDefaultFilters","isModalDeleteSuccessOpen","setIsModalDeleteSuccessOpen","isModalCannotEditOpen","setIsModalCannotEditOpen","moduleItems","name","value","handleUpdateCheck","rbac","length","filter","data","checked","role_id","effectivity_date","moment","Date","toISOString","expiry_date","is_processmaker","console","log","Grid","container","xs","spacing","item","InputLabel","className","inputLabel","htmlFor","Typography","status","format","associate_groups","map","groups","main_module","Link","onClick","onBlur","e","target","onChange","views","style","width","marginTop","inputVariant","ReactSearch","onSearch","placeholder","ReactTable","columns","title","enableGrouping","groupColumnName","viewOnly","message","enableSelection","onCheckRow","row","_id","handleOnCheckRow","setTimeout","onFilterChange","onSelectGroup","group","countChecked","handleOnCheckGroup","ModalComponent","isModalOpen","onClose","buttons","justify","alignItems","Button","button","variant","color","textAlign","margin","menuItems","Number","handleContinueRole","useStyles","makeStyles","selectedItems","borderRadius","fontSize","backgroundColor","padding","xIcon","AddRoleBody","handleOnSearch","list","arr","state","push","setState","handleRemoveItem","index","splice","handleOnSaveItems","onSave","comboArray","this","buttonsContainer","selectedContainer","display","selectedText","paddingRight","saveButton","cancelButton","searchLabel","comboBoxMode","comboListsArray","icon","faTimesCircle","disabled","GroupsAndUsers","useState","activeItem","setActiveItem","activeClass","setActiveClass","showBlock","setShowBlock","isModalRemoveOpen","setIsModalRemoveOpen","isModalRemoveSuccessOpen","setIsModalSuccessRemoveOpen","isModalSuccessUserGroupOpen","setIsModalSuccessGroupOpen","i","menuList","classNames","menuLink","LinkActive","handleMenuClick","alignRight","group_id","users_in_group","columnExtensions","columnName","wordWrapEnabled","align","sortingStateColumnExtensions","sortingEnabled","onDeleteRow","username","user_account","last_activity_date","handleClose","items","theme","mainContainer","main","position","headMain","gridContainer","paddingBottom","gridContainerNoPadding","sectionTitle","fontWeight","subSectionTitle","editBtn","sideBarContainer","borderRight","contentContainer","paddingLeft","sideBarLists","listStyle","sideBarLink","fieldGroupTitle","listItemTextRoot","flex","listItemTextPrimarySelected","cursor","listItemTextPrimaryNotSelected","dropzone","height","marginBottom","border","justifyContent","flexDirection","keyboardDatePicker","checkbox","radio","appBar","top","bottom","breakpoints","up","grow","flexGrow","minHeight","minWidth","buttonTitle","buttonSubTitle","textDecoration","RolesPage","setViewOnly","isModalConfirmExitOpen","setIsModalConfirmExitOpen","isModalConfirmSaveOpen","setIsModalConfirmSaveOpen","setMode","policyResponse","setPolicyResponse","setModuleName","setRbacList","breadCrumbs","setBreadCrumbs","rbacCount","setRbacCount","setRoleId","policyData","setPolicyData","location","from","handleGetRbacCount","match","params","id","handleGetRoleData","_crumbs","handGetRbacList","getRbacCount","then","generateRoleId","count","catch","err","getRoleData","response","getRbacList","body","handleModalConfirmationClose","SubHeader","headingTitle","breadCrumbsArray","buttonFunc","buttonName","layoutType","enableButton","SideMenu","activeItems","handleChangeModuleName","createRoleRbac","handleOnSave","mapStateToProps","roles","mapDispatchToProps","dispatch","Map","bindActionCreators"],"mappings":"mKAAaA,EACL,CACNC,aAAc,qBACdC,WAAY,oBCSDC,EACP,SAACC,GAAD,MAAkB,CACtBA,UACAC,KAAML,EAAmBE,a,8GCedI,EAAqC,SAACC,GAAwC,IAEnFC,EAQAD,EARAC,KACAC,EAOAF,EAPAE,QACAC,EAMAH,EANAG,KACAC,EAKAJ,EALAI,WACAC,EAIAL,EAJAK,SACAC,EAGAN,EAHAM,mBACAC,EAEAP,EAFAO,OACAC,EACAR,EADAQ,eATkF,EAWtCC,YAAe,GAXuB,mBAW/EC,EAX+E,KAW7DC,EAX6D,OAYhDF,WAAe,GAZiC,mBAY/EG,EAZ+E,KAYlEC,EAZkE,OAapCJ,YAAe,GAbqB,mBAa/EK,EAb+E,KAa5DC,EAb4D,OAchDN,WAAoB,MAd4B,mBAc/EO,EAd+E,KAclEC,EAdkE,OAexCR,WAAe,IAfyB,mBAe/ES,EAf+E,KAe9DC,EAf8D,OAgBlDV,WAAe,IAhBmC,mBAgB/EW,EAhB+E,KAgBnEC,EAhBmE,OAiBhDZ,WAAe,MAjBiC,mBAiB/Ea,EAjB+E,KAiBlEC,EAjBkE,OAkBtDd,WAAe,IAlBuC,mBAkB/Ee,EAlB+E,KAkBrEC,EAlBqE,QAmBlBhB,YAAe,GAnBG,qBAmB/EiB,GAnB+E,MAmBnDC,GAnBmD,SAoBhDlB,WAAe,IApBiC,qBAoB/EmB,GApB+E,MAoBlEC,GApBkE,SAqBxDpB,YAAe,GArByC,qBAqB/EqB,GArB+E,MAqBtEC,GArBsE,SAsB1CtB,WAAe,IAtB2B,qBAsB/EuB,GAtB+E,MAsB/DC,GAtB+D,SAuBtBxB,YAAe,GAvBO,qBAuB/EyB,GAvB+E,MAuBrDC,GAvBqD,SAwB5B1B,YAAe,GAxBa,qBAwB/E2B,GAxB+E,MAwBxDC,GAxBwD,MA0BhFC,GAAc,CAChB,CACIC,KAAM,kBACNC,MAAO,KAEX,CACID,KAAM,aACNC,MAAO,KAEX,CACID,KAAM,eACNC,MAAO,KAEX,CACID,KAAM,gBACNC,MAAO,KAEX,CACID,KAAM,SACNC,MAAO,KAEX,CACID,KAAM,UACNC,MAAO,MAgGTC,GAAoB,WACtB,IAAIC,EAGJA,GAFkBd,GAAYe,OAAS,EAAIf,GAAcvB,GAExCuC,OAAO,SAACC,GACrB,OAAOA,EAAKC,UAGhB,IAAID,EAAsB,CACtBN,KAAMf,EACNuB,QAAoB,KAAXxC,EAAgBA,EAASN,EAAK8C,QACvCC,iBAAkBC,IAA2B,KAApB/B,EAAyBA,EAAkB,IAAIgC,MAAQC,cAChFC,YAAaH,IAAO7B,GAAY+B,cAChCE,iBAAiB,EACjBX,KAAMA,GAGVY,QAAQC,IAAIV,GAEZrC,EAAeqC,IA4LnB,OACI,gCACI,gBAACW,EAAA,EAAD,CAAMC,WAAS,EAACC,GAAI,GAAIC,QAAS,GAEhB,SAATxD,EAvLR,gCACI,gBAACqD,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACX,gBAACG,EAAA,EAAD,CAAYC,UAAW5D,EAAQ6D,WAAYC,QAAQ,WAAnD,WACA,gBAACC,EAAA,EAAD,KAAY,yBAAIhE,GAAQA,EAAK8C,WAEjC,gBAACS,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACX,gBAACG,EAAA,EAAD,CAAYC,UAAW5D,EAAQ6D,WAAYC,QAAQ,eAAnD,eACA,gBAACC,EAAA,EAAD,KAAY,yBAAIhE,GAAQA,EAAKqB,eAEjC,gBAACkC,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACX,gBAACG,EAAA,EAAD,CAAYC,UAAW5D,EAAQ6D,WAAYC,QAAQ,UAAnD,UACA,gBAACC,EAAA,EAAD,KAAY,yBAAIhE,GAAQA,EAAKiE,UAEjC,gBAACV,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACX,gBAACG,EAAA,EAAD,CAAYC,UAAW5D,EAAQ6D,WAAYC,QAAQ,kBAAnD,oBACA,gBAACC,EAAA,EAAD,KAAY,yBAAIhE,GAAQgD,IAAOhD,EAAK+C,kBAAkBmB,OAAO,oBAEjE,gBAACX,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACX,gBAACG,EAAA,EAAD,CAAYC,UAAW5D,EAAQ6D,WAAYC,QAAQ,WAAnD,aACA,gBAACC,EAAA,EAAD,KAAY,yBAAIhE,GAAQA,EAAKsC,QAEjC,gBAACiB,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACX,gBAACG,EAAA,EAAD,CAAYC,UAAW5D,EAAQ6D,WAAYC,QAAQ,eAAnD,oBACA,gBAACC,EAAA,EAAD,KAEQhE,GAAQA,EAAKmE,kBAAoBnE,EAAKmE,iBAAiBzB,OAAS,GAAK1C,EAAKmE,iBAAiBC,IAAI,SAACC,GAAD,OAC3F,yBAAIA,EAAJ,SAKhB,gBAACd,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACX,gBAACG,EAAA,EAAD,CAAYC,UAAW5D,EAAQ6D,WAAYC,QAAQ,kBAAnD,eACA,gBAACC,EAAA,EAAD,KAAY,yBAAIhE,GAAQgD,IAAOhD,EAAK+C,kBAAkBmB,OAAO,oBAEjE,gBAACX,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACX,gBAACG,EAAA,EAAD,CAAYC,UAAW5D,EAAQ6D,WAAYC,QAAQ,kBAAnD,kBACA,gBAACC,EAAA,EAAD,KAAY,yBAAIhE,GAAQA,EAAKsE,gBAoJhB,SAATpE,EAvEZ,gCACI,gBAACqD,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACX,gBAACG,EAAA,EAAD,CAAYC,UAAW5D,EAAQ6D,WAAYC,QAAQ,WAAnD,UACA,gBAACC,EAAA,EAAD,KAAY,yBAAoB,OAAhBjD,EAAuBA,EAAcf,EAAKsE,cAC1D,gBAACC,EAAA,EAAD,CAAMC,QAAS,WAAQ1D,GAAqB,KAA5C,kBAEJ,gBAACyC,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACX,gBAACG,EAAA,EAAD,CAAYC,UAAW5D,EAAQ6D,WAAYC,QAAQ,WAAnD,WACA,gBAACC,EAAA,EAAD,KAAY,yBAAoB,OAAhBjD,EAAuBT,EAASN,EAAK8C,WAEzD,gBAACS,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACX,gBAACG,EAAA,EAAD,CAAYC,UAAW5D,EAAQ6D,WAAYC,QAAQ,WAAnD,eAEA,gBAAC,iBAAD,CACIxB,MAAuB,OAAhBlB,EAAuBA,EAAcrB,EAAKqB,YACjDoD,OAAQ,SAACC,GACLpD,EAAeoD,EAAEC,OAAOpC,WAIpC,gBAACgB,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACX,gBAACG,EAAA,EAAD,CAAYC,UAAW5D,EAAQ6D,WAAYC,QAAQ,WAAnD,aACA,gBAAC,iBAAD,CACIxB,MAAoB,KAAbhB,EAAkBA,EAAWvB,EAAKsC,KACzCsC,SAAU,SAACF,GACPlD,EAAYkD,EAAEC,OAAOpC,WAIjC,gBAACgB,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACX,gBAACG,EAAA,EAAD,CAAYC,UAAW5D,EAAQ6D,WAAYC,QAAQ,WAAnD,UACA,gBAACC,EAAA,EAAD,KAAY,yBAAIhE,GAAQA,EAAKiE,UAEjC,gBAACV,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACX,gBAACG,EAAA,EAAD,CAAYC,UAAW5D,EAAQ6D,WAAYC,QAAQ,WAAnD,oBACA,gBAAC,IAAD,CACIc,MAAO,CAAC,OAAQ,OAAQ,SACxBtC,MAA2B,KAApBtB,EAAyBA,EAAkB+B,IAAOhD,EAAK+C,kBAC9DmB,OAAQ,eACRY,MAAO,CAAEC,MAAO,OAAQC,UAAW,IACnCJ,SAAU,SAACF,GACPxD,EAAmBwD,IAEvBO,aAAc,cAItB,gBAAC1B,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACX,gBAACG,EAAA,EAAD,CAAYC,UAAW5D,EAAQ6D,WAAYC,QAAQ,WAAnD,+BACA,gBAAC,IAAD,CACIc,MAAO,CAAC,OAAQ,OAAQ,SACxBtC,MAAsB,KAAfpB,EAAoBA,EAAa,KACxC2D,MAAO,CAAEC,MAAO,OAAQC,UAAW,IACnCd,OAAQ,eACRU,SAAU,SAACF,GACPtD,EAAcsD,IAElBO,aAAc,eAgBL,QAAT/E,EA7IZ,gCACI,gBAACqD,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACX,gBAACG,EAAA,EAAD,CAAYC,UAAW5D,EAAQ6D,WAAYC,QAAQ,WAAnD,UACA,gBAACC,EAAA,EAAD,KAAY,yBAAoB,OAAhBjD,EAAuBA,EAAcZ,IACrD,gBAACoE,EAAA,EAAD,CAAMC,QAAS,WAAQ1D,GAAqB,KAA5C,kBAEJ,gBAACyC,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACX,gBAACG,EAAA,EAAD,CAAYC,UAAW5D,EAAQ6D,WAAYC,QAAQ,WAAnD,WACA,gBAACC,EAAA,EAAD,KAAY,yBAAI1D,KAEpB,gBAACiD,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACX,gBAACG,EAAA,EAAD,CAAYC,UAAW5D,EAAQ6D,WAAYC,QAAQ,WAAnD,eAEA,gBAAC,iBAAD,CACIU,OAAQ,SAACC,GACLrB,QAAQC,IAAIoB,EAAEC,OAAOpC,OACrBjB,EAAeoD,EAAEC,OAAOpC,OACxBC,SAIZ,gBAACe,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACX,gBAACG,EAAA,EAAD,CAAYC,UAAW5D,EAAQ6D,WAAYC,QAAQ,WAAnD,aACA,gBAAC,iBAAD,CACIU,OAAQ,SAACC,GACLlD,EAAYkD,EAAEC,OAAOpC,OACrBC,SAIZ,gBAACe,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,IAEf,gBAACF,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACX,gBAACG,EAAA,EAAD,CAAYC,UAAW5D,EAAQ6D,WAAYC,QAAQ,WAAnD,oBACA,gBAAC,IAAD,CACIc,MAAO,CAAC,OAAQ,OAAQ,SACxBtC,MAA2B,KAApBtB,EAAyBA,EAAkB,IAAIgC,KACtDiB,OAAQ,eACRY,MAAO,CAAEC,MAAO,OAAQC,UAAW,IACnCJ,SAAU,SAACF,GACPxD,EAAmBwD,GACnBlC,MAEJyC,aAAc,cAItB,gBAAC1B,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACX,gBAACG,EAAA,EAAD,CAAYC,UAAW5D,EAAQ6D,WAAYC,QAAQ,WAAnD,+BACA,gBAAC,IAAD,CACIc,MAAO,CAAC,OAAQ,OAAQ,SACxBtC,MAAsB,KAAfpB,EAAoBA,EAAa,KACxC2D,MAAO,CAAEC,MAAO,OAAQC,UAAW,IACnCd,OAAQ,eACRU,SAAU,SAACF,GACPtD,EAAcsD,GACdlC,MAEJyC,aAAc,eAqFd,KAER,gBAAC1B,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,IAEX,gBAACyB,EAAA,EAAD,CACIC,SAAU,kBAAM9B,QAAQC,IAAI,cAC5B8B,YAAa,oBAGb,gBAACC,EAAA,EAAD,CACIrF,KAAM2B,GAAYe,OAAS,EAAIf,GAAcvB,EAC7CkF,QAhUH,CACjB,CACIhD,KAAM,YACNiD,MAAO,yBAEX,CACIjD,KAAM,SACNiD,MAAO,YAEX,CACIjD,KAAM,YACNiD,MAAO,aAEX,CACIjD,KAAM,OACNiD,MAAO,SAkTSC,gBAAgB,EAChBC,gBAAiB,OACjBC,SAAmB,SAATxF,EACVyF,QAAS,0CACTC,gBAA0B,SAAT1F,EACjB2B,QAASA,GACTgE,WAAY,SAACC,IAjSZ,SAACA,GACtBhE,IAAW,GAEX,IAAIW,EAAOrC,EACgB,IAAvBuB,GAAYe,OACZd,GAAexB,GAEfqC,EAAOd,GAEPc,EAAKC,OAAS,IACdD,EAAK2B,IAAI,SAACxB,GACFA,EAAKmD,MAAQD,EAAIC,MACjBnD,EAAI,SAAeA,EAAI,WAG/BhB,GAAea,IAEnBX,IAAW,GAiRakE,CAAiBF,GACjBG,WAAW,WACPzD,MACD,MAEPT,eAAgBA,GAChBmE,eA5NK,SAACvD,GAC1BX,GAAkBW,IA4NEwD,cAAe,SAACC,IArRb,SAACA,GACxBtE,IAAW,GACX,IAAIW,EAAOrC,EACPiG,EAAe,EAEQ,IAAvB1E,GAAYe,QACZd,GAAexB,GAEfqC,EAAKC,OAAS,GACdD,EAAK2B,IAAI,SAACxB,GACFA,EAAKN,MAAQ8D,IAA0B,IAAjBxD,EAAKC,SAC3BwD,MAIRA,EAAe,EACf5D,EAAK2B,IAAI,SAACxB,GACFA,EAAKN,MAAQ8D,IACbxD,EAAI,SAAc,KAI1BH,EAAK2B,IAAI,SAACxB,GACFA,EAAKN,MAAQ8D,IACbxD,EAAI,SAAc,KAI9BhB,GAAea,GACfwD,WAAW,WACPnE,IAAW,IACZ,KAuPqBwE,CAAmBF,GACnBH,WAAW,WACPzD,MACD,UAMvB,gBAAC+D,EAAA,EAAD,CACIC,YAAa/F,EACbgG,QAhUuB,aAiUvBd,QAAS,wCACTJ,MAAO,iBACPmB,QACI,gBAACnD,EAAA,EAAD,CAAMC,WAAS,EAACmD,QAAQ,SAASC,WAAW,UACxC,gBAACrD,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACX,gBAACoD,EAAA,EAAD,CAAQrC,QAAS,WAAQ9D,GAAoB,IAAUmD,UAAW5D,EAAQ6G,OAAQC,QAAS,YAAaC,MAAO,WAA/G,YAKhB,gBAACT,EAAA,EAAD,CACIC,YAAa3F,EACb4F,QAAS,WACL3F,GAAqB,IAEzB6E,QAAS,gDACTJ,MAAO,kBACPmB,QACI,gBAACnD,EAAA,EAAD,CAAMC,WAAS,EAACmD,QAAQ,SAASC,WAAW,SAAS9B,MAAO,CAAEmC,UAAW,WACrE,gBAAC1D,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACX,gBAACoD,EAAA,EAAD,CACIrC,QAAS,WACL1D,GAAqB,IAEzBiG,QAAS,WACTC,MAAO,YACPnD,UAAW5D,EAAQ6G,QANvB,WASJ,gBAACvD,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACX,gBAACoD,EAAA,EAAD,CAAQE,QAAS,YAAaC,MAAO,UACjCnD,UAAW5D,EAAQ6G,OACnBtC,QAAS,WACL9C,IAA8B,GAC9BZ,GAAqB,KAJ7B,eAUZ,uBAAKgE,MAAO,CAAEC,MAAO,MAAOmC,OAAQ,SAChC,gBAAC,cAAD,CACIC,UAAW9E,GACX0C,MAAO,OACPxC,MAAO5B,EACPiE,SAAU,SAACF,GACP9D,EAAe8D,EAAEC,OAAOpC,YAKxC,gBAACgE,EAAA,EAAD,CACIC,YAAa/E,GACbgF,QAAS,WACL/E,IAA8B,IAElCiE,QAAS,iEACTJ,MAAO,wBACPmB,QACI,gBAACnD,EAAA,EAAD,CAAMC,WAAS,EAACmD,QAAQ,SAASC,WAAW,UACxC,gBAACrD,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACX,gBAACoD,EAAA,EAAD,CAAQrC,QAAS,WAAQ9C,IAA8B,IAAUmC,UAAW5D,EAAQ6G,OAAQC,QAAS,WAAYC,MAAO,aAAxH,WAEJ,gBAACzD,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACX,gBAACoD,EAAA,EAAD,CAAQhD,UAAW5D,EAAQ6G,OAAQC,QAAS,YAAaC,MAAO,UAAWxC,QAAS,kBA7XjF,WACvB,IAAIrE,EAAakC,GAAY+E,OAAOzG,IAAc2B,KAClDZ,IAA8B,GAC9BV,EAAeb,GACfE,EAAmBF,GAyX2FkH,KAA1F,gBAMhB,gBAACd,EAAA,EAAD,CACIC,YAAavE,GACbwE,QA7Y8B,WACtCvE,IAA4B,IA6YpByD,QAAS,6BACTJ,MAAO,iBACPmB,QACI,gBAACnD,EAAA,EAAD,CAAMC,WAAS,EAACmD,QAAQ,SAASC,WAAW,UACxC,gBAACrD,EAAA,EAAD,CAAMI,MAAI,GACN,gBAACkD,EAAA,EAAD,CACIrC,QAAS,WACLtC,IAA4B,IAEhC2B,UAAW5D,EAAQ6G,OACnBC,QAAS,YACTC,MAAO,WANX,YAehB,gBAACT,EAAA,EAAD,CACIC,YAAarE,GACbsE,QAxa2B,WACnCrE,IAAyB,IAwajBuD,QAAS,2EACTJ,MAAO,mBACPmB,QACI,gBAACnD,EAAA,EAAD,CAAMC,WAAS,EAACmD,QAAQ,SAASC,WAAW,UACxC,gBAACrD,EAAA,EAAD,CAAMI,MAAI,GACN,gBAACkD,EAAA,EAAD,CACIrC,QAAS,WACLpC,IAAyB,IAE7ByB,UAAW5D,EAAQ6G,OACnBC,QAAS,YACTC,MAAO,WANX,c,0EC5gBtBM,EAAYC,YAAW,iBAAO,CAChCC,cAAe,CACXC,aAAc,GACdC,SAAU,GACVC,gBAAiB,UACjBC,QAAS,YAEbC,MAAO,CACHH,SAAU,OAGlBrE,QAAQC,IAAIgE,GAYL,IAAMQ,EAAb,YACI,WAAY/H,GAAQ,IAAD,8BACf,4CAAMA,KAwBVgI,eAAiB,SAACC,GACd,IAAIC,EAAM,EAAKC,MAAMV,cACrBS,EAAIE,KAAKH,GACT,EAAKI,SAAS,CACVZ,cAAeS,IAEnB5E,QAAQC,IAAI2E,IA/BG,EAkCnBI,iBAAmB,SAACC,GAChB,IAAIL,EAAM,EAAKC,MAAMV,cACrBS,EAAIM,OAAOD,EAAO,GAClB,EAAKF,SAAS,CACVZ,cAAeS,KAtCJ,EA0CnBO,kBAAoB,WAChB,EAAKzI,MAAM0I,OAAO,EAAKP,MAAMV,gBAzC7B,EAAKU,MAAQ,CACTV,cAAe,GACfkB,WAAY,IAJD,EADvB,iFAYQC,KAAKP,SAAS,CACVM,WAAY,CACR,CACIpG,KAAM,sBACNC,MAAO,QAEX,CACID,KAAM,UACNC,MAAO,cApB3B,+BA+CkC,IAAD,OACnBtC,EAAU,CACZ2I,iBAAkB,CACdhB,QAAS,OAEbiB,kBAAmB,CACfjB,QAAS,aAEbJ,cAAe,CACXC,aAAc,GACdC,SAAU,GACVC,gBAAiB,UACjBC,QAAS,WACTV,OAAQ,MACR4B,QAAS,gBAEbC,aAAc,CACVC,aAAc,OAElBC,WAAY,CACRlE,MAAO,QACP2C,SAAU,OACVV,MAAO,QAEXkC,aAAc,CACVnE,MAAO,QACP2C,SAAU,SAIlB,OACI,gCACI,gBAACxC,EAAA,EAAD,CACIiE,YAAa,sBACbhE,SAAUwD,KAAKZ,eACfqB,cAAc,EACdC,gBAAiBV,KAAKT,MAAMQ,aAEhC,uBAAK5D,MAAO7E,EAAQ4I,mBAChB,2BACI,gDAEHF,KAAKT,MAAMV,cAAcpD,IAAI,SAACT,EAAM2E,GAAP,OAC1B,uBAAKxD,MAAO7E,EAAQuH,eAChB,wBAAM1C,MAAO7E,EAAQ8I,cAAepF,GACpC,wBAAMa,QAAS,kBAAM,EAAK6D,iBAAiBC,KACvC,gBAAC,IAAD,CAAiBgB,KAAMC,WAMvC,gBAAChG,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,GACrB,gBAACH,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACX,gBAACoD,EAAA,EAAD,CAAQ/B,MAAO7E,EAAQiJ,aAAcnC,QAAQ,WAAWC,MAAM,YAAYxC,QAAS,kBAAM,EAAKzE,MAAM0G,YAApG,WAEJ,gBAAClD,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACX,gBAACoD,EAAA,EAAD,CAAQ2C,SAAUb,KAAKT,MAAMV,cAAc9E,OAAS,EAAkBoC,MAAO7E,EAAQgJ,WAAYlC,QAAQ,YAAYC,MAAM,UAAUxC,QAAS,kBAAM,EAAKgE,sBAAzJ,eAxGxB,GAAiChI,aCfpBiJ,EAAiD,SAAC1J,GAA8C,IAErGC,EAGAD,EAHAC,KACA0F,EAEA3F,EAFA2F,SACAzF,EACAF,EADAE,QAJoG,EAMpEyJ,mBAAS,UAN2D,mBAMjGC,EANiG,KAMrFC,EANqF,OAOlEF,mBAAS,GAPyD,mBAOjGG,EAPiG,KAOpFC,EAPoF,OAQtEJ,mBAAS,QAR6D,mBAQjGK,EARiG,KAQtFC,EARsF,OAStDN,oBAAS,GAT6C,mBASjGO,EATiG,KAS9EC,EAT8E,OAUxCR,oBAAS,GAV+B,mBAUjGS,EAViG,KAUvEC,EAVuE,OAWtCV,oBAAS,GAX6B,mBAWjGW,EAXiG,KAWpEC,EAXoE,KAYxGjH,QAAQC,IAAItD,EAAM0F,GAwGlB,OACI,gCACI,gBAACnC,EAAA,EAAD,CAAMC,WAAS,EAACC,GAAI,IAChB,gBAACF,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,IACX,gBAACO,EAAA,EAAD,KAAY,wDAEhB,gBAACT,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,IACX,gBAACF,EAAA,EAAD,CAAMC,WAAS,EAACC,GAAI,GAAImD,WAAY,UAChC,gBAACrD,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACX,sBAAIqB,MAAO,CAAE8C,QAAS,IAAKV,OAAQ,MAnCzC,CACd,SACA,SAmCsC9C,IAAI,SAACT,EAAM4G,GAAP,OACV,sBAAI1G,UAAW5D,EAAQuK,UACnB,gBAACjG,EAAA,EAAD,CACIV,UAAW4G,IAAWxK,EAAQyK,SAAUb,IAAgBU,EAAItK,EAAQ0K,WAAa,MACjFnG,QAAS,kBApC7B,SAACb,EAAM2E,GAC3BsB,EAAcjG,GACdmG,EAAexB,GAkCwCsC,CAAgBjH,EAAM4G,KACpC5G,QAOzB,gBAACJ,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,EAAGI,UAAW5D,EAAQ4K,YACjC,gBAACtG,EAAA,EAAD,CAAMC,QAAS,WAAQwF,EAAa,WAApC,wBAIZ,gBAACzG,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,IAEO,UAAdkG,EACI,gCACI,gBAACzE,EAAA,EAAD,CACIC,SAAU,kBAAM9B,QAAQC,IAAI,WAC5B8B,YAAa,wBAEjB,gBAACC,EAAA,EAAD,CACIrF,KArGR,CACpB,CACI8K,SAAU,kBACV1E,MAAO,eACP2E,eAAgB,GAChB9G,OAAQ,UAEZ,CACI6G,SAAU,gBACV1E,MAAO,eACP2E,eAAgB,GAChB9G,OAAQ,WA2FgBqB,QAvFL,CACvB,CACIhD,KAAM,WACNiD,MAAO,YAEX,CACIjD,KAAM,QACNiD,MAAO,SAEX,CACIjD,KAAM,iBACNiD,MAAO,sBAEX,CACIjD,KAAM,SACNiD,MAAO,UAEX,CACIjD,KAAM,gBACNiD,MAAO,MAqEiByF,iBACI,CAAC,CACGC,WAAY,gBACZlG,MAAO,GACPmG,iBAAiB,EACjBC,MAAO,WAGfxF,QAAS,0CACTyF,6BAA8B,CAC1B,CAAEH,WAAY,gBAAiBI,gBAAgB,IAEnDC,YAAa,SAACxF,GACVzC,QAAQC,IAAIwC,EAAK,kBAI3B,KAGQ,SAAd6D,EACI,gCACI,gBAACzE,EAAA,EAAD,CACIC,SAAU,kBAAM9B,QAAQC,IAAI,WAC5B8B,YAAa,0BACjB,gBAACC,EAAA,EAAD,CACIrF,KAvKV,CAClB,CACIuL,SAAU,WACVC,aAAc,2BACdC,mBAAoB,eACpBxH,OAAQ,UAEZ,CACIsH,SAAU,YACVC,aAAc,6BACdC,mBAAoB,eACpBxH,OAAQ,WA6JgBqB,QAzJP,CACrB,CACIhD,KAAM,WACNiD,MAAO,YAEX,CACIjD,KAAM,eACNiD,MAAO,gBAEX,CACIjD,KAAM,qBACNiD,MAAO,sBAEX,CACIjD,KAAM,SACNiD,MAAO,UAEX,CACIjD,KAAM,gBACNiD,MAAO,MAuIiByF,iBACI,CAAC,CACGC,WAAY,gBACZlG,MAAO,GACPmG,iBAAiB,EACjBC,MAAO,WAGfxF,QAAS,0CACTyF,6BAA8B,CAC1B,CAAEH,WAAY,gBAAiBI,gBAAgB,IAEnDC,YAAa,SAACxF,GACVzC,QAAQC,IAAIwC,EAAK,kBAI3B,OAIlB,gBAAC,iBAAD,CACI4F,YAAa,WAAQ1B,EAAa,SAClCD,UAAWA,EACXxE,MAAO,oBACP,gBAAC,EAAD,CACIkB,QAAS,WACLuD,EAAa,SAEjBvB,OAhHM,SAACkD,GACnBtI,QAAQC,IAAIqI,EAAO,qBAkHf,gBAACpF,EAAA,EAAD,CACIC,YAAayD,EACbxD,QAjHuB,WAC/ByD,GAAqB,IAiHbvE,QAAS,uCACTJ,MAAO,mBACPmB,QACI,gBAACnD,EAAA,EAAD,CAAMC,WAAS,EAACmD,QAAQ,SAASC,WAAW,UACxC,gBAACrD,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACX,gBAACoD,EAAA,EAAD,CACIrC,QAAS,WACL0F,GAAqB,IAEzBrG,UAAW5D,EAAQ6G,OACnBC,QAAS,WACTC,MAAO,aANX,WAUJ,gBAACzD,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACX,gBAACoD,EAAA,EAAD,CACIrC,QAAS,WACL0F,GAAqB,GACrBE,GAA4B,IAEhCvG,UAAW5D,EAAQ6G,OACnBC,QAAS,YACTC,MAAO,WAPX,cAchB,gBAACT,EAAA,EAAD,CACIC,YAAa6D,EACb5D,QA1IwB,WAChC6D,GAA2B,IA0InB3E,QAAS,+CACTJ,MAAO,oBACPmB,QACI,gBAACnD,EAAA,EAAD,CAAMC,WAAS,EAACmD,QAAQ,SAASC,WAAW,UACxC,gBAACrD,EAAA,EAAD,CAAMI,MAAI,GACN,gBAACkD,EAAA,EAAD,CACIrC,QAAS,WACL8F,GAA2B,IAE/BzG,UAAW5D,EAAQ6G,OACnBC,QAAS,YACTC,MAAO,WANX,YAahB,gBAACT,EAAA,EAAD,CACIC,YAAa2D,EACb1D,QAnK8B,WACtC2D,GAA4B,IAmKpBzE,QAAS,iDACTJ,MAAO,oBACPmB,QACI,gBAACnD,EAAA,EAAD,CAAMC,WAAS,EAACmD,QAAQ,SAASC,WAAW,UACxC,gBAACrD,EAAA,EAAD,CAAMI,MAAI,GACN,gBAACkD,EAAA,EAAD,CACIrC,QAAS,WACL4F,GAA4B,IAEhCvG,UAAW5D,EAAQ6G,OACnBC,QAAS,YACTC,MAAO,WANX,c,kKC1Q5B,IAAMM,EAAYC,YAAW,SAAAqE,GAAK,MAAK,CACtCC,cAAe,CACdjE,QAAS,kBAEVkE,KAAM,CACLnE,gBAAiB,UACjBC,QAAS,YACTmE,SAAU,YAEXC,SAAU,GAGVC,cAAe,CACdrE,QAASgE,EAAMlI,QAAQ,GACvBwI,cAAe,QAEhBC,uBAAwB,CACvBvE,QAASgE,EAAMlI,QAAQ,IAExB0I,aAAc,CACb1E,SAAU,GACV2E,WAAY,IACZrF,MAAO,WAERsF,gBAAiB,CAChB5E,SAAU,GACV2E,WAAY,IACZrF,MAAO,WAERuF,QAAS,CACRxH,MAAO,QACP2C,SAAU,OACVV,MAAO,QAER6D,WAAY,CACX5D,UAAW,SAEZuF,iBAAkB,CACjBC,YAAa,iBACbzD,aAAc,QAEf0D,iBAAkB,CACjBC,YAAa,QAEdC,aAAc,CACbhF,QAAS,EACTV,OAAQ,EACR2F,UAAW,QAEZC,YAAa,CACZ9F,MAAO,UACPE,OAAQ,WACR4B,QAAS,SAEViE,gBAAiB,CAChBrF,SAAU,GACV2E,WAAY,IACZrF,MAAO,WAERgG,iBAAkB,CACjBC,KAAM,QAEPC,4BAA6B,CAC5BxF,SAAU,GACV2E,WAAY,IACZrF,MAAO,sBACPmG,OAAQ,WAETC,+BAAgC,CAC/B1F,SAAU,GACV2E,WAAY,IACZrF,MAAO,wBACPmG,OAAQ,WAETE,SAAU,CACTtI,MAAO,QACPuI,OAAQ,OACRtI,UAAW,OACXuI,aAAc,OACdC,OAAQ,oCACR/F,aAAc,MACdE,gBAAiB,UACjBX,MAAO,UACP8B,QAAS,OACT2E,eAAgB,SAChB7G,WAAY,SACZ8G,cAAe,UAEhB5J,WAAY,CACXkD,MAAO,UACPU,SAAU,OACV6F,aAAc,OAEfI,mBAAoB,CACnB3I,UAAW,OACXuI,aAAc,OACdxI,MAAO,SAER6I,SAAU,CACT,gBAAiB,CAChB5G,MAAO,YAGT6G,MAAO,CACN,gBAAiB,CAChB7G,MAAO,YAGT8G,OAAO,aACNC,IAAK,OACLC,OAAQ,EACRR,OAAQ,oBACR7F,gBAAiB,0BAChBiE,EAAMqC,YAAYC,GAAG,MAAQ,CAC7BnJ,MAAO,sBAGToJ,KAAM,CACLC,SAAU,GAEXtH,OAAQ,CACPI,OAAQ,SACRmH,UAAW,OACXC,SAAU,QACV5G,SAAU,IAEX6G,YAAa,CACZlC,WAAY,IACZ3E,SAAU,IAEX8G,eAAgB,CACfnC,WAAY,IACZ3E,SAAU,GAEX8C,SAAU,CACT1B,QAAS,eACTlB,QAAS,oBAEV8C,SAAU,CACT1D,MAAO,UACP8B,QAAS,QACTpB,SAAU,SACV,UAAW,CACVV,MAAO,YAGT2D,WAAY,CACX3D,MAAO,UACPqF,WAAY,OACZoC,eAAgB,gBAKLC,EAAyC,SAAC3O,GACtD,IAAME,EAAUqH,IADgF,EAEhEoC,oBAAS,GAFuD,mBAEzFhE,EAFyF,KAE/EiJ,EAF+E,OAGlEjF,oBAAS,GAHyD,mBAGzF7H,EAHyF,KAGhFC,EAHgF,OAI5D4H,mBAAS,YAJmD,mBAIzFC,EAJyF,KAI7EC,EAJ6E,OAKpCF,oBAAS,GAL2B,mBAKzFkF,EALyF,KAKjEC,EALiE,OAMpCnF,oBAAS,GAN2B,mBAMzFoF,EANyF,KAMjEC,EANiE,OAOxErF,mBAAS,OAP+D,mBAOzFxJ,EAPyF,KAOnF8O,EAPmF,OASpDtF,mBAAS,IAT2C,mBASzFuF,EATyF,KASzEC,EATyE,OAU5DxF,mBAAS,mBAVmD,mBAUzFvJ,EAVyF,KAU7EgP,EAV6E,OAWhEzF,mBAAS,IAXuD,mBAWzFtJ,EAXyF,KAW/EgP,EAX+E,OAY1D1F,mBAAS,CAAC,UAZgD,mBAYzF2F,EAZyF,KAY5EC,EAZ4E,QAa9D5F,mBAAS,GAbqD,qBAazF6F,GAbyF,MAa9EC,GAb8E,SAcpE9F,mBAAS,IAd2D,qBAczFpJ,GAdyF,MAcjFmP,GAdiF,SAe5D/F,mBAAc,IAf8C,qBAezFgG,GAfyF,MAe7EC,GAf6E,MA4BhGnP,YAAgB,WAaf,GAZIT,GACCA,EAAM6P,WACL7P,EAAM6P,SAAS1H,MACdnI,EAAM6P,SAAS1H,MAAM2H,OACxBV,EAAcpP,EAAM6P,SAAS1H,MAAM2H,MACnCC,GAAmB/P,EAAM6P,SAAS1H,MAAM2H,OAGzCC,GAAmB3P,IAIlBJ,EAAMgQ,MAAMC,OAAOC,IAAgC,aAA1BlQ,EAAMgQ,MAAMC,OAAOC,GAC/CC,SACM,CACN,IAAIC,EAAUd,EACdc,EAAQhI,KAAK,cACbmH,EAAea,GAEhBC,MACC,IAEF,IAAMN,GAAqB,SAACxN,GAC3B+N,cAAeC,KAAK,SAAA1N,GACnB6M,GAAUc,GAAejO,EAAMM,EAAK4N,QACpChB,GAAa5M,EAAK4N,SAChBC,MAAM,SAAAC,GACRrN,QAAQC,IAAIoN,MAIRR,GAAoB,WACzBlB,EAAQ,QACRlN,GAAW,GACX6O,YAAY5Q,EAAMgQ,MAAMC,OAAOC,IAAIK,KAAK,SAAAM,GACvC,IAAIT,EAAUd,EACdc,EAAQhI,KAAKyI,EAAStO,MACtBgN,EAAea,GACfjB,EAAkB0B,GAClB9O,GAAW,KACT2O,MAAM,SAAAC,GACRrN,QAAQC,IAAIoN,MAKRN,GAAkB,WACvBS,cAAcP,KAAK,SAAAM,GAElBxB,EAAYwB,EAASE,MACrBzN,QAAQC,IAAIsN,KACVH,MAAM,SAAAC,GACRrN,QAAQC,IAAIoN,MA2BRK,GAA+B,WACpChC,GAA0B,GAC1BF,GAA0B,IAGlB0B,GAAiB,SAACpQ,EAAoBqQ,GAC9C,IAAIlQ,EAAS,GAEb,OAAOH,GACG,IAAK,kBACDG,EAAM,eAAWkQ,GACjB,MACJ,IAAK,aACDlQ,EAAM,eAAWkQ,GACjB,MACJ,IAAK,eACDlQ,EAAM,eAAWkQ,GACjB,MACJ,IAAK,gBACDlQ,EAAM,eAAWkQ,GACjB,MACJ,IAAK,SACDlQ,EAAM,eAAWkQ,GACjB,MACJ,IAAK,UACDlQ,EAAM,eAAWkQ,GACjB,MACJ,QACIlQ,EAAM,eAAWkQ,GAGzB,OAAOlQ,GAwBd,OACC,gCACC,gBAAC0Q,EAAA,EAAD,CACCC,aAAc5B,EAAY,GAC1B6B,iBAAkB7B,EAClB8B,WA/Ec,WAChBxC,GAAY,GACZK,EAAQ,QACR3L,QAAQC,IAAIsG,EAAe,aA6EzBwH,WAAY,YACZC,WAAY,WACZC,aAAuB,QAATpR,IAEf,uBAAK2D,UAAW5D,EAAQ6L,MACtBjK,EACC,gBAAC,mBAAD,MAAwB,KAE1B,gBAAC0B,EAAA,EAAD,CAAMC,WAAS,EAACC,GAAI,IACnB,gBAACF,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,EAAGI,UAAW5D,EAAQuM,kBACpC,gBAAC+E,EAAA,EAAD,CACC5F,MAnKe,CACpB,CACCrJ,KAAM,YAGP,CACCA,KAAM,qBA8JFkP,YAtFoB,SAAC7N,GAC1BiG,EAAcjG,GACdgL,GAAY,OAuFT,gBAACpL,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,EAAGI,UAAW5D,EAAQyM,kBAErB,YAAd/C,GACA,gBAAC,EAAD,CACCvJ,SAAUA,EACVD,WAAYA,EACZG,OAAQA,GACRN,KAAMiP,EACN/O,KAAMA,EACND,QAASA,EACTI,mBAAoB,SAACiC,IApDG,SAACnC,GAC/BsP,GAAUc,GAAepQ,EAAYoP,KAoD9BkC,CAAuBnP,IAExB/B,eAAgB,SAACqC,GAChB+M,GAAc/M,IAEf8C,SAAUA,IAIG,oBAAdiE,GACA,gBAAC,EAAD,CACC3J,KAAMiP,EACNhP,QAASA,EACTyF,SAAUA,OAMf,gBAACa,EAAA,EAAD,CACCC,YAAasI,EACbrI,QAASsK,GACTpL,QAAS,yBACTJ,MAAO,eACPmB,QACC,gBAACnD,EAAA,EAAD,CAAMC,WAAS,EAACmD,QAAQ,SAASC,WAAW,UAC3C,gBAACrD,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACd,gBAACoD,EAAA,EAAD,CAAQrC,QAAS,WAAQuK,GAA0B,IAAUlL,UAAW5D,EAAQ6G,OAAQC,QAAS,WAAYC,MAAO,aAApH,WAED,gBAACzD,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACd,gBAACoD,EAAA,EAAD,CACChD,UAAW5D,EAAQ6G,OACnBC,QAAS,YACTC,MAAO,UACPxC,QAAS,kBAlFK,WACpB,IAAI5B,EAAO8M,GAEX9M,EAAKH,KAAK2B,IAAI,SAAC3B,GACVA,EAAKI,gBACDJ,EAAKI,UAId6O,YAAe9O,GAAM0N,KAAK,SAAAM,GACzBvN,QAAQC,IAAIsN,KACVH,MAAM,SAAAC,GACRrN,QAAQC,IAAIoN,KAsEQiB,KAJhB,YAUJ,gBAACpL,EAAA,EAAD,CACCC,YAAaoI,EACbnI,QAASsK,GACTpL,QAAS,oCACTJ,MAAO,eACPmB,QACC,gBAACnD,EAAA,EAAD,CAAMC,WAAS,EAACmD,QAAQ,SAASC,WAAW,UAC3C,gBAACrD,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACd,gBAACoD,EAAA,EAAD,CAAQrC,QAAS,WAAQqK,GAA0B,IAAUhL,UAAW5D,EAAQ6G,OAAQC,QAAS,WAAYC,MAAO,aAApH,WAED,gBAACzD,EAAA,EAAD,CAAMI,MAAI,EAACF,GAAI,GACd,gBAACoD,EAAA,EAAD,CAAQhD,UAAW5D,EAAQ6G,OAAQC,QAAS,YAAaC,MAAO,WAAhE,gBAKJ,gBAAC,iBAAD,KACC,gBAACzD,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,EAAGiD,QAAS,WAAY7B,MAAO,CAACmC,UAAW,UACnE,gBAAC1D,EAAA,EAAD,CAAMI,MAAI,GACT,gBAACkD,EAAA,EAAD,CACChD,UAAW5D,EAAQ6G,OACnBC,QAAS,YACTC,MAAO,UACPlC,MAAO,CAAC6C,gBAAiB,WACzBnD,QAAS,kBAAMqK,GAA0B,KAL1C,WAQD,gBAACtL,EAAA,EAAD,CAAMI,MAAI,GACT,gBAACkD,EAAA,EAAD,CACChD,UAAW5D,EAAQ6G,OACnBC,QAAS,YACTC,MAAO,UACPxC,QAAS,kBAAMuK,GAA0B,KAJ1C,qBAaA6C,EAAkB,SAAC1J,GAAD,OAAkBA,EAAM2J,OAE1CC,EAAqB,SAACC,GAAD,MAAyB,CACnDC,IAAKC,6BAAmBtS,EAAkBoS","file":"static/js/11.82d2583e.chunk.js","sourcesContent":["export const ActionConsts = {\n\tRoles: {\n\t\tResetReducer: 'Roles_ResetReducer',\n\t\tSetReducer: 'Roles_SetReducer',\n\t},\n};\n","//#region Global Imports\n// import { Dispatch } from 'redux';\n//#endregion Global Imports\n\n//#region Local Imports\nimport { ActionConsts } from './ActionConsts';\n// import { PlanetaryService } from 'Components/Services';\n//#endregion Local Imports\n\n//#region Interface Imports\n//#endregion Interface Imports\n\nexport const RolesActions = {\n\tMap: (payload: []) => ({\n\t\tpayload,\n\t\ttype: ActionConsts.Roles.SetReducer,\n\t}),\n\n\tReset: () => ({\n\t\ttype: ActionConsts.Roles.ResetReducer,\n\t}),\n\n\t// GetApod: (payload) => async (dispatch: Dispatch) => {\n\n\t// },\n};\n","import * as React from 'react';\nimport {\n    Grid,\n    // FormControl, \n    InputLabel,\n    Typography,\n    Link,\n    Button\n    // TextareaAutosize,\n} from '@material-ui/core';\nimport { ReactTable } from 'Components/UI/TableComponent/ReactTable';\nimport { ReactSearch } from 'Components/UI/SearchBar/ReactSearch';\nimport { BasicTextField, BasicSelect } from 'Components/UI';\nimport { KeyboardDatePicker } from '@material-ui/pickers';\nimport { ModalComponent } from 'Components/UI/ModalComponent/ModalComponent';\n// import BasicSelect from 'Components/UI/BasicSelect'\nimport moment from 'moment';\nimport { RolesRbacData } from '../IRolesPage';\nexport interface IPoliciesProps {\n    rows?: any,\n    viewOnly: boolean,\n    classes: any,\n    mode?: 'edit' | 'view' | 'add' | string,\n    moduleName?: string,\n    rbacList: any,\n    onChangeModuleName: (name) => void,\n    onUpdateChange: (data) => void,\n    roleId: string,\n}\n\nexport const Policies: React.FC<IPoliciesProps> = (props: IPoliciesProps): JSX.Element => {\n    const {\n        rows,\n        classes,\n        mode,\n        moduleName,\n        rbacList,\n        onChangeModuleName,\n        roleId,\n        onUpdateChange\n    } = props;\n    const [isAddedModalRole, setIsAddedModalRole] = React.useState(false)\n    const [moduleValue, setModuleValue] = React.useState(0);\n    const [isModuleModalOpen, setIsModuleModalOpen] = React.useState(false);\n    const [moduleLabel, setModuleLabel] = React.useState<any>(null);\n    const [effectivityDate, setEffectivityDate] = React.useState('');\n    const [expiryDate, setExpiryDate] = React.useState('');\n    const [description, setDescription] = React.useState(null);\n    const [roleName, setRoleName] = React.useState('');\n    const [isModalConfirmChangeModule, setIsModalConfirmChangeModule] = React.useState(false)\n    const [newRbacList, setNewRbacList] = React.useState([]);\n    const [loading, setLoading] = React.useState(false);\n    const [defaultFilters, setDefaultFilters] = React.useState([]);\n    const [isModalDeleteSuccessOpen, setIsModalDeleteSuccessOpen] = React.useState(false)\n    const [isModalCannotEditOpen, setIsModalCannotEditOpen] = React.useState(false)\n\n    const moduleItems = [\n        {\n            name: 'User Management',\n            value: '0'\n        },\n        {\n            name: 'Membership',\n            value: '1'\n        },\n        {\n            name: 'Underwriting',\n            value: '2'\n        },\n        {\n            name: 'Customer Care',\n            value: '3'\n        },\n        {\n            name: 'Claims',\n            value: '4',\n        },\n        {\n            name: 'Billing',\n            value: '5',\n        },\n    ]\n\n    const columns: any = [\n        {\n            name: 'operation',\n            title: 'Object and Operations',\n        },\n        {\n            name: 'policy',\n            title: 'Policies',\n        },\n        {\n            name: 'policy_id',\n            title: 'Policy ID',\n        },\n        {\n            name: 'name',\n            title: 'Name'\n        }\n    ]\n\n    const handleCannotEditRoleModalClose = () => {\n        setIsModalCannotEditOpen(false)\n    }\n\n    const handleDeleteSuccessRoleModalClose = () => {\n        setIsModalDeleteSuccessOpen(false)\n    }\n\n    const handleRemoveRoleModalClose = () => {\n\n    }\n\n    const handleContinueRole = () => {\n        let moduleName = moduleItems[Number(moduleValue)].name;\n        setIsModalConfirmChangeModule(false);\n        setModuleLabel(moduleName);\n        onChangeModuleName(moduleName);\n    }\n\n    const handleOnCheckRow = (row) => {\n        setLoading(true);\n\n        let rbac = rbacList;\n        if (newRbacList.length === 0) {\n            setNewRbacList(rbacList);\n        } else {\n            rbac = newRbacList;\n        }\n        if (rbac.length > 0) {\n            rbac.map((data: any) => {\n                if (data._id === row._id) {\n                    data['checked'] = !data['checked'];\n                }\n            })\n            setNewRbacList(rbac);\n        }\n        setLoading(false)\n    }\n\n    const handleOnCheckGroup = (group) => {\n        setLoading(true);\n        let rbac = rbacList;\n        let countChecked = 0;\n\n        if (newRbacList.length === 0) {\n            setNewRbacList(rbacList)\n        }\n        if (rbac.length > 0) {\n            rbac.map((data: any) => {\n                if (data.name == group && data.checked === true) {\n                    countChecked++;\n                }\n            })\n        }\n        if (countChecked > 0) {\n            rbac.map((data: any) => {\n                if (data.name == group) {\n                    data['checked'] = false;\n                }\n            })\n        } else {\n            rbac.map((data: any) => {\n                if (data.name == group) {\n                    data['checked'] = true;\n                }\n            })\n        }\n        setNewRbacList(rbac);\n        setTimeout(() => {\n            setLoading(false);\n        }, 500)\n    }\n\n    const handleUpdateCheck = () => {\n        var rbac: any[] = [];\n        const _rbacList = newRbacList.length > 0 ? newRbacList : rbacList;\n\n        rbac = _rbacList.filter((data: any) => {\n            return data.checked;\n        })\n\n        var data: RolesRbacData = {\n            name: roleName,\n            role_id: roleId !== '' ? roleId : rows.role_id,\n            effectivity_date: moment(effectivityDate !== '' ? effectivityDate : new Date()).toISOString(),\n            expiry_date: moment(expiryDate).toISOString(),\n            is_processmaker: true,\n            rbac: rbac,\n        }\n\n        console.log(data);\n\n        onUpdateChange(data);\n    }\n\n    const handleOnFilterChange = (filter) => {\n        setDefaultFilters(filter);\n    }\n\n    const viewRoleBody = () => {\n        return (\n            <>\n                <Grid item xs={4}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">ROLE ID</InputLabel>\n                    <Typography><b>{rows && rows.role_id}</b></Typography>\n                </Grid>\n                <Grid item xs={4}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"description\">DESCRIPTION</InputLabel>\n                    <Typography><b>{rows && rows.description}</b></Typography>\n                </Grid>\n                <Grid item xs={4}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"status\">STATUS</InputLabel>\n                    <Typography><b>{rows && rows.status}</b></Typography>\n                </Grid>\n                <Grid item xs={4}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"primary_module\">EFFECTIVITY DATE</InputLabel>\n                    <Typography><b>{rows && moment(rows.effectivity_date).format('MMMM DD, YYYY')}</b></Typography>\n                </Grid>\n                <Grid item xs={4}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">ROLE NAME</InputLabel>\n                    <Typography><b>{rows && rows.name}</b></Typography>\n                </Grid>\n                <Grid item xs={4}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"description\">ATTACHED GROUP/S</InputLabel>\n                    <Typography>\n                        {\n                            rows && rows.associate_groups && rows.associate_groups.length > 0 && rows.associate_groups.map((groups) => (\n                                <b>{groups} </b>\n                            ))\n                        }\n                    </Typography>\n                </Grid>\n                <Grid item xs={4}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"primary_module\">LAST UPDATE</InputLabel>\n                    <Typography><b>{rows && moment(rows.effectivity_date).format('MMMM DD, YYYY')}</b></Typography>\n                </Grid>\n                <Grid item xs={4}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"primary_module\">PRIMARY MODULE</InputLabel>\n                    <Typography><b>{rows && rows.main_module}</b></Typography>\n                </Grid>\n\n            </>\n        )\n    }\n\n    const addRoleBody = () => {\n        return (\n            <>\n                <Grid item xs={4}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">MODULE</InputLabel>\n                    <Typography><b>{moduleLabel !== null ? moduleLabel : moduleName}</b></Typography>\n                    <Link onClick={() => { setIsModuleModalOpen(true) }}>Change Module</Link>\n                </Grid>\n                <Grid item xs={4}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">ROLE ID</InputLabel>\n                    <Typography><b>{roleId}</b></Typography>\n                </Grid>\n                <Grid item xs={4}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">DESCRIPTION</InputLabel>\n                    {/* <TextareaAutosize></TextareaAutosize> */}\n                    <BasicTextField\n                        onBlur={(e: any) => {\n                            console.log(e.target.value)\n                            setDescription(e.target.value);\n                            handleUpdateCheck();\n                        }}\n                    ></BasicTextField>\n                </Grid>\n                <Grid item xs={6}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">ROLE NAME</InputLabel>\n                    <BasicTextField\n                        onBlur={(e: any) => {\n                            setRoleName(e.target.value);\n                            handleUpdateCheck();\n                        }}\n                    ></BasicTextField>\n                </Grid>\n                <Grid item xs={6}>\n                </Grid>\n                <Grid item xs={6}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">EFFECTIVITY DATE</InputLabel>\n                    <KeyboardDatePicker\n                        views={[\"year\", \"date\", \"month\"]}\n                        value={effectivityDate !== '' ? effectivityDate : new Date()}\n                        format={'MMM DD, YYYY'}\n                        style={{ width: \"100%\", marginTop: 10 }}\n                        onChange={(e: any) => {\n                            setEffectivityDate(e)\n                            handleUpdateCheck();\n                        }}\n                        inputVariant={'outlined'}\n                    // disableFuture\n                    />\n                </Grid>\n                <Grid item xs={6}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">EXPIRY DATE (If applicable)</InputLabel>\n                    <KeyboardDatePicker\n                        views={[\"year\", \"date\", \"month\"]}\n                        value={expiryDate !== '' ? expiryDate : null}\n                        style={{ width: \"100%\", marginTop: 10 }}\n                        format={'MMM DD, YYYY'}\n                        onChange={(e: any) => {\n                            setExpiryDate(e)\n                            handleUpdateCheck();\n                        }}\n                        inputVariant={'outlined'}\n                    // disableFuture\n                    />\n                </Grid>\n            </>\n        )\n    }\n\n    const editRoleBody = () => {\n        return (\n            <>\n                <Grid item xs={4}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">MODULE</InputLabel>\n                    <Typography><b>{moduleLabel !== null ? moduleLabel : rows.main_module}</b></Typography>\n                    <Link onClick={() => { setIsModuleModalOpen(true) }}>Change Module</Link>\n                </Grid>\n                <Grid item xs={4}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">ROLE ID</InputLabel>\n                    <Typography><b>{moduleLabel !== null ? roleId : rows.role_id}</b></Typography>\n                </Grid>\n                <Grid item xs={4}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">DESCRIPTION</InputLabel>\n                    {/* <TextareaAutosize></TextareaAutosize> */}\n                    <BasicTextField\n                        value={description !== null ? description : rows.description}\n                        onBlur={(e: any) => {\n                            setDescription(e.target.value)\n                        }}\n                    ></BasicTextField>\n                </Grid>\n                <Grid item xs={6}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">ROLE NAME</InputLabel>\n                    <BasicTextField\n                        value={roleName !== '' ? roleName : rows.name}\n                        onChange={(e: any) => {\n                            setRoleName(e.target.value);\n                        }}\n                    ></BasicTextField>\n                </Grid>\n                <Grid item xs={6}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">STATUS</InputLabel>\n                    <Typography><b>{rows && rows.status}</b></Typography>\n                </Grid>\n                <Grid item xs={6}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">EFFECTIVITY DATE</InputLabel>\n                    <KeyboardDatePicker\n                        views={[\"year\", \"date\", \"month\"]}\n                        value={effectivityDate !== '' ? effectivityDate : moment(rows.effectivity_date)}\n                        format={'MMM DD, YYYY'}\n                        style={{ width: \"100%\", marginTop: 10 }}\n                        onChange={(e: any) => {\n                            setEffectivityDate(e)\n                        }}\n                        inputVariant={'outlined'}\n                    // disableFuture\n                    />\n                </Grid>\n                <Grid item xs={6}>\n                    <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">EXPIRY DATE (If applicable)</InputLabel>\n                    <KeyboardDatePicker\n                        views={[\"year\", \"date\", \"month\"]}\n                        value={expiryDate !== '' ? expiryDate : null}\n                        style={{ width: \"100%\", marginTop: 10 }}\n                        format={'MMM DD, YYYY'}\n                        onChange={(e: any) => {\n                            setExpiryDate(e)\n                        }}\n                        inputVariant={'outlined'}\n                    // disableFuture\n                    />\n                </Grid>\n            </>\n        )\n    }\n\n    return (\n        <>\n            <Grid container xs={12} spacing={3}>\n                {\n                    mode === 'view' ? (\n                        viewRoleBody()\n                    ) : mode === 'edit' ? (\n                        editRoleBody()\n                    ) : mode === 'add' ? (\n                        addRoleBody()\n                    ) : null\n                }\n                <Grid item xs={12}>\n\n                    <ReactSearch\n                        onSearch={() => console.log('on search')}\n                        placeholder={'Search policies'}\n                    />\n                    {\n                        <ReactTable\n                            rows={newRbacList.length > 0 ? newRbacList : rbacList}\n                            columns={columns}\n                            enableGrouping={true}\n                            groupColumnName={'name'}\n                            viewOnly={mode === 'view' ? true : false}\n                            message={'There are no user accounts to show yet.'}\n                            enableSelection={mode !== 'view' ? true : false}\n                            loading={loading}\n                            onCheckRow={(row) => {\n                                handleOnCheckRow(row)\n                                setTimeout(() => {\n                                    handleUpdateCheck()\n                                }, 500)\n                            }}\n                            defaultFilters={defaultFilters}\n                            onFilterChange={handleOnFilterChange}\n                            onSelectGroup={(group) => {\n                                handleOnCheckGroup(group)\n                                setTimeout(() => {\n                                    handleUpdateCheck()\n                                }, 500)\n                            }}\n                        />\n                    }\n                </Grid>\n            </Grid>\n            <ModalComponent\n                isModalOpen={isAddedModalRole}\n                onClose={handleRemoveRoleModalClose}\n                message={'New Role has been added successfully.'}\n                title={'Added New Role'}\n                buttons={\n                    <Grid container justify=\"center\" alignItems=\"center\">\n                        <Grid item xs={6}>\n                            <Button onClick={() => { setIsAddedModalRole(false) }} className={classes.button} variant={'contained'} color={'primary'}>Okay</Button>\n                        </Grid>\n                    </Grid>\n                }\n            />\n            <ModalComponent\n                isModalOpen={isModuleModalOpen}\n                onClose={() => {\n                    setIsModuleModalOpen(false)\n                }}\n                message={'Select a module for the role you will create:'}\n                title={'Choose a Module'}\n                buttons={\n                    <Grid container justify=\"center\" alignItems=\"center\" style={{ textAlign: 'center' }}>\n                        <Grid item xs={6}>\n                            <Button\n                                onClick={() => {\n                                    setIsModuleModalOpen(false)\n                                }}\n                                variant={'outlined'}\n                                color={'secondary'}\n                                className={classes.button}\n                            >Cancel</Button>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Button variant={'contained'} color={'primary'}\n                                className={classes.button}\n                                onClick={() => {\n                                    setIsModalConfirmChangeModule(true)\n                                    setIsModuleModalOpen(false)\n                                }}>Continue</Button>\n                        </Grid>\n                    </Grid>\n                }\n            >\n                <div style={{ width: '90%', margin: 'auto' }}>\n                    <BasicSelect\n                        menuItems={moduleItems}\n                        width={'100%'}\n                        value={moduleValue}\n                        onChange={(e: any) => {\n                            setModuleValue(e.target.value)\n                        }}\n                    />\n                </div>\n            </ModalComponent>\n            <ModalComponent\n                isModalOpen={isModalConfirmChangeModule}\n                onClose={() => {\n                    setIsModalConfirmChangeModule(false);\n                }}\n                message={'All progress made will be lost. Continue to change the module?'}\n                title={'Confirm Change Module'}\n                buttons={\n                    <Grid container justify=\"center\" alignItems=\"center\">\n                        <Grid item xs={6}>\n                            <Button onClick={() => { setIsModalConfirmChangeModule(false) }} className={classes.button} variant={'outlined'} color={'secondary'}>Cancel</Button>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Button className={classes.button} variant={'contained'} color={'primary'} onClick={() => handleContinueRole()}>Continue</Button>\n                        </Grid>\n                    </Grid>\n                }\n            />\n\n            <ModalComponent\n                isModalOpen={isModalDeleteSuccessOpen}\n                onClose={handleDeleteSuccessRoleModalClose}\n                message={'New role has been deleted.'}\n                title={'Delete Success'}\n                buttons={\n                    <Grid container justify=\"center\" alignItems=\"center\">\n                        <Grid item >\n                            <Button\n                                onClick={() => {\n                                    setIsModalDeleteSuccessOpen(false)\n                                }}\n                                className={classes.button}\n                                variant={'contained'}\n                                color={'primary'}>\n                                Okay\n                            </Button>\n                        </Grid>\n                    </Grid>\n                }\n            />\n\n\n            <ModalComponent\n                isModalOpen={isModalCannotEditOpen}\n                onClose={handleCannotEditRoleModalClose}\n                message={'You do not have an assigned role to your account to perform this action.'}\n                title={'Cannot Edit Role'}\n                buttons={\n                    <Grid container justify=\"center\" alignItems=\"center\">\n                        <Grid item>\n                            <Button\n                                onClick={() => {\n                                    setIsModalCannotEditOpen(false)\n                                }}\n                                className={classes.button}\n                                variant={'contained'}\n                                color={'primary'}>\n                                Okay\n                            </Button>\n                        </Grid>\n                    </Grid>\n                }\n            />\n        </>\n    )\n}","import * as React from 'react';\nimport { ReactSearch } from 'Components/UI/SearchBar/ReactSearch';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons';\n// import { InputLabel } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button, Grid } from '@material-ui/core';\n\nconst useStyles = makeStyles(() => ({\n    selectedItems: {\n        borderRadius: 20,\n        fontSize: 13,\n        backgroundColor: '#d1d4db',\n        padding: '5px 10px'\n    },\n    xIcon: {\n        fontSize: 16\n    }\n}));\nconsole.log(useStyles);\n\ninterface IAddRoleBodyProps {\n    onClose: () => void;\n    onSave: (items) => void;\n}\n\ninterface IAddRoleBodyState {\n    selectedItems: any;\n    comboArray: any;\n}\n\nexport class AddRoleBody extends React.Component<IAddRoleBodyProps, IAddRoleBodyState> {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedItems: [],\n            comboArray: [],\n        }\n    }\n    // const {} = props;\n    // const classes = useStyles();\n    // const [selectedItems, setSelectedItems] = React.useState<any>([]);\n    componentDidMount() {\n        this.setState({\n            comboArray: [\n                {\n                    name: 'John Ernest Seraspi',\n                    value: 'test',\n                },\n                {\n                    name: 'Teqpwoe',\n                    value: 'test2',\n                },\n            ]\n        })\n    }\n\n    handleOnSearch = (list) => {\n        let arr = this.state.selectedItems;\n        arr.push(list);\n        this.setState({\n            selectedItems: arr\n        })\n        console.log(arr);\n    }\n\n    handleRemoveItem = (index) => {\n        let arr = this.state.selectedItems;\n        arr.splice(index, 1);\n        this.setState({\n            selectedItems: arr\n        })\n    }\n\n    handleOnSaveItems = () => {\n        this.props.onSave(this.state.selectedItems);\n    }\n\n    public render(): JSX.Element {\n        const classes = {\n            buttonsContainer: {\n                padding: '1em',\n            },\n            selectedContainer: {\n                padding: '3em 0 2em'\n            },\n            selectedItems: {\n                borderRadius: 20,\n                fontSize: 13,\n                backgroundColor: '#d1d4db',\n                padding: '5px 10px',\n                margin: '5px',\n                display: 'inline-block',\n            },\n            selectedText: {\n                paddingRight: '5px'\n            },\n            saveButton: {\n                width: '135px',\n                fontSize: '14px',\n                color: '#fff',\n            },\n            cancelButton: {\n                width: '135px',\n                fontSize: '14px',\n            }\n        };\n\n        return (\n            <>\n                <ReactSearch\n                    searchLabel={'Search user account'}\n                    onSearch={this.handleOnSearch}\n                    comboBoxMode={true}\n                    comboListsArray={this.state.comboArray}\n                />\n                <div style={classes.selectedContainer}>\n                    <div>\n                        <label>Selected Users</label>\n                    </div>\n                    {this.state.selectedItems.map((item, index) =>\n                        <div style={classes.selectedItems}>\n                            <span style={classes.selectedText}>{item}</span>\n                            <span onClick={() => this.handleRemoveItem(index)}>\n                                <FontAwesomeIcon icon={faTimesCircle} />\n                            </span>\n                        </div>\n                    )\n                    }\n                </div>\n                <Grid container spacing={1}>\n                    <Grid item xs={6}>\n                        <Button style={classes.cancelButton} variant=\"outlined\" color=\"secondary\" onClick={() => this.props.onClose()}>Cancel</Button>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <Button disabled={this.state.selectedItems.length < 1 ? true : false} style={classes.saveButton} variant=\"contained\" color=\"primary\" onClick={() => this.handleOnSaveItems()}>Save</Button>\n                    </Grid>\n                </Grid>\n            </>\n        )\n    }\n\n}\n// export const AddRoleBody : React.FC<IAddRoleBodyProps> = (props: IAddRoleBodyProps): JSX.Element => {\n\n// }","import * as React from 'react';\nimport { Typography, Grid, Link, Button } from '@material-ui/core';\nimport { ReactSearch } from 'Components/UI/SearchBar/ReactSearch';\nimport { ReactTable } from 'Components/UI/TableComponent/ReactTable';\nimport { useState } from 'react';\nimport classNames from 'classnames';\nimport { SideModalBlock } from 'Components/UI';\nimport { AddRoleBody } from './AddRoleBody';\nimport { ModalComponent } from 'Components/UI/ModalComponent/ModalComponent';\n\nexport interface IGroupsAndUsersProps {\n    rows?: any,\n    viewOnly: boolean,\n    classes: any\n}\n\nexport const GroupsAndUsers: React.FC<IGroupsAndUsersProps> = (props: IGroupsAndUsersProps): JSX.Element => {\n    const {\n        rows,\n        viewOnly,\n        classes\n    } = props;\n    const [activeItem, setActiveItem] = useState('Groups');\n    const [activeClass, setActiveClass] = useState(0);\n    const [showBlock, setShowBlock] = useState('none');\n    const [isModalRemoveOpen, setIsModalRemoveOpen] = useState(false);\n    const [isModalRemoveSuccessOpen, setIsModalSuccessRemoveOpen] = useState(false);\n    const [isModalSuccessUserGroupOpen, setIsModalSuccessGroupOpen] = useState(false);\n    console.log(rows, viewOnly);\n\n    const userRows: any = [\n        {\n            username: 'Imstaana',\n            user_account: 'Louise Marianne Sta. Ana',\n            last_activity_date: 'Nov 12, 2019',\n            status: 'Active',\n        },\n        {\n            username: 'psbarrios',\n            user_account: 'Philip Salvador Q. Barrios',\n            last_activity_date: 'Nov 12, 2019',\n            status: 'Active',\n        },\n    ]\n\n    const userColumns: any = [\n        {\n            name: 'username',\n            title: 'Username',\n        },\n        {\n            name: 'user_account',\n            title: 'User Account',\n        },\n        {\n            name: 'last_activity_date',\n            title: 'Last Activity Date',\n        },\n        {\n            name: 'status',\n            title: 'Status',\n        },\n        {\n            name: 'action_delete',\n            title: ' ',\n        },\n    ]\n\n    const groupsRows: any = [\n        {\n            group_id: '0122-93282-0012',\n            group: \"APD Encoding\",\n            users_in_group: 10,\n            status: 'Active',\n        },\n        {\n            group_id: '0132-232-0012',\n            group: \"APD Decoding\",\n            users_in_group: 34,\n            status: 'Active',\n        },\n    ];\n\n    const groupsColumns: any = [\n        {\n            name: 'group_id',\n            title: 'Group ID',\n        },\n        {\n            name: 'group',\n            title: 'Group',\n        },\n        {\n            name: 'users_in_group',\n            title: 'Users in the Group',\n        },\n        {\n            name: 'status',\n            title: 'Status',\n        },\n        {\n            name: 'action_delete',\n            title: ' ',\n        },\n    ];\n\n    const menuItems = [\n        'Groups',\n        'Users'\n    ]\n\n    const handleMenuClick = (item, index) => {\n        setActiveItem(item);\n        setActiveClass(index)\n    }\n\n    const onSaveAddRole = (items) => {\n        console.log(items, 'onsaveaddrole')\n    }\n\n    const handleRemoveRoleModalClose = () => {\n        setIsModalRemoveOpen(true)\n    }\n\n    const handleRemoveSuccessRoleModalClose = () => {\n        setIsModalSuccessRemoveOpen(true)\n    }\n\n    const handleSuccessUserGroupClose = () => {\n        setIsModalSuccessGroupOpen(true)\n    }\n\n    return (\n        <>\n            <Grid container xs={12}>\n                <Grid item xs={12}>\n                    <Typography><b>Attached Groups and Users</b></Typography>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container xs={12} alignItems={'center'}>\n                        <Grid item xs={6}>\n                            <ul style={{ padding: '0', margin: '0' }}>\n                                {\n                                    menuItems.map((item, i) => (\n                                        <li className={classes.menuList}>\n                                            <Link\n                                                className={classNames(classes.menuLink, activeClass === i ? classes.LinkActive : null)}\n                                                onClick={() => handleMenuClick(item, i)}>\n                                                {item}\n                                            </Link>\n                                        </li>\n                                    ))\n                                }\n                            </ul>\n                        </Grid>\n                        <Grid item xs={6} className={classes.alignRight}>\n                            <Link onClick={() => { setShowBlock('block') }}> Add to this role</Link>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    {\n                        activeItem == 'Groups' ?\n                            <>\n                                <ReactSearch\n                                    onSearch={() => console.log('search')}\n                                    placeholder={'Search a user group'}\n                                ></ReactSearch>\n                                <ReactTable\n                                    rows={groupsRows}\n                                    columns={groupsColumns}\n                                    columnExtensions={\n                                        [{\n                                            columnName: 'action_delete',\n                                            width: 75,\n                                            wordWrapEnabled: true,\n                                            align: 'center'\n                                        }]\n                                    }\n                                    message={'There are no user accounts to show yet.'}\n                                    sortingStateColumnExtensions={[\n                                        { columnName: 'action_delete', sortingEnabled: false }\n                                    ]}\n                                    onDeleteRow={(row) => {\n                                        console.log(row, 'rowdeleted')\n                                    }}\n                                />\n                            </>\n                            : null\n                    }\n                    {\n                        activeItem == 'Users' ?\n                            <>\n                                <ReactSearch\n                                    onSearch={() => console.log('search')}\n                                    placeholder={'Search a user account'} />\n                                <ReactTable\n                                    rows={userRows}\n                                    columns={userColumns}\n                                    columnExtensions={\n                                        [{\n                                            columnName: 'action_delete',\n                                            width: 75,\n                                            wordWrapEnabled: true,\n                                            align: 'center'\n                                        }]\n                                    }\n                                    message={'There are no user accounts to show yet.'}\n                                    sortingStateColumnExtensions={[\n                                        { columnName: 'action_delete', sortingEnabled: false }\n                                    ]}\n                                    onDeleteRow={(row) => {\n                                        console.log(row, 'rowdeleted')\n                                    }}\n                                />\n                            </>\n                            : null\n                    }\n                </Grid>\n            </Grid>\n            <SideModalBlock\n                handleClose={() => { setShowBlock('none') }}\n                showBlock={showBlock}\n                title={'Add to this Role'}>\n                <AddRoleBody\n                    onClose={() => {\n                        setShowBlock('none')\n                    }}\n                    onSave={onSaveAddRole}\n                />\n            </SideModalBlock>\n            <ModalComponent\n                isModalOpen={isModalRemoveOpen}\n                onClose={handleRemoveRoleModalClose}\n                message={'Remove APD screening from this role?'}\n                title={'Remove from Role'}\n                buttons={\n                    <Grid container justify=\"center\" alignItems=\"center\">\n                        <Grid item xs={6}>\n                            <Button\n                                onClick={() => {\n                                    setIsModalRemoveOpen(false)\n                                }}\n                                className={classes.button}\n                                variant={'outlined'}\n                                color={'secondary'}>\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Button\n                                onClick={() => {\n                                    setIsModalRemoveOpen(false)\n                                    setIsModalSuccessRemoveOpen(true)\n                                }}\n                                className={classes.button}\n                                variant={'contained'}\n                                color={'primary'}>\n                                Remove\n                            </Button>\n                        </Grid>\n                    </Grid>\n                }\n            />\n            <ModalComponent\n                isModalOpen={isModalSuccessUserGroupOpen}\n                onClose={handleSuccessUserGroupClose}\n                message={'New user group have been successfully added.'}\n                title={'User group added!'}\n                buttons={\n                    <Grid container justify=\"center\" alignItems=\"center\">\n                        <Grid item >\n                            <Button\n                                onClick={() => {\n                                    setIsModalSuccessGroupOpen(false)\n                                }}\n                                className={classes.button}\n                                variant={'contained'}\n                                color={'primary'}>\n                                Okay\n                            </Button>\n                        </Grid>\n                    </Grid>\n                }\n            />\n            <ModalComponent\n                isModalOpen={isModalRemoveSuccessOpen}\n                onClose={handleRemoveSuccessRoleModalClose}\n                message={'APD Screening has been removed from this role.'}\n                title={'Remove from Role!'}\n                buttons={\n                    <Grid container justify=\"center\" alignItems=\"center\">\n                        <Grid item>\n                            <Button\n                                onClick={() => {\n                                    setIsModalSuccessRemoveOpen(false)\n                                }}\n                                className={classes.button}\n                                variant={'contained'}\n                                color={'primary'}>\n                                Okay\n                            </Button>\n                        </Grid>\n                    </Grid>\n                }\n            />\n        </>\n    )\n}\n","//#region Global Imports\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { bindActionCreators, Dispatch } from 'redux';\n// import NEOLink from 'next/link';\n//#endregion Global Imports\n\n//#region Interface Imports\n// import { Heading } from 'Components/UI/Heading';\nimport { Store } from 'Components/Stores/IStore';\nimport { RolesActions } from './RolesActions';\nimport { IRolesPage } from './IRolesPage';\nimport { Grid, Button } from '@material-ui/core';\n// import Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { LoadingIndicator, FloatingFooter } from 'Components/UI';\nimport { Policies } from './Components/Policies';\nimport { GroupsAndUsers } from './Components/GroupsAndUsers';\nimport { SubHeader } from 'Components/UI/SubHeader';\nimport { SideMenu } from 'Components/UI/SideMenu';\nimport { ModalComponent } from 'Components/UI/ModalComponent/ModalComponent';\nimport { getRoleData, getRbacList, getRbacCount, createRoleRbac } from 'Pages/API/Calls/Roles';\n// import { LoadingIndicator } from 'Components/UI';\n\n//#endregion Interface Imports\n\nconst useStyles = makeStyles(theme => ({\n\tmainContainer: {\n\t\tpadding: '32px 24px 25px'\n\t},\n\tmain: {\n\t\tbackgroundColor: '#F5F7FB',\n\t\tpadding: '32px 24px',\n\t\tposition: 'relative'\n\t},\n\theadMain: {\n\t\t// backgroundColor: '#F5F7FB',\n\t},\n\tgridContainer: {\n\t\tpadding: theme.spacing(1),\n\t\tpaddingBottom: '75px'\n\t},\n\tgridContainerNoPadding: {\n\t\tpadding: theme.spacing(1),\n\t},\n\tsectionTitle: {\n\t\tfontSize: 24,\n\t\tfontWeight: 700,\n\t\tcolor: '#272e4c',\n\t},\n\tsubSectionTitle: {\n\t\tfontSize: 14,\n\t\tfontWeight: 400,\n\t\tcolor: '#272e4c',\n\t},\n\teditBtn: {\n\t\twidth: '135px',\n\t\tfontSize: '14px',\n\t\tcolor: '#fff',\n\t},\n\talignRight: {\n\t\ttextAlign: 'right',\n\t},\n\tsideBarContainer: {\n\t\tborderRight: \"1px solid #ccc\",\n\t\tpaddingRight: \"25px\",\n\t},\n\tcontentContainer: {\n\t\tpaddingLeft: \"25px\",\n\t},\n\tsideBarLists: {\n\t\tpadding: 0,\n\t\tmargin: 0,\n\t\tlistStyle: 'none'\n\t},\n\tsideBarLink: {\n\t\tcolor: \"#272e4c\",\n\t\tmargin: \"0 0 10px\",\n\t\tdisplay: \"block\"\n\t},\n\tfieldGroupTitle: {\n\t\tfontSize: 13,\n\t\tfontWeight: 700,\n\t\tcolor: '#272e4c',\n\t},\n\tlistItemTextRoot: {\n\t\tflex: 'none',\n\t},\n\tlistItemTextPrimarySelected: {\n\t\tfontSize: 14,\n\t\tfontWeight: 700,\n\t\tcolor: 'rgba(39, 46, 76, 1)',\n\t\tcursor: 'pointer',\n\t},\n\tlistItemTextPrimaryNotSelected: {\n\t\tfontSize: 14,\n\t\tfontWeight: 700,\n\t\tcolor: 'rgba(39, 46, 76, 0.3)',\n\t\tcursor: 'pointer',\n\t},\n\tdropzone: {\n\t\twidth: '460px',\n\t\theight: '88px',\n\t\tmarginTop: '10px',\n\t\tmarginBottom: '20px',\n\t\tborder: '2px dashed rgba(30, 32, 113, 0.3)',\n\t\tborderRadius: '5px',\n\t\tbackgroundColor: '#e6e8ee',\n\t\tcolor: '#7b8094',\n\t\tdisplay: 'flex',\n\t\tjustifyContent: 'center',\n\t\talignItems: 'center',\n\t\tflexDirection: 'column',\n\t},\n\tinputLabel: {\n\t\tcolor: '#272e4c',\n\t\tfontSize: '12px',\n\t\tmarginBottom: '5px'\n\t},\n\tkeyboardDatePicker: {\n\t\tmarginTop: '10px',\n\t\tmarginBottom: '20px',\n\t\twidth: '212px',\n\t},\n\tcheckbox: {\n\t\t'&.Mui-checked': {\n\t\t\tcolor: '#1e2071',\n\t\t},\n\t},\n\tradio: {\n\t\t'&.Mui-checked': {\n\t\t\tcolor: '#1e2071',\n\t\t},\n\t},\n\tappBar: {\n\t\ttop: 'auto',\n\t\tbottom: 0,\n\t\tborder: '1px solid #707070',\n\t\tbackgroundColor: 'rgba(54, 54, 54, 0.64)',\n\t\t[theme.breakpoints.up('sm')]: {\n\t\t\twidth: 'calc(100% - 72px)',\n\t\t},\n\t},\n\tgrow: {\n\t\tflexGrow: 1,\n\t},\n\tbutton: {\n\t\tmargin: '0 10px',\n\t\tminHeight: '42px',\n\t\tminWidth: '150px',\n\t\tfontSize: 14\n\t},\n\tbuttonTitle: {\n\t\tfontWeight: 700,\n\t\tfontSize: 13,\n\t},\n\tbuttonSubTitle: {\n\t\tfontWeight: 400,\n\t\tfontSize: 7,\n\t},\n\tmenuList: {\n\t\tdisplay: \"inline-block\",\n\t\tpadding: \"10px 45px 10px 0\"\n\t},\n\tmenuLink: {\n\t\tcolor: \"#929292\",\n\t\tdisplay: \"block\",\n\t\tfontSize: \"1.10em\",\n\t\t'&:hover': {\n\t\t\tcolor: \"#3ab77d\",\n\t\t}\n\t},\n\tLinkActive: {\n\t\tcolor: \"#3ab77d\",\n\t\tfontWeight: \"bold\",\n\t\ttextDecoration: \"underline\"\n\t}\n}));\n\n\nexport const RolesPage: React.FC<IRolesPage.IProps> = (props: IRolesPage.IProps): JSX.Element => {\n\tconst classes = useStyles();\n\tconst [viewOnly, setViewOnly] = useState(true);\n\tconst [loading, setLoading] = useState(false);\n\tconst [activeItem, setActiveItem] = useState('Policies');\n\tconst [isModalConfirmExitOpen, setIsModalConfirmExitOpen] = useState(false);\n\tconst [isModalConfirmSaveOpen, setIsModalConfirmSaveOpen] = useState(false);\n\tconst [mode, setMode] = useState('add');\n\t// const [dataResponse, setDataResponse ] = useState([]);\n\tconst [policyResponse, setPolicyResponse] = useState([]);\n\tconst [moduleName, setModuleName] = useState('User Management');\n\tconst [rbacList, setRbacList] = useState([]);\n\tconst [breadCrumbs, setBreadCrumbs] = useState(['ROLES']);\n\tconst [rbacCount, setRbacCount] = useState(0);\n\tconst [roleId, setRoleId] = useState('');\n\tconst [policyData, setPolicyData] = useState<any>({})\n\n\tconst sideBarItems = [\n\t\t{\n\t\t\tname: 'Policies',\n\t\t\t// label: 'POLICY'\n\t\t},\n\t\t{\n\t\t\tname: 'Groups And Users',\n\t\t\t// label: 'GROUPIE'\n\t\t},\n\t];\n\n\tReact.useEffect(() => {\n\t\tif (props) {\n\t\t\tif (props.location) {\n\t\t\t\tif (props.location.state) {\n\t\t\t\t\tif (props.location.state.from) {\n\t\t\t\t\t\tsetModuleName(props.location.state.from)\n\t\t\t\t\t\thandleGetRbacCount(props.location.state.from)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\thandleGetRbacCount(moduleName)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (props.match.params.id && props.match.params.id !== 'add-role') {\n\t\t\thandleGetRoleData();\n\t\t} else {\n\t\t\tvar _crumbs = breadCrumbs\n\t\t\t_crumbs.push('ADD A ROLE');\n\t\t\tsetBreadCrumbs(_crumbs);\n\t\t}\n\t\thandGetRbacList();\n\t},[]);\n\n\tconst handleGetRbacCount = (name : string) => {\n\t\tgetRbacCount().then(data => {\n\t\t\tsetRoleId(generateRoleId(name, data.count));\n\t\t\tsetRbacCount(data.count);\n\t\t}).catch(err => {\n\t\t\tconsole.log(err);\n\t\t})\n\t}\n\n\tconst handleGetRoleData = () => {\n\t\tsetMode('view');\n\t\tsetLoading(true)\n\t\tgetRoleData(props.match.params.id).then(response => {\n\t\t\tvar _crumbs = breadCrumbs\n\t\t\t_crumbs.push(response.name);\n\t\t\tsetBreadCrumbs(_crumbs);\n\t\t\tsetPolicyResponse(response);\n\t\t\tsetLoading(false)\n\t\t}).catch(err => {\n\t\t\tconsole.log(err);\n\n\t\t})\n\t}\n\n\tconst handGetRbacList = () => {\n\t\tgetRbacList().then(response => {\n\t\t\t// setLoading(false)\n\t\t\tsetRbacList(response.body);\n\t\t\tconsole.log(response);\n\t\t}).catch(err => {\n\t\t\tconsole.log(err);\n\t\t}) \n\t}\n\n\t// const handleGetGroupsAndUsers = () => {\n\n\t// }\n\n\tconst editRole = () => {\n\t\tsetViewOnly(false);\n\t\tsetMode('edit');\n\t\tconsole.log(setActiveItem, 'yes edit');\n\t}\n\n\tconst activeSideBarItem = (item) => {\n\t\tsetActiveItem(item);\n\t\tsetViewOnly(true);\n\t\t// if (item === 'Policies') {\n\t\t// \tif (props.match.params.id && props.match.params.id !== 'add-role') {\n\t\t// \t\thandleGetRoleData();\n\t\t// \t}\n\t\t// } else if (item === 'Groups And Users') {\n\t\t// \thandleGetGroupsAndUsers();\n\t\t// }\n\n\t}\n\n\tconst handleModalConfirmationClose = () => {\n\t\tsetIsModalConfirmSaveOpen(false);\n\t\tsetIsModalConfirmExitOpen(false);\n\t}\n\n    const generateRoleId = (moduleName: string, count: number) => {\n\t\tlet roleId = '';\n\t\t\n\t\tswitch(moduleName) {\n            case 'User Management':\n                roleId = `UM000${count}`\n                break;\n            case 'Membership':\n                roleId = `MS000${count}`\n                break;\n            case 'Underwriting':\n                roleId = `UW000${count}`\n                break;\n            case 'Customer Care':\n                roleId = `CC000${count}`\n                break;\n            case 'Claims':\n                roleId = `CL000${count}`\n                break;\n            case 'Billing':\n                roleId = `BL000${count}`\n                break;\n            default:\n                roleId = `UM000${count}`\n                break;\n        } \n        return roleId;\n\t}\n\t\n\tconst handleChangeModuleName = (moduleName) => {\n\t\tsetRoleId(generateRoleId(moduleName, rbacCount));\n\t}\n\t\n\n\tconst handleOnSave = () => {\n\t\tlet data = policyData;\n\n\t\tdata.rbac.map((rbac: any) => {\n\t\t\tif (rbac.checked) {\n\t\t\t\tdelete rbac.checked\n\t\t\t}\n\t\t})\n\n\t\tcreateRoleRbac(data).then(response => {\n\t\t\tconsole.log(response);\n\t\t}).catch(err => {\n\t\t\tconsole.log(err);\n\t\t})\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<SubHeader\n\t\t\t\theadingTitle={breadCrumbs[1]}\n\t\t\t\tbreadCrumbsArray={breadCrumbs}\n\t\t\t\tbuttonFunc={editRole}\n\t\t\t\tbuttonName={'Edit Role'}\n\t\t\t\tlayoutType={'layout_1'}\n\t\t\t\tenableButton={mode !== 'add' ? true : false}\n\t\t\t></SubHeader>\n\t\t\t<div className={classes.main}>\n\t\t\t\t{loading ?\n\t\t\t\t\t(<LoadingIndicator />) : null\n\t\t\t\t}\n\t\t\t\t<Grid container xs={12}>\n\t\t\t\t\t<Grid item xs={3} className={classes.sideBarContainer}>\n\t\t\t\t\t\t<SideMenu\n\t\t\t\t\t\t\titems={sideBarItems}\n\t\t\t\t\t\t\tactiveItems={activeSideBarItem}\n\t\t\t\t\t\t></SideMenu>\n\t\t\t\t\t</Grid>\n\t\t\t\t\t<Grid item xs={9} className={classes.contentContainer}>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tactiveItem == 'Policies' && \n\t\t\t\t\t\t\t<Policies \n\t\t\t\t\t\t\t\trbacList={rbacList} \n\t\t\t\t\t\t\t\tmoduleName={moduleName} \n\t\t\t\t\t\t\t\troleId={roleId}\n\t\t\t\t\t\t\t\trows={policyResponse} \n\t\t\t\t\t\t\t\tmode={mode} \n\t\t\t\t\t\t\t\tclasses={classes}\n\t\t\t\t\t\t\t\tonChangeModuleName={(name : string) => {\n\t\t\t\t\t\t\t\t\thandleChangeModuleName(name)\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonUpdateChange={(data: any) => {\n\t\t\t\t\t\t\t\t\tsetPolicyData(data);\n\t\t\t\t\t\t\t\t}} \n\t\t\t\t\t\t\t\tviewOnly={viewOnly}\n\t\t\t\t\t\t\t></Policies>\n\t\t\t\t\t\t}\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tactiveItem == 'Groups And Users' &&\n\t\t\t\t\t\t\t<GroupsAndUsers\n\t\t\t\t\t\t\t\trows={policyResponse}\n\t\t\t\t\t\t\t\tclasses={classes}\n\t\t\t\t\t\t\t\tviewOnly={viewOnly}\n\t\t\t\t\t\t\t></GroupsAndUsers>\n\t\t\t\t\t\t}\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</div>\n\t\t\t<ModalComponent\n\t\t\t\tisModalOpen={isModalConfirmSaveOpen}\n\t\t\t\tonClose={handleModalConfirmationClose}\n\t\t\t\tmessage={'Save all changes made?'}\n\t\t\t\ttitle={'Confirmation'}\n\t\t\t\tbuttons={\n\t\t\t\t\t<Grid container justify=\"center\" alignItems=\"center\">\n\t\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t\t<Button onClick={() => { setIsModalConfirmSaveOpen(false) }} className={classes.button} variant={'outlined'} color={'secondary'}>Cancel</Button>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t\t<Button \n\t\t\t\t\t\t\t\tclassName={classes.button} \n\t\t\t\t\t\t\t\tvariant={'contained'} \n\t\t\t\t\t\t\t\tcolor={'primary'}\n\t\t\t\t\t\t\t\tonClick={() => handleOnSave()}\n\t\t\t\t\t\t\t>Save</Button>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n\t\t\t\t}\n\t\t\t/>\n\t\t\t<ModalComponent\n\t\t\t\tisModalOpen={isModalConfirmExitOpen}\n\t\t\t\tonClose={handleModalConfirmationClose}\n\t\t\t\tmessage={'Exit and remove all changes made?'}\n\t\t\t\ttitle={'Confirmation'}\n\t\t\t\tbuttons={\n\t\t\t\t\t<Grid container justify=\"center\" alignItems=\"center\">\n\t\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t\t<Button onClick={() => { setIsModalConfirmExitOpen(false) }} className={classes.button} variant={'outlined'} color={'secondary'}>Cancel</Button>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t\t<Button className={classes.button} variant={'contained'} color={'primary'}>Continue</Button>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n\t\t\t\t}\n\t\t\t/>\n\t\t\t<FloatingFooter>\n\t\t\t\t<Grid container spacing={1} justify={'flex-end'} style={{textAlign: 'right'}}>\n\t\t\t\t\t<Grid item>\n\t\t\t\t\t\t<Button \n\t\t\t\t\t\t\tclassName={classes.button} \n\t\t\t\t\t\t\tvariant={'contained'} \n\t\t\t\t\t\t\tcolor={'primary'} \n\t\t\t\t\t\t\tstyle={{backgroundColor: '#3C394A'}}\n\t\t\t\t\t\t\tonClick={() => setIsModalConfirmExitOpen(true)}\n\t\t\t\t\t\t>Cancel</Button>\n\t\t\t\t\t</Grid>\n\t\t\t\t\t<Grid item>\n\t\t\t\t\t\t<Button \n\t\t\t\t\t\t\tclassName={classes.button} \n\t\t\t\t\t\t\tvariant={'contained'} \n\t\t\t\t\t\t\tcolor={'primary'}\n\t\t\t\t\t\t\tonClick={() => setIsModalConfirmSaveOpen(true)}\n\t\t\t\t\t\t>Save Changes</Button>\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</FloatingFooter>\n\t\t</>\n\t);\n}\n\nconst mapStateToProps = (state: Store) => state.roles;\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n\tMap: bindActionCreators(RolesActions.Map, dispatch),\n});\n\nexport { mapStateToProps, mapDispatchToProps };\n"],"sourceRoot":""}