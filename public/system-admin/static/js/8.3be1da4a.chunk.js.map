{"version":3,"sources":["Pages/Lookup/Components/Loader/index.tsx","Pages/Lookup/ActionConsts.ts","Pages/Lookup/LookupActions.ts","Components/UI/TableComponent/CodeListTable.tsx","Pages/API/Calls/ICD10.ts","Pages/Lookup/Components/ConfirmationModal.tsx","Pages/Lookup/Components/ConstructPayloads.ts","Pages/Lookup/Components/ICD10Section/index.tsx","Pages/API/Calls/CPT.ts","Pages/Lookup/Components/CPTSection/index.tsx","Pages/Lookup/Components/ICD10SynonymsSection/AddSynonymsBody.tsx","Pages/Lookup/Components/ICD10SynonymsSection/index.tsx","Pages/API/Calls/DoctorSpecialization.ts","Pages/Lookup/Components/DoctorSpecializationSection/index.tsx","Pages/Lookup/LookupPage.tsx"],"names":["useStyles","makeStyles","root","position","width","height","zIndex","right","bottom","top","left","textAlign","backgroundColor","container","outline","alignItems","justifyContent","display","flexDirection","Loader","classes","className","size","defaultProps","LookupConsts","ResetReducer","SetReducer","LookupActions","payload","type","rowResetSelected","radioSelected","selectedValue","clickCell","clickValue","cellSelectStyles","select","textFieldStyles","checkboxStyles","color","Select","id","value","items","cellSelectClasses","style","renderValue","selected","find","item","name","map","key","StatusSelect","restProps","variant","label","i","TableFilterCell","filter","onFilter","filteringEnabled","column","padding","utils","MomentUtils","format","inputVariant","invalidDateMessage","onChange","date","console","log","toISOString","paddingTop","e","target","labelWidth","placeholder","align","undefined","checked","justify","paddingLeft","Link","onClick","xs","alignContent","icon","faRedoAlt","fontSize","TableRadio","onToggle","stopPropagation","TableCheckBox","faSquare","checkedIcon","faCheckSquare","TableSearchPanel","onValueChange","fullWidth","startAdornment","faSearch","DefaultTableToolbar","children","disableGutters","SortingIcon","direction","marginLeft","faSortUp","faSortDown","TableSortLabel","onSort","sortingEnabled","actionColumn","resetColumn","title","hideSortIcon","faSort","EmptyCellFormatter","faExclamationCircle","EmptyCellDataTypeProvider","props","formatterComponent","RequiredFormatter","row","RequiredDataTypeProvider","RequiredCheckboxFormatter","control","RequiredCheckboxDataTypeProvider","UploadFileFormatter","paddingRight","faFileUpload","textDecoration","UploadFileDataTypeProvider","ApproveDisapproveRadioFormatter","handleClick","event","aria-label","cnt","action_chosen","margin","fontWeight","labelPlacement","ApproveDisapproveRadioDataTypeProvider","ApproveDisapproveRadioFormatterVirtual","_id","ApproveDisapproveRadioDataTypeProviderVirtual","ResetFormatter","ResetDataTypeProvider","IncompleteRadioFormatter","IncompleteRadioDataTypeProvider","RadioNameFormatter","RadioDataTypeProvider","ValuesNameFormatter","ValuesNameDataTypeProvider","SystemNameFormatter","SystemNameDataTypeProvider","DataFormatter","DataDataTypeProvider","NumberFormatter","textFieldClasses","NumberDataTypeProvider","TextFormatter","TextDataTypeProvider","DateFormatter","text","moment","error","DateCellDataTypeProvider","TimeFormatter","TimeCellDataTypeProvider","TableComponent","disableIntegratedFiltering","columns","formattedColumns","singleSelect","disablePaging","disableSearch","disableSelect","disableSort","disableFilter","toolbarType","columnExtensions","columnBands","showSelectionColumn","query","totalCount","currentPage","limit","disableIntegratedSorting","useState","selection","setSelection","pageSizes","defaultSort","sorting","setSorting","rows","setRows","useEffect","dataTypeProviders","Object","keys","length","push","for","number","system_name","data_name","value_name","required_columns","radio","incomplete_radio","approve_disapprove_action","approve_disapprove_action_virtual","approve_disapprove_reset","required_checkbox","upload_file","required_cell","time","toolbar","Paper","topBar","onCurrentPageChange","page","skip","onPageChange","pageSize","onPageSizeChange","ongPageSizeChange","defaultSorting","onSortingChange","updateSorting","onSelectionChange","newSelection","onClickRow","onSelectedRadio","onSelectedReset","onClickCell","lastSelected","indexOf","defaultFilters","filters","defaultFilter","columnFilteringEnabled","filterExtensions","onFiltersChange","onFilterChange","isVirtualTable","messages","noData","message","selectByRowClick","cellComponent","headerCellComponent","showSelectAll","showSortingControls","sortLabelComponent","rootComponent","inputComponent","fetch","Fetch","getAccessToken","getICD","option","method","call","JSON","stringify","fetchAccessToken","then","searchICD","offset","filter_key_str","sorting_str","filter_str","forEach","search","ICD_URL","addICD10Codes","body","editICD","getICDSynonyms","uri_obj","uri_string","Array","isArray","like","options","entries","getActiveSynonyms","where","search_str","addSynonyms","getAllSynonyms","patchSynonyms","theme","dialog","dialogAction","marginBottom","spacing","ConfirmationModal","Dialog","open","isModalOpen","onClose","aria-labelledby","maxWidth","DialogTitle","DialogContent","Grid","DialogActions","clsx","Button","onSubmit","submitType","constructIcd10","data","status","today","Date","eff_date","setHours","exp_date","isValid","gender_limited","gender","category_code","diagnosis_code","toString","full_code","abbreviated_description","full_description","category_title","main_category","effectivity_date","expiry_date","date_updated","constructCpt","code","description","category","reconstructIcd10","Boolean","constructEmptyIcd10","reconstructCpt","constructEmptyCpt","constructPutIcd10","assign","constructPutCpt","constructPostIcd10","data_arr","constructPostCpt","constructAddSynonymPayload","approve","synonyms","constructUnapprovedSynonymPayload","all_approved","synonym","icd_append","patch_synonyms","some","synonym_lowercase","toLowerCase","includes","icd_append_synonyms","constructDeactivateSynonymPayload","for_deactivate","icd_discard","icd_discard_synonyms","constructActivateSynonymPayload","constructEmptyDoctorSpecialization","constructDoctorSpecialization","constructPutDoctorSpecialization","helper","Utils","IndexedDBHelper","ICD10Section","requiredFields","excludeFields","escFunction","keyCode","handleCloseSideModalBlock","initialData","setState","no_data_message","searchCode","state","default_filters","global_filter","default_sorting","default_clicked","addCodeIndexdb","openDb","res","db","result","saveToStore","catch","patchCodeIndexdb","updateEntryByKey","fetchICDCategoriesIndexdb","a","StorageService","icds","category_arr","category_dropdown_choices_arr","setICDCategories","setICDCategoryDropdown","icd_categories","icd_category_dropdown_choices","err","filters_global","clicked","response","table","generateDataForTable","code_response","code_data_all","code_data","loading_state","total","count","statusCode","modalTitle","modalMessage","patchCode","changePageUpdate","disableSaveButton","addCodes","handleChangeSorting","handleFilterByColumn","self","typingTimeout","clearTimeout","typing","setTimeout","handleSearch","handleClickRow","checkFields","code_info","handleChangeSideModalBlockMode","handlePageChange","handlePageSizeChange","isPageSizeModal","handleClickItemFromList","show_side_modal_block","side_modal_block_mode","block_title","reform_data","cloneDeep","handleOpenBlock","passDataToSideModalBlockBody","handleInvalidFieldsPrompt","formFields","disableButton","invalid_fields","getInvalidFields","clickSaveButton","confirm_modal_message","confirm_modal_open","confirm_modal_title","action_after_confirm","invalid_fields_submit","invalid_fields_editing","exclude_fields","fields_excluded","field","startOf","diff","SIDE_MODAL_BLOCK_FIELDS","ICD10","editOrAdd","checkInvalidFields","columnName","wordWrapEnabled","icdCategoryDropdown","icdCategories","highlightedCodeFromList","action_after_info","this","document","addEventListener","temp_row","blockPosition","editIconDescription","showBlock","handleClose","sideModalBlockMode","changeMode","invalidFields","refreshData","handleSave","formName","mode","checkBoxWithDropDownFieldsInitState","dynamicDropdownChoices","datePairField1MaxDate","datePairField2MinDate","Fragment","codeHeader","codeHeaderValue","ListItemText","codeListItemsRoot","primary","codeListItemsSelected","codeListItems","categories","md","borderedGrid","List","renderCodeInfo","renderCodeList","TextField","inputProps","InputProps","InputAdornment","Search","marginTop","faPlus","plusIcon","addACode","minHeight","overflow","update","renderSideModalBlock","React","Component","getCPT","searchCPT","CPT_URL","addCPTCodes","editCPT","deleteCPT","CPTSection","addCPTIndexDB","patchCPTIndexDB","fetchCPTCategories","cpts","category_ranges","setCPTCategories","setCPTCategoryDropdown","setCPTCategoryRanges","cpt_categories","cpt_category_range","category_dropdown_choices","CPT","cptCategoryDropdown","cptCategories","cptCategoryRanges","delete","ranges","range","slice","tableInfo","All","Others","Unapproved","Approved","Inactive","actionValue","selectedItems","borderRadius","xIcon","input","inputLabel","AddSynonymsBody","addSynonym","textFieldValue","activeLink","action","handleHeaderCheckbox","formChanges","APIGetAllSynonyms","isLoading","resp","unapproved_count","unapproved","all_count","inactive_count","inactive","active_count","active","eror","tabCount","tabsCount","titleCase","sentence","split","toUpperCase","join","rowDataFixer","getColumns","tab","tableClone","getColumnExtensions","getFilterExtensions","getFormattedColumns","checkIfSelectBox","setActiveLink","handleOnClickRow","changeTab","handleMenuClick","hasUnsavedChanges","changeTabUnsaved","choices","changesMade","setHasUnsavedChanges","deactivateSynonyms","activateSynonyms","rowActions","menuTabs","prevProps","prevState","resetStates","getRowsTrigger","getRowsForUnsavedChanges","temp_rows","minWidth","InputLabel","required","CircularProgress","maxHeight","data_row","disabled","ICD10SynonymsSection","searchSynonyms","unapproved_filter","generateDataForUnapprovedTable","code_data_all_unapproved","code_data_unapproved","total_count_unapproved","page_unapproved","default_filters_unapproved","limit_unapproved","default_sorting_unapproved","activeTableSkip","activeTableCurrentpage","getActive","handleGetAction","unapproved_codes_actions","changePageUpdateUnapproved","has_unsaved_changes","handleChangeSortingUnapproved","handleResetAll","code_info_unapproved","setICDSynonymAction","handleFilterByColumnUnapproved","handlePageChangeUnapproved","handlePageSizeChangeUnapproved","handleRadioClick","unapproved_actions","unapproved_row","handleSaveUnapproved","disapprove","activeTableRows","bool","side_modal_get_rows_trigger","confirm_modal_method","activeTableFilter","activeTableLimit","activeTableSort","icd10Active","d","full_synonyms","activeTableCount","Math","ceil","handleActiveFilter","active_default_filter","handleActiveSorting","values","handleActivePageSizeChange","handleActiveCurrentPageChange","handleOpenConfirmationModalProps","handleSaveUnapprovedPayload","handleConfirmationModalClose","unsaved_changes_modal","confirm_modal_save_button","snackbarOpen","snackbarMessage","match","bracketIndexStart","bracketIndexEnd","message_comp","strong_str","substring","first_str","temp","end_str","handleActivateDuplicateInactiveSynonym","handleActivateDeactivate","string_obj","duplicate","parse","handleOpenUnsavedChangesModal","createUnsavedChangesModalBody","side_modal_active_link","side_modal_rows","body_list1","body_list2","approve_rows","disapprove_rows","getBodyList","deactivate_rows","activate_rows","saveChanges","discardAndContinue","unapprovedTable","modalMessageMaxWidth","icdSynonymAction","code_repo","activeTableColumns","staticDropdown","staticDropdownOptions","activelink","onKeyUp","which","menuList","LinkActive","menuLink","approveDisapproveItems","messageMaxWidth","ModalComponent","titleFontSize","buttons","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","searchDoctorSpecialization","editDoctorSpecialization","DEV_MODE","HIDE_EDIT_MODE","table_specs","datePicker","DoctorSpecializationSection","DoctorSpecialization","dateFormatter","generatedTable","verticalSpacing","page_tab_titles","sideBarItems","Codes","Locations","Industries","borderRight","cursor","marginRight","opacity","letterSpacing","textAlignLast","flex","useStyles2","gridContainer","main","headerTitle","sideBarContainer","LookupPage","activeHeader","setActiveHeader","activeClass","setActiveClass","activeItem","setActiveItem","lookupClasses","Typography","classNames","index","SideMenu","activeItems","reset","mapStateToProps","lookup","mapDispatchToProps","dispatch","Map","bindActionCreators"],"mappings":"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","file":"static/js/8.3be1da4a.chunk.js","sourcesContent":["import * as React from 'react';\nimport { CircularProgress } from '@material-ui/core/';\nimport { makeStyles } from '@material-ui/core/styles';\n\ninterface LoaderProps {\n}\n\nconst useStyles = makeStyles({\n\troot: {\n        position: 'fixed',\n        width: '100%',\n        height: '100%',\n        zIndex: 9999,\n        right: '0px',\n        bottom: '0px',\n        top: '0px',\n        left: '0px',\n        textAlign: \"center\",\n        backgroundColor: 'rgba(0, 0, 0, 0.5)'\n    },\n    container:{\n        height: '100%',\n        outline: 0,\n        alignItems: 'center',\n        justifyContent: 'center',\n        display: 'flex',\n        flexDirection: 'column'\n    }\n});\n\nexport const Loader: React.FC<LoaderProps> = (): JSX.Element => {\n    // const buttonclasses = ButtonStyle();\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            <div className={classes.container}>\n                <CircularProgress size={150}/>\n            </div>\n        </div>\n    )\n}\n\nLoader.defaultProps = {}","export const LookupConsts = {\n  Lookup: {\n    ResetReducer: 'Lookup_ResetReducer',\n    SetReducer: 'Lookup_SetReducer',\n  },\n};\n","import { LookupConsts } from './ActionConsts';\n\nexport const LookupActions = {\n  Map: (payload: []) => ({\n    payload,\n    type: LookupConsts.Lookup.SetReducer,\n  }),\n\n  Reset: () => ({\n    type: LookupConsts.Lookup.ResetReducer,\n  }),\n};\n","//#region Global Imports\nimport * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport {\n  Grid,\n  Table,\n  TableSelection,\n  TableHeaderRow,\n  TableFilterRow,\n  Toolbar,\n  SearchPanel,\n  PagingPanel,\n  TableBandHeader,\n  VirtualTable\n} from '@devexpress/dx-react-grid-material-ui';\nimport {\n  Paper,\n  Link\n} from '@material-ui/core/';\nimport {\n  PagingState,\n  CustomPaging,\n  SelectionState,\n  IntegratedSelection,\n  FilteringState,\n  IntegratedFiltering,\n  SortingState,\n  IntegratedSorting,\n  SearchState,\n  DataTypeProvider,\n} from '@devexpress/dx-react-grid';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faSearch,\n  faCheckSquare,\n  faSort,\n  faSortUp,\n  faSortDown,\n  faExclamationCircle,\n  faFileUpload,\n  faSquare,\n  faRedoAlt,\n} from '@fortawesome/free-solid-svg-icons';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers'\nimport MomentUtils from '@date-io/moment'\nimport { makeStyles } from '@material-ui/styles';\nimport * as MaterialUI from '@material-ui/core';\nimport moment from 'moment';\n//import { Components } from '@hims/core';\n//#endregion Global Imports\n\nlet rowResetSelected = false;\nlet radioSelected = false;\nlet selectedValue = '';\nlet clickCell = false;\nlet clickValue = {};\n// let global_approve_disapprove: any = [];\n\nconst cellSelectStyles = makeStyles({\n  select: {\n    backgroundColor: 'transparent',\n  },\n});\n\nconst textFieldStyles = makeStyles({\n  root: {\n    '& div.MuiInputBase-root': {\n      backgroundColor: 'transparent',\n    },\n  },\n});\n\nconst checkboxStyles = makeStyles({\n  root: {\n    '&.Mui-checked': {\n      color: '#3AB77D',\n    },\n  },\n});\n\nconst Select = ({ id, value, items }: any) => {\n  const cellSelectClasses = cellSelectStyles();\n  return (\n    <MaterialUI.Select\n      id={id}\n      classes={cellSelectClasses}\n      value={value}\n      style={{ width: '100%', backgroundColor: 'transparent' }}\n      renderValue={(selected: any) => {\n        if (selected !== null) {\n          const value: any = items.find((item: any) => {\n            return item.value === selected;\n          });\n          if (value) {\n            return value.name;\n          } else {\n            return '—';\n          }\n        }\n        return '—';\n      }}\n    >\n      {items.map((item: any) => (\n        <MaterialUI.MenuItem key={item.value} value={item.value}>\n          {item.name}\n        </MaterialUI.MenuItem>\n      ))}\n    </MaterialUI.Select>\n  );\n};\n\nconst StatusSelect = ({ items, ...restProps }: any) => {\n  return (\n    <MaterialUI.Select\n      variant='outlined'\n      style={{ width: '100%' }}\n      renderValue={(selected: any) => {\n        if (selected != null) {\n          const value: any = items.find((item: any) => {\n            return item.value === selected;\n          });\n          if (value) {\n            return value.label;\n          } else {\n            return '——';\n          }\n        }\n        return '——';\n      }}\n      {...restProps}\n    >\n      {items.map((item: any, i: number) => (\n        <MaterialUI.MenuItem key={i} value={item.value}>\n          {item.label}\n        </MaterialUI.MenuItem>\n      ))}\n    </MaterialUI.Select>\n  );\n};\n\n\nconst TableFilterCell = ({\n  filter,\n  onFilter,\n  filteringEnabled,\n  classes, column\n}: any) => {\n  if (filteringEnabled) {\n    if (column['datePicker']) {\n      return (\n        <MaterialUI.TableCell style={{ padding: '0px 10px 8px 10px' }} classes={classes}>\n          <MuiPickersUtilsProvider utils={MomentUtils}>\n            <KeyboardDatePicker\n              // inputProps={{\n              //   disabled: true\n              // }}\n              variant=\"dialog\"\n              format=\"MMMM D, YYYY\"\n              inputVariant=\"outlined\"\n              value={filter ? filter.value : ''}\n              invalidDateMessage=\"\"\n              onChange={date => { console.log(date); onFilter(date ? { value: date.toISOString() } : null) }}\n            />\n          </MuiPickersUtilsProvider>\n        </MaterialUI.TableCell>\n      )\n    } else if (column['staticDropdown']) {\n      return (\n        <MaterialUI.TableCell style={{ paddingTop: '5px' }}>\n          <StatusSelect\n            onChange={e => onFilter(e.target.value ? { value: e.target.value } : null)}\n            name={'status'}\n            items={column['staticDropdownOptions'] ? column['staticDropdownOptions'] : []}\n            id={'status'}\n            value={filter ? filter.value : ''}\n          />\n        </MaterialUI.TableCell>\n      )\n    } else {\n      return (\n        <MaterialUI.TableCell\n          style={{ padding: '0px 10px 8px 10px' }}\n          classes={classes}\n        >\n          <MaterialUI.OutlinedInput\n            classes={classes}\n            style={{ width: '100%' }}\n            value={filter ? filter.value : ''}\n            labelWidth={0}\n            onChange={e =>\n              onFilter(e.target.value ? { value: e.target.value } : null)\n            }\n            placeholder=\"\"\n          />\n        </MaterialUI.TableCell>\n      );\n    }\n  } else {\n    // return null;\n    if (column['actionColumn']) {\n      return (\n        <MaterialUI.TableCell\n          style={{ padding: '0px 0px 0px 0px' }}\n          classes={classes}\n          align=\"center\"\n        >\n          <MaterialUI.Checkbox\n            color='primary'\n            onChange={e => {\n              onFilter(e.target.checked !== undefined ? { 'action': e.target.checked } : null);\n            }}\n          />\n        </MaterialUI.TableCell>\n\n      );\n    } else if (column['resetColumn']) {\n      return (\n        <MaterialUI.TableCell align=\"center\">\n          <MaterialUI.Grid container justify=\"center\" style={{ paddingLeft: '22px' }}>\n            <Link onClick={() => {\n              onFilter({ 'reset_action': true });\n            }}>\n              <MaterialUI.Grid container justify=\"center\" alignItems=\"center\">\n                <MaterialUI.Grid item xs={12} alignContent=\"center\">\n                  <FontAwesomeIcon icon={faRedoAlt} style={{ fontSize: '20px' }} />\n                </MaterialUI.Grid>\n                <MaterialUI.Grid item xs={12} alignContent=\"center\">\n                  <span style={{ fontSize: '10px' }}>Reset All</span>\n                </MaterialUI.Grid>\n              </MaterialUI.Grid>\n            </Link>\n          </MaterialUI.Grid>\n        </MaterialUI.TableCell>\n      );\n    } else {\n      return (\n        <MaterialUI.TableCell\n          style={{ padding: '0px 10px 8px 10px' }}\n          classes={classes}\n        ></MaterialUI.TableCell>\n      );\n    }\n\n  }\n};\n\nconst TableRadio = ({\n  style,\n  selected,\n  onToggle,\n  classes,\n  ...restProps\n}: any) => {\n  return (\n    <MaterialUI.TableCell\n      padding=\"checkbox\"\n      style={style}\n      classes={classes}\n      {...restProps}\n    >\n      <MaterialUI.Radio\n        classes={classes}\n        checked={selected}\n        onClick={e => {\n          e.stopPropagation();\n          onToggle();\n        }}\n      />\n    </MaterialUI.TableCell>\n  );\n};\n\nconst TableCheckBox = ({\n  style,\n  selected,\n  onToggle,\n  classes,\n  ...restProps\n}: any) => {\n  return (\n    <MaterialUI.TableCell\n      padding=\"checkbox\"\n      style={style}\n      classes={classes}\n      {...restProps}\n    >\n      <MaterialUI.Checkbox\n        icon={<FontAwesomeIcon icon={faSquare} />}\n        checkedIcon={<FontAwesomeIcon icon={faCheckSquare} />}\n        classes={classes}\n        checked={selected}\n        onClick={e => {\n          e.stopPropagation();\n          onToggle();\n        }}\n      />\n    </MaterialUI.TableCell>\n  );\n};\n\nconst TableSearchPanel = ({ value, onValueChange }: any) => {\n  return (\n    <MaterialUI.OutlinedInput\n      value={value ? value : ''}\n      labelWidth={0}\n      onChange={e => onValueChange(e.target.value ? e.target.value : null)}\n      placeholder=\"Search a benefit or benefit category\"\n      fullWidth\n      startAdornment={\n        <MaterialUI.InputAdornment position=\"start\">\n          <FontAwesomeIcon icon={faSearch} />\n        </MaterialUI.InputAdornment>\n      }\n    />\n  );\n};\n\nconst DefaultTableToolbar = ({ children }: any) => {\n  return <MaterialUI.Toolbar disableGutters={true} children={children} />;\n};\n\nconst SortingIcon = ({ direction }: any) =>\n  direction === 'asc' ? (\n    <FontAwesomeIcon style={{ marginLeft: '10px' }} icon={faSortUp} />\n  ) : (\n      <FontAwesomeIcon style={{ marginLeft: '10px' }} icon={faSortDown} />\n    );\n\nconst TableSortLabel = ({ column, onSort, children, direction }: any) => {\n  if (\n    column.sortingEnabled !== undefined &&\n    column.sortingEnabled !== null &&\n    column.sortingEnabled === false\n  ) {\n    if (column.actionColumn || column.resetColumn) {\n      return (\n        <MaterialUI.Grid container justify=\"center\">\n          {column.title}\n        </MaterialUI.Grid>\n      )\n    }\n    return <span>{column.title}</span>;\n  } else {\n    return (\n      <MaterialUI.TableSortLabel hideSortIcon={true} onClick={onSort}>\n        {children}\n        {direction ? (\n          <SortingIcon direction={direction} />\n        ) : (\n            <FontAwesomeIcon style={{ marginLeft: '10px' }} icon={faSort} />\n          )}\n      </MaterialUI.TableSortLabel>\n    );\n  }\n};\n\nconst EmptyCellFormatter = ({ value }: any) => {\n  if (value === '' || value === undefined || value === null) {\n    return (\n      <FontAwesomeIcon\n        style={{ color: '#FD5451', fontSize: '16px' }}\n        icon={faExclamationCircle}\n      />\n    );\n  } else {\n    return value;\n  }\n};\n\nconst EmptyCellDataTypeProvider = (props: any) => (\n  <DataTypeProvider formatterComponent={EmptyCellFormatter} {...props} />\n);\n\nconst RequiredFormatter = ({ row, value }: any) => {\n  if (\n    row['required'] === true &&\n    (value === '' || value === undefined || value === null)\n  ) {\n    return (\n      <FontAwesomeIcon\n        style={{ color: '#FD5451', fontSize: '16px' }}\n        icon={faExclamationCircle}\n      />\n    );\n  } else if (\n    row['required'] === false &&\n    (value === '' || value === undefined || value === null)\n  ) {\n    return 'N/A';\n  } else {\n    return value;\n  }\n};\n\nconst RequiredDataTypeProvider = (props: any) => (\n  <DataTypeProvider formatterComponent={RequiredFormatter} {...props} />\n);\n\nconst RequiredCheckboxFormatter = ({ column, row, value }: any) => {\n  const classes = checkboxStyles();\n  return (\n    <MaterialUI.Grid container justify=\"center\">\n      <MaterialUI.FormControlLabel\n        control={\n          <MaterialUI.Checkbox\n            checked={row && row['action_chosen'] ? true : false}\n            value={value}\n            style={{ padding: '0px 0px 0px 26px' }}\n            className={classes.root}\n            color=\"primary\"\n            onChange={e => {\n              row['action_chosen'] = e.target.checked\n              clickCell = true;\n              clickValue = {\n                value: e.target.checked,\n                name: column['name'],\n                row: row,\n              };\n            }}\n          />\n        }\n        label=\"\"\n      />\n    </MaterialUI.Grid>\n  );\n};\n\nconst RequiredCheckboxDataTypeProvider = (props: any) => (\n  <DataTypeProvider formatterComponent={RequiredCheckboxFormatter} {...props} />\n);\n\nconst UploadFileFormatter = ({ column, row }: any) => {\n  const id: string = column['name'] + '_' + row['id'];\n  return (\n    <div\n      id={id}\n      onClick={e => {\n        // e.stopPropagation();\n        console.log('e>', e);\n      }}\n    >\n      <MaterialUI.Typography color=\"textPrimary\" style={{ paddingTop: '5px' }}>\n        <span>\n          <span style={{ paddingRight: '10px', fontSize: '15px' }}>\n            <FontAwesomeIcon icon={faFileUpload} style={{ color: '#0D5E40' }} />\n          </span>\n          <span style={{ textDecoration: 'underline', color: '#0D5E40' }}>\n            Upload File\n          </span>\n        </span>\n      </MaterialUI.Typography>\n    </div>\n  );\n};\n\nconst UploadFileDataTypeProvider = (props: any) => (\n  <DataTypeProvider formatterComponent={UploadFileFormatter} {...props} />\n);\n\nconst ApproveDisapproveRadioFormatter = (props: any) => {\n  const { row } = props;\n\n  const items = [\n    { value: 'approve', label: 'Approve' },\n    { value: 'disapprove', label: 'Disapprove' },\n  ];\n\n  const handleClick = (event) => {\n    row['action_chosen'] = event.target.value;\n  }\n\n\n  return (\n    <div>\n      <MaterialUI.RadioGroup\n        aria-label=\"position\"\n        name=\"position\"\n        // value={row && row._id && global_approve_disapprove && global_approve_disapprove.some(item => item._id === row._id) && row.action_chosen ? row.action_chosen : ''}\n        onChange={e => {\n          e.stopPropagation();\n          radioSelected = true;\n          selectedValue = e.target.value;\n\n        }}\n        row\n      >\n        {items.map((item: any, cnt: number) => (\n          <MaterialUI.FormControlLabel\n            // className={classes.root}\n            checked={row && row.action_chosen && row.action_chosen === item.value}\n            key={cnt}\n            value={item.value}\n            control={<MaterialUI.Radio style={{ padding: '0px 2px 0px 2px', margin: 0, fontSize: '10px' }} onClick={handleClick} color=\"primary\" size=\"small\" />}\n            label={<span style={{ fontSize: '12px', fontWeight: 600 }}>{item.label}</span>}\n            labelPlacement=\"end\"\n          />\n        ))}\n      </MaterialUI.RadioGroup>\n    </div>\n  );\n};\n\nconst ApproveDisapproveRadioDataTypeProvider = (props: any) => (\n  <DataTypeProvider formatterComponent={ApproveDisapproveRadioFormatter} {...props} />\n);\n\n\nconst ApproveDisapproveRadioFormatterVirtual = ({ row }: any) => {\n  const items = [\n    { value: 'approve', label: 'Approve' },\n    { value: 'disapprove', label: 'Disapprove' },\n  ];\n\n  const handleClick = (event) => {\n    row['action_chosen'] = event.target.value;\n  }\n\n  return (\n    <div>\n      <MaterialUI.RadioGroup\n        aria-label=\"position\"\n        name=\"position\"\n        key={`virtual-group-${row._id}-${row._id}`}\n        value={row && row.action_chosen ? row.action_chosen : undefined}\n        onChange={e => {\n          e.stopPropagation();\n          radioSelected = true;\n          selectedValue = e.target.value;\n        }}\n        row\n      >\n        {items.map((item: any, cnt: number) => (\n          <MaterialUI.FormControlLabel\n            key={`virtual-label-${cnt}-${item}-${row._id}`}\n            value={item.value}\n            control={<MaterialUI.Radio key={`virtual-radio-${cnt}-${item}-${row._id}`} id={row._id} onClick={handleClick} color=\"primary\" size=\"small\" />}\n            label={<span key={`virtual-text-${cnt}-${item}`} style={{ fontSize: '14px', fontWeight: 600 }}>{item.label}</span>}\n            labelPlacement=\"end\"\n          />\n        ))}\n      </MaterialUI.RadioGroup>\n    </div>\n  );\n};\n\n\nconst ApproveDisapproveRadioDataTypeProviderVirtual = (props: any) => (\n  <DataTypeProvider formatterComponent={ApproveDisapproveRadioFormatterVirtual} {...props} />\n);\n\n\nconst ResetFormatter = ({ row }: any) => {\n\n  return (\n    <MaterialUI.Grid container justify=\"center\" alignItems=\"center\">\n      <Link onClick={() => {\n        if (!row) return;\n        rowResetSelected = true;\n        row['action_chosen'] = '';\n      }}>\n        <FontAwesomeIcon icon={faRedoAlt} style={{ fontSize: '20px' }} />\n      </Link>\n    </MaterialUI.Grid>\n  );\n};\n\n\nconst ResetDataTypeProvider = (props: any) => (\n  <DataTypeProvider formatterComponent={ResetFormatter} {...props} />\n);\n\nconst IncompleteRadioFormatter = ({ value }: any) => {\n  const items = [\n    { value: 'approve', label: 'Approve' },\n    { value: 'disapprove', label: 'Disapprove' },\n    { value: 'for confirmation', label: 'For Confirmation' },\n  ];\n  return (\n    <div>\n      <MaterialUI.RadioGroup\n        aria-label=\"position\"\n        name=\"position\"\n        value={value}\n        onChange={e => {\n          e.stopPropagation();\n          radioSelected = true;\n          selectedValue = e.target.value;\n        }}\n        row\n      >\n        {items.map((item: any, cnt: number) => (\n          <MaterialUI.FormControlLabel\n            key={cnt}\n            value={item.value}\n            control={<MaterialUI.Radio color=\"primary\" />}\n            label={item.label}\n            labelPlacement=\"end\"\n            onClick={e => {\n              radioSelected = true;\n              console.log('radio button label onclick', e);\n            }}\n            onChange={e => {\n              radioSelected = true;\n              // selectedValue = e.target.value;\n              console.log('radio button label onchange', e);\n            }}\n          />\n        ))}\n      </MaterialUI.RadioGroup>\n    </div>\n  );\n};\n\nconst IncompleteRadioDataTypeProvider = (props: any) => (\n  <DataTypeProvider formatterComponent={IncompleteRadioFormatter} {...props} />\n);\n\nconst RadioNameFormatter = ({ value }: any) => {\n  const items = [\n    { value: 'match', label: 'Match' },\n    { value: 'not', label: 'Not Match' },\n    { value: 'confirmation', label: 'For Confirmation' },\n  ];\n  console.log('Radio group value: ', value);\n  return (\n    <div>\n      <MaterialUI.RadioGroup\n        aria-label=\"position\"\n        name=\"position\"\n        value={value}\n        onChange={e => {\n          e.stopPropagation();\n          radioSelected = true;\n          selectedValue = e.target.value;\n        }}\n        row\n      >\n        {items.map((item: any, cnt: number) => (\n          <MaterialUI.FormControlLabel\n            key={cnt}\n            value={item.value}\n            control={<MaterialUI.Radio color=\"primary\" />}\n            label={item.label}\n            labelPlacement=\"end\"\n            onClick={e => {\n              radioSelected = true;\n              console.log('radio button label onclick', e);\n            }}\n            onChange={e => {\n              radioSelected = true;\n              // selectedValue = e.target.value;\n              console.log('radio button label onchange', e);\n            }}\n          />\n        ))}\n      </MaterialUI.RadioGroup>\n    </div>\n  );\n};\n\nconst RadioDataTypeProvider = (props: any) => (\n  <DataTypeProvider formatterComponent={RadioNameFormatter} {...props} />\n);\n\nconst ValuesNameFormatter = ({ value }: any) => {\n  const items = [\n    { name: '', value: '' },\n    { name: 'Married', value: 'married' },\n    { name: 'Single', value: 'single' },\n    { name: 'Widowed', value: 'widowed' },\n    { name: 'Annulled', value: 'annulled' },\n  ];\n  return <Select items={items} value={value} />;\n};\n\nconst ValuesNameDataTypeProvider = (props: any) => (\n  <DataTypeProvider formatterComponent={ValuesNameFormatter} {...props} />\n);\n\nconst SystemNameFormatter = ({ value }: any) => {\n  const items = [\n    { name: 'First Name', value: 'first_name' },\n    { name: 'Middle Name', value: 'middle_name' },\n    { name: 'Last Name', value: 'last_name' },\n    { name: 'Birthday', value: 'birthday' },\n    { name: 'Civil Status', value: 'civil_status' },\n    { name: 'Gender', value: 'gender' },\n    { name: 'Plan Type', value: 'plan_type' },\n    { name: 'Type', value: 'type' },\n  ];\n\n  return <Select items={items} value={value} />;\n};\n\nconst SystemNameDataTypeProvider = (props: any) => (\n  <DataTypeProvider formatterComponent={SystemNameFormatter} {...props} />\n);\n\nconst DataFormatter = ({ value }: any) => {\n  const items = [\n    { name: 'Civil Status', value: 'civil_status' },\n    { name: 'Gender', value: 'gender' },\n  ];\n  return <Select items={items} value={value} />;\n};\n\nconst DataDataTypeProvider = (props: any) => (\n  <DataTypeProvider formatterComponent={DataFormatter} {...props} />\n);\n\nconst NumberFormatter = ({ value }: any) => {\n  const textFieldClasses = textFieldStyles();\n  return (\n    <MaterialUI.TextField\n      value={value}\n      type={'number'}\n      classes={textFieldClasses}\n    />\n  );\n};\n\nconst NumberDataTypeProvider = (props: any) => (\n  <DataTypeProvider formatterComponent={NumberFormatter} {...props} />\n);\n\nconst TextFormatter = ({ value }: any) => {\n  const textFieldClasses = textFieldStyles();\n  return <MaterialUI.TextField value={value} classes={textFieldClasses} />;\n};\n\nconst TextDataTypeProvider = (props: any) => (\n  <DataTypeProvider formatterComponent={TextFormatter} {...props} />\n);\n\nconst DateFormatter = ({ value }: any) => {\n  let text = value;\n  if (text) {\n    try {\n      text = moment(value).format('MMM DD, YYYY');\n    } catch (error) {\n      text = value;\n    }\n  } else {\n    text = '';\n  }\n\n  return text;\n};\n\nconst DateCellDataTypeProvider = (props: any) => (\n  <DataTypeProvider formatterComponent={DateFormatter} {...props} />\n);\n\nconst TimeFormatter = ({ value }: any) => {\n  let text = value;\n  if (text) {\n    try {\n      text = moment(value).format('hh:mm:ss A');\n    } catch (error) {\n      text = value;\n    }\n  } else {\n    text = '';\n  }\n\n  return text;\n};\n\nconst TimeCellDataTypeProvider = (props: any) => (\n  <DataTypeProvider formatterComponent={TimeFormatter} {...props} />\n);\n\ninterface TableComponentProps {\n  rows: any[];\n  columns: any[];\n  columnFilteringEnabled?: boolean;\n  columnExtensions?: any[];\n  filterExtensions?: any[];\n  formattedColumns?: any;\n  columnBands?: any[] | null;\n  singleSelect?: boolean;\n  disableSearch?: boolean;\n  disablePaging?: boolean;\n  disableSelect?: boolean;\n  disableFilter?: boolean;\n  disableSort?: boolean;\n  showSelectionColumn?: boolean;\n  toolbarType?: string | null;\n  topBar?: () => JSX.Element;\n  id: string;\n  totalCount: number;\n  message: string;\n  defaultFilter?: any[];\n  update: (skip: number, limit: number) => void;\n  updateSorting: (sort: object) => void;\n  onClickRow?: (row: number[]) => void;\n  onSelectedRadio?: (row: number, value: string) => void;\n  onFilterChange?: (response: any) => void;\n  onSortingChange?: (response: any) => void;\n  onClickCell?: (row: any) => void;\n  onPageChange: (currentPage: any, skip: any) => void;\n  ongPageSizeChange: (value: number) => void;\n  onSelectedReset?: (row: any) => void;\n  defaultSort?: any[];\n  query?: string;\n  currentPage: number;\n  limit: number;\n  pageSizes?: number[];\n  approveDisapproveItems?: any[];\n  disableIntegratedFiltering?: boolean;\n  isVirtualTable?: boolean;\n  disableIntegratedSorting?: boolean;\n}\n\nexport const TableComponent: React.FC<TableComponentProps> = (\n  props: TableComponentProps,\n): JSX.Element => {\n  const {\n    disableIntegratedFiltering,\n    columns,\n    formattedColumns,\n    singleSelect,\n    disablePaging,\n    disableSearch,\n    disableSelect,\n    disableSort,\n    disableFilter,\n    toolbarType,\n    columnExtensions,\n    columnBands,\n    id,\n    showSelectionColumn,\n    query,\n    totalCount,\n    currentPage,\n    limit,\n    disableIntegratedSorting,\n  } = props;\n  const [selection, setSelection] = useState<number[]>([]);\n  const [pageSizes] = useState(props.pageSizes ? props.pageSizes : [10, 25, 50, 100, 0]);\n  const [sorting, setSorting] = useState(props.defaultSort ? props.defaultSort : []);\n  const [rows, setRows] = useState(props.rows);\n  useEffect(() => {\n    setRows(props.rows);\n  }, [props.rows]);\n\n  useEffect(() => {\n    const empty: any = [];\n    setSorting(props.defaultSort ? props.defaultSort : empty);\n  }, [props.defaultSort])\n\n  // useEffect(() => {\n  //   global_approve_disapprove = props.approveDisapproveItems;\n  //   setRows([...rows])\n  // }, [props.approveDisapproveItems]);\n\n  const dataTypeProviders: any[] = [];\n\n  const changePageSize = (value) => {\n    // props.update(currentPage, value);\n    props.ongPageSizeChange(value);\n  }\n\n  const setCurrentPageMethod = (page) => {\n    let skip = (limit * page);\n\n    props.onPageChange(page, skip);\n  }\n\n  const setSortingMethod = (e) => {\n    props.updateSorting(e);\n    setSorting(e);\n    // setRows([]);\n  }\n\n  function handleSelectionChange(newSelection: any[]) {\n    console.log('here click row');\n    if (props.onClickRow) {\n      // selectedRow = newSelection[0];\n      if (!radioSelected && !clickCell && !rowResetSelected) {\n        console.log('onclickrow');\n        props.onClickRow(newSelection);\n      } else if (radioSelected && !rowResetSelected) {\n        console.log('radioselected', newSelection);\n        if (props.onSelectedRadio)\n          props.onSelectedRadio(newSelection[0], selectedValue);\n        setRows([...rows]);\n        radioSelected = false;\n      } else if (rowResetSelected) {\n        if (props.onSelectedReset) props.onSelectedReset(newSelection);\n        rowResetSelected = false;\n      } else if (clickCell) {\n        console.log(' here !!! >>>', props.onClickCell);\n        if (props.onClickCell) props.onClickCell(clickValue);\n        clickCell = false;\n        clickValue = {};\n      }\n    } else {\n      if (singleSelect) {\n        const lastSelected = newSelection.find(\n          (selected: number) => selection.indexOf(selected) === -1,\n        );\n\n        console.log(newSelection, selection, lastSelected);\n        if (lastSelected !== undefined) {\n          setSelection([lastSelected]);\n        }\n      } else {\n        setSelection(newSelection);\n      }\n    }\n  }\n  if (\n    formattedColumns !== undefined &&\n    Object.keys(formattedColumns).length > 0\n  ) {\n    if (formattedColumns['number'] !== undefined) {\n      dataTypeProviders.push(\n        <NumberDataTypeProvider for={formattedColumns.number} />,\n      );\n    }\n    if (formattedColumns['text'] !== undefined) {\n      dataTypeProviders.push(\n        <TextDataTypeProvider for={formattedColumns.text} />,\n      );\n    }\n    if (formattedColumns['system_name'] !== undefined) {\n      dataTypeProviders.push(\n        <SystemNameDataTypeProvider for={formattedColumns.system_name} />,\n      );\n    }\n    if (formattedColumns['data_name'] !== undefined) {\n      dataTypeProviders.push(\n        <DataDataTypeProvider for={formattedColumns.data_name} />,\n      );\n    }\n    if (formattedColumns['value_name'] !== undefined) {\n      dataTypeProviders.push(\n        <ValuesNameDataTypeProvider for={formattedColumns.value_name} />,\n      );\n    }\n    if (formattedColumns['required_columns'] !== undefined) {\n      dataTypeProviders.push(\n        <EmptyCellDataTypeProvider for={formattedColumns.required_columns} />,\n      );\n    }\n    if (formattedColumns['radio'] !== undefined) {\n      dataTypeProviders.push(\n        <RadioDataTypeProvider for={formattedColumns.radio} />,\n      );\n    }\n    if (formattedColumns['incomplete_radio'] !== undefined) {\n      dataTypeProviders.push(\n        <IncompleteRadioDataTypeProvider\n          for={formattedColumns.incomplete_radio}\n        />,\n      );\n    }\n    if (formattedColumns['approve_disapprove_action'] !== undefined) {\n      dataTypeProviders.push(\n        <ApproveDisapproveRadioDataTypeProvider\n          for={formattedColumns.approve_disapprove_action}\n        />,\n      );\n    }\n    if (formattedColumns['approve_disapprove_action_virtual'] !== undefined) {\n      dataTypeProviders.push(\n        <ApproveDisapproveRadioDataTypeProviderVirtual\n          for={formattedColumns.approve_disapprove_action_virtual}\n        />,\n      );\n    }\n    if (formattedColumns['approve_disapprove_reset'] !== undefined) {\n      dataTypeProviders.push(\n        <ResetDataTypeProvider\n          for={formattedColumns.approve_disapprove_reset}\n        />,\n      );\n    }\n    if (formattedColumns['required_checkbox'] !== undefined) {\n      dataTypeProviders.push(\n        <RequiredCheckboxDataTypeProvider\n          for={formattedColumns.required_checkbox}\n        />,\n      );\n    }\n    if (formattedColumns['upload_file'] !== undefined) {\n      dataTypeProviders.push(\n        <UploadFileDataTypeProvider\n          for={formattedColumns.upload_file}\n          {...props}\n        />,\n      );\n    }\n    if (formattedColumns['required_cell'] !== undefined) {\n      dataTypeProviders.push(\n        <RequiredDataTypeProvider\n          for={formattedColumns.required_cell}\n          {...props}\n        />,\n      );\n    }\n    if (formattedColumns['date'] !== undefined) {\n      dataTypeProviders.push(\n        <DateCellDataTypeProvider for={formattedColumns.date} />,\n      );\n    }\n    if (formattedColumns['time'] !== undefined) {\n      dataTypeProviders.push(\n        <TimeCellDataTypeProvider for={formattedColumns.time} />,\n      );\n    }\n  }\n\n  let toolbar = DefaultTableToolbar;\n\n  return (\n    <Paper id={id}>\n      {props.topBar ? props.topBar() : null}\n      <Grid rows={rows} columns={columns}>\n        {dataTypeProviders}\n        {/* Need to initialize paging state before paging panel */}\n        {!disablePaging ? (\n          <PagingState\n            currentPage={currentPage}\n            onCurrentPageChange={setCurrentPageMethod}\n            pageSize={limit}\n            onPageSizeChange={changePageSize}\n          />\n        ) : null}\n\n        {!disablePaging ? <CustomPaging totalCount={totalCount} /> : null}\n\n        {!disableSearch || query ? <SearchState value={query} /> : null}\n\n        {!disableSort ? (//&& props.defaultSort !== undefined ? (\n          <SortingState\n            defaultSorting={[]}\n            sorting={sorting}\n            onSortingChange={setSortingMethod}\n          />\n        ) : !disableSort ? (\n          <SortingState\n            defaultSorting={[]}\n          />\n        ) : null}\n\n        {!disableSort && !disableIntegratedSorting ? <IntegratedSorting /> : null}\n\n        {!disableSelect || !showSelectionColumn ? (\n          <SelectionState\n            selection={selection}\n            onSelectionChange={handleSelectionChange}\n          />\n        ) : null}\n        {!disableSelect ? <IntegratedSelection /> : null}\n\n        {!disableFilter ? (\n          <FilteringState\n            defaultFilters={[]}\n            filters={\n              props.defaultFilter !== undefined ? props.defaultFilter : []\n            }\n            columnFilteringEnabled={props.columnFilteringEnabled}\n            columnExtensions={props.filterExtensions}\n            onFiltersChange={props.onFilterChange}\n          />\n        ) : null}\n\n        {!disableFilter && !disableIntegratedFiltering ? <IntegratedFiltering /> : null}\n\n        {!props.isVirtualTable ? (\n          <Table\n            columnExtensions={columnExtensions}\n            messages={{ noData: props.message }}\n          />\n        ) : null}\n\n\n\n        {props.isVirtualTable ? (\n          <VirtualTable\n            columnExtensions={columnExtensions}\n            height={300}\n          />\n        ) : null}\n\n        {!disableSelect && !showSelectionColumn ? (\n          <TableSelection\n            showSelectAll={!singleSelect ? true : false}\n            cellComponent={!singleSelect ? TableCheckBox : TableRadio}\n            headerCellComponent={TableCheckBox}\n          />\n        ) : !showSelectionColumn ? (\n          <TableSelection\n            selectByRowClick\n            showSelectionColumn={false}\n            cellComponent={!singleSelect ? TableCheckBox : TableRadio}\n            headerCellComponent={TableCheckBox}\n          />\n        ) : null}\n\n        <TableHeaderRow\n          showSortingControls={!disableSort}\n          sortLabelComponent={TableSortLabel}\n        />\n\n        {!disableFilter ? (\n          <TableFilterRow cellComponent={TableFilterCell} />\n        ) : null}\n        {columnBands ? <TableBandHeader columnBands={columnBands} /> : null}\n\n        {!disableSearch || toolbarType ? (\n          <Toolbar rootComponent={toolbar} />\n        ) : null}\n        {!disableSearch ? (\n          <SearchPanel inputComponent={TableSearchPanel} />\n        ) : null}\n\n        {!disablePaging ? <PagingPanel pageSizes={pageSizes} /> : null}\n      </Grid>\n    </Paper>\n  );\n};\n\nTableComponent.defaultProps = {\n  rows: [],\n  columns: [],\n  columnExtensions: [],\n  filterExtensions: [],\n  columnBands: null,\n  formattedColumns: {},\n  singleSelect: false,\n  disableSearch: false,\n  disablePaging: false,\n  disableSelect: false,\n  disableFilter: false,\n  disableSort: false,\n  toolbarType: null,\n  defaultFilter: [],\n  showSelectionColumn: false,\n  columnFilteringEnabled: true,\n  id: 'table-1',\n  totalCount: 0,\n  message: 'No available data',\n  query: '',\n  currentPage: 0,\n  limit: 0\n};\n","import Fetch, { requestOption } from '../index'\n\nconst fetch = new Fetch();\nfetch.getAccessToken();\n\nexport const getICD = (limit: number, skip: number) => {\n\n    let filters = {\n        limit: limit,\n        skip: skip,\n    };\n    let option: requestOption = {\n        method: 'GET'\n    }\n    if (fetch.getAccessToken()) {\n        return fetch.call(option, `icd10-codes/search?filter=${JSON.stringify(filters)}`, true)\n    }\n    return fetch.fetchAccessToken().then(() => fetch.call(option, `icd10-codes/search?filter=${JSON.stringify(filters)}`, true))\n}\n\nexport const searchICD = (limit: number, offset: number, filters: any, query: string, sorting?: any, key?: string, ) => {\n\n\n    let filter_key_str = '';\n    if (key !== undefined && key !== '') {\n        filter_key_str = `&filter[where][main_category][like]=${key}`;\n    }\n    let sorting_str = '';\n    if (sorting && sorting.length !== 0) {\n        sorting_str =\n            '&filter[order]=' +\n            sorting[0]['columnName'] +\n            ' ' +\n            sorting[0]['direction'];\n    }\n    let filter_str = '';\n    if (filters) {\n        filters.forEach(filter => {\n            filter_str =\n                filter_str + '&' + filter['columnName'] + '=' + filter['value'];\n        });\n    }\n    let search = query ? '&search=' + query : '';\n    let ICD_URL =\n        `icd10-codes/search?filter[limit]=${limit}&filter[skip]=${offset}` +\n        search +\n        filter_str +\n        sorting_str +\n        filter_key_str;\n    if (limit === 0)\n        ICD_URL =\n            `icd10-codes/search?filter[skip]=${offset}` +\n            search +\n            filter_str +\n            sorting_str +\n            filter_key_str;\n    let option: requestOption = {\n        method: 'GET'\n    }\n\n    if (fetch.getAccessToken()) {\n        return fetch.call(option, ICD_URL, true)\n    }\n    return fetch.fetchAccessToken().then(() => fetch.call(option, ICD_URL, true))\n}\n\nexport const addICD10Codes = (payload: any) => {\n\n    let option: requestOption = {\n        method: 'POST',\n        body: payload\n    }\n\n    if (fetch.getAccessToken()) {\n        return fetch.call(option, `icd10-codes/multiple`, true)\n    }\n    return fetch.fetchAccessToken().then(() => fetch.call(option, `icd10-codes/multiple`, true))\n}\n\nexport const editICD = (payload: any, id: string | undefined) => {\n\n    let option: requestOption = {\n        method: 'PUT',\n        body: payload\n    }\n\n    if (fetch.getAccessToken()) {\n        return fetch.call(option, `icd10-codes/edit/${id}`, true)\n    }\n    return fetch.fetchAccessToken().then(() => fetch.call(option, `icd10-codes/edit/${id}`, true))\n}\n\nexport const deleteICD = (id: string) => {\n\n    let option: requestOption = {\n        method: 'DELETE'\n    }\n\n    if (fetch.getAccessToken()) {\n        return fetch.call(option, `icd10-codes/${id}`, true)\n    }\n    return fetch.fetchAccessToken().then(() => fetch.call(option, `icd10-codes/${id}`, true))\n}\n\nexport const getICDSynonyms = (filters?: any, query?: string, limit?: number, offset?: number, sorting?: any) => {\n\n    let uri_obj: any = {};\n    let uri_string: string = `icd10-synonyms/list`;\n    let filter = {};\n    if (filters && Array.isArray(filters) && filters.length > 0) {\n        filter['where'] = {};\n        filters.forEach(item => {\n            if (item['columnName'] !== 'status')\n                filter['where'][item['columnName']] = { like: item['value'], options: 'i' }\n            else\n                filter['where'][item['columnName']] = item['value']\n        });\n    }\n\n    if (sorting && Array.isArray(sorting) && sorting.length > 0)\n        filter['order'] = `${sorting[0]['columnName']} ${sorting[0]['direction']}`;\n\n    if (offset) filter['skip'] = offset;\n\n    if (limit) filter['limit'] = limit;\n\n    if (query) uri_obj['search'] = query;\n\n    if (Object.entries(filter).length > 0) uri_obj['filter'] = JSON.stringify(filter);\n\n    let i = 0;\n    for (let key of Object.keys(uri_obj)) {\n        if (!i) uri_string += '?';\n        else uri_string += '&';\n        uri_string += `${key}=${uri_obj[key]}`;\n        i += 1;\n    }\n\n    let option: requestOption = {\n        method: 'GET'\n    }\n\n    if (fetch.getAccessToken()) {\n        return fetch.call(option, uri_string, true);\n    }\n    return fetch.fetchAccessToken().then(() => fetch.call(option, uri_string, true))\n}\n\n\nexport const getActiveSynonyms = (\n    filters?: any,\n    query?: string,\n    limit?: number,\n    offset?: number,\n    sorting?: any\n) => {\n    let filter: any = {\n        limit: limit,\n        skip: offset,\n        where: filters\n    }\n\n    let search_str = '';\n    if (query) search_str = '&search=' + query;\n\n\n    if (sorting) {\n        filter['order'] = sorting;\n    }\n\n    let option: requestOption = {\n        method: 'GET'\n    }\n\n    return fetch.fetchAccessToken().then(() => fetch.call(option, `icd10-synonyms/search?filter=${JSON.stringify(filter)}${search_str}`, true))\n}\n\n\nexport const addSynonyms = (payload: any) => {\n\n    console.log('payload', payload);\n\n    let option: requestOption = {\n        method: 'POST',\n        body: payload\n    }\n\n    return fetch.fetchAccessToken().then(() => fetch.call(option, `icd10-synonyms/create`, true))\n}\n\n\nexport const getAllSynonyms = (\n    filters?: any,\n) => {\n    let filter: any = {\n        where: filters\n    }\n\n    let option: requestOption = {\n        method: 'GET'\n    }\n\n    return fetch.fetchAccessToken().then(() => fetch.call(option, `icd10-synonyms/list?filter=${JSON.stringify(filter)}&tabCount=true`, true))\n}\n\nexport const patchSynonyms = (payload: any) => {\n\n    // console.log('payload', payload);\n\n    let option: requestOption = {\n        method: 'PATCH',\n        body: payload\n    }\n\n    return fetch.fetchAccessToken().then(() => fetch.call(option, `icd10-synonyms/edit`, true))\n}","import React, { FC } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport clsx from 'clsx';\n\nimport { IConfirmationModal } from './IConfirmationModal';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n\tdialog: {},\n\tdialogAction: {\n\t\tmarginBottom: theme.spacing(2),\n\t},\n}));\n\nexport const ConfirmationModal: FC<IConfirmationModal.IProps> = props => {\n\tconst classes = useStyles();\n\tconst reset = () => {};\n\n\tconst handleCancel = () => {\n\t\treset();\n\t\tprops.onClose(true);\n\t}\n\n\tconst handleClose = () => {\n\t\treset();\n\t\tprops.onClose();\n\t};\n\n\tconst handleSubmit = () => {\n\t\treset();\n\t\tprops.onSubmit();\n\t\tprops.onClose();\n\t};\n\n\treturn (\n\t\t<Dialog\n\t\t\topen={props.isModalOpen}\n\t\t\tonClose={handleClose}\n\t\t\taria-labelledby=\"form-dialog-title\"\n\t\t\tmaxWidth=\"sm\"\n\t\t\tclassName={classes.dialog}\n\t\t>\n\t\t\t<DialogTitle id=\"form-dialog-title\">{props.title}</DialogTitle>\n\t\t\t<DialogContent>\n\t\t\t\t<Grid container spacing={2} justify=\"space-between\" alignItems=\"flex-start\">\n\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t{props.message}\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</DialogContent>\n\t\t\t<DialogActions className={clsx(classes.dialogAction)}>\n\t\t\t\t<Grid container spacing={2} justify=\"center\" alignItems=\"flex-start\">\n\t\t\t\t\t<Grid item xs={4}>\n\t\t\t\t\t\t<Button onClick={handleCancel} variant=\"outlined\" color=\"default\" fullWidth>\n\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Grid>\n\t\t\t\t\t<Grid item xs={4}>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tonClick={handleSubmit}\n\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{props.submitType === 'submit' ? 'Submit' : 'Confirm'}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</DialogActions>\n\t\t</Dialog>\n\t);\n};\n\nConfirmationModal.defaultProps = {\n\tisModalOpen: false,\n};\n\nexport default ConfirmationModal;","import { Icd10, Cpt, Icd10Synonym, DoctorSpecialization } from '../LookupModels';\nimport moment from 'moment';\n\nexport const constructIcd10 = (data: Icd10) => {\n\n\tlet status = 'Awaiting Activation';\n\tconst today = new Date()\n\tconst eff_date = data['effectivity_date'] ?\n\t\tnew Date(new Date(data['effectivity_date']).setHours(0, 0, 0, 0)) :\n\t\tundefined\n\tconst exp_date = data['expiry_date'] ?\n\t\tnew Date(new Date(data['expiry_date']).setHours(0, 0, 0, 0)) :\n\t\tundefined\n\n\tconsole.log('DATES : ', today, eff_date, exp_date);\n\tif (exp_date && eff_date)\n\t\tconsole.log('BOOLS', eff_date <= today, exp_date <= today);\n\n\tif (eff_date && moment(eff_date).isValid() && eff_date <= today)\n\t\tstatus = 'Active';\n\n\tif (exp_date && moment(exp_date).isValid() && exp_date <= today)\n\t\tstatus = 'Deactivated';\n\n\tconst gender_limited = data['gender'] ? true : undefined;\n\tconst gender = data['gender'] ? data['gender'] : undefined;\n\n\tconst payload: Icd10 = {\n\t\t_id: data['_id'],\n\t\tcategory_code: data['category_code'],\n\t\tdiagnosis_code: data['diagnosis_code'] ? data['diagnosis_code'].toString() : undefined,\n\t\tfull_code: data['full_code'],\n\t\tabbreviated_description: data['abbreviated_description'],\n\t\tfull_description: data['full_description'],\n\t\tcategory_title: data['category_title'],\n\t\tmain_category: data['main_category'],\n\t\tgender_limited: gender_limited,\n\t\tgender: gender,\n\t\teffectivity_date: data['effectivity_date'],\n\t\texpiry_date: data['expiry_date'],\n\t\tstatus: status,\n\t\tdate_updated: data['date_updated'],\n\t}\n\n\treturn payload\n}\n\nexport const constructCpt = (data: Cpt) => {\n\n\tlet status = 'Awaiting Activation';\n\tconst today = new Date()\n\tconst eff_date = data['effectivity_date'] ?\n\t\tnew Date(new Date(data['effectivity_date']).setHours(0, 0, 0, 0)) :\n\t\tundefined\n\tconst exp_date = data['expiry_date'] ?\n\t\tnew Date(new Date(data['expiry_date']).setHours(0, 0, 0, 0)) :\n\t\tundefined\n\n\tconsole.log('DATES : ', today, eff_date, exp_date);\n\tif (exp_date && eff_date)\n\t\tconsole.log('BOOLS', eff_date <= today, exp_date <= today);\n\n\tif (eff_date && moment(eff_date).isValid() && eff_date <= today)\n\t\tstatus = 'Active';\n\n\tif (exp_date && moment(exp_date).isValid() && exp_date <= today)\n\t\tstatus = 'Deactivated';\n\n\n\tconst gender_limited = data['gender'] ? true : undefined;\n\tconst gender = data['gender'] ? data['gender'] : undefined;\n\n\tconst payload: Cpt = {\n\t\t_id: data['_id'],\n\t\tcode: data['code'],\n\t\tdescription: data['description'],\n\t\tcategory: data['category'],\n\t\tgender_limited: gender_limited,\n\t\tgender: gender,\n\t\teffectivity_date: data['effectivity_date'],\n\t\texpiry_date: data['expiry_date'],\n\t\tstatus: status,\n\t\tdate_updated: data['date_updated'],\n\t}\n\n\treturn payload\n}\n\nexport const reconstructIcd10 = (data: Icd10 | undefined) => {\n\tif (!data)\n\t\treturn constructEmptyIcd10();\n\tconst reform_data: Icd10 = {\n\t\t_id: data._id,\n\t\tcategory_code: data['category_code'],\n\t\tdiagnosis_code: data['diagnosis_code'] ? data['diagnosis_code'].toString() : undefined,\n\t\tfull_code: data.full_code,\n\t\tabbreviated_description: data.abbreviated_description,\n\t\tfull_description: data.full_description,\n\t\tcategory_title: data.category_title,\n\t\tmain_category: data.main_category,\n\t\teffectivity_date: data.effectivity_date,\n\t\texpiry_date: data.expiry_date,\n\t\tstatus: data.status,\n\t\tgender_limited: Boolean(data.gender_limited),\n\t\tgender: data.gender_limited ? data.gender : '',\n\t\tdate_updated: data['date_updated'],\n\t}\n\treturn reform_data\n}\n\nexport const reconstructCpt = (data: Cpt | undefined) => {\n\tif (!data)\n\t\treturn constructEmptyCpt();\n\tconst reform_data: Cpt = {\n\t\t_id: data._id,\n\t\tcode: data.code,\n\t\tdescription: data.description,\n\t\tcategory: data.category,\n\t\teffectivity_date: data.effectivity_date,\n\t\texpiry_date: data.expiry_date,\n\t\tstatus: data.status,\n\t\tgender_limited: Boolean(data.gender_limited),\n\t\tgender: data.gender_limited ? data.gender : '',\n\t}\n\treturn reform_data\n}\n\nexport const constructEmptyIcd10 = () => {\n\tconst payload: Icd10 = {\n\t\tfull_code: '',\n\t\tfull_description: '',\n\t\tcategory_title: '',\n\t\tmain_category: '',\n\t\teffectivity_date: '',\n\t\texpiry_date: '',\n\t\tstatus: '',\n\t\tgender_limited: false,\n\t\tgender: '',\n\t}\n\treturn payload\n}\n\nexport const constructEmptyCpt = () => {\n\tconst payload: Cpt = {\n\t\tcode: '',\n\t\tdescription: '',\n\t\tcategory: '',\n\t\teffectivity_date: '',\n\t\texpiry_date: '',\n\t\tstatus: '',\n\t\tgender_limited: false,\n\t\tgender: '',\n\t}\n\treturn payload\n}\n\nexport const constructPutIcd10 = (data: Icd10) => {\n\tconst payload: Icd10 = Object.assign({}, data)\n\n\tpayload['gender'] = payload['gender_limited'] ? payload['gender'] : '';\n\n\tif (payload['status'] !== undefined) {\n\t\tdelete payload['status']\n\t}\n\tif (payload['expiry_date'] === '') {\n\t\tdelete payload['expiry_date']\n\t}\n\treturn payload\n}\n\nexport const constructPutCpt = (data: Cpt) => {\n\tconst payload: Cpt = Object.assign({}, data)\n\n\tpayload['gender'] = payload['gender_limited'] ? payload['gender'] : '';\n\n\tif (payload['status'] !== undefined) {\n\t\tdelete payload['status']\n\t}\n\tif (payload['expiry_date'] === '') {\n\t\tdelete payload['expiry_date']\n\t}\n\treturn payload\n}\n\nexport const constructPostIcd10 = (data: any) => {\n\tlet data_arr: Icd10[] = [];\n\tif (Array.isArray(data)) {\n\t\tdata_arr = data\n\t} else {\n\t\tdata_arr.push(data)\n\t}\n\tconst payload: Icd10[] = data_arr.map(item => {\n\t\tif (item['expiry_date'] === '') {\n\t\t\tdelete item['expiry_date'];\n\t\t}\n\t\tif (item['status'] !== undefined) {\n\t\t\tdelete item['status']\n\t\t}\n\t\titem['gender'] = item['gender_limited'] ? item['gender'] : '';\n\t\treturn item;\n\t})\n\treturn payload\n}\n\nexport const constructPostCpt = (data: any) => {\n\tlet data_arr: Cpt[] = [];\n\tif (Array.isArray(data)) {\n\t\tdata_arr = data\n\t} else {\n\t\tdata_arr.push(data)\n\t}\n\tconst payload: Cpt[] = data_arr.map(item => {\n\t\tif (item['expiry_date'] === '') {\n\t\t\tdelete item['expiry_date'];\n\t\t}\n\t\tif (item['status'] !== undefined) {\n\t\t\tdelete item['status']\n\t\t}\n\t\titem['gender'] = item['gender_limited'] ? item['gender'] : '';\n\t\treturn item;\n\t})\n\treturn payload\n}\n\nexport const constructAddSynonymPayload = (full_code: string, title: string, diagnosis_code: string) => {\n\tconst synonym = { full_code: full_code, synonyms: [title], diagnosis_code: diagnosis_code }\n\treturn { approve: [synonym] }\n}\n\nexport const constructUnapprovedSynonymPayload = (synonyms: Icd10Synonym[]) => {\n\n\tconst all_approved: Icd10Synonym[] = synonyms.filter(synonym => synonym.action_chosen === 'approve');\n\tlet icd_append: any[] = [];\n\n\n\tconst patch_synonyms: Icd10Synonym[] = synonyms.filter(synonym =>\n\t\tsynonym.action_chosen === 'approve' || synonym.action_chosen === 'disapprove'\n\t).map(synonym => {\n\t\tconst status: string = synonym.action_chosen === 'approve' ? 'active' : synonym.action_chosen === 'disapprove' ? 'inactive' : '';\n\t\tdelete synonym['action_chosen'];\n\t\tsynonym.status = status;\n\t\treturn synonym;\n\t});\n\n\n\n\tall_approved.forEach(synonym => {\n\t\tlet synonyms: string[] = [];\n\t\tif (icd_append.some(item => item.full_code === synonym.full_code)) {\n\t\t\tsynonyms = icd_append.filter(item => item.full_code === synonym.full_code)[0]['synonyms'];\n\t\t\ticd_append = icd_append.filter(item => item.full_code !== synonym.full_code);\n\t\t}\n\n\t\tconst synonym_lowercase: string = synonym.title.toLowerCase();\n\t\tif (!synonyms.includes(synonym_lowercase)) synonyms.push(synonym_lowercase);\n\n\t\ticd_append.push({\n\t\t\tfull_code: synonym.full_code,\n\t\t\tsynonyms: synonyms\n\t\t});\n\t});\n\n\tconsole.log('PATCH SYNONYMS', patch_synonyms, 'ICD APPEND', icd_append);\n\treturn { patch_synonyms: patch_synonyms, icd_append_synonyms: icd_append }\n\n}\n\n\nexport const constructDeactivateSynonymPayload = (synonyms: Icd10Synonym[]) => {\n\n\tconst for_deactivate: Icd10Synonym[] = synonyms.filter(synonym => synonym.action_chosen);\n\tlet icd_discard: any[] = [];\n\n\n\tconst patch_synonyms: Icd10Synonym[] = synonyms.filter(synonym =>\n\t\tsynonym.action_chosen\n\t).map(synonym => {\n\t\tconst status: string = 'inactive'\n\t\tdelete synonym['action_chosen'];\n\t\tsynonym.status = status;\n\t\treturn synonym;\n\t});\n\n\n\n\tfor_deactivate.forEach(synonym => {\n\t\tlet synonyms: string[] = [];\n\t\tif (icd_discard.some(item => item.full_code === synonym.full_code)) {\n\t\t\tsynonyms = icd_discard.filter(item => item.full_code === synonym.full_code)[0]['synonyms'];\n\t\t\ticd_discard = icd_discard.filter(item => item.full_code !== synonym.full_code);\n\t\t}\n\n\t\tconst synonym_lowercase: string = synonym.title.toLowerCase();\n\t\tif (!synonyms.includes(synonym_lowercase)) synonyms.push(synonym_lowercase);\n\n\t\ticd_discard.push({\n\t\t\tfull_code: synonym.full_code,\n\t\t\tsynonyms: synonyms\n\t\t});\n\t});\n\n\tconsole.log('PATCH SYNONYMS', patch_synonyms, 'ICD DISCARD', icd_discard);\n\treturn { patch_synonyms: patch_synonyms, icd_discard_synonyms: icd_discard }\n\n}\n\n\nexport const constructActivateSynonymPayload = (synonyms: Icd10Synonym[]) => {\n\n\tconst for_deactivate: Icd10Synonym[] = synonyms.filter(synonym => synonym.action_chosen);\n\tlet icd_append: any[] = [];\n\n\n\tconst patch_synonyms: Icd10Synonym[] = synonyms.filter(synonym =>\n\t\tsynonym.action_chosen\n\t).map(synonym => {\n\t\tconst status: string = 'active'\n\t\tdelete synonym['action_chosen'];\n\t\tsynonym.status = status;\n\t\treturn synonym;\n\t});\n\n\n\n\tfor_deactivate.forEach(synonym => {\n\t\tlet synonyms: string[] = [];\n\t\tif (icd_append.some(item => item.full_code === synonym.full_code)) {\n\t\t\tsynonyms = icd_append.filter(item => item.full_code === synonym.full_code)[0]['synonyms'];\n\t\t\ticd_append = icd_append.filter(item => item.full_code !== synonym.full_code);\n\t\t}\n\n\t\tconst synonym_lowercase: string = synonym.title.toLowerCase();\n\t\tif (!synonyms.includes(synonym_lowercase)) synonyms.push(synonym_lowercase);\n\n\t\ticd_append.push({\n\t\t\tfull_code: synonym.full_code,\n\t\t\tsynonyms: synonyms\n\t\t});\n\t});\n\n\tconsole.log('PATCH SYNONYMS', patch_synonyms, 'ICD APPEND', icd_append);\n\treturn { patch_synonyms: patch_synonyms, icd_append_synonyms: icd_append }\n\n}\n\nexport const constructEmptyDoctorSpecialization = () => {\n\tconst payload: DoctorSpecialization = {\n\t\t_id: '',\n\t\tcode: '',\n\t\tdescription: '',\n\t\teffectivity_date: '',\n\t\texpiry_date: '',\n\t\tstatus: '',\n\t}\n\treturn payload\n}\n\nexport const constructDoctorSpecialization = (data: DoctorSpecialization) => {\n\n\tif(!data || !data._id || !data.code || !data.description || !data.status || !data.effectivity_date) return constructEmptyDoctorSpecialization();\n\n\tObject.keys(data).forEach(key => {\n\t\tif(!data[key] || data[key] === 'N/A') data[key] = '';\n\t});\n\n\treturn data;\n}\n\nexport const constructPutDoctorSpecialization = (data: DoctorSpecialization) => {\n\tconst payload: DoctorSpecialization = Object.assign({}, data)\n\n\tif(data && data._id && data.code && data.description && data.effectivity_date && data.status) {\n\t\treturn payload;\n\t}else{\n\t\treturn constructEmptyDoctorSpecialization();\n\t}\n\t\n}","import React from 'react';\nimport { TableComponent } from 'Components/UI/TableComponent/CodeListTable';\nimport {\n  TextField,\n  InputAdornment,\n  Grid,\n  List,\n  ListItemText,\n} from '@material-ui/core';\nimport { Search } from '@material-ui/icons/';\nimport { Loader } from '../Loader';\nimport Link from '@material-ui/core/Link';\nimport { GridHorizontalDivider } from 'Components/UI';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { SideModalBlock } from 'Components/UI';\nimport { SideModalBody } from 'Components/UI';\nimport { SIDE_MODAL_BLOCK_FIELDS } from 'Components/UI/SideModalBlock/FieldConstants';\nimport { MsgModal } from 'Components/UI';\nimport moment from 'moment';\nimport {\n  getICD,\n  searchICD,\n  addICD10Codes,\n  editICD,\n} from 'Pages/API/Calls/ICD10'\nimport { ConfirmationModal } from '../ConfirmationModal'\nimport { Utils } from '@hims/core'\nimport { Icd10 } from '../../LookupModels'\nimport {\n  constructIcd10,\n  constructEmptyIcd10,\n  constructPutIcd10,\n  constructPostIcd10,\n  reconstructIcd10\n} from '../ConstructPayloads';\nimport { cloneDeep } from 'lodash';\n\n\nconst helper = new Utils.IndexedDBHelper();\n\ninterface IState {\n  confirm_modal_title: string;\n  confirm_modal_message: string;\n  confirm_modal_open: boolean;\n  action_after_confirm: () => void;\n  invalid_fields: string[];\n  loading_state: boolean;\n  block_title?: string;\n  show_side_modal_block?: string;\n  side_modal_block_mode: 'view' | 'edit' | 'add' | '';\n  code_info?: Icd10;\n  code_response: any;\n  code_data_all: any;\n  code_data: any;\n  global_filter: string;\n  default_filters: any;\n  default_sorting: any;\n  default_clicked: string;\n  isModalOpen: boolean;\n  modalTitle: string;\n  modalMessage: any;\n  action_after_info: () => void;\n  totalCount: number;\n  typing: boolean;\n  typingTimeout: any;\n  page: number;\n  limit: number;\n  isPageSizeModal: boolean;\n  highlightedCodeFromList: number;\n\n  icd_categories: string[];\n  no_data_message: string;\n  icd_category_dropdown_choices: any[];\n  disableSaveButton: boolean;\n  clickSaveButton: boolean;\n}\n\ninterface IProps {\n  classes: any;\n\n\n  icdCategories: string[];\n  icdCategoryDropdown: any;\n\n\n  setICDCategories: (categories: string[]) => void;\n  setICDCategoryDropdown: (dropdown: any) => void;\n}\n\nexport class ICD10Section extends React.Component<IProps, IState> {\n  private requiredFields: any;\n  private excludeFields: any;\n\n  constructor(props) {\n    super(props);\n\n    this.requiredFields = SIDE_MODAL_BLOCK_FIELDS.ICD10.editOrAdd.checkInvalidFields;\n    this.excludeFields = SIDE_MODAL_BLOCK_FIELDS.ICD10.editOrAdd.excludeFields\n\n    const table: any = {\n      formattedColumns: {},\n      columnExtensions: [\n        {\n          columnName: 'full_code',\n          width: 150,\n          wordWrapEnabled: true,\n        },\n        {\n          columnName: 'full_description',\n          width: 500,\n          wordWrapEnabled: true,\n        },\n      ],\n      columns: [\n        {\n          name: 'full_code',\n          title: 'ICD10 Code',\n        },\n        {\n          name: 'full_description',\n          title: 'Description',\n        },\n      ],\n      rows: [],\n    };\n\n\n    this.state = {\n      icd_category_dropdown_choices: props.icdCategoryDropdown,\n      icd_categories: props.icdCategories,\n      no_data_message: '',\n      confirm_modal_title: '',\n      confirm_modal_message: '',\n      confirm_modal_open: false,\n      action_after_confirm: () => { },\n      invalid_fields: [],\n      highlightedCodeFromList: -1,\n      loading_state: true,\n      code_response: [],\n      code_info: constructEmptyIcd10(),\n      show_side_modal_block: 'none',\n      side_modal_block_mode: '',\n      code_data: table,\n      code_data_all: table,\n      block_title: '',\n      global_filter: '',\n      default_filters: [],\n      default_sorting: [{\n        columnName: 'full_code',\n        direction: 'asc'\n      }\n      ],\n      default_clicked: '',\n      isModalOpen: false,\n      isPageSizeModal: false,\n      modalTitle: '',\n      modalMessage: '',\n      action_after_info: () => { },\n      totalCount: 0,\n      typing: false,\n      typingTimeout: 0,\n      page: 0,\n      limit: 10,\n      disableSaveButton: false,\n      clickSaveButton: false,\n    };\n  }\n\n  componentDidMount() {\n    if (!this.state.icd_category_dropdown_choices || !this.state.icd_categories.length) {\n      this.fetchICDCategoriesIndexdb()\n        .then(() => this.initialData())\n        .catch(() => this.initialData())\n    } else {\n      this.initialData()\n    }\n\n    document.addEventListener('keydown', this.escFunction, false);\n  }\n\n  escFunction = (event) => {\n    if (event.keyCode === 27) {\n      this.handleCloseSideModalBlock()\n    }\n  }\n\n  initialData = () => {\n    this.setState({ no_data_message: `Searching for ICD10 codes` })\n    this.searchCode(\n      10,\n      0,\n      this.state.default_filters,\n      this.state.global_filter,\n      this.state.default_sorting,\n      this.state.default_clicked)\n  };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  /***********************  \n       CRUD FUNCTIONS \n  ***********************/\n\n  addCodeIndexdb = (data: any[]) => {\n    helper.openDb('himsDb').then(res => {\n      let db = res.result\n      try {\n        helper.saveToStore(db, 'icd10_list', data)\n          .then(res => console.log('RES', res))\n          .catch(e => console.log(e))\n      } catch (e) {\n        console.log(e)\n      } finally { }\n    })\n  }\n\n  patchCodeIndexdb = (data: any) => {\n    helper.openDb('himsDb').then(res => {\n      let db = res.result\n      try {\n        helper.updateEntryByKey(db, 'icd10_list', data['_id'], data)\n          .then(res => console.log('Successfully patched code in IndexDB', res))\n          .catch(e => console.log(e))\n      } catch (e) {\n        console.log(e)\n      } finally { }\n    })\n  }\n\n\n  fetchICDCategoriesIndexdb = async () => {\n    await Utils.StorageService('icd10_list')\n      .then(icds => {\n        if (Array.isArray(icds) && icds.length > 0) {\n          let category_arr: string[] = []\n          let category_dropdown_choices_arr: any[] = [{ name: '', value: '' }]\n          icds.filter(item => {\n            if (item && item.main_category && !category_arr.includes(item.main_category)) {\n              category_arr.push(item.main_category)\n              category_dropdown_choices_arr.push({ name: item.main_category, value: item.main_category })\n              return true;\n            }\n            return false;\n          })\n          this.props.setICDCategories(category_arr)\n          this.props.setICDCategoryDropdown(category_dropdown_choices_arr)\n          this.setState({\n            icd_categories: category_arr,\n            icd_category_dropdown_choices: category_dropdown_choices_arr\n          })\n        }\n      })\n      .catch(err => console.log(err));\n  }\n\n  searchCode = (\n    limit: number,\n    skip: number,\n    filters: any,\n    filters_global: any,\n    sorting: any,\n    clicked: any) => {\n\n    searchICD(limit, skip, filters, filters_global, sorting, clicked).then(response => {\n      this.setState({ no_data_message: 'No available data' })\n      if (response && response.error === undefined) {\n        const table = this.generateDataForTable(\n          response.result ? response.result : [],\n        );\n        this.setState({\n          code_response: response,\n          code_data_all: table,\n          code_data: table,\n          loading_state: false,\n          totalCount: response.total && response.total.count ? response.total.count : 0,\n        });\n      } else if (response && response.error && response.error.statusCode === 401) {\n        const table = this.generateDataForTable([]);\n        this.setState({\n          code_response: [],\n          code_data_all: table,\n          loading_state: false,\n          isModalOpen: true,\n          modalTitle: 'Unauthorized',\n          modalMessage: 'You are not authorized to view ICD10 codes.',\n        });\n      } else {\n        const table = this.generateDataForTable([]);\n        this.setState({\n          code_response: [],\n          code_data_all: table,\n          loading_state: false,\n          isModalOpen: true,\n          modalTitle: 'Loading failed',\n          modalMessage: 'An error occured while loading the list of codes.',\n        });\n      }\n    }).catch(() => {\n      const table = this.generateDataForTable([]);\n      this.setState({\n        code_response: [],\n        code_data_all: table,\n        loading_state: false,\n        isModalOpen: true,\n        modalTitle: 'Loading failed',\n        modalMessage: 'An error occured while loading the list of codes.',\n        page: 0,\n      });\n    });\n  }\n\n\n  patchCode = (data: any) => {\n    const payload: Icd10 = constructPutIcd10(data)\n\n    const full_code: string = payload.full_code;\n\n    this.setState({\n      loading_state: true,\n      no_data_message: `Searching for ICD10 codes`\n    })\n    editICD(JSON.stringify(payload), payload._id).then(response => {\n      this.setState({\n        loading_state: false,\n        no_data_message: 'No available data'\n      })\n      if (response && response.error === undefined && response.message !== undefined) {\n        this.changePageUpdate(this.state.limit, this.state.limit * this.state.page)\n        this.patchCodeIndexdb(payload)\n        this.setState({\n          disableSaveButton: true,\n          isModalOpen: true,\n          modalTitle: 'Success',\n          modalMessage: `You have ${response.message} code!`\n        });\n      } else if (response && response.error && response.error.statusCode === 401) {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'Unauthorized',\n          modalMessage: 'You are not authorized to edit ICD10 codes.'\n        });\n      } else if (response && response.error && response.error.statusCode === 400 && response.error.message) {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'ICD10 Code Already Exists',\n          modalMessage: (<span><strong>[{full_code}]</strong> cannot be added. This already exists on the list.</span>)\n        });\n      } else {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'Failed',\n          modalMessage: 'Something went wrong while saving!'\n        });\n      }\n    }).catch(error => {\n      if (error == 'Error: This code already exists.') {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'ICD10 Code Already Exists',\n          modalMessage: (<span><strong>[{full_code}]</strong> cannot be added. This already exists on the list.</span>),\n          loading_state: false\n        });\n      } else {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'Failed',\n          modalMessage: 'Something went wrong while saving!',\n          loading_state: false\n        });\n      }\n    });\n  }\n\n\n\n  addCodes = (data: any) => {\n    this.setState({\n      loading_state: true\n    })\n\n    const payload: Icd10[] = constructPostIcd10(data)\n    let full_code: string = '';\n    if(payload && payload.length > 0) full_code = payload[0].full_code;\n    addICD10Codes(JSON.stringify(payload)).then(response => {\n      this.setState({\n        loading_state: false\n      })\n      if (response && response.error === undefined && response.message && response.result) {\n        this.changePageUpdate(this.state.limit, this.state.limit * this.state.page)\n        this.addCodeIndexdb(response.result)\n        this.setState({\n          disableSaveButton: true,\n          isModalOpen: true,\n          modalTitle: 'Success',\n          modalMessage: `You have successfully added ${response.result.length} ICD10 code/s!`\n        });\n      } else if (response && response.error && response.error.statusCode === 401) {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'Unauthorized',\n          modalMessage: 'You are not authorized to add ICD10 codes.'\n        });\n      } else if (response && response.error && response.error.statusCode === 400 && response.error.message) {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'ICD10 Code Already Exists',\n          modalMessage: (<span><strong>[{full_code}]</strong> cannot be added. This already exists on the list.</span>),\n        });\n      }\n      else {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'Failed',\n          modalMessage: 'Something went wrong while adding!'\n        });\n      }\n    }).catch(error => {\n      if (error == 'Error: This code already exists.') {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'ICD10 Code Already Exists',\n          modalMessage: (<span><strong>[{full_code}]</strong> cannot be added. This already exists on the list.</span>),\n          loading_state: false\n        });\n      } else {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'Failed',\n          modalMessage: 'Something went wrong while saving!',\n          loading_state: false\n        });\n      }\n    });\n\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  /***********************  \n  TABLE AND PAGE FUNCTIONS \n  ***********************/\n\n  generateDataForTable(response: any) {\n    const table: any = {\n      formattedColumns: {},\n      columnExtensions: [\n        {\n          columnName: 'full_code',\n          width: 150,\n          wordWrapEnabled: true,\n        },\n        {\n          columnName: 'full_description',\n          width: 500,\n          wordWrapEnabled: true,\n        },\n      ],\n      columns: [\n        {\n          name: 'full_code',\n          title: 'ICD10 Code',\n        },\n        {\n          name: 'full_description',\n          title: 'Description',\n        },\n      ],\n      rows: [],\n    };\n    for (const cnt in response) {\n      const item = response[cnt];\n      const temp_row: any = {};\n      temp_row['full_code'] = item['full_code'];\n      temp_row['full_description'] = item['full_description'];\n      table['rows'].push(temp_row);\n    }\n    return table;\n  }\n\n\n\n\n\n\n\n  changePageUpdate = (limit: number, skip: number) => {\n    this.handleCloseSideModalBlock();\n    this.setState({\n      loading_state: true,\n      no_data_message: `Searching for ICD10 codes`\n    });\n    if (\n      this.state.default_filters.length !== 0 ||\n      this.state.global_filter !== '' ||\n      this.state.default_sorting.length !== 0 ||\n      this.state.default_clicked !== ''\n    ) {\n      this.searchCode(\n        limit,\n        skip,\n        this.state.default_filters,\n        this.state.global_filter,\n        this.state.default_sorting,\n        this.state.default_clicked)\n    } else {\n      getICD(limit, skip).then(response => {\n        this.setState({ no_data_message: 'No available data' })\n        if (response && response.error === undefined) {\n          const table = this.generateDataForTable(\n            response.result ? response.result : [],\n          );\n          this.setState({\n            code_response: response,\n            code_data_all: table,\n            code_data: table,\n            loading_state: false,\n            totalCount: response.total && response.total.count ? response.total.count : 0,\n          });\n        } else if (response && response.error && response.error.statusCode === 401) {\n          const table = this.generateDataForTable([]);\n          this.setState({\n            code_response: [],\n            code_data_all: table,\n            loading_state: false,\n            isModalOpen: true,\n            modalTitle: 'Unauthorized',\n            modalMessage: 'You are not authorized to view ICD10 codes.',\n          });\n        } else {\n          const table = this.generateDataForTable([]);\n          this.setState({\n            code_response: [],\n            code_data_all: table,\n            loading_state: false,\n            isModalOpen: true,\n            modalTitle: 'Loading failed',\n            modalMessage: 'An error occured while loading the list of codes.',\n          });\n        }\n      });\n    }\n  };\n\n\n\n\n\n\n  handleChangeSorting = (sorting: any) => {\n    this.setState({\n      default_sorting: sorting,\n      loading_state: true,\n      no_data_message: `Searching for ICD10 codes`\n    });\n    if (sorting && sorting.length > 0) {\n      this.searchCode(\n        this.state.limit,\n        this.state.page * this.state.limit,\n        this.state.default_filters,\n        this.state.global_filter,\n        sorting,\n        this.state.default_clicked,\n      )\n    }\n  };\n\n\n\n\n\n  handleFilterByColumn = (filter: any) => {\n    const self = this;\n\n    if (self.state.typingTimeout) {\n      clearTimeout(self.state.typingTimeout);\n    }\n\n    self.setState({\n      default_filters: filter,\n      typing: false,\n      page: 0,\n      typingTimeout: setTimeout(function () {\n        self.setState({\n          loading_state: true,\n          no_data_message: `Searching for ICD10 codes`\n        });\n        if (self.state.default_filters !== 0) {\n          self.searchCode(\n            self.state.limit,\n            0,\n            filter,\n            self.state.global_filter,\n            self.state.default_sorting,\n            self.state.default_clicked,\n          )\n        } else {\n          self.initialData();\n        }\n      }, 2000),\n    });\n  };\n\n  handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n\n    const self = this;\n\n    if (self.state.typingTimeout) {\n      clearTimeout(self.state.typingTimeout);\n    }\n    self.setState({\n      global_filter: value,\n      typing: false,\n      page: 0,\n      typingTimeout: setTimeout(function () {\n        self.setState({\n          loading_state: true,\n          limit: 10,\n          no_data_message: `Searching for ICD10 codes`\n        });\n        if (self.state.global_filter !== '') {\n          self.searchCode(\n            self.state.limit,\n            0,\n            self.state.default_filters,\n            self.state.global_filter,\n            self.state.default_sorting,\n            self.state.default_clicked,\n          )\n        } else {\n          self.initialData();\n        }\n      }, 2000),\n    });\n  };\n\n\n\n\n\n  handleClickRow = (row: any) => {\n\n    const { code_response } = this.state;\n    if (!this.state.code_response || !this.state.code_response.result)\n      return;\n\n    const data: Icd10 = constructIcd10(code_response.result[row])\n    this.checkFields(data, true)\n    this.setState({\n      code_info: data,\n    }, () => this.handleChangeSideModalBlockMode('view'));\n  };\n\n\n\n\n\n  handlePageChange = (currentPage: number, skip: number) => {\n    this.setState({\n      page: currentPage,\n    });\n    this.changePageUpdate(this.state.limit, skip);\n  };\n\n\n\n\n  handlePageSizeChange = value => {\n    let pageLimit = 100000;\n\n    if (this.state.totalCount >= pageLimit) {\n      this.setState({\n        isPageSizeModal: true,\n      });\n    } else {\n      this.setState({\n        limit: value,\n      });\n\n      this.changePageUpdate(value, value * this.state.page);\n    }\n  };\n\n\n\n\n\n  handleClickItemFromList = (key: string) => {\n    this.setState({ default_clicked: key });\n    this.handleCloseSideModalBlock()\n    this.setState({\n      page: 0,\n      loading_state: true,\n      no_data_message: `Searching for ICD10 codes`\n    });\n    if (key !== undefined) {\n      this.searchCode(\n        this.state.limit,\n        0,\n        this.state.default_filters,\n        this.state.global_filter,\n        this.state.default_sorting,\n        key,\n      )\n    }\n  };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  /*****************************  \n  ACTIONS / SIDE MODAL FUNCTIONS \n  ******************************/\n\n  handleCloseSideModalBlock = () => {\n    this.setState({\n      show_side_modal_block: 'none',\n      side_modal_block_mode: '',\n      code_info: constructEmptyIcd10(),\n    });\n  };\n\n\n\n\n\n  handleChangeSideModalBlockMode = (value: 'view' | 'edit' | 'add' | '') => {\n    let title = ``;\n    if (value && value === 'edit') {\n      title = `Edit ${this.state.block_title}`;\n      const reform_data: Icd10 = reconstructIcd10(cloneDeep(this.state.code_info))\n      this.setState({ code_info: reform_data })\n    } else if (value && value === 'view' && this.state.code_info) {\n      title = this.state.code_info['full_code'] ? this.state.code_info['full_code'] : '';\n    } else if (value && value === 'add') {\n      title = `Add ICD10 Code`;\n    }\n    this.setState({\n      side_modal_block_mode: value,\n      block_title: title,\n    }, () => this.handleOpenBlock());\n  };\n\n\n\n\n\n  handleOpenBlock = () => {\n    this.setState({\n      show_side_modal_block: 'block',\n    }, () => this.passDataToSideModalBlockBody());\n  };\n\n\n\n\n  handleInvalidFieldsPrompt = () => {\n    this.setState({\n      isModalOpen: true,\n      modalTitle: 'Incomplete/Invalid Fields',\n      modalMessage: 'Please complete the form before proceeding.',\n    })\n  }\n\n\n\n  passDataToSideModalBlockBody = () => {\n\n    if (this.state.code_info && !this.state.code_info.gender_limited) {\n      this.state.code_info.gender = ''\n      this.setState({\n        code_info: this.state.code_info\n      });\n    }\n  };\n\n\n\n\n  checkFields = (formFields?: any, disableButton?: boolean) => {\n    this.setState({ loading_state: true })\n\n    if (formFields) {\n      let invalid_fields = this.getInvalidFields(formFields, disableButton);\n      if (!invalid_fields || invalid_fields.length === 0) {\n        if (this.state.disableSaveButton || !this.state.clickSaveButton) {\n          return\n        }\n        if (this.state.side_modal_block_mode === 'edit') {\n          this.setState({\n            clickSaveButton: false,\n            confirm_modal_message: `Are you sure you want to edit this ICD10 code?`,\n            confirm_modal_open: true,\n            confirm_modal_title: `Confirm edit ICD10 code`,\n            action_after_confirm: () => this.patchCode(formFields)\n          })\n        } else if (this.state.side_modal_block_mode === 'add') {\n          this.setState({\n            clickSaveButton: false,\n            confirm_modal_message: `Are you sure you want to add this ICD10 code?`,\n            confirm_modal_open: true,\n            confirm_modal_title: `Confirm add ICD10 code`,\n            action_after_confirm: () => this.addCodes(formFields)\n          })\n        }\n      } else {\n        this.handleInvalidFieldsPrompt()\n      }\n    }\n  }\n\n\n\n\n\n  getInvalidFields = (formFields: any, disableButton?: boolean) => {\n    let invalid_fields_submit: any[] = [];\n    let invalid_fields_editing: any[] = [];\n    let exclude_fields = {}\n    if (this.excludeFields !== undefined) {\n      exclude_fields = this.excludeFields\n    }\n    const fields_excluded: string[] = Object.keys(exclude_fields)\n    const form_keys: string[] = Object.keys(formFields)\n\n    form_keys.forEach(field => {\n      if (this.requiredFields &&\n        this.requiredFields.includes(field) &&\n        !fields_excluded.includes(field) &&\n        !formFields[field]) {\n        if (!disableButton) {\n          invalid_fields_submit.push(field)\n        } else {\n          invalid_fields_editing.push(field)\n        }\n      }\n    })\n\n    const eff_date = moment(formFields['effectivity_date'])\n    const exp_date = moment(formFields['expiry_date'])\n    if (formFields &&\n      formFields['effectivity_date'] &&\n      formFields['expiry_date'] &&\n      eff_date.isValid() &&\n      exp_date.isValid() &&\n      eff_date.startOf('day').diff(exp_date.startOf('day')) > 0) {\n      if (disableButton) {\n        invalid_fields_editing.push('effectivity_date')\n      } else {\n        invalid_fields_submit.push('effectivity_date')\n      }\n    }\n\n    if (formFields && formFields['gender_limited'] && !formFields['gender']) {\n      if (!disableButton) {\n        invalid_fields_submit.push('gender')\n      } else {\n        invalid_fields_editing.push('gender')\n      }\n    }\n    if (!invalid_fields_editing || invalid_fields_editing.length === 0) {\n      this.setState({ disableSaveButton: false })\n    } else if (!this.state.disableSaveButton) {\n      this.setState({ disableSaveButton: true })\n    }\n    this.setState({ loading_state: false, invalid_fields: invalid_fields_submit })\n    return invalid_fields_submit\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  /***********************  \n       RENDER SECTIONS \n  ***********************/\n\n  renderSideModalBlock(): JSX.Element {\n\n    return (\n      <SideModalBlock\n        blockPosition={'fixed'}\n        title={this.state.block_title}\n        editIconDescription={'Edit Code'}\n        showBlock={this.state.show_side_modal_block}\n        handleClose={this.handleCloseSideModalBlock}\n        sideModalBlockMode={this.state.side_modal_block_mode}\n        changeMode={this.handleChangeSideModalBlockMode}\n\n      >\n        {this.state.side_modal_block_mode ? (\n          <SideModalBody\n            formFields={this.state.code_info}\n            invalidFields={this.state.invalid_fields}\n            handleClose={this.handleCloseSideModalBlock}\n            refreshData={(data: any) => {\n              this.setState({ code_info: data },\n                () => this.checkFields(data, true))\n            }}\n            handleSave={(formFields?: any) => {\n              if (this.state.side_modal_block_mode) {\n                this.setState({ clickSaveButton: true }, () => this.checkFields(formFields))\n              }\n            }}\n            formName={'ICD10'}\n            mode={this.state.side_modal_block_mode ? this.state.side_modal_block_mode : ''}\n            checkBoxWithDropDownFieldsInitState={this.state.code_info && this.state.code_info['gender_limited'] ? true : false}\n            dynamicDropdownChoices={this.state.icd_category_dropdown_choices}\n            disableSaveButton={this.state.disableSaveButton}\n            datePairField1MaxDate={\n              this.state.code_info &&\n                this.state.code_info['expiry_date'] &&\n                moment(this.state.code_info['expiry_date']).isValid() ?\n                moment(this.state.code_info['expiry_date']).format('MM-DD-YY').toString() : undefined\n            }\n            datePairField2MinDate={\n              this.state.code_info &&\n                this.state.code_info['effectivity_date'] &&\n                moment(this.state.code_info['effectivity_date']).isValid() ?\n                moment(this.state.code_info['effectivity_date']).format('MM-DD-YY').toString() : undefined\n            }\n          />\n        ) : null}\n      </SideModalBlock>\n    )\n  }\n\n\n\n\n\n\n\n  renderCodeInfo(): JSX.Element {\n    const { classes } = this.props;\n\n    return (\n      <React.Fragment>\n        <li key={'year-of-release'} className={classes.codeHeader}>YEAR OF RELEASE</li>\n        <li key={'year-of-release-value'} className={classes.codeHeaderValue}>2020</li>\n        <ListItemText key={'effectivity-date'}>\n          <div className={classes.codeHeader}>EFFECTIVITY DATE</div>\n          <div className={classes.codeHeaderValue}>Jan 1, 2020</div>\n        </ListItemText>\n      </React.Fragment>\n    )\n  }\n\n\n\n\n\n  renderCodeList(key: string): JSX.Element {\n    const { classes } = this.props;\n\n    return (\n      <ListItemText\n        key={key}\n        classes={{\n          root: classes.codeListItemsRoot,\n          primary:\n            this.state.highlightedCodeFromList ===\n              this.state.icd_categories.indexOf(key)\n              ? classes.codeListItemsSelected\n              : classes.codeListItems,\n        }}\n        onClick={() => {\n          if (this.state.icd_categories.indexOf(key) !== this.state.highlightedCodeFromList) {\n            this.setState({\n              highlightedCodeFromList: this.state.icd_categories.indexOf(key),\n            });\n            this.handleClickItemFromList(key);\n          } else {\n            this.setState({\n              highlightedCodeFromList: -1,\n            });\n            this.handleClickItemFromList('');\n          }\n        }}\n      >\n        <br />\n        {key}\n      </ListItemText>\n    )\n\n  }\n\n\n\n\n  render(): JSX.Element {\n    const { classes } = this.props;\n    const categories = this.state.icd_categories\n\n    return (\n      <div>\n        {this.state.loading_state ? <Loader /> : null}\n        <Grid container>\n          <Grid container item xs={12} md={3}>\n            <Grid container className={classes.borderedGrid}>\n              <List>\n                {this.renderCodeInfo()}\n                {categories ? categories.map(key => this.renderCodeList(key)) : null}\n              </List>\n            </Grid>\n          </Grid>\n\n\n\n\n\n\n\n\n          <Grid container item xs={12} md={9} style={{ paddingLeft: '37px' }}>\n            <Grid container>\n              <Grid item xs={12} md={9}>\n                <TextField\n                  style={{ width: '100%', backgroundColor: 'white' }}\n                  id=\"code_search\"\n                  placeholder=\"Search a code or description\"\n                  label=\"\"\n                  margin=\"none\"\n                  fullWidth\n                  variant=\"outlined\"\n                  value={this.state.global_filter}\n                  inputProps={{ 'aria-label': 'bare' }}\n                  onChange={this.handleSearch}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <Search style={{ color: 'rgba(54, 54, 54, 0.4)' }} />\n                      </InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n\n\n\n\n\n\n              <Grid item xs={8} md={3} style={{ paddingRight: '15px', marginTop: 15, textAlign: 'center' }}>\n                <FontAwesomeIcon icon={faPlus} className={classes.plusIcon} />\n                <Link className={classes.addACode}\n                  onClick={() => {\n                    this.setState(\n                      {\n                        block_title: `Add ICD10 Code`,\n                        code_info: constructEmptyIcd10(),\n                        disableSaveButton: true\n                      }, () => this.handleChangeSideModalBlockMode('add'));\n                  }}>\n                  Add a Code\n                  </Link>\n              </Grid>\n\n\n\n\n\n              <GridHorizontalDivider height=\"30px\" />\n              <Grid style={{ minHeight: 690, overflow: 'auto' }}>\n                <TableComponent\n                  id=\"tab-all\"\n                  totalCount={this.state.totalCount}\n                  update={this.changePageUpdate}\n                  updateSorting={this.handleChangeSorting}\n                  rows={\n                    Object.keys(this.state.code_data).length > 0\n                      ? this.state.code_data['rows']\n                      : []\n                  }\n                  columns={\n                    Object.keys(this.state.code_data).length > 0\n                      ? this.state.code_data['columns']\n                      : []\n                  }\n                  message={\n                    this.state.global_filter\n                      ? 'No available data'\n                      : this.state.no_data_message\n                  }\n                  onClickRow={this.handleClickRow}\n                  disableSelect\n                  disableSearch\n                  formattedColumns={\n                    Object.keys(this.state.code_data).length > 0\n                      ? this.state.code_data['formattedColumns']\n                      : {}\n                  }\n                  columnExtensions={\n                    Object.keys(this.state.code_data).length > 0\n                      ? this.state.code_data['columnExtensions']\n                      : []\n                  }\n                  onFilterChange={this.handleFilterByColumn}\n                  onSortingChange={this.handleChangeSorting}\n                  onPageChange={this.handlePageChange}\n                  ongPageSizeChange={this.handlePageSizeChange}\n                  defaultFilter={this.state.default_filters}\n                  currentPage={this.state.page}\n                  limit={this.state.limit}\n                  pageSizes={[10, 25, 50, 100]}\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n\n\n        {this.renderSideModalBlock()}\n\n        <MsgModal\n          onClose={() => {\n            this.setState({\n              isModalOpen: false,\n            })\n          }}\n          title={this.state.modalTitle}\n          isModalOpen={this.state.isModalOpen}\n          message={this.state.modalMessage}\n        />\n        <ConfirmationModal\n          onClose={() => this.setState({ confirm_modal_open: false })}\n          title={this.state.confirm_modal_title}\n          isModalOpen={this.state.confirm_modal_open}\n          submitType={'confirm'}\n          onSubmit={() => {\n            if (this.state.action_after_confirm) {\n              this.state.action_after_confirm()\n            }\n          }}\n          message={this.state.confirm_modal_message} />\n      </div>\n    );\n  }\n}\n","import Fetch, { requestOption } from '../index'\n\nconst fetch = new Fetch();\nfetch.getAccessToken();\n\nexport const getCPT = (limit: number, skip: number) => {\n\n    let filters = {\n        limit: limit,\n        skip: skip,\n      };\n    let option: requestOption = {\n        method: 'GET'\n    }\n    if(fetch.getAccessToken()){\n        return fetch.call(option, `cpts/search?filter=${JSON.stringify(filters)}`, true)\n    }\n    return fetch.fetchAccessToken().then(()=> fetch.call(option, `cpts/search?filter=${JSON.stringify(filters)}`, true))\n}\n\nexport const searchCPT = (limit: number, offset: number, filters: any, query: string, sorting?: any, key?: string,) => {\n\n    let filter_key_str = '';\n    if (key !== undefined && key !== '' && key.length > 0) {\n        // console.log('KEY', key)\n        filter_key_str = '&filter[where][category]='+key\n\n    }\n    let sorting_str = '';\n    if (sorting && sorting.length !== 0) {\n      sorting_str =\n        '&filter[order]=' +\n        sorting[0]['columnName'] +\n        ' ' +\n        sorting[0]['direction'];\n    }\n    let filter_str = '';\n    if (filters) {\n      filters.forEach(filter => {\n        filter_str =\n          filter_str + '&' + filter['columnName'] + '=' + filter['value'];\n      });\n    }\n    let search = query ? '&search=' + query : '';\n    let CPT_URL =\n      `cpts/search?filter[limit]=${limit}&filter[skip]=${offset}` +\n      search +\n      filter_str +\n      sorting_str +\n      filter_key_str;\n    if (limit === 0)\n        CPT_URL =\n        `cpts/search?filter[skip]=${offset}` +\n        search +\n        filter_str +\n        sorting_str +\n        filter_key_str;\n\n    let option: requestOption = {\n        method: 'GET'\n    }\n \n    if(fetch.getAccessToken()){\n        return fetch.call(option, CPT_URL, true)\n    }\n    return fetch.fetchAccessToken().then(()=> fetch.call(option, CPT_URL, true))\n}\n\nexport const addCPTCodes = (payload: any) => {\n\n    let option: requestOption = {\n        method: 'POST',\n        body: payload\n    }\n\n    if(fetch.getAccessToken()){\n        return fetch.call(option, `cpts/multiple`, true)\n    }\n    return fetch.fetchAccessToken().then(()=> fetch.call(option, `cpts/multiple`, true))\n}\n\nexport const editCPT = (payload: any, id: string | undefined) => {\n\n    let option: requestOption = {\n        method: 'PUT',\n        body: payload\n    }\n\n    if(fetch.getAccessToken()){\n        return fetch.call(option, `cpts/edit/${id}`, true)\n    }\n    return fetch.fetchAccessToken().then(()=> fetch.call(option, `cpts/edit/${id}`, true))\n}\n\nexport const deleteCPT = (id: string) => {\n\n    let option: requestOption = {\n        method: 'DELETE'\n    }\n\n    if(fetch.getAccessToken()){\n        return fetch.call(option, `cpts/${id}`, true)\n    }\n    return fetch.fetchAccessToken().then(()=> fetch.call(option, `cpts/${id}`, true))\n}","import React from 'react';\nimport { TableComponent } from 'Components/UI/TableComponent/CodeListTable';\nimport {\n  TextField,\n  InputAdornment,\n  Grid,\n  List,\n  ListItemText,\n} from '@material-ui/core';\nimport { Search } from '@material-ui/icons/';\nimport { Loader } from '../Loader';\nimport Link from '@material-ui/core/Link';\nimport { GridHorizontalDivider } from 'Components/UI';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { SideModalBlock } from 'Components/UI';\nimport { SideModalBody } from 'Components/UI';\nimport { MsgModal } from 'Components/UI';\nimport { SIDE_MODAL_BLOCK_FIELDS } from 'Components/UI/SideModalBlock/FieldConstants';\nimport moment from 'moment';\nimport { ConfirmationModal } from '../ConfirmationModal'\nimport {\n  getCPT,\n  searchCPT,\n  addCPTCodes,\n  editCPT,\n  deleteCPT\n} from 'Pages/API/Calls/CPT'\nimport { cloneDeep } from 'lodash'\nimport { Utils } from '@hims/core'\nimport {\n  constructCpt,\n  constructEmptyCpt,\n  constructPutCpt,\n  constructPostCpt,\n  reconstructCpt\n} from '../ConstructPayloads'\nimport { Cpt } from '../../LookupModels';\nconst helper = new Utils.IndexedDBHelper();\n\ninterface IState {\n  confirm_modal_title: string;\n  confirm_modal_message: string;\n  confirm_modal_open: boolean;\n  action_after_confirm: () => void;\n  invalid_fields: string[];\n  loading_state: boolean;\n  block_title?: string;\n  show_side_modal_block?: string;\n  side_modal_block_mode: 'view' | 'edit' | 'add' | '';\n  code_info?: Cpt;\n  code_response: any;\n  code_data_all: any;\n  code_data: any;\n  global_filter: string;\n  default_filters: any;\n  default_sorting: any;\n  default_clicked: string;\n  isModalOpen: boolean;\n  modalTitle: string;\n  modalMessage: any;\n  totalCount: number;\n  typing: boolean;\n  typingTimeout: any;\n  page: number;\n  limit: number;\n  isPageSizeModal: boolean;\n  highlightedCodeFromList: number;\n  no_data_message: 'Searching for CPT codes' | 'No available data' | '';\n  cpt_categories: string[];\n  cpt_category_range: string[];\n  disableSaveButton: boolean;\n  clickSaveButton: boolean;\n  category_dropdown_choices: any[];\n}\n\ninterface IProps {\n  classes: any\n\n\n  cptCategories: string[];\n  cptCategoryRanges: string[];\n  cptCategoryDropdown: any;\n\n\n  setCPTCategories: (categories: string[]) => void;\n  setCPTCategoryRanges: (ranges: string[]) => void;\n  setCPTCategoryDropdown: (dropdown: any) => void;\n}\n\n\nexport class CPTSection extends React.Component<IProps, IState> {\n  private requiredFields: any;\n  private excludeFields: any;\n\n  constructor(props) {\n    super(props);\n\n    this.requiredFields = SIDE_MODAL_BLOCK_FIELDS.CPT.editOrAdd.checkInvalidFields;\n    this.excludeFields = SIDE_MODAL_BLOCK_FIELDS.CPT.editOrAdd.excludeFields\n\n    const table: any = {\n      formattedColumns: {},\n      columnExtensions: [\n        {\n          columnName: 'code',\n          width: 150,\n          wordWrapEnabled: true,\n        },\n        {\n          columnName: 'description',\n          width: 500,\n          wordWrapEnabled: true,\n        },\n      ],\n      columns: [\n        {\n          name: 'code',\n          title: 'CPT Code',\n        },\n        {\n          name: 'description',\n          title: 'Description',\n        },\n      ],\n      rows: [],\n    };\n\n    this.state = {\n      category_dropdown_choices: props.cptCategoryDropdown,\n      cpt_categories: props.cptCategories,\n      cpt_category_range: props.cptCategoryRanges,\n      no_data_message: '',\n      confirm_modal_title: '',\n      confirm_modal_message: '',\n      confirm_modal_open: false,\n      action_after_confirm: () => { },\n      invalid_fields: [],\n      highlightedCodeFromList: -1,\n      loading_state: true,\n      code_response: [],\n      code_info: constructEmptyCpt(),\n      show_side_modal_block: 'none',\n      side_modal_block_mode: '',\n      code_data: table,\n      code_data_all: table,\n      block_title: '',\n      global_filter: '',\n      default_filters: [],\n      default_sorting: [{\n        columnName: 'code',\n        direction: 'asc'\n      }],\n      default_clicked: '',\n      isModalOpen: false,\n      isPageSizeModal: false,\n      modalTitle: '',\n      modalMessage: '',\n      totalCount: 0,\n      typing: false,\n      typingTimeout: 0,\n      page: 0,\n      limit: 10,\n      disableSaveButton: false,\n      clickSaveButton: false,\n    };\n  }\n\n\n  componentDidMount() {\n    if (!this.state.category_dropdown_choices || !this.state.cpt_categories || !this.state.cpt_category_range) {\n      this.fetchCPTCategories()\n        .then(() => this.initialData())\n        .catch(() => this.initialData())\n    } else {\n      this.initialData()\n    }\n\n    document.addEventListener('keydown', this.escFunction, false);\n\n  }\n\n  escFunction = (event) => {\n    if (event.keyCode === 27) {\n      this.handleCloseSideModalBlock()\n    }\n  }\n\n\n  initialData = () => {\n    this.setState({ no_data_message: 'Searching for CPT codes' })\n    this.searchCode(\n      10,\n      0,\n      this.state.default_filters,\n      this.state.global_filter,\n      this.state.default_sorting,\n      this.state.default_clicked)\n  };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  /***********************  \n       CRUD FUNCTIONS \n  ***********************/\n\n  addCPTIndexDB = (data: any[]) => {\n    helper.openDb('himsDb').then(res => {\n      let db = res.result\n      try {\n        helper.saveToStore(db, 'cpt_list', data)\n          .then(res => console.log('RES', res))\n          .catch(e => console.log(e))\n      } catch (e) {\n        console.log(e)\n      } finally { }\n    })\n  }\n\n  patchCPTIndexDB = (data: any) => {\n    helper.openDb('himsDb').then(res => {\n      let db = res.result\n      try {\n        helper.updateEntryByKey(db, 'cpt_list', data['_id'], data)\n          .then(res => console.log('RES', res))\n          .catch(e => console.log(e))\n      } catch (e) {\n        console.log(e)\n      } finally { }\n    })\n  }\n\n  fetchCPTCategories = async () => {\n    this.setState({ loading_state: true })\n    await Utils.StorageService('cpt_list')\n      .then(cpts => {\n        if (Array.isArray(cpts) && cpts.length > 0) {\n          let category_arr: string[] = []\n          let category_ranges: string[] = []\n          let category_dropdown_choices_arr: any[] = [{ name: '', value: '' }]\n          cpts.filter(item => {\n            if (!category_arr.includes(item.category)) {\n              category_arr.push(item.category)\n              category_ranges.push(item.code)\n              category_dropdown_choices_arr.push({ name: item.category, value: item.category })\n              return true;\n            }\n            return false;\n          })\n          this.props.setCPTCategories(category_arr)\n          this.props.setCPTCategoryDropdown(category_dropdown_choices_arr)\n          this.props.setCPTCategoryRanges(cloneDeep(category_ranges))\n          this.setState({\n            cpt_categories: category_arr,\n            cpt_category_range: category_ranges,\n            category_dropdown_choices: category_dropdown_choices_arr\n          }, () => this.setState({ loading_state: false }))\n        }\n      })\n      .catch(err => console.log(err));\n  }\n\n  patchCode = (data: any) => {\n\n    const payload: Cpt = constructPutCpt(data)\n\n    const code: string = payload.code;\n\n    this.setState({\n      loading_state: true,\n      no_data_message: 'Searching for CPT codes'\n    })\n    editCPT(JSON.stringify(payload), payload._id).then(response => {\n      this.setState({\n        no_data_message: 'No available data',\n        loading_state: false\n      })\n      if (response && response.error === undefined && response.message) {\n        this.changePageUpdate(this.state.limit, this.state.limit * this.state.page)\n        this.patchCPTIndexDB(data)\n        this.setState({\n          disableSaveButton: true,\n          isModalOpen: true,\n          modalTitle: 'Success',\n          modalMessage: `You have ${response.message} code!`\n        });\n      } else if (response && response.error && response.error.statusCode === 401) {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'Unauthorized',\n          modalMessage: 'You are not authorized to edit CPT codes.'\n        });\n      } else if (response && response.error && response.error.statusCode === 400 && response.error.message) {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'CPT Code Already Exists',\n          modalMessage: (<span><strong>[{code}]</strong> cannot be added. This already exists on the list.</span>),\n        });\n      } else {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'Failed',\n          modalMessage: 'Something went wrong while saving!'\n        });\n      }\n    }).catch(error => {\n      if (error == 'Error: This code already exists.') {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'CPT Code Already Exists',\n          modalMessage: (<span><strong>[{code}]</strong> cannot be added. This already exists on the list.</span>),\n          loading_state: false\n        });\n      } else {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'Failed',\n          modalMessage: 'Something went wrong while saving!',\n          loading_state: false\n        });\n      }\n    });\n  }\n\n  addCodes = (data: any) => {\n\n    this.setState({\n      loading_state: true,\n      no_data_message: 'Searching for CPT codes'\n    })\n\n    const payload: Cpt[] = constructPostCpt(data)\n    let code: string = ''; \n    if(payload && payload.length > 0) code = payload[0].code;\n    addCPTCodes(JSON.stringify(payload)).then(response => {\n      this.setState({\n        loading_state: false,\n        no_data_message: 'No available data'\n      })\n      if (response && response.error === undefined && response.message && response.result) {\n        this.changePageUpdate(this.state.limit, this.state.limit * this.state.page)\n        this.addCPTIndexDB(response.result)\n        this.setState({\n          disableSaveButton: true,\n          isModalOpen: true,\n          modalTitle: 'Success',\n          modalMessage: `You have successfully added ${response.result.length} CPT code/s!`\n        });\n      } else if (response && response.error && response.error.statusCode === 401) {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'Unauthorized',\n          modalMessage: 'You are not authorized to add CPT codes.'\n        });\n      } else if (response && response.error && response.error.statusCode === 400 && response.error.message) {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'CPT Code Already Exists',\n          modalMessage: (<span><strong>[{code}]</strong> cannot be added. This already exists on the list.</span>),\n        });\n      } else {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'Failed',\n          modalMessage: 'Something went wrong while adding!'\n        });\n      }\n    }).catch(error => {\n      if (error == 'Error: This code already exists.') {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'CPT Code Already Exists',\n          modalMessage: (<span><strong>[{code}]</strong> cannot be added. This already exists on the list.</span>),\n          loading_state: false\n        });\n      } else {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'Failed',\n          modalMessage: 'Something went wrong while saving!',\n          loading_state: false\n        });\n      }\n    });\n  }\n\n  searchCode = (\n    limit: number, skip: number, filters: any, filters_global: any, sorting: any, clicked: any) => {\n\n    searchCPT(limit, skip, filters, filters_global, sorting, clicked).then(response => {\n      this.setState({ no_data_message: 'No available data' })\n      if (response && response.error === undefined) {\n        const table = this.generateDataForTable(\n          response.result ? response.result : [],\n        );\n        this.setState({\n          code_response: response,\n          code_data_all: table,\n          code_data: table,\n          loading_state: false,\n          totalCount:\n            response.total && response.total.count\n              ? response.total.count\n              : 0,\n        });\n      } else if (response && response.error && response.error.statusCode === 401) {\n        const table = this.generateDataForTable([]);\n        this.setState({\n          code_response: [],\n          code_data_all: table,\n          loading_state: false,\n          isModalOpen: true,\n          modalTitle: 'Unauthorized',\n          modalMessage: 'You are not authorized to view CPT codes.',\n        });\n      } else {\n        const table = this.generateDataForTable([]);\n        this.setState({\n          code_response: [],\n          code_data_all: table,\n          loading_state: false,\n          isModalOpen: true,\n          modalTitle: 'Loading failed',\n          modalMessage: 'An error occured while loading the list of codes.',\n        });\n      }\n    }).catch(() => {\n      const table = this.generateDataForTable([]);\n      this.setState({\n        code_response: [],\n        code_data_all: table,\n        loading_state: false,\n        isModalOpen: true,\n        modalTitle: 'Loading failed',\n        modalMessage: 'An error occured while loading the list of codes.',\n      });\n    });\n  }\n\n\n  deleteCPT = (id: string) => {\n    if (!id) {\n      return\n    }\n    this.setState({ loading_state: true })\n    deleteCPT(id).then(response => {\n      this.setState({\n        loading_state: false\n      })\n      this.changePageUpdate(this.state.limit, this.state.limit * this.state.page)\n      if (response && response.error) {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'Failed',\n          modalMessage: 'Something went wrong while deleting the CPT Code!'\n        });\n      }\n      else {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'Success',\n          modalMessage: 'You have successfully deleted a CPT code!'\n        });\n      }\n    }).catch(error => {\n      this.setState({\n        isModalOpen: true,\n        modalTitle: 'Failed',\n        modalMessage: 'Something went wrong while deleting the ICD10 Code!'\n      });\n      this.setState({\n        loading_state: false\n      })\n      console.log('client error: ', error);\n    });\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n  /***********************  \n  TABLE AND PAGE FUNCTIONS \n  ***********************/\n\n  generateDataForTable(response: any) {\n    const table: any = {\n      formattedColumns: {},\n      columnExtensions: [\n        {\n          columnName: 'code',\n          width: 150,\n          wordWrapEnabled: true,\n        },\n        {\n          columnName: 'description',\n          width: 500,\n          wordWrapEnabled: true,\n        },\n      ],\n      columns: [\n        {\n          name: 'code',\n          title: 'CPT Code',\n        },\n        {\n          name: 'description',\n          title: 'Description',\n        },\n      ],\n      rows: [],\n    };\n    for (const cnt in response) {\n      const item = response[cnt];\n      const temp_row: any = {};\n      temp_row['code'] = item['code'];\n      temp_row['description'] = item['description'];\n      table['rows'].push(temp_row);\n    }\n\n    return table;\n  }\n\n  changePageUpdate = (limit: number, skip: number) => {\n    this.handleCloseSideModalBlock();\n    this.setState({ no_data_message: 'Searching for CPT codes' })\n    this.setState({\n      loading_state: true,\n    });\n    if (\n      this.state.default_filters.length !== 0 ||\n      this.state.global_filter !== '' ||\n      this.state.default_sorting.length !== 0 ||\n      this.state.default_clicked !== ''\n    ) {\n      this.searchCode(\n        limit,\n        skip,\n        this.state.default_filters,\n        this.state.global_filter,\n        this.state.default_sorting,\n        this.state.default_clicked,\n      )\n    } else {\n      this.setState({ no_data_message: 'Searching for CPT codes' })\n      getCPT(limit, skip).then(response => {\n        this.setState({ no_data_message: 'No available data' })\n        if (response && response.error === undefined) {\n          const table = this.generateDataForTable(\n            response.result ? response.result : [],\n          );\n          this.setState({\n            code_response: response,\n            code_data_all: table,\n            code_data: table,\n            loading_state: false,\n            totalCount:\n              response.total && response.total.count\n                ? response.total.count\n                : 0,\n          });\n        } else if (response && response.error && response.error.statusCode === 401) {\n          const table = this.generateDataForTable([]);\n          this.setState({\n            code_response: [],\n            code_data_all: table,\n            loading_state: false,\n            isModalOpen: true,\n            modalTitle: 'Unauthorized',\n            modalMessage: 'You are not authorized to view CPT codes.',\n          });\n        } else {\n          const table = this.generateDataForTable([]);\n          this.setState({\n            code_response: [],\n            code_data_all: table,\n            loading_state: false,\n            isModalOpen: true,\n            modalTitle: 'Loading failed',\n            modalMessage: 'An error occured while loading the list of codes.',\n          });\n        }\n      });\n    }\n  };\n\n  handleChangeSorting = (sorting: any) => {\n    this.setState({ no_data_message: 'Searching for CPT codes' })\n    this.setState({\n      default_sorting: sorting,\n      loading_state: true,\n    });\n    if (sorting && sorting.length > 0) {\n\n      this.searchCode(\n        this.state.limit,\n        this.state.page * this.state.limit,\n        this.state.default_filters,\n        this.state.global_filter,\n        sorting,\n        this.state.default_clicked,\n      )\n    }\n  };\n\n  handleFilterByColumn = (filter: any) => {\n    const self = this;\n\n    if (self.state.typingTimeout) {\n      clearTimeout(self.state.typingTimeout);\n    }\n\n    self.setState({\n      default_filters: filter,\n      typing: false,\n      page: 0,\n      typingTimeout: setTimeout(function () {\n        self.setState({\n          no_data_message: 'Searching for CPT codes',\n          loading_state: true,\n        });\n        if (self.state.default_filters !== 0) {\n          self.searchCode(\n            self.state.limit,\n            0,\n            filter,\n            self.state.global_filter,\n            self.state.default_sorting,\n            self.state.default_clicked,\n          )\n        } else {\n          self.initialData();\n        }\n      }, 2000),\n    });\n\n  };\n\n  handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n\n    const self = this;\n\n    if (self.state.typingTimeout) {\n      clearTimeout(self.state.typingTimeout);\n    }\n    self.setState({\n      global_filter: value,\n      typing: false,\n      page: 0,\n      typingTimeout: setTimeout(function () {\n        self.setState({\n          no_data_message: 'Searching for CPT codes',\n          loading_state: true,\n          limit: 10,\n        });\n        if (self.state.global_filter !== '') {\n          self.searchCode(\n            self.state.limit,\n            0,\n            self.state.default_filters,\n            self.state.global_filter,\n            self.state.default_sorting,\n            self.state.default_clicked,\n          )\n        } else {\n          self.initialData();\n        }\n      }, 2000),\n    });\n  };\n\n  handleClickRow = (row: any) => {\n    const { code_response } = this.state;\n\n    if (!this.state.code_response || !this.state.code_response.result)\n      return;\n\n    const data: Cpt = constructCpt(code_response.result[row])\n    this.checkFields(data, true)\n    this.setState({\n      code_info: data,\n    }, () => this.handleChangeSideModalBlockMode('view'));\n  };\n\n\n  handlePageChange = (currentPage: number, skip: number) => {\n    this.setState({\n      page: currentPage,\n    });\n\n    this.changePageUpdate(this.state.limit, skip);\n  };\n\n  handlePageSizeChange = value => {\n    let pageLimit = 100000;\n\n    if (this.state.totalCount >= pageLimit) {\n      this.setState({\n        isPageSizeModal: true,\n      });\n    } else {\n      this.setState({\n        limit: value,\n      });\n\n      this.changePageUpdate(value, value * this.state.page);\n    }\n  };\n\n  handleClickItemFromList = (key: string) => {\n    this.setState({ default_clicked: key });\n    this.handleCloseSideModalBlock()\n    this.setState({\n      no_data_message: 'Searching for CPT codes',\n      page: 0,\n      loading_state: true,\n    });\n    if (key !== undefined) {\n      this.searchCode(\n        this.state.limit,\n        0,\n        this.state.default_filters,\n        this.state.global_filter,\n        this.state.default_sorting,\n        key,\n      )\n    }\n  };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  /*****************************  \n  ACTIONS / SIDE MODAL FUNCTIONS \n  ******************************/\n\n  handleCloseSideModalBlock = () => {\n    this.setState({\n      show_side_modal_block: 'none',\n      side_modal_block_mode: '',\n      code_info: constructEmptyCpt(),\n    });\n  };\n\n  handleChangeSideModalBlockMode = (value: 'view' | 'edit' | 'add' | '') => {\n    let title = '';\n    if (value && value === 'edit' && this.state.block_title) {\n      title = `Edit ${this.state.block_title}`;\n      const reform_data: Cpt = reconstructCpt(cloneDeep(this.state.code_info))\n      this.setState({ code_info: reform_data })\n    } else if (value && value === 'view' && this.state.code_info) {\n      title = this.state.code_info['code'] ? this.state.code_info['code'] : '';\n    } else if (value && value === 'add') {\n      title = `Add CPT Code`;\n    }\n    this.setState({\n      side_modal_block_mode: value,\n      block_title: title,\n    }, () => this.handleOpenBlock());\n  };\n\n  handleOpenBlock = () => {\n    this.setState({\n      show_side_modal_block: 'block',\n    }, () => this.passDataToSideModalBlockBody());\n  };\n\n  handleInvalidFieldsPrompt = () => {\n    this.setState({\n      isModalOpen: true,\n      modalTitle: 'Incomplete/Invalid Fields',\n      modalMessage: 'Please complete the form before proceeding.',\n    })\n  }\n\n\n  passDataToSideModalBlockBody = () => {\n\n    if (this.state.code_info && !this.state.code_info.gender_limited) {\n      this.state.code_info.gender = ''\n      this.setState({\n        code_info: this.state.code_info\n      });\n    }\n  };\n\n\n  checkFields = (formFields?: any, disableButton?: boolean) => {\n    this.setState({ loading_state: true })\n\n    if (formFields) {\n      let invalid_fields = this.getInvalidFields(formFields, disableButton);\n      if (!invalid_fields || invalid_fields.length === 0) {\n        if (this.state.disableSaveButton || !this.state.clickSaveButton) {\n          return\n        }\n        if (this.state.side_modal_block_mode === 'edit') {\n          this.setState({\n            clickSaveButton: false,\n            confirm_modal_message: 'Are you sure you want to edit this CPT code?',\n            confirm_modal_open: true,\n            confirm_modal_title: 'Confirm edit CPT code',\n            action_after_confirm: () => this.patchCode(formFields)\n          })\n        } else if (this.state.side_modal_block_mode === 'add') {\n          this.setState({\n            clickSaveButton: false,\n            confirm_modal_message: 'Are you sure you want to add this CPT code?',\n            confirm_modal_open: true,\n            confirm_modal_title: 'Confirm add CPT code',\n            action_after_confirm: () => this.addCodes(formFields)\n          })\n        }\n      } else {\n        this.handleInvalidFieldsPrompt()\n      }\n    }\n  }\n\n  getInvalidFields = (formFields: any, disableButton?: boolean) => {\n    let invalid_fields_submit: any[] = [];\n    let invalid_fields_editing: any[] = [];\n    let exclude_fields = {}\n    if (this.excludeFields !== undefined) {\n      exclude_fields = this.excludeFields\n    }\n    const fields_excluded: string[] = Object.keys(exclude_fields)\n    const form_keys: string[] = Object.keys(formFields)\n\n    form_keys.forEach(field => {\n      if (this.requiredFields !== undefined &&\n        this.requiredFields.includes(field) &&\n        !fields_excluded.includes(field) &&\n        !formFields[field]) {\n        if (!disableButton) {\n          invalid_fields_submit.push(field)\n        } else {\n          invalid_fields_editing.push(field)\n        }\n\n      }\n    });\n\n    const eff_date = moment(formFields['effectivity_date'])\n    const exp_date = moment(formFields['expiry_date'])\n    if (formFields &&\n      formFields['effectivity_date'] &&\n      formFields['expiry_date'] &&\n      eff_date.isValid() &&\n      exp_date.isValid() &&\n      eff_date.startOf('day').diff(exp_date.startOf('day')) > 0) {\n      if (disableButton) {\n        invalid_fields_editing.push('effectivity_date')\n      } else {\n        invalid_fields_submit.push('effectivity_date')\n      }\n    }\n\n    if (formFields && formFields['gender_limited'] && !formFields['gender']) {\n      if (!disableButton) {\n        invalid_fields_submit.push('gender')\n      } else {\n        invalid_fields_editing.push('gender')\n      }\n    }\n    if (!invalid_fields_editing || invalid_fields_editing.length === 0) {\n      this.setState({ disableSaveButton: false })\n    } else if (!this.state.disableSaveButton) {\n      this.setState({ disableSaveButton: true })\n    }\n    this.setState({ loading_state: false, invalid_fields: invalid_fields_submit })\n    return invalid_fields_submit\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  renderSideModalBlock(): JSX.Element {\n\n    return (\n      <SideModalBlock\n        blockPosition={'fixed'}\n        title={this.state.block_title}\n        editIconDescription={'Edit Code'}\n        showBlock={this.state.show_side_modal_block}\n        handleClose={this.handleCloseSideModalBlock}\n        sideModalBlockMode={this.state.side_modal_block_mode}\n        changeMode={this.handleChangeSideModalBlockMode}\n      >\n        {this.state.side_modal_block_mode ? (\n          <SideModalBody\n            formFields={this.state.code_info}\n            invalidFields={this.state.invalid_fields}\n            handleClose={this.handleCloseSideModalBlock}\n            disableSaveButton={this.state.disableSaveButton}\n            dynamicDropdownChoices={this.state.category_dropdown_choices}\n            refreshData={(data: any) => {\n              this.setState({ code_info: data },\n                () => this.checkFields(data, true))\n            }}\n            delete={(data: any) => {\n              if (this.state.side_modal_block_mode) {\n                if (this.state.side_modal_block_mode === 'edit') {\n                  this.setState({\n                    confirm_modal_message: 'Are you sure you want to delete this CPT code?',\n                    confirm_modal_open: true,\n                    confirm_modal_title: 'Confirm delete CPT code',\n                    action_after_confirm: () => this.deleteCPT(data['_id'])\n                  })\n                }\n              }\n            }}\n            handleSave={(formFields?: any) => {\n              if (this.state.side_modal_block_mode) {\n                this.setState({ clickSaveButton: true }, () => this.checkFields(formFields))\n              }\n            }}\n            formName={'CPT'}\n            mode={this.state.side_modal_block_mode ? this.state.side_modal_block_mode : ''}\n            checkBoxWithDropDownFieldsInitState={this.state.code_info && this.state.code_info['gender_limited'] ? true : false}\n            datePairField1MaxDate={\n              this.state.code_info &&\n                this.state.code_info['expiry_date'] &&\n                moment(this.state.code_info['expiry_date']).isValid() ?\n                moment(this.state.code_info['expiry_date']).format('MM-DD-YY').toString() : undefined\n            }\n            datePairField2MinDate={\n              this.state.code_info &&\n                this.state.code_info['effectivity_date'] &&\n                moment(this.state.code_info['effectivity_date']).isValid() ?\n                moment(this.state.code_info['effectivity_date']).format('MM-DD-YY').toString() : undefined\n            }\n          />\n        ) : null}\n      </SideModalBlock>\n    )\n  }\n\n  renderCodeInfo(): JSX.Element {\n    const { classes } = this.props;\n\n    return (\n      <React.Fragment>\n        <li key={'version'} className={classes.codeHeader}>VERSION</li>\n        <li key={'year-of-release-value'} className={classes.codeHeaderValue}>2020</li>\n        <ListItemText key={'effectivity-date'}>\n          <div className={classes.codeHeader}>EFFECTIVITY DATE</div>\n          <div className={classes.codeHeaderValue}>Jan 1, 2020</div>\n        </ListItemText>\n      </React.Fragment>\n    )\n  }\n\n  renderCodeList(key: string): JSX.Element {\n    const { classes } = this.props;\n    const ranges = this.state.cpt_category_range\n    const categories = this.state.cpt_categories\n\n    let display: string = ''\n    if (ranges.length > 0 && categories.length > 0) {\n      const range = ranges[categories.indexOf(key)]\n      if (range) {\n        display = `${range.slice(0, 4)}0000 - ${range.slice(0, 4)}9999 :`\n      }\n    } else {\n      return (\n        <>\n        </>\n      )\n    }\n\n    return (\n      <ListItemText\n        key={key}\n        classes={{\n          root: classes.codeListItemsRoot,\n          primary:\n            this.state.highlightedCodeFromList ===\n              categories.indexOf(key)\n              ? classes.codeListItemsSelected\n              : classes.codeListItems,\n        }}\n        onClick={() => {\n          if (categories.indexOf(key) !== this.state.highlightedCodeFromList) {\n            this.setState({\n              highlightedCodeFromList: categories.indexOf(key),\n            });\n            this.handleClickItemFromList(key);\n          } else {\n            this.setState({\n              highlightedCodeFromList: -1,\n            });\n            this.handleClickItemFromList('');\n          }\n        }}\n      >\n        <br />{display}<br />\n        {key}\n      </ListItemText>\n    )\n  }\n\n\n  render(): JSX.Element {\n    const { classes } = this.props;\n    const categories = this.state.cpt_categories\n\n    return (\n      <div>\n        {this.state.loading_state ? <Loader /> : null}\n\n\n        <Grid container>\n          <Grid container item xs={12} md={3}>\n            <Grid container className={classes.borderedGrid}>\n              <List>\n                {this.renderCodeInfo()}\n                {categories ? categories.map(key => this.renderCodeList(key)) : null}\n              </List>\n            </Grid>\n          </Grid>\n\n\n\n\n\n\n\n          <Grid container item xs={12} md={9} style={{ paddingLeft: '37px' }}>\n            <Grid container>\n              <Grid item xs={12} md={9}>\n                <TextField\n                  style={{ width: '100%', backgroundColor: 'white' }}\n                  id=\"code_search\"\n                  placeholder=\"Search a code or description\"\n                  label=\"\"\n                  margin=\"none\"\n                  fullWidth\n                  // className={classes.searchField}\n                  variant=\"outlined\"\n                  value={this.state.global_filter}\n                  inputProps={{ 'aria-label': 'bare' }}\n                  onChange={this.handleSearch}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <Search style={{ color: 'rgba(54, 54, 54, 0.4)' }} />\n                      </InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n\n\n\n\n              <Grid item xs={8} md={3} style={{ paddingRight: '15px', marginTop: 15, textAlign: 'center' }}>\n                <FontAwesomeIcon icon={faPlus} className={classes.plusIcon} />\n                <Link className={classes.addACode}\n                  onClick={() => {\n                    this.setState({\n                      block_title: 'Add CPT Code',\n                      code_info: constructEmptyCpt(),\n                      disableSaveButton: true\n                    }, () => this.handleChangeSideModalBlockMode('add'));\n                  }}>Add a Code</Link>\n              </Grid>\n\n\n\n\n\n              <GridHorizontalDivider height=\"30px\" />\n              <Grid style={{ minHeight: 690, overflow: 'auto' }}>\n                <TableComponent\n                  id=\"tab-all\"\n                  totalCount={this.state.totalCount}\n                  update={this.changePageUpdate}\n                  updateSorting={this.handleChangeSorting}\n                  rows={\n                    Object.keys(this.state.code_data).length > 0\n                      ? this.state.code_data['rows']\n                      : []\n                  }\n                  columns={\n                    Object.keys(this.state.code_data).length > 0\n                      ? this.state.code_data['columns']\n                      : []\n                  }\n                  message={\n                    this.state.global_filter\n                      ? 'No available data.'\n                      : this.state.no_data_message\n                  }\n                  onClickRow={this.handleClickRow}\n                  disableSelect\n                  disableSearch\n                  formattedColumns={\n                    Object.keys(this.state.code_data).length > 0\n                      ? this.state.code_data['formattedColumns']\n                      : {}\n                  }\n                  columnExtensions={\n                    Object.keys(this.state.code_data).length > 0\n                      ? this.state.code_data['columnExtensions']\n                      : []\n                  }\n                  onFilterChange={this.handleFilterByColumn}\n                  onSortingChange={this.handleChangeSorting}\n                  onPageChange={this.handlePageChange}\n                  ongPageSizeChange={this.handlePageSizeChange}\n                  defaultFilter={this.state.default_filters}\n                  currentPage={this.state.page}\n                  limit={this.state.limit}\n                  pageSizes={[10, 25, 50, 100]}\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n\n\n\n        {this.renderSideModalBlock()}\n\n        <MsgModal\n          onClose={() => this.setState({ isModalOpen: false })}\n          title={this.state.modalTitle}\n          isModalOpen={this.state.isModalOpen}\n          message={this.state.modalMessage}\n        />\n        <ConfirmationModal\n          onClose={() => this.setState({ confirm_modal_open: false })}\n          title={this.state.confirm_modal_title}\n          isModalOpen={this.state.confirm_modal_open}\n          submitType={'confirm'}\n          onSubmit={() => {\n            if (this.state.action_after_confirm) {\n              this.state.action_after_confirm()\n            }\n          }}\n          message={this.state.confirm_modal_message} />\n      </div>\n    );\n  }\n}\n","import * as React from 'react';\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n// import { faTimesCircle } from '@fortawesome/free-solid-svg-icons';\n// import { InputLabel } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n    Button,\n    Grid,\n    // TextField,\n    InputLabel,\n    Link,\n    CircularProgress\n} from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport { GridHorizontalDivider } from 'Components/UI';\nimport { TableComponent } from 'Components/UI/TableComponent/CodeListTable';\nimport { getAllSynonyms } from 'Pages/API/Calls/ICD10';\nimport { Icd10Synonym, Icd10 } from '../../LookupModels'\nimport { cloneDeep } from 'lodash';\n\nconst tableInfo: any = {\n    All: {\n        filterExtensions: [\n            {\n                columnName: 'status',\n                filteringEnabled: false,\n                sortingEnabled: false,\n            }\n        ],\n        columnExtensions: [\n            {\n                columnName: 'title',\n                width: 370,\n                wordWrapEnabled: true,\n            },\n            {\n                columnName: 'status',\n                width: 150,\n                wordWrapEnabled: true,\n            },\n        ],\n        columns: [\n            {\n                name: 'title',\n                title: 'Synonyms',\n            },\n            {\n                name: 'status',\n                title: 'Status',\n                sortingEnabled: false,\n            },\n        ]\n    },\n    Others: {\n        formattedColumns: {\n            Unapproved: { approve_disapprove_action_virtual: ['action'] },\n            Approved: { required_checkbox: ['action'] },\n            Inactive: { required_checkbox: ['action'] },\n        },\n        filterExtensions: [\n            {\n                columnName: 'action',\n                filteringEnabled: false,\n                sortingEnabled: false,\n            }\n        ],\n        columnExtensions: [\n            {\n                columnName: 'title',\n                width: 270,\n                wordWrapEnabled: true,\n            },\n            {\n                columnName: 'action',\n                width: 250,\n                wordWrapEnabled: true,\n            },\n        ],\n        columns: [\n            {\n                name: 'title',\n                title: 'Synonyms',\n            },\n            {\n                name: 'action',\n                title: 'Action',\n                sortingEnabled: false,\n                actionColumn: true,\n                actionValue: false,\n            },\n        ]\n    }\n}\n\n\nconst useStyles = makeStyles(() => ({\n    selectedItems: {\n        borderRadius: 20,\n        fontSize: 13,\n        backgroundColor: '#d1d4db',\n        padding: '5px 10px'\n    },\n    xIcon: {\n        fontSize: 16\n    },\n    input: {\n        marginBottom: \"2px\"\n    },\n    inputLabel: {\n        color: '#272e4c',\n        fontSize: '12px',\n        marginBottom: '5px',\n        marginTop: '20px'\n    },\n}));\n\n\nconsole.log(useStyles);\n\ninterface IAddSynonymsBodyProps {\n    hasUnsavedChanges: boolean;\n    setHasUnsavedChanges: (bool: boolean) => void;\n    onClose: () => void;\n    data: Icd10;\n    addSynonym: (full_code: string, title: string, diagnosis_code: string) => void;\n    patchSynonyms: (rows: any) => void;\n    deactivateSynonyms: (rows: any) => void;\n    activateSynonyms: (rows: any) => void;\n    activeLink: string;\n    setActiveLink: (activelink: string) => void;\n    getRowsForUnsavedChanges: (rows: Icd10Synonym[]) => void;\n    getRowsTrigger: boolean;\n    changeTabUnsaved: (item: string) => void;\n}\n\ninterface IAddSynonymsBodyState {\n    rowActions: Icd10Synonym[];\n    tabCount: any;\n    hasUnsavedChanges: boolean;\n    isLoading: boolean;\n    defaultFilters: any[];\n    defaultSorting: any[];\n    textFieldValue: string;\n    menuTabs: any;\n    activeLink: any;\n    rows: Icd10Synonym[];\n    totalCount: number;\n    columns: any;\n    noData: string;\n}\n\nexport class AddSynonymsBody extends React.Component<IAddSynonymsBodyProps, IAddSynonymsBodyState> {\n    constructor(props) {\n        super(props);\n\n        const menuItems = [\n            \"All\",\n            \"Unapproved\",\n            \"Approved\",\n            \"Inactive\"\n        ]\n\n        this.state = {\n            rowActions: [],\n            tabCount: {\n                All: 0,\n                Unapproved: 0,\n                Approved: 0,\n                Inactive: 0\n            },\n            hasUnsavedChanges: this.props.hasUnsavedChanges,\n            isLoading: false,\n            defaultFilters: [],\n            defaultSorting: [],\n            textFieldValue: '',\n            menuTabs: menuItems,\n            activeLink: this.props.activeLink,\n            rows: [],\n            totalCount: 0,\n            columns: [\n                {\n                    name: 'title',\n                    title: 'Synonyms',\n                },\n                {\n                    name: 'status',\n                    title: 'Status',\n                    sortingEnabled: false,\n                },\n            ],\n            noData: '',\n        }\n    }\n\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.data !== this.props.data) {\n            this.resetStates();\n            this.props.setActiveLink('All');\n            this.APIGetAllSynonyms();\n        }\n        if (prevState.activeLink !== this.state.activeLink) this.resetStates();\n        if (prevProps.hasUnsavedChanges !== this.props.hasUnsavedChanges) this.setState({ hasUnsavedChanges: this.props.hasUnsavedChanges })\n        if (prevProps.getRowsTrigger !== this.props.getRowsTrigger) this.props.getRowsForUnsavedChanges(this.state.rows);\n        if (prevProps.activeLink !== this.props.activeLink) this.setState({ activeLink: this.props.activeLink }, this.tabsCount);\n\n    }\n\n    resetStates() {\n        let temp_rows: Icd10Synonym[] = this.state.rows;\n        temp_rows.forEach(row => row.action_chosen = '');\n        this.setState({\n            rows: temp_rows,\n            defaultFilters: [],\n            defaultSorting: [],\n        });\n        this.props.setHasUnsavedChanges(false);\n    }\n\n\n    addSynonym = () => {\n        if (!this.props.data || !this.props.data.full_code || !this.state.textFieldValue) return;\n\n\n        const diagnosis_code: string = this.props.data && this.props.data.diagnosis_code ? this.props.data.diagnosis_code : '';\n        this.props.addSynonym(this.props.data.full_code, this.state.textFieldValue, diagnosis_code);\n        this.setState({ textFieldValue: '' });\n\n\n\n\n    }\n\n    handleFilterByColumn = (filter: any) => {\n        if (this.state.activeLink === 'Approved' || this.state.activeLink === 'Inactive') {\n            if (filter && Array.isArray(filter) && filter.some(item => item['columnName'] === 'action')) {\n                const action: boolean = filter.filter(item => item['columnName'] === 'action')[0]['action'];\n                this.handleHeaderCheckbox(action);\n            }\n        }\n        this.setState({ defaultFilters: filter })\n    };\n\n    handleHeaderCheckbox = (action: boolean) => {\n        let rows = this.state.rows;\n        const { activeLink } = this.state;\n        let status: string = activeLink === 'Approved' ? 'active' : activeLink === 'Inactive' ? 'inactive' : '';\n        if (!status) return;\n        rows.filter(row => row['status'] === status).forEach(row => row['action_chosen'] = action);\n        this.setState({ rows: rows }, this.formChanges);\n    }\n\n    handleChangeSorting = (sorting: any) => {\n        this.setState({ defaultSorting: sorting, });\n    }\n\n    APIGetAllSynonyms = () => {\n        if(!this.props.data || !this.props.data['full_code']) return;\n        let filter = {\n            full_code: this.props.data.full_code\n        }\n        this.setState({ isLoading: true });\n        getAllSynonyms(filter).then((resp: any) => {\n            const unapproved_count: number = resp && resp.unapproved && resp.unapproved.count ? resp.unapproved.count : 0;\n            const all_count: number = resp && resp.total && resp.total.count ? resp.total.count : 0;\n            const inactive_count: number = resp && resp.inactive && resp.inactive.count ? resp.inactive.count : 0;\n            const active_count: number = resp && resp.active && resp.active.count ? resp.active.count : 0;\n            console.log(resp)\n            if (!resp.eror) {\n                this.setState({\n                    tabCount: {\n                        All: all_count,\n                        Unapproved: unapproved_count,\n                        Inactive: inactive_count,\n                        Approved: active_count\n                    },\n                    rows: resp.result,\n                    totalCount: resp.total.count,\n                    isLoading: false\n                }, this.tabsCount);\n            } else {\n                this.setState({\n                    noData: \"No available data\",\n                    isLoading: false\n                })\n            }\n        }).catch(err => {\n            console.log(err);\n            this.setState({ isLoading: false });\n        });\n\n    }\n\n    titleCase = (title: string) => {\n        var sentence: string[] = title.toLowerCase().split(\" \");\n        for (var i = 0; i < sentence.length; i++) {\n            sentence[i] = sentence[i][0].toUpperCase() + sentence[i].slice(1);\n        }\n        const output: string = sentence.join(\" \");\n        return output;\n    }\n\n    rowDataFixer = () => {\n        const { activeLink, rows } = this.state;\n        if (activeLink === 'All') {\n            const return_rows: any[] = rows.map(row => {\n                return { ...row, status: this.titleCase(row.status) }\n            });\n            return return_rows;\n        }\n        else if (activeLink === 'Unapproved') {\n            return rows.filter(row => row.status && row.status.toLowerCase() === 'unapproved')\n        }\n        else if (activeLink === 'Approved') {\n            return rows.filter(row => row.status && row.status.toLowerCase() === 'active')\n        }\n        else if (activeLink === 'Inactive') {\n            return rows.filter(row => row.status && row.status.toLowerCase() === 'inactive')\n        }\n        else {\n            return [];\n        }\n    }\n\n    getColumns = () => {\n        const { activeLink } = this.state;\n        const tab: string = activeLink === 'All' ? 'All' : 'Others';\n        let tableClone = cloneDeep(tableInfo);\n        if (activeLink === 'Unapproved') delete tableClone[tab]['columns'][1]['actionColumn'];\n        if (activeLink === 'Approved')\n            tableClone[tab]['columns'][1]['title'] = 'Deactivate';\n        if (activeLink === 'Inactive')\n            tableClone[tab]['columns'][1]['title'] = 'Activate';\n        return tableClone[tab]['columns'];\n    }\n\n    getColumnExtensions = () => {\n        const { activeLink } = this.state;\n        const tab: string = activeLink === 'All' ? 'All' : 'Others';\n        return tableInfo[tab]['columnExtensions'];\n    }\n\n    getFilterExtensions = () => {\n        const { activeLink } = this.state;\n        const tab: string = activeLink === 'All' ? 'All' : 'Others';\n        return tableInfo[tab]['filterExtensions'];\n    }\n\n    getFormattedColumns = () => {\n        const { activeLink } = this.state;\n        if (activeLink !== 'All') {\n            return tableInfo['Others']['formattedColumns'][activeLink];\n        }\n        return undefined;\n    }\n\n    checkIfSelectBox = () => {\n        if (this.state.activeLink === 'Approved' || this.state.activeLink === 'Inactive') {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    handleClickRow = (row: any) => {\n        this.props.setActiveLink(row.status);\n    };\n\n    handleOnClickRow = (row: any) => {\n        const { rows, activeLink } = this.state;\n        if (activeLink !== 'All') return;\n        if (!rows || !rows[row] || !rows[row]['status']) return;\n        const tab: string = rows[row]['status'] === 'active' ? 'Approved' : this.titleCase(rows[row]['status']);\n        this.changeTab(tab);\n    }\n\n    handleMenuClick = async (item) => {\n        if (item !== this.state.activeLink && this.state.hasUnsavedChanges) {\n            // to do: ask user if they want to abandon changes before switching tabs\n            // this.changeTab(item); // remove in the future, replace with modal asking to save\n            this.props.changeTabUnsaved(item);\n        } else {\n            this.changeTab(item);\n        }\n    }\n\n    changeTab = (item) => this.props.setActiveLink(item);\n        // this.setState({ activeLink: item });\n    \n\n    formChanges = () => {\n        const { activeLink, rows } = this.state;\n\n        if (activeLink === 'Unapproved') {\n            const choices: any[] = ['approve', 'disapprove'];\n            const changesMade: boolean = rows && rows.some(row => choices.includes(row.action_chosen));\n            this.props.setHasUnsavedChanges(changesMade);\n        } else if (activeLink === 'Approved' || activeLink === 'Inactive') {\n            const changesMade: boolean = rows && rows.some(row => row.action_chosen);\n            this.props.setHasUnsavedChanges(changesMade);\n        }\n    }\n\n    handleSave = () => {\n        const { activeLink, rows } = this.state;\n\n        if (activeLink === 'Unapproved') {\n            this.props.patchSynonyms(cloneDeep(rows));\n        } else if (activeLink === 'Approved') {\n            this.props.deactivateSynonyms(cloneDeep(rows));\n        } else if (activeLink === 'Inactive') {\n            this.props.activateSynonyms(cloneDeep(rows));\n        }\n    }\n\n    tabsCount = () => {\n        const { rows } = this.state;\n        const all_count: number = rows && rows.length ? rows.length : 0;\n        let unapproved_count: number = 0;\n        let inactive_count: number = 0;\n        let active_count: number = 0;\n        rows.forEach(row => {\n            if(row.status === 'active') active_count++;\n            else if(row.status === 'inactive') inactive_count++;\n            else if(row.status === 'unapproved') unapproved_count++;\n        });\n        this.setState({\n            tabCount: {\n                All: all_count,\n                Unapproved: unapproved_count,\n                Inactive: inactive_count,\n                Approved: active_count\n            },\n        })\n    }\n\n\n    public render(): JSX.Element {\n\n\n        return (\n            <>\n                <div style={{ minHeight: 600, minWidth: 500 }}>\n                    <b>\n                        <span style={{\n                            fontSize: '16px'\n                        }}>\n                            {this.props.data.full_code}\n                        </span><br />\n                        <span style={{\n                            fontSize: '18px'\n                        }}>\n                            {this.props.data.full_description}\n                        </span>\n                    </b>\n\n                    <hr />\n                    <Grid item container justify=\"space-between\">\n                        <InputLabel style={{\n                            color: '#272e4c',\n                            fontSize: '12px',\n                            marginBottom: '5px',\n                            marginTop: '5px'\n                        }}>\n                            Add a Synonym\n                                    </InputLabel>\n                        <Grid container item justify=\"space-between\">\n\n\n                            <TextField type=\"text\"\n                                style={{\n                                    width: '65%',\n                                    marginBottom: \"2px\"\n                                }}\n\n                                value={this.state.textFieldValue}\n                                required\n                                id=\"outline-add-synonyms\"\n                                variant=\"outlined\"\n                                onChange={(e: any) => this.setState({ textFieldValue: e.target.value })} />\n                            <Button\n                                style={{\n                                    marginLeft: '10px',\n                                    height: '40px',\n                                    width: '30%',\n                                    fontSize: '14px',\n                                    color: '#fff',\n                                }}\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={this.addSynonym}\n                            >\n                                Add Synonym\n                            </Button>\n                        </Grid>\n                        <Grid container item justify=\"flex-end\">\n\n                        </Grid>\n                    </Grid>\n\n                    <Grid\n                        item\n                        xs={12}\n                        md={12}\n                        style={{\n                            paddingRight: '8px',\n                            marginTop: 8,\n                        }}>\n\n                        <Grid item xs={12} md={12} style={{ marginLeft: '8px' }}>\n                            <ul style={{ padding: '0', margin: '0' }}>\n                                {this.state.menuTabs.map((item) => (\n                                    <li\n                                        key={`${item} tab`}\n                                        style={{\n                                            display: \"inline-block\",\n                                            padding: \"10px 25px 10px 0\"\n                                        }}>\n                                        <Link\n                                            style={this.state.activeLink === item ? {\n                                                color: \"#3ab77d\",\n                                                fontWeight: \"bold\",\n                                                textDecoration: \"underline\"\n                                            } : {\n                                                    color: \"#929292\",\n                                                    display: \"block\",\n                                                    fontSize: \"1em\",\n                                                }\n                                            }\n                                            onClick={() => this.handleMenuClick(item)}\n                                        >\n                                            {item}({this.state.tabCount[item]})\n                                        </Link>\n                                    </li>\n                                ))\n                                }\n                            </ul>\n                        </Grid>\n\n                    </Grid>\n\n                    <hr />\n                    {this.state.isLoading ? (\n                        <Grid style={{ textAlign: 'center' }}>\n                            <GridHorizontalDivider height=\"50px\" />\n                            <CircularProgress size={100} />\n                        </Grid>\n                    ) : null}\n                    {!this.state.isLoading && this.state.activeLink ? (\n                        <>\n                            <Grid style={{ maxHeight: '300px' }}>\n                                <GridHorizontalDivider height=\"10px\" />\n\n                                <TableComponent\n                                    id={`modal-table-${this.state.activeLink}`}\n                                    key={`side-modal-table-${this.state.activeLink}`}\n                                    totalCount={10}\n                                    update={() => { }}\n                                    updateSorting={this.handleChangeSorting}\n                                    rows={this.rowDataFixer()}\n                                    columns={this.getColumns()}\n                                    disablePaging\n                                    message={''}\n                                    onClickRow={this.handleOnClickRow}\n                                    onClickCell={(data: any) => {\n                                        const data_row = data && data.row ? data.row : undefined;\n                                        if (!data_row || !data_row._id) return;\n                                        let rows = this.state.rows;\n                                        for (let row of rows) {\n                                            if (row._id === data_row._id) {\n                                                row['action_chosen'] = data_row['action_chosen']\n                                                break;\n                                            }\n                                        }\n                                        this.setState({ rows: rows }, this.formChanges)\n                                    }}\n                                    disableSelect\n                                    disableSearch\n                                    formattedColumns={this.getFormattedColumns()}\n                                    columnExtensions={this.getColumnExtensions()}\n                                    filterExtensions={this.getFilterExtensions()}\n                                    defaultSort={this.state.defaultSorting}\n                                    onFilterChange={this.handleFilterByColumn}\n                                    onSortingChange={this.handleChangeSorting}\n                                    onPageChange={() => { }}\n                                    ongPageSizeChange={() => { }}\n                                    defaultFilter={this.state.defaultFilters}\n                                    currentPage={0}\n                                    limit={0}\n                                    isVirtualTable={true}\n                                    onSelectedRadio={(row: number, value: string) => {\n                                        this.formChanges();\n                                        console.log(row, value);\n                                    }}\n                                />\n                            </Grid>\n                            {['Unapproved', 'Approved', 'Inactive'].includes(this.state.activeLink) ? (\n                                <>\n                                    <GridHorizontalDivider height=\"25px\" />\n                                    <div>\n                                        <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n                                            <Button\n                                                style={{ width: '130px' }}\n                                                onClick={this.handleSave}\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                disabled={!this.state.hasUnsavedChanges}\n                                            >\n                                                Save\n                                    </Button>\n                                        </div>\n                                    </div>\n                                </>\n                            ) : null}\n                        </>\n                    ) : null}\n                </div>\n\n            </>\n        )\n    }\n\n}\n","import React from 'react';\nimport { TableComponent } from 'Components/UI/TableComponent/CodeListTable';\nimport {\n    TextField,\n    InputAdornment,\n    Grid,\n    Button,\n    Snackbar,\n} from '@material-ui/core';\nimport { Search } from '@material-ui/icons/';\nimport { Loader } from '../Loader';\nimport Link from '@material-ui/core/Link';\nimport { GridHorizontalDivider } from 'Components/UI';\nimport { SideModalBlock } from 'Components/UI';\nimport { MsgModal } from 'Components/UI';\nimport {\n    getICDSynonyms,\n    getActiveSynonyms,\n    addSynonyms,\n    patchSynonyms\n} from 'Pages/API/Calls/ICD10'\n// import { ConfirmationModal } from '../ConfirmationModal'\nimport { ModalComponent } from 'Components/UI/ModalComponent/ModalComponent';\nimport { Icd10Synonym } from '../../LookupModels'\n\nimport { cloneDeep } from 'lodash'\nimport { AddSynonymsBody } from './AddSynonymsBody';\nimport {\n    constructAddSynonymPayload,\n    constructUnapprovedSynonymPayload,\n    constructDeactivateSynonymPayload,\n    constructActivateSynonymPayload,\n} from '../ConstructPayloads'\n\n\ninterface IState {\n\n    side_modal_rows: Icd10Synonym[];\n    side_modal_get_rows_trigger: boolean;\n\n    has_unsaved_changes: boolean;\n    unsaved_changes_modal: boolean;\n\n    confirm_modal_title: string;\n    confirm_modal_save_button: string;\n    confirm_modal_message: any;\n    confirm_modal_open: boolean;\n    action_after_confirm: () => void;\n    invalid_fields: string[];\n    loading_state: boolean;\n    block_title?: string;\n    show_side_modal_block?: string;\n    side_modal_block_mode: 'view' | 'edit' | 'add' | '';\n    code_info?: any;\n    code_response: any;\n    code_data_all: any;\n    code_data: any;\n    global_filter: string;\n    default_filters: any;\n    default_sorting: any;\n\n\n    // FOR UNAPPROVED TAB\n    code_info_unapproved?: Icd10Synonym;\n    unapproved_codes_actions: any[];\n    code_data_all_unapproved: any;\n    code_data_unapproved: any;\n    default_filters_unapproved: any;\n    default_sorting_unapproved: any;\n    total_count_unapproved: number;\n    page_unapproved: number;\n    limit_unapproved: number;\n\n    activeTableRows: any;\n    activeTableColumns: any;\n    activeTableCount: number;\n    activeTableCurrentpage: number;\n    activeTableLimit: number;\n    activeTableFilter: any[];\n    activeTableSort: any[];\n    activeTableSkip: number;\n\n    default_clicked: string;\n    isModalOpen: boolean;\n    modalTitle: string;\n    modalMessage: any;\n    modalMessageMaxWidth: string;\n    action_after_info: () => void;\n    totalCount: number;\n    typing: boolean;\n    typingTimeout: any;\n    page: number;\n    limit: number;\n    isPageSizeModal: boolean;\n    highlightedCodeFromList: number;\n    icd_categories: string[];\n    no_data_message: string;\n    icd_category_dropdown_choices: any[];\n    disableSaveButton: boolean;\n    clickSaveButton: boolean;\n    menuTabs: any,\n    activeLink: any,\n    synonyms: string[],\n    code_repo: any;\n    active_default_filter: any[],\n    snackbarOpen: any,\n    snackbarMessage: any,\n    confirm_modal_method: any,\n    side_modal_active_link: string;\n}\n\ninterface IProps {\n    classes: any;\n\n    icdSynonymAction: any[];\n    setICDSynonymAction: (data: any[]) => void;\n}\n\nexport class ICD10SynonymsSection extends React.Component<IProps, IState> {\n\n    constructor(props) {\n        super(props);\n\n        const table: any = {\n            formattedColumns: {},\n            columnExtensions: [\n                {\n                    columnName: 'full_code',\n                    width: 100,\n                    wordWrapEnabled: true,\n                },\n                {\n                    columnName: 'diagnosis',\n                    width: 200,\n                    wordWrapEnabled: true,\n                },\n                {\n                    columnName: 'synonyms',\n                    width: 200,\n                    wordWrapEnabled: true,\n                },\n                {\n                    columnName: 'status',\n                    width: 200,\n                    wordWrapEnabled: true,\n                },\n            ],\n            columns: [\n                {\n                    name: 'full_code',\n                    title: 'ICD10 Code',\n                },\n                {\n                    name: 'diagnosis',\n                    title: 'Diagnosis',\n                },\n                {\n                    name: 'synonyms',\n                    title: 'Synonyms',\n                },\n                {\n                    name: 'status',\n                    title: 'Status',\n                },\n            ],\n            rows: [],\n        };\n\n        const unapprovedTable: any = {\n            formattedColumns: {\n                approve_disapprove_action: ['action'],\n                approve_disapprove_reset: ['reset'],\n            },\n            filterExtensions: [\n                {\n                    columnName: 'action',\n                    filteringEnabled: false,\n                    sortingEnabled: false,\n                },\n                {\n                    columnName: 'reset',\n                    filteringEnabled: false,\n                    sortingEnabled: false,\n                },\n            ],\n            columnExtensions: [\n                {\n                    columnName: 'full_code',\n                    width: 130,\n                    wordWrapEnabled: true,\n                },\n                {\n                    columnName: 'full_description',\n                    width: 295,\n                    wordWrapEnabled: true,\n                },\n                {\n                    columnName: 'title',\n                    width: 175,\n                    wordWrapEnabled: true,\n                },\n                {\n                    columnName: 'action',\n                    width: 200,\n                    wordWrapEnabled: true,\n                },\n                {\n                    columnName: 'reset',\n                    width: 125,\n                    wordWrapEnabled: true,\n                },\n            ],\n            columns: [\n                {\n                    name: 'full_code',\n                    title: 'ICD10 Code',\n                },\n                {\n                    name: 'full_description',\n                    title: 'Diagnosis',\n                },\n                {\n                    name: 'title',\n                    title: 'Synonyms',\n                },\n                {\n                    name: 'action',\n                    title: 'Action',\n                    sortingEnabled: false,\n                },\n                {\n                    name: 'reset',\n                    title: 'Reset',\n                    sortingEnabled: false,\n                    resetColumn: true,\n                },\n            ],\n            rows: [],\n        };\n\n        const activeTable: any = {\n            columnExtensions: [\n                {\n                    columnName: 'full_code',\n                    width: 130,\n                    wordWrapEnabled: true,\n                },\n                {\n                    columnName: 'full_description',\n                    width: 305,\n                    wordWrapEnabled: true,\n                },\n                {\n                    columnName: 'synonyms',\n                    width: 320,\n                    wordWrapEnabled: true,\n                },\n                {\n                    columnName: 'status',\n                    width: 200,\n                    wordWrapEnabled: true,\n                },\n            ],\n            columns: [\n                {\n                    name: 'full_code',\n                    title: 'ICD10 Code',\n                },\n                {\n                    name: 'full_description',\n                    title: 'Diagnosis',\n                },\n                {\n                    name: 'synonyms',\n                    title: 'Synonyms',\n                },\n                {\n                    name: 'status',\n                    title: 'Status',\n                    staticDropdown: true,\n                    staticDropdownOptions: [\n                        {\n                            value: 'all',\n                            label: 'All',\n                        },\n                        {\n                            value: 'active',\n                            label: 'Active'\n                        },\n                        {\n                            value: 'deactivated',\n                            label: 'Deactivated'\n                        },\n                        {\n                            value: 'awaiting activation',\n                            label: 'Awaiting activation'\n                        }\n                    ]\n                },\n            ],\n            rows: [],\n        };\n\n        const menuItems = [\n            \"All Diagnosis\",\n            \"Unapproved Synonyms\"\n        ]\n\n\n        this.state = {\n            side_modal_rows: [],\n            side_modal_get_rows_trigger: false,\n            side_modal_active_link: 'All',\n            unsaved_changes_modal: false,\n            has_unsaved_changes: false,\n            modalMessageMaxWidth: '400px',\n            confirm_modal_save_button: 'Save',\n            icd_category_dropdown_choices: props.icdCategoryDropdown,\n            icd_categories: props.icdCategories,\n            no_data_message: '',\n            confirm_modal_title: '',\n            confirm_modal_message: '',\n            confirm_modal_open: false,\n            action_after_confirm: () => { },\n            invalid_fields: [],\n            highlightedCodeFromList: -1,\n            loading_state: true,\n            code_response: [],\n            code_info: [],\n            show_side_modal_block: 'none',\n            side_modal_block_mode: '',\n            code_data: table,\n            code_data_all: table,\n\n\n\n            // FOR UNAPPROVED TAB\n            default_filters_unapproved: [],\n            unapproved_codes_actions: props.icdSynonymAction ? props.icdSynonymAction : [],\n            code_data_unapproved: unapprovedTable,\n            code_data_all_unapproved: unapprovedTable,\n            default_sorting_unapproved: [{\n                columnName: 'full_code',\n                direction: 'asc'\n            }\n            ],\n            total_count_unapproved: 0,\n            page_unapproved: 0,\n            limit_unapproved: 10,\n\n            active_default_filter: [],\n\n            block_title: '',\n            global_filter: '',\n            default_filters: [],\n            default_sorting: [{\n                columnName: 'full_code',\n                direction: 'asc'\n            }\n            ],\n            default_clicked: '',\n            isModalOpen: false,\n            isPageSizeModal: false,\n            modalTitle: '',\n            modalMessage: '',\n            action_after_info: () => { },\n            totalCount: 0,\n            typing: false,\n            typingTimeout: 0,\n            page: 0,\n            limit: 10,\n            disableSaveButton: false,\n            clickSaveButton: false,\n            menuTabs: menuItems,\n            activeLink: 'All Diagnosis',\n            synonyms: [],\n            code_repo: [],\n            activeTableRows: [],\n            activeTableColumns: activeTable,\n            activeTableCount: 0,\n            activeTableCurrentpage: 0,\n            activeTableLimit: 10,\n            activeTableFilter: [],\n            activeTableSort: [],\n            activeTableSkip: 0,\n            snackbarOpen: false,\n            snackbarMessage: '',\n            confirm_modal_method: () => { }\n        };\n    }\n\n    componentDidMount() {\n        if (this.state.activeLink === 'All Diagnosis') {\n            this.getActive();\n        }\n        document.addEventListener('keydown', this.escFunction, false);\n\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.activeLink !== this.state.activeLink) {\n            if (this.state.activeLink === 'Unapproved Synonyms') {\n                this.setState({\n                    default_sorting_unapproved: [{\n                        columnName: 'full_code',\n                        direction: 'asc'\n                    }\n                    ]\n                }, () => this.searchSynonyms(\n                    this.state.default_filters_unapproved,\n                    this.state.global_filter,\n                    this.state.limit_unapproved,\n                    this.state.limit_unapproved * this.state.page_unapproved,\n                    this.state.default_sorting_unapproved));\n                this.setState({ has_unsaved_changes: false }, this.handleCloseSideModalBlock);\n            } else if (this.state.activeLink === 'All Diagnosis') {\n                this.setState({ activeTableSort: [] }, this.getActive);\n            }\n        }\n\n\n        if (prevProps.icdSynonymAction !== this.props.icdSynonymAction && this.props.icdSynonymAction)\n            this.setState({ unapproved_codes_actions: this.props.icdSynonymAction });\n    }\n\n    escFunction = (event) => {\n        if (event.keyCode === 27) {\n            this.handleCloseSideModalBlock();\n            // this.setState({ has_unsaved_changes: false }, this.handleCloseSideModalBlock)\n        }\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    /***********************  \n         CRUD FUNCTIONS \n    ***********************/\n\n\n    searchSynonyms = (filters: any, filters_global: any, limit: number, skip: number, sorting: any) => {\n\n        this.setState({ loading_state: true });\n        let table: any = [];\n\n        let unapproved_filter = cloneDeep(filters);\n        unapproved_filter.push({ columnName: 'status', value: 'unapproved' });\n        getICDSynonyms(unapproved_filter, filters_global, limit, skip, sorting)\n            .then(response => {\n                if (response && response.error === undefined) {\n                    table = this.generateDataForUnapprovedTable(\n                        response.result ? response.result : [],\n                    );\n                    this.setState({\n                        code_data_all_unapproved: table,\n                        code_data_unapproved: table,\n                        total_count_unapproved: response.total && response.total.count ? response.total.count : 0,\n                        loading_state: false,\n                    });\n                } else {\n                    table = this.generateDataForUnapprovedTable([]);\n                    this.setState({\n                        code_data_all_unapproved: table,\n                        page_unapproved: 0,\n                        isModalOpen: true,\n                        modalTitle: 'Loading failed',\n                        modalMessage: 'An error occured while loading the list of codes.',\n                        loading_state: false,\n                    });\n                }\n            }).catch(e => {\n                console.log('fetch synonyms table error', e);\n                table = this.generateDataForUnapprovedTable([]);\n                this.setState({\n                    code_data_all_unapproved: table,\n                    page_unapproved: 0,\n                    isModalOpen: true,\n                    modalTitle: 'Loading failed',\n                    modalMessage: 'An error occured while loading the list of codes.',\n                    loading_state: false,\n                });\n            });\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    /***********************  \n    TABLE AND PAGE FUNCTIONS \n    ***********************/\n\n\n    // USED BY BOTH UNAPPROVED AND ALL DIAGNOSIS TABS\n    handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const { value } = e.target;\n\n        const self = this;\n\n        if (self.state.typingTimeout) {\n            clearTimeout(self.state.typingTimeout);\n        }\n        self.setState({\n            global_filter: value,\n            typing: true,\n            page: 0,\n            page_unapproved: 0,\n            typingTimeout: setTimeout(function () {\n\n                self.setState({\n                    typing: false,\n                    loading_state: true,\n                    no_data_message: `Searching for ICD10 codes`\n                });\n                if (self.state.activeLink === 'Unapproved Synonyms') {\n                    self.searchSynonyms(\n                        self.state.default_filters_unapproved,\n                        self.state.global_filter,\n                        self.state.limit_unapproved,\n                        0,\n                        self.state.default_sorting_unapproved\n                    )\n                } else if (self.state.activeLink === 'All Diagnosis') {\n                    self.setState({ activeTableSkip: 0, activeTableCurrentpage: 0 }, self.getActive);\n                }\n            }, 2000),\n        });\n    };\n\n    handleMenuClick = async (item) => {\n        this.setState({\n            activeLink: item\n        })\n    }\n\n\n\n\n    titleCase = (title: string) => {\n        var sentence: string[] = title.toLowerCase().split(\" \");\n        for (var i = 0; i < sentence.length; i++) {\n            sentence[i] = sentence[i][0].toUpperCase() + sentence[i].slice(1);\n        }\n        const output: string = sentence.join(\" \");\n        return output;\n    }\n\n\n\n\n    // FUNCTIONS FOR UNAPPROVED TAB - START\n    generateDataForUnapprovedTable(response: any) {\n        const table: any = {\n            formattedColumns: {\n                approve_disapprove_action: ['action'],\n                approve_disapprove_reset: ['reset'],\n            },\n            filterExtensions: [\n                {\n                    columnName: 'action',\n                    filteringEnabled: false,\n                    sortingEnabled: false,\n                },\n                {\n                    columnName: 'reset',\n                    filteringEnabled: false,\n                    sortingEnabled: false,\n                },\n            ],\n            columnExtensions: [\n                {\n                    columnName: 'full_code',\n                    width: 130,\n                    wordWrapEnabled: true,\n                },\n                {\n                    columnName: 'full_description',\n                    width: 295,\n                    wordWrapEnabled: true,\n                },\n                {\n                    columnName: 'title',\n                    width: 175,\n                    wordWrapEnabled: true,\n                },\n                {\n                    columnName: 'action',\n                    width: 200,\n                    wordWrapEnabled: true,\n                },\n                {\n                    columnName: 'reset',\n                    width: 125,\n                    wordWrapEnabled: true,\n                },\n            ],\n            columns: [\n                {\n                    name: 'full_code',\n                    title: 'ICD10 Code',\n                },\n                {\n                    name: 'full_description',\n                    title: 'Diagnosis',\n                },\n                {\n                    name: 'title',\n                    title: 'Synonyms',\n                },\n                {\n                    name: 'action',\n                    title: 'Action',\n                    sortingEnabled: false,\n                },\n                {\n                    name: 'reset',\n                    title: 'Reset',\n                    sortingEnabled: false,\n                    resetColumn: true,\n                },\n            ],\n            rows: [],\n        };\n        for (const cnt in response) {\n            const item = response[cnt];\n            const temp_row: any = {};\n            temp_row['_id'] = item['_id'];\n            temp_row['full_code'] = item['full_code'];\n            temp_row['full_description'] = item['full_description'];\n            temp_row['title'] = item['title'];\n            temp_row['action_chosen'] = this.handleGetAction(temp_row['_id']);\n            table['rows'].push(temp_row);\n        }\n        return table;\n    }\n\n    handleGetAction = (id: string) => {\n        const { unapproved_codes_actions } = this.state;\n        if (unapproved_codes_actions && unapproved_codes_actions.some(item => item._id === id)) {\n            const temp = unapproved_codes_actions.filter(item => item._id === id);\n            return temp[0]['action_chosen'];\n        }\n        return '';\n    }\n\n\n\n\n\n    changePageUpdateUnapproved = (limit: number, skip: number) => {\n        this.setState({\n            has_unsaved_changes: false,\n            loading_state: true,\n            no_data_message: `Searching for ICD10 codes`\n        }, this.handleCloseSideModalBlock);\n        this.searchSynonyms(\n            this.state.default_filters_unapproved,\n            this.state.global_filter,\n            limit,\n            skip,\n            this.state.default_sorting_unapproved\n        )\n    }\n\n\n    handleChangeSortingUnapproved = (sorting: any) => {\n        this.setState({\n            default_sorting_unapproved: sorting,\n            loading_state: true,\n            no_data_message: `Searching for ICD10 codes`\n        });\n        if (sorting && sorting.length > 0) {\n            this.searchSynonyms(\n                this.state.default_filters_unapproved,\n                this.state.global_filter,\n                this.state.limit_unapproved,\n                this.state.limit_unapproved * this.state.page_unapproved,\n                sorting\n            )\n        }\n    }\n\n    handleResetAll = () => {\n        console.log('RESET')\n        let table = this.state.code_data_unapproved;\n        if (!table || !table.rows) return;\n        let rows = table.rows;\n        if (rows && Array.isArray(rows)) {\n            rows.forEach(row => row['action_chosen'] = '');\n            table['rows'] = rows;\n            this.setState({ code_info_unapproved: table });\n        }\n        this.props.setICDSynonymAction([]);\n\n    }\n\n\n    handleFilterByColumnUnapproved = (filter: any) => {\n        console.log('FILTER', filter);\n        if (filter && Array.isArray(filter) && filter.some(item => item.columnName === 'reset')) {\n            this.handleResetAll();\n            return;\n        }\n        // if(!filter || filter.length === 0) return;\n        const self = this;\n\n        if (self.state.typingTimeout) {\n            clearTimeout(self.state.typingTimeout);\n        }\n\n        self.setState({\n            default_filters_unapproved: filter,\n            page_unapproved: 0,\n            typingTimeout: setTimeout(function () {\n                self.setState({\n                    loading_state: true,\n                    no_data_message: `Searching for ICD10 codes`\n                });\n                self.searchSynonyms(\n                    filter,\n                    self.state.global_filter,\n                    self.state.limit_unapproved,\n                    0,\n                    self.state.default_sorting_unapproved\n                )\n            }, 2000),\n        });\n    }\n\n    handlePageChangeUnapproved = (currentPage: number, skip: number) => {\n        this.setState({\n            page_unapproved: currentPage,\n        });\n        this.changePageUpdateUnapproved(this.state.limit, skip);\n    };\n\n\n\n    handlePageSizeChangeUnapproved = (value: number) => {\n        let pageLimit = 100000;\n\n        if (this.state.total_count_unapproved >= pageLimit) {\n            this.setState({\n                isPageSizeModal: true,\n            });\n        } else {\n            this.setState({\n                limit_unapproved: value,\n            });\n\n            this.changePageUpdateUnapproved(value, value * this.state.page_unapproved);\n        }\n    };\n\n\n\n\n\n    handleRadioClick = (row: number, action: string) => {\n        let unapproved_actions = this.state.unapproved_codes_actions;\n        const unapproved_rows = this.state.code_data_unapproved.rows;\n        const unapproved_row = unapproved_rows[row];\n\n        if (unapproved_actions && unapproved_actions.some(code => code._id === unapproved_row._id)) {\n            unapproved_actions = unapproved_actions.filter(code => code._id !== unapproved_row._id)\n        }\n\n        unapproved_actions.push({\n            _id: unapproved_row._id, action_chosen: action\n        });\n\n        this.props.setICDSynonymAction(unapproved_actions);\n    }\n\n    handleSaveUnapproved = () => {\n        const { unapproved_codes_actions } = this.state;\n        if (!unapproved_codes_actions) return;\n\n        const approve = unapproved_codes_actions.filter(code => code.action_chosen === 'approve').map(code => { return code._id });\n\n        const disapprove = unapproved_codes_actions.filter(code => code.action_chosen === 'disapprove').map(code => { return code._id });\n\n        console.log('APPROVE', approve, 'DISAPPROVE', disapprove);\n    }\n    // FUNCTIONS FOR UNAPPROVED TAB - END\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    // FUNCTIONS FOR ALL DIAGNOSIS TAB - START\n    handleClickRow = (row: any) => {\n\n        const { activeTableRows, has_unsaved_changes } = this.state;\n        if (!activeTableRows || activeTableRows[row] === this.state.code_info) return;\n\n        let data = activeTableRows[row];\n\n        if (has_unsaved_changes) {\n            const bool: boolean = this.state.side_modal_get_rows_trigger;\n            this.setState({\n                side_modal_get_rows_trigger: !bool,\n                confirm_modal_method: () => this.setState({ has_unsaved_changes: false }, () => this.handleClickRow(row))\n            });\n        } else {\n            this.setState({\n                code_info: data,\n            }, this.handleOpenBlock);\n        }\n\n    };\n\n    handleCloseSideModalBlock = () => {\n        if (this.state.has_unsaved_changes) {\n            const bool: boolean = this.state.side_modal_get_rows_trigger;\n            this.setState({\n                side_modal_get_rows_trigger: !bool,\n                confirm_modal_method: () => this.setState({ has_unsaved_changes: false }, this.handleCloseSideModalBlock)\n            });\n        } else {\n            this.setState({\n                show_side_modal_block: 'none',\n                side_modal_block_mode: '',\n            }, () => this.setState({ code_info: {} }));\n        }\n\n    };\n\n\n\n    handleOpenBlock = () => {\n        this.setState({\n            show_side_modal_block: 'block',\n        });\n    };\n\n\n    getActive = async () => {\n\n        this.setState({\n            loading_state: true\n        });\n\n        let icd10Active = await getActiveSynonyms(\n            this.state.activeTableFilter,\n            this.state.global_filter,\n            this.state.activeTableLimit,\n            this.state.activeTableSkip,\n            this.state.activeTableSort)\n            .catch(err => console.log(err));\n\n\n        if (icd10Active) {\n            if (icd10Active.result.length > 0)\n                icd10Active.result.map((d: any) => {\n                    d.synonyms =\n                        d && d.synonyms && Array.isArray(d.synonyms) &&\n                            d.synonyms.length > 0 ?\n                            d.synonyms.length > 2 ?\n                                `${d.synonyms[0]}, ${d.synonyms[1]}, ${d.synonyms.length - 2} more` : d.synonyms.join(', ') : 'N/A'\n                    d.full_synonyms = d && d.synonyms && Array.isArray(d.synonyms) && d.synonyms.length > 0 ? d.synonyms.join(', ') : 'N/A';\n                    d.status = d.status ? this.titleCase(d.status) : 'N/A';\n                });\n            this.setState({\n                activeTableRows: icd10Active.result,\n                activeTableCount: icd10Active.total.count,\n                activeTableCurrentpage: this.state.activeTableCurrentpage > (Math.ceil(icd10Active.total.count / this.state.activeTableLimit) - 1) ? (Math.ceil(icd10Active.total.count / this.state.activeTableLimit) - 1) : this.state.activeTableCurrentpage\n            })\n        }\n\n        this.setState({\n            loading_state: false\n        });\n    }\n\n    handleActiveFilter = (filter: any) => {\n        const self = this;\n\n        if (self.state.typingTimeout) {\n            clearTimeout(self.state.typingTimeout);\n        }\n\n        let where: any = {};\n\n        filter.map(d =>{\n            if(d.columnName !== 'status' || d.value !== 'all') \n                where[d.columnName] = { like: d.value, options: 'i' }\n        });\n\n        self.setState({\n            activeTableSkip: 0,\n            activeTableCurrentpage: 0,\n            activeTableFilter: where,\n            active_default_filter: filter,\n            typingTimeout: setTimeout(function () {\n                self.setState({\n                    no_data_message: `No available data`\n                });\n                self.getActive()\n            }, 2000),\n        });\n    }\n\n    handleActiveSorting = (value: any) => {\n        let filter = {\n            ...value[0],\n            direction: value[0].direction.toUpperCase()\n        }\n\n        if (filter['columnName'] === 'synonyms') filter['columnName'] = 'main_synonym';\n\n        let a = Object.values(filter).join(' ')\n\n        this.setState({\n            activeTableSort: [a]\n        }, this.getActive)\n    }\n\n    handleActivePageSizeChange = (value: any) => {\n        // @ts-ignore\n        this.setState({\n            activeTableLimit: value\n        }, this.getActive)\n    }\n\n    handleActiveCurrentPageChange = (value: any) => {\n        // @ts-ignore\n        this.setState({\n            activeTableSkip: value * this.state.activeTableLimit,\n            activeTableCurrentpage: value\n        }, this.getActive)\n    }\n    // FUNCTIONS FOR ALL DIAGNOSIS TAB - END\n\n\n\n\n\n    handleOpenConfirmationModalProps = (payload) => {\n        console.log(payload)\n        this.setState({\n            confirm_modal_open: true,\n            confirm_modal_title: \"Save Changes\",\n            confirm_modal_message: <span>Are you sure you want to proceed with the following changes? <br /><br />\n                {payload && payload.patch_synonyms && payload.patch_synonyms.some(data => data['status'] === 'active') ? (\n                    <>\n                        <b>Approve</b> <br />\n                        <ul>\n                            {payload.patch_synonyms.map(data => {\n                                if (data['status'] === 'active') {\n                                    return (\n                                        <>\n                                            <li>{data['title']}</li>\n                                        </>\n                                    )\n                                }\n                                return null\n                            })}\n                        </ul>\n                        <br />\n                    </>\n                ) : null}\n                {payload && payload.patch_synonyms && payload.patch_synonyms.some(data => data['status'] === 'inactive') ? (\n                    <>\n                        <b>Disapprove</b><br />\n                        <ul>\n                            {payload.patch_synonyms.map(data => {\n                                if (data['status'] === 'inactive') {\n                                    return (\n                                        <>\n                                            <li>{data['title']}</li>\n                                        </>\n                                    )\n                                }\n                                return null\n                            })}\n                        </ul>\n                        <br />\n                    </>\n                ) : null}\n            </span>,\n            confirm_modal_method: async () => {\n                await this.handleSaveUnapprovedPayload(payload);\n                this.handleCloseSideModalBlock();\n            }\n        });\n    }\n\n    handleConfirmationModalClose = () => {\n        this.setState({\n            unsaved_changes_modal: false,\n            confirm_modal_save_button: 'Save',\n            confirm_modal_open: false,\n        })\n    }\n\n    handleSaveUnapprovedPayload = async (payload) => {\n        this.handleConfirmationModalClose();\n        await patchSynonyms(JSON.stringify(payload)).catch(e => console.log(e));\n        this.setState({ has_unsaved_changes: false });\n        this.getActive();\n\n    }\n\n    addSynonym = (full_code, title, diagnosis_code) => {\n        const payload = constructAddSynonymPayload(full_code, title, diagnosis_code);\n        this.setState({ loading_state: true });\n        addSynonyms(JSON.stringify(payload)).then((resp: any) => {\n\n            if (!resp.error) {\n                this.setState({\n                    ...this.state,\n                    snackbarOpen: true,\n                    snackbarMessage: `New Synonym has been successfully added.`,\n                })\n            } else {\n                this.setState({\n                    snackbarOpen: true,\n                    snackbarMessage: 'Something went wrong. New Synoym was not added.',\n                })\n            }\n\n            this.getActive();\n            this.setState({ has_unsaved_changes: false }, this.handleCloseSideModalBlock)\n        }).catch(e => {\n            if (e.message && e.message.includes('\\n') && (e.message.match(/\\n/g) || []).length >= 2 && (e.message.includes('UM58') || e.message.includes('UM59') || e.message.includes('UM60'))) {\n                const messages: string[] = e.message.split('\\n');\n                const bracketIndexStart: number = messages[2].indexOf('[');\n                const bracketIndexEnd: number = messages[2].indexOf(']');\n                let message_comp: any = null;\n                if (bracketIndexStart && bracketIndexEnd) {\n                    let strong_str: string = messages[2].substring(bracketIndexStart, bracketIndexEnd + 1);\n                    const first_str: string = messages[2].split('[')[0];\n                    let temp: string[] = messages[2].split(']');\n                    const end_str: string = temp[temp.length - 1];\n                    message_comp = <span>{first_str}<strong>{strong_str}</strong>{end_str}</span>\n                } else {\n                    message_comp = <span>{messages[2]}</span>\n                }\n                if (messages[0] === 'Code UM59') {\n                    this.setState({\n                        confirm_modal_open: true,\n                        confirm_modal_message: message_comp,\n                        confirm_modal_title: messages[1],\n                        confirm_modal_save_button: 'Activate Synonym',\n                        confirm_modal_method: () => this.handleActivateDuplicateInactiveSynonym(messages[3])\n                    });\n                } else {\n                    this.setState({\n                        isModalOpen: true,\n                        modalTitle: messages[1],\n                        modalMessage: message_comp\n                    });\n                }\n            } else {\n                this.setState({\n                    snackbarOpen: true,\n                    snackbarMessage: 'Something went wrong. New Synoym was not added.',\n                })\n            }\n            this.getActive();\n            console.log(e);\n            this.setState({ has_unsaved_changes: false }, this.handleCloseSideModalBlock);\n        })\n    }\n\n\n    handleActivateDeactivate = async (payload: any) => {\n        await patchSynonyms(JSON.stringify(payload)).catch(e => console.log(e));\n        this.setState({ has_unsaved_changes: false });\n        this.getActive();\n    }\n\n\n    handleActivateDuplicateInactiveSynonym = (string_obj: string) => {\n        this.handleConfirmationModalClose();\n        if (!string_obj) return;\n        this.setState({ loading_state: true });\n        let duplicate: Icd10Synonym | null = null;\n        try {\n            duplicate = JSON.parse(string_obj);\n        } catch (e) {\n            console.log(e);\n        }\n        if (!duplicate) return;\n        duplicate['action_chosen'] = true;\n        const payload = constructActivateSynonymPayload([duplicate]);\n        this.handleActivateDeactivate(payload);\n    }\n\n    handleOpenUnsavedChangesModal = () => {\n        this.setState({ unsaved_changes_modal: true },\n            () => this.setState({\n                confirm_modal_open: true,\n                confirm_modal_message: this.createUnsavedChangesModalBody(),\n                confirm_modal_title: 'Are you sure you want to leave this page?',\n            }))\n    }\n\n    createUnsavedChangesModalBody = () => {\n        const { side_modal_active_link, side_modal_rows } = this.state;\n        console.log('SIDE MODAL', side_modal_active_link, side_modal_rows);\n        let body_list1: any = null;\n        let body_list2: any = null;\n        if (side_modal_active_link === 'Unapproved') {\n            const approve_rows: Icd10Synonym[] = side_modal_rows.filter(row => row.action_chosen === 'approve');\n            const disapprove_rows: Icd10Synonym[] = side_modal_rows.filter(row => row.action_chosen === 'disapprove');\n            body_list1 = approve_rows.length ? this.getBodyList(approve_rows, 'Approve') : null;\n            body_list2 = disapprove_rows.length ? this.getBodyList(disapprove_rows, 'Disapprove') : null;\n        } else if (side_modal_active_link === 'Approved') {\n            const deactivate_rows: Icd10Synonym[] = side_modal_rows.filter(row => row.action_chosen);\n            body_list1 = deactivate_rows.length ? this.getBodyList(deactivate_rows, 'Deactivate') : null;\n        } else if (side_modal_active_link === 'Inactive') {\n            const activate_rows: Icd10Synonym[] = side_modal_rows.filter(row => row.action_chosen);\n            body_list1 = activate_rows.length ? this.getBodyList(activate_rows, 'Activate') : null;\n        }\n        return (\n            <span>\n                You still have unsaved changes. Do you want to save them? Your changes will be lost if you leave without saving.\n                <br />\n                {body_list1 ? (<><br />{body_list1}</>) : null}\n                {body_list2 ? (<><br />{body_list2}</>) : null}\n            </span>\n        );\n    }\n\n    getBodyList = (rows: Icd10Synonym[], action: string) => {\n        return (\n            <span>\n                {rows ? (\n                    <>\n                        <b>{action}</b> <br />\n                        <ul key={action + ' list'}>\n                            {rows.map(row => {\n                                return (\n                                    <li key={row.title}>{row['title']}</li>\n                                )\n                            })}\n                        </ul>\n                        <br />\n                    </>\n                ) : null}\n            </span>\n        )\n    }\n\n    saveChanges = async () => {\n        const { side_modal_active_link, side_modal_rows } = this.state;\n        this.setState({ loading_state: true })\n        if (side_modal_active_link === 'Unapproved') {\n            const payload = constructUnapprovedSynonymPayload(side_modal_rows);\n            await this.handleSaveUnapprovedPayload(payload);\n        } else if (side_modal_active_link === 'Approved') {\n            const payload = constructDeactivateSynonymPayload(side_modal_rows);\n            await this.handleActivateDeactivate(payload);\n        } else if (side_modal_active_link === 'Inactive') {\n            const payload = constructActivateSynonymPayload(side_modal_rows);\n            await this.handleActivateDeactivate(payload);\n        }\n        if (this.state.confirm_modal_method) {\n            try {\n                this.state.confirm_modal_method();\n            } catch (e) {\n                console.log(e);\n            }\n        }\n        this.handleConfirmationModalClose();\n    }\n\n    discardAndContinue = () => {\n        this.setState({ has_unsaved_changes: false }, () => {\n            if (this.state.confirm_modal_method) {\n                try {\n                    this.state.confirm_modal_method();\n                } catch (e) {\n                    console.log(e);\n                }\n            }\n            this.handleConfirmationModalClose();\n        });\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    /***********************  \n         RENDER SECTIONS \n    ***********************/\n\n    renderSideModalBlock(): JSX.Element {\n\n        return (\n            <SideModalBlock\n                handleClose={this.handleCloseSideModalBlock}\n                showBlock={this.state.show_side_modal_block}\n                blockPosition={'fixed'}\n                title={this.state.block_title}\n            >\n                <AddSynonymsBody\n                    activeLink={this.state.side_modal_active_link}\n                    setActiveLink={(activelink: string) => this.setState({ side_modal_active_link: activelink })}\n                    hasUnsavedChanges={this.state.has_unsaved_changes}\n                    setHasUnsavedChanges={(bool: boolean) => this.setState({ has_unsaved_changes: bool })}\n                    onClose={this.handleCloseSideModalBlock}\n                    data={this.state.code_info}\n                    addSynonym={(full_code: string, title: string, diagnosis_code: string) => {\n                        this.addSynonym(full_code, title, diagnosis_code);\n                    }}\n                    patchSynonyms={async (rows: any) => {\n                        const payload = constructUnapprovedSynonymPayload(rows);\n                        this.handleOpenConfirmationModalProps(payload)\n                    }}\n                    deactivateSynonyms={async (rows: any) => {\n                        this.setState({ loading_state: true });\n                        const payload = constructDeactivateSynonymPayload(rows);\n                        await this.handleActivateDeactivate(payload);\n                        this.handleCloseSideModalBlock();\n                    }}\n                    activateSynonyms={async (rows: any) => {\n                        this.setState({ loading_state: true });\n                        const payload = constructActivateSynonymPayload(rows);\n                        await this.handleActivateDeactivate(payload);\n                        this.handleCloseSideModalBlock();\n                    }}\n                    getRowsForUnsavedChanges={(rows: Icd10Synonym[]) => this.setState({ side_modal_rows: rows }, this.handleOpenUnsavedChangesModal)}\n                    getRowsTrigger={this.state.side_modal_get_rows_trigger}\n                    changeTabUnsaved={(item: string) => {\n                        const bool: boolean = this.state.side_modal_get_rows_trigger;\n                        this.setState({\n                            side_modal_get_rows_trigger: !bool,\n                            confirm_modal_method: () => this.setState({ side_modal_active_link: item })\n                        });\n                    }}\n                />\n            </SideModalBlock>\n        )\n    }\n\n    render(): JSX.Element {\n        const { classes } = this.props;\n\n        return (\n            <div>\n                {this.state.loading_state ? <Loader /> : null}\n                <Grid container>\n\n                    <Grid container item xs={12} md={12} style={{ paddingLeft: '37px' }}>\n                        <Grid container>\n                            <Grid item xs={12} md={12}>\n                                <TextField\n                                    style={{ width: '100%', backgroundColor: 'white' }}\n                                    id=\"code_search\"\n                                    placeholder=\"Search code, description, or synonym\"\n                                    label=\"\"\n                                    margin=\"none\"\n                                    fullWidth\n                                    variant=\"outlined\"\n                                    value={this.state.global_filter}\n                                    onKeyUp={(event) => {\n                                        let code = event.keyCode || event.which\n                                        if (code == 13 && this.state.typing && this.state.global_filter) {\n                                            if (this.state.typingTimeout) {\n                                                clearTimeout(this.state.typingTimeout);\n                                            }\n                                            this.setState({\n                                                page_unapproved: 0,\n                                                loading_state: true,\n                                                typing: false,\n                                                no_data_message: `Searching for ICD10 codes`\n                                            });\n                                            if (this.state.activeLink === 'Unapproved Synonyms') {\n                                                this.searchSynonyms(\n                                                    this.state.default_filters_unapproved,\n                                                    this.state.global_filter,\n                                                    this.state.limit_unapproved,\n                                                    0,\n                                                    this.state.default_sorting_unapproved\n                                                )\n                                            } else if (this.state.activeLink === 'All Diagnosis') {\n                                                this.setState({ activeTableSkip: 0, activeTableCurrentpage: 0 }, this.getActive);\n                                                // this.getActive();\n                                            }\n\n                                        }\n                                    }}\n                                    inputProps={{ 'aria-label': 'bare' }}\n                                    onChange={this.handleSearch}\n                                    InputProps={{\n                                        startAdornment: (\n                                            <InputAdornment position=\"start\">\n                                                <Search style={{ color: 'rgba(54, 54, 54, 0.4)' }} />\n                                            </InputAdornment>\n                                        ),\n                                    }}\n                                />\n                            </Grid>\n\n\n\n                            <Grid item xs={12} md={12} style={{ paddingRight: '8px', marginTop: 15 }}>\n                                <Grid item xs={12} md={12} style={{ marginLeft: '15px' }}>\n                                    <ul style={{ padding: '0', margin: '0' }}>\n                                        {this.state.menuTabs.map((item, i) => (\n                                            <li key={`${item}-${i}`} className={classes.menuList}>\n                                                <Link\n                                                    className={this.state.activeLink === item ? classes.LinkActive : classes.menuLink}\n                                                    onClick={() => this.handleMenuClick(item)}>\n                                                    {item}\n                                                </Link>\n                                            </li>\n                                        ))\n                                        }\n                                    </ul>\n                                </Grid>\n                                <Grid item xs={6} md={6}></Grid>\n                            </Grid>\n\n                            {this.state.activeLink === 'All Diagnosis' ? (\n                                <>\n                                    <GridHorizontalDivider height=\"30px\" />\n                                    <Grid style={{ overflow: 'auto' }}>\n                                        <TableComponent\n                                            id=\"tab-all\"\n                                            totalCount={this.state.activeTableCount}\n                                            update={this.changePageUpdateUnapproved}\n                                            updateSorting={this.handleActiveSorting}\n                                            rows={this.state.activeTableRows}\n                                            columns={this.state.activeTableColumns.columns}\n                                            message={\n                                                this.state.global_filter\n                                                    ? 'No available data'\n                                                    : this.state.no_data_message\n                                            }\n                                            onClickRow={this.handleClickRow}\n                                            columnExtensions={\n                                                Object.keys(this.state.activeTableColumns).length > 0\n                                                    ? this.state.activeTableColumns['columnExtensions']\n                                                    : []\n                                            }\n                                            disableSelect\n                                            disableSearch\n                                            onFilterChange={this.handleActiveFilter}\n                                            onSortingChange={this.handleActiveSorting}\n                                            onPageChange={this.handleActiveCurrentPageChange}\n                                            ongPageSizeChange={this.handleActivePageSizeChange}\n                                            defaultFilter={this.state.active_default_filter}\n                                            currentPage={this.state.activeTableCurrentpage}\n                                            limit={this.state.activeTableLimit}\n                                            pageSizes={[10, 25, 50, 100]}\n                                            disableIntegratedFiltering={true}\n                                        />\n                                    </Grid>\n                                </>\n                            ) : null}\n                            {this.state.activeLink === 'Unapproved Synonyms' ? (\n                                <>\n\n                                    <GridHorizontalDivider height=\"30px\" />\n                                    <Grid style={{ minHeight: 690, overflow: 'auto' }}>\n                                        <TableComponent\n                                            id=\"tab-unapproved\"\n                                            totalCount={this.state.total_count_unapproved}\n                                            update={this.changePageUpdateUnapproved}\n                                            updateSorting={this.handleChangeSortingUnapproved}\n                                            rows={\n                                                Object.keys(this.state.code_data_unapproved).length > 0\n                                                    ? this.state.code_data_unapproved['rows']\n                                                    : []\n                                            }\n                                            columns={\n                                                Object.keys(this.state.code_data_unapproved).length > 0\n                                                    ? this.state.code_data_unapproved['columns']\n                                                    : []\n                                            }\n                                            message={\n                                                this.state.global_filter\n                                                    ? 'No available data'\n                                                    : this.state.no_data_message\n                                            }\n                                            onClickRow={() => { }}\n                                            disableSelect\n                                            disableSearch\n                                            formattedColumns={\n                                                Object.keys(this.state.code_data_unapproved).length > 0\n                                                    ? this.state.code_data_unapproved['formattedColumns']\n                                                    : {}\n                                            }\n                                            columnExtensions={\n                                                Object.keys(this.state.code_data_unapproved).length > 0\n                                                    ? this.state.code_data_unapproved['columnExtensions']\n                                                    : []\n                                            }\n                                            filterExtensions={\n                                                Object.keys(this.state.code_data_unapproved).length > 0\n                                                    ? this.state.code_data_unapproved['filterExtensions']\n                                                    : []\n                                            }\n                                            onFilterChange={this.handleFilterByColumnUnapproved}\n                                            onSortingChange={this.handleChangeSortingUnapproved}\n                                            onPageChange={this.handlePageChangeUnapproved}\n                                            ongPageSizeChange={this.handlePageSizeChangeUnapproved}\n                                            defaultFilter={this.state.default_filters_unapproved}\n                                            currentPage={this.state.page_unapproved}\n                                            limit={this.state.limit_unapproved}\n                                            pageSizes={[10, 25, 50, 100]}\n                                            approveDisapproveItems={this.state.unapproved_codes_actions}\n                                            onSelectedRadio={(row: number, value: string) => {\n                                                this.handleRadioClick(row, value);\n                                            }}\n                                            onSelectedReset={(row: any) => {\n                                                console.log('ROW', row, this.state.code_data_unapproved['rows'][row]);\n                                                const synonym: Icd10Synonym = this.state.code_data_unapproved['rows'][row];\n                                                if (!synonym._id) return;\n                                                const { unapproved_codes_actions } = this.state;\n                                                const temp = unapproved_codes_actions.filter(row => row._id !== synonym._id);\n                                                this.props.setICDSynonymAction(temp);\n                                            }}\n                                        />\n                                        <GridHorizontalDivider height=\"30px\" />\n                                        <div>\n                                            <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n                                                <Button\n                                                    style={{ width: '130px' }}\n                                                    onClick={this.handleSaveUnapproved}\n                                                    variant=\"contained\"\n                                                    color=\"primary\"\n                                                    disabled={this.state.unapproved_codes_actions && this.state.unapproved_codes_actions.length ? false : true}\n                                                >\n                                                    {this.state.confirm_modal_save_button}\n                                                </Button>\n                                            </div>\n                                        </div>\n                                    </Grid>\n                                </>\n                            ) : null}\n                        </Grid>\n                    </Grid>\n                </Grid>\n\n\n                {this.renderSideModalBlock()}\n\n                <MsgModal\n                    onClose={() => {\n                        this.setState({\n                            isModalOpen: false,\n                        })\n                    }}\n                    title={this.state.modalTitle}\n                    isModalOpen={this.state.isModalOpen}\n                    message={this.state.modalMessage}\n                    messageMaxWidth={this.state.modalMessageMaxWidth}\n                />\n                <ModalComponent\n                    titleFontSize={16}\n                    isModalOpen={this.state.confirm_modal_open}\n                    onClose={this.handleConfirmationModalClose}\n                    message={this.state.confirm_modal_message}\n                    title={this.state.confirm_modal_title}\n                    buttons=\n                    {this.state.unsaved_changes_modal ? (\n                        <Grid container justify=\"center\" alignItems=\"center\">\n                            <Grid item xs={5}>\n                                <Button\n                                    onClick={this.saveChanges}\n                                    style={{\n                                        margin: '0 10px',\n                                        minHeight: '42px',\n                                        minWidth: '150px',\n                                        fontSize: 14\n                                    }}\n                                    variant={'contained'}\n                                    color={'primary'}>\n                                    Save Changes\n                                </Button>\n                            </Grid>\n                            <Grid item xs={7}>\n                                <Button\n                                    onClick={this.discardAndContinue}\n                                    style={{\n                                        margin: '0 10px',\n                                        minHeight: '42px',\n                                        minWidth: '200px',\n                                        fontSize: 14\n                                    }}\n                                    variant={'outlined'}\n                                    color={'secondary'}>\n                                    Discard and Continue\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    ) : (\n                            <Grid container justify=\"center\" alignItems=\"center\">\n                                <Grid item xs={6}>\n                                    <Button\n                                        onClick={this.handleConfirmationModalClose}\n                                        style={{\n                                            margin: '0 10px',\n                                            minHeight: '42px',\n                                            minWidth: '150px',\n                                            fontSize: 14\n                                        }}\n                                        variant={'outlined'}\n                                        color={'secondary'}>\n                                        Cancel\n                            </Button>\n                                </Grid>\n                                <Grid item xs={6}>\n                                    <Button\n                                        onClick={this.state.confirm_modal_method}\n                                        style={{\n                                            margin: '0 10px',\n                                            minHeight: '42px',\n                                            minWidth: '150px',\n                                            fontSize: 14\n                                        }}\n                                        variant={'contained'}\n                                        color={'primary'}>\n                                        {this.state.confirm_modal_save_button ? this.state.confirm_modal_save_button : 'Save'}\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        )}\n\n\n                />\n\n\n                <Snackbar\n                    anchorOrigin={{\n                        vertical: 'top',\n                        horizontal: 'right',\n                    }}\n                    open={this.state.snackbarMessage ? true : false}\n                    autoHideDuration={6000}\n                    message={this.state.snackbarMessage}\n                    onClose={() => {\n                        this.setState({ snackbarMessage: null });\n                    }}\n                />\n\n\n            </div>\n        );\n    }\n}\n","import Fetch, { requestOption } from '../index'\n\nconst fetch = new Fetch();\nfetch.getAccessToken();\n\nexport const searchDoctorSpecialization = (limit: number, offset: number, filters: any, query: string, sorting?: any) => {\n    \n    let uri_obj: any = {};\n    let uri_string: string = `doctor-specialization/search`;\n    let filter = {};\n    if (filters && Array.isArray(filters) && filters.length > 0) {\n        filter['where'] = {};\n        filters.forEach(item => {\n            if (item['columnName'] === 'status' && item['value'] === 'all') \n                console.log('do nothing')\n            else if (item['columnName'] !== 'effectivity_date' && item['columnName'] !== 'expiry_date')\n                filter['where'][item['columnName']] = { like: item['value'], options: 'i' }\n            else\n                filter['where'][item['columnName']] = item['value']\n        });\n    }\n\n    if (sorting && Array.isArray(sorting) && sorting.length > 0)\n        filter['order'] = `${sorting[0]['columnName']} ${sorting[0]['direction']}`;\n\n    if (offset) filter['skip'] = offset;\n\n    if (limit) filter['limit'] = limit;\n\n    if (query) uri_obj['search'] = query;\n\n    if (Object.entries(filter).length > 0) uri_obj['filter'] = JSON.stringify(filter);\n\n    let i = 0;\n    for (let key of Object.keys(uri_obj)) {\n        if (!i) uri_string += '?';\n        else uri_string += '&';\n        uri_string += `${key}=${uri_obj[key]}`;\n        i += 1;\n    }\n\n    let option: requestOption = {\n        method: 'GET'\n    }\n\n    if (fetch.getAccessToken()) return fetch.call(option, uri_string, true);\n    \n    return fetch.fetchAccessToken().then(() => fetch.call(option, uri_string, true))\n}\n\n\nexport const editDoctorSpecialization = (payload: any, id: string) => {\n\n    let option: requestOption = {\n        method: 'PUT',\n        body: payload\n    }\n\n    if (fetch.getAccessToken()) return fetch.call(option, `doctor-specialization/edit/${id}`, true);\n    \n    return fetch.fetchAccessToken().then(() => fetch.call(option, `doctor-specialization/edit/${id}`, true))\n}","import { cloneDeep } from 'lodash';\nimport { SIDE_MODAL_BLOCK_FIELDS } from 'Components/UI/SideModalBlock/FieldConstants';\nimport moment from 'moment';\nimport React from 'react';\nimport { TableComponent } from 'Components/UI/TableComponent/CodeListTable';\nimport { Search } from '@material-ui/icons/';\nimport { Loader } from '../Loader';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { ConfirmationModal } from '../ConfirmationModal';\nimport { DoctorSpecialization } from '../../LookupModels';\n\nimport {\n  constructEmptyDoctorSpecialization,\n  constructDoctorSpecialization,\n  constructPutDoctorSpecialization\n} from '../ConstructPayloads';\nimport {\n  searchDoctorSpecialization,\n  editDoctorSpecialization\n} from 'Pages/API/Calls/DoctorSpecialization';\nimport {\n  TextField,\n  InputAdornment,\n  Grid,\n  Link\n} from '@material-ui/core';\nimport {\n  GridHorizontalDivider,\n  SideModalBlock,\n  SideModalBody,\n  MsgModal\n} from 'Components/UI';\n\n\nconst DEV_MODE: boolean = false;\nconst HIDE_EDIT_MODE: boolean = false;\n\nconst table_specs: any = {\n  formattedColumns: {},\n  columnExtensions: [\n    {\n      columnName: 'code',\n      width: 100,\n      wordWrapEnabled: true,\n    },\n    {\n      columnName: 'description',\n      width: 300,\n      wordWrapEnabled: true,\n    },\n    {\n      columnName: 'effectivity_date',\n      width: 180,\n      wordWrapEnabled: true,\n    },\n    {\n      columnName: 'expiry_date',\n      width: 180,\n      wordWrapEnabled: true,\n    },\n    {\n      columnName: 'status',\n      width: 200,\n      wordWrapEnabled: true,\n    },\n  ],\n  columns: [\n    {\n      name: 'code',\n      title: 'Code',\n    },\n    {\n      name: 'description',\n      title: 'Description',\n    },\n    {\n      name: 'effectivity_date',\n      title: 'Effectivity Date',\n      datePicker: true\n    },\n    {\n      name: 'expiry_date',\n      title: 'Expiration Date',\n      datePicker: true\n    },\n    {\n      name: 'status',\n      title: 'Status',\n      staticDropdown: true,\n      staticDropdownOptions: [\n        {\n          value: 'all',\n          label: 'All',\n        },\n        {\n          value: 'active',\n          label: 'Active'\n        },\n        {\n          value: 'deactivated',\n          label: 'Deactivated'\n        },\n        {\n          value: 'awaiting activation',\n          label: 'Awaiting activation'\n        }\n      ]\n    },\n  ],\n};\n\n\n\ninterface IState {\n\n  // confirmation modal essentials\n  confirm_modal_title: string;\n  confirm_modal_message: string;\n  confirm_modal_open: boolean;\n  action_after_confirm: () => void;\n\n\n  // notif modal essentials\n  isModalOpen: boolean;\n  modalTitle: string;\n  modalMessage: any;\n\n\n  // side modal essentials\n  invalid_fields: string[];\n  block_title?: string;\n  show_side_modal_block?: string;\n  side_modal_block_mode: 'view' | 'edit' | 'add' | '';\n  disableSaveButton: boolean;\n  clickSaveButton: boolean;\n  code_info?: DoctorSpecialization;\n  code_response: any;\n\n\n  // table and page essentials\n  code_data: DoctorSpecialization[];\n  global_filter: string;\n  default_filters: any;\n  default_sorting: any;\n  totalCount: number;\n  typing: boolean;\n  typingTimeout: any;\n  page: number;\n  limit: number;\n  isPageSizeModal: boolean;\n  loading_state: boolean;\n  no_data_message: string;\n}\n\ninterface IProps {\n  classes: any;\n}\n\nexport class DoctorSpecializationSection extends React.Component<IProps, IState> {\n  private requiredFields: any;\n  private excludeFields: any;\n\n  constructor(props) {\n    super(props);\n\n    this.requiredFields = SIDE_MODAL_BLOCK_FIELDS.DoctorSpecialization.editOrAdd.checkInvalidFields;\n    this.excludeFields = SIDE_MODAL_BLOCK_FIELDS.DoctorSpecialization.editOrAdd.excludeFields\n\n\n    this.state = {\n      no_data_message: '',\n\n\n      // confirmation modal essentials\n      confirm_modal_title: '',\n      confirm_modal_message: '',\n      confirm_modal_open: false,\n      action_after_confirm: () => { },\n\n\n      // notif modal essentials\n\n\n\n      // side modal essentials\n      invalid_fields: [],\n      code_response: [],\n      code_info: constructEmptyDoctorSpecialization(),\n      show_side_modal_block: 'none',\n      side_modal_block_mode: '',\n      block_title: '',\n\n\n      // table and page essentials\n      loading_state: true,\n      code_data: [],\n      global_filter: '',\n      default_filters: [],\n      default_sorting: [\n        {\n          columnName: 'code',\n          direction: 'asc'\n        }\n      ],\n      isModalOpen: false,\n      isPageSizeModal: false,\n      modalTitle: '',\n      modalMessage: '',\n      totalCount: 0,\n      typing: false,\n      typingTimeout: 0,\n      page: 0,\n      limit: 10,\n      disableSaveButton: false,\n      clickSaveButton: false,\n    };\n  }\n\n  componentDidMount() {\n    this.initialData();\n\n    document.addEventListener('keydown', this.escFunction, false);\n  }\n\n  escFunction = (event) => {\n    if (event.keyCode === 27) {\n      this.handleCloseSideModalBlock()\n    }\n  }\n\n  initialData = () => {\n    this.setState({ no_data_message: `Searching for Doctor Specialization Codes` })\n    this.searchCode(\n      10,\n      0,\n      this.state.default_filters,\n      this.state.global_filter,\n      this.state.default_sorting)\n  };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  /***********************  \n       CRUD FUNCTIONS \n  ***********************/\n\n  searchCode = (\n    limit: number,\n    skip: number,\n    filters: any,\n    filters_global: any,\n    sorting: any) => {\n\n    searchDoctorSpecialization(limit, skip, filters, filters_global, sorting).then(response => {\n      this.setState({ no_data_message: 'No available data' })\n      if (response && response.error === undefined) {\n        this.setState({\n          code_response: response,\n          code_data: this.rowDataFixer(response.result ? response.result : []),\n          loading_state: false,\n          totalCount: response.total && response.total.count ? response.total.count : 0,\n        });\n      } else {\n        this.setState({\n          code_response: [],\n          loading_state: false,\n          isModalOpen: true,\n          modalTitle: 'Loading failed',\n          modalMessage: 'An error occured while loading the list of codes.',\n        });\n      }\n    }).catch(e => {\n      this.setState({\n        no_data_message: 'No available data',\n        code_response: [],\n        loading_state: false,\n        isModalOpen: true,\n        modalTitle: 'Loading failed',\n        modalMessage: e && e.message ? e.message : 'An error occured while loading the list of codes.',\n        page: 0,\n      });\n    });\n  }\n\n\n  patchCode = (data: any) => {\n    const payload: DoctorSpecialization = constructPutDoctorSpecialization(data);\n\n    if(!payload || !payload._id || !payload.code) return;\n\n    this.setState({\n      loading_state: true,\n    });\n\n    \n    editDoctorSpecialization(JSON.stringify(payload), payload._id).then(response => {\n      this.setState({\n        loading_state: false,\n        no_data_message: 'No available data'\n      })\n      if (response && response.error === undefined && response.message !== undefined) {\n        this.changePageUpdate(this.state.limit, this.state.limit * this.state.page);\n        this.setState({\n          disableSaveButton: true,\n          isModalOpen: true,\n          modalTitle: 'Success',\n          modalMessage: response.message ? response.message : `Successfully edited a Doctor Specialization code.`\n        });\n      } else {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'Failed',\n          modalMessage: 'Something went wrong while saving!'\n        });\n      }\n    }).catch(error => {\n      this.setState({\n        isModalOpen: true,\n        modalTitle: 'Error',\n        modalMessage: error && error.message ? error.message : 'Something went wrong while saving.',\n        loading_state: false\n      });\n    });\n  }\n\n\n\n  // addCodes = (data: any) => {\n  //   this.setState({\n  //     loading_state: true\n  //   })\n\n  //   const payload: Icd10[] = constructPostIcd10(data)\n  //   let full_code: string = '';\n  //   if(payload && payload.length > 0) full_code = payload[0].full_code;\n  //   addICD10Codes(JSON.stringify(payload)).then(response => {\n  //     this.setState({\n  //       loading_state: false\n  //     })\n  //     if (response && response.error === undefined && response.message && response.result) {\n  //       this.changePageUpdate(this.state.limit, this.state.limit * this.state.page)\n  //       this.addCodeIndexdb(response.result)\n  //       this.setState({\n  //         disableSaveButton: true,\n  //         isModalOpen: true,\n  //         modalTitle: 'Success',\n  //         modalMessage: `You have successfully added ${response.result.length} ICD10 code/s!`\n  //       });\n  //     } else if (response && response.error && response.error.statusCode === 401) {\n  //       this.setState({\n  //         isModalOpen: true,\n  //         modalTitle: 'Unauthorized',\n  //         modalMessage: 'You are not authorized to add ICD10 codes.'\n  //       });\n  //     } else if (response && response.error && response.error.statusCode === 400 && response.error.message) {\n  //       this.setState({\n  //         isModalOpen: true,\n  //         modalTitle: 'ICD10 Code Already Exists',\n  //         modalMessage: (<span><strong>[{full_code}]</strong> cannot be added. This already exists on the list.</span>),\n  //       });\n  //     }\n  //     else {\n  //       this.setState({\n  //         isModalOpen: true,\n  //         modalTitle: 'Failed',\n  //         modalMessage: 'Something went wrong while adding!'\n  //       });\n  //     }\n  //   }).catch(error => {\n  //     if (error == 'Error: This code already exists.') {\n  //       this.setState({\n  //         isModalOpen: true,\n  //         modalTitle: 'ICD10 Code Already Exists',\n  //         modalMessage: (<span><strong>[{full_code}]</strong> cannot be added. This already exists on the list.</span>),\n  //         loading_state: false\n  //       });\n  //     } else {\n  //       this.setState({\n  //         isModalOpen: true,\n  //         modalTitle: 'Failed',\n  //         modalMessage: 'Something went wrong while saving!',\n  //         loading_state: false\n  //       });\n  //     }\n  //   });\n\n  // }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  /***********************  \n  TABLE AND PAGE FUNCTIONS \n  ***********************/\n\n  rowDataFixer(rows: any) {\n\n    const dateFormatter = (date: Date | string | null | undefined) => {\n      if (!date || !moment(date).isValid()) return 'N/A';\n      return moment(date).format('LL');\n    }\n\n    const titleCase = (title: string) => {\n      if (!title) return 'N/A';\n      var sentence: string[] = title.toLowerCase().split(\" \");\n      for (var i = 0; i < sentence.length; i++) {\n        sentence[i] = sentence[i][0].toUpperCase() + sentence[i].slice(1);\n      }\n      const output: string = sentence.join(\" \");\n      return output;\n    }\n\n    let generatedTable: DoctorSpecialization[] = [];\n\n    if (Array.isArray(rows) && rows.length > 0) {\n      generatedTable = rows.map(row => {\n        if (!row) return constructEmptyDoctorSpecialization();\n        const docSpec: DoctorSpecialization = {\n          _id: row['_id'],\n          code: row['code'] ? row['code'] : 'N/A',\n          description: row['description'] ? row['description'] : 'N/A',\n          effectivity_date: dateFormatter(row['effectivity_date']),\n          expiry_date: dateFormatter(row['expiry_date']),\n          status: row['status'] ? titleCase(row['status']) : 'N/A',\n          date_updated: row['date_updated'] ? row['date_updated'] : 'N/A',\n        };\n        return docSpec;\n      });\n    }\n\n    return generatedTable;\n  }\n\n\n\n\n\n\n\n  changePageUpdate = (limit: number, skip: number) => {\n    this.handleCloseSideModalBlock();\n    this.setState({\n      loading_state: true,\n      no_data_message: `Searching for Doctor Specialization codes`\n    });\n    this.searchCode(\n      limit,\n      skip,\n      this.state.default_filters,\n      this.state.global_filter,\n      this.state.default_sorting)\n  };\n\n\n\n\n\n\n  handleChangeSorting = (sorting: any) => {\n    this.setState({\n      default_sorting: sorting,\n      loading_state: true,\n      no_data_message: `Searching for Doctor Specialization codes`\n    });\n    if (sorting && sorting.length > 0) {\n      this.searchCode(\n        this.state.limit,\n        this.state.page * this.state.limit,\n        this.state.default_filters,\n        this.state.global_filter,\n        sorting,\n      )\n    }\n  };\n\n\n\n\n\n  handleFilterByColumn = (filter: any) => {\n    const self = this;\n\n    if (self.state.typingTimeout) {\n      clearTimeout(self.state.typingTimeout);\n    }\n\n    self.setState({\n      default_filters: filter,\n      typing: false,\n      page: 0,\n      typingTimeout: setTimeout(function () {\n        self.setState({\n          loading_state: true,\n          no_data_message: `Searching for Doctor Specialization codes`\n        });\n        self.searchCode(\n          self.state.limit,\n          0,\n          filter,\n          self.state.global_filter,\n          self.state.default_sorting,\n        )\n      }, 2000),\n    });\n  };\n\n  handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n\n    const self = this;\n\n    if (self.state.typingTimeout) {\n      clearTimeout(self.state.typingTimeout);\n    }\n    self.setState({\n      global_filter: value,\n      typing: true,\n      page: 0,\n      typingTimeout: setTimeout(function () {\n        self.setState({\n          loading_state: true,\n          typing: false,\n          limit: 10,\n          no_data_message: `Searching for Doctor Specialization codes`\n        });\n        self.searchCode(\n          self.state.limit,\n          0,\n          self.state.default_filters,\n          self.state.global_filter,\n          self.state.default_sorting,\n        )\n\n      }, 2000),\n    });\n  };\n\n\n\n\n\n  handleClickRow = (row: any) => {\n\n    if(DEV_MODE) return;\n\n    // console.log(row)\n    const { code_data } = this.state;\n    if (!code_data || !code_data[row]) return;\n\n    const data: DoctorSpecialization = constructDoctorSpecialization(cloneDeep(code_data[row]));\n    this.checkFields(data, true)\n    this.setState({\n      code_info: data,\n    }, () => this.handleChangeSideModalBlockMode('view'));\n  };\n\n\n\n\n\n  handlePageChange = (currentPage: number, skip: number) => {\n    this.setState({\n      page: currentPage,\n    });\n    this.changePageUpdate(this.state.limit, skip);\n  };\n\n\n\n\n  handlePageSizeChange = value => {\n    let pageLimit = 100000;\n\n    if (this.state.totalCount >= pageLimit) {\n      this.setState({\n        isPageSizeModal: true,\n      });\n    } else {\n      this.setState({\n        limit: value,\n      });\n\n      this.changePageUpdate(value, value * this.state.page);\n    }\n  };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  /*****************************  \n  ACTIONS / SIDE MODAL FUNCTIONS \n  ******************************/\n\n  handleCloseSideModalBlock = () => {\n    this.setState({\n      show_side_modal_block: 'none',\n      side_modal_block_mode: '',\n      code_info: constructEmptyDoctorSpecialization(),\n    });\n  };\n\n\n\n\n\n  handleChangeSideModalBlockMode = (value: 'view' | 'edit' | 'add' | '') => {\n    let title = ``;\n    if (value && value === 'edit') {\n      if(HIDE_EDIT_MODE) return;\n      title = `Edit ${this.state.block_title}`;\n    } else if (value && value === 'view' && this.state.code_info) {\n      title = this.state.code_info['code'] ? this.state.code_info['code'] : '';\n    } else if (value && value === 'add') {\n      title = `Add ICD10 Code`;\n    }\n    this.setState({\n      side_modal_block_mode: value,\n      block_title: title,\n    }, this.handleOpenBlock);\n  };\n\n\n\n\n\n  handleOpenBlock = () => {\n    this.setState({\n      show_side_modal_block: 'block',\n    });\n  };\n\n\n\n\n  handleInvalidFieldsPrompt = () => {\n    this.setState({\n      isModalOpen: true,\n      modalTitle: 'Incomplete/Invalid Fields',\n      modalMessage: 'Please complete the form before proceeding.',\n    })\n  }\n\n\n\n\n  checkFields = (formFields: any, disableButton?: boolean) => {\n    this.setState({ loading_state: true })\n\n    if (formFields) {\n      let invalid_fields = this.getInvalidFields(formFields, disableButton);\n      if (!invalid_fields || invalid_fields.length === 0) {\n        if (this.state.disableSaveButton || !this.state.clickSaveButton) return;\n        \n\n        if (this.state.side_modal_block_mode === 'edit') {\n          this.setState({\n            clickSaveButton: false,\n            confirm_modal_message: `Are you sure you want to edit this Doctor Specialization code?`,\n            confirm_modal_open: true,\n            confirm_modal_title: `Confirm edit Doctor Specialization code`,\n            action_after_confirm: () => this.patchCode(formFields)\n          })\n        } else if (this.state.side_modal_block_mode === 'add') {\n          this.setState({\n            clickSaveButton: false,\n            confirm_modal_message: `Are you sure you want to add this Doctor Specialization code?`,\n            confirm_modal_open: true,\n            confirm_modal_title: `Confirm add Doctor Specialization code`,\n            action_after_confirm: () => {}//this.addCodes(formFields)\n          })\n        }\n      } else {\n        this.handleInvalidFieldsPrompt()\n      }\n    }\n  }\n\n\n\n\n\n  getInvalidFields = (formFields: any, disableButton?: boolean) => {\n    let invalid_fields_submit: any[] = [];\n    let invalid_fields_editing: any[] = [];\n    let exclude_fields = {}\n    if (this.excludeFields !== undefined) {\n      exclude_fields = this.excludeFields\n    }\n    const fields_excluded: string[] = Object.keys(exclude_fields)\n    const form_keys: string[] = Object.keys(formFields)\n\n    form_keys.forEach(field => {\n      if (this.requiredFields &&\n        this.requiredFields.includes(field) &&\n        !fields_excluded.includes(field) &&\n        !formFields[field]) {\n        if (!disableButton) {\n          invalid_fields_submit.push(field)\n        } else {\n          invalid_fields_editing.push(field)\n        }\n      }\n    })\n\n    const eff_date = moment(formFields['effectivity_date'])\n    const exp_date = moment(formFields['expiry_date'])\n    if (formFields &&\n      formFields['effectivity_date'] &&\n      formFields['expiry_date'] &&\n      eff_date.isValid() &&\n      exp_date.isValid() &&\n      eff_date.startOf('day').diff(exp_date.startOf('day')) > 0) {\n      if (disableButton) {\n        invalid_fields_editing.push('effectivity_date')\n      } else {\n        invalid_fields_submit.push('effectivity_date')\n      }\n    }\n\n    if (!invalid_fields_editing || invalid_fields_editing.length === 0) {\n      this.setState({ disableSaveButton: false })\n    } else if (!this.state.disableSaveButton) {\n      this.setState({ disableSaveButton: true })\n    }\n    this.setState({ loading_state: false, invalid_fields: invalid_fields_submit })\n    return invalid_fields_submit\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  /***********************  \n       RENDER SECTIONS \n  ***********************/\n\n  renderSideModalBlock(): JSX.Element {\n\n    return (\n      <SideModalBlock\n        blockPosition={'fixed'}\n        title={this.state.block_title}\n        editIconDescription={'Edit Specialization'}\n        showBlock={this.state.show_side_modal_block}\n        handleClose={this.handleCloseSideModalBlock}\n        sideModalBlockMode={this.state.side_modal_block_mode}\n        changeMode={this.handleChangeSideModalBlockMode}\n\n      >\n        {this.state.side_modal_block_mode ? (\n          <SideModalBody\n            verticalSpacing=\"15px\"\n            formFields={this.state.code_info}\n            invalidFields={this.state.invalid_fields}\n            handleClose={this.handleCloseSideModalBlock}\n            refreshData={(data: any) => {\n              this.setState({ code_info: data },\n                () => this.checkFields(data, true))\n            }}\n            handleSave={(formFields?: any) => {\n              if (this.state.side_modal_block_mode) {\n                this.setState({ clickSaveButton: true }, () => this.checkFields(formFields))\n              }\n            }}\n            formName={'DoctorSpecialization'}\n            mode={this.state.side_modal_block_mode ? this.state.side_modal_block_mode : ''}\n            checkBoxWithDropDownFieldsInitState={this.state.code_info && this.state.code_info['gender_limited'] ? true : false}\n            disableSaveButton={this.state.disableSaveButton}\n            datePairField1MaxDate={\n              this.state.code_info &&\n                this.state.code_info['expiry_date'] &&\n                moment(this.state.code_info['expiry_date']).isValid() ?\n                moment(this.state.code_info['expiry_date']).format('MM-DD-YY').toString() : undefined\n            }\n            datePairField2MinDate={\n              this.state.code_info &&\n                this.state.code_info['effectivity_date'] &&\n                moment(this.state.code_info['effectivity_date']).isValid() ?\n                moment(this.state.code_info['effectivity_date']).format('MM-DD-YY').toString() : undefined\n            }\n          />\n        ) : null}\n      </SideModalBlock>\n    )\n  }\n\n\n\n\n\n\n\n\n\n  render(): JSX.Element {\n    const { classes } = this.props;\n\n    return (\n      <div>\n        {this.state.loading_state ? <Loader /> : null}\n        <Grid container>\n\n\n\n\n          <Grid container style={{ paddingLeft: '37px' }}>\n            <Grid item xs={12} md={10}>\n              <TextField\n                style={{ width: '100%', backgroundColor: 'white' }}\n                id=\"code_search\"\n                placeholder=\"Search a code or description\"\n                label=\"\"\n                margin=\"none\"\n                fullWidth\n                variant=\"outlined\"\n                value={this.state.global_filter}\n                inputProps={{ 'aria-label': 'bare' }}\n                onChange={this.handleSearch}\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position=\"start\">\n                      <Search style={{ color: 'rgba(54, 54, 54, 0.4)' }} />\n                    </InputAdornment>\n                  ),\n                }}\n                onKeyUp={(event) => {\n                  let code = event.keyCode || event.which\n                  if (code == 13 && this.state.typing && this.state.global_filter) {\n                    if (this.state.typingTimeout) {\n                      clearTimeout(this.state.typingTimeout);\n                    }\n                    this.setState({\n                      loading_state: true,\n                      typing: false,\n                      limit: 10,\n                      no_data_message: `Searching for Doctor Specialization codes`\n                    });\n                    this.searchCode(\n                      this.state.limit,\n                      0,\n                      this.state.default_filters,\n                      this.state.global_filter,\n                      this.state.default_sorting,\n                    )\n                  }\n                }}\n              />\n            </Grid>\n\n            <Grid container justify=\"flex-end\" item xs={8} md={2} style={{ paddingRight: '15px', marginTop: 15, textAlign: 'center' }}>\n              <FontAwesomeIcon icon={faPlus} className={classes.plusIcon} />\n              <Link className={classes.addACode}\n                onClick={() => {\n                  if(DEV_MODE) return;\n                  this.setState(\n                    {\n                      block_title: `Add ICD10 Code`,\n                      code_info: constructEmptyDoctorSpecialization(),\n                      disableSaveButton: true\n                    }, () => this.handleChangeSideModalBlockMode('add'));\n                }}>\n                Add a Code\n                  </Link>\n            </Grid>\n\n\n\n\n\n\n            <GridHorizontalDivider height=\"30px\" />\n            <Grid style={{ minHeight: 690, overflow: 'auto' }}>\n              <TableComponent\n                id=\"tab-all\"\n                totalCount={this.state.totalCount}\n\n                rows={\n                  Object.keys(this.state.code_data).length > 0\n                    ? this.state.code_data\n                    : []\n                }\n                columns={\n                  table_specs['columns']\n\n                }\n                message={\n                  this.state.global_filter\n                    ? 'No available data'\n                    : this.state.no_data_message\n                }\n                onClickRow={this.handleClickRow}\n                disableSelect\n                disableSearch\n                formattedColumns={table_specs['formattedColumns']}\n                columnExtensions={table_specs['columnExtensions']}\n                onFilterChange={this.handleFilterByColumn}\n                // onSortingChange={this.handleChangeSorting}\n                updateSorting={this.handleChangeSorting}\n                // update={this.changePageUpdate}\n                update={() => { }}\n                disableIntegratedSorting\n                disableIntegratedFiltering\n                onPageChange={this.handlePageChange}\n                ongPageSizeChange={this.handlePageSizeChange}\n                defaultFilter={this.state.default_filters}\n                currentPage={this.state.page}\n                limit={this.state.limit}\n                pageSizes={[10, 25, 50, 100]}\n              />\n            </Grid>\n          </Grid>\n        </Grid>\n\n\n\n\n\n\n\n\n\n        {this.renderSideModalBlock()}\n\n        <MsgModal\n          onClose={() => {\n            this.setState({\n              isModalOpen: false,\n            })\n          }}\n          title={this.state.modalTitle}\n          isModalOpen={this.state.isModalOpen}\n          message={this.state.modalMessage}\n        />\n        <ConfirmationModal\n          onClose={() => this.setState({ confirm_modal_open: false })}\n          title={this.state.confirm_modal_title}\n          isModalOpen={this.state.confirm_modal_open}\n          submitType={'confirm'}\n          onSubmit={() => {\n            if (this.state.action_after_confirm) this.state.action_after_confirm()\n          }}\n          message={this.state.confirm_modal_message} />\n      </div>\n    );\n  }\n}\n","import React, {\n  useState,\n} from 'react';\n\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { Store } from 'Components/Stores/IStore';\nimport { LookupActions } from './LookupActions';\nimport {\n  GridHorizontalDivider,\n} from 'Components/UI/';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ICD10Section } from './Components/ICD10Section';\nimport { CPTSection } from './Components/CPTSection';\nimport { ICD10SynonymsSection } from './Components/ICD10SynonymsSection';\nimport { DoctorSpecializationSection } from './Components/DoctorSpecializationSection';\nimport { SideMenu } from 'Components/UI/SideMenu';\nimport classNames from 'classnames';\n\nimport {\n  Grid,\n  Typography,\n  Link\n} from '@material-ui/core';\n\nconst page_tab_titles: any = ['Codes', 'Locations', 'Industries'];\n\nconst sideBarItems = {\n  Codes: [\n    {\n      name: 'ICD-10',\n      label: ''\n    },\n    {\n      name: 'CPT',\n      label: ''\n    },\n    {\n      name: 'Doctor Specialization',\n      label: ''\n    },\n    {\n      name: 'Diagnosis - Procedures Matrix',\n      label: ''\n    },\n    {\n      name: 'ICD10 Synonyms',\n      label: ''\n    },\n  ], Locations: [\n    {\n      name: 'Regions',\n      label: ''\n    },\n    {\n      name: 'Provinces',\n      label: ''\n    },\n    {\n      name: 'Municipalities and Cities',\n      label: ''\n    },\n  ], Industries: [\n    {\n      name: 'Agriculture, Hunting, Forestry And Fishing Sector',\n      label: ''\n    },\n    {\n      name: 'Industry Sector',\n      label: ''\n    },\n    {\n      name: 'Service Sector',\n      label: ''\n    },\n  ]\n};\n\nconst useStyles = makeStyles(() => ({\n\n\n  borderedGrid: {\n    maxHeight: 715,\n    overflow: 'auto',\n    paddingRight: '15px',\n    paddingLeft: '15px',\n    borderRight: '1px solid #C3C3C3',\n  },\n\n  plusIcon: {\n    color: '#3AB77D',\n    cursor: 'pointer',\n    fontSize: 14,\n    marginRight: '15px',\n  },\n\n  addACode: {\n    fontSize: 14,\n    fontWeight: 700,\n    color: 'rgba(58, 183, 125, 1)',\n    cursor: 'pointer'\n  },\n\n  codeHeader: {\n    color: '#272E4C',\n    textAlign: 'left',\n    opacity: 0.6,\n    letterSpacing: 0,\n    textAlignLast: 'left',\n    fontSize: '12px',\n  },\n\n  codeHeaderValue: {\n    color: '#272E4C',\n    textAlign: 'left',\n    opacity: 1,\n    letterSpacing: 0,\n    textAlignLast: 'left',\n    fontSize: '16px',\n    fontWeight: 500,\n  },\n\n  codeListItemsRoot: {\n    flex: 'none',\n  },\n\n  codeListItems: {\n    fontSize: '14px',\n    color: '#272E4C',\n    textAlign: 'left',\n    opacity: 1,\n    letterSpacing: 0,\n    textAlignLast: 'left',\n    '&:hover': {\n      textDecoration: 'underline',\n      color: '#3AB77D',\n      fontWeight: 600,\n    },\n    '&$selected': {\n      textDecoration: 'underline',\n      color: '#3AB77D',\n      fontWeight: 600,\n    },\n  },\n\n  codeListItemsSelected: {\n    fontSize: '14px',\n    textDecoration: 'underline',\n    color: '#3AB77D',\n    fontWeight: 600,\n    textAlign: 'left',\n    opacity: 1,\n    letterSpacing: 0,\n    textAlignLast: 'left',\n  },\n\n  menuList: {\n    display: \"inline-block\",\n    padding: \"10px 80px 10px 0\"\n  },\n\n  menuLink: {\n    color: \"#929292\",\n    display: \"block\",\n    fontSize: \"1.10em\",\n    '&:hover': {\n      color: \"#3ab77d\",\n    }\n  },\n\n  LinkActive: {\n    color: \"#3ab77d\",\n    fontWeight: \"bold\",\n    textDecoration: \"underline\"\n  }\n\n}));\n\nconst useStyles2 = makeStyles(() => ({\n\n  gridContainer: {\n    backgroundColor: '',\n  },\n\n  main: {\n    backgroundColor: '#F5F7FB',\n    padding: '32px 24px',\n  },\n\n  headerTitle: {\n    fontSize: '1.5rem',\n    fontWeight: 800,\n  },\n\n  sideBarContainer: {\n    borderRight: \"1px solid #ccc\",\n    paddingRight: \"25px\",\n  },\n\n  menuList: {\n    display: \"inline-block\",\n    padding: \"10px 80px 10px 0\"\n  },\n\n  menuLink: {\n    color: \"#929292\",\n    display: \"block\",\n    fontSize: \"1.10em\",\n    '&:hover': {\n      color: \"#3ab77d\",\n    }\n  },\n\n  LinkActive: {\n    color: \"#3ab77d\",\n    fontWeight: \"bold\",\n    textDecoration: \"underline\"\n  }\n\n}));\n\nexport const LookupPage = () => {\n  const [activeHeader, setActiveHeader] = useState('Codes');\n  const [activeClass, setActiveClass] = useState(0);\n  const [activeItem, setActiveItem] = useState('ICD-10');\n\n\n\n  const [icdCategories, setICDCategories] = useState<string[]>([]);\n  const [icdCategoryDropdown, setICDCategoryDropdown] = useState<any>(undefined);\n\n  const [icdSynonymAction, setICDSynonymAction] = useState<any[]>([]);\n\n  const [cptCategories, setCPTCategories] = useState<string[]>([]);\n  const [cptCategoryRanges, setCPTCategoryRanges] = useState<string[]>([]);\n  const [cptCategoryDropdown, setCPTCategoryDropdown] = useState<any>(undefined);\n\n  const classes = useStyles();\n  const lookupClasses = useStyles2();\n\n  const activeSideBarItem = (item) => setActiveItem(item);\n  \n\n  const handleMenuClick = (item, index) => {\n    setActiveHeader(item);\n    setActiveClass(index)\n  }\n\n  return (\n    <div className={lookupClasses.main}>\n      <Grid\n        container\n        justify=\"space-between\"\n        alignItems=\"center\"\n        spacing={0}\n        className={lookupClasses.gridContainer}\n      >\n        <Grid item>\n          <Typography className={lookupClasses.headerTitle}>Lookup</Typography>\n        </Grid>\n      </Grid>\n      <GridHorizontalDivider height=\"15px\" />\n\n\n\n\n\n\n\n\n      {/* HEADER */}\n\n      <Grid item xs={6}>\n        <ul style={{ padding: '0', margin: '0' }}>\n          {\n            page_tab_titles.map((item, i) => (\n              <li key={item} className={lookupClasses.menuList}>\n                <Link className={classNames(lookupClasses.menuLink, activeClass === i ? lookupClasses.LinkActive : null)} onClick={() => handleMenuClick(item, i)}>{item}</Link>\n              </li>\n            ))\n          }\n        </ul>\n      </Grid>\n\n\n\n\n\n\n\n\n\n\n\n      <Grid container justify=\"space-between\" spacing={0}>\n        <GridHorizontalDivider height=\"30px\" />\n\n\n        {/* SIDE MENU */}\n        <Grid item xs={2} className={lookupClasses.sideBarContainer}>\n          <SideMenu\n            items={sideBarItems[activeHeader]}\n            activeItems={activeSideBarItem}\n            reset={activeHeader}\n          ></SideMenu>\n        </Grid>\n\n\n        {/* SECTIONS */}\n        {activeItem === 'ICD-10' && activeHeader === 'Codes' ? (\n          <Grid item xs={12} md={10}>\n            <ICD10Section\n              classes={classes}\n              icdCategories={icdCategories}\n              setICDCategories={setICDCategories}\n              icdCategoryDropdown={icdCategoryDropdown}\n              setICDCategoryDropdown={setICDCategoryDropdown}\n            />\n          </Grid>\n\n        ) : activeItem === 'CPT' && activeHeader === 'Codes' ? (\n          <Grid item xs={12} md={10}>\n            <CPTSection\n              classes={classes}\n              cptCategories={cptCategories}\n              setCPTCategories={setCPTCategories}\n              cptCategoryRanges={cptCategoryRanges}\n              setCPTCategoryRanges={setCPTCategoryRanges}\n              cptCategoryDropdown={cptCategoryDropdown}\n              setCPTCategoryDropdown={setCPTCategoryDropdown}\n            />\n          </Grid>\n        ) : activeItem === 'ICD10 Synonyms' && activeHeader === 'Codes' ? (\n          <Grid item xs={12} md={10}>\n            <ICD10SynonymsSection\n              classes={classes}\n              icdSynonymAction={icdSynonymAction}\n              setICDSynonymAction={(data: any[]) => setICDSynonymAction([...data])}\n            />\n          </Grid>\n\n        ) : activeItem === 'Doctor Specialization' && activeHeader === 'Codes' ? (\n          <Grid item xs={12} md={10}>\n            <DoctorSpecializationSection\n              classes={classes}\n            />\n          </Grid>\n        ) : null}\n      </Grid>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: Store) => state.lookup;\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  Map: bindActionCreators(LookupActions.Map, dispatch),\n});\n\nexport { mapStateToProps, mapDispatchToProps };\n"],"sourceRoot":""}