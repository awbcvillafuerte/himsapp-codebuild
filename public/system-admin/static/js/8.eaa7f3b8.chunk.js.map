{"version":3,"sources":["Pages/Lookup/Components/Loader/index.tsx","Pages/Lookup/ActionConsts.ts","Pages/Lookup/LookupActions.ts","Components/UI/TableComponent/CodeListTable.tsx","Pages/API/Calls/ICD10.ts","Pages/Lookup/Components/ConfirmationModal.tsx","Pages/Lookup/Components/ConstructPayloads.ts","Pages/Lookup/Components/ICD10Section/index.tsx","Pages/Lookup/Components/ICD10SynonymsSection/AddSynonymsBody.tsx","Pages/Lookup/Components/ICD10SynonymsSection/index.tsx","Pages/API/Calls/CPT.ts","Pages/Lookup/Components/CPTSection/index.tsx","Pages/Lookup/LookupPage.tsx"],"names":["useStyles","makeStyles","root","position","width","height","zIndex","right","bottom","top","left","textAlign","backgroundColor","container","outline","alignItems","justifyContent","display","flexDirection","Loader","classes","className","size","defaultProps","LookupConsts","ResetReducer","SetReducer","LookupActions","payload","type","rowResetSelected","radioSelected","selectedValue","clickCell","clickValue","cellSelectStyles","select","textFieldStyles","checkboxStyles","color","Select","id","value","items","cellSelectClasses","style","renderValue","selected","find","item","name","map","key","TableFilterCell","filter","onFilter","filteringEnabled","column","padding","labelWidth","onChange","e","target","placeholder","align","undefined","checked","justify","paddingLeft","Link","onClick","xs","alignContent","icon","faRedoAlt","fontSize","TableRadio","onToggle","restProps","stopPropagation","TableCheckBox","faSquare","checkedIcon","faCheckSquare","TableSearchPanel","onValueChange","fullWidth","startAdornment","faSearch","DefaultTableToolbar","children","disableGutters","SortingIcon","direction","marginLeft","faSortUp","faSortDown","TableSortLabel","onSort","sortingEnabled","actionColumn","resetColumn","title","hideSortIcon","faSort","EmptyCellFormatter","faExclamationCircle","EmptyCellDataTypeProvider","props","formatterComponent","RequiredFormatter","row","RequiredDataTypeProvider","RequiredCheckboxFormatter","control","label","RequiredCheckboxDataTypeProvider","UploadFileFormatter","console","log","paddingTop","paddingRight","faFileUpload","textDecoration","UploadFileDataTypeProvider","ApproveDisapproveRadioFormatter","handleClick","event","aria-label","cnt","action_chosen","margin","fontWeight","labelPlacement","ApproveDisapproveRadioDataTypeProvider","ApproveDisapproveRadioFormatterVirtual","_id","ApproveDisapproveRadioDataTypeProviderVirtual","ResetFormatter","ResetDataTypeProvider","IncompleteRadioFormatter","IncompleteRadioDataTypeProvider","RadioNameFormatter","RadioDataTypeProvider","ValuesNameFormatter","ValuesNameDataTypeProvider","SystemNameFormatter","SystemNameDataTypeProvider","DataFormatter","DataDataTypeProvider","NumberFormatter","textFieldClasses","NumberDataTypeProvider","TextFormatter","TextDataTypeProvider","DateFormatter","text","moment","format","error","DateCellDataTypeProvider","TimeFormatter","TimeCellDataTypeProvider","TableComponent","disableIntegratedFiltering","columns","formattedColumns","singleSelect","disablePaging","disableSearch","disableSelect","disableSort","disableFilter","toolbarType","columnExtensions","columnBands","showSelectionColumn","query","totalCount","currentPage","limit","useState","selection","setSelection","pageSizes","defaultSort","sorting","setSorting","rows","setRows","useEffect","dataTypeProviders","Object","keys","length","push","for","number","system_name","data_name","value_name","required_columns","radio","incomplete_radio","approve_disapprove_action","approve_disapprove_action_virtual","approve_disapprove_reset","required_checkbox","upload_file","required_cell","date","time","toolbar","Paper","topBar","onCurrentPageChange","page","skip","onPageChange","pageSize","onPageSizeChange","ongPageSizeChange","defaultSorting","onSortingChange","updateSorting","onSelectionChange","newSelection","onClickRow","onSelectedRadio","onSelectedReset","onClickCell","lastSelected","indexOf","defaultFilters","filters","defaultFilter","columnFilteringEnabled","filterExtensions","onFiltersChange","onFilterChange","isVirtualTable","messages","noData","message","selectByRowClick","cellComponent","headerCellComponent","showSelectAll","showSortingControls","sortLabelComponent","rootComponent","inputComponent","fetch","Fetch","getAccessToken","getICD","option","method","call","JSON","stringify","fetchAccessToken","then","searchICD","offset","filter_key_str","sorting_str","filter_str","forEach","search","ICD_URL","addICD10Codes","body","editICD","getICDSynonyms","uri_obj","uri_string","Array","isArray","like","options","entries","i","getActiveSynonyms","where","search_str","addSynonyms","getAllSynonyms","patchSynonyms","theme","dialog","dialogAction","marginBottom","spacing","ConfirmationModal","Dialog","open","isModalOpen","onClose","aria-labelledby","maxWidth","DialogTitle","DialogContent","Grid","DialogActions","clsx","Button","variant","onSubmit","submitType","constructIcd10","data","status","today","Date","eff_date","setHours","exp_date","isValid","gender_limited","gender","category_code","diagnosis_code","toString","full_code","abbreviated_description","full_description","category_title","main_category","effectivity_date","expiry_date","date_updated","constructCpt","code","description","category","reconstructIcd10","Boolean","constructEmptyIcd10","reconstructCpt","constructEmptyCpt","constructPutIcd10","assign","constructPutCpt","constructPostIcd10","data_arr","constructPostCpt","constructAddSynonymPayload","approve","synonyms","constructUnapprovedSynonymPayload","all_approved","synonym","icd_append","patch_synonyms","some","synonym_lowercase","toLowerCase","includes","icd_append_synonyms","constructDeactivateSynonymPayload","for_deactivate","icd_discard","icd_discard_synonyms","constructActivateSynonymPayload","helper","Utils","IndexedDBHelper","ICD10Section","requiredFields","excludeFields","escFunction","keyCode","handleCloseSideModalBlock","initialData","setState","no_data_message","searchCode","state","default_filters","global_filter","default_sorting","default_clicked","addCodeIndexdb","openDb","res","db","result","saveToStore","catch","patchCodeIndexdb","updateEntryByKey","fetchICDCategoriesIndexdb","a","StorageService","icds","category_arr","category_dropdown_choices_arr","setICDCategories","setICDCategoryDropdown","icd_categories","icd_category_dropdown_choices","err","filters_global","clicked","response","table","generateDataForTable","code_response","code_data_all","code_data","loading_state","total","count","statusCode","modalTitle","modalMessage","patchCode","changePageUpdate","disableSaveButton","addCodes","handleChangeSorting","handleFilterByColumn","self","typingTimeout","clearTimeout","typing","setTimeout","handleSearch","handleClickRow","checkFields","code_info","handleChangeSideModalBlockMode","handlePageChange","handlePageSizeChange","isPageSizeModal","handleClickItemFromList","show_side_modal_block","side_modal_block_mode","block_title","reform_data","cloneDeep","handleOpenBlock","passDataToSideModalBlockBody","handleInvalidFieldsPrompt","formFields","disableButton","invalid_fields","getInvalidFields","clickSaveButton","confirm_modal_message","confirm_modal_open","confirm_modal_title","action_after_confirm","invalid_fields_submit","invalid_fields_editing","exclude_fields","fields_excluded","field","startOf","diff","SIDE_MODAL_BLOCK_FIELDS","ICD10","editOrAdd","checkInvalidFields","columnName","wordWrapEnabled","icdCategoryDropdown","icdCategories","highlightedCodeFromList","action_after_info","this","document","addEventListener","temp_row","blockPosition","editIconDescription","showBlock","handleClose","sideModalBlockMode","changeMode","invalidFields","refreshData","handleSave","formName","mode","checkBoxWithDropDownFieldsInitState","dynamicDropdownChoices","datePairField1MaxDate","datePairField2MinDate","Fragment","codeHeader","codeHeaderValue","ListItemText","codeListItemsRoot","primary","codeListItemsSelected","codeListItems","categories","md","borderedGrid","List","renderCodeInfo","renderCodeList","TextField","inputProps","InputProps","InputAdornment","Search","marginTop","faPlus","plusIcon","addACode","minHeight","overflow","update","renderSideModalBlock","React","Component","tableInfo","All","Others","Unapproved","Approved","Inactive","actionValue","selectedItems","borderRadius","xIcon","input","inputLabel","AddSynonymsBody","addSynonym","textFieldValue","activeLink","action","handleHeaderCheckbox","formChanges","APIGetAllSynonyms","isLoading","resp","unapproved_count","unapproved","all_count","inactive_count","inactive","active_count","active","eror","tabCount","tabsCount","titleCase","sentence","split","toUpperCase","slice","join","rowDataFixer","getColumns","tab","tableClone","getColumnExtensions","getFilterExtensions","getFormattedColumns","checkIfSelectBox","setActiveLink","handleOnClickRow","changeTab","handleMenuClick","hasUnsavedChanges","changeTabUnsaved","choices","changesMade","setHasUnsavedChanges","deactivateSynonyms","activateSynonyms","rowActions","menuTabs","prevProps","prevState","resetStates","getRowsTrigger","getRowsForUnsavedChanges","temp_rows","minWidth","InputLabel","required","CircularProgress","maxHeight","data_row","disabled","ICD10SynonymsSection","searchSynonyms","unapproved_filter","generateDataForUnapprovedTable","code_data_all_unapproved","code_data_unapproved","total_count_unapproved","page_unapproved","default_filters_unapproved","limit_unapproved","default_sorting_unapproved","activeTableSkip","activeTableCurrentpage","getActive","handleGetAction","unapproved_codes_actions","changePageUpdateUnapproved","has_unsaved_changes","handleChangeSortingUnapproved","handleResetAll","code_info_unapproved","setICDSynonymAction","handleFilterByColumnUnapproved","handlePageChangeUnapproved","handlePageSizeChangeUnapproved","handleRadioClick","unapproved_actions","unapproved_row","handleSaveUnapproved","disapprove","activeTableRows","bool","side_modal_get_rows_trigger","confirm_modal_method","activeTableFilter","activeTableLimit","activeTableSort","icd10Active","d","full_synonyms","activeTableCount","Math","ceil","handleActiveFilter","active_default_filter","handleActiveSorting","values","handleActivePageSizeChange","handleActiveCurrentPageChange","handleOpenConfirmationModalProps","handleSaveUnapprovedPayload","handleConfirmationModalClose","unsaved_changes_modal","confirm_modal_save_button","snackbarOpen","snackbarMessage","match","bracketIndexStart","bracketIndexEnd","message_comp","strong_str","substring","first_str","temp","end_str","handleActivateDuplicateInactiveSynonym","handleActivateDeactivate","string_obj","duplicate","parse","handleOpenUnsavedChangesModal","createUnsavedChangesModalBody","side_modal_active_link","side_modal_rows","body_list1","body_list2","approve_rows","disapprove_rows","getBodyList","deactivate_rows","activate_rows","saveChanges","discardAndContinue","unapprovedTable","modalMessageMaxWidth","icdSynonymAction","code_repo","activeTableColumns","activelink","onKeyUp","which","menuList","LinkActive","menuLink","approveDisapproveItems","messageMaxWidth","ModalComponent","titleFontSize","buttons","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","getCPT","searchCPT","CPT_URL","addCPTCodes","editCPT","deleteCPT","CPTSection","addCPTIndexDB","patchCPTIndexDB","fetchCPTCategories","cpts","category_ranges","setCPTCategories","setCPTCategoryDropdown","setCPTCategoryRanges","cpt_categories","cpt_category_range","category_dropdown_choices","CPT","cptCategoryDropdown","cptCategories","cptCategoryRanges","delete","ranges","range","page_tab_titles","sideBarItems","Codes","Locations","Industries","borderRight","cursor","marginRight","opacity","letterSpacing","textAlignLast","flex","useStyles2","gridContainer","main","headerTitle","sideBarContainer","LookupPage","activeHeader","setActiveHeader","activeClass","setActiveClass","activeItem","setActiveItem","lookupClasses","Typography","classNames","index","SideMenu","activeItems","reset","mapStateToProps","lookup","mapDispatchToProps","dispatch","Map","bindActionCreators"],"mappings":"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","file":"static/js/8.eaa7f3b8.chunk.js","sourcesContent":["import * as React from 'react';\nimport { CircularProgress } from '@material-ui/core/';\nimport { makeStyles } from '@material-ui/core/styles';\n\ninterface LoaderProps {\n}\n\nconst useStyles = makeStyles({\n\troot: {\n        position: 'fixed',\n        width: '100%',\n        height: '100%',\n        zIndex: 9999,\n        right: '0px',\n        bottom: '0px',\n        top: '0px',\n        left: '0px',\n        textAlign: \"center\",\n        backgroundColor: 'rgba(0, 0, 0, 0.5)'\n    },\n    container:{\n        height: '100%',\n        outline: 0,\n        alignItems: 'center',\n        justifyContent: 'center',\n        display: 'flex',\n        flexDirection: 'column'\n    }\n});\n\nexport const Loader: React.FC<LoaderProps> = (): JSX.Element => {\n    // const buttonclasses = ButtonStyle();\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            <div className={classes.container}>\n                <CircularProgress size={150}/>\n            </div>\n        </div>\n    )\n}\n\nLoader.defaultProps = {}","export const LookupConsts = {\n  Lookup: {\n    ResetReducer: 'Lookup_ResetReducer',\n    SetReducer: 'Lookup_SetReducer',\n  },\n};\n","import { LookupConsts } from './ActionConsts';\n\nexport const LookupActions = {\n  Map: (payload: []) => ({\n    payload,\n    type: LookupConsts.Lookup.SetReducer,\n  }),\n\n  Reset: () => ({\n    type: LookupConsts.Lookup.ResetReducer,\n  }),\n};\n","//#region Global Imports\nimport * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport {\n  Grid,\n  Table,\n  TableSelection,\n  TableHeaderRow,\n  TableFilterRow,\n  Toolbar,\n  SearchPanel,\n  PagingPanel,\n  TableBandHeader,\n  VirtualTable\n} from '@devexpress/dx-react-grid-material-ui';\nimport {\n  Paper,\n  Link\n} from '@material-ui/core/';\nimport {\n  PagingState,\n  CustomPaging,\n  SelectionState,\n  IntegratedSelection,\n  FilteringState,\n  IntegratedFiltering,\n  SortingState,\n  IntegratedSorting,\n  SearchState,\n  DataTypeProvider,\n} from '@devexpress/dx-react-grid';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faSearch,\n  faCheckSquare,\n  faSort,\n  faSortUp,\n  faSortDown,\n  faExclamationCircle,\n  faFileUpload,\n  faSquare,\n  faRedoAlt,\n} from '@fortawesome/free-solid-svg-icons';\nimport { makeStyles } from '@material-ui/styles';\nimport * as MaterialUI from '@material-ui/core';\nimport moment from 'moment';\n//import { Components } from '@hims/core';\n//#endregion Global Imports\n\nlet rowResetSelected = false;\nlet radioSelected = false;\nlet selectedValue = '';\nlet clickCell = false;\nlet clickValue = {};\n// let global_approve_disapprove: any = [];\n\nconst cellSelectStyles = makeStyles({\n  select: {\n    backgroundColor: 'transparent',\n  },\n});\n\nconst textFieldStyles = makeStyles({\n  root: {\n    '& div.MuiInputBase-root': {\n      backgroundColor: 'transparent',\n    },\n  },\n});\n\nconst checkboxStyles = makeStyles({\n  root: {\n    '&.Mui-checked': {\n      color: '#3AB77D',\n    },\n  },\n});\n\nconst Select = ({ id, value, items }: any) => {\n  const cellSelectClasses = cellSelectStyles();\n  return (\n    <MaterialUI.Select\n      id={id}\n      classes={cellSelectClasses}\n      value={value}\n      style={{ width: '100%', backgroundColor: 'transparent' }}\n      renderValue={(selected: any) => {\n        if (selected !== null) {\n          const value: any = items.find((item: any) => {\n            return item.value === selected;\n          });\n          if (value) {\n            return value.name;\n          } else {\n            return '—';\n          }\n        }\n        return '—';\n      }}\n    >\n      {items.map((item: any) => (\n        <MaterialUI.MenuItem key={item.value} value={item.value}>\n          {item.name}\n        </MaterialUI.MenuItem>\n      ))}\n    </MaterialUI.Select>\n  );\n};\n\nconst TableFilterCell = ({\n  filter,\n  onFilter,\n  filteringEnabled,\n  classes, column\n}: any) => {\n  if (filteringEnabled) {\n    return (\n      <MaterialUI.TableCell\n        style={{ padding: '0px 10px 8px 10px' }}\n        classes={classes}\n      >\n        <MaterialUI.OutlinedInput\n          classes={classes}\n          style={{ width: '100%' }}\n          value={filter ? filter.value : ''}\n          labelWidth={0}\n          onChange={e =>\n            onFilter(e.target.value ? { value: e.target.value } : null)\n          }\n          placeholder=\"\"\n        />\n      </MaterialUI.TableCell>\n    );\n  } else {\n    // return null;\n    if (column['actionColumn']) {\n      return (\n        <MaterialUI.TableCell\n          style={{ padding: '0px 0px 0px 0px' }}\n          classes={classes}\n          align=\"center\"\n        >\n          <MaterialUI.Checkbox\n            color='primary'\n            onChange={e => {\n              onFilter(e.target.checked !== undefined ? { 'action': e.target.checked } : null);\n            }}\n          />\n        </MaterialUI.TableCell>\n\n      );\n    } else if (column['resetColumn']) {\n      return (\n        <MaterialUI.TableCell align=\"center\">\n          <MaterialUI.Grid container justify=\"center\" style={{ paddingLeft: '22px' }}>\n            <Link onClick={() => {\n              onFilter({ 'reset_action': true });\n            }}>\n              <MaterialUI.Grid container justify=\"center\" alignItems=\"center\">\n                <MaterialUI.Grid item xs={12} alignContent=\"center\">\n                  <FontAwesomeIcon icon={faRedoAlt} style={{ fontSize: '20px' }} />\n                </MaterialUI.Grid>\n                <MaterialUI.Grid item xs={12} alignContent=\"center\">\n                  <span style={{ fontSize: '10px' }}>Reset All</span>\n                </MaterialUI.Grid>\n              </MaterialUI.Grid>\n            </Link>\n          </MaterialUI.Grid>\n        </MaterialUI.TableCell>\n      );\n    } else {\n      return (\n        <MaterialUI.TableCell\n          style={{ padding: '0px 10px 8px 10px' }}\n          classes={classes}\n        ></MaterialUI.TableCell>\n      );\n    }\n\n  }\n};\n\nconst TableRadio = ({\n  style,\n  selected,\n  onToggle,\n  classes,\n  ...restProps\n}: any) => {\n  return (\n    <MaterialUI.TableCell\n      padding=\"checkbox\"\n      style={style}\n      classes={classes}\n      {...restProps}\n    >\n      <MaterialUI.Radio\n        classes={classes}\n        checked={selected}\n        onClick={e => {\n          e.stopPropagation();\n          onToggle();\n        }}\n      />\n    </MaterialUI.TableCell>\n  );\n};\n\nconst TableCheckBox = ({\n  style,\n  selected,\n  onToggle,\n  classes,\n  ...restProps\n}: any) => {\n  return (\n    <MaterialUI.TableCell\n      padding=\"checkbox\"\n      style={style}\n      classes={classes}\n      {...restProps}\n    >\n      <MaterialUI.Checkbox\n        icon={<FontAwesomeIcon icon={faSquare} />}\n        checkedIcon={<FontAwesomeIcon icon={faCheckSquare} />}\n        classes={classes}\n        checked={selected}\n        onClick={e => {\n          e.stopPropagation();\n          onToggle();\n        }}\n      />\n    </MaterialUI.TableCell>\n  );\n};\n\nconst TableSearchPanel = ({ value, onValueChange }: any) => {\n  return (\n    <MaterialUI.OutlinedInput\n      value={value ? value : ''}\n      labelWidth={0}\n      onChange={e => onValueChange(e.target.value ? e.target.value : null)}\n      placeholder=\"Search a benefit or benefit category\"\n      fullWidth\n      startAdornment={\n        <MaterialUI.InputAdornment position=\"start\">\n          <FontAwesomeIcon icon={faSearch} />\n        </MaterialUI.InputAdornment>\n      }\n    />\n  );\n};\n\nconst DefaultTableToolbar = ({ children }: any) => {\n  return <MaterialUI.Toolbar disableGutters={true} children={children} />;\n};\n\nconst SortingIcon = ({ direction }: any) =>\n  direction === 'asc' ? (\n    <FontAwesomeIcon style={{ marginLeft: '10px' }} icon={faSortUp} />\n  ) : (\n      <FontAwesomeIcon style={{ marginLeft: '10px' }} icon={faSortDown} />\n    );\n\nconst TableSortLabel = ({ column, onSort, children, direction }: any) => {\n  if (\n    column.sortingEnabled !== undefined &&\n    column.sortingEnabled !== null &&\n    column.sortingEnabled === false\n  ) {\n    if (column.actionColumn || column.resetColumn) {\n      return (\n        <MaterialUI.Grid container justify=\"center\">\n          {column.title}\n        </MaterialUI.Grid>\n      )\n    }\n    return <span>{column.title}</span>;\n  } else {\n    return (\n      <MaterialUI.TableSortLabel hideSortIcon={true} onClick={onSort}>\n        {children}\n        {direction ? (\n          <SortingIcon direction={direction} />\n        ) : (\n            <FontAwesomeIcon style={{ marginLeft: '10px' }} icon={faSort} />\n          )}\n      </MaterialUI.TableSortLabel>\n    );\n  }\n};\n\nconst EmptyCellFormatter = ({ value }: any) => {\n  if (value === '' || value === undefined || value === null) {\n    return (\n      <FontAwesomeIcon\n        style={{ color: '#FD5451', fontSize: '16px' }}\n        icon={faExclamationCircle}\n      />\n    );\n  } else {\n    return value;\n  }\n};\n\nconst EmptyCellDataTypeProvider = (props: any) => (\n  <DataTypeProvider formatterComponent={EmptyCellFormatter} {...props} />\n);\n\nconst RequiredFormatter = ({ row, value }: any) => {\n  if (\n    row['required'] === true &&\n    (value === '' || value === undefined || value === null)\n  ) {\n    return (\n      <FontAwesomeIcon\n        style={{ color: '#FD5451', fontSize: '16px' }}\n        icon={faExclamationCircle}\n      />\n    );\n  } else if (\n    row['required'] === false &&\n    (value === '' || value === undefined || value === null)\n  ) {\n    return 'N/A';\n  } else {\n    return value;\n  }\n};\n\nconst RequiredDataTypeProvider = (props: any) => (\n  <DataTypeProvider formatterComponent={RequiredFormatter} {...props} />\n);\n\nconst RequiredCheckboxFormatter = ({ column, row, value }: any) => {\n  const classes = checkboxStyles();\n  return (\n    <MaterialUI.Grid container justify=\"center\">\n      <MaterialUI.FormControlLabel\n        control={\n          <MaterialUI.Checkbox\n            checked={row && row['action_chosen'] ? true : false}\n            value={value}\n            style={{ padding: '0px 0px 0px 26px' }}\n            className={classes.root}\n            color=\"primary\"\n            onChange={e => {\n              row['action_chosen'] = e.target.checked\n              clickCell = true;\n              clickValue = {\n                value: e.target.checked,\n                name: column['name'],\n                row: row,\n              };\n            }}\n          />\n        }\n        label=\"\"\n      />\n    </MaterialUI.Grid>\n  );\n};\n\nconst RequiredCheckboxDataTypeProvider = (props: any) => (\n  <DataTypeProvider formatterComponent={RequiredCheckboxFormatter} {...props} />\n);\n\nconst UploadFileFormatter = ({ column, row }: any) => {\n  const id: string = column['name'] + '_' + row['id'];\n  return (\n    <div\n      id={id}\n      onClick={e => {\n        // e.stopPropagation();\n        console.log('e>', e);\n      }}\n    >\n      <MaterialUI.Typography color=\"textPrimary\" style={{ paddingTop: '5px' }}>\n        <span>\n          <span style={{ paddingRight: '10px', fontSize: '15px' }}>\n            <FontAwesomeIcon icon={faFileUpload} style={{ color: '#0D5E40' }} />\n          </span>\n          <span style={{ textDecoration: 'underline', color: '#0D5E40' }}>\n            Upload File\n          </span>\n        </span>\n      </MaterialUI.Typography>\n    </div>\n  );\n};\n\nconst UploadFileDataTypeProvider = (props: any) => (\n  <DataTypeProvider formatterComponent={UploadFileFormatter} {...props} />\n);\n\nconst ApproveDisapproveRadioFormatter = (props: any) => {\n  const { row } = props;\n\n  const items = [\n    { value: 'approve', label: 'Approve' },\n    { value: 'disapprove', label: 'Disapprove' },\n  ];\n\n  const handleClick = (event) => {\n    row['action_chosen'] = event.target.value;\n  }\n\n\n  return (\n    <div>\n      <MaterialUI.RadioGroup\n        aria-label=\"position\"\n        name=\"position\"\n        // value={row && row._id && global_approve_disapprove && global_approve_disapprove.some(item => item._id === row._id) && row.action_chosen ? row.action_chosen : ''}\n        onChange={e => {\n          e.stopPropagation();\n          radioSelected = true;\n          selectedValue = e.target.value;\n\n        }}\n        row\n      >\n        {items.map((item: any, cnt: number) => (\n          <MaterialUI.FormControlLabel\n            // className={classes.root}\n            checked={row && row.action_chosen && row.action_chosen === item.value}\n            key={cnt}\n            value={item.value}\n            control={<MaterialUI.Radio style={{ padding: '0px 2px 0px 2px', margin: 0, fontSize: '10px' }} onClick={handleClick} color=\"primary\" size=\"small\" />}\n            label={<span style={{ fontSize: '12px', fontWeight: 600 }}>{item.label}</span>}\n            labelPlacement=\"end\"\n          />\n        ))}\n      </MaterialUI.RadioGroup>\n    </div>\n  );\n};\n\nconst ApproveDisapproveRadioDataTypeProvider = (props: any) => (\n  <DataTypeProvider formatterComponent={ApproveDisapproveRadioFormatter} {...props} />\n);\n\n\nconst ApproveDisapproveRadioFormatterVirtual = ({ row }: any) => {\n  const items = [\n    { value: 'approve', label: 'Approve' },\n    { value: 'disapprove', label: 'Disapprove' },\n  ];\n\n  const handleClick = (event) => {\n    row['action_chosen'] = event.target.value;\n  }\n\n  return (\n    <div>\n      <MaterialUI.RadioGroup\n        aria-label=\"position\"\n        name=\"position\"\n        key={`virtual-group-${row._id}-${row._id}`}\n        value={row && row.action_chosen ? row.action_chosen : undefined}\n        onChange={e => {\n          e.stopPropagation();\n          radioSelected = true;\n          selectedValue = e.target.value;\n        }}\n        row\n      >\n        {items.map((item: any, cnt: number) => (\n          <MaterialUI.FormControlLabel\n            key={`virtual-label-${cnt}-${item}-${row._id}`}\n            value={item.value}\n            control={<MaterialUI.Radio key={`virtual-radio-${cnt}-${item}-${row._id}`} id={row._id} onClick={handleClick} color=\"primary\" size=\"small\" />}\n            label={<span key={`virtual-text-${cnt}-${item}`} style={{ fontSize: '14px', fontWeight: 600 }}>{item.label}</span>}\n            labelPlacement=\"end\"\n          />\n        ))}\n      </MaterialUI.RadioGroup>\n    </div>\n  );\n};\n\n\nconst ApproveDisapproveRadioDataTypeProviderVirtual = (props: any) => (\n  <DataTypeProvider formatterComponent={ApproveDisapproveRadioFormatterVirtual} {...props} />\n);\n\n\nconst ResetFormatter = ({ row }: any) => {\n\n  return (\n    <MaterialUI.Grid container justify=\"center\" alignItems=\"center\">\n      <Link onClick={() => {\n        if (!row) return;\n        rowResetSelected = true;\n        row['action_chosen'] = '';\n      }}>\n        <FontAwesomeIcon icon={faRedoAlt} style={{ fontSize: '20px' }} />\n      </Link>\n    </MaterialUI.Grid>\n  );\n};\n\n\nconst ResetDataTypeProvider = (props: any) => (\n  <DataTypeProvider formatterComponent={ResetFormatter} {...props} />\n);\n\nconst IncompleteRadioFormatter = ({ value }: any) => {\n  const items = [\n    { value: 'approve', label: 'Approve' },\n    { value: 'disapprove', label: 'Disapprove' },\n    { value: 'for confirmation', label: 'For Confirmation' },\n  ];\n  return (\n    <div>\n      <MaterialUI.RadioGroup\n        aria-label=\"position\"\n        name=\"position\"\n        value={value}\n        onChange={e => {\n          e.stopPropagation();\n          radioSelected = true;\n          selectedValue = e.target.value;\n        }}\n        row\n      >\n        {items.map((item: any, cnt: number) => (\n          <MaterialUI.FormControlLabel\n            key={cnt}\n            value={item.value}\n            control={<MaterialUI.Radio color=\"primary\" />}\n            label={item.label}\n            labelPlacement=\"end\"\n            onClick={e => {\n              radioSelected = true;\n              console.log('radio button label onclick', e);\n            }}\n            onChange={e => {\n              radioSelected = true;\n              // selectedValue = e.target.value;\n              console.log('radio button label onchange', e);\n            }}\n          />\n        ))}\n      </MaterialUI.RadioGroup>\n    </div>\n  );\n};\n\nconst IncompleteRadioDataTypeProvider = (props: any) => (\n  <DataTypeProvider formatterComponent={IncompleteRadioFormatter} {...props} />\n);\n\nconst RadioNameFormatter = ({ value }: any) => {\n  const items = [\n    { value: 'match', label: 'Match' },\n    { value: 'not', label: 'Not Match' },\n    { value: 'confirmation', label: 'For Confirmation' },\n  ];\n  console.log('Radio group value: ', value);\n  return (\n    <div>\n      <MaterialUI.RadioGroup\n        aria-label=\"position\"\n        name=\"position\"\n        value={value}\n        onChange={e => {\n          e.stopPropagation();\n          radioSelected = true;\n          selectedValue = e.target.value;\n        }}\n        row\n      >\n        {items.map((item: any, cnt: number) => (\n          <MaterialUI.FormControlLabel\n            key={cnt}\n            value={item.value}\n            control={<MaterialUI.Radio color=\"primary\" />}\n            label={item.label}\n            labelPlacement=\"end\"\n            onClick={e => {\n              radioSelected = true;\n              console.log('radio button label onclick', e);\n            }}\n            onChange={e => {\n              radioSelected = true;\n              // selectedValue = e.target.value;\n              console.log('radio button label onchange', e);\n            }}\n          />\n        ))}\n      </MaterialUI.RadioGroup>\n    </div>\n  );\n};\n\nconst RadioDataTypeProvider = (props: any) => (\n  <DataTypeProvider formatterComponent={RadioNameFormatter} {...props} />\n);\n\nconst ValuesNameFormatter = ({ value }: any) => {\n  const items = [\n    { name: '', value: '' },\n    { name: 'Married', value: 'married' },\n    { name: 'Single', value: 'single' },\n    { name: 'Widowed', value: 'widowed' },\n    { name: 'Annulled', value: 'annulled' },\n  ];\n  return <Select items={items} value={value} />;\n};\n\nconst ValuesNameDataTypeProvider = (props: any) => (\n  <DataTypeProvider formatterComponent={ValuesNameFormatter} {...props} />\n);\n\nconst SystemNameFormatter = ({ value }: any) => {\n  const items = [\n    { name: 'First Name', value: 'first_name' },\n    { name: 'Middle Name', value: 'middle_name' },\n    { name: 'Last Name', value: 'last_name' },\n    { name: 'Birthday', value: 'birthday' },\n    { name: 'Civil Status', value: 'civil_status' },\n    { name: 'Gender', value: 'gender' },\n    { name: 'Plan Type', value: 'plan_type' },\n    { name: 'Type', value: 'type' },\n  ];\n\n  return <Select items={items} value={value} />;\n};\n\nconst SystemNameDataTypeProvider = (props: any) => (\n  <DataTypeProvider formatterComponent={SystemNameFormatter} {...props} />\n);\n\nconst DataFormatter = ({ value }: any) => {\n  const items = [\n    { name: 'Civil Status', value: 'civil_status' },\n    { name: 'Gender', value: 'gender' },\n  ];\n  return <Select items={items} value={value} />;\n};\n\nconst DataDataTypeProvider = (props: any) => (\n  <DataTypeProvider formatterComponent={DataFormatter} {...props} />\n);\n\nconst NumberFormatter = ({ value }: any) => {\n  const textFieldClasses = textFieldStyles();\n  return (\n    <MaterialUI.TextField\n      value={value}\n      type={'number'}\n      classes={textFieldClasses}\n    />\n  );\n};\n\nconst NumberDataTypeProvider = (props: any) => (\n  <DataTypeProvider formatterComponent={NumberFormatter} {...props} />\n);\n\nconst TextFormatter = ({ value }: any) => {\n  const textFieldClasses = textFieldStyles();\n  return <MaterialUI.TextField value={value} classes={textFieldClasses} />;\n};\n\nconst TextDataTypeProvider = (props: any) => (\n  <DataTypeProvider formatterComponent={TextFormatter} {...props} />\n);\n\nconst DateFormatter = ({ value }: any) => {\n  let text = value;\n  if (text) {\n    try {\n      text = moment(value).format('MMM DD, YYYY');\n    } catch (error) {\n      text = value;\n    }\n  } else {\n    text = '';\n  }\n\n  return text;\n};\n\nconst DateCellDataTypeProvider = (props: any) => (\n  <DataTypeProvider formatterComponent={DateFormatter} {...props} />\n);\n\nconst TimeFormatter = ({ value }: any) => {\n  let text = value;\n  if (text) {\n    try {\n      text = moment(value).format('hh:mm:ss A');\n    } catch (error) {\n      text = value;\n    }\n  } else {\n    text = '';\n  }\n\n  return text;\n};\n\nconst TimeCellDataTypeProvider = (props: any) => (\n  <DataTypeProvider formatterComponent={TimeFormatter} {...props} />\n);\n\ninterface TableComponentProps {\n  rows: any[];\n  columns: any[];\n  columnFilteringEnabled?: boolean;\n  columnExtensions?: any[];\n  filterExtensions?: any[];\n  formattedColumns?: any;\n  columnBands?: any[] | null;\n  singleSelect?: boolean;\n  disableSearch?: boolean;\n  disablePaging?: boolean;\n  disableSelect?: boolean;\n  disableFilter?: boolean;\n  disableSort?: boolean;\n  showSelectionColumn?: boolean;\n  toolbarType?: string | null;\n  topBar?: () => JSX.Element;\n  id: string;\n  totalCount: number;\n  message: string;\n  defaultFilter?: any[];\n  update: (skip: number, limit: number) => void;\n  updateSorting: (sort: object) => void;\n  onClickRow?: (row: number[]) => void;\n  onSelectedRadio?: (row: number, value: string) => void;\n  onFilterChange?: (response: any) => void;\n  onSortingChange?: (response: any) => void;\n  onClickCell?: (row: any) => void;\n  onPageChange: (currentPage: any, skip: any) => void;\n  ongPageSizeChange: (value: number) => void;\n  onSelectedReset?: (row: any) => void;\n  defaultSort?: any[];\n  query?: string;\n  currentPage: number;\n  limit: number;\n  pageSizes?: number[];\n  approveDisapproveItems?: any[];\n  disableIntegratedFiltering?: boolean;\n  isVirtualTable?: boolean;\n}\n\nexport const TableComponent: React.FC<TableComponentProps> = (\n  props: TableComponentProps,\n): JSX.Element => {\n  const {\n    disableIntegratedFiltering,\n    columns,\n    formattedColumns,\n    singleSelect,\n    disablePaging,\n    disableSearch,\n    disableSelect,\n    disableSort,\n    disableFilter,\n    toolbarType,\n    columnExtensions,\n    columnBands,\n    id,\n    showSelectionColumn,\n    query,\n    totalCount,\n    currentPage,\n    limit,\n  } = props;\n  const [selection, setSelection] = useState<number[]>([]);\n  const [pageSizes] = useState(props.pageSizes ? props.pageSizes : [10, 25, 50, 100, 0]);\n  const [sorting, setSorting] = useState(props.defaultSort ? props.defaultSort : []);\n  const [rows, setRows] = useState(props.rows);\n  useEffect(() => {\n    setRows(props.rows);\n  }, [props.rows]);\n\n  useEffect(() => {\n    const empty: any = [];\n    setSorting(props.defaultSort ? props.defaultSort : empty);\n  }, [props.defaultSort])\n\n  // useEffect(() => {\n  //   global_approve_disapprove = props.approveDisapproveItems;\n  //   setRows([...rows])\n  // }, [props.approveDisapproveItems]);\n\n  const dataTypeProviders: any[] = [];\n\n  const changePageSize = (value) => {\n    // props.update(currentPage, value);\n    props.ongPageSizeChange(value);\n  }\n\n  const setCurrentPageMethod = (page) => {\n    let skip = (limit * page);\n\n    props.onPageChange(page, skip);\n  }\n\n  const setSortingMethod = (e) => {\n    props.updateSorting(e);\n    setSorting(e);\n    // setRows([]);\n  }\n\n  function handleSelectionChange(newSelection: any[]) {\n    console.log('here click row');\n    if (props.onClickRow) {\n      // selectedRow = newSelection[0];\n      if (!radioSelected && !clickCell && !rowResetSelected) {\n        console.log('onclickrow');\n        props.onClickRow(newSelection);\n      } else if (radioSelected && !rowResetSelected) {\n        console.log('radioselected', newSelection);\n        if (props.onSelectedRadio)\n          props.onSelectedRadio(newSelection[0], selectedValue);\n        setRows([...rows]);\n        radioSelected = false;\n      } else if (rowResetSelected) {\n        if (props.onSelectedReset) props.onSelectedReset(newSelection);\n        rowResetSelected = false;\n      } else if (clickCell) {\n        console.log(' here !!! >>>', props.onClickCell);\n        if (props.onClickCell) props.onClickCell(clickValue);\n        clickCell = false;\n        clickValue = {};\n      }\n    } else {\n      if (singleSelect) {\n        const lastSelected = newSelection.find(\n          (selected: number) => selection.indexOf(selected) === -1,\n        );\n\n        console.log(newSelection, selection, lastSelected);\n        if (lastSelected !== undefined) {\n          setSelection([lastSelected]);\n        }\n      } else {\n        setSelection(newSelection);\n      }\n    }\n  }\n  if (\n    formattedColumns !== undefined &&\n    Object.keys(formattedColumns).length > 0\n  ) {\n    if (formattedColumns['number'] !== undefined) {\n      dataTypeProviders.push(\n        <NumberDataTypeProvider for={formattedColumns.number} />,\n      );\n    }\n    if (formattedColumns['text'] !== undefined) {\n      dataTypeProviders.push(\n        <TextDataTypeProvider for={formattedColumns.text} />,\n      );\n    }\n    if (formattedColumns['system_name'] !== undefined) {\n      dataTypeProviders.push(\n        <SystemNameDataTypeProvider for={formattedColumns.system_name} />,\n      );\n    }\n    if (formattedColumns['data_name'] !== undefined) {\n      dataTypeProviders.push(\n        <DataDataTypeProvider for={formattedColumns.data_name} />,\n      );\n    }\n    if (formattedColumns['value_name'] !== undefined) {\n      dataTypeProviders.push(\n        <ValuesNameDataTypeProvider for={formattedColumns.value_name} />,\n      );\n    }\n    if (formattedColumns['required_columns'] !== undefined) {\n      dataTypeProviders.push(\n        <EmptyCellDataTypeProvider for={formattedColumns.required_columns} />,\n      );\n    }\n    if (formattedColumns['radio'] !== undefined) {\n      dataTypeProviders.push(\n        <RadioDataTypeProvider for={formattedColumns.radio} />,\n      );\n    }\n    if (formattedColumns['incomplete_radio'] !== undefined) {\n      dataTypeProviders.push(\n        <IncompleteRadioDataTypeProvider\n          for={formattedColumns.incomplete_radio}\n        />,\n      );\n    }\n    if (formattedColumns['approve_disapprove_action'] !== undefined) {\n      dataTypeProviders.push(\n        <ApproveDisapproveRadioDataTypeProvider\n          for={formattedColumns.approve_disapprove_action}\n        />,\n      );\n    }\n    if (formattedColumns['approve_disapprove_action_virtual'] !== undefined) {\n      dataTypeProviders.push(\n        <ApproveDisapproveRadioDataTypeProviderVirtual\n          for={formattedColumns.approve_disapprove_action_virtual}\n        />,\n      );\n    }\n    if (formattedColumns['approve_disapprove_reset'] !== undefined) {\n      dataTypeProviders.push(\n        <ResetDataTypeProvider\n          for={formattedColumns.approve_disapprove_reset}\n        />,\n      );\n    }\n    if (formattedColumns['required_checkbox'] !== undefined) {\n      dataTypeProviders.push(\n        <RequiredCheckboxDataTypeProvider\n          for={formattedColumns.required_checkbox}\n        />,\n      );\n    }\n    if (formattedColumns['upload_file'] !== undefined) {\n      dataTypeProviders.push(\n        <UploadFileDataTypeProvider\n          for={formattedColumns.upload_file}\n          {...props}\n        />,\n      );\n    }\n    if (formattedColumns['required_cell'] !== undefined) {\n      dataTypeProviders.push(\n        <RequiredDataTypeProvider\n          for={formattedColumns.required_cell}\n          {...props}\n        />,\n      );\n    }\n    if (formattedColumns['date'] !== undefined) {\n      dataTypeProviders.push(\n        <DateCellDataTypeProvider for={formattedColumns.date} />,\n      );\n    }\n    if (formattedColumns['time'] !== undefined) {\n      dataTypeProviders.push(\n        <TimeCellDataTypeProvider for={formattedColumns.time} />,\n      );\n    }\n  }\n\n  let toolbar = DefaultTableToolbar;\n\n  return (\n    <Paper id={id}>\n      {props.topBar ? props.topBar() : null}\n      <Grid rows={rows} columns={columns}>\n        {dataTypeProviders}\n        {/* Need to initialize paging state before paging panel */}\n        {!disablePaging ? (\n          <PagingState\n            currentPage={currentPage}\n            onCurrentPageChange={setCurrentPageMethod}\n            pageSize={limit}\n            onPageSizeChange={changePageSize}\n          />\n        ) : null}\n\n        {!disablePaging ? <CustomPaging totalCount={totalCount} /> : null}\n\n        {!disableSearch || query ? <SearchState value={query} /> : null}\n\n        {!disableSort ? (//&& props.defaultSort !== undefined ? (\n          <SortingState\n            defaultSorting={[]}\n            sorting={sorting}\n            onSortingChange={setSortingMethod}\n          />\n        ) : !disableSort ? (\n          <SortingState\n            defaultSorting={[]}\n          />\n        ) : null}\n\n        {!disableSort ? <IntegratedSorting /> : null}\n\n        {!disableSelect || !showSelectionColumn ? (\n          <SelectionState\n            selection={selection}\n            onSelectionChange={handleSelectionChange}\n          />\n        ) : null}\n        {!disableSelect ? <IntegratedSelection /> : null}\n\n        {!disableFilter ? (\n          <FilteringState\n            defaultFilters={[]}\n            filters={\n              props.defaultFilter !== undefined ? props.defaultFilter : []\n            }\n            columnFilteringEnabled={props.columnFilteringEnabled}\n            columnExtensions={props.filterExtensions}\n            onFiltersChange={props.onFilterChange}\n          />\n        ) : null}\n\n        {!disableFilter && !disableIntegratedFiltering ? <IntegratedFiltering /> : null}\n\n        {!props.isVirtualTable ? (\n          <Table\n            columnExtensions={columnExtensions}\n            messages={{ noData: props.message }}\n          />\n        ) : null}\n\n\n\n        {props.isVirtualTable ? (\n          <VirtualTable\n            columnExtensions={columnExtensions}\n            height={300}\n          />\n        ) : null}\n\n        {!disableSelect && !showSelectionColumn ? (\n          <TableSelection\n            showSelectAll={!singleSelect ? true : false}\n            cellComponent={!singleSelect ? TableCheckBox : TableRadio}\n            headerCellComponent={TableCheckBox}\n          />\n        ) : !showSelectionColumn ? (\n          <TableSelection\n            selectByRowClick\n            showSelectionColumn={false}\n            cellComponent={!singleSelect ? TableCheckBox : TableRadio}\n            headerCellComponent={TableCheckBox}\n          />\n        ) : null}\n\n        <TableHeaderRow\n          showSortingControls={!disableSort}\n          sortLabelComponent={TableSortLabel}\n        />\n\n        {!disableFilter ? (\n          <TableFilterRow cellComponent={TableFilterCell} />\n        ) : null}\n        {columnBands ? <TableBandHeader columnBands={columnBands} /> : null}\n\n        {!disableSearch || toolbarType ? (\n          <Toolbar rootComponent={toolbar} />\n        ) : null}\n        {!disableSearch ? (\n          <SearchPanel inputComponent={TableSearchPanel} />\n        ) : null}\n\n        {!disablePaging ? <PagingPanel pageSizes={pageSizes} /> : null}\n      </Grid>\n    </Paper>\n  );\n};\n\nTableComponent.defaultProps = {\n  rows: [],\n  columns: [],\n  columnExtensions: [],\n  filterExtensions: [],\n  columnBands: null,\n  formattedColumns: {},\n  singleSelect: false,\n  disableSearch: false,\n  disablePaging: false,\n  disableSelect: false,\n  disableFilter: false,\n  disableSort: false,\n  toolbarType: null,\n  defaultFilter: [],\n  showSelectionColumn: false,\n  columnFilteringEnabled: true,\n  id: 'table-1',\n  totalCount: 0,\n  message: 'No available data',\n  query: '',\n  currentPage: 0,\n  limit: 0\n};\n","import Fetch, { requestOption } from '../index'\n\nconst fetch = new Fetch();\nfetch.getAccessToken();\n\nexport const getICD = (limit: number, skip: number) => {\n\n    let filters = {\n        limit: limit,\n        skip: skip,\n    };\n    let option: requestOption = {\n        method: 'GET'\n    }\n    if (fetch.getAccessToken()) {\n        return fetch.call(option, `icd10-codes/search?filter=${JSON.stringify(filters)}`, true)\n    }\n    return fetch.fetchAccessToken().then(() => fetch.call(option, `icd10-codes/search?filter=${JSON.stringify(filters)}`, true))\n}\n\nexport const searchICD = (limit: number, offset: number, filters: any, query: string, sorting?: any, key?: string, ) => {\n\n\n    let filter_key_str = '';\n    if (key !== undefined && key !== '') {\n        filter_key_str = `&filter[where][main_category][like]=${key}`;\n    }\n    let sorting_str = '';\n    if (sorting && sorting.length !== 0) {\n        sorting_str =\n            '&filter[order]=' +\n            sorting[0]['columnName'] +\n            ' ' +\n            sorting[0]['direction'];\n    }\n    let filter_str = '';\n    if (filters) {\n        filters.forEach(filter => {\n            filter_str =\n                filter_str + '&' + filter['columnName'] + '=' + filter['value'];\n        });\n    }\n    let search = query ? '&search=' + query : '';\n    let ICD_URL =\n        `icd10-codes/search?filter[limit]=${limit}&filter[skip]=${offset}` +\n        search +\n        filter_str +\n        sorting_str +\n        filter_key_str;\n    if (limit === 0)\n        ICD_URL =\n            `icd10-codes/search?filter[skip]=${offset}` +\n            search +\n            filter_str +\n            sorting_str +\n            filter_key_str;\n    let option: requestOption = {\n        method: 'GET'\n    }\n\n    if (fetch.getAccessToken()) {\n        return fetch.call(option, ICD_URL, true)\n    }\n    return fetch.fetchAccessToken().then(() => fetch.call(option, ICD_URL, true))\n}\n\nexport const addICD10Codes = (payload: any) => {\n\n    let option: requestOption = {\n        method: 'POST',\n        body: payload\n    }\n\n    if (fetch.getAccessToken()) {\n        return fetch.call(option, `icd10-codes/multiple`, true)\n    }\n    return fetch.fetchAccessToken().then(() => fetch.call(option, `icd10-codes/multiple`, true))\n}\n\nexport const editICD = (payload: any, id: string | undefined) => {\n\n    let option: requestOption = {\n        method: 'PUT',\n        body: payload\n    }\n\n    if (fetch.getAccessToken()) {\n        return fetch.call(option, `icd10-codes/edit/${id}`, true)\n    }\n    return fetch.fetchAccessToken().then(() => fetch.call(option, `icd10-codes/edit/${id}`, true))\n}\n\nexport const deleteICD = (id: string) => {\n\n    let option: requestOption = {\n        method: 'DELETE'\n    }\n\n    if (fetch.getAccessToken()) {\n        return fetch.call(option, `icd10-codes/${id}`, true)\n    }\n    return fetch.fetchAccessToken().then(() => fetch.call(option, `icd10-codes/${id}`, true))\n}\n\nexport const getICDSynonyms = (filters?: any, query?: string, limit?: number, offset?: number, sorting?: any) => {\n\n    let uri_obj: any = {};\n    let uri_string: string = `icd10-synonyms/list`;\n    let filter = {};\n    if (filters && Array.isArray(filters) && filters.length > 0) {\n        filter['where'] = {};\n        filters.forEach(item => {\n            if (item['columnName'] !== 'status')\n                filter['where'][item['columnName']] = { like: item['value'], options: 'i' }\n            else\n                filter['where'][item['columnName']] = item['value']\n        });\n    }\n\n    if (sorting && Array.isArray(sorting) && sorting.length > 0)\n        filter['order'] = `${sorting[0]['columnName']} ${sorting[0]['direction']}`;\n\n    if (offset) filter['skip'] = offset;\n\n    if (limit) filter['limit'] = limit;\n\n    if (query) uri_obj['search'] = query;\n\n    if (Object.entries(filter).length > 0) uri_obj['filter'] = JSON.stringify(filter);\n\n    let i = 0;\n    for (let key of Object.keys(uri_obj)) {\n        if (!i) uri_string += '?';\n        else uri_string += '&';\n        uri_string += `${key}=${uri_obj[key]}`;\n        i += 1;\n    }\n\n    let option: requestOption = {\n        method: 'GET'\n    }\n\n    if (fetch.getAccessToken()) {\n        return fetch.call(option, uri_string, true);\n    }\n    return fetch.fetchAccessToken().then(() => fetch.call(option, uri_string, true))\n}\n\n\nexport const getActiveSynonyms = (\n    filters?: any,\n    query?: string,\n    limit?: number,\n    offset?: number,\n    sorting?: any\n) => {\n    let filter: any = {\n        limit: limit,\n        skip: offset,\n        where: filters\n    }\n\n    let search_str = '';\n    if (query) search_str = '&search=' + query;\n\n\n    if (sorting) {\n        filter['order'] = sorting;\n    }\n\n    let option: requestOption = {\n        method: 'GET'\n    }\n\n    return fetch.fetchAccessToken().then(() => fetch.call(option, `icd10-synonyms/search?filter=${JSON.stringify(filter)}${search_str}`, true))\n}\n\n\nexport const addSynonyms = (payload: any) => {\n\n    console.log('payload', payload);\n\n    let option: requestOption = {\n        method: 'POST',\n        body: payload\n    }\n\n    return fetch.fetchAccessToken().then(() => fetch.call(option, `icd10-synonyms/create`, true))\n}\n\n\nexport const getAllSynonyms = (\n    filters?: any,\n) => {\n    let filter: any = {\n        where: filters\n    }\n\n    let option: requestOption = {\n        method: 'GET'\n    }\n\n    return fetch.fetchAccessToken().then(() => fetch.call(option, `icd10-synonyms/list?filter=${JSON.stringify(filter)}&tabCount=true`, true))\n}\n\nexport const patchSynonyms = (payload: any) => {\n\n    // console.log('payload', payload);\n\n    let option: requestOption = {\n        method: 'PATCH',\n        body: payload\n    }\n\n    return fetch.fetchAccessToken().then(() => fetch.call(option, `icd10-synonyms/edit`, true))\n}","import React, { FC } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport clsx from 'clsx';\n\nimport { IConfirmationModal } from './IConfirmationModal';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n\tdialog: {},\n\tdialogAction: {\n\t\tmarginBottom: theme.spacing(2),\n\t},\n}));\n\nexport const ConfirmationModal: FC<IConfirmationModal.IProps> = props => {\n\tconst classes = useStyles();\n\tconst reset = () => {};\n\n\tconst handleCancel = () => {\n\t\treset();\n\t\tprops.onClose(true);\n\t}\n\n\tconst handleClose = () => {\n\t\treset();\n\t\tprops.onClose();\n\t};\n\n\tconst handleSubmit = () => {\n\t\treset();\n\t\tprops.onSubmit();\n\t\tprops.onClose();\n\t};\n\n\treturn (\n\t\t<Dialog\n\t\t\topen={props.isModalOpen}\n\t\t\tonClose={handleClose}\n\t\t\taria-labelledby=\"form-dialog-title\"\n\t\t\tmaxWidth=\"sm\"\n\t\t\tclassName={classes.dialog}\n\t\t>\n\t\t\t<DialogTitle id=\"form-dialog-title\">{props.title}</DialogTitle>\n\t\t\t<DialogContent>\n\t\t\t\t<Grid container spacing={2} justify=\"space-between\" alignItems=\"flex-start\">\n\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t{props.message}\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</DialogContent>\n\t\t\t<DialogActions className={clsx(classes.dialogAction)}>\n\t\t\t\t<Grid container spacing={2} justify=\"center\" alignItems=\"flex-start\">\n\t\t\t\t\t<Grid item xs={4}>\n\t\t\t\t\t\t<Button onClick={handleCancel} variant=\"outlined\" color=\"default\" fullWidth>\n\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Grid>\n\t\t\t\t\t<Grid item xs={4}>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tonClick={handleSubmit}\n\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{props.submitType === 'submit' ? 'Submit' : 'Confirm'}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</DialogActions>\n\t\t</Dialog>\n\t);\n};\n\nConfirmationModal.defaultProps = {\n\tisModalOpen: false,\n};\n\nexport default ConfirmationModal;","import { Icd10, Cpt, Icd10Synonym } from '../LookupModels';\nimport moment from 'moment';\n\nexport const constructIcd10 = (data: Icd10) => {\n\n\tlet status = 'Awaiting Activation';\n\tconst today = new Date()\n\tconst eff_date = data['effectivity_date'] ?\n\t\tnew Date(new Date(data['effectivity_date']).setHours(0, 0, 0, 0)) :\n\t\tundefined\n\tconst exp_date = data['expiry_date'] ?\n\t\tnew Date(new Date(data['expiry_date']).setHours(0, 0, 0, 0)) :\n\t\tundefined\n\n\tconsole.log('DATES : ', today, eff_date, exp_date);\n\tif (exp_date && eff_date)\n\t\tconsole.log('BOOLS', eff_date <= today, exp_date <= today);\n\n\tif (eff_date && moment(eff_date).isValid() && eff_date <= today)\n\t\tstatus = 'Active';\n\n\tif (exp_date && moment(exp_date).isValid() && exp_date <= today)\n\t\tstatus = 'Deactivated';\n\n\tconst gender_limited = data['gender'] ? true : undefined;\n\tconst gender = data['gender'] ? data['gender'] : undefined;\n\n\tconst payload: Icd10 = {\n\t\t_id: data['_id'],\n\t\tcategory_code: data['category_code'],\n\t\tdiagnosis_code: data['diagnosis_code'] ? data['diagnosis_code'].toString() : undefined,\n\t\tfull_code: data['full_code'],\n\t\tabbreviated_description: data['abbreviated_description'],\n\t\tfull_description: data['full_description'],\n\t\tcategory_title: data['category_title'],\n\t\tmain_category: data['main_category'],\n\t\tgender_limited: gender_limited,\n\t\tgender: gender,\n\t\teffectivity_date: data['effectivity_date'],\n\t\texpiry_date: data['expiry_date'],\n\t\tstatus: status,\n\t\tdate_updated: data['date_updated'],\n\t}\n\n\treturn payload\n}\n\nexport const constructCpt = (data: Cpt) => {\n\n\tlet status = 'Awaiting Activation';\n\tconst today = new Date()\n\tconst eff_date = data['effectivity_date'] ?\n\t\tnew Date(new Date(data['effectivity_date']).setHours(0, 0, 0, 0)) :\n\t\tundefined\n\tconst exp_date = data['expiry_date'] ?\n\t\tnew Date(new Date(data['expiry_date']).setHours(0, 0, 0, 0)) :\n\t\tundefined\n\n\tconsole.log('DATES : ', today, eff_date, exp_date);\n\tif (exp_date && eff_date)\n\t\tconsole.log('BOOLS', eff_date <= today, exp_date <= today);\n\n\tif (eff_date && moment(eff_date).isValid() && eff_date <= today)\n\t\tstatus = 'Active';\n\n\tif (exp_date && moment(exp_date).isValid() && exp_date <= today)\n\t\tstatus = 'Deactivated';\n\n\n\tconst gender_limited = data['gender'] ? true : undefined;\n\tconst gender = data['gender'] ? data['gender'] : undefined;\n\n\tconst payload: Cpt = {\n\t\t_id: data['_id'],\n\t\tcode: data['code'],\n\t\tdescription: data['description'],\n\t\tcategory: data['category'],\n\t\tgender_limited: gender_limited,\n\t\tgender: gender,\n\t\teffectivity_date: data['effectivity_date'],\n\t\texpiry_date: data['expiry_date'],\n\t\tstatus: status,\n\t\tdate_updated: data['date_updated'],\n\t}\n\n\treturn payload\n}\n\nexport const reconstructIcd10 = (data: Icd10 | undefined) => {\n\tif (!data)\n\t\treturn constructEmptyIcd10();\n\tconst reform_data: Icd10 = {\n\t\t_id: data._id,\n\t\tcategory_code: data['category_code'],\n\t\tdiagnosis_code: data['diagnosis_code'] ? data['diagnosis_code'].toString() : undefined,\n\t\tfull_code: data.full_code,\n\t\tabbreviated_description: data.abbreviated_description,\n\t\tfull_description: data.full_description,\n\t\tcategory_title: data.category_title,\n\t\tmain_category: data.main_category,\n\t\teffectivity_date: data.effectivity_date,\n\t\texpiry_date: data.expiry_date,\n\t\tstatus: data.status,\n\t\tgender_limited: Boolean(data.gender_limited),\n\t\tgender: data.gender_limited ? data.gender : '',\n\t\tdate_updated: data['date_updated'],\n\t}\n\treturn reform_data\n}\n\nexport const reconstructCpt = (data: Cpt | undefined) => {\n\tif (!data)\n\t\treturn constructEmptyCpt();\n\tconst reform_data: Cpt = {\n\t\t_id: data._id,\n\t\tcode: data.code,\n\t\tdescription: data.description,\n\t\tcategory: data.category,\n\t\teffectivity_date: data.effectivity_date,\n\t\texpiry_date: data.expiry_date,\n\t\tstatus: data.status,\n\t\tgender_limited: Boolean(data.gender_limited),\n\t\tgender: data.gender_limited ? data.gender : '',\n\t}\n\treturn reform_data\n}\n\nexport const constructEmptyIcd10 = () => {\n\tconst payload: Icd10 = {\n\t\tfull_code: '',\n\t\tfull_description: '',\n\t\tcategory_title: '',\n\t\tmain_category: '',\n\t\teffectivity_date: '',\n\t\texpiry_date: '',\n\t\tstatus: '',\n\t\tgender_limited: false,\n\t\tgender: '',\n\t}\n\treturn payload\n}\n\nexport const constructEmptyCpt = () => {\n\tconst payload: Cpt = {\n\t\tcode: '',\n\t\tdescription: '',\n\t\tcategory: '',\n\t\teffectivity_date: '',\n\t\texpiry_date: '',\n\t\tstatus: '',\n\t\tgender_limited: false,\n\t\tgender: '',\n\t}\n\treturn payload\n}\n\nexport const constructPutIcd10 = (data: Icd10) => {\n\tconst payload: Icd10 = Object.assign({}, data)\n\n\tpayload['gender'] = payload['gender_limited'] ? payload['gender'] : '';\n\n\tif (payload['status'] !== undefined) {\n\t\tdelete payload['status']\n\t}\n\tif (payload['expiry_date'] === '') {\n\t\tdelete payload['expiry_date']\n\t}\n\treturn payload\n}\n\nexport const constructPutCpt = (data: Cpt) => {\n\tconst payload: Cpt = Object.assign({}, data)\n\n\tpayload['gender'] = payload['gender_limited'] ? payload['gender'] : '';\n\n\tif (payload['status'] !== undefined) {\n\t\tdelete payload['status']\n\t}\n\tif (payload['expiry_date'] === '') {\n\t\tdelete payload['expiry_date']\n\t}\n\treturn payload\n}\n\nexport const constructPostIcd10 = (data: any) => {\n\tlet data_arr: Icd10[] = [];\n\tif (Array.isArray(data)) {\n\t\tdata_arr = data\n\t} else {\n\t\tdata_arr.push(data)\n\t}\n\tconst payload: Icd10[] = data_arr.map(item => {\n\t\tif (item['expiry_date'] === '') {\n\t\t\tdelete item['expiry_date'];\n\t\t}\n\t\tif (item['status'] !== undefined) {\n\t\t\tdelete item['status']\n\t\t}\n\t\titem['gender'] = item['gender_limited'] ? item['gender'] : '';\n\t\treturn item;\n\t})\n\treturn payload\n}\n\nexport const constructPostCpt = (data: any) => {\n\tlet data_arr: Cpt[] = [];\n\tif (Array.isArray(data)) {\n\t\tdata_arr = data\n\t} else {\n\t\tdata_arr.push(data)\n\t}\n\tconst payload: Cpt[] = data_arr.map(item => {\n\t\tif (item['expiry_date'] === '') {\n\t\t\tdelete item['expiry_date'];\n\t\t}\n\t\tif (item['status'] !== undefined) {\n\t\t\tdelete item['status']\n\t\t}\n\t\titem['gender'] = item['gender_limited'] ? item['gender'] : '';\n\t\treturn item;\n\t})\n\treturn payload\n}\n\nexport const constructAddSynonymPayload = (full_code: string, title: string, diagnosis_code: string) => {\n\tconst synonym = { full_code: full_code, synonyms: [title], diagnosis_code: diagnosis_code }\n\treturn { approve: [synonym] }\n}\n\nexport const constructUnapprovedSynonymPayload = (synonyms: Icd10Synonym[]) => {\n\n\tconst all_approved: Icd10Synonym[] = synonyms.filter(synonym => synonym.action_chosen === 'approve');\n\tlet icd_append: any[] = [];\n\n\n\tconst patch_synonyms: Icd10Synonym[] = synonyms.filter(synonym =>\n\t\tsynonym.action_chosen === 'approve' || synonym.action_chosen === 'disapprove'\n\t).map(synonym => {\n\t\tconst status: string = synonym.action_chosen === 'approve' ? 'active' : synonym.action_chosen === 'disapprove' ? 'inactive' : '';\n\t\tdelete synonym['action_chosen'];\n\t\tsynonym.status = status;\n\t\treturn synonym;\n\t});\n\n\n\n\tall_approved.forEach(synonym => {\n\t\tlet synonyms: string[] = [];\n\t\tif (icd_append.some(item => item.full_code === synonym.full_code)) {\n\t\t\tsynonyms = icd_append.filter(item => item.full_code === synonym.full_code)[0]['synonyms'];\n\t\t\ticd_append = icd_append.filter(item => item.full_code !== synonym.full_code);\n\t\t}\n\n\t\tconst synonym_lowercase: string = synonym.title.toLowerCase();\n\t\tif (!synonyms.includes(synonym_lowercase)) synonyms.push(synonym_lowercase);\n\n\t\ticd_append.push({\n\t\t\tfull_code: synonym.full_code,\n\t\t\tsynonyms: synonyms\n\t\t});\n\t});\n\n\tconsole.log('PATCH SYNONYMS', patch_synonyms, 'ICD APPEND', icd_append);\n\treturn { patch_synonyms: patch_synonyms, icd_append_synonyms: icd_append }\n\n}\n\n\nexport const constructDeactivateSynonymPayload = (synonyms: Icd10Synonym[]) => {\n\n\tconst for_deactivate: Icd10Synonym[] = synonyms.filter(synonym => synonym.action_chosen);\n\tlet icd_discard: any[] = [];\n\n\n\tconst patch_synonyms: Icd10Synonym[] = synonyms.filter(synonym =>\n\t\tsynonym.action_chosen\n\t).map(synonym => {\n\t\tconst status: string = 'inactive'\n\t\tdelete synonym['action_chosen'];\n\t\tsynonym.status = status;\n\t\treturn synonym;\n\t});\n\n\n\n\tfor_deactivate.forEach(synonym => {\n\t\tlet synonyms: string[] = [];\n\t\tif (icd_discard.some(item => item.full_code === synonym.full_code)) {\n\t\t\tsynonyms = icd_discard.filter(item => item.full_code === synonym.full_code)[0]['synonyms'];\n\t\t\ticd_discard = icd_discard.filter(item => item.full_code !== synonym.full_code);\n\t\t}\n\n\t\tconst synonym_lowercase: string = synonym.title.toLowerCase();\n\t\tif (!synonyms.includes(synonym_lowercase)) synonyms.push(synonym_lowercase);\n\n\t\ticd_discard.push({\n\t\t\tfull_code: synonym.full_code,\n\t\t\tsynonyms: synonyms\n\t\t});\n\t});\n\n\tconsole.log('PATCH SYNONYMS', patch_synonyms, 'ICD DISCARD', icd_discard);\n\treturn { patch_synonyms: patch_synonyms, icd_discard_synonyms: icd_discard }\n\n}\n\n\nexport const constructActivateSynonymPayload = (synonyms: Icd10Synonym[]) => {\n\n\tconst for_deactivate: Icd10Synonym[] = synonyms.filter(synonym => synonym.action_chosen);\n\tlet icd_append: any[] = [];\n\n\n\tconst patch_synonyms: Icd10Synonym[] = synonyms.filter(synonym =>\n\t\tsynonym.action_chosen\n\t).map(synonym => {\n\t\tconst status: string = 'active'\n\t\tdelete synonym['action_chosen'];\n\t\tsynonym.status = status;\n\t\treturn synonym;\n\t});\n\n\n\n\tfor_deactivate.forEach(synonym => {\n\t\tlet synonyms: string[] = [];\n\t\tif (icd_append.some(item => item.full_code === synonym.full_code)) {\n\t\t\tsynonyms = icd_append.filter(item => item.full_code === synonym.full_code)[0]['synonyms'];\n\t\t\ticd_append = icd_append.filter(item => item.full_code !== synonym.full_code);\n\t\t}\n\n\t\tconst synonym_lowercase: string = synonym.title.toLowerCase();\n\t\tif (!synonyms.includes(synonym_lowercase)) synonyms.push(synonym_lowercase);\n\n\t\ticd_append.push({\n\t\t\tfull_code: synonym.full_code,\n\t\t\tsynonyms: synonyms\n\t\t});\n\t});\n\n\tconsole.log('PATCH SYNONYMS', patch_synonyms, 'ICD APPEND', icd_append);\n\treturn { patch_synonyms: patch_synonyms, icd_append_synonyms: icd_append }\n\n}","import React from 'react';\nimport { TableComponent } from 'Components/UI/TableComponent/CodeListTable';\nimport {\n  TextField,\n  InputAdornment,\n  Grid,\n  List,\n  ListItemText,\n} from '@material-ui/core';\nimport { Search } from '@material-ui/icons/';\nimport { Loader } from '../Loader';\nimport Link from '@material-ui/core/Link';\nimport { GridHorizontalDivider } from 'Components/UI';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { SideModalBlock } from 'Components/UI';\nimport { SideModalBody } from 'Components/UI';\nimport { SIDE_MODAL_BLOCK_FIELDS } from 'Components/UI/SideModalBlock/FieldConstants';\nimport { MsgModal } from 'Components/UI';\nimport moment from 'moment';\nimport {\n  getICD,\n  searchICD,\n  addICD10Codes,\n  editICD,\n} from 'Pages/API/Calls/ICD10'\nimport { ConfirmationModal } from '../ConfirmationModal'\nimport { Utils } from '@hims/core'\nimport { Icd10 } from '../../LookupModels'\nimport {\n  constructIcd10,\n  constructEmptyIcd10,\n  constructPutIcd10,\n  constructPostIcd10,\n  reconstructIcd10\n} from '../ConstructPayloads';\nimport { cloneDeep } from 'lodash';\n\n\nconst helper = new Utils.IndexedDBHelper();\n\ninterface IState {\n  confirm_modal_title: string;\n  confirm_modal_message: string;\n  confirm_modal_open: boolean;\n  action_after_confirm: () => void;\n  invalid_fields: string[];\n  loading_state: boolean;\n  block_title?: string;\n  show_side_modal_block?: string;\n  side_modal_block_mode: 'view' | 'edit' | 'add' | '';\n  code_info?: Icd10;\n  code_response: any;\n  code_data_all: any;\n  code_data: any;\n  global_filter: string;\n  default_filters: any;\n  default_sorting: any;\n  default_clicked: string;\n  isModalOpen: boolean;\n  modalTitle: string;\n  modalMessage: any;\n  action_after_info: () => void;\n  totalCount: number;\n  typing: boolean;\n  typingTimeout: any;\n  page: number;\n  limit: number;\n  isPageSizeModal: boolean;\n  highlightedCodeFromList: number;\n\n  icd_categories: string[];\n  no_data_message: string;\n  icd_category_dropdown_choices: any[];\n  disableSaveButton: boolean;\n  clickSaveButton: boolean;\n}\n\ninterface IProps {\n  classes: any;\n\n\n  icdCategories: string[];\n  icdCategoryDropdown: any;\n\n\n  setICDCategories: (categories: string[]) => void;\n  setICDCategoryDropdown: (dropdown: any) => void;\n}\n\nexport class ICD10Section extends React.Component<IProps, IState> {\n  private requiredFields: any;\n  private excludeFields: any;\n\n  constructor(props) {\n    super(props);\n\n    this.requiredFields = SIDE_MODAL_BLOCK_FIELDS.ICD10.editOrAdd.checkInvalidFields;\n    this.excludeFields = SIDE_MODAL_BLOCK_FIELDS.ICD10.editOrAdd.excludeFields\n\n    const table: any = {\n      formattedColumns: {},\n      columnExtensions: [\n        {\n          columnName: 'full_code',\n          width: 150,\n          wordWrapEnabled: true,\n        },\n        {\n          columnName: 'full_description',\n          width: 500,\n          wordWrapEnabled: true,\n        },\n      ],\n      columns: [\n        {\n          name: 'full_code',\n          title: 'ICD10 Code',\n        },\n        {\n          name: 'full_description',\n          title: 'Description',\n        },\n      ],\n      rows: [],\n    };\n\n\n    this.state = {\n      icd_category_dropdown_choices: props.icdCategoryDropdown,\n      icd_categories: props.icdCategories,\n      no_data_message: '',\n      confirm_modal_title: '',\n      confirm_modal_message: '',\n      confirm_modal_open: false,\n      action_after_confirm: () => { },\n      invalid_fields: [],\n      highlightedCodeFromList: -1,\n      loading_state: true,\n      code_response: [],\n      code_info: constructEmptyIcd10(),\n      show_side_modal_block: 'none',\n      side_modal_block_mode: '',\n      code_data: table,\n      code_data_all: table,\n      block_title: '',\n      global_filter: '',\n      default_filters: [],\n      default_sorting: [{\n        columnName: 'full_code',\n        direction: 'asc'\n      }\n      ],\n      default_clicked: '',\n      isModalOpen: false,\n      isPageSizeModal: false,\n      modalTitle: '',\n      modalMessage: '',\n      action_after_info: () => { },\n      totalCount: 0,\n      typing: false,\n      typingTimeout: 0,\n      page: 0,\n      limit: 10,\n      disableSaveButton: false,\n      clickSaveButton: false,\n    };\n  }\n\n  componentDidMount() {\n    if (!this.state.icd_category_dropdown_choices || !this.state.icd_categories.length) {\n      this.fetchICDCategoriesIndexdb()\n        .then(() => this.initialData())\n        .catch(() => this.initialData())\n    } else {\n      this.initialData()\n    }\n\n    document.addEventListener('keydown', this.escFunction, false);\n  }\n\n  escFunction = (event) => {\n    if (event.keyCode === 27) {\n      this.handleCloseSideModalBlock()\n    }\n  }\n\n  initialData = () => {\n    this.setState({ no_data_message: `Searching for ICD10 codes` })\n    this.searchCode(\n      10,\n      0,\n      this.state.default_filters,\n      this.state.global_filter,\n      this.state.default_sorting,\n      this.state.default_clicked)\n  };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  /***********************  \n       CRUD FUNCTIONS \n  ***********************/\n\n  addCodeIndexdb = (data: any[]) => {\n    helper.openDb('himsDb').then(res => {\n      let db = res.result\n      try {\n        helper.saveToStore(db, 'icd10_list', data)\n          .then(res => console.log('RES', res))\n          .catch(e => console.log(e))\n      } catch (e) {\n        console.log(e)\n      } finally { }\n    })\n  }\n\n  patchCodeIndexdb = (data: any) => {\n    helper.openDb('himsDb').then(res => {\n      let db = res.result\n      try {\n        helper.updateEntryByKey(db, 'icd10_list', data['_id'], data)\n          .then(res => console.log('Successfully patched code in IndexDB', res))\n          .catch(e => console.log(e))\n      } catch (e) {\n        console.log(e)\n      } finally { }\n    })\n  }\n\n\n  fetchICDCategoriesIndexdb = async () => {\n    await Utils.StorageService('icd10_list')\n      .then(icds => {\n        if (Array.isArray(icds) && icds.length > 0) {\n          let category_arr: string[] = []\n          let category_dropdown_choices_arr: any[] = [{ name: '', value: '' }]\n          icds.filter(item => {\n            if (item && item.main_category && !category_arr.includes(item.main_category)) {\n              category_arr.push(item.main_category)\n              category_dropdown_choices_arr.push({ name: item.main_category, value: item.main_category })\n              return true;\n            }\n            return false;\n          })\n          this.props.setICDCategories(category_arr)\n          this.props.setICDCategoryDropdown(category_dropdown_choices_arr)\n          this.setState({\n            icd_categories: category_arr,\n            icd_category_dropdown_choices: category_dropdown_choices_arr\n          })\n        }\n      })\n      .catch(err => console.log(err));\n  }\n\n  searchCode = (\n    limit: number,\n    skip: number,\n    filters: any,\n    filters_global: any,\n    sorting: any,\n    clicked: any) => {\n\n    searchICD(limit, skip, filters, filters_global, sorting, clicked).then(response => {\n      this.setState({ no_data_message: 'No available data' })\n      if (response && response.error === undefined) {\n        const table = this.generateDataForTable(\n          response.result ? response.result : [],\n        );\n        this.setState({\n          code_response: response,\n          code_data_all: table,\n          code_data: table,\n          loading_state: false,\n          totalCount: response.total && response.total.count ? response.total.count : 0,\n        });\n      } else if (response && response.error && response.error.statusCode === 401) {\n        const table = this.generateDataForTable([]);\n        this.setState({\n          code_response: [],\n          code_data_all: table,\n          loading_state: false,\n          isModalOpen: true,\n          modalTitle: 'Unauthorized',\n          modalMessage: 'You are not authorized to view ICD10 codes.',\n        });\n      } else {\n        const table = this.generateDataForTable([]);\n        this.setState({\n          code_response: [],\n          code_data_all: table,\n          loading_state: false,\n          isModalOpen: true,\n          modalTitle: 'Loading failed',\n          modalMessage: 'An error occured while loading the list of codes.',\n        });\n      }\n    }).catch(() => {\n      const table = this.generateDataForTable([]);\n      this.setState({\n        code_response: [],\n        code_data_all: table,\n        loading_state: false,\n        isModalOpen: true,\n        modalTitle: 'Loading failed',\n        modalMessage: 'An error occured while loading the list of codes.',\n        page: 0,\n      });\n    });\n  }\n\n\n  patchCode = (data: any) => {\n    const payload: Icd10 = constructPutIcd10(data)\n\n    const full_code: string = payload.full_code;\n\n    this.setState({\n      loading_state: true,\n      no_data_message: `Searching for ICD10 codes`\n    })\n    editICD(JSON.stringify(payload), payload._id).then(response => {\n      this.setState({\n        loading_state: false,\n        no_data_message: 'No available data'\n      })\n      if (response && response.error === undefined && response.message !== undefined) {\n        this.changePageUpdate(this.state.limit, this.state.limit * this.state.page)\n        this.patchCodeIndexdb(payload)\n        this.setState({\n          disableSaveButton: true,\n          isModalOpen: true,\n          modalTitle: 'Success',\n          modalMessage: `You have ${response.message} code!`\n        });\n      } else if (response && response.error && response.error.statusCode === 401) {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'Unauthorized',\n          modalMessage: 'You are not authorized to edit ICD10 codes.'\n        });\n      } else if (response && response.error && response.error.statusCode === 400 && response.error.message) {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'ICD10 Code Already Exists',\n          modalMessage: (<span><strong>[{full_code}]</strong> cannot be added. This already exists on the list.</span>)\n        });\n      } else {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'Failed',\n          modalMessage: 'Something went wrong while saving!'\n        });\n      }\n    }).catch(error => {\n      if (error == 'Error: This code already exists.') {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'ICD10 Code Already Exists',\n          modalMessage: (<span><strong>[{full_code}]</strong> cannot be added. This already exists on the list.</span>),\n          loading_state: false\n        });\n      } else {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'Failed',\n          modalMessage: 'Something went wrong while saving!',\n          loading_state: false\n        });\n      }\n    });\n  }\n\n\n\n  addCodes = (data: any) => {\n    this.setState({\n      loading_state: true\n    })\n\n    const payload: Icd10[] = constructPostIcd10(data)\n    let full_code: string = '';\n    if(payload && payload.length > 0) full_code = payload[0].full_code;\n    addICD10Codes(JSON.stringify(payload)).then(response => {\n      this.setState({\n        loading_state: false\n      })\n      if (response && response.error === undefined && response.message && response.result) {\n        this.changePageUpdate(this.state.limit, this.state.limit * this.state.page)\n        this.addCodeIndexdb(response.result)\n        this.setState({\n          disableSaveButton: true,\n          isModalOpen: true,\n          modalTitle: 'Success',\n          modalMessage: `You have successfully added ${response.result.length} ICD10 code/s!`\n        });\n      } else if (response && response.error && response.error.statusCode === 401) {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'Unauthorized',\n          modalMessage: 'You are not authorized to add ICD10 codes.'\n        });\n      } else if (response && response.error && response.error.statusCode === 400 && response.error.message) {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'ICD10 Code Already Exists',\n          modalMessage: (<span><strong>[{full_code}]</strong> cannot be added. This already exists on the list.</span>),\n        });\n      }\n      else {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'Failed',\n          modalMessage: 'Something went wrong while adding!'\n        });\n      }\n    }).catch(error => {\n      if (error == 'Error: This code already exists.') {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'ICD10 Code Already Exists',\n          modalMessage: (<span><strong>[{full_code}]</strong> cannot be added. This already exists on the list.</span>),\n          loading_state: false\n        });\n      } else {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'Failed',\n          modalMessage: 'Something went wrong while saving!',\n          loading_state: false\n        });\n      }\n    });\n\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  /***********************  \n  TABLE AND PAGE FUNCTIONS \n  ***********************/\n\n  generateDataForTable(response: any) {\n    const table: any = {\n      formattedColumns: {},\n      columnExtensions: [\n        {\n          columnName: 'full_code',\n          width: 150,\n          wordWrapEnabled: true,\n        },\n        {\n          columnName: 'full_description',\n          width: 500,\n          wordWrapEnabled: true,\n        },\n      ],\n      columns: [\n        {\n          name: 'full_code',\n          title: 'ICD10 Code',\n        },\n        {\n          name: 'full_description',\n          title: 'Description',\n        },\n      ],\n      rows: [],\n    };\n    for (const cnt in response) {\n      const item = response[cnt];\n      const temp_row: any = {};\n      temp_row['full_code'] = item['full_code'];\n      temp_row['full_description'] = item['full_description'];\n      table['rows'].push(temp_row);\n    }\n    return table;\n  }\n\n\n\n\n\n\n\n  changePageUpdate = (limit: number, skip: number) => {\n    this.handleCloseSideModalBlock();\n    this.setState({\n      loading_state: true,\n      no_data_message: `Searching for ICD10 codes`\n    });\n    if (\n      this.state.default_filters.length !== 0 ||\n      this.state.global_filter !== '' ||\n      this.state.default_sorting.length !== 0 ||\n      this.state.default_clicked !== ''\n    ) {\n      this.searchCode(\n        limit,\n        skip,\n        this.state.default_filters,\n        this.state.global_filter,\n        this.state.default_sorting,\n        this.state.default_clicked)\n    } else {\n      getICD(limit, skip).then(response => {\n        this.setState({ no_data_message: 'No available data' })\n        if (response && response.error === undefined) {\n          const table = this.generateDataForTable(\n            response.result ? response.result : [],\n          );\n          this.setState({\n            code_response: response,\n            code_data_all: table,\n            code_data: table,\n            loading_state: false,\n            totalCount: response.total && response.total.count ? response.total.count : 0,\n          });\n        } else if (response && response.error && response.error.statusCode === 401) {\n          const table = this.generateDataForTable([]);\n          this.setState({\n            code_response: [],\n            code_data_all: table,\n            loading_state: false,\n            isModalOpen: true,\n            modalTitle: 'Unauthorized',\n            modalMessage: 'You are not authorized to view ICD10 codes.',\n          });\n        } else {\n          const table = this.generateDataForTable([]);\n          this.setState({\n            code_response: [],\n            code_data_all: table,\n            loading_state: false,\n            isModalOpen: true,\n            modalTitle: 'Loading failed',\n            modalMessage: 'An error occured while loading the list of codes.',\n          });\n        }\n      });\n    }\n  };\n\n\n\n\n\n\n  handleChangeSorting = (sorting: any) => {\n    this.setState({\n      default_sorting: sorting,\n      loading_state: true,\n      no_data_message: `Searching for ICD10 codes`\n    });\n    if (sorting && sorting.length > 0) {\n      this.searchCode(\n        this.state.limit,\n        this.state.page * this.state.limit,\n        this.state.default_filters,\n        this.state.global_filter,\n        sorting,\n        this.state.default_clicked,\n      )\n    }\n  };\n\n\n\n\n\n  handleFilterByColumn = (filter: any) => {\n    const self = this;\n\n    if (self.state.typingTimeout) {\n      clearTimeout(self.state.typingTimeout);\n    }\n\n    self.setState({\n      default_filters: filter,\n      typing: false,\n      page: 0,\n      typingTimeout: setTimeout(function () {\n        self.setState({\n          loading_state: true,\n          no_data_message: `Searching for ICD10 codes`\n        });\n        if (self.state.default_filters !== 0) {\n          self.searchCode(\n            self.state.limit,\n            0,\n            filter,\n            self.state.global_filter,\n            self.state.default_sorting,\n            self.state.default_clicked,\n          )\n        } else {\n          self.initialData();\n        }\n      }, 2000),\n    });\n  };\n\n  handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n\n    const self = this;\n\n    if (self.state.typingTimeout) {\n      clearTimeout(self.state.typingTimeout);\n    }\n    self.setState({\n      global_filter: value,\n      typing: false,\n      page: 0,\n      typingTimeout: setTimeout(function () {\n        self.setState({\n          loading_state: true,\n          limit: 10,\n          no_data_message: `Searching for ICD10 codes`\n        });\n        if (self.state.global_filter !== '') {\n          self.searchCode(\n            self.state.limit,\n            0,\n            self.state.default_filters,\n            self.state.global_filter,\n            self.state.default_sorting,\n            self.state.default_clicked,\n          )\n        } else {\n          self.initialData();\n        }\n      }, 2000),\n    });\n  };\n\n\n\n\n\n  handleClickRow = (row: any) => {\n\n    const { code_response } = this.state;\n    if (!this.state.code_response || !this.state.code_response.result)\n      return;\n\n    const data: Icd10 = constructIcd10(code_response.result[row])\n    this.checkFields(data, true)\n    this.setState({\n      code_info: data,\n    }, () => this.handleChangeSideModalBlockMode('view'));\n  };\n\n\n\n\n\n  handlePageChange = (currentPage: number, skip: number) => {\n    this.setState({\n      page: currentPage,\n    });\n    this.changePageUpdate(this.state.limit, skip);\n  };\n\n\n\n\n  handlePageSizeChange = value => {\n    let pageLimit = 100000;\n\n    if (this.state.totalCount >= pageLimit) {\n      this.setState({\n        isPageSizeModal: true,\n      });\n    } else {\n      this.setState({\n        limit: value,\n      });\n\n      this.changePageUpdate(value, value * this.state.page);\n    }\n  };\n\n\n\n\n\n  handleClickItemFromList = (key: string) => {\n    this.setState({ default_clicked: key });\n    this.handleCloseSideModalBlock()\n    this.setState({\n      page: 0,\n      loading_state: true,\n      no_data_message: `Searching for ICD10 codes`\n    });\n    if (key !== undefined) {\n      this.searchCode(\n        this.state.limit,\n        0,\n        this.state.default_filters,\n        this.state.global_filter,\n        this.state.default_sorting,\n        key,\n      )\n    }\n  };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  /*****************************  \n  ACTIONS / SIDE MODAL FUNCTIONS \n  ******************************/\n\n  handleCloseSideModalBlock = () => {\n    this.setState({\n      show_side_modal_block: 'none',\n      side_modal_block_mode: '',\n      code_info: constructEmptyIcd10(),\n    });\n  };\n\n\n\n\n\n  handleChangeSideModalBlockMode = (value: 'view' | 'edit' | 'add' | '') => {\n    let title = ``;\n    if (value && value === 'edit') {\n      title = `Edit ${this.state.block_title}`;\n      const reform_data: Icd10 = reconstructIcd10(cloneDeep(this.state.code_info))\n      this.setState({ code_info: reform_data })\n    } else if (value && value === 'view' && this.state.code_info) {\n      title = this.state.code_info['full_code'] ? this.state.code_info['full_code'] : '';\n    } else if (value && value === 'add') {\n      title = `Add ICD10 Code`;\n    }\n    this.setState({\n      side_modal_block_mode: value,\n      block_title: title,\n    }, () => this.handleOpenBlock());\n  };\n\n\n\n\n\n  handleOpenBlock = () => {\n    this.setState({\n      show_side_modal_block: 'block',\n    }, () => this.passDataToSideModalBlockBody());\n  };\n\n\n\n\n  handleInvalidFieldsPrompt = () => {\n    this.setState({\n      isModalOpen: true,\n      modalTitle: 'Incomplete/Invalid Fields',\n      modalMessage: 'Please complete the form before proceeding.',\n    })\n  }\n\n\n\n  passDataToSideModalBlockBody = () => {\n\n    if (this.state.code_info && !this.state.code_info.gender_limited) {\n      this.state.code_info.gender = ''\n      this.setState({\n        code_info: this.state.code_info\n      });\n    }\n  };\n\n\n\n\n  checkFields = (formFields?: any, disableButton?: boolean) => {\n    this.setState({ loading_state: true })\n\n    if (formFields) {\n      let invalid_fields = this.getInvalidFields(formFields, disableButton);\n      if (!invalid_fields || invalid_fields.length === 0) {\n        if (this.state.disableSaveButton || !this.state.clickSaveButton) {\n          return\n        }\n        if (this.state.side_modal_block_mode === 'edit') {\n          this.setState({\n            clickSaveButton: false,\n            confirm_modal_message: `Are you sure you want to edit this ICD10 code?`,\n            confirm_modal_open: true,\n            confirm_modal_title: `Confirm edit ICD10 code`,\n            action_after_confirm: () => this.patchCode(formFields)\n          })\n        } else if (this.state.side_modal_block_mode === 'add') {\n          this.setState({\n            clickSaveButton: false,\n            confirm_modal_message: `Are you sure you want to add this ICD10 code?`,\n            confirm_modal_open: true,\n            confirm_modal_title: `Confirm add ICD10 code`,\n            action_after_confirm: () => this.addCodes(formFields)\n          })\n        }\n      } else {\n        this.handleInvalidFieldsPrompt()\n      }\n    }\n  }\n\n\n\n\n\n  getInvalidFields = (formFields: any, disableButton?: boolean) => {\n    let invalid_fields_submit: any[] = [];\n    let invalid_fields_editing: any[] = [];\n    let exclude_fields = {}\n    if (this.excludeFields !== undefined) {\n      exclude_fields = this.excludeFields\n    }\n    const fields_excluded: string[] = Object.keys(exclude_fields)\n    const form_keys: string[] = Object.keys(formFields)\n\n    form_keys.forEach(field => {\n      if (this.requiredFields &&\n        this.requiredFields.includes(field) &&\n        !fields_excluded.includes(field) &&\n        !formFields[field]) {\n        if (!disableButton) {\n          invalid_fields_submit.push(field)\n        } else {\n          invalid_fields_editing.push(field)\n        }\n      }\n    })\n\n    const eff_date = moment(formFields['effectivity_date'])\n    const exp_date = moment(formFields['expiry_date'])\n    if (formFields &&\n      formFields['effectivity_date'] &&\n      formFields['expiry_date'] &&\n      eff_date.isValid() &&\n      exp_date.isValid() &&\n      eff_date.startOf('day').diff(exp_date.startOf('day')) > 0) {\n      if (disableButton) {\n        invalid_fields_editing.push('effectivity_date')\n      } else {\n        invalid_fields_submit.push('effectivity_date')\n      }\n    }\n\n    if (formFields && formFields['gender_limited'] && !formFields['gender']) {\n      if (!disableButton) {\n        invalid_fields_submit.push('gender')\n      } else {\n        invalid_fields_editing.push('gender')\n      }\n    }\n    if (!invalid_fields_editing || invalid_fields_editing.length === 0) {\n      this.setState({ disableSaveButton: false })\n    } else if (!this.state.disableSaveButton) {\n      this.setState({ disableSaveButton: true })\n    }\n    this.setState({ loading_state: false, invalid_fields: invalid_fields_submit })\n    return invalid_fields_submit\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  /***********************  \n       RENDER SECTIONS \n  ***********************/\n\n  renderSideModalBlock(): JSX.Element {\n\n    return (\n      <SideModalBlock\n        blockPosition={'fixed'}\n        title={this.state.block_title}\n        editIconDescription={'Edit Code'}\n        showBlock={this.state.show_side_modal_block}\n        handleClose={this.handleCloseSideModalBlock}\n        sideModalBlockMode={this.state.side_modal_block_mode}\n        changeMode={this.handleChangeSideModalBlockMode}\n\n      >\n        {this.state.side_modal_block_mode ? (\n          <SideModalBody\n            formFields={this.state.code_info}\n            invalidFields={this.state.invalid_fields}\n            handleClose={this.handleCloseSideModalBlock}\n            refreshData={(data: any) => {\n              this.setState({ code_info: data },\n                () => this.checkFields(data, true))\n            }}\n            handleSave={(formFields?: any) => {\n              if (this.state.side_modal_block_mode) {\n                this.setState({ clickSaveButton: true }, () => this.checkFields(formFields))\n              }\n            }}\n            formName={'ICD10'}\n            mode={this.state.side_modal_block_mode ? this.state.side_modal_block_mode : ''}\n            checkBoxWithDropDownFieldsInitState={this.state.code_info && this.state.code_info['gender_limited'] ? true : false}\n            dynamicDropdownChoices={this.state.icd_category_dropdown_choices}\n            disableSaveButton={this.state.disableSaveButton}\n            datePairField1MaxDate={\n              this.state.code_info &&\n                this.state.code_info['expiry_date'] &&\n                moment(this.state.code_info['expiry_date']).isValid() ?\n                moment(this.state.code_info['expiry_date']).format('MM-DD-YY').toString() : undefined\n            }\n            datePairField2MinDate={\n              this.state.code_info &&\n                this.state.code_info['effectivity_date'] &&\n                moment(this.state.code_info['effectivity_date']).isValid() ?\n                moment(this.state.code_info['effectivity_date']).format('MM-DD-YY').toString() : undefined\n            }\n          />\n        ) : null}\n      </SideModalBlock>\n    )\n  }\n\n\n\n\n\n\n\n  renderCodeInfo(): JSX.Element {\n    const { classes } = this.props;\n\n    return (\n      <React.Fragment>\n        <li key={'year-of-release'} className={classes.codeHeader}>YEAR OF RELEASE</li>\n        <li key={'year-of-release-value'} className={classes.codeHeaderValue}>2020</li>\n        <ListItemText key={'effectivity-date'}>\n          <div className={classes.codeHeader}>EFFECTIVITY DATE</div>\n          <div className={classes.codeHeaderValue}>Jan 1, 2020</div>\n        </ListItemText>\n      </React.Fragment>\n    )\n  }\n\n\n\n\n\n  renderCodeList(key: string): JSX.Element {\n    const { classes } = this.props;\n\n    return (\n      <ListItemText\n        key={key}\n        classes={{\n          root: classes.codeListItemsRoot,\n          primary:\n            this.state.highlightedCodeFromList ===\n              this.state.icd_categories.indexOf(key)\n              ? classes.codeListItemsSelected\n              : classes.codeListItems,\n        }}\n        onClick={() => {\n          if (this.state.icd_categories.indexOf(key) !== this.state.highlightedCodeFromList) {\n            this.setState({\n              highlightedCodeFromList: this.state.icd_categories.indexOf(key),\n            });\n            this.handleClickItemFromList(key);\n          } else {\n            this.setState({\n              highlightedCodeFromList: -1,\n            });\n            this.handleClickItemFromList('');\n          }\n        }}\n      >\n        <br />\n        {key}\n      </ListItemText>\n    )\n\n  }\n\n\n\n\n  render(): JSX.Element {\n    const { classes } = this.props;\n    const categories = this.state.icd_categories\n\n    return (\n      <div>\n        {this.state.loading_state ? <Loader /> : null}\n        <Grid container>\n          <Grid container item xs={12} md={3}>\n            <Grid container className={classes.borderedGrid}>\n              <List>\n                {this.renderCodeInfo()}\n                {categories ? categories.map(key => this.renderCodeList(key)) : null}\n              </List>\n            </Grid>\n          </Grid>\n\n\n\n\n\n\n\n\n          <Grid container item xs={12} md={9} style={{ paddingLeft: '37px' }}>\n            <Grid container>\n              <Grid item xs={12} md={9}>\n                <TextField\n                  style={{ width: '100%', backgroundColor: 'white' }}\n                  id=\"code_search\"\n                  placeholder=\"Search a code or description\"\n                  label=\"\"\n                  margin=\"none\"\n                  fullWidth\n                  variant=\"outlined\"\n                  value={this.state.global_filter}\n                  inputProps={{ 'aria-label': 'bare' }}\n                  onChange={this.handleSearch}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <Search style={{ color: 'rgba(54, 54, 54, 0.4)' }} />\n                      </InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n\n\n\n\n\n\n              <Grid item xs={8} md={3} style={{ paddingRight: '15px', marginTop: 15, textAlign: 'center' }}>\n                <FontAwesomeIcon icon={faPlus} className={classes.plusIcon} />\n                <Link className={classes.addACode}\n                  onClick={() => {\n                    this.setState(\n                      {\n                        block_title: `Add ICD10 Code`,\n                        code_info: constructEmptyIcd10(),\n                        disableSaveButton: true\n                      }, () => this.handleChangeSideModalBlockMode('add'));\n                  }}>\n                  Add a Code\n                  </Link>\n              </Grid>\n\n\n\n\n\n              <GridHorizontalDivider height=\"30px\" />\n              <Grid style={{ minHeight: 690, overflow: 'auto' }}>\n                <TableComponent\n                  id=\"tab-all\"\n                  totalCount={this.state.totalCount}\n                  update={this.changePageUpdate}\n                  updateSorting={this.handleChangeSorting}\n                  rows={\n                    Object.keys(this.state.code_data).length > 0\n                      ? this.state.code_data['rows']\n                      : []\n                  }\n                  columns={\n                    Object.keys(this.state.code_data).length > 0\n                      ? this.state.code_data['columns']\n                      : []\n                  }\n                  message={\n                    this.state.global_filter\n                      ? 'No available data'\n                      : this.state.no_data_message\n                  }\n                  onClickRow={this.handleClickRow}\n                  disableSelect\n                  disableSearch\n                  formattedColumns={\n                    Object.keys(this.state.code_data).length > 0\n                      ? this.state.code_data['formattedColumns']\n                      : {}\n                  }\n                  columnExtensions={\n                    Object.keys(this.state.code_data).length > 0\n                      ? this.state.code_data['columnExtensions']\n                      : []\n                  }\n                  onFilterChange={this.handleFilterByColumn}\n                  onSortingChange={this.handleChangeSorting}\n                  onPageChange={this.handlePageChange}\n                  ongPageSizeChange={this.handlePageSizeChange}\n                  defaultFilter={this.state.default_filters}\n                  currentPage={this.state.page}\n                  limit={this.state.limit}\n                  pageSizes={[10, 25, 50, 100]}\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n\n\n        {this.renderSideModalBlock()}\n\n        <MsgModal\n          onClose={() => {\n            this.setState({\n              isModalOpen: false,\n            })\n          }}\n          title={this.state.modalTitle}\n          isModalOpen={this.state.isModalOpen}\n          message={this.state.modalMessage}\n        />\n        <ConfirmationModal\n          onClose={() => this.setState({ confirm_modal_open: false })}\n          title={this.state.confirm_modal_title}\n          isModalOpen={this.state.confirm_modal_open}\n          submitType={'confirm'}\n          onSubmit={() => {\n            if (this.state.action_after_confirm) {\n              this.state.action_after_confirm()\n            }\n          }}\n          message={this.state.confirm_modal_message} />\n      </div>\n    );\n  }\n}\n","import * as React from 'react';\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n// import { faTimesCircle } from '@fortawesome/free-solid-svg-icons';\n// import { InputLabel } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n    Button,\n    Grid,\n    // TextField,\n    InputLabel,\n    Link,\n    CircularProgress\n} from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport { GridHorizontalDivider } from 'Components/UI';\nimport { TableComponent } from 'Components/UI/TableComponent/CodeListTable';\nimport { getAllSynonyms } from 'Pages/API/Calls/ICD10';\nimport { Icd10Synonym, Icd10 } from '../../LookupModels'\nimport { cloneDeep } from 'lodash';\n\nconst tableInfo: any = {\n    All: {\n        filterExtensions: [\n            {\n                columnName: 'status',\n                filteringEnabled: false,\n                sortingEnabled: false,\n            }\n        ],\n        columnExtensions: [\n            {\n                columnName: 'title',\n                width: 370,\n                wordWrapEnabled: true,\n            },\n            {\n                columnName: 'status',\n                width: 150,\n                wordWrapEnabled: true,\n            },\n        ],\n        columns: [\n            {\n                name: 'title',\n                title: 'Synonyms',\n            },\n            {\n                name: 'status',\n                title: 'Status',\n                sortingEnabled: false,\n            },\n        ]\n    },\n    Others: {\n        formattedColumns: {\n            Unapproved: { approve_disapprove_action_virtual: ['action'] },\n            Approved: { required_checkbox: ['action'] },\n            Inactive: { required_checkbox: ['action'] },\n        },\n        filterExtensions: [\n            {\n                columnName: 'action',\n                filteringEnabled: false,\n                sortingEnabled: false,\n            }\n        ],\n        columnExtensions: [\n            {\n                columnName: 'title',\n                width: 270,\n                wordWrapEnabled: true,\n            },\n            {\n                columnName: 'action',\n                width: 250,\n                wordWrapEnabled: true,\n            },\n        ],\n        columns: [\n            {\n                name: 'title',\n                title: 'Synonyms',\n            },\n            {\n                name: 'action',\n                title: 'Action',\n                sortingEnabled: false,\n                actionColumn: true,\n                actionValue: false,\n            },\n        ]\n    }\n}\n\n\nconst useStyles = makeStyles(() => ({\n    selectedItems: {\n        borderRadius: 20,\n        fontSize: 13,\n        backgroundColor: '#d1d4db',\n        padding: '5px 10px'\n    },\n    xIcon: {\n        fontSize: 16\n    },\n    input: {\n        marginBottom: \"2px\"\n    },\n    inputLabel: {\n        color: '#272e4c',\n        fontSize: '12px',\n        marginBottom: '5px',\n        marginTop: '20px'\n    },\n}));\n\n\nconsole.log(useStyles);\n\ninterface IAddSynonymsBodyProps {\n    hasUnsavedChanges: boolean;\n    setHasUnsavedChanges: (bool: boolean) => void;\n    onClose: () => void;\n    data: Icd10;\n    addSynonym: (full_code: string, title: string, diagnosis_code: string) => void;\n    patchSynonyms: (rows: any) => void;\n    deactivateSynonyms: (rows: any) => void;\n    activateSynonyms: (rows: any) => void;\n    activeLink: string;\n    setActiveLink: (activelink: string) => void;\n    getRowsForUnsavedChanges: (rows: Icd10Synonym[]) => void;\n    getRowsTrigger: boolean;\n    changeTabUnsaved: (item: string) => void;\n}\n\ninterface IAddSynonymsBodyState {\n    rowActions: Icd10Synonym[];\n    tabCount: any;\n    hasUnsavedChanges: boolean;\n    isLoading: boolean;\n    defaultFilters: any[];\n    defaultSorting: any[];\n    textFieldValue: string;\n    menuTabs: any;\n    activeLink: any;\n    rows: Icd10Synonym[];\n    totalCount: number;\n    columns: any;\n    noData: string;\n}\n\nexport class AddSynonymsBody extends React.Component<IAddSynonymsBodyProps, IAddSynonymsBodyState> {\n    constructor(props) {\n        super(props);\n\n        const menuItems = [\n            \"All\",\n            \"Unapproved\",\n            \"Approved\",\n            \"Inactive\"\n        ]\n\n        this.state = {\n            rowActions: [],\n            tabCount: {\n                All: 0,\n                Unapproved: 0,\n                Approved: 0,\n                Inactive: 0\n            },\n            hasUnsavedChanges: this.props.hasUnsavedChanges,\n            isLoading: false,\n            defaultFilters: [],\n            defaultSorting: [],\n            textFieldValue: '',\n            menuTabs: menuItems,\n            activeLink: this.props.activeLink,\n            rows: [],\n            totalCount: 0,\n            columns: [\n                {\n                    name: 'title',\n                    title: 'Synonyms',\n                },\n                {\n                    name: 'status',\n                    title: 'Status',\n                    sortingEnabled: false,\n                },\n            ],\n            noData: '',\n        }\n    }\n\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.data !== this.props.data) {\n            this.resetStates();\n            this.props.setActiveLink('All');\n            this.APIGetAllSynonyms();\n        }\n        if (prevState.activeLink !== this.state.activeLink) this.resetStates();\n        if (prevProps.hasUnsavedChanges !== this.props.hasUnsavedChanges) this.setState({ hasUnsavedChanges: this.props.hasUnsavedChanges })\n        if (prevProps.getRowsTrigger !== this.props.getRowsTrigger) this.props.getRowsForUnsavedChanges(this.state.rows);\n        if (prevProps.activeLink !== this.props.activeLink) this.setState({ activeLink: this.props.activeLink }, this.tabsCount);\n\n    }\n\n    resetStates() {\n        let temp_rows: Icd10Synonym[] = this.state.rows;\n        temp_rows.forEach(row => row.action_chosen = '');\n        this.setState({\n            rows: temp_rows,\n            defaultFilters: [],\n            defaultSorting: [],\n        });\n        this.props.setHasUnsavedChanges(false);\n    }\n\n\n    addSynonym = () => {\n        if (!this.props.data || !this.props.data.full_code || !this.state.textFieldValue) return;\n\n\n        const diagnosis_code: string = this.props.data && this.props.data.diagnosis_code ? this.props.data.diagnosis_code : '';\n        this.props.addSynonym(this.props.data.full_code, this.state.textFieldValue, diagnosis_code);\n        this.setState({ textFieldValue: '' });\n\n\n\n\n    }\n\n    handleFilterByColumn = (filter: any) => {\n        if (this.state.activeLink === 'Approved' || this.state.activeLink === 'Inactive') {\n            if (filter && Array.isArray(filter) && filter.some(item => item['columnName'] === 'action')) {\n                const action: boolean = filter.filter(item => item['columnName'] === 'action')[0]['action'];\n                this.handleHeaderCheckbox(action);\n            }\n        }\n        this.setState({ defaultFilters: filter })\n    };\n\n    handleHeaderCheckbox = (action: boolean) => {\n        let rows = this.state.rows;\n        const { activeLink } = this.state;\n        let status: string = activeLink === 'Approved' ? 'active' : activeLink === 'Inactive' ? 'inactive' : '';\n        if (!status) return;\n        rows.filter(row => row['status'] === status).forEach(row => row['action_chosen'] = action);\n        this.setState({ rows: rows }, this.formChanges);\n    }\n\n    handleChangeSorting = (sorting: any) => {\n        this.setState({ defaultSorting: sorting, });\n    }\n\n    APIGetAllSynonyms = () => {\n        if(!this.props.data || !this.props.data['full_code']) return;\n        let filter = {\n            full_code: this.props.data.full_code\n        }\n        this.setState({ isLoading: true });\n        getAllSynonyms(filter).then((resp: any) => {\n            const unapproved_count: number = resp && resp.unapproved && resp.unapproved.count ? resp.unapproved.count : 0;\n            const all_count: number = resp && resp.total && resp.total.count ? resp.total.count : 0;\n            const inactive_count: number = resp && resp.inactive && resp.inactive.count ? resp.inactive.count : 0;\n            const active_count: number = resp && resp.active && resp.active.count ? resp.active.count : 0;\n            console.log(resp)\n            if (!resp.eror) {\n                this.setState({\n                    tabCount: {\n                        All: all_count,\n                        Unapproved: unapproved_count,\n                        Inactive: inactive_count,\n                        Approved: active_count\n                    },\n                    rows: resp.result,\n                    totalCount: resp.total.count,\n                    isLoading: false\n                }, this.tabsCount);\n            } else {\n                this.setState({\n                    noData: \"No available data\",\n                    isLoading: false\n                })\n            }\n        }).catch(err => {\n            console.log(err);\n            this.setState({ isLoading: false });\n        });\n\n    }\n\n    titleCase = (title: string) => {\n        var sentence: string[] = title.toLowerCase().split(\" \");\n        for (var i = 0; i < sentence.length; i++) {\n            sentence[i] = sentence[i][0].toUpperCase() + sentence[i].slice(1);\n        }\n        const output: string = sentence.join(\" \");\n        return output;\n    }\n\n    rowDataFixer = () => {\n        const { activeLink, rows } = this.state;\n        if (activeLink === 'All') {\n            const return_rows: any[] = rows.map(row => {\n                return { ...row, status: this.titleCase(row.status) }\n            });\n            return return_rows;\n        }\n        else if (activeLink === 'Unapproved') {\n            return rows.filter(row => row.status && row.status.toLowerCase() === 'unapproved')\n        }\n        else if (activeLink === 'Approved') {\n            return rows.filter(row => row.status && row.status.toLowerCase() === 'active')\n        }\n        else if (activeLink === 'Inactive') {\n            return rows.filter(row => row.status && row.status.toLowerCase() === 'inactive')\n        }\n        else {\n            return [];\n        }\n    }\n\n    getColumns = () => {\n        const { activeLink } = this.state;\n        const tab: string = activeLink === 'All' ? 'All' : 'Others';\n        let tableClone = cloneDeep(tableInfo);\n        if (activeLink === 'Unapproved') delete tableClone[tab]['columns'][1]['actionColumn'];\n        if (activeLink === 'Approved')\n            tableClone[tab]['columns'][1]['title'] = 'Deactivate';\n        if (activeLink === 'Inactive')\n            tableClone[tab]['columns'][1]['title'] = 'Activate';\n        return tableClone[tab]['columns'];\n    }\n\n    getColumnExtensions = () => {\n        const { activeLink } = this.state;\n        const tab: string = activeLink === 'All' ? 'All' : 'Others';\n        return tableInfo[tab]['columnExtensions'];\n    }\n\n    getFilterExtensions = () => {\n        const { activeLink } = this.state;\n        const tab: string = activeLink === 'All' ? 'All' : 'Others';\n        return tableInfo[tab]['filterExtensions'];\n    }\n\n    getFormattedColumns = () => {\n        const { activeLink } = this.state;\n        if (activeLink !== 'All') {\n            return tableInfo['Others']['formattedColumns'][activeLink];\n        }\n        return undefined;\n    }\n\n    checkIfSelectBox = () => {\n        if (this.state.activeLink === 'Approved' || this.state.activeLink === 'Inactive') {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    handleClickRow = (row: any) => {\n        this.props.setActiveLink(row.status);\n    };\n\n    handleOnClickRow = (row: any) => {\n        const { rows, activeLink } = this.state;\n        if (activeLink !== 'All') return;\n        if (!rows || !rows[row] || !rows[row]['status']) return;\n        const tab: string = rows[row]['status'] === 'active' ? 'Approved' : this.titleCase(rows[row]['status']);\n        this.changeTab(tab);\n    }\n\n    handleMenuClick = async (item) => {\n        if (item !== this.state.activeLink && this.state.hasUnsavedChanges) {\n            // to do: ask user if they want to abandon changes before switching tabs\n            // this.changeTab(item); // remove in the future, replace with modal asking to save\n            this.props.changeTabUnsaved(item);\n        } else {\n            this.changeTab(item);\n        }\n    }\n\n    changeTab = (item) => this.props.setActiveLink(item);\n        // this.setState({ activeLink: item });\n    \n\n    formChanges = () => {\n        const { activeLink, rows } = this.state;\n\n        if (activeLink === 'Unapproved') {\n            const choices: any[] = ['approve', 'disapprove'];\n            const changesMade: boolean = rows && rows.some(row => choices.includes(row.action_chosen));\n            this.props.setHasUnsavedChanges(changesMade);\n        } else if (activeLink === 'Approved' || activeLink === 'Inactive') {\n            const changesMade: boolean = rows && rows.some(row => row.action_chosen);\n            this.props.setHasUnsavedChanges(changesMade);\n        }\n    }\n\n    handleSave = () => {\n        const { activeLink, rows } = this.state;\n\n        if (activeLink === 'Unapproved') {\n            this.props.patchSynonyms(cloneDeep(rows));\n        } else if (activeLink === 'Approved') {\n            this.props.deactivateSynonyms(cloneDeep(rows));\n        } else if (activeLink === 'Inactive') {\n            this.props.activateSynonyms(cloneDeep(rows));\n        }\n    }\n\n    tabsCount = () => {\n        const { rows } = this.state;\n        const all_count: number = rows && rows.length ? rows.length : 0;\n        let unapproved_count: number = 0;\n        let inactive_count: number = 0;\n        let active_count: number = 0;\n        rows.forEach(row => {\n            if(row.status === 'active') active_count++;\n            else if(row.status === 'inactive') inactive_count++;\n            else if(row.status === 'unapproved') unapproved_count++;\n        });\n        this.setState({\n            tabCount: {\n                All: all_count,\n                Unapproved: unapproved_count,\n                Inactive: inactive_count,\n                Approved: active_count\n            },\n        })\n    }\n\n\n    public render(): JSX.Element {\n\n\n        return (\n            <>\n                <div style={{ minHeight: 600, minWidth: 500 }}>\n                    <b>\n                        <span style={{\n                            fontSize: '16px'\n                        }}>\n                            {this.props.data.full_code}\n                        </span><br />\n                        <span style={{\n                            fontSize: '18px'\n                        }}>\n                            {this.props.data.full_description}\n                        </span>\n                    </b>\n\n                    <hr />\n                    <Grid item container justify=\"space-between\">\n                        <InputLabel style={{\n                            color: '#272e4c',\n                            fontSize: '12px',\n                            marginBottom: '5px',\n                            marginTop: '5px'\n                        }}>\n                            Add a Synonym\n                                    </InputLabel>\n                        <Grid container item justify=\"space-between\">\n\n\n                            <TextField type=\"text\"\n                                style={{\n                                    width: '65%',\n                                    marginBottom: \"2px\"\n                                }}\n\n                                value={this.state.textFieldValue}\n                                required\n                                id=\"outline-add-synonyms\"\n                                variant=\"outlined\"\n                                onChange={(e: any) => this.setState({ textFieldValue: e.target.value })} />\n                            <Button\n                                style={{\n                                    marginLeft: '10px',\n                                    height: '40px',\n                                    width: '30%',\n                                    fontSize: '14px',\n                                    color: '#fff',\n                                }}\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={this.addSynonym}\n                            >\n                                Add Synonym\n                            </Button>\n                        </Grid>\n                        <Grid container item justify=\"flex-end\">\n\n                        </Grid>\n                    </Grid>\n\n                    <Grid\n                        item\n                        xs={12}\n                        md={12}\n                        style={{\n                            paddingRight: '8px',\n                            marginTop: 8,\n                        }}>\n\n                        <Grid item xs={12} md={12} style={{ marginLeft: '8px' }}>\n                            <ul style={{ padding: '0', margin: '0' }}>\n                                {this.state.menuTabs.map((item) => (\n                                    <li\n                                        key={`${item} tab`}\n                                        style={{\n                                            display: \"inline-block\",\n                                            padding: \"10px 25px 10px 0\"\n                                        }}>\n                                        <Link\n                                            style={this.state.activeLink === item ? {\n                                                color: \"#3ab77d\",\n                                                fontWeight: \"bold\",\n                                                textDecoration: \"underline\"\n                                            } : {\n                                                    color: \"#929292\",\n                                                    display: \"block\",\n                                                    fontSize: \"1em\",\n                                                }\n                                            }\n                                            onClick={() => this.handleMenuClick(item)}\n                                        >\n                                            {item}({this.state.tabCount[item]})\n                                        </Link>\n                                    </li>\n                                ))\n                                }\n                            </ul>\n                        </Grid>\n\n                    </Grid>\n\n                    <hr />\n                    {this.state.isLoading ? (\n                        <Grid style={{ textAlign: 'center' }}>\n                            <GridHorizontalDivider height=\"50px\" />\n                            <CircularProgress size={100} />\n                        </Grid>\n                    ) : null}\n                    {!this.state.isLoading && this.state.activeLink ? (\n                        <>\n                            <Grid style={{ maxHeight: '300px' }}>\n                                <GridHorizontalDivider height=\"10px\" />\n\n                                <TableComponent\n                                    id={`modal-table-${this.state.activeLink}`}\n                                    key={`side-modal-table-${this.state.activeLink}`}\n                                    totalCount={10}\n                                    update={() => { }}\n                                    updateSorting={this.handleChangeSorting}\n                                    rows={this.rowDataFixer()}\n                                    columns={this.getColumns()}\n                                    disablePaging\n                                    message={''}\n                                    onClickRow={this.handleOnClickRow}\n                                    onClickCell={(data: any) => {\n                                        const data_row = data && data.row ? data.row : undefined;\n                                        if (!data_row || !data_row._id) return;\n                                        let rows = this.state.rows;\n                                        for (let row of rows) {\n                                            if (row._id === data_row._id) {\n                                                row['action_chosen'] = data_row['action_chosen']\n                                                break;\n                                            }\n                                        }\n                                        this.setState({ rows: rows }, this.formChanges)\n                                    }}\n                                    disableSelect\n                                    disableSearch\n                                    formattedColumns={this.getFormattedColumns()}\n                                    columnExtensions={this.getColumnExtensions()}\n                                    filterExtensions={this.getFilterExtensions()}\n                                    defaultSort={this.state.defaultSorting}\n                                    onFilterChange={this.handleFilterByColumn}\n                                    onSortingChange={this.handleChangeSorting}\n                                    onPageChange={() => { }}\n                                    ongPageSizeChange={() => { }}\n                                    defaultFilter={this.state.defaultFilters}\n                                    currentPage={0}\n                                    limit={0}\n                                    isVirtualTable={true}\n                                    onSelectedRadio={(row: number, value: string) => {\n                                        this.formChanges();\n                                        console.log(row, value);\n                                    }}\n                                />\n                            </Grid>\n                            {['Unapproved', 'Approved', 'Inactive'].includes(this.state.activeLink) ? (\n                                <>\n                                    <GridHorizontalDivider height=\"25px\" />\n                                    <div>\n                                        <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n                                            <Button\n                                                style={{ width: '130px' }}\n                                                onClick={this.handleSave}\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                disabled={!this.state.hasUnsavedChanges}\n                                            >\n                                                Save\n                                    </Button>\n                                        </div>\n                                    </div>\n                                </>\n                            ) : null}\n                        </>\n                    ) : null}\n                </div>\n\n            </>\n        )\n    }\n\n}\n","import React from 'react';\nimport { TableComponent } from 'Components/UI/TableComponent/CodeListTable';\nimport {\n    TextField,\n    InputAdornment,\n    Grid,\n    Button,\n    Snackbar,\n} from '@material-ui/core';\nimport { Search } from '@material-ui/icons/';\nimport { Loader } from '../Loader';\nimport Link from '@material-ui/core/Link';\nimport { GridHorizontalDivider } from 'Components/UI';\nimport { SideModalBlock } from 'Components/UI';\nimport { MsgModal } from 'Components/UI';\nimport {\n    getICDSynonyms,\n    getActiveSynonyms,\n    addSynonyms,\n    patchSynonyms\n} from 'Pages/API/Calls/ICD10'\n// import { ConfirmationModal } from '../ConfirmationModal'\nimport { ModalComponent } from 'Components/UI/ModalComponent/ModalComponent';\nimport { Icd10Synonym } from '../../LookupModels'\n\nimport { cloneDeep } from 'lodash'\nimport { AddSynonymsBody } from './AddSynonymsBody';\nimport {\n    constructAddSynonymPayload,\n    constructUnapprovedSynonymPayload,\n    constructDeactivateSynonymPayload,\n    constructActivateSynonymPayload,\n} from '../ConstructPayloads'\n\n\ninterface IState {\n\n    side_modal_rows: Icd10Synonym[];\n    side_modal_get_rows_trigger: boolean;\n\n    has_unsaved_changes: boolean;\n    unsaved_changes_modal: boolean;\n\n    confirm_modal_title: string;\n    confirm_modal_save_button: string;\n    confirm_modal_message: any;\n    confirm_modal_open: boolean;\n    action_after_confirm: () => void;\n    invalid_fields: string[];\n    loading_state: boolean;\n    block_title?: string;\n    show_side_modal_block?: string;\n    side_modal_block_mode: 'view' | 'edit' | 'add' | '';\n    code_info?: any;\n    code_response: any;\n    code_data_all: any;\n    code_data: any;\n    global_filter: string;\n    default_filters: any;\n    default_sorting: any;\n\n\n    // FOR UNAPPROVED TAB\n    code_info_unapproved?: Icd10Synonym;\n    unapproved_codes_actions: any[];\n    code_data_all_unapproved: any;\n    code_data_unapproved: any;\n    default_filters_unapproved: any;\n    default_sorting_unapproved: any;\n    total_count_unapproved: number;\n    page_unapproved: number;\n    limit_unapproved: number;\n\n    activeTableRows: any;\n    activeTableColumns: any;\n    activeTableCount: number;\n    activeTableCurrentpage: number;\n    activeTableLimit: number;\n    activeTableFilter: any[];\n    activeTableSort: any[];\n    activeTableSkip: number;\n\n    default_clicked: string;\n    isModalOpen: boolean;\n    modalTitle: string;\n    modalMessage: any;\n    modalMessageMaxWidth: string;\n    action_after_info: () => void;\n    totalCount: number;\n    typing: boolean;\n    typingTimeout: any;\n    page: number;\n    limit: number;\n    isPageSizeModal: boolean;\n    highlightedCodeFromList: number;\n    icd_categories: string[];\n    no_data_message: string;\n    icd_category_dropdown_choices: any[];\n    disableSaveButton: boolean;\n    clickSaveButton: boolean;\n    menuTabs: any,\n    activeLink: any,\n    synonyms: string[],\n    code_repo: any;\n    active_default_filter: any[],\n    snackbarOpen: any,\n    snackbarMessage: any,\n    confirm_modal_method: any,\n    side_modal_active_link: string;\n}\n\ninterface IProps {\n    classes: any;\n\n    icdSynonymAction: any[];\n    setICDSynonymAction: (data: any[]) => void;\n}\n\nexport class ICD10SynonymsSection extends React.Component<IProps, IState> {\n\n    constructor(props) {\n        super(props);\n\n        const table: any = {\n            formattedColumns: {},\n            columnExtensions: [\n                {\n                    columnName: 'full_code',\n                    width: 100,\n                    wordWrapEnabled: true,\n                },\n                {\n                    columnName: 'diagnosis',\n                    width: 200,\n                    wordWrapEnabled: true,\n                },\n                {\n                    columnName: 'synonyms',\n                    width: 200,\n                    wordWrapEnabled: true,\n                },\n                {\n                    columnName: 'status',\n                    width: 200,\n                    wordWrapEnabled: true,\n                },\n            ],\n            columns: [\n                {\n                    name: 'full_code',\n                    title: 'ICD10 Code',\n                },\n                {\n                    name: 'diagnosis',\n                    title: 'Diagnosis',\n                },\n                {\n                    name: 'synonyms',\n                    title: 'Synonyms',\n                },\n                {\n                    name: 'status',\n                    title: 'Status',\n                },\n            ],\n            rows: [],\n        };\n\n        const unapprovedTable: any = {\n            formattedColumns: {\n                approve_disapprove_action: ['action'],\n                approve_disapprove_reset: ['reset'],\n            },\n            filterExtensions: [\n                {\n                    columnName: 'action',\n                    filteringEnabled: false,\n                    sortingEnabled: false,\n                },\n                {\n                    columnName: 'reset',\n                    filteringEnabled: false,\n                    sortingEnabled: false,\n                },\n            ],\n            columnExtensions: [\n                {\n                    columnName: 'full_code',\n                    width: 130,\n                    wordWrapEnabled: true,\n                },\n                {\n                    columnName: 'full_description',\n                    width: 295,\n                    wordWrapEnabled: true,\n                },\n                {\n                    columnName: 'title',\n                    width: 175,\n                    wordWrapEnabled: true,\n                },\n                {\n                    columnName: 'action',\n                    width: 200,\n                    wordWrapEnabled: true,\n                },\n                {\n                    columnName: 'reset',\n                    width: 125,\n                    wordWrapEnabled: true,\n                },\n            ],\n            columns: [\n                {\n                    name: 'full_code',\n                    title: 'ICD10 Code',\n                },\n                {\n                    name: 'full_description',\n                    title: 'Diagnosis',\n                },\n                {\n                    name: 'title',\n                    title: 'Synonyms',\n                },\n                {\n                    name: 'action',\n                    title: 'Action',\n                    sortingEnabled: false,\n                },\n                {\n                    name: 'reset',\n                    title: 'Reset',\n                    sortingEnabled: false,\n                    resetColumn: true,\n                },\n            ],\n            rows: [],\n        };\n\n        const activeTable: any = {\n            columnExtensions: [\n                {\n                    columnName: 'full_code',\n                    width: 130,\n                    wordWrapEnabled: true,\n                },\n                {\n                    columnName: 'full_description',\n                    width: 305,\n                    wordWrapEnabled: true,\n                },\n                {\n                    columnName: 'synonyms',\n                    width: 320,\n                    wordWrapEnabled: true,\n                },\n                {\n                    columnName: 'status',\n                    width: 150,\n                    wordWrapEnabled: true,\n                },\n            ],\n            columns: [\n                {\n                    name: 'full_code',\n                    title: 'ICD10 Code',\n                },\n                {\n                    name: 'full_description',\n                    title: 'Diagnosis',\n                },\n                {\n                    name: 'synonyms',\n                    title: 'Synonyms',\n                },\n                {\n                    name: 'status',\n                    title: 'Status',\n                },\n            ],\n            rows: [],\n        };\n\n        const menuItems = [\n            \"All Diagnosis\",\n            \"Unapproved Synonyms\"\n        ]\n\n\n        this.state = {\n            side_modal_rows: [],\n            side_modal_get_rows_trigger: false,\n            side_modal_active_link: 'All',\n            unsaved_changes_modal: false,\n            has_unsaved_changes: false,\n            modalMessageMaxWidth: '400px',\n            confirm_modal_save_button: 'Save',\n            icd_category_dropdown_choices: props.icdCategoryDropdown,\n            icd_categories: props.icdCategories,\n            no_data_message: '',\n            confirm_modal_title: '',\n            confirm_modal_message: '',\n            confirm_modal_open: false,\n            action_after_confirm: () => { },\n            invalid_fields: [],\n            highlightedCodeFromList: -1,\n            loading_state: true,\n            code_response: [],\n            code_info: [],\n            show_side_modal_block: 'none',\n            side_modal_block_mode: '',\n            code_data: table,\n            code_data_all: table,\n\n\n\n            // FOR UNAPPROVED TAB\n            default_filters_unapproved: [],\n            unapproved_codes_actions: props.icdSynonymAction ? props.icdSynonymAction : [],\n            code_data_unapproved: unapprovedTable,\n            code_data_all_unapproved: unapprovedTable,\n            default_sorting_unapproved: [{\n                columnName: 'full_code',\n                direction: 'asc'\n            }\n            ],\n            total_count_unapproved: 0,\n            page_unapproved: 0,\n            limit_unapproved: 10,\n\n            active_default_filter: [],\n\n            block_title: '',\n            global_filter: '',\n            default_filters: [],\n            default_sorting: [{\n                columnName: 'full_code',\n                direction: 'asc'\n            }\n            ],\n            default_clicked: '',\n            isModalOpen: false,\n            isPageSizeModal: false,\n            modalTitle: '',\n            modalMessage: '',\n            action_after_info: () => { },\n            totalCount: 0,\n            typing: false,\n            typingTimeout: 0,\n            page: 0,\n            limit: 10,\n            disableSaveButton: false,\n            clickSaveButton: false,\n            menuTabs: menuItems,\n            activeLink: 'All Diagnosis',\n            synonyms: [],\n            code_repo: [],\n            activeTableRows: [],\n            activeTableColumns: activeTable,\n            activeTableCount: 0,\n            activeTableCurrentpage: 0,\n            activeTableLimit: 10,\n            activeTableFilter: [],\n            activeTableSort: [],\n            activeTableSkip: 0,\n            snackbarOpen: false,\n            snackbarMessage: '',\n            confirm_modal_method: () => { }\n        };\n    }\n\n    componentDidMount() {\n        if (this.state.activeLink === 'All Diagnosis') {\n            this.getActive();\n        }\n        document.addEventListener('keydown', this.escFunction, false);\n\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.activeLink !== this.state.activeLink) {\n            if (this.state.activeLink === 'Unapproved Synonyms') {\n                this.setState({\n                    default_sorting_unapproved: [{\n                        columnName: 'full_code',\n                        direction: 'asc'\n                    }\n                    ]\n                }, () => this.searchSynonyms(\n                    this.state.default_filters_unapproved,\n                    this.state.global_filter,\n                    this.state.limit_unapproved,\n                    this.state.limit_unapproved * this.state.page_unapproved,\n                    this.state.default_sorting_unapproved));\n                this.setState({ has_unsaved_changes: false }, this.handleCloseSideModalBlock);\n            } else if (this.state.activeLink === 'All Diagnosis') {\n                this.setState({ activeTableSort: [] }, this.getActive);\n            }\n        }\n\n\n        if (prevProps.icdSynonymAction !== this.props.icdSynonymAction && this.props.icdSynonymAction)\n            this.setState({ unapproved_codes_actions: this.props.icdSynonymAction });\n    }\n\n    escFunction = (event) => {\n        if (event.keyCode === 27) {\n            this.handleCloseSideModalBlock();\n            // this.setState({ has_unsaved_changes: false }, this.handleCloseSideModalBlock)\n        }\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    /***********************  \n         CRUD FUNCTIONS \n    ***********************/\n\n\n    searchSynonyms = (filters: any, filters_global: any, limit: number, skip: number, sorting: any) => {\n\n        this.setState({ loading_state: true });\n        let table: any = [];\n\n        let unapproved_filter = cloneDeep(filters);\n        unapproved_filter.push({ columnName: 'status', value: 'unapproved' });\n        getICDSynonyms(unapproved_filter, filters_global, limit, skip, sorting)\n            .then(response => {\n                if (response && response.error === undefined) {\n                    table = this.generateDataForUnapprovedTable(\n                        response.result ? response.result : [],\n                    );\n                    this.setState({\n                        code_data_all_unapproved: table,\n                        code_data_unapproved: table,\n                        total_count_unapproved: response.total && response.total.count ? response.total.count : 0,\n                        loading_state: false,\n                    });\n                } else {\n                    table = this.generateDataForUnapprovedTable([]);\n                    this.setState({\n                        code_data_all_unapproved: table,\n                        page_unapproved: 0,\n                        isModalOpen: true,\n                        modalTitle: 'Loading failed',\n                        modalMessage: 'An error occured while loading the list of codes.',\n                        loading_state: false,\n                    });\n                }\n            }).catch(e => {\n                console.log('fetch synonyms table error', e);\n                table = this.generateDataForUnapprovedTable([]);\n                this.setState({\n                    code_data_all_unapproved: table,\n                    page_unapproved: 0,\n                    isModalOpen: true,\n                    modalTitle: 'Loading failed',\n                    modalMessage: 'An error occured while loading the list of codes.',\n                    loading_state: false,\n                });\n            });\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    /***********************  \n    TABLE AND PAGE FUNCTIONS \n    ***********************/\n\n\n    // USED BY BOTH UNAPPROVED AND ALL DIAGNOSIS TABS\n    handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const { value } = e.target;\n\n        const self = this;\n\n        if (self.state.typingTimeout) {\n            clearTimeout(self.state.typingTimeout);\n        }\n        self.setState({\n            global_filter: value,\n            typing: true,\n            page: 0,\n            page_unapproved: 0,\n            typingTimeout: setTimeout(function () {\n\n                self.setState({\n                    typing: false,\n                    loading_state: true,\n                    no_data_message: `Searching for ICD10 codes`\n                });\n                if (self.state.activeLink === 'Unapproved Synonyms') {\n                    self.searchSynonyms(\n                        self.state.default_filters_unapproved,\n                        self.state.global_filter,\n                        self.state.limit_unapproved,\n                        0,\n                        self.state.default_sorting_unapproved\n                    )\n                } else if (self.state.activeLink === 'All Diagnosis') {\n                    self.setState({ activeTableSkip: 0, activeTableCurrentpage: 0 }, self.getActive);\n                }\n            }, 2000),\n        });\n    };\n\n    handleMenuClick = async (item) => {\n        this.setState({\n            activeLink: item\n        })\n    }\n\n\n\n\n    titleCase = (title: string) => {\n        var sentence: string[] = title.toLowerCase().split(\" \");\n        for (var i = 0; i < sentence.length; i++) {\n            sentence[i] = sentence[i][0].toUpperCase() + sentence[i].slice(1);\n        }\n        const output: string = sentence.join(\" \");\n        return output;\n    }\n\n\n\n\n    // FUNCTIONS FOR UNAPPROVED TAB - START\n    generateDataForUnapprovedTable(response: any) {\n        const table: any = {\n            formattedColumns: {\n                approve_disapprove_action: ['action'],\n                approve_disapprove_reset: ['reset'],\n            },\n            filterExtensions: [\n                {\n                    columnName: 'action',\n                    filteringEnabled: false,\n                    sortingEnabled: false,\n                },\n                {\n                    columnName: 'reset',\n                    filteringEnabled: false,\n                    sortingEnabled: false,\n                },\n            ],\n            columnExtensions: [\n                {\n                    columnName: 'full_code',\n                    width: 130,\n                    wordWrapEnabled: true,\n                },\n                {\n                    columnName: 'full_description',\n                    width: 295,\n                    wordWrapEnabled: true,\n                },\n                {\n                    columnName: 'title',\n                    width: 175,\n                    wordWrapEnabled: true,\n                },\n                {\n                    columnName: 'action',\n                    width: 200,\n                    wordWrapEnabled: true,\n                },\n                {\n                    columnName: 'reset',\n                    width: 125,\n                    wordWrapEnabled: true,\n                },\n            ],\n            columns: [\n                {\n                    name: 'full_code',\n                    title: 'ICD10 Code',\n                },\n                {\n                    name: 'full_description',\n                    title: 'Diagnosis',\n                },\n                {\n                    name: 'title',\n                    title: 'Synonyms',\n                },\n                {\n                    name: 'action',\n                    title: 'Action',\n                    sortingEnabled: false,\n                },\n                {\n                    name: 'reset',\n                    title: 'Reset',\n                    sortingEnabled: false,\n                    resetColumn: true,\n                },\n            ],\n            rows: [],\n        };\n        for (const cnt in response) {\n            const item = response[cnt];\n            const temp_row: any = {};\n            temp_row['_id'] = item['_id'];\n            temp_row['full_code'] = item['full_code'];\n            temp_row['full_description'] = item['full_description'];\n            temp_row['title'] = item['title'];\n            temp_row['action_chosen'] = this.handleGetAction(temp_row['_id']);\n            table['rows'].push(temp_row);\n        }\n        return table;\n    }\n\n    handleGetAction = (id: string) => {\n        const { unapproved_codes_actions } = this.state;\n        if (unapproved_codes_actions && unapproved_codes_actions.some(item => item._id === id)) {\n            const temp = unapproved_codes_actions.filter(item => item._id === id);\n            return temp[0]['action_chosen'];\n        }\n        return '';\n    }\n\n\n\n\n\n    changePageUpdateUnapproved = (limit: number, skip: number) => {\n        this.setState({\n            has_unsaved_changes: false,\n            loading_state: true,\n            no_data_message: `Searching for ICD10 codes`\n        }, this.handleCloseSideModalBlock);\n        this.searchSynonyms(\n            this.state.default_filters_unapproved,\n            this.state.global_filter,\n            limit,\n            skip,\n            this.state.default_sorting_unapproved\n        )\n    }\n\n\n    handleChangeSortingUnapproved = (sorting: any) => {\n        this.setState({\n            default_sorting_unapproved: sorting,\n            loading_state: true,\n            no_data_message: `Searching for ICD10 codes`\n        });\n        if (sorting && sorting.length > 0) {\n            this.searchSynonyms(\n                this.state.default_filters_unapproved,\n                this.state.global_filter,\n                this.state.limit_unapproved,\n                this.state.limit_unapproved * this.state.page_unapproved,\n                sorting\n            )\n        }\n    }\n\n    handleResetAll = () => {\n        console.log('RESET')\n        let table = this.state.code_data_unapproved;\n        if(!table || !table.rows) return;\n        let rows = table.rows;\n        if(rows && Array.isArray(rows)){\n            rows.forEach(row => row['action_chosen'] = '');\n            table['rows'] = rows;\n            this.setState({code_info_unapproved: table});\n        }\n        this.props.setICDSynonymAction([]);\n        \n    }\n\n\n    handleFilterByColumnUnapproved = (filter: any) => {\n        console.log('FILTER', filter);\n        if (filter && Array.isArray(filter) && filter.some(item => item.columnName === 'reset')) {\n            this.handleResetAll();\n            return;\n        }\n        // if(!filter || filter.length === 0) return;\n        const self = this;\n\n        if (self.state.typingTimeout) {\n            clearTimeout(self.state.typingTimeout);\n        }\n\n        self.setState({\n            default_filters_unapproved: filter,\n            page_unapproved: 0,\n            typingTimeout: setTimeout(function () {\n                self.setState({\n                    loading_state: true,\n                    no_data_message: `Searching for ICD10 codes`\n                });\n                self.searchSynonyms(\n                    filter,\n                    self.state.global_filter,\n                    self.state.limit_unapproved,\n                    0,\n                    self.state.default_sorting_unapproved\n                )\n            }, 2000),\n        });\n    }\n\n    handlePageChangeUnapproved = (currentPage: number, skip: number) => {\n        this.setState({\n            page_unapproved: currentPage,\n        });\n        this.changePageUpdateUnapproved(this.state.limit, skip);\n    };\n\n\n\n    handlePageSizeChangeUnapproved = (value: number) => {\n        let pageLimit = 100000;\n\n        if (this.state.total_count_unapproved >= pageLimit) {\n            this.setState({\n                isPageSizeModal: true,\n            });\n        } else {\n            this.setState({\n                limit_unapproved: value,\n            });\n\n            this.changePageUpdateUnapproved(value, value * this.state.page_unapproved);\n        }\n    };\n\n\n\n\n\n    handleRadioClick = (row: number, action: string) => {\n        let unapproved_actions = this.state.unapproved_codes_actions;\n        const unapproved_rows = this.state.code_data_unapproved.rows;\n        const unapproved_row = unapproved_rows[row];\n\n        if (unapproved_actions && unapproved_actions.some(code => code._id === unapproved_row._id)) {\n            unapproved_actions = unapproved_actions.filter(code => code._id !== unapproved_row._id)\n        }\n\n        unapproved_actions.push({\n            _id: unapproved_row._id, action_chosen: action\n        });\n\n        this.props.setICDSynonymAction(unapproved_actions);\n    }\n\n    handleSaveUnapproved = () => {\n        const { unapproved_codes_actions } = this.state;\n        if (!unapproved_codes_actions) return;\n\n        const approve = unapproved_codes_actions.filter(code => code.action_chosen === 'approve').map(code => { return code._id });\n\n        const disapprove = unapproved_codes_actions.filter(code => code.action_chosen === 'disapprove').map(code => { return code._id });\n\n        console.log('APPROVE', approve, 'DISAPPROVE', disapprove);\n    }\n    // FUNCTIONS FOR UNAPPROVED TAB - END\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    // FUNCTIONS FOR ALL DIAGNOSIS TAB - START\n    handleClickRow = (row: any) => {\n\n        const { activeTableRows, has_unsaved_changes } = this.state;\n        if (!activeTableRows || activeTableRows[row] === this.state.code_info) return;\n\n        let data = activeTableRows[row];\n\n        if (has_unsaved_changes) {\n            const bool: boolean = this.state.side_modal_get_rows_trigger;\n            this.setState({\n                side_modal_get_rows_trigger: !bool,\n                confirm_modal_method: () => this.setState({ has_unsaved_changes: false }, () => this.handleClickRow(row))\n            });\n        } else {\n            this.setState({\n                code_info: data,\n            }, this.handleOpenBlock);\n        }\n\n    };\n\n    handleCloseSideModalBlock = () => {\n        if (this.state.has_unsaved_changes) {\n            const bool: boolean = this.state.side_modal_get_rows_trigger;\n            this.setState({\n                side_modal_get_rows_trigger: !bool,\n                confirm_modal_method: () => this.setState({ has_unsaved_changes: false }, this.handleCloseSideModalBlock)\n            });\n        } else {\n            this.setState({\n                show_side_modal_block: 'none',\n                side_modal_block_mode: '',\n            }, () => this.setState({ code_info: {} }));\n        }\n\n    };\n\n\n\n    handleOpenBlock = () => {\n        this.setState({\n            show_side_modal_block: 'block',\n        });\n    };\n\n\n    getActive = async () => {\n\n        this.setState({\n            loading_state: true\n        });\n\n        let icd10Active = await getActiveSynonyms(\n            this.state.activeTableFilter,\n            this.state.global_filter,\n            this.state.activeTableLimit,\n            this.state.activeTableSkip,\n            this.state.activeTableSort)\n            .catch(err => console.log(err));\n\n\n        if (icd10Active) {\n            if (icd10Active.result.length > 0)\n                icd10Active.result.map((d: any) => {\n                    d.synonyms =\n                        d && d.synonyms && Array.isArray(d.synonyms) &&\n                            d.synonyms.length > 0 ?\n                            d.synonyms.length > 2 ?\n                                `${d.synonyms[0]}, ${d.synonyms[1]}, ${d.synonyms.length - 2} more` : d.synonyms.join(', ') : 'N/A'\n                    d.full_synonyms = d && d.synonyms && Array.isArray(d.synonyms) && d.synonyms.length > 0 ? d.synonyms.join(', ') : 'N/A';\n                    d.status = d.status ? this.titleCase(d.status) : 'N/A';\n                });\n            this.setState({\n                activeTableRows: icd10Active.result,\n                activeTableCount: icd10Active.total.count,\n                activeTableCurrentpage: this.state.activeTableCurrentpage > (Math.ceil(icd10Active.total.count / this.state.activeTableLimit) - 1) ? (Math.ceil(icd10Active.total.count / this.state.activeTableLimit) - 1) : this.state.activeTableCurrentpage\n            })\n        }\n\n        this.setState({\n            loading_state: false\n        });\n    }\n\n    handleActiveFilter = (filter: any) => {\n        const self = this;\n\n        if (self.state.typingTimeout) {\n            clearTimeout(self.state.typingTimeout);\n        }\n\n        let where: any = {};\n\n        filter.map(d =>\n            where[d.columnName] = { like: d.value, options: 'i' }\n        )\n\n        self.setState({\n            activeTableSkip: 0,\n            activeTableCurrentpage: 0,\n            activeTableFilter: where,\n            active_default_filter: filter,\n            typingTimeout: setTimeout(function () {\n                self.setState({\n                    no_data_message: `No available data`\n                });\n                self.getActive()\n            }, 2000),\n        });\n    }\n\n    handleActiveSorting = (value: any) => {\n        let filter = {\n            ...value[0],\n            direction: value[0].direction.toUpperCase()\n        }\n\n        if (filter['columnName'] === 'synonyms') filter['columnName'] = 'main_synonym';\n\n        let a = Object.values(filter).join(' ')\n\n        this.setState({\n            activeTableSort: [a]\n        }, this.getActive)\n    }\n\n    handleActivePageSizeChange = (value: any) => {\n        // @ts-ignore\n        this.setState({\n            activeTableLimit: value\n        }, this.getActive)\n    }\n\n    handleActiveCurrentPageChange = (value: any) => {\n        // @ts-ignore\n        this.setState({\n            activeTableSkip: value * this.state.activeTableLimit,\n            activeTableCurrentpage: value\n        }, this.getActive)\n    }\n    // FUNCTIONS FOR ALL DIAGNOSIS TAB - END\n\n\n\n\n\n    handleOpenConfirmationModalProps = (payload) => {\n        console.log(payload)\n        this.setState({\n            confirm_modal_open: true,\n            confirm_modal_title: \"Save Changes\",\n            confirm_modal_message: <span>Are you sure you want to proceed with the following changes? <br /><br />\n                {payload && payload.patch_synonyms && payload.patch_synonyms.some(data => data['status'] === 'active') ? (\n                    <>\n                        <b>Approve</b> <br />\n                        <ul>\n                            {payload.patch_synonyms.map(data => {\n                                if (data['status'] === 'active') {\n                                    return (\n                                        <>\n                                            <li>{data['title']}</li>\n                                        </>\n                                    )\n                                }\n                                return null\n                            })}\n                        </ul>\n                        <br />\n                    </>\n                ) : null}\n                {payload && payload.patch_synonyms && payload.patch_synonyms.some(data => data['status'] === 'inactive') ? (\n                    <>\n                        <b>Disapprove</b><br />\n                        <ul>\n                            {payload.patch_synonyms.map(data => {\n                                if (data['status'] === 'inactive') {\n                                    return (\n                                        <>\n                                            <li>{data['title']}</li>\n                                        </>\n                                    )\n                                }\n                                return null\n                            })}\n                        </ul>\n                        <br />\n                    </>\n                ) : null}\n            </span>,\n            confirm_modal_method: async () => {\n                await this.handleSaveUnapprovedPayload(payload);\n                this.handleCloseSideModalBlock();\n            }\n        });\n    }\n\n    handleConfirmationModalClose = () => {\n        this.setState({\n            unsaved_changes_modal: false,\n            confirm_modal_save_button: 'Save',\n            confirm_modal_open: false,\n        })\n    }\n\n    handleSaveUnapprovedPayload = async (payload) => {\n        this.handleConfirmationModalClose();\n        await patchSynonyms(JSON.stringify(payload)).catch(e => console.log(e));\n        this.setState({ has_unsaved_changes: false });\n        this.getActive();\n\n    }\n\n    addSynonym = (full_code, title, diagnosis_code) => {\n        const payload = constructAddSynonymPayload(full_code, title, diagnosis_code);\n        this.setState({ loading_state: true });\n        addSynonyms(JSON.stringify(payload)).then((resp: any) => {\n\n            if (!resp.error) {\n                this.setState({\n                    ...this.state,\n                    snackbarOpen: true,\n                    snackbarMessage: `New Synonym has been successfully added.`,\n                })\n            } else {\n                this.setState({\n                    snackbarOpen: true,\n                    snackbarMessage: 'Something went wrong. New Synoym was not added.',\n                })\n            }\n\n            this.getActive();\n            this.setState({ has_unsaved_changes: false }, this.handleCloseSideModalBlock)\n        }).catch(e => {\n            if (e.message && e.message.includes('\\n') && (e.message.match(/\\n/g) || []).length >= 2 && (e.message.includes('UM58') || e.message.includes('UM59') || e.message.includes('UM60'))) {\n                const messages: string[] = e.message.split('\\n');\n                const bracketIndexStart: number = messages[2].indexOf('[');\n                const bracketIndexEnd: number = messages[2].indexOf(']');\n                let message_comp: any = null;\n                if (bracketIndexStart && bracketIndexEnd) {\n                    let strong_str: string = messages[2].substring(bracketIndexStart, bracketIndexEnd + 1);\n                    const first_str: string = messages[2].split('[')[0];\n                    let temp: string[] = messages[2].split(']');\n                    const end_str: string = temp[temp.length - 1];\n                    message_comp = <span>{first_str}<strong>{strong_str}</strong>{end_str}</span>\n                } else {\n                    message_comp = <span>{messages[2]}</span>\n                }\n                if (messages[0] === 'Code UM59') {\n                    this.setState({\n                        confirm_modal_open: true,\n                        confirm_modal_message: message_comp,\n                        confirm_modal_title: messages[1],\n                        confirm_modal_save_button: 'Activate Synonym',\n                        confirm_modal_method: () => this.handleActivateDuplicateInactiveSynonym(messages[3])\n                    });\n                } else {\n                    this.setState({\n                        isModalOpen: true,\n                        modalTitle: messages[1],\n                        modalMessage: message_comp\n                    });\n                }\n            } else {\n                this.setState({\n                    snackbarOpen: true,\n                    snackbarMessage: 'Something went wrong. New Synoym was not added.',\n                })\n            }\n            this.getActive();\n            console.log(e);\n            this.setState({ has_unsaved_changes: false }, this.handleCloseSideModalBlock);\n        })\n    }\n\n\n    handleActivateDeactivate = async (payload: any) => {\n        await patchSynonyms(JSON.stringify(payload)).catch(e => console.log(e));\n        this.setState({ has_unsaved_changes: false });\n        this.getActive();\n    }\n\n\n    handleActivateDuplicateInactiveSynonym = (string_obj: string) => {\n        this.handleConfirmationModalClose();\n        if (!string_obj) return;\n        this.setState({ loading_state: true });\n        let duplicate: Icd10Synonym | null = null;\n        try {\n            duplicate = JSON.parse(string_obj);\n        } catch (e) {\n            console.log(e);\n        }\n        if (!duplicate) return;\n        duplicate['action_chosen'] = true;\n        const payload = constructActivateSynonymPayload([duplicate]);\n        this.handleActivateDeactivate(payload);\n    }\n\n    handleOpenUnsavedChangesModal = () => {\n        this.setState({ unsaved_changes_modal: true },\n            () => this.setState({\n                confirm_modal_open: true,\n                confirm_modal_message: this.createUnsavedChangesModalBody(),\n                confirm_modal_title: 'Are you sure you want to leave this page?',\n            }))\n    }\n\n    createUnsavedChangesModalBody = () => {\n        const { side_modal_active_link, side_modal_rows } = this.state;\n        console.log('SIDE MODAL', side_modal_active_link, side_modal_rows);\n        let body_list1: any = null;\n        let body_list2: any = null;\n        if (side_modal_active_link === 'Unapproved') {\n            const approve_rows: Icd10Synonym[] = side_modal_rows.filter(row => row.action_chosen === 'approve');\n            const disapprove_rows: Icd10Synonym[] = side_modal_rows.filter(row => row.action_chosen === 'disapprove');\n            body_list1 = approve_rows.length ? this.getBodyList(approve_rows, 'Approve') : null;\n            body_list2 = disapprove_rows.length ? this.getBodyList(disapprove_rows, 'Disapprove') : null;\n        } else if (side_modal_active_link === 'Approved') {\n            const deactivate_rows: Icd10Synonym[] = side_modal_rows.filter(row => row.action_chosen);\n            body_list1 = deactivate_rows.length ? this.getBodyList(deactivate_rows, 'Deactivate') : null;\n        } else if (side_modal_active_link === 'Inactive') {\n            const activate_rows: Icd10Synonym[] = side_modal_rows.filter(row => row.action_chosen);\n            body_list1 = activate_rows.length ? this.getBodyList(activate_rows, 'Activate') : null;\n        }\n        return (\n            <span>\n                You still have unsaved changes. Do you want to save them? Your changes will be lost if you leave without saving.\n                <br />\n                {body_list1 ? (<><br />{body_list1}</>) : null}\n                {body_list2 ? (<><br />{body_list2}</>) : null}\n            </span>\n        );\n    }\n\n    getBodyList = (rows: Icd10Synonym[], action: string) => {\n        return (\n            <span>\n                {rows ? (\n                    <>\n                        <b>{action}</b> <br />\n                        <ul key={action + ' list'}>\n                            {rows.map(row => {\n                                return (\n                                    <li key={row.title}>{row['title']}</li>\n                                )\n                            })}\n                        </ul>\n                        <br />\n                    </>\n                ) : null}\n            </span>\n        )\n    }\n\n    saveChanges = async () => {\n        const { side_modal_active_link, side_modal_rows } = this.state;\n        this.setState({ loading_state: true })\n        if (side_modal_active_link === 'Unapproved') {\n            const payload = constructUnapprovedSynonymPayload(side_modal_rows);\n            await this.handleSaveUnapprovedPayload(payload);\n        } else if (side_modal_active_link === 'Approved') {\n            const payload = constructDeactivateSynonymPayload(side_modal_rows);\n            await this.handleActivateDeactivate(payload);\n        } else if (side_modal_active_link === 'Inactive') {\n            const payload = constructActivateSynonymPayload(side_modal_rows);\n            await this.handleActivateDeactivate(payload);\n        }\n        if (this.state.confirm_modal_method) {\n            try {\n                this.state.confirm_modal_method();\n            } catch (e) {\n                console.log(e);\n            }\n        }\n        this.handleConfirmationModalClose();\n    }\n\n    discardAndContinue = () => {\n        this.setState({ has_unsaved_changes: false }, () => {\n            if (this.state.confirm_modal_method) {\n                try {\n                    this.state.confirm_modal_method();\n                } catch (e) {\n                    console.log(e);\n                }\n            }\n            this.handleConfirmationModalClose();\n        });\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    /***********************  \n         RENDER SECTIONS \n    ***********************/\n\n    renderSideModalBlock(): JSX.Element {\n\n        return (\n            <SideModalBlock\n                handleClose={this.handleCloseSideModalBlock}\n                showBlock={this.state.show_side_modal_block}\n                blockPosition={'fixed'}\n                title={this.state.block_title}\n            >\n                <AddSynonymsBody\n                    activeLink={this.state.side_modal_active_link}\n                    setActiveLink={(activelink: string) => this.setState({ side_modal_active_link: activelink })}\n                    hasUnsavedChanges={this.state.has_unsaved_changes}\n                    setHasUnsavedChanges={(bool: boolean) => this.setState({ has_unsaved_changes: bool })}\n                    onClose={this.handleCloseSideModalBlock}\n                    data={this.state.code_info}\n                    addSynonym={(full_code: string, title: string, diagnosis_code: string) => {\n                        this.addSynonym(full_code, title, diagnosis_code);\n                    }}\n                    patchSynonyms={async (rows: any) => {\n                        const payload = constructUnapprovedSynonymPayload(rows);\n                        this.handleOpenConfirmationModalProps(payload)\n                    }}\n                    deactivateSynonyms={async (rows: any) => {\n                        this.setState({ loading_state: true });\n                        const payload = constructDeactivateSynonymPayload(rows);\n                        await this.handleActivateDeactivate(payload);\n                        this.handleCloseSideModalBlock();\n                    }}\n                    activateSynonyms={async (rows: any) => {\n                        this.setState({ loading_state: true });\n                        const payload = constructActivateSynonymPayload(rows);\n                        await this.handleActivateDeactivate(payload);\n                        this.handleCloseSideModalBlock();\n                    }}\n                    getRowsForUnsavedChanges={(rows: Icd10Synonym[]) => this.setState({ side_modal_rows: rows }, this.handleOpenUnsavedChangesModal)}\n                    getRowsTrigger={this.state.side_modal_get_rows_trigger}\n                    changeTabUnsaved={(item: string) => {\n                        const bool: boolean = this.state.side_modal_get_rows_trigger;\n                        this.setState({\n                            side_modal_get_rows_trigger: !bool,\n                            confirm_modal_method: () => this.setState({ side_modal_active_link: item })\n                        });\n                    }}\n                />\n            </SideModalBlock>\n        )\n    }\n\n    render(): JSX.Element {\n        const { classes } = this.props;\n\n        return (\n            <div>\n                {this.state.loading_state ? <Loader /> : null}\n                <Grid container>\n\n                    <Grid container item xs={12} md={12} style={{ paddingLeft: '37px' }}>\n                        <Grid container>\n                            <Grid item xs={12} md={12}>\n                                <TextField\n                                    style={{ width: '100%', backgroundColor: 'white' }}\n                                    id=\"code_search\"\n                                    placeholder=\"Search code, description, or synonym\"\n                                    label=\"\"\n                                    margin=\"none\"\n                                    fullWidth\n                                    variant=\"outlined\"\n                                    value={this.state.global_filter}\n                                    onKeyUp={(event) => {\n                                        let code = event.keyCode || event.which\n                                        if (code == 13 && this.state.typing && this.state.global_filter) {\n                                            if (this.state.typingTimeout) {\n                                                clearTimeout(this.state.typingTimeout);\n                                            }\n                                            this.setState({\n                                                page_unapproved: 0,\n                                                loading_state: true,\n                                                typing: false,\n                                                no_data_message: `Searching for ICD10 codes`\n                                            });\n                                            if (this.state.activeLink === 'Unapproved Synonyms') {\n                                                this.searchSynonyms(\n                                                    this.state.default_filters_unapproved,\n                                                    this.state.global_filter,\n                                                    this.state.limit_unapproved,\n                                                    0,\n                                                    this.state.default_sorting_unapproved\n                                                )\n                                            } else if (this.state.activeLink === 'All Diagnosis') {\n                                                this.setState({ activeTableSkip: 0, activeTableCurrentpage: 0 }, this.getActive);\n                                                // this.getActive();\n                                            }\n\n                                        }\n                                    }}\n                                    inputProps={{ 'aria-label': 'bare' }}\n                                    onChange={this.handleSearch}\n                                    InputProps={{\n                                        startAdornment: (\n                                            <InputAdornment position=\"start\">\n                                                <Search style={{ color: 'rgba(54, 54, 54, 0.4)' }} />\n                                            </InputAdornment>\n                                        ),\n                                    }}\n                                />\n                            </Grid>\n\n\n\n                            <Grid item xs={12} md={12} style={{ paddingRight: '8px', marginTop: 15 }}>\n                                <Grid item xs={12} md={12} style={{ marginLeft: '15px' }}>\n                                    <ul style={{ padding: '0', margin: '0' }}>\n                                        {this.state.menuTabs.map((item, i) => (\n                                            <li key={`${item}-${i}`} className={classes.menuList}>\n                                                <Link\n                                                    className={this.state.activeLink === item ? classes.LinkActive : classes.menuLink}\n                                                    onClick={() => this.handleMenuClick(item)}>\n                                                    {item}\n                                                </Link>\n                                            </li>\n                                        ))\n                                        }\n                                    </ul>\n                                </Grid>\n                                <Grid item xs={6} md={6}></Grid>\n                            </Grid>\n\n                            {this.state.activeLink === 'All Diagnosis' ? (\n                                <>\n                                    <GridHorizontalDivider height=\"30px\" />\n                                    <Grid style={{ overflow: 'auto' }}>\n                                        <TableComponent\n                                            id=\"tab-all\"\n                                            totalCount={this.state.activeTableCount}\n                                            update={this.changePageUpdateUnapproved}\n                                            updateSorting={this.handleActiveSorting}\n                                            rows={this.state.activeTableRows}\n                                            columns={this.state.activeTableColumns.columns}\n                                            message={\n                                                this.state.global_filter\n                                                    ? 'No available data'\n                                                    : this.state.no_data_message\n                                            }\n                                            onClickRow={this.handleClickRow}\n                                            columnExtensions={\n                                                Object.keys(this.state.activeTableColumns).length > 0\n                                                    ? this.state.activeTableColumns['columnExtensions']\n                                                    : []\n                                            }\n                                            disableSelect\n                                            disableSearch\n                                            onFilterChange={this.handleActiveFilter}\n                                            onSortingChange={this.handleActiveSorting}\n                                            onPageChange={this.handleActiveCurrentPageChange}\n                                            ongPageSizeChange={this.handleActivePageSizeChange}\n                                            defaultFilter={this.state.active_default_filter}\n                                            currentPage={this.state.activeTableCurrentpage}\n                                            limit={this.state.activeTableLimit}\n                                            pageSizes={[10, 25, 50, 100]}\n                                            disableIntegratedFiltering={true}\n                                        />\n                                    </Grid>\n                                </>\n                            ) : null}\n                            {this.state.activeLink === 'Unapproved Synonyms' ? (\n                                <>\n\n                                    <GridHorizontalDivider height=\"30px\" />\n                                    <Grid style={{ minHeight: 690, overflow: 'auto' }}>\n                                        <TableComponent\n                                            id=\"tab-unapproved\"\n                                            totalCount={this.state.total_count_unapproved}\n                                            update={this.changePageUpdateUnapproved}\n                                            updateSorting={this.handleChangeSortingUnapproved}\n                                            rows={\n                                                Object.keys(this.state.code_data_unapproved).length > 0\n                                                    ? this.state.code_data_unapproved['rows']\n                                                    : []\n                                            }\n                                            columns={\n                                                Object.keys(this.state.code_data_unapproved).length > 0\n                                                    ? this.state.code_data_unapproved['columns']\n                                                    : []\n                                            }\n                                            message={\n                                                this.state.global_filter\n                                                    ? 'No available data'\n                                                    : this.state.no_data_message\n                                            }\n                                            onClickRow={() => { }}\n                                            disableSelect\n                                            disableSearch\n                                            formattedColumns={\n                                                Object.keys(this.state.code_data_unapproved).length > 0\n                                                    ? this.state.code_data_unapproved['formattedColumns']\n                                                    : {}\n                                            }\n                                            columnExtensions={\n                                                Object.keys(this.state.code_data_unapproved).length > 0\n                                                    ? this.state.code_data_unapproved['columnExtensions']\n                                                    : []\n                                            }\n                                            filterExtensions={\n                                                Object.keys(this.state.code_data_unapproved).length > 0\n                                                    ? this.state.code_data_unapproved['filterExtensions']\n                                                    : []\n                                            }\n                                            onFilterChange={this.handleFilterByColumnUnapproved}\n                                            onSortingChange={this.handleChangeSortingUnapproved}\n                                            onPageChange={this.handlePageChangeUnapproved}\n                                            ongPageSizeChange={this.handlePageSizeChangeUnapproved}\n                                            defaultFilter={this.state.default_filters_unapproved}\n                                            currentPage={this.state.page_unapproved}\n                                            limit={this.state.limit_unapproved}\n                                            pageSizes={[10, 25, 50, 100]}\n                                            approveDisapproveItems={this.state.unapproved_codes_actions}\n                                            onSelectedRadio={(row: number, value: string) => {\n                                                this.handleRadioClick(row, value);\n                                            }}\n                                            onSelectedReset={(row: any) => {\n                                                console.log('ROW', row, this.state.code_data_unapproved['rows'][row]);\n                                                const synonym: Icd10Synonym = this.state.code_data_unapproved['rows'][row];\n                                                if (!synonym._id) return;\n                                                const { unapproved_codes_actions } = this.state;\n                                                const temp = unapproved_codes_actions.filter(row => row._id !== synonym._id);\n                                                this.props.setICDSynonymAction(temp);\n                                            }}\n                                        />\n                                        <GridHorizontalDivider height=\"30px\" />\n                                        <div>\n                                            <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n                                                <Button\n                                                    style={{ width: '130px' }}\n                                                    onClick={this.handleSaveUnapproved}\n                                                    variant=\"contained\"\n                                                    color=\"primary\"\n                                                    disabled={this.state.unapproved_codes_actions && this.state.unapproved_codes_actions.length ? false : true}\n                                                >\n                                                    {this.state.confirm_modal_save_button}\n                                                </Button>\n                                            </div>\n                                        </div>\n                                    </Grid>\n                                </>\n                            ) : null}\n                        </Grid>\n                    </Grid>\n                </Grid>\n\n\n                {this.renderSideModalBlock()}\n\n                <MsgModal\n                    onClose={() => {\n                        this.setState({\n                            isModalOpen: false,\n                        })\n                    }}\n                    title={this.state.modalTitle}\n                    isModalOpen={this.state.isModalOpen}\n                    message={this.state.modalMessage}\n                    messageMaxWidth={this.state.modalMessageMaxWidth}\n                />\n                <ModalComponent\n                    titleFontSize={16}\n                    isModalOpen={this.state.confirm_modal_open}\n                    onClose={this.handleConfirmationModalClose}\n                    message={this.state.confirm_modal_message}\n                    title={this.state.confirm_modal_title}\n                    buttons=\n                    {this.state.unsaved_changes_modal ? (\n                        <Grid container justify=\"center\" alignItems=\"center\">\n                            <Grid item xs={5}>\n                                <Button\n                                    onClick={this.saveChanges}\n                                    style={{\n                                        margin: '0 10px',\n                                        minHeight: '42px',\n                                        minWidth: '150px',\n                                        fontSize: 14\n                                    }}\n                                    variant={'contained'}\n                                    color={'primary'}>\n                                    Save Changes\n                                </Button>\n                            </Grid>\n                            <Grid item xs={7}>\n                                <Button\n                                    onClick={this.discardAndContinue}\n                                    style={{\n                                        margin: '0 10px',\n                                        minHeight: '42px',\n                                        minWidth: '200px',\n                                        fontSize: 14\n                                    }}\n                                    variant={'outlined'}\n                                    color={'secondary'}>\n                                    Discard and Continue\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    ) : (\n                            <Grid container justify=\"center\" alignItems=\"center\">\n                                <Grid item xs={6}>\n                                    <Button\n                                        onClick={this.handleConfirmationModalClose}\n                                        style={{\n                                            margin: '0 10px',\n                                            minHeight: '42px',\n                                            minWidth: '150px',\n                                            fontSize: 14\n                                        }}\n                                        variant={'outlined'}\n                                        color={'secondary'}>\n                                        Cancel\n                            </Button>\n                                </Grid>\n                                <Grid item xs={6}>\n                                    <Button\n                                        onClick={this.state.confirm_modal_method}\n                                        style={{\n                                            margin: '0 10px',\n                                            minHeight: '42px',\n                                            minWidth: '150px',\n                                            fontSize: 14\n                                        }}\n                                        variant={'contained'}\n                                        color={'primary'}>\n                                        {this.state.confirm_modal_save_button ? this.state.confirm_modal_save_button : 'Save'}\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        )}\n\n\n                />\n\n\n                <Snackbar\n                    anchorOrigin={{\n                        vertical: 'top',\n                        horizontal: 'right',\n                    }}\n                    open={this.state.snackbarMessage ? true : false}\n                    autoHideDuration={6000}\n                    message={this.state.snackbarMessage}\n                    onClose={() => {\n                        this.setState({ snackbarMessage: null });\n                    }}\n                />\n\n\n            </div>\n        );\n    }\n}\n","import Fetch, { requestOption } from '../index'\n\nconst fetch = new Fetch();\nfetch.getAccessToken();\n\nexport const getCPT = (limit: number, skip: number) => {\n\n    let filters = {\n        limit: limit,\n        skip: skip,\n      };\n    let option: requestOption = {\n        method: 'GET'\n    }\n    if(fetch.getAccessToken()){\n        return fetch.call(option, `cpts/search?filter=${JSON.stringify(filters)}`, true)\n    }\n    return fetch.fetchAccessToken().then(()=> fetch.call(option, `cpts/search?filter=${JSON.stringify(filters)}`, true))\n}\n\nexport const searchCPT = (limit: number, offset: number, filters: any, query: string, sorting?: any, key?: string,) => {\n\n    let filter_key_str = '';\n    if (key !== undefined && key !== '' && key.length > 0) {\n        // console.log('KEY', key)\n        filter_key_str = '&filter[where][category]='+key\n\n    }\n    let sorting_str = '';\n    if (sorting && sorting.length !== 0) {\n      sorting_str =\n        '&filter[order]=' +\n        sorting[0]['columnName'] +\n        ' ' +\n        sorting[0]['direction'];\n    }\n    let filter_str = '';\n    if (filters) {\n      filters.forEach(filter => {\n        filter_str =\n          filter_str + '&' + filter['columnName'] + '=' + filter['value'];\n      });\n    }\n    let search = query ? '&search=' + query : '';\n    let CPT_URL =\n      `cpts/search?filter[limit]=${limit}&filter[skip]=${offset}` +\n      search +\n      filter_str +\n      sorting_str +\n      filter_key_str;\n    if (limit === 0)\n        CPT_URL =\n        `cpts/search?filter[skip]=${offset}` +\n        search +\n        filter_str +\n        sorting_str +\n        filter_key_str;\n\n    let option: requestOption = {\n        method: 'GET'\n    }\n \n    if(fetch.getAccessToken()){\n        return fetch.call(option, CPT_URL, true)\n    }\n    return fetch.fetchAccessToken().then(()=> fetch.call(option, CPT_URL, true))\n}\n\nexport const addCPTCodes = (payload: any) => {\n\n    let option: requestOption = {\n        method: 'POST',\n        body: payload\n    }\n\n    if(fetch.getAccessToken()){\n        return fetch.call(option, `cpts/multiple`, true)\n    }\n    return fetch.fetchAccessToken().then(()=> fetch.call(option, `cpts/multiple`, true))\n}\n\nexport const editCPT = (payload: any, id: string | undefined) => {\n\n    let option: requestOption = {\n        method: 'PUT',\n        body: payload\n    }\n\n    if(fetch.getAccessToken()){\n        return fetch.call(option, `cpts/edit/${id}`, true)\n    }\n    return fetch.fetchAccessToken().then(()=> fetch.call(option, `cpts/edit/${id}`, true))\n}\n\nexport const deleteCPT = (id: string) => {\n\n    let option: requestOption = {\n        method: 'DELETE'\n    }\n\n    if(fetch.getAccessToken()){\n        return fetch.call(option, `cpts/${id}`, true)\n    }\n    return fetch.fetchAccessToken().then(()=> fetch.call(option, `cpts/${id}`, true))\n}","import React from 'react';\nimport { TableComponent } from 'Components/UI/TableComponent/CodeListTable';\nimport {\n  TextField,\n  InputAdornment,\n  Grid,\n  List,\n  ListItemText,\n} from '@material-ui/core';\nimport { Search } from '@material-ui/icons/';\nimport { Loader } from '../Loader';\nimport Link from '@material-ui/core/Link';\nimport { GridHorizontalDivider } from 'Components/UI';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { SideModalBlock } from 'Components/UI';\nimport { SideModalBody } from 'Components/UI';\nimport { MsgModal } from 'Components/UI';\nimport { SIDE_MODAL_BLOCK_FIELDS } from 'Components/UI/SideModalBlock/FieldConstants';\nimport moment from 'moment';\nimport { ConfirmationModal } from '../ConfirmationModal'\nimport {\n  getCPT,\n  searchCPT,\n  addCPTCodes,\n  editCPT,\n  deleteCPT\n} from 'Pages/API/Calls/CPT'\nimport { cloneDeep } from 'lodash'\nimport { Utils } from '@hims/core'\nimport {\n  constructCpt,\n  constructEmptyCpt,\n  constructPutCpt,\n  constructPostCpt,\n  reconstructCpt\n} from '../ConstructPayloads'\nimport { Cpt } from '../../LookupModels';\nconst helper = new Utils.IndexedDBHelper();\n\ninterface IState {\n  confirm_modal_title: string;\n  confirm_modal_message: string;\n  confirm_modal_open: boolean;\n  action_after_confirm: () => void;\n  invalid_fields: string[];\n  loading_state: boolean;\n  block_title?: string;\n  show_side_modal_block?: string;\n  side_modal_block_mode: 'view' | 'edit' | 'add' | '';\n  code_info?: Cpt;\n  code_response: any;\n  code_data_all: any;\n  code_data: any;\n  global_filter: string;\n  default_filters: any;\n  default_sorting: any;\n  default_clicked: string;\n  isModalOpen: boolean;\n  modalTitle: string;\n  modalMessage: any;\n  totalCount: number;\n  typing: boolean;\n  typingTimeout: any;\n  page: number;\n  limit: number;\n  isPageSizeModal: boolean;\n  highlightedCodeFromList: number;\n  no_data_message: 'Searching for CPT codes' | 'No available data' | '';\n  cpt_categories: string[];\n  cpt_category_range: string[];\n  disableSaveButton: boolean;\n  clickSaveButton: boolean;\n  category_dropdown_choices: any[];\n}\n\ninterface IProps {\n  classes: any\n\n\n  cptCategories: string[];\n  cptCategoryRanges: string[];\n  cptCategoryDropdown: any;\n\n\n  setCPTCategories: (categories: string[]) => void;\n  setCPTCategoryRanges: (ranges: string[]) => void;\n  setCPTCategoryDropdown: (dropdown: any) => void;\n}\n\n\nexport class CPTSection extends React.Component<IProps, IState> {\n  private requiredFields: any;\n  private excludeFields: any;\n\n  constructor(props) {\n    super(props);\n\n    this.requiredFields = SIDE_MODAL_BLOCK_FIELDS.CPT.editOrAdd.checkInvalidFields;\n    this.excludeFields = SIDE_MODAL_BLOCK_FIELDS.CPT.editOrAdd.excludeFields\n\n    const table: any = {\n      formattedColumns: {},\n      columnExtensions: [\n        {\n          columnName: 'code',\n          width: 150,\n          wordWrapEnabled: true,\n        },\n        {\n          columnName: 'description',\n          width: 500,\n          wordWrapEnabled: true,\n        },\n      ],\n      columns: [\n        {\n          name: 'code',\n          title: 'CPT Code',\n        },\n        {\n          name: 'description',\n          title: 'Description',\n        },\n      ],\n      rows: [],\n    };\n\n    this.state = {\n      category_dropdown_choices: props.cptCategoryDropdown,\n      cpt_categories: props.cptCategories,\n      cpt_category_range: props.cptCategoryRanges,\n      no_data_message: '',\n      confirm_modal_title: '',\n      confirm_modal_message: '',\n      confirm_modal_open: false,\n      action_after_confirm: () => { },\n      invalid_fields: [],\n      highlightedCodeFromList: -1,\n      loading_state: true,\n      code_response: [],\n      code_info: constructEmptyCpt(),\n      show_side_modal_block: 'none',\n      side_modal_block_mode: '',\n      code_data: table,\n      code_data_all: table,\n      block_title: '',\n      global_filter: '',\n      default_filters: [],\n      default_sorting: [{\n        columnName: 'code',\n        direction: 'asc'\n      }],\n      default_clicked: '',\n      isModalOpen: false,\n      isPageSizeModal: false,\n      modalTitle: '',\n      modalMessage: '',\n      totalCount: 0,\n      typing: false,\n      typingTimeout: 0,\n      page: 0,\n      limit: 10,\n      disableSaveButton: false,\n      clickSaveButton: false,\n    };\n  }\n\n\n  componentDidMount() {\n    if (!this.state.category_dropdown_choices || !this.state.cpt_categories || !this.state.cpt_category_range) {\n      this.fetchCPTCategories()\n        .then(() => this.initialData())\n        .catch(() => this.initialData())\n    } else {\n      this.initialData()\n    }\n\n    document.addEventListener('keydown', this.escFunction, false);\n\n  }\n\n  escFunction = (event) => {\n    if (event.keyCode === 27) {\n      this.handleCloseSideModalBlock()\n    }\n  }\n\n\n  initialData = () => {\n    this.setState({ no_data_message: 'Searching for CPT codes' })\n    this.searchCode(\n      10,\n      0,\n      this.state.default_filters,\n      this.state.global_filter,\n      this.state.default_sorting,\n      this.state.default_clicked)\n  };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  /***********************  \n       CRUD FUNCTIONS \n  ***********************/\n\n  addCPTIndexDB = (data: any[]) => {\n    helper.openDb('himsDb').then(res => {\n      let db = res.result\n      try {\n        helper.saveToStore(db, 'cpt_list', data)\n          .then(res => console.log('RES', res))\n          .catch(e => console.log(e))\n      } catch (e) {\n        console.log(e)\n      } finally { }\n    })\n  }\n\n  patchCPTIndexDB = (data: any) => {\n    helper.openDb('himsDb').then(res => {\n      let db = res.result\n      try {\n        helper.updateEntryByKey(db, 'cpt_list', data['_id'], data)\n          .then(res => console.log('RES', res))\n          .catch(e => console.log(e))\n      } catch (e) {\n        console.log(e)\n      } finally { }\n    })\n  }\n\n  fetchCPTCategories = async () => {\n    this.setState({ loading_state: true })\n    await Utils.StorageService('cpt_list')\n      .then(cpts => {\n        if (Array.isArray(cpts) && cpts.length > 0) {\n          let category_arr: string[] = []\n          let category_ranges: string[] = []\n          let category_dropdown_choices_arr: any[] = [{ name: '', value: '' }]\n          cpts.filter(item => {\n            if (!category_arr.includes(item.category)) {\n              category_arr.push(item.category)\n              category_ranges.push(item.code)\n              category_dropdown_choices_arr.push({ name: item.category, value: item.category })\n              return true;\n            }\n            return false;\n          })\n          this.props.setCPTCategories(category_arr)\n          this.props.setCPTCategoryDropdown(category_dropdown_choices_arr)\n          this.props.setCPTCategoryRanges(cloneDeep(category_ranges))\n          this.setState({\n            cpt_categories: category_arr,\n            cpt_category_range: category_ranges,\n            category_dropdown_choices: category_dropdown_choices_arr\n          }, () => this.setState({ loading_state: false }))\n        }\n      })\n      .catch(err => console.log(err));\n  }\n\n  patchCode = (data: any) => {\n\n    const payload: Cpt = constructPutCpt(data)\n\n    const code: string = payload.code;\n\n    this.setState({\n      loading_state: true,\n      no_data_message: 'Searching for CPT codes'\n    })\n    editCPT(JSON.stringify(payload), payload._id).then(response => {\n      this.setState({\n        no_data_message: 'No available data',\n        loading_state: false\n      })\n      if (response && response.error === undefined && response.message) {\n        this.changePageUpdate(this.state.limit, this.state.limit * this.state.page)\n        this.patchCPTIndexDB(data)\n        this.setState({\n          disableSaveButton: true,\n          isModalOpen: true,\n          modalTitle: 'Success',\n          modalMessage: `You have ${response.message} code!`\n        });\n      } else if (response && response.error && response.error.statusCode === 401) {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'Unauthorized',\n          modalMessage: 'You are not authorized to edit CPT codes.'\n        });\n      } else if (response && response.error && response.error.statusCode === 400 && response.error.message) {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'CPT Code Already Exists',\n          modalMessage: (<span><strong>[{code}]</strong> cannot be added. This already exists on the list.</span>),\n        });\n      } else {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'Failed',\n          modalMessage: 'Something went wrong while saving!'\n        });\n      }\n    }).catch(error => {\n      if (error == 'Error: This code already exists.') {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'CPT Code Already Exists',\n          modalMessage: (<span><strong>[{code}]</strong> cannot be added. This already exists on the list.</span>),\n          loading_state: false\n        });\n      } else {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'Failed',\n          modalMessage: 'Something went wrong while saving!',\n          loading_state: false\n        });\n      }\n    });\n  }\n\n  addCodes = (data: any) => {\n\n    this.setState({\n      loading_state: true,\n      no_data_message: 'Searching for CPT codes'\n    })\n\n    const payload: Cpt[] = constructPostCpt(data)\n    let code: string = ''; \n    if(payload && payload.length > 0) code = payload[0].code;\n    addCPTCodes(JSON.stringify(payload)).then(response => {\n      this.setState({\n        loading_state: false,\n        no_data_message: 'No available data'\n      })\n      if (response && response.error === undefined && response.message && response.result) {\n        this.changePageUpdate(this.state.limit, this.state.limit * this.state.page)\n        this.addCPTIndexDB(response.result)\n        this.setState({\n          disableSaveButton: true,\n          isModalOpen: true,\n          modalTitle: 'Success',\n          modalMessage: `You have successfully added ${response.result.length} CPT code/s!`\n        });\n      } else if (response && response.error && response.error.statusCode === 401) {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'Unauthorized',\n          modalMessage: 'You are not authorized to add CPT codes.'\n        });\n      } else if (response && response.error && response.error.statusCode === 400 && response.error.message) {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'CPT Code Already Exists',\n          modalMessage: (<span><strong>[{code}]</strong> cannot be added. This already exists on the list.</span>),\n        });\n      } else {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'Failed',\n          modalMessage: 'Something went wrong while adding!'\n        });\n      }\n    }).catch(error => {\n      if (error == 'Error: This code already exists.') {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'CPT Code Already Exists',\n          modalMessage: (<span><strong>[{code}]</strong> cannot be added. This already exists on the list.</span>),\n          loading_state: false\n        });\n      } else {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'Failed',\n          modalMessage: 'Something went wrong while saving!',\n          loading_state: false\n        });\n      }\n    });\n  }\n\n  searchCode = (\n    limit: number, skip: number, filters: any, filters_global: any, sorting: any, clicked: any) => {\n\n    searchCPT(limit, skip, filters, filters_global, sorting, clicked).then(response => {\n      this.setState({ no_data_message: 'No available data' })\n      if (response && response.error === undefined) {\n        const table = this.generateDataForTable(\n          response.result ? response.result : [],\n        );\n        this.setState({\n          code_response: response,\n          code_data_all: table,\n          code_data: table,\n          loading_state: false,\n          totalCount:\n            response.total && response.total.count\n              ? response.total.count\n              : 0,\n        });\n      } else if (response && response.error && response.error.statusCode === 401) {\n        const table = this.generateDataForTable([]);\n        this.setState({\n          code_response: [],\n          code_data_all: table,\n          loading_state: false,\n          isModalOpen: true,\n          modalTitle: 'Unauthorized',\n          modalMessage: 'You are not authorized to view CPT codes.',\n        });\n      } else {\n        const table = this.generateDataForTable([]);\n        this.setState({\n          code_response: [],\n          code_data_all: table,\n          loading_state: false,\n          isModalOpen: true,\n          modalTitle: 'Loading failed',\n          modalMessage: 'An error occured while loading the list of codes.',\n        });\n      }\n    }).catch(() => {\n      const table = this.generateDataForTable([]);\n      this.setState({\n        code_response: [],\n        code_data_all: table,\n        loading_state: false,\n        isModalOpen: true,\n        modalTitle: 'Loading failed',\n        modalMessage: 'An error occured while loading the list of codes.',\n      });\n    });\n  }\n\n\n  deleteCPT = (id: string) => {\n    if (!id) {\n      return\n    }\n    this.setState({ loading_state: true })\n    deleteCPT(id).then(response => {\n      this.setState({\n        loading_state: false\n      })\n      this.changePageUpdate(this.state.limit, this.state.limit * this.state.page)\n      if (response && response.error) {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'Failed',\n          modalMessage: 'Something went wrong while deleting the CPT Code!'\n        });\n      }\n      else {\n        this.setState({\n          isModalOpen: true,\n          modalTitle: 'Success',\n          modalMessage: 'You have successfully deleted a CPT code!'\n        });\n      }\n    }).catch(error => {\n      this.setState({\n        isModalOpen: true,\n        modalTitle: 'Failed',\n        modalMessage: 'Something went wrong while deleting the ICD10 Code!'\n      });\n      this.setState({\n        loading_state: false\n      })\n      console.log('client error: ', error);\n    });\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n  /***********************  \n  TABLE AND PAGE FUNCTIONS \n  ***********************/\n\n  generateDataForTable(response: any) {\n    const table: any = {\n      formattedColumns: {},\n      columnExtensions: [\n        {\n          columnName: 'code',\n          width: 150,\n          wordWrapEnabled: true,\n        },\n        {\n          columnName: 'description',\n          width: 500,\n          wordWrapEnabled: true,\n        },\n      ],\n      columns: [\n        {\n          name: 'code',\n          title: 'CPT Code',\n        },\n        {\n          name: 'description',\n          title: 'Description',\n        },\n      ],\n      rows: [],\n    };\n    for (const cnt in response) {\n      const item = response[cnt];\n      const temp_row: any = {};\n      temp_row['code'] = item['code'];\n      temp_row['description'] = item['description'];\n      table['rows'].push(temp_row);\n    }\n\n    return table;\n  }\n\n  changePageUpdate = (limit: number, skip: number) => {\n    this.handleCloseSideModalBlock();\n    this.setState({ no_data_message: 'Searching for CPT codes' })\n    this.setState({\n      loading_state: true,\n    });\n    if (\n      this.state.default_filters.length !== 0 ||\n      this.state.global_filter !== '' ||\n      this.state.default_sorting.length !== 0 ||\n      this.state.default_clicked !== ''\n    ) {\n      this.searchCode(\n        limit,\n        skip,\n        this.state.default_filters,\n        this.state.global_filter,\n        this.state.default_sorting,\n        this.state.default_clicked,\n      )\n    } else {\n      this.setState({ no_data_message: 'Searching for CPT codes' })\n      getCPT(limit, skip).then(response => {\n        this.setState({ no_data_message: 'No available data' })\n        if (response && response.error === undefined) {\n          const table = this.generateDataForTable(\n            response.result ? response.result : [],\n          );\n          this.setState({\n            code_response: response,\n            code_data_all: table,\n            code_data: table,\n            loading_state: false,\n            totalCount:\n              response.total && response.total.count\n                ? response.total.count\n                : 0,\n          });\n        } else if (response && response.error && response.error.statusCode === 401) {\n          const table = this.generateDataForTable([]);\n          this.setState({\n            code_response: [],\n            code_data_all: table,\n            loading_state: false,\n            isModalOpen: true,\n            modalTitle: 'Unauthorized',\n            modalMessage: 'You are not authorized to view CPT codes.',\n          });\n        } else {\n          const table = this.generateDataForTable([]);\n          this.setState({\n            code_response: [],\n            code_data_all: table,\n            loading_state: false,\n            isModalOpen: true,\n            modalTitle: 'Loading failed',\n            modalMessage: 'An error occured while loading the list of codes.',\n          });\n        }\n      });\n    }\n  };\n\n  handleChangeSorting = (sorting: any) => {\n    this.setState({ no_data_message: 'Searching for CPT codes' })\n    this.setState({\n      default_sorting: sorting,\n      loading_state: true,\n    });\n    if (sorting && sorting.length > 0) {\n\n      this.searchCode(\n        this.state.limit,\n        this.state.page * this.state.limit,\n        this.state.default_filters,\n        this.state.global_filter,\n        sorting,\n        this.state.default_clicked,\n      )\n    }\n  };\n\n  handleFilterByColumn = (filter: any) => {\n    const self = this;\n\n    if (self.state.typingTimeout) {\n      clearTimeout(self.state.typingTimeout);\n    }\n\n    self.setState({\n      default_filters: filter,\n      typing: false,\n      page: 0,\n      typingTimeout: setTimeout(function () {\n        self.setState({\n          no_data_message: 'Searching for CPT codes',\n          loading_state: true,\n        });\n        if (self.state.default_filters !== 0) {\n          self.searchCode(\n            self.state.limit,\n            0,\n            filter,\n            self.state.global_filter,\n            self.state.default_sorting,\n            self.state.default_clicked,\n          )\n        } else {\n          self.initialData();\n        }\n      }, 2000),\n    });\n\n  };\n\n  handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n\n    const self = this;\n\n    if (self.state.typingTimeout) {\n      clearTimeout(self.state.typingTimeout);\n    }\n    self.setState({\n      global_filter: value,\n      typing: false,\n      page: 0,\n      typingTimeout: setTimeout(function () {\n        self.setState({\n          no_data_message: 'Searching for CPT codes',\n          loading_state: true,\n          limit: 10,\n        });\n        if (self.state.global_filter !== '') {\n          self.searchCode(\n            self.state.limit,\n            0,\n            self.state.default_filters,\n            self.state.global_filter,\n            self.state.default_sorting,\n            self.state.default_clicked,\n          )\n        } else {\n          self.initialData();\n        }\n      }, 2000),\n    });\n  };\n\n  handleClickRow = (row: any) => {\n    const { code_response } = this.state;\n\n    if (!this.state.code_response || !this.state.code_response.result)\n      return;\n\n    const data: Cpt = constructCpt(code_response.result[row])\n    this.checkFields(data, true)\n    this.setState({\n      code_info: data,\n    }, () => this.handleChangeSideModalBlockMode('view'));\n  };\n\n\n  handlePageChange = (currentPage: number, skip: number) => {\n    this.setState({\n      page: currentPage,\n    });\n\n    this.changePageUpdate(this.state.limit, skip);\n  };\n\n  handlePageSizeChange = value => {\n    let pageLimit = 100000;\n\n    if (this.state.totalCount >= pageLimit) {\n      this.setState({\n        isPageSizeModal: true,\n      });\n    } else {\n      this.setState({\n        limit: value,\n      });\n\n      this.changePageUpdate(value, value * this.state.page);\n    }\n  };\n\n  handleClickItemFromList = (key: string) => {\n    this.setState({ default_clicked: key });\n    this.handleCloseSideModalBlock()\n    this.setState({\n      no_data_message: 'Searching for CPT codes',\n      page: 0,\n      loading_state: true,\n    });\n    if (key !== undefined) {\n      this.searchCode(\n        this.state.limit,\n        0,\n        this.state.default_filters,\n        this.state.global_filter,\n        this.state.default_sorting,\n        key,\n      )\n    }\n  };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  /*****************************  \n  ACTIONS / SIDE MODAL FUNCTIONS \n  ******************************/\n\n  handleCloseSideModalBlock = () => {\n    this.setState({\n      show_side_modal_block: 'none',\n      side_modal_block_mode: '',\n      code_info: constructEmptyCpt(),\n    });\n  };\n\n  handleChangeSideModalBlockMode = (value: 'view' | 'edit' | 'add' | '') => {\n    let title = '';\n    if (value && value === 'edit' && this.state.block_title) {\n      title = `Edit ${this.state.block_title}`;\n      const reform_data: Cpt = reconstructCpt(cloneDeep(this.state.code_info))\n      this.setState({ code_info: reform_data })\n    } else if (value && value === 'view' && this.state.code_info) {\n      title = this.state.code_info['code'] ? this.state.code_info['code'] : '';\n    } else if (value && value === 'add') {\n      title = `Add CPT Code`;\n    }\n    this.setState({\n      side_modal_block_mode: value,\n      block_title: title,\n    }, () => this.handleOpenBlock());\n  };\n\n  handleOpenBlock = () => {\n    this.setState({\n      show_side_modal_block: 'block',\n    }, () => this.passDataToSideModalBlockBody());\n  };\n\n  handleInvalidFieldsPrompt = () => {\n    this.setState({\n      isModalOpen: true,\n      modalTitle: 'Incomplete/Invalid Fields',\n      modalMessage: 'Please complete the form before proceeding.',\n    })\n  }\n\n\n  passDataToSideModalBlockBody = () => {\n\n    if (this.state.code_info && !this.state.code_info.gender_limited) {\n      this.state.code_info.gender = ''\n      this.setState({\n        code_info: this.state.code_info\n      });\n    }\n  };\n\n\n  checkFields = (formFields?: any, disableButton?: boolean) => {\n    this.setState({ loading_state: true })\n\n    if (formFields) {\n      let invalid_fields = this.getInvalidFields(formFields, disableButton);\n      if (!invalid_fields || invalid_fields.length === 0) {\n        if (this.state.disableSaveButton || !this.state.clickSaveButton) {\n          return\n        }\n        if (this.state.side_modal_block_mode === 'edit') {\n          this.setState({\n            clickSaveButton: false,\n            confirm_modal_message: 'Are you sure you want to edit this CPT code?',\n            confirm_modal_open: true,\n            confirm_modal_title: 'Confirm edit CPT code',\n            action_after_confirm: () => this.patchCode(formFields)\n          })\n        } else if (this.state.side_modal_block_mode === 'add') {\n          this.setState({\n            clickSaveButton: false,\n            confirm_modal_message: 'Are you sure you want to add this CPT code?',\n            confirm_modal_open: true,\n            confirm_modal_title: 'Confirm add CPT code',\n            action_after_confirm: () => this.addCodes(formFields)\n          })\n        }\n      } else {\n        this.handleInvalidFieldsPrompt()\n      }\n    }\n  }\n\n  getInvalidFields = (formFields: any, disableButton?: boolean) => {\n    let invalid_fields_submit: any[] = [];\n    let invalid_fields_editing: any[] = [];\n    let exclude_fields = {}\n    if (this.excludeFields !== undefined) {\n      exclude_fields = this.excludeFields\n    }\n    const fields_excluded: string[] = Object.keys(exclude_fields)\n    const form_keys: string[] = Object.keys(formFields)\n\n    form_keys.forEach(field => {\n      if (this.requiredFields !== undefined &&\n        this.requiredFields.includes(field) &&\n        !fields_excluded.includes(field) &&\n        !formFields[field]) {\n        if (!disableButton) {\n          invalid_fields_submit.push(field)\n        } else {\n          invalid_fields_editing.push(field)\n        }\n\n      }\n    });\n\n    const eff_date = moment(formFields['effectivity_date'])\n    const exp_date = moment(formFields['expiry_date'])\n    if (formFields &&\n      formFields['effectivity_date'] &&\n      formFields['expiry_date'] &&\n      eff_date.isValid() &&\n      exp_date.isValid() &&\n      eff_date.startOf('day').diff(exp_date.startOf('day')) > 0) {\n      if (disableButton) {\n        invalid_fields_editing.push('effectivity_date')\n      } else {\n        invalid_fields_submit.push('effectivity_date')\n      }\n    }\n\n    if (formFields && formFields['gender_limited'] && !formFields['gender']) {\n      if (!disableButton) {\n        invalid_fields_submit.push('gender')\n      } else {\n        invalid_fields_editing.push('gender')\n      }\n    }\n    if (!invalid_fields_editing || invalid_fields_editing.length === 0) {\n      this.setState({ disableSaveButton: false })\n    } else if (!this.state.disableSaveButton) {\n      this.setState({ disableSaveButton: true })\n    }\n    this.setState({ loading_state: false, invalid_fields: invalid_fields_submit })\n    return invalid_fields_submit\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  renderSideModalBlock(): JSX.Element {\n\n    return (\n      <SideModalBlock\n        blockPosition={'fixed'}\n        title={this.state.block_title}\n        editIconDescription={'Edit Code'}\n        showBlock={this.state.show_side_modal_block}\n        handleClose={this.handleCloseSideModalBlock}\n        sideModalBlockMode={this.state.side_modal_block_mode}\n        changeMode={this.handleChangeSideModalBlockMode}\n      >\n        {this.state.side_modal_block_mode ? (\n          <SideModalBody\n            formFields={this.state.code_info}\n            invalidFields={this.state.invalid_fields}\n            handleClose={this.handleCloseSideModalBlock}\n            disableSaveButton={this.state.disableSaveButton}\n            dynamicDropdownChoices={this.state.category_dropdown_choices}\n            refreshData={(data: any) => {\n              this.setState({ code_info: data },\n                () => this.checkFields(data, true))\n            }}\n            delete={(data: any) => {\n              if (this.state.side_modal_block_mode) {\n                if (this.state.side_modal_block_mode === 'edit') {\n                  this.setState({\n                    confirm_modal_message: 'Are you sure you want to delete this CPT code?',\n                    confirm_modal_open: true,\n                    confirm_modal_title: 'Confirm delete CPT code',\n                    action_after_confirm: () => this.deleteCPT(data['_id'])\n                  })\n                }\n              }\n            }}\n            handleSave={(formFields?: any) => {\n              if (this.state.side_modal_block_mode) {\n                this.setState({ clickSaveButton: true }, () => this.checkFields(formFields))\n              }\n            }}\n            formName={'CPT'}\n            mode={this.state.side_modal_block_mode ? this.state.side_modal_block_mode : ''}\n            checkBoxWithDropDownFieldsInitState={this.state.code_info && this.state.code_info['gender_limited'] ? true : false}\n            datePairField1MaxDate={\n              this.state.code_info &&\n                this.state.code_info['expiry_date'] &&\n                moment(this.state.code_info['expiry_date']).isValid() ?\n                moment(this.state.code_info['expiry_date']).format('MM-DD-YY').toString() : undefined\n            }\n            datePairField2MinDate={\n              this.state.code_info &&\n                this.state.code_info['effectivity_date'] &&\n                moment(this.state.code_info['effectivity_date']).isValid() ?\n                moment(this.state.code_info['effectivity_date']).format('MM-DD-YY').toString() : undefined\n            }\n          />\n        ) : null}\n      </SideModalBlock>\n    )\n  }\n\n  renderCodeInfo(): JSX.Element {\n    const { classes } = this.props;\n\n    return (\n      <React.Fragment>\n        <li key={'version'} className={classes.codeHeader}>VERSION</li>\n        <li key={'year-of-release-value'} className={classes.codeHeaderValue}>2020</li>\n        <ListItemText key={'effectivity-date'}>\n          <div className={classes.codeHeader}>EFFECTIVITY DATE</div>\n          <div className={classes.codeHeaderValue}>Jan 1, 2020</div>\n        </ListItemText>\n      </React.Fragment>\n    )\n  }\n\n  renderCodeList(key: string): JSX.Element {\n    const { classes } = this.props;\n    const ranges = this.state.cpt_category_range\n    const categories = this.state.cpt_categories\n\n    let display: string = ''\n    if (ranges.length > 0 && categories.length > 0) {\n      const range = ranges[categories.indexOf(key)]\n      if (range) {\n        display = `${range.slice(0, 4)}0000 - ${range.slice(0, 4)}9999 :`\n      }\n    } else {\n      return (\n        <>\n        </>\n      )\n    }\n\n    return (\n      <ListItemText\n        key={key}\n        classes={{\n          root: classes.codeListItemsRoot,\n          primary:\n            this.state.highlightedCodeFromList ===\n              categories.indexOf(key)\n              ? classes.codeListItemsSelected\n              : classes.codeListItems,\n        }}\n        onClick={() => {\n          if (categories.indexOf(key) !== this.state.highlightedCodeFromList) {\n            this.setState({\n              highlightedCodeFromList: categories.indexOf(key),\n            });\n            this.handleClickItemFromList(key);\n          } else {\n            this.setState({\n              highlightedCodeFromList: -1,\n            });\n            this.handleClickItemFromList('');\n          }\n        }}\n      >\n        <br />{display}<br />\n        {key}\n      </ListItemText>\n    )\n  }\n\n\n  render(): JSX.Element {\n    const { classes } = this.props;\n    const categories = this.state.cpt_categories\n\n    return (\n      <div>\n        {this.state.loading_state ? <Loader /> : null}\n\n\n        <Grid container>\n          <Grid container item xs={12} md={3}>\n            <Grid container className={classes.borderedGrid}>\n              <List>\n                {this.renderCodeInfo()}\n                {categories ? categories.map(key => this.renderCodeList(key)) : null}\n              </List>\n            </Grid>\n          </Grid>\n\n\n\n\n\n\n\n          <Grid container item xs={12} md={9} style={{ paddingLeft: '37px' }}>\n            <Grid container>\n              <Grid item xs={12} md={9}>\n                <TextField\n                  style={{ width: '100%', backgroundColor: 'white' }}\n                  id=\"code_search\"\n                  placeholder=\"Search a code or description\"\n                  label=\"\"\n                  margin=\"none\"\n                  fullWidth\n                  // className={classes.searchField}\n                  variant=\"outlined\"\n                  value={this.state.global_filter}\n                  inputProps={{ 'aria-label': 'bare' }}\n                  onChange={this.handleSearch}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <Search style={{ color: 'rgba(54, 54, 54, 0.4)' }} />\n                      </InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n\n\n\n\n              <Grid item xs={8} md={3} style={{ paddingRight: '15px', marginTop: 15, textAlign: 'center' }}>\n                <FontAwesomeIcon icon={faPlus} className={classes.plusIcon} />\n                <Link className={classes.addACode}\n                  onClick={() => {\n                    this.setState({\n                      block_title: 'Add CPT Code',\n                      code_info: constructEmptyCpt(),\n                      disableSaveButton: true\n                    }, () => this.handleChangeSideModalBlockMode('add'));\n                  }}>Add a Code</Link>\n              </Grid>\n\n\n\n\n\n              <GridHorizontalDivider height=\"30px\" />\n              <Grid style={{ minHeight: 690, overflow: 'auto' }}>\n                <TableComponent\n                  id=\"tab-all\"\n                  totalCount={this.state.totalCount}\n                  update={this.changePageUpdate}\n                  updateSorting={this.handleChangeSorting}\n                  rows={\n                    Object.keys(this.state.code_data).length > 0\n                      ? this.state.code_data['rows']\n                      : []\n                  }\n                  columns={\n                    Object.keys(this.state.code_data).length > 0\n                      ? this.state.code_data['columns']\n                      : []\n                  }\n                  message={\n                    this.state.global_filter\n                      ? 'No available data.'\n                      : this.state.no_data_message\n                  }\n                  onClickRow={this.handleClickRow}\n                  disableSelect\n                  disableSearch\n                  formattedColumns={\n                    Object.keys(this.state.code_data).length > 0\n                      ? this.state.code_data['formattedColumns']\n                      : {}\n                  }\n                  columnExtensions={\n                    Object.keys(this.state.code_data).length > 0\n                      ? this.state.code_data['columnExtensions']\n                      : []\n                  }\n                  onFilterChange={this.handleFilterByColumn}\n                  onSortingChange={this.handleChangeSorting}\n                  onPageChange={this.handlePageChange}\n                  ongPageSizeChange={this.handlePageSizeChange}\n                  defaultFilter={this.state.default_filters}\n                  currentPage={this.state.page}\n                  limit={this.state.limit}\n                  pageSizes={[10, 25, 50, 100]}\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n\n\n\n        {this.renderSideModalBlock()}\n\n        <MsgModal\n          onClose={() => this.setState({ isModalOpen: false })}\n          title={this.state.modalTitle}\n          isModalOpen={this.state.isModalOpen}\n          message={this.state.modalMessage}\n        />\n        <ConfirmationModal\n          onClose={() => this.setState({ confirm_modal_open: false })}\n          title={this.state.confirm_modal_title}\n          isModalOpen={this.state.confirm_modal_open}\n          submitType={'confirm'}\n          onSubmit={() => {\n            if (this.state.action_after_confirm) {\n              this.state.action_after_confirm()\n            }\n          }}\n          message={this.state.confirm_modal_message} />\n      </div>\n    );\n  }\n}\n","import React, {\n  useState,\n} from 'react';\n\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { Store } from 'Components/Stores/IStore';\nimport { LookupActions } from './LookupActions';\nimport {\n  GridHorizontalDivider,\n} from 'Components/UI/';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ICD10Section } from './Components/ICD10Section';\nimport { ICD10SynonymsSection } from './Components/ICD10SynonymsSection';\nimport { CPTSection } from './Components/CPTSection';\nimport { SideMenu } from 'Components/UI/SideMenu';\nimport classNames from 'classnames';\n\nimport {\n  Grid,\n  Typography,\n  Link\n} from '@material-ui/core';\n\nconst page_tab_titles: any = ['Codes', 'Locations', 'Industries'];\n\nconst sideBarItems = {\n  Codes: [\n    {\n      name: 'ICD-10',\n      label: ''\n    },\n    {\n      name: 'CPT',\n      label: ''\n    },\n    {\n      name: 'Doctor Specialization',\n      label: ''\n    },\n    {\n      name: 'Diagnosis - Procedures Matrix',\n      label: ''\n    },\n    {\n      name: 'ICD10 Synonyms',\n      label: ''\n    },\n  ], Locations: [\n    {\n      name: 'Regions',\n      label: ''\n    },\n    {\n      name: 'Provinces',\n      label: ''\n    },\n    {\n      name: 'Municipalities and Cities',\n      label: ''\n    },\n  ], Industries: [\n    {\n      name: 'Agriculture, Hunting, Forestry And Fishing Sector',\n      label: ''\n    },\n    {\n      name: 'Industry Sector',\n      label: ''\n    },\n    {\n      name: 'Service Sector',\n      label: ''\n    },\n  ]\n};\n\nconst useStyles = makeStyles(() => ({\n\n\n  borderedGrid: {\n    maxHeight: 715,\n    overflow: 'auto',\n    paddingRight: '15px',\n    paddingLeft: '15px',\n    borderRight: '1px solid #C3C3C3',\n  },\n\n  plusIcon: {\n    color: '#3AB77D',\n    cursor: 'pointer',\n    fontSize: 14,\n    marginRight: '15px',\n  },\n\n  addACode: {\n    fontSize: 14,\n    fontWeight: 700,\n    color: 'rgba(58, 183, 125, 1)',\n    cursor: 'pointer'\n  },\n\n  codeHeader: {\n    color: '#272E4C',\n    textAlign: 'left',\n    opacity: 0.6,\n    letterSpacing: 0,\n    textAlignLast: 'left',\n    fontSize: '12px',\n  },\n\n  codeHeaderValue: {\n    color: '#272E4C',\n    textAlign: 'left',\n    opacity: 1,\n    letterSpacing: 0,\n    textAlignLast: 'left',\n    fontSize: '16px',\n    fontWeight: 500,\n  },\n\n  codeListItemsRoot: {\n    flex: 'none',\n  },\n\n  codeListItems: {\n    fontSize: '14px',\n    color: '#272E4C',\n    textAlign: 'left',\n    opacity: 1,\n    letterSpacing: 0,\n    textAlignLast: 'left',\n    '&:hover': {\n      textDecoration: 'underline',\n      color: '#3AB77D',\n      fontWeight: 600,\n    },\n    '&$selected': {\n      textDecoration: 'underline',\n      color: '#3AB77D',\n      fontWeight: 600,\n    },\n  },\n\n  codeListItemsSelected: {\n    fontSize: '14px',\n    textDecoration: 'underline',\n    color: '#3AB77D',\n    fontWeight: 600,\n    textAlign: 'left',\n    opacity: 1,\n    letterSpacing: 0,\n    textAlignLast: 'left',\n  },\n\n  menuList: {\n    display: \"inline-block\",\n    padding: \"10px 80px 10px 0\"\n  },\n\n  menuLink: {\n    color: \"#929292\",\n    display: \"block\",\n    fontSize: \"1.10em\",\n    '&:hover': {\n      color: \"#3ab77d\",\n    }\n  },\n\n  LinkActive: {\n    color: \"#3ab77d\",\n    fontWeight: \"bold\",\n    textDecoration: \"underline\"\n  }\n\n}));\n\nconst useStyles2 = makeStyles(() => ({\n\n  gridContainer: {\n    backgroundColor: '',\n  },\n\n  main: {\n    backgroundColor: '#F5F7FB',\n    padding: '32px 24px',\n  },\n\n  headerTitle: {\n    fontSize: '1.5rem',\n    fontWeight: 800,\n  },\n\n  sideBarContainer: {\n    borderRight: \"1px solid #ccc\",\n    paddingRight: \"25px\",\n  },\n\n  menuList: {\n    display: \"inline-block\",\n    padding: \"10px 80px 10px 0\"\n  },\n\n  menuLink: {\n    color: \"#929292\",\n    display: \"block\",\n    fontSize: \"1.10em\",\n    '&:hover': {\n      color: \"#3ab77d\",\n    }\n  },\n\n  LinkActive: {\n    color: \"#3ab77d\",\n    fontWeight: \"bold\",\n    textDecoration: \"underline\"\n  }\n  \n}));\n\nexport const LookupPage = () => {\n  const [activeHeader, setActiveHeader] = useState('Codes');\n  const [activeClass, setActiveClass] = useState(0);\n  const [activeItem, setActiveItem] = useState('ICD-10');\n\n\n\n  const [icdCategories, setICDCategories] = useState<string[]>([]);\n  const [icdCategoryDropdown, setICDCategoryDropdown] = useState<any>(undefined);\n\n  const [icdSynonymAction, setICDSynonymAction] = useState<any[]>([]);\n\n  const [cptCategories, setCPTCategories] = useState<string[]>([]);\n  const [cptCategoryRanges, setCPTCategoryRanges] = useState<string[]>([]);\n  const [cptCategoryDropdown, setCPTCategoryDropdown] = useState<any>(undefined);\n\n  const classes = useStyles();\n  const lookupClasses = useStyles2();\n\n  const activeSideBarItem = (item) => {\n    setActiveItem(item);\n  }\n\n  const handleMenuClick = (item, index) => {\n    setActiveHeader(item);\n    setActiveClass(index)\n  }\n\n  return (\n    <div className={lookupClasses.main}>\n      <Grid\n        container\n        justify=\"space-between\"\n        alignItems=\"center\"\n        spacing={0}\n        className={lookupClasses.gridContainer}\n      >\n        <Grid item>\n          <Typography className={lookupClasses.headerTitle}>Lookup</Typography>\n        </Grid>\n      </Grid>\n      <GridHorizontalDivider height=\"15px\" />\n\n\n\n\n\n\n\n\n      {/* HEADER */}\n\n      <Grid item xs={6}>\n        <ul style={{ padding: '0', margin: '0' }}>\n          {\n            page_tab_titles.map((item, i) => (\n              <li key={item} className={lookupClasses.menuList}>\n                <Link className={classNames(lookupClasses.menuLink, activeClass === i ? lookupClasses.LinkActive : null)} onClick={() => handleMenuClick(item, i)}>{item}</Link>\n              </li>\n            ))\n          }\n        </ul>\n      </Grid>\n\n\n\n\n\n\n\n\n\n\n\n      <Grid container justify=\"space-between\" spacing={0}>\n        <GridHorizontalDivider height=\"30px\" />\n\n\n        {/* SIDE MENU */}\n        <Grid item xs={2} className={lookupClasses.sideBarContainer}>\n          <SideMenu\n            items={sideBarItems[activeHeader]}\n            activeItems={activeSideBarItem}\n            reset={activeHeader}\n          ></SideMenu>\n        </Grid>\n\n\n        {/* SECTIONS */}\n        {activeItem === 'ICD-10' && activeHeader === 'Codes' ? (\n          <Grid item xs={12} md={10}>\n            <ICD10Section\n              classes={classes}\n              icdCategories={icdCategories}\n              setICDCategories={setICDCategories}\n              icdCategoryDropdown={icdCategoryDropdown}\n              setICDCategoryDropdown={setICDCategoryDropdown}\n            />\n          </Grid>\n\n        ) : activeItem === 'CPT' && activeHeader === 'Codes' ? (\n          <Grid item xs={12} md={10}>\n            <CPTSection\n              classes={classes}\n              cptCategories={cptCategories}\n              setCPTCategories={setCPTCategories}\n              cptCategoryRanges={cptCategoryRanges}\n              setCPTCategoryRanges={setCPTCategoryRanges}\n              cptCategoryDropdown={cptCategoryDropdown}\n              setCPTCategoryDropdown={setCPTCategoryDropdown}\n            />\n          </Grid>\n        ) : activeItem === 'ICD10 Synonyms' && activeHeader === 'Codes' ? (\n          <Grid item xs={12} md={10}>\n            <ICD10SynonymsSection\n              classes={classes}\n              icdSynonymAction={icdSynonymAction}\n              setICDSynonymAction={(data: any[]) => setICDSynonymAction([...data])}\n            />\n          </Grid>\n\n        ) : null}\n      </Grid>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: Store) => state.lookup;\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  Map: bindActionCreators(LookupActions.Map, dispatch),\n});\n\nexport { mapStateToProps, mapDispatchToProps };\n"],"sourceRoot":""}