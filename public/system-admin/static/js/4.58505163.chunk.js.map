{"version":3,"sources":["Pages/Lookup/Components/Loader/index.tsx","Components/UI/TableComponent/ReactTable.tsx","Pages/Roles/ActionConsts.ts","Pages/Roles/RolesActions.ts","Pages/Roles/Components/ViewPolicies.tsx","Pages/Roles/Components/EditPolicies.tsx","Pages/Roles/Components/Policies.tsx","Components/UI/SearchBar/APICallSearch.tsx","Pages/Roles/Components/AddUserRoleBody.tsx","Pages/Roles/Components/AddGroupRoleBody.tsx","Pages/Roles/Components/GroupsAndUsers.tsx","Pages/Roles/RolesPage.tsx"],"names":["useStyles","makeStyles","root","position","width","height","zIndex","right","bottom","top","left","textAlign","backgroundColor","container","outline","alignItems","justifyContent","display","flexDirection","Loader","classes","className","size","defaultProps","statusOption","value","label","Select","items","restProps","variant","style","renderValue","selected","find","item","map","i","key","FilterCell","filter","onFilter","filteringEnabled","column","name","padding","utils","MomentUtils","format","inputVariant","invalidDateMessage","onChange","date","toISOString","paddingTop","e","target","id","labelWidth","placeholder","SortingIcon","direction","marginLeft","icon","faSortUp","faSortDown","SortLabel","onSort","children","hideSortIcon","onClick","textOverflow","overflow","faSort","groupIconContentCell","expanded","verticalAlign","faAngleUp","faAngleDown","color","ReactTable","props","rows","columns","disableSort","disableFilter","enableGrouping","groupColumnName","viewOnly","message","columnExtensions","sortingStateColumnExtensions","defaultSorting","onDeleteRow","enableSelection","enableSelectAll","onRowClick","totalCount","onPageChange","currentPage","pageSize","onSetPageSize","onCheckRow","onSelectGroup","loading","onSortingChange","enableIntegratedSorting","enableOpenGroupTotalChecked","React","selection","setSelection","pageSizes","sorting","setSorting","selectCell","row","onToggle","faMinusSquare","checkedIcon","faCheckSquare","checked","stopPropagation","onCurrentPageChange","onPageSizeChange","onSelectionChange","grouping","columnName","onFiltersChange","onFilterChange","messages","noData","cellComponent","faMinusCircle","showSortingControls","sortLabelComponent","highlightRow","selectByRowClick","showSelectAll","undefined","showSelectionColumn","contentComponent","isChecked","countChecked","countItems","data","iconComponent","groupNameChecked","ActionConsts","ResetReducer","SetReducer","RolesActions","payload","type","ViewPolicies","onNavigateSideMenu","Grid","xs","InputLabel","inputLabel","htmlFor","Typography","role_id","module","description","status","effectivity_date","moment","expiry_date","associate_groups","length","groups","Link","console","log","date_last_update","EditPolicies","dataChanges","isProcessMaker","effectivityDate","expiryDate","editData","setEditData","onBlur","disabled","is_processMaker","Checkbox","inputProps","maxDate","subtract","startOf","maxDateMessage","marginTop","clearable","minDate","add","minDateMessage","Policies","mode","rbacList","rbacState","onUpdateChange","onSortChange","onSearch","loadRbacList","isAddedModalRole","setIsAddedModalRole","moduleValue","setModuleValue","isModuleModalOpen","setIsModuleModalOpen","moduleLabel","setModuleLabel","isModalConfirmChangeModule","setIsModalConfirmChangeModule","newRbacList","setNewRbacList","setLoading","defaultFilters","setDefaultFilters","isModalDeleteSuccessOpen","setIsModalDeleteSuccessOpen","isModalCannotEditOpen","setIsModalCannotEditOpen","isEdited","setIsEdited","checkedList","setCheckedList","moduleItems","handleUpdateCheck","_data","rbac","is_processmaker","_id","spacing","group","ReactSearch","title","checklist","push","list","handleOnCheckRow","limit","count","setTimeout","handleOnCheckGroup","ModalComponent","isModalOpen","onClose","buttons","justify","Button","button","margin","menuItems","moduleName","Number","handleContinueRole","theme","gridContainerNoPadding","searchIcon","transform","fontSize","searchContainer","borderRadius","searchBox","border","searchLabel","comboBoxContainer","opacity","maxHeight","overflowY","APICallSearch","newComboList","setNewComboList","searchValue","setSearchValue","typingTimeout","setTypingTimeout","isLoadingChoices","setIsLoadingChoices","ref","setRef","typing","setTyping","getChoices","usernames","selectedUsers","username","usersWithRole","usernamesWithRole","getRolesUsersLists","fields","where","nin","then","resp","resp_body","body","roles","array","a","x","some","b","removeDuplicateRoles","full_name","first_name","middle_name","last_name","catch","handleKeyPress","event","clearTimeout","faSearch","onKeyUp","keyCode","which","listStyle","current","focus","searchCombo","selectedItems","xIcon","AddUserRoleBody","initializeData","state","removeDuplicates","setUsersWithRole","handleOnSearch","arr","setSelectedUsers","handleRemoveItem","index","splice","handleOnSaveItems","onSave","apiCallFields","and","or","roleId","prevProps","this","setState","refreshUsersWithRole","buttonsContainer","selectedContainer","selectedText","paddingRight","saveButton","cancelButton","minHeight","minWidth","faTimesCircle","paddingLeft","AddGroupRoleBody","comboArray","getAllGroups","res","group_id","user_count","date_updated","pmaker_uid","amount_limit","department","rank","reports_to","meta_data","newChoices","c","beauty","err","SearchUserGroup","comboBoxMode","comboListsArray","user_fields","employee_id","main_module","main_role","group_name","last_login","GroupsAndUsers","useState","activeItem","setActiveItem","activeClass","setActiveClass","groupShowBlock","setGroupShowBlock","userShowBlock","setUserShowBlock","isFetching","setIsFetching","userList","setUserList","skip","order","userTable","setUserTable","offset","query","tableStates","setTableState","open","method","modalProps","setModalProps","confirmationModalProps","setConfirmationModalProps","refreshUsers","setRefreshUsers","isConfirmDetachUserRoleModalOpen","setIsConfirmDetachUserRoleModalOpen","userDetachRole","setUserDetachRole","attachUserRoleNotifModalOpen","setAttachUserRoleNotifModalOpen","setAttachUserRoleSuccess","userColumns","getCellValue","charAt","toUpperCase","slice","APIGetGroupsAttachToRoleList","attachUserRole","attachUserRoles","getUserLists","detachUserRole","detachUserRoles","page","search","_filter","_order","like","options","lte","endOf","gte","params","response","Math","ceil","newState","saveSummary","getAllGroupsAttachToRole","error","updateTableState","prop","handleCloseModalProps","handleOpenConfirmationModalProps","roledata","handleCloseConfirmationModalProps","selectedGroupToRemove","user_account","groupRoles","newGroupRoles","attachRoleToGroups","JSON","stringify","handleDeleteGroup","LoadingIndicator","menuList","classNames","menuLink","LinkActive","handleMenuClick","alignRight","newEntry","forEach","newRow","hasOwnProperty","textTransform","rowDataFixer","wordWrapEnabled","align","sortingEnabled","w","parseInt","Object","values","join","sort","handleClose","showBlock","selectedGroupId","isUnique","onSaveAddRoleToGroup","Array","isArray","attach_role_data","user","role","mainContainer","main","headMain","gridContainer","paddingBottom","sectionTitle","fontWeight","subSectionTitle","editBtn","sideBarContainer","borderRight","contentContainer","sideBarLists","sideBarLink","fieldGroupTitle","listItemTextRoot","flex","listItemTextPrimarySelected","cursor","listItemTextPrimaryNotSelected","dropzone","marginBottom","keyboardDatePicker","checkbox","radio","appBar","breakpoints","up","grow","flexGrow","buttonTitle","buttonSubTitle","textDecoration","RolesPage","setViewOnly","activeItemIndex","setActiveItemIndex","isModalConfirmExitOpen","setIsModalConfirmExitOpen","isModalConfirmSaveOpen","setIsModalConfirmSaveOpen","isModalSaveSuccessOpen","setIsmodalSaveSuccessOpen","setMode","isOpenSideModalBlock","setIsOpenSideModalBlock","policyResponse","setPolicyResponse","setModuleName","setRbacList","breadCrumbs","setBreadCrumbs","rbacCount","setRoleId","policyData","setPolicyData","isRedirect","setIsRedirect","currentModule","setCurrentModule","setRbacState","set","setLoadRbacList","showDeactivationWarning","setShowDeactivationWarning","sideBarItems","handleGetRoleData","getRoleData","match","_crumbs","link","handGetRbacList","alert","isEmpty","obj","resParam","_mode","curModule","getRbacList","policy","activeSideBarItem","handleModalConfirmationClose","to","pathname","SubHeader","headingTitle","breadCrumbsArray","buttonFunc","buttonName","layoutType","enableButton","SideMenu","activeItems","onChangeModuleName","generateRoleId","handleChangeModuleName","openSideModalBlock","updateRoleRbac","handleOnSave","today","exp_date","isSameOrAfter","mapStateToProps","mapDispatchToProps","dispatch","Map","bindActionCreators"],"mappings":"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","file":"static/js/4.58505163.chunk.js","sourcesContent":["import * as React from 'react';\nimport { CircularProgress } from '@material-ui/core/';\nimport { makeStyles } from '@material-ui/core/styles';\n\ninterface LoaderProps {\n}\n\nconst useStyles = makeStyles({\n\troot: {\n        position: 'fixed',\n        width: '100%',\n        height: '100%',\n        zIndex: 9999,\n        right: '0px',\n        bottom: '0px',\n        top: '0px',\n        left: '0px',\n        textAlign: \"center\",\n        backgroundColor: 'rgba(0, 0, 0, 0.5)'\n    },\n    container:{\n        height: '100%',\n        outline: 0,\n        alignItems: 'center',\n        justifyContent: 'center',\n        display: 'flex',\n        flexDirection: 'column'\n    }\n});\n\nexport const Loader: React.FC<LoaderProps> = (): JSX.Element => {\n    // const buttonclasses = ButtonStyle();\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            <div className={classes.container}>\n                <CircularProgress size={150}/>\n            </div>\n        </div>\n    )\n}\n\nLoader.defaultProps = {}","import * as React from 'react';\n// import { useState } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport {\n    FilteringState,\n    SortingState,\n    IntegratedSorting,\n    IntegratedGrouping,\n    GroupingState,\n    SelectionState,\n    // IntegratedPaging,\n    PagingState,\n    CustomPaging,\n} from '@devexpress/dx-react-grid';\nimport {\n    Grid,\n    Table,\n    //   Toolbar,\n    TableHeaderRow,\n    TableFilterRow,\n    TableGroupRow,\n    TableSelection,\n    PagingPanel,\n    // TableFixedColumns,\n} from '@devexpress/dx-react-grid-material-ui';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n    // faSearch,\n    faCheckSquare,\n    faMinusSquare,\n    faSort,\n    faSortUp,\n    faSortDown,\n    faMinusCircle,\n    faAngleDown,\n    faAngleUp,\n    // faPlus,\n    // faCheck, \n    // faTimes\n} from '@fortawesome/free-solid-svg-icons';\nimport * as MaterialUI from '@material-ui/core';\nimport { Loader } from 'Pages/Lookup/Components/Loader';\nimport './ReactTable.scss';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers'\nimport MomentUtils from '@date-io/moment'\n\n// import { ReactSearch } from '../SearchBar/ReactSearch';\n\nexport interface IReactTableProps {\n    rows: any,\n    columns: any,\n    disableSort?: boolean,\n    disableFilter?: boolean,\n    enableIntegratedSorting?: boolean,\n    enableGrouping?: boolean,\n    enableSelection?: boolean,\n    enableSelectAll?: boolean,\n    enableOpenGroupTotalChecked?: boolean,\n    groupColumnName?: string,\n    viewOnly?: boolean,\n    columnExtensions?: any[],\n    message?: string,\n    sortingStateColumnExtensions?: any[],\n    defaultSorting?: any[],\n    totalCount?: number,\n    currentPage?: number,\n    pageSize?: number,\n    groupNameChecked?: any,\n    loading?: boolean,\n    defaultFilters?: any,\n    onDeleteRow?: (row) => void,\n    onRowClick?: (row) => void,\n    onPageChange?: (page) => void,\n    onSetPageSize?: (size) => void,\n    onCheckRow?: (row) => void,\n    onSelectGroup?: (group) => void,\n    onFilterChange?: (filter) => void,\n    onSortingChange?: (sort) => void,\n\n}\n\nconst defaultProps: IReactTableProps = {\n    rows: [],\n    columns: [],\n    enableIntegratedSorting: false,\n    disableSort: false,\n    disableFilter: false,\n    enableGrouping: false,\n    enableSelection: false,\n    enableSelectAll: false,\n    enableOpenGroupTotalChecked: false,\n    groupColumnName: '',\n    viewOnly: true,\n    columnExtensions: [],\n    message: '',\n    sortingStateColumnExtensions: [],\n    defaultSorting: [],\n    totalCount: 0,\n    currentPage: 0,\n    pageSize: 0,\n    groupNameChecked: [],\n    loading: false,\n}\n\nconst statusOption = [\n    {\n        value: 'all',\n        label: 'All',\n    },\n    {\n        value: 'active',\n        label: 'Active'\n    },\n    {\n        value: 'deactivated',\n        label: 'Deactivated'\n    },\n    {\n        value: 'awaiting activation',\n        label: 'Awaiting activation'\n    }\n]\n\nconst Select = ({ items, ...restProps }: any) => {\n    return (\n        <MaterialUI.Select\n            variant='outlined'\n            style={{ width: '100%' }}\n            renderValue={(selected: any) => {\n                if (selected != null) {\n                    const value: any = items.find((item: any) => {\n                        return item.value === selected;\n                    });\n                    if (value) {\n                        return value.label;\n                    } else {\n                        return '——';\n                    }\n                }\n                return '——';\n            }}\n            {...restProps}\n        >\n            {items.map((item: any, i: number) => (\n                <MaterialUI.MenuItem key={i} value={item.value}>\n                    {item.label}\n                </MaterialUI.MenuItem>\n            ))}\n        </MaterialUI.Select>\n    );\n};\n\nconst FilterCell = ({ filter, onFilter, filteringEnabled, classes, column }: any) => {\n    if (filteringEnabled) {\n        if (column.name === 'action_delete') {\n            return (\n                <MaterialUI.TableCell style={{ padding: '0px 10px 8px 10px' }} classes={classes}>\n                </MaterialUI.TableCell>\n            )\n        } else if (column.name === 'last_login') {\n            return (\n                <MaterialUI.TableCell style={{ padding: '0px 10px 8px 10px' }} classes={classes}>\n                    <MuiPickersUtilsProvider utils={MomentUtils}>\n                        <KeyboardDatePicker\n                            variant=\"dialog\"\n                            format=\"MMMM DD, YYYY\"\n                            inputVariant=\"outlined\"\n                            value={filter ? filter.value : ''}\n                            invalidDateMessage=\"\"\n                            onChange={date => { onFilter(date ? { value: date.toISOString() } : null) }}\n                        />\n                    </MuiPickersUtilsProvider>\n                </MaterialUI.TableCell>\n            )\n        } else if (column.name === 'status') {\n            return (\n                <MaterialUI.TableCell classes={classes} style={{ paddingTop: '5px' }}>\n                    <Select\n                        onChange={e => onFilter(e.target.value ? { value: e.target.value } : null)}\n                        name={'status'}\n                        items={statusOption}\n                        id={'status'}\n                        value={filter ? filter.value : ''}\n                    />\n                </MaterialUI.TableCell>\n            )\n        } else {\n            return (\n                <MaterialUI.TableCell style={{ padding: '0px 10px 8px 10px' }} classes={classes}>\n                    <MaterialUI.OutlinedInput\n                        classes={classes}\n                        style={{ width: '100%' }}\n                        value={filter ? filter.value : ''}\n                        labelWidth={0}\n                        onChange={e => onFilter(e.target.value ? { value: e.target.value } : null)}\n                        placeholder=\"\"\n                    />\n                </MaterialUI.TableCell>\n            );\n        }\n    }\n    return null;\n}\n\nconst SortingIcon = ({ direction }: any) =>\n    direction === 'asc' ? (\n        <FontAwesomeIcon style={{ marginLeft: '10px' }} icon={faSortUp} />\n    ) : (\n            <FontAwesomeIcon style={{ marginLeft: '10px' }} icon={faSortDown} />\n        );\n\nconst SortLabel = ({ column, onSort, children, direction }: any) => {\n    if (column.name === 'action_delete') {\n        return null;\n    } else {\n        return (\n            <MaterialUI.TableSortLabel hideSortIcon={true} onClick={onSort} style={{ textOverflow: \"ellipsis\", overflow: \"hidden\" }}>\n                {children}\n                {direction ? (\n                    <SortingIcon direction={direction} />\n                ) : (\n                        <FontAwesomeIcon style={{ marginLeft: '10px' }} icon={faSort} />\n                    )}\n            </MaterialUI.TableSortLabel>\n        );\n    }\n};\n\n\nconst groupIconContentCell = ({ expanded }: any) => {\n    return (\n        <>\n            <div style={{ padding: '8.5px 12px', display: 'table-cell', verticalAlign: 'middle' }} >\n                <FontAwesomeIcon\n                    icon={expanded ? faAngleUp : faAngleDown}\n                    size={'2x'}\n                    color={\"rgba(0, 0, 0, 0.54)\"}\n                />\n            </div>\n        </>\n    )\n}\n\n\n\nexport const ReactTable: React.FC<IReactTableProps> = (props: IReactTableProps): JSX.Element => {\n    const {\n        rows,\n        columns,\n        disableSort,\n        disableFilter,\n        enableGrouping,\n        groupColumnName,\n        viewOnly,\n        message,\n        columnExtensions,\n        sortingStateColumnExtensions,\n        defaultSorting,\n        onDeleteRow,\n        enableSelection,\n        enableSelectAll,\n        onRowClick,\n        totalCount,\n        onPageChange,\n        currentPage,\n        pageSize,\n        onSetPageSize,\n        onCheckRow,\n        onSelectGroup,\n        // groupNameChecked,\n        loading,\n        onSortingChange,\n        enableIntegratedSorting,\n        enableOpenGroupTotalChecked\n    } = props;\n\n    const [selection, setSelection] = React.useState<any>([])\n    const [pageSizes] = React.useState([5, 10, 15]);\n    const [sorting, setSorting] = React.useState([])\n    // const [pageSize, setPageSize] = React.useState(10);\n    // console.log(onCheckRow, onSelectGroup)\n\n    const setSortingMethod = (e: any) => {\n        onSortingChange && onSortingChange(e)\n        setSorting(e);\n    }\n    const handleSelectionChange = (row: any[]) => {\n        if (onRowClick) {\n            if (!enableSelection) {\n                onRowClick(row[0]);\n            }\n        } else {\n            setSelection(row);\n        }\n    }\n\n    const selectCell = ({ row, onToggle }: any) => {\n        return (\n            <MaterialUI.TableCell>\n                <MaterialUI.Checkbox\n                    icon={<FontAwesomeIcon icon={faMinusSquare} />}\n                    checkedIcon={<FontAwesomeIcon icon={faCheckSquare} />}\n                    checked={row.checked}\n                    onClick={(e: any) => {\n                        e.stopPropagation();\n                        onToggle();\n                        onCheckRow && onCheckRow(row);\n                    }}\n                />\n            </MaterialUI.TableCell>\n        )\n    }\n\n\n    const groupContentCell = ({ row }: any) => {\n\n        let isChecked = false;\n        let countChecked = 0;\n        let countItems = 0;\n        rows.map(data => {\n            if (data.name === row.value) {\n                countItems++;\n                if (data.checked) {\n                    isChecked = true;\n                    countChecked++;\n                }\n            }\n        })\n\n        if (!viewOnly) {\n            return (\n                <>\n                    <div style={{ padding: '8.5px 15.5px', display: 'table-cell', verticalAlign: 'middle' }} >\n                        <MaterialUI.Checkbox\n                            icon={<FontAwesomeIcon icon={faMinusSquare} />}\n                            checkedIcon={<FontAwesomeIcon icon={faCheckSquare} />}\n                            checked={isChecked}\n                            onClick={e => {\n                                e.stopPropagation();\n                                onSelectGroup && onSelectGroup(row.value)\n                            }}\n                        />\n                    </div>\n                    <div style={{ padding: '8.5px 2px', display: 'table-cell', verticalAlign: 'middle' }} >\n                        <span>{row.value}</span>\n                    </div>\n                    <div style={{ padding: '8.5px 30px', display: 'table-cell', verticalAlign: 'middle' }} >\n                        <span>{countChecked}/{countItems}</span>\n                    </div>\n                </>\n            )\n        } else if (viewOnly && enableOpenGroupTotalChecked) {\n            return (\n                <>\n                    <div style={{ padding: '8.5px 2px', display: 'table-cell', verticalAlign: 'middle' }} >\n                        <span>{row.value}</span>\n                    </div>\n                    <div style={{ padding: '8.5px 30px', display: 'table-cell', verticalAlign: 'middle' }} >\n                        <span>{countChecked}/{countItems}</span>\n                    </div>\n                </>\n            )\n        } else {\n            return (\n                <div style={{ padding: '8.5px 2px', display: 'table-cell', verticalAlign: 'middle' }} >\n                    <span>{row.value}</span>\n                </div>\n            )\n        }\n\n    }\n\n    const tableCell = ({ value, row, column }: any) => {\n        if (column.name === 'action_delete') {\n            return (\n                <MaterialUI.TableCell style={{ padding: '0px 30px 8px 10px', textAlign: 'right' }}>\n\n                    <span\n                        onClick={() => {\n                            onDeleteRow && onDeleteRow(row)\n                        }}>\n\n                        <FontAwesomeIcon\n                            icon={faMinusCircle}\n                        />\n                    </span>\n\n                </MaterialUI.TableCell>\n            )\n        } else {\n            return (\n                <MaterialUI.TableCell>\n                    {value}\n                </MaterialUI.TableCell>\n            )\n        }\n    }\n\n\n    return (\n        <div style={{ padding: '10px 0' }}>\n            <Paper>\n                <Grid\n                    rows={rows}\n                    columns={columns}\n                >\n                    <PagingState\n                        currentPage={currentPage}\n                        onCurrentPageChange={onPageChange}\n                        pageSize={pageSize}\n                        onPageSizeChange={onSetPageSize}\n                    />\n                    <CustomPaging\n                        totalCount={totalCount}\n                    />\n                    {!disableSort && onSortingChange ? (\n                        <SortingState\n                            defaultSorting={defaultSorting}\n                            columnExtensions={sortingStateColumnExtensions}\n                            sorting={sorting}\n                            onSortingChange={setSortingMethod}\n                        />\n                    ) : !disableSort ? (\n                        <SortingState\n                            defaultSorting={[]}\n                        />\n                    ) : null}\n                    {!viewOnly ? <SelectionState\n                        selection={selection}\n                        onSelectionChange={handleSelectionChange}\n                    /> : null}\n                    {enableGrouping && groupColumnName ? <GroupingState grouping={[{ columnName: groupColumnName }]} /> : null}\n                    {!disableFilter ?\n                        <FilteringState\n                            onFiltersChange={props.onFilterChange}\n                        /> : null}\n                    {/* <IntegratedPaging /> */}\n                    {enableIntegratedSorting ? <IntegratedSorting /> : null}\n                    {enableGrouping ? <IntegratedGrouping /> : null}\n                    <Table\n                        columnExtensions={columnExtensions}\n                        messages={{ noData: message }}\n                        cellComponent={tableCell}\n                    />\n                    <TableHeaderRow\n                        showSortingControls={!disableSort}\n                        sortLabelComponent={SortLabel}\n                    />\n                    {/* <TableFixedColumns /> */}\n                    <PagingPanel\n                        pageSizes={enableGrouping ? [30, 40, 50] : pageSizes}\n                    />\n                    {!viewOnly ?\n                        <TableSelection\n                            highlightRow\n                            selectByRowClick\n                            showSelectAll={enableSelectAll ? true : undefined}\n                            cellComponent={!loading ? selectCell : selectCell}\n                            showSelectionColumn={enableSelection}\n                        /> : null}\n\n                    {enableGrouping ?\n                        <TableGroupRow\n                            contentComponent={groupContentCell}\n                            iconComponent={groupIconContentCell}\n                        ></TableGroupRow> : null}\n                    {!disableFilter ? <TableFilterRow cellComponent={FilterCell} /> : null}\n                </Grid>\n                {\n                    loading &&\n                    <Loader />\n                }\n            </Paper>\n        </div>\n    )\n}\n\nReactTable.defaultProps = defaultProps;","export const ActionConsts = {\n\tRoles: {\n\t\tResetReducer: 'Roles_ResetReducer',\n\t\tSetReducer: 'Roles_SetReducer',\n\t},\n};\n","//#region Global Imports\n// import { Dispatch } from 'redux';\n//#endregion Global Imports\n\n//#region Local Imports\nimport { ActionConsts } from './ActionConsts';\n// import { PlanetaryService } from 'Components/Services';\n//#endregion Local Imports\n\n//#region Interface Imports\n//#endregion Interface Imports\n\nexport const RolesActions = {\n\tMap: (payload: []) => ({\n\t\tpayload,\n\t\ttype: ActionConsts.Roles.SetReducer,\n\t}),\n\n\tReset: () => ({\n\t\ttype: ActionConsts.Roles.ResetReducer,\n\t}),\n\n\t// GetApod: (payload) => async (dispatch: Dispatch) => {\n\n\t// },\n};\n","import * as React from 'react';\nimport {\n    Grid,\n    InputLabel,\n    Typography,\n    Link\n} from '@material-ui/core';\nimport moment from 'moment';\n\ninterface IViewPoliciesProps {\n    classes?: any,\n    rows: any,\n    onNavigateSideMenu?: (group) => void,\n}\n\nexport const ViewPolicies: React.FC<IViewPoliciesProps> = (props: IViewPoliciesProps): JSX.Element => {\n    const {\n        classes,\n        rows,\n        onNavigateSideMenu,\n    } = props;\n\n    return (\n        <>\n            <Grid item xs={4}>\n                <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">ROLE ID</InputLabel>\n                <Typography><b>{rows && rows.role_id ? rows.role_id : '-'}</b></Typography>\n            </Grid>\n            <Grid item xs={4}>\n                <InputLabel className={classes.inputLabel} htmlFor=\"primary_module\">MODULE</InputLabel>\n                <Typography><b>{rows && rows.module ? rows.module : '-'}</b></Typography>\n            </Grid>\n            <Grid item xs={4}>\n                <InputLabel className={classes.inputLabel} htmlFor=\"description\">DESCRIPTION</InputLabel>\n                <Typography><b>{rows && rows.description ? rows.description : '-'}</b></Typography>\n            </Grid>\n            <Grid item xs={4}>\n                <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">ROLE NAME</InputLabel>\n                <Typography><b>{rows && rows.name ? rows.name : '-'}</b></Typography>\n            </Grid>\n            <Grid item xs={4}>\n                <InputLabel className={classes.inputLabel} htmlFor=\"status\">STATUS</InputLabel>\n                <Typography><b>{rows && rows.status ? rows.status : '-'}</b></Typography>\n            </Grid>\n            <Grid item xs={4}>\n            </Grid>\n            <Grid item xs={4}>\n                <InputLabel className={classes.inputLabel} htmlFor=\"primary_module\">EFFECTIVITY DATE</InputLabel>\n                <Typography><b>{rows && rows.effectivity_date ? moment(rows.effectivity_date).format('MMMM DD, YYYY') : '-'}</b></Typography>\n            </Grid>\n            <Grid item xs={4}>\n                <InputLabel className={classes.inputLabel} htmlFor=\"primary_module\">EXPIRY DATE</InputLabel>\n                <Typography><b>{rows && rows.expiry_date ? moment(rows.expiry_date).format('MMMM DD, YYYY') : '-'}</b></Typography>\n            </Grid>\n            <Grid item xs={4}>\n                <InputLabel className={classes.inputLabel} htmlFor=\"description\">ATTACHED GROUP/S</InputLabel>\n                <Typography>\n                    {\n                        rows && rows.associate_groups ? rows.associate_groups.length > 0 && rows.associate_groups.map((groups) => (\n                            <b>{groups}</b>\n                        )) : '-'\n                    }\n                </Typography>\n                <Link\n                    onClick={() => {\n                        console.log(onNavigateSideMenu)\n                        // onNavigateSideMenu && onNavigateSideMenu('Groups And Users')\n                    }}\n                >+ Add Group</Link>\n            </Grid>\n            <Grid item xs={4}>\n                <InputLabel className={classes.inputLabel} htmlFor=\"primary_module\">LAST UPDATE</InputLabel>\n                <Typography><b>{rows && rows.date_last_update ? moment(rows.date_last_update).format('MMMM DD, YYYY') : '-'}</b></Typography>\n            </Grid>\n        </>\n    )\n}","import * as React from 'react';\nimport {\n    Grid,\n    InputLabel,\n    Typography,\n    Checkbox\n} from '@material-ui/core';\nimport moment from 'moment';\nimport { BasicTextField } from 'Components/UI';\nimport { KeyboardDatePicker } from '@material-ui/pickers';\n\ninterface IEditPoliciesProps {\n    classes?: any,\n    rows: any,\n    dataChanges: (data) => void,\n}\n\nexport const EditPolicies: React.FC<IEditPoliciesProps> = (props: IEditPoliciesProps): JSX.Element => {\n    const {\n        rows,\n        classes,\n        dataChanges\n    } = props;\n\n    const [editData, setEditData] = React.useState<any>({\n        description: null,\n        isProcessMaker: null,\n        effectivityDate: rows.effectivity_date,\n        expiryDate: '',\n    })\n\n    React.useEffect(() => {\n        if (rows.expiry_date && rows.expiry_date !== '') {\n            setEditData({\n                ...editData,\n                expiryDate: rows.expiry_date\n            })\n        }\n    }, [])\n\n\n    return (\n        <>\n            <Grid item xs={4}>\n                <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">MODULE</InputLabel>\n                <Typography><b>{rows.module}</b></Typography>\n                {/* <Link onClick={() => { setIsModuleModalOpen(true) }}>Change Module</Link> */}\n            </Grid>\n            <Grid item xs={4}>\n                <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">ROLE ID</InputLabel>\n                <Typography><b>{rows.role_id}</b></Typography>\n            </Grid>\n            <Grid item xs={4}>\n                <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">DESCRIPTION</InputLabel>\n                <BasicTextField\n                    value={editData.description !== null ? editData.description : rows.description}\n                    onChange={(e: any) => {\n                        setEditData({\n                            ...editData,\n                            description: e.target.value\n                        })\n                    }}\n                    onBlur={(e: any) => {\n                        dataChanges({\n                            ...editData,\n                            description: e.target.value\n                        })\n                    }}\n                    disabled={rows.is_processMaker ? true : false}\n                ></BasicTextField>\n            </Grid>\n            <Grid item xs={4}>\n                <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">ROLE NAME</InputLabel>\n                <Typography><b>{rows && rows.name ? rows.name : '-'}</b></Typography>\n            </Grid>\n            <Grid item xs={4}>\n                <InputLabel className={classes.inputLabel}>IS A PROCESSMAKER PROCESS MAKER ROLE</InputLabel>\n                <Checkbox\n                    checked={editData.isProcessMaker !== null ? editData.isProcessMaker : rows.is_processMaker}\n                    onChange={(e: any) => {\n                        setEditData({\n                            ...editData,\n                            isProcessMaker: e.target.checked\n                        })\n                        dataChanges({\n                            ...editData,\n                            isProcessMaker: e.target.checked\n                        })\n                    }}\n                    disabled={true}\n                ></Checkbox>\n            </Grid>\n            <Grid item xs={4}>\n                <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">STATUS</InputLabel>\n                <Typography><b>{rows && rows.status}</b></Typography>\n            </Grid>\n            <Grid item xs={6}>\n                <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">EFFECTIVITY DATE</InputLabel>\n                <KeyboardDatePicker\n                    inputProps={{\n                        disabled: true\n                    }}\n                    maxDate={moment(editData.expiryDate).subtract(1, 'days').startOf('day')}\n                    maxDateMessage={\"Effectivity date cannot be higher or equal than expiry date.\"}\n                    value={editData.effectivityDate}\n                    format={'MMM DD, YYYY'}\n                    style={{ width: \"100%\", marginTop: 10 }}\n                    onChange={(e: any) => {\n                        setEditData({\n                            ...editData,\n                            effectivityDate: e\n                        })\n                        dataChanges({\n                            ...editData,\n                            effectivityDate: e\n                        })\n                    }}\n                    clearable\n                    disabled={rows.is_processMaker ? true : false}\n                    inputVariant={'outlined'}\n                />\n            </Grid>\n            <Grid item xs={6}>\n                <InputLabel className={classes.inputLabel} htmlFor=\"role_id\">EXPIRY DATE (If applicable)</InputLabel>\n                <KeyboardDatePicker\n                    inputProps={{\n                        disabled: true\n                    }}\n                    clearable\n                    minDate={moment(editData.effectivityDate).add(1, 'days').startOf('day')}\n                    minDateMessage={\"Expiry date cannot be lower or equal than effectivity date.\"}\n                    value={editData.expiryDate}\n                    style={{ width: \"100%\", marginTop: 10 }}\n                    invalidDateMessage=\"\"\n                    format=\"MMMM DD, YYYY\"\n                    onChange={(e: any) => {\n                        setEditData({\n                            ...editData,\n                            expiryDate: e,\n                        })\n                        dataChanges({\n                            ...editData,\n                            expiryDate: e,\n                        })\n                    }}\n                    disabled={rows.is_processMaker ? true : false}\n                    inputVariant={'outlined'}\n                />\n            </Grid>\n\n\n        </>\n    )\n}\n","import * as React from 'react';\nimport {\n    Grid,\n    Button,\n} from '@material-ui/core';\nimport { ReactTable } from 'Components/UI/TableComponent/ReactTable';\nimport { ReactSearch } from 'Components/UI/SearchBar/ReactSearch';\nimport { BasicSelect } from 'Components/UI';\nimport { ModalComponent } from 'Components/UI/ModalComponent/ModalComponent';\n// import BasicSelect from 'Components/UI/BasicSelect'\nimport moment from 'moment';\nimport { RolesRbacData } from '../IRolesPage';\nimport { ViewPolicies } from './ViewPolicies';\nimport { EditPolicies } from './EditPolicies';\n\nexport interface IPoliciesProps {\n    rows?: any,\n    viewOnly: boolean,\n    classes: any,\n    mode?: 'edit' | 'view' | 'add' | string,\n    moduleName?: string,\n    rbacList: any,\n    loadRbacList: any,\n    isEdited: boolean,\n    roleId?: string,\n    rbacState: any,\n    onPageChange: (page) => void,\n    onFilterChange: (filter) => void,\n    onSortChange: (sort) => void,\n    onPageSizeChange: (size) => void,\n    onSearch: (search) => void,\n    onChangeModuleName?: (name) => void,\n    onUpdateChange: (data) => void,\n    onNavigateSideMenu?: (name) => void,\n}\n\nexport const Policies: React.FC<IPoliciesProps> = (props: IPoliciesProps): JSX.Element => {\n    const {\n        rows,\n        classes,\n        mode,\n        rbacList,\n        rbacState,\n        onUpdateChange,\n        onNavigateSideMenu,\n        onPageChange,\n        onFilterChange,\n        onSortChange,\n        onPageSizeChange,\n        onSearch,\n        loadRbacList\n    } = props;\n    const [isAddedModalRole, setIsAddedModalRole] = React.useState(false)\n    const [moduleValue, setModuleValue] = React.useState(0);\n    const [isModuleModalOpen, setIsModuleModalOpen] = React.useState(false);\n    const [moduleLabel, setModuleLabel] = React.useState<any>(null);\n    const [isModalConfirmChangeModule, setIsModalConfirmChangeModule] = React.useState(false)\n    const [newRbacList, setNewRbacList] = React.useState(rbacList);\n    const [loading, setLoading] = React.useState(false);\n    const [defaultFilters, setDefaultFilters] = React.useState([]);\n    const [isModalDeleteSuccessOpen, setIsModalDeleteSuccessOpen] = React.useState(false)\n    const [isModalCannotEditOpen, setIsModalCannotEditOpen] = React.useState(false);\n    const [isEdited, setIsEdited] = React.useState(false);\n    const [checkedList, setCheckedList] = React.useState<any>([]);\n\n    const [editData, setEditData] = React.useState<any>({\n        description: null,\n        isProcessMaker: null,\n        effectivityDate: null,\n        expiryDate: null,\n    });\n    \n    React.useEffect(() => {\n        setCheckedList(loadRbacList)\n    })\n\n    const moduleItems = [\n        {\n            name: 'User Management',\n            value: '0'\n        },\n        {\n            name: 'Membership',\n            value: '1'\n        },\n        {\n            name: 'Underwriting',\n            value: '2'\n        },\n        {\n            name: 'Customer Care',\n            value: '3'\n        },\n        {\n            name: 'Claims',\n            value: '4',\n        },\n    ]\n\n    const columns: any = [\n        {\n            name: 'operation',\n            title: 'Object and Operations',\n        },\n        {\n            name: 'policy',\n            title: 'Policies',\n        },\n        {\n            name: 'policy_id',\n            title: 'Policy ID',\n        },\n        {\n            name: 'name',\n            title: 'Name'\n        }\n    ]\n\n\n    const handleCannotEditRoleModalClose = () => {\n        setIsModalCannotEditOpen(false)\n    }\n\n    const handleDeleteSuccessRoleModalClose = () => {\n        setIsModalDeleteSuccessOpen(false)\n    }\n\n    const handleRemoveRoleModalClose = () => {\n\n    }\n\n    const handleContinueRole = () => {\n        let moduleName = moduleItems[Number(moduleValue)].name;\n        setIsModalConfirmChangeModule(false);\n        setModuleLabel(moduleName);\n        console.log(moduleLabel)\n    }\n\n    const handleOnCheckRow = (row) => {\n        setLoading(true);\n\n        let rbac = rbacList;\n        let checklist = checkedList;\n        if (newRbacList.length === 0) {\n            setNewRbacList(rbacList);\n        } else {\n            rbac = newRbacList;\n        }\n        if (rbac.length > 0) {\n            rbac.map((data: any) => {\n                if (data._id === row._id) {\n                   \n                    if (data.checked) {\n                        checklist.push(data);\n                    } else {\n                        checklist.filter(list => {\n                            return row._id !== list._id\n                        })\n                    }\n\n                    data['checked'] = !data['checked'];\n                }\n            })\n\n            setCheckedList(checklist)\n            setNewRbacList(rbac);\n        }\n\n        handleUpdateCheck(editData)\n        setLoading(false)\n    }\n\n    const handleOnCheckGroup = (group) => {\n        setLoading(true);\n        let rbac = rbacList;\n        let countChecked = 0;\n        let checklist = checkedList;\n\n        if (newRbacList.length === 0) {\n            setNewRbacList(rbacList)\n        }\n        if (rbac.length > 0) {\n            rbac.map((data: any) => {\n                if (data.name == group && data.checked === true) {\n                    countChecked++;\n                }\n            })\n        }\n        if (countChecked > 0) {\n            rbac.map((data: any) => {\n                if (data.name == group) {\n                    data['checked'] = false;\n                }\n            })\n        } else {\n            rbac.map((data: any) => {\n                if (data.name == group) {\n                    data['checked'] = true;\n                    checklist.push(data)\n                }\n            })\n        }\n        setCheckedList(checklist)\n        setNewRbacList(rbac);\n        setTimeout(() => {\n            setLoading(false);\n            handleUpdateCheck(editData)\n        }, 500)\n    }\n\n    const handleUpdateCheck = (_data: any) => {\n        console.log(checkedList);\n\n        var rbac: any[] = [];\n        const _rbacList = checkedList.length > 0 ? checkedList : rbacList;\n\n        rbac = _rbacList.filter((data: any) => {\n            return data.checked;\n        })\n\n\n\n        var data: RolesRbacData = {\n            module: rows.module,\n            name: rows.name,\n            role_id: rows.role_id,\n            effectivity_date: _data.effectivityDate ? moment(_data.effectivityDate).toISOString() : rows.effectivity_date,\n            description: _data.description !== null ? _data.description : rows.description,\n            status: 'active',\n            date_last_update: moment().toISOString(),\n            is_processmaker: _data.isProcessMaker ? _data.isProcessMaker : rows.is_processMaker ? rows.is_processmaker : false,\n            rbac: rbac.length > 0 ? rbac : rows.rbac,\n        }\n\n        if (mode === 'edit') {\n            data['_id'] = rows._id\n            data['status'] = rows.status\n        }\n\n        if (_data.expiryDate !== '' || null) {\n            data['expiry_date'] = moment(_data.expiryDate).toISOString();\n        }\n\n        onUpdateChange(data);\n        setIsEdited(true);\n        console.log(isEdited);\n    }\n\n    const handleOnFilterChange = (filter) => {\n        setDefaultFilters(filter);\n        onFilterChange(filter)\n    }\n\n    return (\n        <>\n            <Grid container xs={12} spacing={4}>\n                {\n                    mode === 'view' ? (\n                        <ViewPolicies\n                            rows={rows}\n                            onNavigateSideMenu={(group: string) => {\n                                onNavigateSideMenu && onNavigateSideMenu(group)\n                            }}\n                            classes={classes}\n                        />\n                    ) : mode === 'edit' ? (\n                        <EditPolicies\n                            rows={rows}\n                            classes={classes}\n                            dataChanges={(data: any) => {\n                                setEditData(data);\n                                handleUpdateCheck(data);\n                            }}\n                        />\n                    ) : null\n                }\n                <Grid item xs={12}>\n\n                    <ReactSearch\n                        onSearch={onSearch}\n                        onChange={onSearch}\n                        placeholder={'Search policies'}\n                    />\n                    {\n                        <ReactTable\n                            rows={rbacList}\n                            columns={columns}\n                            enableGrouping={true}\n                            groupColumnName={'name'}\n                            viewOnly={mode === 'view' ? true : false}\n                            enableOpenGroupTotalChecked={mode === 'view' ? true : false}\n                            message={'There are no policies to show yet.'}\n                            enableSelection={mode !== 'view' ? true : false}\n                            loading={loading}\n                            onCheckRow={(row) => {\n                                handleOnCheckRow(row)\n                            }}\n                            currentPage={rbacState.currentPage}\n                            pageSize={rbacState.limit}\n                            defaultFilters={defaultFilters}\n                            onFilterChange={handleOnFilterChange}\n                            onSortingChange={onSortChange}\n                            onSetPageSize={onPageSizeChange}\n                            onPageChange={onPageChange}\n                            totalCount={rbacState.count ? rbacState.count : 0}\n                            onSelectGroup={(group) => {\n                                handleOnCheckGroup(group)\n                            }}\n                        />\n                    }\n                </Grid>\n            </Grid>\n            <ModalComponent\n                isModalOpen={isAddedModalRole}\n                onClose={handleRemoveRoleModalClose}\n                message={'New Role has been added successfully.'}\n                title={'Added New Role'}\n                buttons={\n                    <Grid container justify=\"center\" alignItems=\"center\">\n                        <Grid item xs={6}>\n                            <Button onClick={() => { setIsAddedModalRole(false) }} className={classes.button} variant={'contained'} color={'primary'}>Okay</Button>\n                        </Grid>\n                    </Grid>\n                }\n            />\n            <ModalComponent\n                isModalOpen={isModuleModalOpen}\n                onClose={() => {\n                    setIsModuleModalOpen(false)\n                }}\n                message={'Select a module for the role you will create:'}\n                title={'Choose a Module'}\n                buttons={\n                    <Grid container justify=\"center\" alignItems=\"center\" style={{ textAlign: 'center' }}>\n                        <Grid item xs={6}>\n                            <Button\n                                onClick={() => {\n                                    setIsModuleModalOpen(false)\n                                }}\n                                variant={'outlined'}\n                                color={'secondary'}\n                                className={classes.button}\n                            >Cancel</Button>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Button variant={'contained'} color={'primary'}\n                                className={classes.button}\n                                onClick={() => {\n                                    setIsModalConfirmChangeModule(true)\n                                    setIsModuleModalOpen(false)\n                                }}>Continue</Button>\n                        </Grid>\n                    </Grid>\n                }\n            >\n                <div style={{ width: '90%', margin: 'auto' }}>\n                    <BasicSelect\n                        menuItems={moduleItems}\n                        width={'100%'}\n                        value={moduleValue}\n                        onChange={(e: any) => {\n                            setModuleValue(e.target.value)\n                        }}\n                    />\n                </div>\n            </ModalComponent>\n            <ModalComponent\n                isModalOpen={isModalConfirmChangeModule}\n                onClose={() => {\n                    setIsModalConfirmChangeModule(false);\n                }}\n                message={'All progress made will be lost. Continue to change the module?'}\n                title={'Confirm Change Module'}\n                buttons={\n                    <Grid container justify=\"center\" alignItems=\"center\">\n                        <Grid item xs={6}>\n                            <Button onClick={() => { setIsModalConfirmChangeModule(false) }} className={classes.button} variant={'outlined'} color={'secondary'}>Cancel</Button>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Button className={classes.button} variant={'contained'} color={'primary'} onClick={() => handleContinueRole()}>Continue</Button>\n                        </Grid>\n                    </Grid>\n                }\n            />\n\n            <ModalComponent\n                isModalOpen={isModalDeleteSuccessOpen}\n                onClose={handleDeleteSuccessRoleModalClose}\n                message={'New role has been deleted.'}\n                title={'Delete Success'}\n                buttons={\n                    <Grid container justify=\"center\" alignItems=\"center\">\n                        <Grid item >\n                            <Button\n                                onClick={() => {\n                                    setIsModalDeleteSuccessOpen(false)\n                                }}\n                                className={classes.button}\n                                variant={'contained'}\n                                color={'primary'}>\n                                Okay\n                            </Button>\n                        </Grid>\n                    </Grid>\n                }\n            />\n\n\n            <ModalComponent\n                isModalOpen={isModalCannotEditOpen}\n                onClose={handleCannotEditRoleModalClose}\n                message={'You do not have an assigned role to your account to perform this action.'}\n                title={'Cannot Edit Role'}\n                buttons={\n                    <Grid container justify=\"center\" alignItems=\"center\">\n                        <Grid item>\n                            <Button\n                                onClick={() => {\n                                    setIsModalCannotEditOpen(false)\n                                }}\n                                className={classes.button}\n                                variant={'contained'}\n                                color={'primary'}>\n                                Okay\n                            </Button>\n                        </Grid>\n                    </Grid>\n                }\n            />\n        </>\n    )\n}","import * as React from 'react';\nimport { Grid } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n    faSearch,\n} from '@fortawesome/free-solid-svg-icons';\nimport { getRolesUsersLists } from 'Pages/API/Calls/Roles';\n\nexport interface IAPICallSearchProps {\n    fields: any;\n    usersWithRole: any[];\n    selectedUsers: any;\n    placeholder?: string;\n    searchLabel?: string;\n    onSearch: (event) => void;\n    onChange?: (value) => void;\n}\n\nconst useStyles = makeStyles(theme => ({\n    gridContainerNoPadding: {\n        padding: theme.spacing(1),\n    },\n    searchIcon: {\n        position: \"absolute\",\n        left: \"15px\",\n        top: \"50%\",\n        transform: \"translateY(-50%)\",\n        fontSize: \"20px\",\n        color: \"#b0b0b0\"\n    },\n    searchContainer: {\n        borderRadius: \"3px\",\n        position: \"relative\",\n    },\n    searchBox: {\n        display: \"block\",\n        padding: \"12px 12px 12px 40px\",\n        borderRadius: \"3px\",\n        fontSize: \"14px\",\n        width: \"100%\",\n        border: '1px solid #c4c4c4',\n        outline: 'none',\n        overflow: \"hidden\",\n        '&:hover': {\n            border: \"1px solid rgb(39, 46, 76)\",\n        },\n        '&:focus': {\n            outline: \"2px solid #3AB77D\"\n        }\n    },\n    searchLabel: {\n        fontSize: 14,\n        display: 'block',\n        padding: '5px 0',\n    },\n    comboBoxContainer: {\n        opacity: 100,\n        position: 'absolute',\n        top: '100%',\n        left: '0%',\n        width: '100%',\n        backgroundColor: '#fff',\n        borderRadius: '2px',\n        border: '1px solid #c4c4c4',\n        padding: '10px',\n        maxHeight: 300,\n        overflowY: 'auto',\n        zIndex: 1000\n    },\n    list: {\n        fontSize: 12,\n        padding: '5px',\n        '&:hover': {\n            backgroundColor: '#dddfe3',\n        }\n    }\n}));\n\n\nexport const APICallSearch: React.FC<IAPICallSearchProps> = (props: IAPICallSearchProps): JSX.Element => {\n    const {\n        placeholder,\n        searchLabel,\n        onSearch,\n        onChange,\n    } = props;\n\n    const classes = useStyles();\n    const [newComboList, setNewComboList] = React.useState<any>(null);\n    const [searchValue, setSearchValue] = React.useState<any>(null);\n    const [typingTimeout, setTypingTimeout] = React.useState<any>(0);\n    const [isLoadingChoices, setIsLoadingChoices] = React.useState<boolean>(false);\n    const [ref, setRef] = React.useState<any>();\n    const [typing, setTyping] = React.useState<boolean>(false);\n\n    React.useEffect(() => {\n        setRef(React.createRef());\n    }, []);\n\n    const removeDuplicateRoles = (array: any[]) => {\n        let a: any[] = []\n        array.map(x => {\n            if (!a.some(b => b.role_id === x.role_id)) {\n                a.push(x)\n            }\n        })\n        return a\n    };\n\n    const getChoices = () => {\n\n        const value = searchValue;\n        console.log('SEARCH VAL', value);\n        setIsLoadingChoices(true);\n        const selectedUsernames = props.selectedUsers.map(item => { return item.username });\n        let usernames: any[] = selectedUsernames;\n        if (props.usersWithRole && props.usersWithRole.length > 0) {\n            const usernamesWithRole = props.usersWithRole.map(item => { return item.username });\n            usernames = [...usernames, ...usernamesWithRole];\n        }\n        getRolesUsersLists({ fields: props.fields, where: { username: { nin: usernames } } }, value).then(resp => {\n            const resp_body = resp.body.map(item => {\n                item.roles = removeDuplicateRoles(item.roles);\n                return {\n                    ...item, name: item.full_name ? item.full_name : item.first_name + \" \" + item.middle_name + \" \" + item.last_name,\n                }\n            });\n            setNewComboList(resp_body)\n            setIsLoadingChoices(false);\n        }).catch(e => {\n            setNewComboList([])\n            setIsLoadingChoices(false);\n            console.log(e);\n        })\n    }\n\n\n    const handleKeyPress = (event) => {\n        let value = event.target.value;\n        onChange && onChange(value)\n\n\n        if (!value) setNewComboList(null);\n    }\n\n    const searchCombo = (list) => {\n        ref.current.focus();\n        // setSearchValue(list);\n        setNewComboList(null);\n        onSearch(list);\n        setSearchValue({ name: '' });\n        setNewComboList(null);\n    }\n\n    React.useEffect(() => {\n        if (!searchValue) return;\n        setTyping(true);\n        if (typingTimeout) {\n            clearTimeout(typingTimeout);\n        }\n        setTypingTimeout(setTimeout(function () {\n            if (searchValue.length >= 3) {\n                console.log('timeout search');\n                setTyping(false);\n                getChoices();\n            }\n\n        }, 2000));\n    }, [searchValue])\n\n\n    return (\n        <>\n            <Grid container xs={12} style={{ padding: \"10px 0\" }}>\n                <Grid item xs={12}>\n                    {searchLabel ? <label className={classes.searchLabel}>{searchLabel}</label> : null}\n                </Grid>\n                <Grid item xs={12} className={classes.searchContainer} >\n                    <FontAwesomeIcon icon={faSearch} className={classes.searchIcon} />\n                    <input\n                        ref={ref}\n                        type={'search'}\n                        placeholder={placeholder}\n                        value={searchValue && searchValue.name !== undefined ? searchValue.name : null}\n                        onChange={(event) => {\n                            handleKeyPress(event)\n                            setSearchValue(event.target.value)\n                        }}\n                        onKeyUp={(event) => {\n                            let code = event.keyCode || event.which\n                            if (code == 13 && typing && searchValue && searchValue.length >= 3) {\n                                console.log('enter search');\n                                if (typingTimeout) {\n                                    clearTimeout(typingTimeout);\n                                }\n                                getChoices();\n                                setTyping(false);\n\n                            }\n                        }}\n                        className={classes.searchBox}\n                    />\n                    {isLoadingChoices ? (\n                        <div className={classes.comboBoxContainer}>Loading...</div>\n                    ) : newComboList && newComboList.length > 0 ?\n                            <div className={classes.comboBoxContainer}>\n                                <ul style={{ padding: 0, margin: 0, listStyle: 'none' }}>\n                                    {\n                                        newComboList && newComboList.map(list => (\n                                            <li className={classes.list} onClick={() => searchCombo(list)}>{list && list.name ? list.name : null}</li>\n                                        ))\n                                    }\n                                </ul>\n                            </div>\n                            : newComboList && newComboList.length === 0 ? (\n                                <div className={classes.comboBoxContainer}>No Results</div>\n                            ) : null}\n                </Grid>\n            </Grid>\n        </>\n    )\n}","import * as React from 'react';\nimport { APICallSearch } from 'Components/UI/SearchBar/APICallSearch';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons';\n// import { InputLabel } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button, Grid } from '@material-ui/core';\nimport { getRolesUsersLists } from 'Pages/API/Calls/Roles';\n\n\nconst useStyles = makeStyles(() => ({\n    selectedItems: {\n        borderRadius: 20,\n        fontSize: 13,\n        backgroundColor: '#d1d4db',\n        padding: '5px 10px'\n    },\n    xIcon: {\n        fontSize: 16\n    }\n}));\nconsole.log(useStyles);\n\ninterface IAddUserRoleBodyProps {\n    apiCallFields: any;\n\n    selectedUsers: any[];\n    setSelectedUsers: (data: any) => void;\n\n    refreshUsersWithRole: boolean;\n    usersWithRole: any[];\n    setUsersWithRole: (data: any) => void;\n\n    roleId: string;\n    onClose: () => void;\n    onSave: (items) => void;\n}\n\ninterface IAddUserRoleBodyState {\n    selectedUsers: any[];\n    filter: any;\n}\n\nexport class AddUserRoleBody extends React.Component<IAddUserRoleBodyProps, IAddUserRoleBodyState> {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedUsers: [],\n            filter: {\n                fields: this.props.apiCallFields,\n                where: {\n                    and: [{}],\n                    or: [\n                        { 'roles.role_id': this.props.roleId }\n                    ]\n                }\n            },\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.selectedUsers !== this.props.selectedUsers)\n            this.setState({ selectedUsers: this.props.selectedUsers });\n        if (prevProps.refreshUsersWithRole !== this.props.refreshUsersWithRole)\n            this.initializeData();\n    }\n\n    componentDidMount() {\n        this.initializeData();\n    }\n\n    removeDuplicates(array: any[]) {\n        let a: any[] = []\n        array.map(x => {\n            if (!a.some(b => b.role_id === x.role_id)) {\n                a.push(x)\n            }\n        })\n        return a\n    };\n\n    initializeData = () => {\n        getRolesUsersLists(this.state.filter, '').then(resp => {\n            let resp_body = resp.body.map(item => {\n                item.roles = this.removeDuplicates(item.roles);\n                return {\n                    ...item, name: item.full_name ? item.full_name : item.first_name + \" \" + item.middle_name + \" \" + item.last_name,\n                }\n            });\n            // this.props.setSelectedUsers(resp_body);\n            this.props.setUsersWithRole(resp_body);\n        }).catch(e => {\n            // this.props.setSelectedUsers([]);\n            console.log(e);\n        });\n    }\n\n\n    handleOnSearch = (list) => {\n        if (!list || typeof list !== 'object' || (list && !list.name) || (list && !list.username)) return;\n        let arr = this.props.selectedUsers;\n        arr.push(list);\n        this.props.setSelectedUsers(arr);\n        console.log(arr);\n    }\n\n    handleRemoveItem = (index) => {\n        let arr = this.props.selectedUsers;\n        arr.splice(index, 1);\n        this.props.setSelectedUsers(arr);\n    }\n\n    handleOnSaveItems = () => {\n        this.props.onSave(this.props.selectedUsers);\n    }\n\n    public render(): JSX.Element {\n        const classes = {\n            buttonsContainer: {\n                padding: '1em',\n            },\n            selectedContainer: {\n                padding: '3em 0 2em'\n            },\n            selectedItems: {\n                borderRadius: 20,\n                fontSize: 13,\n                backgroundColor: '#d1d4db',\n                padding: '5px 10px',\n                margin: '5px',\n                display: 'inline-block',\n            },\n            selectedText: {\n                paddingRight: '5px'\n            },\n            saveButton: {\n                width: '135px',\n                fontSize: '14px',\n                color: '#fff',\n            },\n            cancelButton: {\n                width: '135px',\n                fontSize: '14px',\n            }\n        };\n\n        return (\n            <>\n                <div style={{ minHeight: 400, minWidth: 400 }}>\n                    <APICallSearch\n                        placeholder={'Please enter at least 3 characters to search.'}\n                        fields={this.props.apiCallFields}\n                        searchLabel={'Search user account'}\n                        onSearch={this.handleOnSearch}\n                        selectedUsers={this.state.selectedUsers}\n                        usersWithRole={this.props.usersWithRole}\n                    />\n                    <div style={classes.selectedContainer}>\n                        <div>\n                            {this.state.selectedUsers.length > 0 ? <label>Selected Users</label> : null}\n                        </div>\n                        {this.state.selectedUsers.map((item, index) =>\n                            <div style={classes.selectedItems}>\n                                <span style={classes.selectedText}>{item.name}</span>\n                                <span onClick={() => this.handleRemoveItem(index)}>\n                                    <FontAwesomeIcon icon={faTimesCircle} />\n                                </span>\n                            </div>\n                        )\n                        }\n                    </div>\n                </div>\n                <Grid container spacing={3} justify=\"center\" alignItems=\"baseline\">\n                    <Grid item xs={4} style={{ paddingRight: 20 }}>\n                        <Button style={classes.cancelButton} variant=\"outlined\" color=\"secondary\" onClick={() => this.props.onClose()}>Cancel</Button>\n                    </Grid>\n                    <Grid item xs={4} style={{ paddingLeft: 20 }}>\n                        <Button disabled={this.state.selectedUsers.length < 1 ? true : false} style={classes.saveButton} variant=\"contained\" color=\"primary\" onClick={() => this.handleOnSaveItems()}>Save</Button>\n                    </Grid>\n                </Grid>\n            </>\n        )\n    }\n\n}\n// export const AddRoleBody : React.FC<IAddRoleBodyProps> = (props: IAddRoleBodyProps): JSX.Element => {\n\n// }","import * as React from 'react';\nimport { SearchUserGroup } from 'Components/UI/SearchBar/SearchUserGroup';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons';\n// import { InputLabel } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button, Grid } from '@material-ui/core';\nimport { getAllGroups } from 'Pages/API/Calls/Roles';\n\nconst useStyles = makeStyles(() => ({\n    selectedItems: {\n        borderRadius: 20,\n        fontSize: 13,\n        backgroundColor: '#d1d4db',\n        padding: '5px 10px'\n    },\n    xIcon: {\n        fontSize: 16\n    }\n}));\nconsole.log(useStyles);\n\ninterface IAddGroupRoleBodyProps {\n    onClose: () => void;\n    onSave: (items) => void;\n}\n\ninterface IAddGroupRoleBodyState {\n    selectedItems: any;\n    comboArray: any[];\n}\n\n\nexport class AddGroupRoleBody extends React.Component<IAddGroupRoleBodyProps, IAddGroupRoleBodyState> {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedItems: [],\n            comboArray: [],\n        }\n    }\n\n    componentDidMount() {\n        getAllGroups().then(res => {\n            console.log(res)\n            let data = {\n                body: res.body,\n                id: \"_id\",\n                group_id: \"group_id\",\n                name: \"name\",\n                description: \"description\",\n                user_count: \"user_count\",\n                effectivity_date: \"effectivity_date\",\n                date_updated: \"date_updated\",\n                is_processmaker: \"is_processmaker\",\n                pmaker_uid: \"pmaker_uid\",\n                amount_limit: \"amount_limit\",\n                roles: \"roles\",\n                status: \"status\",\n                department: \"department\",\n                expiry_date: \"expiry_date\",\n                rank: \"rank\",\n                reports_to: \"reports_to\",\n                meta_data: \"meta_data\"\n            }\n            let newChoices: any = [];\n\n            if (data.body && data.body.length > 0) {\n                data.body.map(c => {\n                    let beauty = {\n                        // value: c,\n                        id: c[data.id],\n                        group_id: c[data.group_id],\n                        name: c[data.name],\n                        description: c[data.description],\n                        user_count: c[data.user_count],\n                        effectivity_date: c[data.effectivity_date],\n                        date_updated: c[data.date_updated],\n                        is_processmaker: c[data.is_processmaker],\n                        pmaker_uid: c[data.pmaker_uid],\n                        amount_limit: c[data.amount_limit],\n                        roles: c[data.roles],\n                        status: c[data.status],\n                        department: c[data.department],\n                        expiry_date: c[data.expiry_date] ? c[data.expiry_date] : undefined,\n                        rank: c[data.rank] ? c[data.rank] : undefined,\n                        reports_to: c[data.reports_to] ? c[data.reports_to] : undefined,\n                        meta_data: c[data.meta_data] ? c[data.meta_data] : undefined\n                    }\n                    newChoices.push(beauty)\n                })\n                this.setState({\n                    comboArray: newChoices\n                })\n                console.log(this.state.comboArray)\n            }\n        }).catch(err => {\n            console.log(err);\n        })\n    }\n\n\n    handleOnSearch = (list) => {\n        console.log(list)\n        if (!list || typeof list !== 'object' || (list && !list.name)) return;\n        let arr = this.state.selectedItems;\n        arr.push(list);\n        this.setState({\n            selectedItems: arr\n        })\n        console.log(arr);\n    }\n\n    handleRemoveItem = (index) => {\n        let arr = this.state.selectedItems;\n        arr.splice(index, 1);\n        this.setState({\n            selectedItems: arr\n        })\n    }\n\n    handleOnSaveItems = () => {\n        this.props.onSave(this.state.selectedItems);\n        this.setState({\n            selectedItems: []\n        })\n    }\n\n    public render(): JSX.Element {\n        const classes = {\n            buttonsContainer: {\n                padding: '1em',\n            },\n            selectedContainer: {\n                padding: '3em 0 2em'\n            },\n            selectedItems: {\n                borderRadius: 20,\n                fontSize: 13,\n                backgroundColor: '#d1d4db',\n                padding: '5px 10px',\n                margin: '5px',\n                display: 'inline-block',\n            },\n            selectedText: {\n                paddingRight: '5px'\n            },\n            saveButton: {\n                width: '135px',\n                fontSize: '14px',\n                color: '#fff',\n            },\n            cancelButton: {\n                width: '135px',\n                fontSize: '14px',\n            }\n        };\n\n        return (\n            <>\n                <div style={{ minHeight: 400, minWidth: 400 }}>\n                    <SearchUserGroup\n                        placeholder={'Please enter at least 3 characters to search.'}\n                        searchLabel={'Search user group'}\n                        onSearch={this.handleOnSearch}\n                        comboBoxMode={true}\n                        comboListsArray={this.state.comboArray}\n                    />\n                    <div style={classes.selectedContainer}>\n                        {this.state.selectedItems.length > 0 ?\n                            <div>\n                                <label>Selected Groups</label>\n                            </div>\n                            : null}\n                        {this.state.selectedItems.map((item, index) =>\n                            <div style={classes.selectedItems}>\n                                <span style={classes.selectedText}>{item.name}</span>\n                                <span onClick={() => this.handleRemoveItem(index)}>\n                                    <FontAwesomeIcon icon={faTimesCircle} />\n                                </span>\n                            </div>\n                        )\n                        }\n                    </div>\n                </div>\n                <Grid container spacing={1}>\n                    <Grid item xs={6}>\n                        <Button style={classes.cancelButton} variant=\"outlined\" color=\"secondary\" onClick={() => this.props.onClose()}>Cancel</Button>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <Button disabled={this.state.selectedItems.length < 1 ? true : false}\n                            style={classes.saveButton}\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => this.handleOnSaveItems()}>\n                            Add\n                        </Button>\n                    </Grid>\n                </Grid>\n            </>\n        )\n    }\n\n}\n// export const AddRoleBody : React.FC<IAddRoleBodyProps> = (props: IAddRoleBodyProps): JSX.Element => {\n\n// }","import * as React from 'react';\nimport { Typography, Grid, Link, Button } from '@material-ui/core';\nimport { ReactSearch } from 'Components/UI/SearchBar/ReactSearch';\nimport { ReactTable } from 'Components/UI/TableComponent/ReactTable';\nimport { useState } from 'react';\nimport classNames from 'classnames';\nimport { SideModalBlock } from 'Components/UI';\nimport { AddUserRoleBody } from './AddUserRoleBody';\nimport { AddGroupRoleBody } from './AddGroupRoleBody';\nimport { ModalComponent } from 'Components/UI/ModalComponent/ModalComponent';\n\nimport {\n    getRolesUsersLists,\n    attachUserRoles,\n    detachUserRoles\n} from 'Pages/API/Calls/Roles';\nimport moment from 'moment';\nimport { attachRoleToGroups } from 'Pages/API/Calls/Roles';\nimport { getAllGroupsAttachToRole } from 'Pages/API/Calls/Roles';\nimport { UI } from 'Components';\n// import { TableComponent } from './TableComponent'\n\n\n\nconst user_fields = {\n    _id: true,\n    first_name: true,\n    last_name: true,\n    middle_name: true,\n    username: true,\n    employee_id: true,\n    department: true,\n    main_module: true,\n    main_role: true,\n    group: true,\n    group_name: true,\n    reports_to: true,\n    roles: true,\n    full_name: true,\n    last_login: true,\n    status: true\n}\n\nexport interface IGroupsAndUsersProps {\n    rows?: any,\n    viewOnly: boolean,\n    classes: any,\n    openSideModalBlock?: boolean,\n}\n\nexport const GroupsAndUsers: React.FC<IGroupsAndUsersProps> = (props: IGroupsAndUsersProps): JSX.Element => {\n    const {\n        rows,\n        classes,\n    } = props;\n    const [activeItem, setActiveItem] = useState('Groups');\n    const [activeClass, setActiveClass] = useState(0);\n    const [groupShowBlock, setGroupShowBlock] = useState('none');\n    const [userShowBlock, setUserShowBlock] = useState('none');\n    const [isFetching, setIsFetching] = React.useState(false);\n    const [typingTimeout, setTypingTimeout] = React.useState<any>(0)\n    const [userList, setUserList] = useState<any>();\n    const [userTable, setUserTable] = useState<any>({\n        limit: 10,\n        skip: 0,\n        currentPage: 0,\n        order: [],\n        filter: [],\n        count: 0\n    })\n\n    // const [statuses, setStatuses] = React.useState<any>()\n    const [tableStates, setTableState] = React.useState<any>({\n        rows: [],\n        currentPage: 0,\n        totalCount: 0,\n        pageSize: 10,\n        offset: 0,\n        order: '',\n        where: {},\n        query: ''\n    })\n    const [modalProps, setModalProps] = React.useState({\n        title: '',\n        message: '',\n        open: false,\n        method: () => { }\n    });\n    const [confirmationModalProps, setConfirmationModalProps] = React.useState({\n        title: '',\n        message: '',\n        open: false,\n        method: () => { }\n    });\n    const [selectedUsers, setSelectedUsers] = useState<any[]>([]);\n    const [usersWithRole, setUsersWithRole] = useState<any[]>([]);\n    const [refreshUsers, setRefreshUsers] = useState<boolean>(false);\n    const [isConfirmDetachUserRoleModalOpen, setIsConfirmDetachUserRoleModalOpen] = useState<boolean>(false);\n    const [userDetachRole, setUserDetachRole] = useState<any>(null);\n    const [attachUserRoleNotifModalOpen, setAttachUserRoleNotifModalOpen] = useState<boolean>(false);\n    const [attachUserRoleSuccess, setAttachUserRoleSuccess] = useState<boolean>(false);\n\n\n    const userColumns: any = [\n        {\n            name: 'username',\n            title: 'Username',\n        },\n        {\n            name: 'full_name',\n            title: 'User Account',\n        },\n        {\n            name: 'last_login',\n            title: 'Last Activity Date',\n            getCellValue: row => (row.last_login ? moment(row.last_login).format('MMMM DD, YYYY') : 'N/A')\n        },\n        {\n            name: 'status',\n            title: 'Status',\n            getCellValue: row => (row.status ? row.status.charAt(0).toUpperCase() + row.status.slice(1) : '')\n        },\n        {\n            name: 'action_delete',\n            title: ' ',\n        },\n    ]\n\n    const groupsColumns: any = [\n        {\n            name: 'group_id',\n            title: 'Group ID',\n        },\n        {\n            name: 'name',\n            title: 'Group',\n        },\n        {\n            name: 'user_count',\n            title: 'Users in the Group',\n        },\n        {\n            name: 'status',\n            title: 'Status',\n        },\n        {\n            name: 'action_delete',\n            title: ' ',\n        },\n    ];\n\n    const menuItems = [\n        'Groups',\n        'Users'\n    ]\n\n\n\n\n\n    React.useEffect(() => {\n        // groups list endpoint\n        console.log(rows)\n        APIGetGroupsAttachToRoleList({\n            pageSize: 10,\n            offset: 0,\n            role_id: `${rows[\"role_id\"]}`,\n            where: {},\n            order: [\"group_id ASC\"]\n        }, true);\n    }, []);\n\n\n\n    const handleMenuClick = (item, index) => {\n        setActiveItem(item);\n        setActiveClass(index)\n        if (item == 'Users') {\n            getUserLists(\n                10,\n                0,\n                [],\n                0,\n                [],\n            )\n        }\n        if (item == 'Groups') {\n            APIGetGroupsAttachToRoleList({\n                pageSize: 10,\n                offset: 0,\n                role_id: `${rows[\"role_id\"]}`,\n                where: {},\n                order: [\"group_id ASC\"]\n            }, true);\n        }\n    }\n\n\n    const removeDuplicateRoles = (array: any[]) => {\n        let a: any[] = []\n        array.map(x => {\n            if (!a.some(b => b.role_id === x.role_id)) {\n                a.push(x)\n            }\n        })\n        return a\n    };\n\n\n\n    const attachUserRole = async (data: any) => {\n        setIsFetching(true);\n        await attachUserRoles(rows.role_id, data).then(resp => {\n            console.log(resp)\n            setAttachUserRoleSuccess(true);\n        }).catch(e => {\n            setAttachUserRoleSuccess(false);\n            console.log(e)\n        });\n        setAttachUserRoleNotifModalOpen(true);\n        setSelectedUsers([]);\n        setUserShowBlock('none');\n        getUserLists(\n            userTable.limit,\n            userTable.skip,\n            userTable.order,\n            userTable.currentPage,\n            userTable.filter,\n        );\n        setRefreshUsers(!refreshUsers);\n    }\n\n    const detachUserRole = async (data: any) => {\n        setIsConfirmDetachUserRoleModalOpen(false);\n        setIsFetching(true);\n        await detachUserRoles(rows.role_id, data).then(resp => console.log(resp)).catch(e => console.log(e));\n        setUserShowBlock('none');\n        getUserLists(\n            userTable.limit,\n            userTable.skip,\n            userTable.order,\n            userTable.currentPage,\n            userTable.filter,\n        );\n        setRefreshUsers(!refreshUsers);\n    }\n\n\n    const getUserLists = (\n        limit: number,\n        skip: number,\n        order: any,\n        page: number,\n        filter: any,\n        search?: string\n    ) => {\n\n        if (typingTimeout) {\n            clearTimeout(typingTimeout)\n        }\n\n        let _filter: any = {};\n        let _order = order.length > 0 ? `${order[0].columnName === 'full_name' ? 'first_name' : order[0].columnName} ${order[0].direction}` : [];\n\n        if (filter.length > 0) {\n            filter.map((item: any) => {\n                if (item.columnName == 'status') {\n                    if (item.value !== 'all') {\n                        _filter[item.columnName] = item.value\n                    }\n                } else if (item.columnName == 'full_name') {\n                    _filter['first_name'] = {\n                        like: `^${item.value}.*`,\n                        options: \"i\"\n                    }\n                } else if (item.columnName == 'last_login') {\n                    _filter['and'] = [\n                        { last_login: { lte: `${moment(item.value).endOf('day').toISOString()}` } },\n                        { last_login: { gte: `${moment(item.value).startOf('day').toISOString()}` } }\n                    ]\n                    // _filter['last_login'] = {\n                    //     lte: `${moment(item.value).toISOString()}`\n                    // }\n                } else {\n                    _filter[item.columnName] = {\n                        like: `^${item.value}.*`,\n                        options: \"i\"\n                    }\n                }\n            })\n        }\n\n        let params = {\n            fields: user_fields,\n            limit: limit,\n            offset: skip,\n            order: _order,\n            where: {\n                \"and\": [\n                    {\n                        \"roles.role_id\": rows.role_id,\n                    },\n                    {\n                        \"or\": [_filter]\n                    }\n                ],\n            }\n        }\n\n        setTypingTimeout(\n            setTimeout(() => {\n                // setLoading(true)\n                setIsFetching(true)\n                getRolesUsersLists(params, search ? search : '').then((response) => {\n                    const resp_body = response.body.map(item => {\n                        item.roles = removeDuplicateRoles(item.roles);\n                        return item;\n                    });\n                    setUserList(resp_body)\n                    setUserTable({\n                        currentPage: userTable.currentPage > (Math.ceil(response.count / limit) - 1) ? (Math.ceil(response.count / limit) - 1) : page,\n                        order: order,\n                        limit: limit,\n                        skip: skip,\n                        filter: filter,\n                        count: response.count\n                    })\n                    // setLoading(false)\n                    setIsFetching(false)\n                    console.log(resp_body)\n                }).catch(err => {\n                    // alert(err);\n                    setUserList([])\n                    console.log(err)\n                    setIsFetching(false)\n                    // setLoading(false)\n                })\n            }, filter.length > 0 || search ? 2000 : 0)\n        )\n    }\n\n\n\n    const APIGetGroupsAttachToRoleList = (newState?: any, saveSummary?: boolean) => {\n        setIsFetching(true)\n\n\n        getAllGroupsAttachToRole(\n            newState.role_id,\n            newState.pageSize,\n            newState.offset,\n            newState.where,\n            newState.order,\n            newState.query).then((data: any) => {\n                console.log(data)\n                if (!data.error) {\n\n                    const state = {\n                        ...newState,\n                        rows: data.body,\n                        totalCount: data.count.count\n                    }\n\n\n                    if (saveSummary && saveSummary === true) {\n                        // setStatuses(data.statuses)\n                    }\n\n                    updateTableState(state)\n\n\n                } else {\n                    const state = {\n                        ...newState,\n                        rows: [],\n                        totalCount: 0\n                    }\n\n                    updateTableState(state)\n                }\n\n                setIsFetching(false)\n            }).catch(() => {\n                console.log(\"catch\")\n                setIsFetching(false)\n                const state = {\n                    ...newState,\n                    rows: [],\n                    totalCount: 0\n                }\n\n                updateTableState(state)\n            })\n    }\n\n\n\n\n    const updateTableState = (prop) => {\n        setTableState({\n            ...tableStates,\n            ...prop\n        })\n    }\n\n\n    const onSaveAddRoleToGroup = (items) => {\n        // console.log(items)\n        setIsFetching(true)\n        let data = {\n            body: items\n        }\n        let payload: any = [];\n\n        if (tableStates && tableStates.length !== null) {\n            payload.push(...tableStates.rows)\n        }\n\n        if (data.body && data.body.length > 0) {\n            data.body.map(c => {\n                let selectedGroupId = {\n                    _id: c[\"id\"],\n                    group_id: c[\"group_id\"],\n                    name: c[\"name\"],\n                    description: c[\"description\"],\n                    user_account: c[\"user_count\"],\n                    effectivity_date: c[\"effectivity_date\"],\n                    date_updated: c[\"date_updated\"],\n                    is_processmaker: c[\"is_processmaker\"],\n                    pmaker_uid: c[\"pmaker_uid\"],\n                    amount_limit: c[\"amount_limit\"],\n                    user_count: c[\"user_count\"],\n                    status: c[\"status\"],\n                    department: c[\"department\"]\n                }\n                let groupRoles = c[\"roles\"]\n\n                if (groupRoles && groupRoles.length > 0) {\n                    var isUnique = true;\n                    groupRoles.map(e => {\n                        var role_id = e[\"_id\"];\n                        if (role_id === rows[\"_id\"]) {\n                            isUnique = false;\n                        }\n                    })\n                    if (isUnique === true) {\n                        groupRoles.push(rows)\n                    }\n                } else {\n                    groupRoles.push(rows)\n                }\n\n                let expiry_date = c[\"expiry_date\"]\n                let rank = c[\"rank\"]\n                let reports_to = c[\"reports_to\"]\n                let meta_data = c[\"meta_data\"]\n\n                if (expiry_date !== undefined) { selectedGroupId[\"expiry_date\"] = expiry_date }\n                if (rank !== undefined) { selectedGroupId[\"rank\"] = rank }\n                if (reports_to !== undefined) { selectedGroupId[\"reports_to\"] = reports_to }\n                if (meta_data !== undefined) { selectedGroupId[\"meta_data\"] = meta_data }\n\n                selectedGroupId[\"roles\"] = groupRoles;\n\n\n\n                payload.push(selectedGroupId)\n            })\n        }\n        console.log(payload)\n        attachRoleToGroups(rows[\"role_id\"], payload, '').then((resp: any) => {\n            setIsFetching(false)\n            if (!resp.error) {\n                setModalProps({\n                    ...modalProps,\n                    open: true,\n                    title: 'User group added!',\n                    message: 'New user group have been successfully added.',\n                    method: handleCloseModalProps\n                })\n            } else {\n                setModalProps({\n                    ...modalProps,\n                    open: true,\n                    title: 'Add User Group Failed!',\n                    message: 'Something went wrong. New user wasn’t added.',\n                    method: handleCloseModalProps\n                })\n            }\n        }).catch((err) => {\n            setIsFetching(false)\n            setModalProps({\n                ...modalProps,\n                open: true,\n                title: 'Add User Group Failed!',\n                message: err.message,\n                method: handleCloseModalProps\n            })\n            console.log(err)\n        })\n        console.log(JSON.stringify(payload));\n    }\n\n    const handleDeleteGroup = (roledata) => {\n        handleCloseConfirmationModalProps();\n        setIsFetching(true)\n        let data = {\n            body: [roledata],\n            label: \"name\"\n        }\n\n        let payload: any = [];\n\n        if (data.body && data.body.length > 0) {\n            data.body.map(a => {\n                let selectedGroupToRemove = {\n                    _id: a[\"_id\"],\n                    group_id: a[\"group_id\"],\n                    name: a[\"name\"],\n                    description: a[\"description\"],\n                    user_account: a[\"user_count\"],\n                    effectivity_date: a[\"effectivity_date\"],\n                    date_updated: a[\"date_updated\"],\n                    is_processmaker: a[\"is_processmaker\"],\n                    pmaker_uid: a[\"pmaker_uid\"],\n                    amount_limit: a[\"amount_limit\"],\n                    user_count: a[\"user_count\"],\n                    department: a[\"department\"],\n                    status: a.status.props.children\n                }\n                let groupRoles = a[\"roles\"]\n                let newGroupRoles: any = [];\n\n                if (groupRoles && groupRoles.length > 0) {\n\n                    groupRoles.map(e => {\n                        var role_id = e[\"_id\"];\n                        if (role_id === rows[\"_id\"]) {\n                            newGroupRoles.push(e)\n                        }\n                    })\n                }\n\n                let expiry_date = a[\"expiry_date\"]\n                let rank = a[\"rank\"]\n                let reports_to = a[\"reports_to\"]\n                let meta_data = a[\"meta_data\"]\n\n                if (expiry_date !== undefined) { selectedGroupToRemove[\"expiry_date\"] = expiry_date }\n                if (rank !== undefined) { selectedGroupToRemove[\"rank\"] = rank }\n                if (reports_to !== undefined) { selectedGroupToRemove[\"reports_to\"] = reports_to }\n                if (meta_data !== undefined) { selectedGroupToRemove[\"meta_data\"] = meta_data }\n\n                selectedGroupToRemove[\"roles\"] = newGroupRoles;\n                payload.push(selectedGroupToRemove)\n            })\n        }\n        console.log(payload)\n        attachRoleToGroups(rows[\"role_id\"], payload, 'remove').then((resp: any) => {\n            setIsFetching(false)\n            if (!resp.error) {\n                setModalProps({\n                    ...modalProps,\n                    open: true,\n                    title: 'User group removed!',\n                    message: `${roledata[\"name\"]} has been successfully removed.`,\n                    method: handleCloseModalProps\n                })\n            } else {\n                setModalProps({\n                    ...modalProps,\n                    open: true,\n                    title: 'Remove User Group Failed!',\n                    message: 'Something went wrong. User group wasn’t removed.',\n                    method: handleCloseModalProps\n                })\n            }\n        }).catch((err) => {\n            setIsFetching(false)\n            setModalProps({\n                ...modalProps,\n                open: true,\n                title: 'Removed User Group Failed!',\n                message: err.message,\n                method: handleCloseModalProps\n            })\n            console.log(err)\n        })\n        console.log(JSON.stringify(payload));\n\n    }\n\n\n    const rowDataFixer = (array: any) => {\n        let newEntry: any = [];\n        if (array.length > 0) {\n            array.forEach(data => {\n                let newRow = {\n                    ...data,\n                    group_id: `${data.group_id}`,\n                    name: data.hasOwnProperty('name') ? data.name : 'N/A',\n                    user_count: data.hasOwnProperty('user_count') ? data.user_count : 'N/A',\n                    status: data.hasOwnProperty('status') ? <span style={{ textTransform: 'capitalize' }}>{data.status}</span> : 'N/A',\n                }\n\n                newEntry.push(newRow)\n            })\n\n            return newEntry\n        }\n\n        return []\n    }\n\n    const handleTimeOutGroupSearch = (value) => {\n        if (typingTimeout) {\n            clearTimeout(typingTimeout);\n        }\n\n        setTypingTimeout(setTimeout(function () {\n            const state = {\n                currentPage: 0,\n                pageSize: tableStates.pageSize,\n                offset: 0,\n                role_id: `${rows[\"role_id\"]}`,\n                order: tableStates.order ? tableStates.order : \"group_id ASC\",\n                where: tableStates.where,\n                query: value\n            }\n\n            APIGetGroupsAttachToRoleList(state)\n\n        }, 3000));\n    }\n\n\n    const handleSearchGroup = (e) => {\n        if (typingTimeout) {\n            clearTimeout(typingTimeout);\n        }\n        const state = {\n            currentPage: 0,\n            pageSize: tableStates.pageSize,\n            offset: 0,\n            role_id: `${rows[\"role_id\"]}`,\n            order: tableStates.order ? tableStates.order : \"group_id ASC\",\n            where: tableStates.where,\n            query: e\n        }\n\n        APIGetGroupsAttachToRoleList(state)\n\n    }\n\n\n    const onFilterChange = (value) => {\n        if (typingTimeout) {\n            clearTimeout(typingTimeout);\n        }\n\n        setTypingTimeout(setTimeout(function () {\n            const state = {\n                currentPage: 0,\n                pageSize: tableStates.pageSize,\n                offset: 0,\n                role_id: `${rows[\"role_id\"]}`,\n                order: tableStates.order ? tableStates.order : \"group_id ASC\",\n                where: {},\n                query: tableStates.query\n            }\n\n            value.map(w =>\n                w.columnName === 'group_id' && w.value !== '' ?\n                    state.where['group_id'] = parseInt(w.value)\n                    : w.columnName === 'name' ?\n                        state.where['name'] = {\n                            like: `${w.value}.*`,\n                            options: 'i'\n                        }\n                        : w.columnName === 'user_count' && w.value !== '' ?\n                            state.where[\"user_count\"] = parseInt(w.value)\n                            : w.columnName === 'status' && w.value !== 'all' ?\n                                state.where[\"status\"] = w.value\n                                : ''\n            )\n\n            console.log(state)\n            APIGetGroupsAttachToRoleList(state)\n        }, 3000));\n    }\n\n    const onCurrentPageChange = (value) => {\n        const state = {\n            pageSize: tableStates.pageSize,\n            currentPage: value,\n            role_id: `${rows[\"role_id\"]}`,\n            order: tableStates.order ? tableStates.order : \"group_id ASC\",\n            offset: tableStates.pageSize * value,\n            where: tableStates.where,\n            query: tableStates.query\n        }\n\n        APIGetGroupsAttachToRoleList(state)\n    }\n\n    const onPageSizeChange = (value) => {\n        const state = {\n            pageSize: value,\n            offset: tableStates.offset,\n            role_id: `${rows[\"role_id\"]}`,\n            order: tableStates.order ? tableStates.order : \"group_id ASC\",\n            where: tableStates.where,\n            query: tableStates.query\n        }\n\n        if (tableStates.currentPage > (Math.ceil(tableStates.totalCount / value) - 1)) {\n            state['currentPage'] = ((Math.ceil(tableStates.totalCount / value) - 1))\n            state['offset'] = ((Math.ceil(tableStates.totalCount / value) - 1)) * value\n        }\n\n        APIGetGroupsAttachToRoleList(state)\n    }\n\n    const onSortingChange = (value) => {\n\n        let filter = {\n            ...value[0],\n            direction: value[0].direction.toUpperCase()\n        }\n\n        let a = Object.values(filter).join(' ')\n\n        const state = {\n            pageSize: tableStates.pageSize,\n            offset: tableStates.offset,\n            role_id: `${rows[\"role_id\"]}`,\n            order: [a],\n            where: tableStates.where,\n            query: tableStates.query\n        }\n\n        APIGetGroupsAttachToRoleList(state)\n    }\n\n\n    const handleCloseModalProps = () => {\n        setModalProps({\n            ...modalProps,\n            open: false\n        })\n        setGroupShowBlock('none')\n        APIGetGroupsAttachToRoleList({\n            pageSize: 10,\n            offset: 0,\n            role_id: `${rows[\"role_id\"]}`,\n            where: {},\n            order: [\"group_id ASC\"]\n        }, true);\n    };\n\n    const handleOpenConfirmationModalProps = (data) => {\n        console.log(\"this is for deletion\")\n        console.log(data)\n        setConfirmationModalProps({\n            ...confirmationModalProps,\n            open: true,\n            title: \"Remove from role\",\n            message: `Are you sure you want to remove ${data.name} from the role ${rows[\"name\"]}?`,\n            method: () => { handleDeleteGroup(data) }\n        });\n    }\n\n    const handleCloseConfirmationModalProps = () => {\n        setConfirmationModalProps({\n            ...confirmationModalProps,\n            open: false\n        })\n    };\n\n\n    return (\n        <>\n            {isFetching && <UI.LoadingIndicator />}\n            <Grid container xs={12}>\n                <Grid item xs={12}>\n                    <Typography><b>Attached Groups and Users</b></Typography>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container xs={12} alignItems={'center'}>\n                        <Grid item xs={6}>\n                            <ul style={{ padding: '0', margin: '0' }}>\n                                {\n                                    menuItems.map((item, i) => (\n                                        <li className={classes.menuList}>\n                                            <Link\n                                                className={classNames(classes.menuLink, activeClass === i ? classes.LinkActive : null)}\n                                                onClick={() => handleMenuClick(item, i)}>\n                                                {item}\n                                            </Link>\n                                        </li>\n                                    ))\n                                }\n                            </ul>\n                        </Grid>\n                        <Grid item xs={6} className={classes.alignRight}>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    {\n                        activeItem == 'Groups' ?\n                            <>\n                                <Grid className={classes.alignRight}>\n                                    <Link onClick={() => { setGroupShowBlock('block') }}> Add to this role</Link>\n                                </Grid>\n                                <ReactSearch\n                                    onChange={handleTimeOutGroupSearch}\n                                    placeholder={'Search user'}\n                                    onSearch={handleSearchGroup} />\n                                <ReactTable\n                                    rows={rowDataFixer(tableStates.rows)}\n                                    columns={groupsColumns}\n                                    viewOnly={false}\n                                    enableSelection={false}\n                                    totalCount={tableStates.totalCount}\n                                    currentPage={tableStates.currentPage}\n                                    pageSize={tableStates.pageSize}\n                                    columnExtensions={\n                                        [{\n                                            columnName: 'action_delete',\n                                            width: 75,\n                                            wordWrapEnabled: true,\n                                            align: 'center'\n                                        }]\n                                    }\n                                    message={'There are no user accounts to show yet.'}\n                                    sortingStateColumnExtensions={[\n                                        { columnName: 'action_delete', sortingEnabled: false }\n                                    ]}\n                                    onFilterChange={onFilterChange}\n                                    onPageChange={onCurrentPageChange}\n                                    onSetPageSize={onPageSizeChange}\n                                    onSortingChange={onSortingChange}\n                                    onDeleteRow={(row) => {\n                                        handleOpenConfirmationModalProps(row)\n                                    }}\n                                />\n                            </>\n                            : null\n                    }\n                    {\n                        activeItem == 'Users' ?\n                            <>\n                                <Grid className={classes.alignRight}>\n                                    <Link onClick={() => { setUserShowBlock('block') }}> Add to this role</Link>\n                                </Grid>\n                                <ReactSearch\n                                    onSearch={(search: string) => {\n                                        getUserLists(\n                                            userTable.limit,\n                                            userTable.skip,\n                                            userTable.order,\n                                            userTable.currentPage,\n                                            userTable.filter,\n                                            search\n                                        )\n                                    }}\n                                    onChange={(search: string) => {\n                                        getUserLists(\n                                            userTable.limit,\n                                            userTable.skip,\n                                            userTable.order,\n                                            userTable.currentPage,\n                                            userTable.filter,\n                                            search\n                                        )\n                                    }}\n                                    placeholder={'Search a user account'} />\n                                <ReactTable\n                                    rows={userList ? userList : []}\n                                    columns={userColumns}\n                                    columnExtensions={\n                                        [{\n                                            columnName: 'action_delete',\n                                            width: 75,\n                                            wordWrapEnabled: true,\n                                            align: 'center'\n                                        }]\n                                    }\n                                    message={'There are no user accounts to show yet.'}\n                                    sortingStateColumnExtensions={[\n                                        { columnName: 'action_delete', sortingEnabled: false }\n                                    ]}\n                                    onDeleteRow={(row) => {\n                                        setUserDetachRole(row);\n                                        setIsConfirmDetachUserRoleModalOpen(true);\n                                        console.log(row, 'rowdeleted');\n                                    }}\n                                    currentPage={userTable.currentPage}\n                                    pageSize={userTable.limit}\n                                    totalCount={userTable.count}\n                                    defaultFilters={userTable.filter}\n                                    onFilterChange={(filter: any) => {\n                                        getUserLists(\n                                            userTable.limit,\n                                            0,\n                                            userTable.order,\n                                            0,\n                                            filter,\n                                        )\n                                    }}\n                                    onSortingChange={(sort: any) => {\n                                        getUserLists(\n                                            userTable.limit,\n                                            userTable.skip,\n                                            sort,\n                                            userTable.currentPage,\n                                            userTable.filter,\n                                        )\n                                    }}\n                                    onSetPageSize={(size: number) => {\n                                        getUserLists(\n                                            size,\n                                            userTable.skip,\n                                            userTable.order,\n                                            userTable.currentPage,\n                                            userTable.filter,\n                                        )\n                                    }}\n                                    onPageChange={(page: number) => {\n                                        let skip = page * userTable.limit\n                                        getUserLists(\n                                            userTable.limit,\n                                            skip,\n                                            userTable.order,\n                                            page,\n                                            userTable.filter,\n                                        )\n                                    }}\n\n                                />\n                            </>\n                            : null\n                    }\n                </Grid>\n            </Grid>\n\n            <SideModalBlock\n                handleClose={() => { setGroupShowBlock('none') }}\n                showBlock={activeItem == 'Groups' ? groupShowBlock : 'none'}\n                title={'Add to this Role'}>\n                <AddGroupRoleBody\n                    onClose={() => {\n                        setGroupShowBlock('none')\n                    }}\n                    onSave={(data: any) => {\n                        onSaveAddRoleToGroup(data)\n                    }}\n                />\n            </SideModalBlock>\n\n            <SideModalBlock\n                handleClose={() => { setUserShowBlock('none') }}\n                showBlock={activeItem == 'Users' ? userShowBlock : 'none'}\n                title={'Add to this Role'}>\n                <AddUserRoleBody\n                    apiCallFields={user_fields}\n                    roleId={rows.role_id}\n                    refreshUsersWithRole={refreshUsers}\n                    selectedUsers={selectedUsers}\n                    setSelectedUsers={(data: any) => setSelectedUsers([...data])}\n                    usersWithRole={usersWithRole}\n                    setUsersWithRole={(data: any) => setUsersWithRole([...data])}\n                    onClose={() => {\n                        setUserShowBlock('none')\n                    }}\n                    onSave={(data: any) => {\n                        if (!Array.isArray(data)) return;\n\n                        const attach_role_data = data.filter(user => {\n                            if (user && user.roles && user.roles.some(role => role.role_id === rows.role_id)) {\n                                return false;\n                            }\n                            return true;\n                        });\n                        console.log('ATTACH DATA', attach_role_data);\n                        attachUserRole(attach_role_data);\n                    }}\n                />\n            </SideModalBlock>\n\n\n            {/* {this modal is for success and error for both adding groups and accounts} */}\n            <ModalComponent\n                isModalOpen={modalProps.open}\n                onClose={modalProps.method}\n                message={modalProps.message}\n                title={modalProps.title}\n                buttons={\n                    <Grid container justify=\"center\" alignItems=\"center\">\n                        <Grid item >\n                            <Button\n                                onClick={modalProps.method}\n                                className={classes.button}\n                                variant={'contained'}\n                                color={'primary'}>\n                                Okay\n                            </Button>\n                        </Grid>\n                    </Grid>\n                }\n            />\n\n            {/* {this modal is for confirmation for both removing groups and accounts} */}\n            <ModalComponent\n                isModalOpen={confirmationModalProps.open}\n                onClose={handleCloseConfirmationModalProps}\n                message={confirmationModalProps.message}\n                title={confirmationModalProps.title}\n                buttons={\n                    <Grid container justify=\"center\" alignItems=\"center\">\n                        <Grid item xs={6}>\n                            <Button\n                                onClick={handleCloseConfirmationModalProps}\n                                className={classes.button}\n                                variant={'outlined'}\n                                color={'secondary'}>\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Button\n                                onClick={confirmationModalProps.method}\n                                className={classes.button}\n                                variant={'contained'}\n                                color={'primary'}>\n                                Remove\n                            </Button>\n                        </Grid>\n                    </Grid>\n                }\n            />\n\n\n            <ModalComponent\n                isModalOpen={isConfirmDetachUserRoleModalOpen}\n                onClose={() => {\n                    setIsConfirmDetachUserRoleModalOpen(false);\n                }}\n                message={`Remove ${userDetachRole && userDetachRole.full_name ? userDetachRole.full_name : 'user'} from this role?`}\n                title={'Remove from Role'}\n                buttons={\n                    <Grid container justify=\"center\" alignItems=\"center\">\n                        <Grid item xs={6}>\n                            <Button onClick={() => { setIsConfirmDetachUserRoleModalOpen(false) }} className={classes.button} variant={'outlined'} color={'secondary'}>Cancel</Button>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Button className={classes.button} variant={'contained'} color={'primary'} onClick={() => detachUserRole([userDetachRole])}>Remove</Button>\n                        </Grid>\n                    </Grid>\n                }\n            />\n            {/* To-do: apply success and fail messages. */}\n            <ModalComponent\n                isModalOpen={attachUserRoleNotifModalOpen}\n                onClose={() => setAttachUserRoleNotifModalOpen(false)}\n                message={attachUserRoleSuccess ? 'New user account/s have been successfully added.' : 'New user account/s have been successfully added.'}\n                title={attachUserRoleSuccess ? 'User account added!' : 'User account added!'}\n                buttons={\n                    <Grid container justify=\"center\" alignItems=\"center\">\n                        <Grid item xs={6}>\n                            <Button className={classes.button} variant={'contained'} color={'primary'} onClick={() => setAttachUserRoleNotifModalOpen(false)}>Okay</Button>\n                        </Grid>\n                    </Grid>\n                }\n            />\n        </>\n    )\n}\n","//#region Global Imports\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { bindActionCreators, Dispatch } from 'redux';\n// import NEOLink from 'next/link';\n//#endregion Global Imports\n\n//#region Interface Imports\n// import { Heading } from 'Components/UI/Heading';\nimport { Store } from 'Components/Stores/IStore';\nimport { RolesActions } from './RolesActions';\nimport { IRolesPage } from './IRolesPage';\nimport { Grid, Button } from '@material-ui/core';\n// import Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { LoadingIndicator, FloatingFooter } from 'Components/UI';\nimport { Policies } from './Components/Policies';\nimport { GroupsAndUsers } from './Components/GroupsAndUsers';\nimport { SubHeader } from 'Components/UI/SubHeader';\nimport { SideMenu } from 'Components/UI/SideMenu';\nimport { ModalComponent } from 'Components/UI/ModalComponent/ModalComponent';\nimport { getRoleData, getRbacList, updateRoleRbac } from 'Pages/API/Calls/Roles';\nimport { Redirect } from 'react-router-dom';\nimport moment from 'moment'\n\n// import { LoadingIndicator } from 'Components/UI';\n//#endregion Interface Imports\n\nconst useStyles = makeStyles(theme => ({\n\tmainContainer: {\n\t\tpadding: '32px 24px 25px'\n\t},\n\tmain: {\n\t\tbackgroundColor: '#F5F7FB',\n\t\tpadding: '32px 24px',\n\t\tposition: 'relative'\n\t},\n\theadMain: {\n\t\t// backgroundColor: '#F5F7FB',\n\t},\n\tgridContainer: {\n\t\tpadding: theme.spacing(1),\n\t\tpaddingBottom: '75px'\n\t},\n\tgridContainerNoPadding: {\n\t\tpadding: theme.spacing(1),\n\t},\n\tsectionTitle: {\n\t\tfontSize: 24,\n\t\tfontWeight: 700,\n\t\tcolor: '#272e4c',\n\t},\n\tsubSectionTitle: {\n\t\tfontSize: 14,\n\t\tfontWeight: 400,\n\t\tcolor: '#272e4c',\n\t},\n\teditBtn: {\n\t\twidth: '135px',\n\t\tfontSize: '14px',\n\t\tcolor: '#fff',\n\t},\n\talignRight: {\n\t\ttextAlign: 'right',\n\t},\n\tsideBarContainer: {\n\t\tborderRight: \"1px solid #ccc\",\n\t\tpaddingRight: \"25px\",\n\t},\n\tcontentContainer: {\n\t\tpaddingLeft: \"25px\",\n\t},\n\tsideBarLists: {\n\t\tpadding: 0,\n\t\tmargin: 0,\n\t\tlistStyle: 'none'\n\t},\n\tsideBarLink: {\n\t\tcolor: \"#272e4c\",\n\t\tmargin: \"0 0 10px\",\n\t\tdisplay: \"block\"\n\t},\n\tfieldGroupTitle: {\n\t\tfontSize: 13,\n\t\tfontWeight: 700,\n\t\tcolor: '#272e4c',\n\t},\n\tlistItemTextRoot: {\n\t\tflex: 'none',\n\t},\n\tlistItemTextPrimarySelected: {\n\t\tfontSize: 14,\n\t\tfontWeight: 700,\n\t\tcolor: 'rgba(39, 46, 76, 1)',\n\t\tcursor: 'pointer',\n\t},\n\tlistItemTextPrimaryNotSelected: {\n\t\tfontSize: 14,\n\t\tfontWeight: 700,\n\t\tcolor: 'rgba(39, 46, 76, 0.3)',\n\t\tcursor: 'pointer',\n\t},\n\tdropzone: {\n\t\twidth: '460px',\n\t\theight: '88px',\n\t\tmarginTop: '10px',\n\t\tmarginBottom: '20px',\n\t\tborder: '2px dashed rgba(30, 32, 113, 0.3)',\n\t\tborderRadius: '5px',\n\t\tbackgroundColor: '#e6e8ee',\n\t\tcolor: '#7b8094',\n\t\tdisplay: 'flex',\n\t\tjustifyContent: 'center',\n\t\talignItems: 'center',\n\t\tflexDirection: 'column',\n\t},\n\tinputLabel: {\n\t\tcolor: '#272e4c',\n\t\tfontSize: '12px',\n\t\tmarginBottom: '5px'\n\t},\n\tkeyboardDatePicker: {\n\t\tmarginTop: '10px',\n\t\tmarginBottom: '20px',\n\t\twidth: '212px',\n\t},\n\tcheckbox: {\n\t\t'&.Mui-checked': {\n\t\t\tcolor: '#1e2071',\n\t\t},\n\t},\n\tradio: {\n\t\t'&.Mui-checked': {\n\t\t\tcolor: '#1e2071',\n\t\t},\n\t},\n\tappBar: {\n\t\ttop: 'auto',\n\t\tbottom: 0,\n\t\tborder: '1px solid #707070',\n\t\tbackgroundColor: 'rgba(54, 54, 54, 0.64)',\n\t\t[theme.breakpoints.up('sm')]: {\n\t\t\twidth: 'calc(100% - 72px)',\n\t\t},\n\t},\n\tgrow: {\n\t\tflexGrow: 1,\n\t},\n\tbutton: {\n\t\tmargin: '0 10px',\n\t\tminHeight: '42px',\n\t\tminWidth: '150px',\n\t\tfontSize: 14\n\t},\n\tbuttonTitle: {\n\t\tfontWeight: 700,\n\t\tfontSize: 13,\n\t},\n\tbuttonSubTitle: {\n\t\tfontWeight: 400,\n\t\tfontSize: 7,\n\t},\n\tmenuList: {\n\t\tdisplay: \"inline-block\",\n\t\tpadding: \"10px 45px 10px 0\"\n\t},\n\tmenuLink: {\n\t\tcolor: \"#929292\",\n\t\tdisplay: \"block\",\n\t\tfontSize: \"1.10em\",\n\t\t'&:hover': {\n\t\t\tcolor: \"#3ab77d\",\n\t\t}\n\t},\n\tLinkActive: {\n\t\tcolor: \"#3ab77d\",\n\t\tfontWeight: \"bold\",\n\t\ttextDecoration: \"underline\"\n\t}\n}));\n\n\nexport const RolesPage: React.FC<IRolesPage.IProps> = (props: IRolesPage.IProps): JSX.Element => {\n\tconst classes = useStyles();\n\tconst [viewOnly, setViewOnly] = useState(true);\n\tconst [isEdited, setIsEdited] = useState(false);\n\tconst [loading, setLoading] = useState(false);\n\tconst [activeItem, setActiveItem] = useState('Policies');\n\tconst [activeItemIndex, setActiveItemIndex] = useState(0);\n\tconst [isModalConfirmExitOpen, setIsModalConfirmExitOpen] = useState(false);\n\tconst [isModalConfirmSaveOpen, setIsModalConfirmSaveOpen] = useState(false);\n\tconst [isModalSaveSuccessOpen, setIsmodalSaveSuccessOpen] = useState(false);\n\tconst [mode, setMode] = useState('view');\n\t// const [dataResponse, setDataResponse ] = useState([]);\n\tconst [isOpenSideModalBlock, setIsOpenSideModalBlock] = useState(false);\n\tconst [policyResponse, setPolicyResponse] = useState<any>([]);\n\tconst [moduleName, setModuleName] = useState('User Management');\n\tconst [rbacList, setRbacList] = useState([]);\n\tconst [breadCrumbs, setBreadCrumbs] = useState<any[]>([])\n\tconst [rbacCount,] = useState(0);\n\tconst [roleId, setRoleId] = useState('');\n\tconst [policyData, setPolicyData] = useState<any>({})\n\tconst [isRedirect, setIsRedirect] = useState<boolean>(false)\n\tconst [currentModule, setCurrentModule] = useState<string>('')\n\tconst [rbacState, setRbacState] = useState<any>({\n\t\tfilter: [],\n\t\torder: '',\n\t\tlimit: 40,\n\t\tskip: 0,\n\t\tcount: 0,\n\t\tcurrentPage: 0\n\t})\n\tconst [loadRbacList, setLoadRbacList] = useState<any>({\n\t\tset: false,\n\t\tdata: [],\n\t})\n\tconst [typingTimeout, setTypingTimeout] = useState<any>(0);\n\tconst [showDeactivationWarning, setShowDeactivationWarning] = useState<boolean>(false)\n\n\tconst sideBarItems = [\n\t\t{\n\t\t\tname: 'Policies',\n\t\t\t// label: 'POLICY'\n\t\t},\n\t\t{\n\t\t\tname: 'Groups And Users',\n\t\t\t// label: 'GROUPIE'\n\t\t},\n\t];\n\n\tReact.useEffect(() => {\n\t\thandleGetRoleData()\n\t}, []);\n\n\tconst handleGetRoleData = () => {\n\t\tsetMode('view');\n\t\tsetLoading(true)\n\t\tgetRoleData(props.match.params.id).then(response => {\n\t\t\tvar _crumbs: any[] = [\n\t\t\t\t{\n\t\t\t\t\tname: \"ROLES\",\n\t\t\t\t\tlink: \"/system-admin/users/roles\"\n\t\t\t\t},\n\t\t\t];\n\t\t\t_crumbs.push({ name: response.name })\n\t\t\tsetBreadCrumbs(_crumbs);\n\t\t\tsetPolicyResponse(response);\n\t\t\tsetCurrentModule(response.module);\n\t\t\thandGetRbacList(\n\t\t\t\trbacState.filter,\n\t\t\t\trbacState.order,\n\t\t\t\trbacState.limit,\n\t\t\t\trbacState.skip,\n\t\t\t\trbacState.currentPage,\n\t\t\t\tresponse,\n\t\t\t\t'view',\n\t\t\t\t'',\n\t\t\t\tresponse.module\n\t\t\t);\n\t\t\tconsole.log(response)\n\t\t}).catch(err => {\n\t\t\tsetLoading(false)\n\t\t\tconsole.log(err)\n\t\t\talert(err);\n\t\t})\n\t}\n\n\tconst isEmpty = (obj) => {\n\t\tfor(var key in obj) {\n\t\t\tif(obj.hasOwnProperty(key))\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tconst handGetRbacList = (\n\t\tfilter: any,\n\t\tsort: any,\n\t\tlimit: number,\n\t\tskip: number,\n\t\tcurrentPage: number,\n\t\tresParam?: any,\n\t\t_mode?: string,\n\t\tsearch?: string,\n\t\tcurModule?: string\n\t) => {\n\t\tconsole.log(resParam);\n\t\t\n\t\tif (typingTimeout) {\n\t\t\tclearTimeout(typingTimeout)\n\t\t}\n\n\t\tlet _filter: any = {};\n\t\tlet _order = sort ? `${sort[0].columnName} ${sort[0].direction}` : '';\n\n\t\tif (filter.length > 0) {\n\t\t\tfilter.map((item: any) => {\n\t\t\t\t_filter[item.columnName] = {\n\t\t\t\t\tlike: `^${item.value}.*`,\n\t\t\t\t\toptions: \"i\"\n\t\t\t\t}\n\t\t\t})\n\t\t\t_filter['module'] = {\n\t\t\t\tlike: `^${currentModule}.*`,\n\t\t\t\toptions: \"i\"\n\t\t\t}\n\t\t} else {\n\t\t\t_filter = {\n\t\t\t\tmodule: {\n\t\t\t\t\tlike: `^${curModule ? curModule : currentModule}.*`,\n\t\t\t\t\toptions: \"i\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\tlet params = {\n\t\t\tlimit: limit,\n\t\t\tskip: skip,\n\t\t\torder: _order,\n\t\t\twhere: _filter\n\t\t}\n\n\t\tsetTypingTimeout(setTimeout(() => {\n\t\t\tsetLoading(true)\n\t\t\tgetRbacList(params, search ? search : '').then(response => {\n\t\t\t\tlet res = response.body;\n\t\t\t\tresParam = isEmpty(resParam) ? !isEmpty(policyData) ? policyData : policyResponse : resParam\t\n\t\t\t\t\n\t\t\t\tsetRbacState({\n\t\t\t\t\tcurrentPage: currentPage,\n\t\t\t\t\tfilter: filter,\n\t\t\t\t\torder: sort,\n\t\t\t\t\tlimit: limit,\n\t\t\t\t\tskip: skip,\n\t\t\t\t\tcount: response.count\n\t\t\t\t})\n\n\t\t\t\tres.length > 0 && res.map((item: any) => {\n\t\t\t\t\tresParam.rbac && resParam.rbac.length > 0 && resParam.rbac.map((policy: any) => {\n\t\t\t\t\t\tif (item._id === policy._id) {\n\t\t\t\t\t\t\titem['checked'] = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t\t// if (_mode === 'view' && resParam) {\n\t\t\t\t// \tres = res.length > 0 && res.filter((item: any) => {\n\t\t\t\t// \t\treturn item.checked ? true : false\n\t\t\t\t// \t})\n\t\t\t\t// }\n\t\t\t\tif (loadRbacList.set === false){\n\t\t\t\t\tsetLoadRbacList({\n\t\t\t\t\t\tset: true,\n\t\t\t\t\t\tdata: res,\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tconsole.log(loadRbacList);\n\t\t\t\tsetRbacList(res)\n\t\t\t\tsetLoading(false)\n\t\t\t}).catch(err => {\n\t\t\t\tconsole.log(err)\n\t\t\t\tsetLoading(false)\n\t\t\t\talert(err);\n\t\t\t})\n\t\t}, filter.length > 0 || search ? 2000 : 0))\n\t}\n\n\tconst editRole = () => {\n\t\tsetViewOnly(false);\n\t\tsetMode('edit');\n\t\thandGetRbacList(\n\t\t\trbacState.filter,\n\t\t\trbacState.order,\n\t\t\trbacState.limit,\n\t\t\trbacState.skip,\n\t\t\trbacState.currentPage,\n\t\t\tpolicyResponse,\n\t\t\t'edit',\n\t\t)\n\t}\n\n\tconst activeSideBarItem = (item) => {\n\t\tsetActiveItem(item);\n\t\tsetViewOnly(true);\n\t\tsideBarItems.map((data, index) => {\n\t\t\tif (data.name === item) {\n\t\t\t\tif (item === 'Groups And Users') {\n\t\t\t\t\tsetIsOpenSideModalBlock(true)\n\t\t\t\t}\n\t\t\t\tsetActiveItemIndex(index);\n\t\t\t}\n\t\t})\n\t}\n\n\tconst handleModalConfirmationClose = () => {\n\t\tsetIsModalConfirmSaveOpen(false);\n\t\tsetIsModalConfirmExitOpen(false);\n\t}\n\n\tconst generateRoleId = (moduleName: string, count: number) => {\n\t\tlet roleId = '';\n\n\t\tswitch (moduleName) {\n\t\t\tcase 'User Management':\n\t\t\t\troleId = `UMRID0${count}`\n\t\t\t\tbreak;\n\t\t\tcase 'Membership':\n\t\t\t\troleId = `MRID0${count}`\n\t\t\t\tbreak;\n\t\t\tcase 'Underwriting':\n\t\t\t\troleId = `URID0${count}`\n\t\t\t\tbreak;\n\t\t\tcase 'Customer Care':\n\t\t\t\troleId = `CRID0${count}`\n\t\t\t\tbreak;\n\t\t\tcase 'Claims':\n\t\t\t\troleId = `CLRID0${count}`\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\troleId = `UMRID0${count}`\n\t\t\t\tbreak;\n\t\t}\n\t\treturn roleId;\n\t}\n\n\tconst handleChangeModuleName = (moduleName) => {\n\t\tsetRoleId(generateRoleId(moduleName, rbacCount));\n\t}\n\n\n\tconst handleOnSave = () => {\n\t\tlet data = policyData;\n\n\t\tif (!data[\"expiry_date\"] && data.expiry_date === null) {\n\t\t\tdelete data.expiry_date\n\t\t}\n\n\t\tdata.rbac && data.rbac.map((rbac: any) => {\n\t\t\tif (rbac.checked) {\n\t\t\t\tdelete rbac.checked\n\t\t\t}\n\t\t})\n\t\tsetLoading(true)\n\t\tupdateRoleRbac(data._id, data).then((response: any) => {\n\t\t\tconsole.log(response)\n\t\t\tsetMode('view');\n\t\t\thandGetRbacList(\n\t\t\t\trbacState.filter,\n\t\t\t\trbacState.order,\n\t\t\t\trbacState.limit,\n\t\t\t\trbacState.skip,\n\t\t\t\trbacState.currentPage,\n\t\t\t\tresponse,\n\t\t\t\t'view',\n\t\t\t)\n\t\t\tsetPolicyResponse(response)\n\t\t\tsetIsmodalSaveSuccessOpen(true)\n\t\t\tsetIsModalConfirmSaveOpen(false);\n\t\t\tsetBreadCrumbs([\n\t\t\t\t{\n\t\t\t\t\tname: \"ROLES\",\n\t\t\t\t\tlink: \"/system-admin/users/roles\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: response.name\n\t\t\t\t}\n\t\t\t])\n\t\t\tsetModuleName(response.module)\n\t\t\tsetLoading(false);\n\t\t\tsetIsEdited(false);\n\t\t}).catch(err => {\n\t\t\tsetLoading(false)\n\t\t\talert(err);\n\t\t})\n\t}\n\n\tconst handleRemoveAllChanges = () => {\n\t\thandleGetRoleData()\n\t\thandGetRbacList(\n\t\t\trbacState.filter,\n\t\t\trbacState.order,\n\t\t\trbacState.limit,\n\t\t\trbacState.skip,\n\t\t\trbacState.currentPage,\n\t\t\tpolicyResponse,\n\t\t\t'view',\n\t\t)\n\t\tsetIsModalConfirmExitOpen(false)\n\t\tsetIsRedirect(true)\n\t}\n\n\tconst renderSaveChangesMessage = () => {\n\t\tif (showDeactivationWarning)\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<span>Save all changes made?</span>\n\t\t\t\t\t<br />\n\t\t\t\t\t<br />\n\t\t\t\t\t<strong>NOTE:</strong><br />\n\t\t\t\t\t<span>You changed the expiry date of this role. This will deactivate the role.</span>\n\t\t\t\t</>\n\t\t\t)\n\t\telse\n\t\t\treturn 'Save all changes made?'\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t{\n\t\t\t\tisRedirect &&\n\t\t\t\t<Redirect\n\t\t\t\t\tto={{\n\t\t\t\t\t\tpathname: '/system-admin/users',\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t}\n\t\t\t<SubHeader\n\t\t\t\theadingTitle={breadCrumbs[1] ? breadCrumbs[1].name : ''}\n\t\t\t\tbreadCrumbsArray={breadCrumbs}\n\t\t\t\tbuttonFunc={editRole}\n\t\t\t\tbuttonName={'Edit Role'}\n\t\t\t\tlayoutType={'layout_1'}\n\t\t\t\tenableButton={mode === 'view' && activeItem === 'Policies' && policyResponse.is_processmaker === false ? true : false}\n\t\t\t></SubHeader>\n\t\t\t<div className={classes.main}>\n\t\t\t\t{loading ?\n\t\t\t\t\t(<LoadingIndicator />) : null\n\t\t\t\t}\n\t\t\t\t<Grid container xs={12}>\n\t\t\t\t\t<Grid item xs={3} className={classes.sideBarContainer}>\n\t\t\t\t\t\t<SideMenu\n\t\t\t\t\t\t\titems={sideBarItems}\n\t\t\t\t\t\t\tactiveItems={activeSideBarItem}\n\t\t\t\t\t\t\tsetActiveItem={activeItemIndex}\n\t\t\t\t\t\t></SideMenu>\n\t\t\t\t\t</Grid>\n\t\t\t\t\t<Grid item xs={9} className={classes.contentContainer}>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tactiveItem == 'Policies' &&\n\t\t\t\t\t\t\t<Policies\n\t\t\t\t\t\t\t\trbacList={rbacList}\n\t\t\t\t\t\t\t\tloadRbacList={loadRbacList.data}\n\t\t\t\t\t\t\t\tmoduleName={moduleName}\n\t\t\t\t\t\t\t\troleId={roleId}\n\t\t\t\t\t\t\t\trows={policyResponse}\n\t\t\t\t\t\t\t\tmode={mode}\n\t\t\t\t\t\t\t\tclasses={classes}\n\t\t\t\t\t\t\t\tviewOnly={viewOnly}\n\t\t\t\t\t\t\t\tisEdited={isEdited}\n\t\t\t\t\t\t\t\trbacState={rbacState}\n\t\t\t\t\t\t\t\tonSearch={(search: string) => {\n\t\t\t\t\t\t\t\t\thandGetRbacList(\n\t\t\t\t\t\t\t\t\t\trbacState.filter,\n\t\t\t\t\t\t\t\t\t\trbacState.order,\n\t\t\t\t\t\t\t\t\t\trbacState.limit,\n\t\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\t\trbacState.page,\n\t\t\t\t\t\t\t\t\t\tpolicyData ? policyData : policyResponse,\n\t\t\t\t\t\t\t\t\t\tmode,\n\t\t\t\t\t\t\t\t\t\tsearch\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonNavigateSideMenu={(name: string) => {\n\t\t\t\t\t\t\t\t\tactiveSideBarItem(name)\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonChangeModuleName={(name: string) => {\n\t\t\t\t\t\t\t\t\thandleChangeModuleName(name)\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonUpdateChange={(data: any) => {\n\t\t\t\t\t\t\t\t\tsetPolicyData(data);\n\t\t\t\t\t\t\t\t\tsetIsEdited(true);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonPageChange={(page: number) => {\n\t\t\t\t\t\t\t\t\tlet skip = page * rbacState.limit\n\t\t\t\t\t\t\t\t\thandGetRbacList(\n\t\t\t\t\t\t\t\t\t\trbacState.filter,\n\t\t\t\t\t\t\t\t\t\trbacState.order,\n\t\t\t\t\t\t\t\t\t\trbacState.limit,\n\t\t\t\t\t\t\t\t\t\tskip,\n\t\t\t\t\t\t\t\t\t\tpage,\n\t\t\t\t\t\t\t\t\t\tpolicyData ? policyData : policyResponse,\n\t\t\t\t\t\t\t\t\t\tmode,\n\t\t\t\t\t\t\t\t\t)\n\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonPageSizeChange={(size: number) => {\n\t\t\t\t\t\t\t\t\thandGetRbacList(\n\t\t\t\t\t\t\t\t\t\trbacState.filter,\n\t\t\t\t\t\t\t\t\t\trbacState.order,\n\t\t\t\t\t\t\t\t\t\tsize,\n\t\t\t\t\t\t\t\t\t\trbacState.skip,\n\t\t\t\t\t\t\t\t\t\trbacState.currentPage,\n\t\t\t\t\t\t\t\t\t\tpolicyData ? policyData : policyResponse,\n\t\t\t\t\t\t\t\t\t\tmode,\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonFilterChange={(filter: any) => {\n\t\t\t\t\t\t\t\t\thandGetRbacList(\n\t\t\t\t\t\t\t\t\t\tfilter,\n\t\t\t\t\t\t\t\t\t\trbacState.order,\n\t\t\t\t\t\t\t\t\t\trbacState.limit,\n\t\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\t\tpolicyData ? policyData : policyResponse,\n\t\t\t\t\t\t\t\t\t\tmode,\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonSortChange={(sort: any) => {\n\t\t\t\t\t\t\t\t\thandGetRbacList(\n\t\t\t\t\t\t\t\t\t\trbacState.filter,\n\t\t\t\t\t\t\t\t\t\tsort,\n\t\t\t\t\t\t\t\t\t\trbacState.limit,\n\t\t\t\t\t\t\t\t\t\trbacState.skip,\n\t\t\t\t\t\t\t\t\t\trbacState.currentPage,\n\t\t\t\t\t\t\t\t\t\tpolicyData ? policyData : policyResponse,\n\t\t\t\t\t\t\t\t\t\tmode,\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tactiveItem == 'Groups And Users' &&\n\t\t\t\t\t\t\t<GroupsAndUsers\n\t\t\t\t\t\t\t\trows={policyResponse}\n\t\t\t\t\t\t\t\tclasses={classes}\n\t\t\t\t\t\t\t\tviewOnly={viewOnly}\n\t\t\t\t\t\t\t\topenSideModalBlock={isOpenSideModalBlock}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</div>\n\t\t\t<ModalComponent\n\t\t\t\tisModalOpen={isModalConfirmSaveOpen}\n\t\t\t\tonClose={handleModalConfirmationClose}\n\t\t\t\tmessage={renderSaveChangesMessage()}\n\t\t\t\ttitle={'Confirmation'}\n\t\t\t\tbuttons={\n\t\t\t\t\t<Grid container justify=\"center\" alignItems=\"center\">\n\t\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t\t<Button onClick={() => { setIsModalConfirmSaveOpen(false) }} className={classes.button} variant={'outlined'} color={'secondary'}>Cancel</Button>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t\t\t\tvariant={'contained'}\n\t\t\t\t\t\t\t\tcolor={'primary'}\n\t\t\t\t\t\t\t\tonClick={() => handleOnSave()}\n\t\t\t\t\t\t\t>Save</Button>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n\t\t\t\t}\n\t\t\t/>\n\t\t\t<ModalComponent\n\t\t\t\tisModalOpen={isModalConfirmExitOpen}\n\t\t\t\tonClose={handleModalConfirmationClose}\n\t\t\t\tmessage={'Exit and remove all changes made?'}\n\t\t\t\ttitle={'Confirmation'}\n\t\t\t\tbuttons={\n\t\t\t\t\t<Grid container justify=\"center\" alignItems=\"center\">\n\t\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tsetIsModalConfirmExitOpen(false)\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t\t\t\tvariant={'outlined'}\n\t\t\t\t\t\t\t\tcolor={'secondary'}\n\t\t\t\t\t\t\t>Cancel</Button>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t\t\t\tvariant={'contained'}\n\t\t\t\t\t\t\t\tcolor={'primary'}\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\thandleRemoveAllChanges()\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>Continue</Button>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n\t\t\t\t}\n\t\t\t/>\n\t\t\t<ModalComponent\n\t\t\t\tisModalOpen={isModalSaveSuccessOpen}\n\t\t\t\tonClose={() => { setIsmodalSaveSuccessOpen(false) }}\n\t\t\t\tmessage={'Changes has been saved.'}\n\t\t\t\ttitle={'Save Success'}\n\t\t\t\tbuttons={\n\t\t\t\t\t<Grid container justify=\"center\" alignItems=\"center\">\n\t\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t\t\t\tvariant={'contained'}\n\t\t\t\t\t\t\t\tcolor={'primary'}\n\t\t\t\t\t\t\t\tonClick={() => { setIsmodalSaveSuccessOpen(false) }}\n\t\t\t\t\t\t\t>Okay</Button>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n\t\t\t\t}\n\t\t\t/>\n\t\t\t{\n\t\t\t\tmode === 'edit' && activeItem === 'Policies' && policyData !== '' && isEdited === true ?\n\t\t\t\t\t<FloatingFooter>\n\t\t\t\t\t\t<Grid container spacing={1} justify={'flex-end'} style={{ textAlign: 'right' }}>\n\t\t\t\t\t\t\t<Grid item>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t\t\t\t\tvariant={'contained'}\n\n\t\t\t\t\t\t\t\t\tcolor={'primary'}\n\t\t\t\t\t\t\t\t\tstyle={{ backgroundColor: '#3C394A' }}\n\t\t\t\t\t\t\t\t\tonClick={() => setIsModalConfirmExitOpen(true)}\n\t\t\t\t\t\t\t\t>Cancel</Button>\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t<Grid item>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t\t\t\t\tvariant={'contained'}\n\t\t\t\t\t\t\t\t\tcolor={'primary'}\n\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\tconst today = moment().startOf('day')\n\t\t\t\t\t\t\t\t\t\tconst exp_date = policyData && policyData.expiry_date ? moment(policyData.expiry_date).startOf('day') : undefined;\n\n\t\t\t\t\t\t\t\t\t\tif (today.isSameOrAfter(exp_date)) {\n\t\t\t\t\t\t\t\t\t\t\tsetShowDeactivationWarning(true)\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tsetShowDeactivationWarning(false)\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tsetIsModalConfirmSaveOpen(true)\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>Save Changes</Button>\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</FloatingFooter>\n\n\t\t\t\t\t: \"\"\n\t\t\t}\n\t\t</>\n\t);\n}\n\nconst mapStateToProps = (state: Store) => state.roles;\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n\tMap: bindActionCreators(RolesActions.Map, dispatch),\n});\n\nexport { mapStateToProps, mapDispatchToProps };\n"],"sourceRoot":""}